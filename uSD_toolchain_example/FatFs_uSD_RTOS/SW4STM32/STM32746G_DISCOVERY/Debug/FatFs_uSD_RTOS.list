
FatFs_uSD_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006630  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d34  08006d34  00007d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08006d38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024a8  20000014  08006d4c  00008014  2**2
                  ALLOC
  8 ._user_heap_stack 00000a04  200024bc  08006d4c  000084bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 10 .debug_line   00024fcd  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000f4  00000000  00000000  0002d011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0002316d  00000000  00000000  0002d105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005052  00000000  00000000  00050272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  000552c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0010b372  00000000  00000000  00056938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017fc  00000000  00000000  00161caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0001026a  00000000  00000000  001634a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a388  00000000  00000000  00173710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019da98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  0019dadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067e8 	.word	0x080067e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080067e8 	.word	0x080067e8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000574 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000542:	e003      	b.n	800054c <LoopCopyDataInit>

08000544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800054a:	3104      	adds	r1, #4

0800054c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800054c:	480b      	ldr	r0, [pc, #44]	@ (800057c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000554:	d3f6      	bcc.n	8000544 <CopyDataInit>
  ldr  r2, =_sbss
 8000556:	4a0b      	ldr	r2, [pc, #44]	@ (8000584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000558:	e002      	b.n	8000560 <LoopFillZerobss>

0800055a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800055a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800055c:	f842 3b04 	str.w	r3, [r2], #4

08000560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000564:	d3f9      	bcc.n	800055a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000566:	f000 fb0d 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056a:	f006 f90b 	bl	8006784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800056e:	f000 f887 	bl	8000680 <main>
  bx  lr    
 8000572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000574:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000578:	08006d38 	.word	0x08006d38
  ldr  r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000580:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000584:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000588:	200024bc 	.word	0x200024bc

0800058c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC_IRQHandler>

0800058e <Error_Handler>:
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED1 on */
  BSP_LED_On(LED1);
 800058e:	2000      	movs	r0, #0
{
 8000590:	b508      	push	{r3, lr}
  BSP_LED_On(LED1);
 8000592:	f000 f98b 	bl	80008ac <BSP_LED_On>
  while(1)
  {
    BSP_LED_Toggle(LED1);
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f992 	bl	80008c0 <BSP_LED_Toggle>
    HAL_Delay(200);
 800059c:	20c8      	movs	r0, #200	@ 0xc8
 800059e:	f000 fb3d 	bl	8000c1c <HAL_Delay>
  while(1)
 80005a2:	e7f8      	b.n	8000596 <Error_Handler+0x8>

080005a4 <StartThread>:
{
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	b0a6      	sub	sp, #152	@ 0x98
  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80005a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <StartThread+0xc4>)
 80005aa:	aa04      	add	r2, sp, #16
 80005ac:	f103 0620 	add.w	r6, r3, #32
 80005b0:	4615      	mov	r5, r2
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	3308      	adds	r3, #8
 80005b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80005ba:	4614      	mov	r4, r2
 80005bc:	42b3      	cmp	r3, r6
 80005be:	c403      	stmia	r4!, {r0, r1}
 80005c0:	4622      	mov	r2, r4
 80005c2:	d1f6      	bne.n	80005b2 <StartThread+0xe>
 80005c4:	781b      	ldrb	r3, [r3, #0]
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80005c6:	4929      	ldr	r1, [pc, #164]	@ (800066c <StartThread+0xc8>)
 80005c8:	4829      	ldr	r0, [pc, #164]	@ (8000670 <StartThread+0xcc>)
  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80005ca:	7023      	strb	r3, [r4, #0]
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80005cc:	f004 fae8 	bl	8004ba0 <FATFS_LinkDriver>
 80005d0:	4602      	mov	r2, r0
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d143      	bne.n	800065e <StartThread+0xba>
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80005d6:	4925      	ldr	r1, [pc, #148]	@ (800066c <StartThread+0xc8>)
 80005d8:	1d08      	adds	r0, r1, #4
 80005da:	f003 fc83 	bl	8003ee4 <f_mount>
 80005de:	4602      	mov	r2, r0
 80005e0:	b108      	cbz	r0, 80005e6 <StartThread+0x42>
      Error_Handler();
 80005e2:	f7ff ffd4 	bl	800058e <Error_Handler>
      if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 80005e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ea:	2107      	movs	r1, #7
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <StartThread+0xd0>)
 80005f0:	f5a3 700f 	sub.w	r0, r3, #572	@ 0x23c
 80005f4:	f003 ffdc 	bl	80045b0 <f_mkfs>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d1f2      	bne.n	80005e2 <StartThread+0x3e>
        if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80005fc:	220a      	movs	r2, #10
 80005fe:	491e      	ldr	r1, [pc, #120]	@ (8000678 <StartThread+0xd4>)
 8000600:	481e      	ldr	r0, [pc, #120]	@ (800067c <StartThread+0xd8>)
 8000602:	f003 fcb3 	bl	8003f6c <f_open>
 8000606:	2800      	cmp	r0, #0
 8000608:	d1eb      	bne.n	80005e2 <StartThread+0x3e>
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800060a:	ab02      	add	r3, sp, #8
 800060c:	2221      	movs	r2, #33	@ 0x21
 800060e:	4629      	mov	r1, r5
 8000610:	481a      	ldr	r0, [pc, #104]	@ (800067c <StartThread+0xd8>)
 8000612:	f003 fe85 	bl	8004320 <f_write>
          if((byteswritten == 0) || (res != FR_OK))
 8000616:	9b02      	ldr	r3, [sp, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0e2      	beq.n	80005e2 <StartThread+0x3e>
 800061c:	2800      	cmp	r0, #0
 800061e:	d1e0      	bne.n	80005e2 <StartThread+0x3e>
            f_close(&MyFile);
 8000620:	4816      	ldr	r0, [pc, #88]	@ (800067c <StartThread+0xd8>)
 8000622:	f003 ffac 	bl	800457e <f_close>
            if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 8000626:	2201      	movs	r2, #1
 8000628:	4913      	ldr	r1, [pc, #76]	@ (8000678 <StartThread+0xd4>)
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <StartThread+0xd8>)
 800062c:	f003 fc9e 	bl	8003f6c <f_open>
 8000630:	2800      	cmp	r0, #0
 8000632:	d1d6      	bne.n	80005e2 <StartThread+0x3e>
              res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8000634:	ab03      	add	r3, sp, #12
 8000636:	2264      	movs	r2, #100	@ 0x64
 8000638:	a90d      	add	r1, sp, #52	@ 0x34
 800063a:	4810      	ldr	r0, [pc, #64]	@ (800067c <StartThread+0xd8>)
 800063c:	f003 fdaa 	bl	8004194 <f_read>
              if((bytesread == 0) || (res != FR_OK))
 8000640:	9b03      	ldr	r3, [sp, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0cd      	beq.n	80005e2 <StartThread+0x3e>
 8000646:	2800      	cmp	r0, #0
 8000648:	d1cb      	bne.n	80005e2 <StartThread+0x3e>
                f_close(&MyFile);
 800064a:	480c      	ldr	r0, [pc, #48]	@ (800067c <StartThread+0xd8>)
 800064c:	f003 ff97 	bl	800457e <f_close>
                if ((bytesread != byteswritten))
 8000650:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8000654:	429a      	cmp	r2, r3
 8000656:	d1c4      	bne.n	80005e2 <StartThread+0x3e>
                  BSP_LED_On(LED1);
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f927 	bl	80008ac <BSP_LED_On>
  FATFS_UnLinkDriver(SDPath);
 800065e:	4803      	ldr	r0, [pc, #12]	@ (800066c <StartThread+0xc8>)
 8000660:	f004 faba 	bl	8004bd8 <FATFS_UnLinkDriver>
  for( ;; )
 8000664:	e7fe      	b.n	8000664 <StartThread+0xc0>
 8000666:	bf00      	nop
 8000668:	08006cb4 	.word	0x08006cb4
 800066c:	20000030 	.word	0x20000030
 8000670:	080068e8 	.word	0x080068e8
 8000674:	2000026c 	.word	0x2000026c
 8000678:	08006caa 	.word	0x08006caa
 800067c:	2000066c 	.word	0x2000066c

08000680 <main>:
{
 8000680:	b500      	push	{lr}
 8000682:	b093      	sub	sp, #76	@ 0x4c
  HAL_MPU_Disable();

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000684:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000686:	f000 fb2d 	bl	8000ce4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800068a:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800068c:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800068e:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000692:	f248 731f 	movw	r3, #34591	@ 0x871f
 8000696:	e9cd 4307 	strd	r4, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800069a:	f240 1301 	movw	r3, #257	@ 0x101
 800069e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006a0:	f000 fb3e 	bl	8000d20 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006a4:	2004      	movs	r0, #4
 80006a6:	f000 fb2b 	bl	8000d00 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006ae:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b2:	4a38      	ldr	r2, [pc, #224]	@ (8000794 <main+0x114>)
 80006b4:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c0:	6953      	ldr	r3, [r2, #20]
 80006c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006cc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80006d0:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006d4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006dc:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006e0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006e4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80006e8:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006ea:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ee:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006f0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006f4:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006f6:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80006fa:	d2f9      	bcs.n	80006f0 <main+0x70>
    } while(sets-- != 0U);
 80006fc:	3b20      	subs	r3, #32
 80006fe:	f113 0f20 	cmn.w	r3, #32
 8000702:	d1f2      	bne.n	80006ea <main+0x6a>
 8000704:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000708:	6953      	ldr	r3, [r2, #20]
 800070a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800070e:	6153      	str	r3, [r2, #20]
 8000710:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000714:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000718:	f000 fa5c 	bl	8000bd4 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000720:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8000724:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000730:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8000734:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000738:	e9cd 030e 	strd	r0, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800073c:	2309      	movs	r3, #9
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800073e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000740:	9311      	str	r3, [sp, #68]	@ 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000742:	f000 fe17 	bl	8001374 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000746:	b100      	cbz	r0, 800074a <main+0xca>
    while(1) { ; }
 8000748:	e7fe      	b.n	8000748 <main+0xc8>
  ret = HAL_PWREx_EnableOverDrive();
 800074a:	f000 fddb 	bl	8001304 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 800074e:	b100      	cbz	r0, 8000752 <main+0xd2>
    while(1) { ; }
 8000750:	e7fe      	b.n	8000750 <main+0xd0>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000752:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 8000754:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	9003      	str	r0, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800075a:	2107      	movs	r1, #7
 800075c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800076a:	f000 ffeb 	bl	8001744 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800076e:	4606      	mov	r6, r0
 8000770:	b100      	cbz	r0, 8000774 <main+0xf4>
    while(1) { ; }
 8000772:	e7fe      	b.n	8000772 <main+0xf2>
  osThreadDef(uSDThread, StartThread, osPriorityNormal, 0, 8 * configMINIMAL_STACK_SIZE);
 8000774:	4d08      	ldr	r5, [pc, #32]	@ (8000798 <main+0x118>)
  BSP_LED_Init(LED1);
 8000776:	f000 f875 	bl	8000864 <BSP_LED_Init>
  osThreadDef(uSDThread, StartThread, osPriorityNormal, 0, 8 * configMINIMAL_STACK_SIZE);
 800077a:	ac06      	add	r4, sp, #24
 800077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000780:	682b      	ldr	r3, [r5, #0]
  osThreadCreate(osThread(uSDThread), NULL);
 8000782:	4631      	mov	r1, r6
 8000784:	a806      	add	r0, sp, #24
  osThreadDef(uSDThread, StartThread, osPriorityNormal, 0, 8 * configMINIMAL_STACK_SIZE);
 8000786:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(uSDThread), NULL);
 8000788:	f004 fb87 	bl	8004e9a <osThreadCreate>
  osKernelStart();
 800078c:	f004 fb72 	bl	8004e74 <osKernelStart>
  for( ;; );
 8000790:	e7fe      	b.n	8000790 <main+0x110>
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00
 8000798:	08006800 	.word	0x08006800

0800079c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800079c:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800079e:	2200      	movs	r2, #0
 80007a0:	2036      	movs	r0, #54	@ 0x36
{
 80007a2:	b510      	push	{r4, lr}
 80007a4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80007a6:	f000 fa5d 	bl	8000c64 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007aa:	2036      	movs	r0, #54	@ 0x36
 80007ac:	f000 fa8c 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b2:	a901      	add	r1, sp, #4
 80007b4:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007b8:	f042 0210 	orr.w	r2, r2, #16
 80007bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c8:	f001 f86a 	bl	80018a0 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80007cc:	9b06      	ldr	r3, [sp, #24]
 80007ce:	b9c3      	cbnz	r3, 8000802 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007d0:	f001 f856 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80007d4:	4c0f      	ldr	r4, [pc, #60]	@ (8000814 <HAL_InitTick+0x78>)
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <HAL_InitTick+0x7c>)
 80007d8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80007da:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80007de:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <HAL_InitTick+0x80>)
 80007e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80007e6:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 80007e8:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80007ea:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80007ec:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 80007ee:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80007f2:	f001 ff2d 	bl	8002650 <HAL_TIM_Base_Init>
 80007f6:	b940      	cbnz	r0, 800080a <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f001 fdef 	bl	80023dc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80007fe:	b008      	add	sp, #32
 8000800:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000802:	f001 f83d 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8000806:	0040      	lsls	r0, r0, #1
 8000808:	e7e4      	b.n	80007d4 <HAL_InitTick+0x38>
  return HAL_ERROR;
 800080a:	2001      	movs	r0, #1
 800080c:	e7f7      	b.n	80007fe <HAL_InitTick+0x62>
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	2000089c 	.word	0x2000089c
 8000818:	40001000 	.word	0x40001000
 800081c:	000f4240 	.word	0x000f4240

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8000820:	f000 b9ea 	b.w	8000bf8 <HAL_IncTick>

08000824 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000824:	4801      	ldr	r0, [pc, #4]	@ (800082c <TIM6_DAC_IRQHandler+0x8>)
 8000826:	f001 be1b 	b.w	8002460 <HAL_TIM_IRQHandler>
 800082a:	bf00      	nop
 800082c:	2000089c 	.word	0x2000089c

08000830 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000830:	4770      	bx	lr

08000832 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler>

08000834 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler>

08000836 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler>

08000838 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler>

0800083a <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 800083c:	f004 bc1a 	b.w	8005074 <osSystickHandler>

08000840 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SDMMC_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 8000840:	4801      	ldr	r0, [pc, #4]	@ (8000848 <SDMMC1_IRQHandler+0x8>)
 8000842:	f001 bcc7 	b.w	80021d4 <HAL_SD_IRQHandler>
 8000846:	bf00      	nop
 8000848:	200008e8 	.word	0x200008e8

0800084c <DMA2_Stream6_IRQHandler>:
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 800084c:	4b01      	ldr	r3, [pc, #4]	@ (8000854 <DMA2_Stream6_IRQHandler+0x8>)
 800084e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000850:	f000 bba0 	b.w	8000f94 <HAL_DMA_IRQHandler>
 8000854:	200008e8 	.word	0x200008e8

08000858 <DMA2_Stream3_IRQHandler>:
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8000858:	4b01      	ldr	r3, [pc, #4]	@ (8000860 <DMA2_Stream3_IRQHandler+0x8>)
 800085a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800085c:	f000 bb9a 	b.w	8000f94 <HAL_DMA_IRQHandler>
 8000860:	200008e8 	.word	0x200008e8

08000864 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000864:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8000866:	4604      	mov	r4, r0
{
 8000868:	b087      	sub	sp, #28
  if (Led == LED1)
 800086a:	b9c8      	cbnz	r0, 80008a0 <BSP_LED_Init+0x3c>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 800086c:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <BSP_LED_Init+0x40>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2502      	movs	r5, #2
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8000870:	a901      	add	r1, sp, #4
 8000872:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800088c:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8000892:	f000 fc3f 	bl	8001114 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8000896:	4622      	mov	r2, r4
 8000898:	4629      	mov	r1, r5
 800089a:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <BSP_LED_Init+0x44>)
 800089c:	f000 fd24 	bl	80012e8 <HAL_GPIO_WritePin>
  }
}
 80008a0:	b007      	add	sp, #28
 80008a2:	bd30      	pop	{r4, r5, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40022000 	.word	0x40022000

080008ac <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 80008ac:	b920      	cbnz	r0, 80008b8 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2102      	movs	r1, #2
 80008b2:	4802      	ldr	r0, [pc, #8]	@ (80008bc <BSP_LED_On+0x10>)
 80008b4:	f000 bd18 	b.w	80012e8 <HAL_GPIO_WritePin>
  }
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <BSP_LED_Toggle>:
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 80008c0:	b918      	cbnz	r0, 80008ca <BSP_LED_Toggle+0xa>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 80008c2:	2102      	movs	r1, #2
 80008c4:	4801      	ldr	r0, [pc, #4]	@ (80008cc <BSP_LED_Toggle+0xc>)
 80008c6:	f000 bd14 	b.w	80012f2 <HAL_GPIO_TogglePin>
  }
}
 80008ca:	4770      	bx	lr
 80008cc:	40022000 	.word	0x40022000

080008d0 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 80008d0:	2301      	movs	r3, #1
{
 80008d2:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80008d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 80008da:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80008de:	f000 fcfd 	bl	80012dc <HAL_GPIO_ReadPin>
 80008e2:	2801      	cmp	r0, #1
 80008e4:	d102      	bne.n	80008ec <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80008ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80008f0:	b003      	add	sp, #12
 80008f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f6:	bf00      	nop
 80008f8:	40020800 	.word	0x40020800

080008fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 80008fc:	b508      	push	{r3, lr}
 80008fe:	4613      	mov	r3, r2
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8000900:	460a      	mov	r2, r1
 8000902:	4601      	mov	r1, r0
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <BSP_SD_ReadBlocks_DMA+0x18>)
 8000906:	f001 f857 	bl	80019b8 <HAL_SD_ReadBlocks_DMA>
  }
  else
  {
    return MSD_OK;
  }
}
 800090a:	3800      	subs	r0, #0
 800090c:	bf18      	it	ne
 800090e:	2001      	movne	r0, #1
 8000910:	bd08      	pop	{r3, pc}
 8000912:	bf00      	nop
 8000914:	200008e8 	.word	0x200008e8

08000918 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 8000918:	b508      	push	{r3, lr}
 800091a:	4613      	mov	r3, r2
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800091c:	460a      	mov	r2, r1
 800091e:	4601      	mov	r1, r0
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <BSP_SD_WriteBlocks_DMA+0x18>)
 8000922:	f001 f8d5 	bl	8001ad0 <HAL_SD_WriteBlocks_DMA>
  }
  else
  {
    return MSD_OK;
  }
}
 8000926:	3800      	subs	r0, #0
 8000928:	bf18      	it	ne
 800092a:	2001      	movne	r0, #1
 800092c:	bd08      	pop	{r3, pc}
 800092e:	bf00      	nop
 8000930:	200008e8 	.word	0x200008e8

08000934 <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000934:	4b58      	ldr	r3, [pc, #352]	@ (8000a98 <BSP_SD_MspInit+0x164>)
 8000936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
{
 800093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000940:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000942:	645a      	str	r2, [r3, #68]	@ 0x44
 8000944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8000946:	f04f 0803 	mov.w	r8, #3
{
 800094a:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 800094c:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000950:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000954:	a905      	add	r1, sp, #20
 8000956:	4851      	ldr	r0, [pc, #324]	@ (8000a9c <BSP_SD_MspInit+0x168>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000958:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800095a:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800095c:	f44f 4b80 	mov.w	fp, #16384	@ 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000960:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8000962:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 8000966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8000968:	4c4d      	ldr	r4, [pc, #308]	@ (8000aa0 <BSP_SD_MspInit+0x16c>)
  __DMAx_TxRx_CLK_ENABLE();
 800096a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800096e:	4627      	mov	r7, r4
  __DMAx_TxRx_CLK_ENABLE();
 8000970:	631a      	str	r2, [r3, #48]	@ 0x30
 8000972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000974:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000978:	9202      	str	r2, [sp, #8]
 800097a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800097e:	f042 0204 	orr.w	r2, r2, #4
 8000982:	631a      	str	r2, [r3, #48]	@ 0x30
 8000984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000986:	f002 0204 	and.w	r2, r2, #4
 800098a:	9203      	str	r2, [sp, #12]
 800098c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000990:	f042 0208 	orr.w	r2, r2, #8
 8000994:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000996:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	9304      	str	r3, [sp, #16]
 80009a0:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 80009a8:	230c      	movs	r3, #12
 80009aa:	e9cd 8308 	strd	r8, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80009ae:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80009b2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80009b4:	f000 fbae 	bl	8001114 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80009b8:	a905      	add	r1, sp, #20
 80009ba:	483a      	ldr	r0, [pc, #232]	@ (8000aa4 <BSP_SD_MspInit+0x170>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 80009bc:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80009c0:	f000 fba8 	bl	8001114 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	210e      	movs	r1, #14
 80009c8:	2031      	movs	r0, #49	@ 0x31
 80009ca:	f000 f94b 	bl	8000c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80009ce:	2031      	movs	r0, #49	@ 0x31
 80009d0:	f000 f97a 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80009dc:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80009e0:	4831      	ldr	r0, [pc, #196]	@ (8000aa8 <BSP_SD_MspInit+0x174>)
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80009e2:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80009e6:	f847 0f84 	str.w	r0, [r7, #132]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80009ea:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80009ec:	642f      	str	r7, [r5, #64]	@ 0x40
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80009ee:	f8c4 80ac 	str.w	r8, [r4, #172]	@ 0xac
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80009f2:	f8c4 50bc 	str.w	r5, [r4, #188]	@ 0xbc
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009f6:	e9c4 2325 	strd	r2, r3, [r4, #148]	@ 0x94
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80009fa:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80009fe:	e9c4 1622 	strd	r1, r6, [r4, #136]	@ 0x88
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000a02:	e9c4 3929 	strd	r3, r9, [r4, #164]	@ 0xa4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a06:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 8000a0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8000a0e:	e9c4 ba27 	strd	fp, sl, [r4, #156]	@ 0x9c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a12:	e9c4 132c 	strd	r1, r3, [r4, #176]	@ 0xb0
  HAL_DMA_DeInit(&dma_rx_handle);
 8000a16:	f000 fa43 	bl	8000ea0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8000a1a:	4638      	mov	r0, r7
 8000a1c:	f000 f9c2 	bl	8000da4 <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a28:	f44f 0700 	mov.w	r7, #8388608	@ 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000a2c:	2140      	movs	r1, #64	@ 0x40
 8000a2e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a32:	f8c4 60f0 	str.w	r6, [r4, #240]	@ 0xf0
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a36:	f8c4 810c 	str.w	r8, [r4, #268]	@ 0x10c
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8000a3a:	f8c4 511c 	str.w	r5, [r4, #284]	@ 0x11c
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a3e:	e9c4 233d 	strd	r2, r3, [r4, #244]	@ 0xf4
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000a42:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000a46:	e9c4 3941 	strd	r3, r9, [r4, #260]	@ 0x104
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000a4e:	e9c4 7344 	strd	r7, r3, [r4, #272]	@ 0x110
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <BSP_SD_MspInit+0x178>)
 8000a54:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000a56:	e9c4 013a 	strd	r0, r1, [r4, #232]	@ 0xe8
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8000a5a:	f847 3fe4 	str.w	r3, [r7, #228]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8000a5e:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8000a60:	63ef      	str	r7, [r5, #60]	@ 0x3c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8000a62:	e9c4 ba3f 	strd	fp, sl, [r4, #252]	@ 0xfc
  HAL_DMA_DeInit(&dma_tx_handle);
 8000a66:	f000 fa1b 	bl	8000ea0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	f000 f99a 	bl	8000da4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8000a70:	4632      	mov	r2, r6
 8000a72:	210f      	movs	r1, #15
 8000a74:	203b      	movs	r0, #59	@ 0x3b
 8000a76:	f000 f8f5 	bl	8000c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8000a7a:	203b      	movs	r0, #59	@ 0x3b
 8000a7c:	f000 f924 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8000a80:	4632      	mov	r2, r6
 8000a82:	210f      	movs	r1, #15
 8000a84:	2045      	movs	r0, #69	@ 0x45
 8000a86:	f000 f8ed 	bl	8000c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8000a8a:	2045      	movs	r0, #69	@ 0x45
 8000a8c:	f000 f91c 	bl	8000cc8 <HAL_NVIC_EnableIRQ>
}
 8000a90:	b00b      	add	sp, #44	@ 0x2c
 8000a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	200008e8 	.word	0x200008e8
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40026458 	.word	0x40026458
 8000aac:	400264a0 	.word	0x400264a0

08000ab0 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8000ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000ab4:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8000ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000aba:	f042 0204 	orr.w	r2, r2, #4
 8000abe:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8000ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8000ada:	a901      	add	r1, sp, #4
 8000adc:	f000 fb1a 	bl	8001114 <HAL_GPIO_Init>
}
 8000ae0:	b007      	add	sp, #28
 8000ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020800 	.word	0x40020800

08000af0 <BSP_SD_Init>:
{ 
 8000af0:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 8000af2:	4c13      	ldr	r4, [pc, #76]	@ (8000b40 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8000af4:	2600      	movs	r6, #0
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8000af8:	4631      	mov	r1, r6
 8000afa:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8000afc:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8000afe:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b02:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b06:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8000b0a:	f7ff ffd1 	bl	8000ab0 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8000b0e:	f7ff fedf 	bl	80008d0 <BSP_SD_IsDetected>
 8000b12:	2801      	cmp	r0, #1
 8000b14:	4605      	mov	r5, r0
 8000b16:	d111      	bne.n	8000b3c <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 8000b18:	4620      	mov	r0, r4
 8000b1a:	4631      	mov	r1, r6
 8000b1c:	f7ff ff0a 	bl	8000934 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8000b20:	4620      	mov	r0, r4
 8000b22:	f001 fa3b 	bl	8001f9c <HAL_SD_Init>
 8000b26:	b938      	cbnz	r0, 8000b38 <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000b28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f001 fa63 	bl	8001ff8 <HAL_SD_ConfigWideBusOperation>
 8000b32:	1b85      	subs	r5, r0, r6
 8000b34:	bf18      	it	ne
 8000b36:	2501      	movne	r5, #1
}
 8000b38:	4628      	mov	r0, r5
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8000b3c:	2502      	movs	r5, #2
 8000b3e:	e7fb      	b.n	8000b38 <BSP_SD_Init+0x48>
 8000b40:	200008e8 	.word	0x200008e8
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8000b48:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000b4a:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <BSP_SD_GetCardState+0x10>)
 8000b4c:	f001 fade 	bl	800210c <HAL_SD_GetCardState>
}
 8000b50:	3804      	subs	r0, #4
 8000b52:	bf18      	it	ne
 8000b54:	2001      	movne	r0, #1
 8000b56:	bd08      	pop	{r3, pc}
 8000b58:	200008e8 	.word	0x200008e8

08000b5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8000b5c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8000b5e:	4801      	ldr	r0, [pc, #4]	@ (8000b64 <BSP_SD_GetCardInfo+0x8>)
 8000b60:	f001 ba37 	b.w	8001fd2 <HAL_SD_GetCardInfo>
 8000b64:	200008e8 	.word	0x200008e8

08000b68 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8000b68:	4770      	bx	lr

08000b6a <HAL_SD_AbortCallback>:
{
 8000b6a:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8000b6c:	f7ff fffc 	bl	8000b68 <BSP_SD_AbortCallback>
}
 8000b70:	bd08      	pop	{r3, pc}

08000b72 <HAL_SD_TxCpltCallback>:
{
 8000b72:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8000b74:	f004 f8ea 	bl	8004d4c <BSP_SD_WriteCpltCallback>
}
 8000b78:	bd08      	pop	{r3, pc}

08000b7a <HAL_SD_RxCpltCallback>:
{
 8000b7a:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8000b7c:	f004 f8f0 	bl	8004d60 <BSP_SD_ReadCpltCallback>
}
 8000b80:	bd08      	pop	{r3, pc}
	...

08000b84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	490f      	ldr	r1, [pc, #60]	@ (8000bc4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b86:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <SystemInit+0x44>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f042 0201 	orr.w	r2, r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000b9e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8000ba6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000baa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <SystemInit+0x48>)
 8000bae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000bb6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bb8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bbe:	608b      	str	r3, [r1, #8]
#endif
}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	24003010 	.word	0x24003010

08000bd0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd6:	2003      	movs	r0, #3
{
 8000bd8:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000bda:	6813      	ldr	r3, [r2, #0]
 8000bdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	f000 f82d 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff fdd8 	bl	800079c <HAL_InitTick>
  HAL_MspInit();
 8000bec:	f7ff fff0 	bl	8000bd0 <HAL_MspInit>
}
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	bd08      	pop	{r3, pc}
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bf8:	4a03      	ldr	r2, [pc, #12]	@ (8000c08 <HAL_IncTick+0x10>)
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <HAL_IncTick+0x14>)
 8000bfc:	6811      	ldr	r1, [r2, #0]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	440b      	add	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000aec 	.word	0x20000aec
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c10:	4b01      	ldr	r3, [pc, #4]	@ (8000c18 <HAL_GetTick+0x8>)
 8000c12:	6818      	ldr	r0, [r3, #0]
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000aec 	.word	0x20000aec

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff6 	bl	8000c10 <HAL_GetTick>
 8000c24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c28:	bf1e      	ittt	ne
 8000c2a:	4b04      	ldrne	r3, [pc, #16]	@ (8000c3c <HAL_Delay+0x20>)
 8000c2c:	781b      	ldrbne	r3, [r3, #0]
 8000c2e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	1b43      	subs	r3, r0, r5
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d3fa      	bcc.n	8000c30 <HAL_Delay+0x14>
  {
  }
}
 8000c3a:	bd38      	pop	{r3, r4, r5, pc}
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c42:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000c4e:	0412      	lsls	r2, r2, #16
 8000c50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000c5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b530      	push	{r4, r5, lr}
 8000c68:	68dc      	ldr	r4, [r3, #12]
 8000c6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	bf28      	it	cs
 8000c78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c80:	bf8c      	ite	hi
 8000c82:	3c03      	subhi	r4, #3
 8000c84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c86:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	fa03 f304 	lsl.w	r3, r3, r4
 8000c9c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ca4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	db06      	blt.n	8000cb6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000cac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000cb0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cb4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	f000 000f 	and.w	r0, r0, #15
 8000cba:	4a02      	ldr	r2, [pc, #8]	@ (8000cc4 <HAL_NVIC_SetPriority+0x60>)
 8000cbc:	5413      	strb	r3, [r2, r0]
 8000cbe:	e7f9      	b.n	8000cb4 <HAL_NVIC_SetPriority+0x50>
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	e000ed14 	.word	0xe000ed14

08000cc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	db07      	blt.n	8000cdc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ccc:	0941      	lsrs	r1, r0, #5
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f000 001f 	and.w	r0, r0, #31
 8000cd4:	4a02      	ldr	r2, [pc, #8]	@ (8000ce0 <HAL_NVIC_EnableIRQ+0x18>)
 8000cd6:	4083      	lsls	r3, r0
 8000cd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ce4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <HAL_MPU_Disable+0x18>)
 8000cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_MPU_Enable+0x1c>)
 8000d02:	f040 0001 	orr.w	r0, r0, #1
 8000d06:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000d10:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d16:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d20:	7843      	ldrb	r3, [r0, #1]
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_MPU_ConfigRegion+0x54>)
 8000d24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d28:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d34:	6843      	ldr	r3, [r0, #4]
 8000d36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d3a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d3c:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d3e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d40:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d44:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d46:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d48:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d4a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d4e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d50:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d54:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d56:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d5a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d60:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d66:	7a01      	ldrb	r1, [r0, #8]
 8000d68:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d6c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d78:	6803      	ldr	r3, [r0, #0]
{
 8000d7a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d7c:	2018      	movs	r0, #24
 8000d7e:	b2d9      	uxtb	r1, r3
 8000d80:	3910      	subs	r1, #16
 8000d82:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000d86:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d88:	4c05      	ldr	r4, [pc, #20]	@ (8000da0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000d8a:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d8c:	5c20      	ldrb	r0, [r4, r0]
 8000d8e:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d90:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8000d94:	f020 0003 	bic.w	r0, r0, #3
 8000d98:	bf88      	it	hi
 8000d9a:	3004      	addhi	r0, #4
 8000d9c:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000d9e:	bd10      	pop	{r4, pc}
 8000da0:	0800682c 	.word	0x0800682c

08000da4 <HAL_DMA_Init>:
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ff32 	bl	8000c10 <HAL_GetTick>
 8000dac:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d060      	beq.n	8000e74 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db2:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8000db4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000dc0:	6813      	ldr	r3, [r2, #0]
 8000dc2:	f023 0301 	bic.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	6813      	ldr	r3, [r2, #0]
 8000dcc:	07d8      	lsls	r0, r3, #31
 8000dce:	d42e      	bmi.n	8000e2e <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8000dd0:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd2:	4832      	ldr	r0, [pc, #200]	@ (8000e9c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd4:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd6:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8000ddc:	432b      	orrs	r3, r5
 8000dde:	68e5      	ldr	r5, [r4, #12]
 8000de0:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de2:	6925      	ldr	r5, [r4, #16]
 8000de4:	432b      	orrs	r3, r5
 8000de6:	6965      	ldr	r5, [r4, #20]
 8000de8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dea:	69e5      	ldr	r5, [r4, #28]
 8000dec:	430b      	orrs	r3, r1
 8000dee:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df0:	6a25      	ldr	r5, [r4, #32]
 8000df2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df4:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000df8:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dfa:	bf02      	ittt	eq
 8000dfc:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8000e00:	4335      	orreq	r5, r6
 8000e02:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e04:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8000e06:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8000e08:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e0a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000e0e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e12:	d135      	bne.n	8000e80 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8000e14:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e16:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000e18:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e1a:	b38d      	cbz	r5, 8000e80 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e1c:	b991      	cbnz	r1, 8000e44 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8000e1e:	2801      	cmp	r0, #1
 8000e20:	d020      	beq.n	8000e64 <HAL_DMA_Init+0xc0>
 8000e22:	f030 0102 	bics.w	r1, r0, #2
 8000e26:	d12b      	bne.n	8000e80 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e28:	01e9      	lsls	r1, r5, #7
 8000e2a:	d529      	bpl.n	8000e80 <HAL_DMA_Init+0xdc>
 8000e2c:	e01d      	b.n	8000e6a <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e2e:	f7ff feef 	bl	8000c10 <HAL_GetTick>
 8000e32:	1b40      	subs	r0, r0, r5
 8000e34:	2805      	cmp	r0, #5
 8000e36:	d9c7      	bls.n	8000dc8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e38:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e3c:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e3e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e44:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8000e48:	d116      	bne.n	8000e78 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8000e4a:	2803      	cmp	r0, #3
 8000e4c:	d818      	bhi.n	8000e80 <HAL_DMA_Init+0xdc>
 8000e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8000e54 <HAL_DMA_Init+0xb0>)
 8000e50:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8000e54:	08000e6b 	.word	0x08000e6b
 8000e58:	08000e29 	.word	0x08000e29
 8000e5c:	08000e6b 	.word	0x08000e6b
 8000e60:	08000e65 	.word	0x08000e65
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e64:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8000e68:	d10a      	bne.n	8000e80 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e6a:	2340      	movs	r3, #64	@ 0x40
 8000e6c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
 8000e76:	e7e4      	b.n	8000e42 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8000e78:	2802      	cmp	r0, #2
 8000e7a:	d9f6      	bls.n	8000e6a <HAL_DMA_Init+0xc6>
 8000e7c:	2803      	cmp	r0, #3
 8000e7e:	d0d3      	beq.n	8000e28 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8000e80:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff ff78 	bl	8000d78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e88:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000e8a:	233f      	movs	r3, #63	@ 0x3f
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e90:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e92:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e94:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000e96:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000e9a:	e7d2      	b.n	8000e42 <HAL_DMA_Init+0x9e>
 8000e9c:	f010803f 	.word	0xf010803f

08000ea0 <HAL_DMA_DeInit>:
{
 8000ea0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8000ea2:	4605      	mov	r5, r0
 8000ea4:	b320      	cbz	r0, 8000ef0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000ea6:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	b2dc      	uxtb	r4, r3
 8000eae:	d01d      	beq.n	8000eec <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8000eb0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8000eb2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8000ebc:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8000ebe:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8000ec0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8000ec2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8000ec4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8000ec6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8000ec8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000eca:	f7ff ff55 	bl	8000d78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ece:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8000ed0:	233f      	movs	r3, #63	@ 0x3f
 8000ed2:	4093      	lsls	r3, r2
 8000ed4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed6:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8000ed8:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8000edc:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8000ee0:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8000ee4:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8000ee8:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8000eec:	4620      	mov	r0, r4
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ef0:	2401      	movs	r4, #1
 8000ef2:	e7fb      	b.n	8000eec <HAL_DMA_DeInit+0x4c>

08000ef4 <HAL_DMA_Start_IT>:
{
 8000ef4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000ef6:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000efa:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000efc:	2c01      	cmp	r4, #1
 8000efe:	d034      	beq.n	8000f6a <HAL_DMA_Start_IT+0x76>
 8000f00:	2401      	movs	r4, #1
 8000f02:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f06:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8000f0a:	2c01      	cmp	r4, #1
 8000f0c:	f04f 0400 	mov.w	r4, #0
 8000f10:	d129      	bne.n	8000f66 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f12:	2502      	movs	r5, #2
 8000f14:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f18:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f1a:	6804      	ldr	r4, [r0, #0]
 8000f1c:	6825      	ldr	r5, [r4, #0]
 8000f1e:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8000f22:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000f24:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f26:	6883      	ldr	r3, [r0, #8]
 8000f28:	2b40      	cmp	r3, #64	@ 0x40
 8000f2a:	d119      	bne.n	8000f60 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000f2c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000f2e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f30:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000f32:	233f      	movs	r3, #63	@ 0x3f
 8000f34:	4093      	lsls	r3, r2
 8000f36:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	f043 0316 	orr.w	r3, r3, #22
 8000f3e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000f40:	6963      	ldr	r3, [r4, #20]
 8000f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f46:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f48:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000f4a:	b11b      	cbz	r3, 8000f54 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f54:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f56:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6023      	str	r3, [r4, #0]
}
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000f60:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000f62:	60e2      	str	r2, [r4, #12]
 8000f64:	e7e4      	b.n	8000f30 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000f66:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	e7f7      	b.n	8000f5e <HAL_DMA_Start_IT+0x6a>

08000f6e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d003      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	2380      	movs	r3, #128	@ 0x80
 8000f78:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000f7e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f80:	2305      	movs	r3, #5
 8000f82:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 8000f86:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000f94:	2300      	movs	r3, #0
{
 8000f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000f98:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f9a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800110c <HAL_DMA_IRQHandler+0x178>)
{
 8000f9e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fa0:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000fa2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fa4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8000fa6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	4232      	tst	r2, r6
 8000fac:	d00c      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fae:	6801      	ldr	r1, [r0, #0]
 8000fb0:	6808      	ldr	r0, [r1, #0]
 8000fb2:	0740      	lsls	r0, r0, #29
 8000fb4:	d508      	bpl.n	8000fc8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fb6:	6808      	ldr	r0, [r1, #0]
 8000fb8:	f020 0004 	bic.w	r0, r0, #4
 8000fbc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fbe:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000fc2:	f042 0201 	orr.w	r2, r2, #1
 8000fc6:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	4232      	tst	r2, r6
 8000fce:	d008      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fd0:	6821      	ldr	r1, [r4, #0]
 8000fd2:	6949      	ldr	r1, [r1, #20]
 8000fd4:	0609      	lsls	r1, r1, #24
 8000fd6:	d504      	bpl.n	8000fe2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fd8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000fdc:	f042 0202 	orr.w	r2, r2, #2
 8000fe0:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	4232      	tst	r2, r6
 8000fe8:	d008      	beq.n	8000ffc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	6809      	ldr	r1, [r1, #0]
 8000fee:	0788      	lsls	r0, r1, #30
 8000ff0:	d504      	bpl.n	8000ffc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ff2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ff6:	f042 0204 	orr.w	r2, r2, #4
 8000ffa:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	409a      	lsls	r2, r3
 8001000:	4232      	tst	r2, r6
 8001002:	d010      	beq.n	8001026 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	0709      	lsls	r1, r1, #28
 800100a:	d50c      	bpl.n	8001026 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800100c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	0350      	lsls	r0, r2, #13
 8001012:	d537      	bpl.n	8001084 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0319      	lsls	r1, r3, #12
 8001018:	d401      	bmi.n	800101e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800101a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800101c:	e000      	b.n	8001020 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800101e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001020:	b10b      	cbz	r3, 8001026 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001022:	4620      	mov	r0, r4
 8001024:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001026:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001028:	2220      	movs	r2, #32
 800102a:	408a      	lsls	r2, r1
 800102c:	4232      	tst	r2, r6
 800102e:	d03a      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	06c6      	lsls	r6, r0, #27
 8001036:	d536      	bpl.n	80010a6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001038:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800103a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800103e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001040:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001042:	d127      	bne.n	8001094 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001044:	f022 0216 	bic.w	r2, r2, #22
 8001048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001050:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001052:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001054:	b90a      	cbnz	r2, 800105a <HAL_DMA_IRQHandler+0xc6>
 8001056:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001058:	b11a      	cbz	r2, 8001062 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f022 0208 	bic.w	r2, r2, #8
 8001060:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001062:	233f      	movs	r3, #63	@ 0x3f
 8001064:	408b      	lsls	r3, r1
 8001066:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001068:	2301      	movs	r3, #1
 800106a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800106e:	2300      	movs	r3, #0
 8001070:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001074:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8001076:	2b00      	cmp	r3, #0
 8001078:	d045      	beq.n	8001106 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800107a:	4620      	mov	r0, r4
}
 800107c:	b003      	add	sp, #12
 800107e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001082:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	05d2      	lsls	r2, r2, #23
 8001088:	d4c7      	bmi.n	800101a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	f022 0208 	bic.w	r2, r2, #8
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	e7c2      	b.n	800101a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001094:	0350      	lsls	r0, r2, #13
 8001096:	d527      	bpl.n	80010e8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0319      	lsls	r1, r3, #12
 800109c:	d431      	bmi.n	8001102 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800109e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 80010a0:	b10b      	cbz	r3, 80010a6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80010a2:	4620      	mov	r0, r4
 80010a4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010a8:	b36b      	cbz	r3, 8001106 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010ac:	07da      	lsls	r2, r3, #31
 80010ae:	d519      	bpl.n	80010e4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 80010b0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 80010b4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80010b6:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80010ba:	2305      	movs	r3, #5
 80010bc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80010c0:	6813      	ldr	r3, [r2, #0]
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80010c8:	9b01      	ldr	r3, [sp, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	42bb      	cmp	r3, r7
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	d802      	bhi.n	80010d8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	07db      	lsls	r3, r3, #31
 80010d6:	d4f7      	bmi.n	80010c8 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80010d8:	2301      	movs	r3, #1
 80010da:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80010de:	2300      	movs	r3, #0
 80010e0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80010e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80010e6:	e7c6      	b.n	8001076 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80010ee:	d108      	bne.n	8001102 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010f0:	6819      	ldr	r1, [r3, #0]
 80010f2:	f021 0110 	bic.w	r1, r1, #16
 80010f6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80010f8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80010fa:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80010fe:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8001102:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001104:	e7cc      	b.n	80010a0 <HAL_DMA_IRQHandler+0x10c>
}
 8001106:	b003      	add	sp, #12
 8001108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000

08001110 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001110:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8001112:	4770      	bx	lr

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001118:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80012d8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111e:	4a6c      	ldr	r2, [pc, #432]	@ (80012d0 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8001120:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001124:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 800112a:	43ac      	bics	r4, r5
 800112c:	f040 80b7 	bne.w	800129e <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001130:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001132:	2703      	movs	r7, #3
 8001134:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800113c:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001140:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001142:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001146:	2f01      	cmp	r7, #1
 8001148:	d834      	bhi.n	80011b4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 800114a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800114c:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8001150:	68cf      	ldr	r7, [r1, #12]
 8001152:	fa07 f70e 	lsl.w	r7, r7, lr
 8001156:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800115a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800115c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115e:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001162:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001166:	409f      	lsls	r7, r3
 8001168:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800116c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800116e:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001172:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001176:	688f      	ldr	r7, [r1, #8]
 8001178:	fa07 f70e 	lsl.w	r7, r7, lr
 800117c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001180:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	d119      	bne.n	80011b8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8001184:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001188:	f003 0a07 	and.w	sl, r3, #7
 800118c:	f04f 0b0f 	mov.w	fp, #15
 8001190:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001194:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001198:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800119c:	fa0b fb0a 	lsl.w	fp, fp, sl
 80011a0:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011a4:	690f      	ldr	r7, [r1, #16]
 80011a6:	fa07 f70a 	lsl.w	r7, r7, sl
 80011aa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 80011ae:	f8c8 7020 	str.w	r7, [r8, #32]
 80011b2:	e001      	b.n	80011b8 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b4:	2c03      	cmp	r4, #3
 80011b6:	d1da      	bne.n	800116e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80011b8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ba:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011be:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011c2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011c6:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80011ca:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011cc:	d067      	beq.n	800129e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80011d2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011d6:	f003 0c03 	and.w	ip, r3, #3
 80011da:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80011e2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011e6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80011ee:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80011f2:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011f6:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80011fe:	9401      	str	r4, [sp, #4]
 8001200:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001202:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001204:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001208:	4c32      	ldr	r4, [pc, #200]	@ (80012d4 <HAL_GPIO_Init+0x1c0>)
 800120a:	42a0      	cmp	r0, r4
 800120c:	d04e      	beq.n	80012ac <HAL_GPIO_Init+0x198>
 800120e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001212:	42a0      	cmp	r0, r4
 8001214:	d04c      	beq.n	80012b0 <HAL_GPIO_Init+0x19c>
 8001216:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800121a:	42a0      	cmp	r0, r4
 800121c:	d04a      	beq.n	80012b4 <HAL_GPIO_Init+0x1a0>
 800121e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001222:	42a0      	cmp	r0, r4
 8001224:	d048      	beq.n	80012b8 <HAL_GPIO_Init+0x1a4>
 8001226:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800122a:	42a0      	cmp	r0, r4
 800122c:	d046      	beq.n	80012bc <HAL_GPIO_Init+0x1a8>
 800122e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001232:	42a0      	cmp	r0, r4
 8001234:	d044      	beq.n	80012c0 <HAL_GPIO_Init+0x1ac>
 8001236:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800123a:	42a0      	cmp	r0, r4
 800123c:	d042      	beq.n	80012c4 <HAL_GPIO_Init+0x1b0>
 800123e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001242:	42a0      	cmp	r0, r4
 8001244:	d040      	beq.n	80012c8 <HAL_GPIO_Init+0x1b4>
 8001246:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800124a:	42a0      	cmp	r0, r4
 800124c:	d03e      	beq.n	80012cc <HAL_GPIO_Init+0x1b8>
 800124e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001252:	42a0      	cmp	r0, r4
 8001254:	bf14      	ite	ne
 8001256:	240a      	movne	r4, #10
 8001258:	2409      	moveq	r4, #9
 800125a:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800125e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001262:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001266:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001268:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 800126c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800126e:	bf0c      	ite	eq
 8001270:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001272:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001274:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8001278:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800127a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800127c:	bf0c      	ite	eq
 800127e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001280:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001282:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8001286:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001288:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800128a:	bf0c      	ite	eq
 800128c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800128e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001290:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001292:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001294:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001296:	bf54      	ite	pl
 8001298:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800129a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800129c:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800129e:	3301      	adds	r3, #1
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	f47f af3d 	bne.w	8001120 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80012a6:	b003      	add	sp, #12
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ac:	2400      	movs	r4, #0
 80012ae:	e7d4      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012b0:	2401      	movs	r4, #1
 80012b2:	e7d2      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012b4:	2402      	movs	r4, #2
 80012b6:	e7d0      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012b8:	2403      	movs	r4, #3
 80012ba:	e7ce      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012bc:	2404      	movs	r4, #4
 80012be:	e7cc      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012c0:	2405      	movs	r4, #5
 80012c2:	e7ca      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012c4:	2406      	movs	r4, #6
 80012c6:	e7c8      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012c8:	2407      	movs	r4, #7
 80012ca:	e7c6      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012cc:	2408      	movs	r4, #8
 80012ce:	e7c4      	b.n	800125a <HAL_GPIO_Init+0x146>
 80012d0:	40013c00 	.word	0x40013c00
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012dc:	6903      	ldr	r3, [r0, #16]
 80012de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80012e0:	bf14      	ite	ne
 80012e2:	2001      	movne	r0, #1
 80012e4:	2000      	moveq	r0, #0
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e8:	b10a      	cbz	r2, 80012ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ea:	6181      	str	r1, [r0, #24]
  }
}
 80012ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ee:	0409      	lsls	r1, r1, #16
 80012f0:	e7fb      	b.n	80012ea <HAL_GPIO_WritePin+0x2>

080012f2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f4:	ea01 0203 	and.w	r2, r1, r3
 80012f8:	ea21 0103 	bic.w	r1, r1, r3
 80012fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001300:	6181      	str	r1, [r0, #24]
}
 8001302:	4770      	bx	lr

08001304 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001306:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800130a:	4c19      	ldr	r4, [pc, #100]	@ (8001370 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001310:	641a      	str	r2, [r3, #64]	@ 0x40
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001322:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff fc74 	bl	8000c10 <HAL_GetTick>
 8001328:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	03da      	lsls	r2, r3, #15
 800132e:	d50c      	bpl.n	800134a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001330:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001332:	4d0f      	ldr	r5, [pc, #60]	@ (8001370 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001338:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800133a:	f7ff fc69 	bl	8000c10 <HAL_GetTick>
 800133e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001340:	686b      	ldr	r3, [r5, #4]
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	d50a      	bpl.n	800135c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001346:	2000      	movs	r0, #0
 8001348:	e006      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134a:	f7ff fc61 	bl	8000c10 <HAL_GetTick>
 800134e:	1b40      	subs	r0, r0, r5
 8001350:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001354:	d9e9      	bls.n	800132a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001356:	2003      	movs	r0, #3
}
 8001358:	b003      	add	sp, #12
 800135a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800135c:	f7ff fc58 	bl	8000c10 <HAL_GetTick>
 8001360:	1b00      	subs	r0, r0, r4
 8001362:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001366:	d9eb      	bls.n	8001340 <HAL_PWREx_EnableOverDrive+0x3c>
 8001368:	e7f5      	b.n	8001356 <HAL_PWREx_EnableOverDrive+0x52>
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	4604      	mov	r4, r0
 800137a:	b340      	cbz	r0, 80013ce <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137c:	6803      	ldr	r3, [r0, #0]
 800137e:	07de      	lsls	r6, r3, #31
 8001380:	d410      	bmi.n	80013a4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	079d      	lsls	r5, r3, #30
 8001386:	d461      	bmi.n	800144c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	0719      	lsls	r1, r3, #28
 800138c:	f100 80a6 	bmi.w	80014dc <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	075a      	lsls	r2, r3, #29
 8001394:	f100 80c7 	bmi.w	8001526 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001398:	69a2      	ldr	r2, [r4, #24]
 800139a:	2a00      	cmp	r2, #0
 800139c:	f040 8130 	bne.w	8001600 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80013a0:	2000      	movs	r0, #0
 80013a2:	e02c      	b.n	80013fe <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a4:	4b94      	ldr	r3, [pc, #592]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	f002 020c 	and.w	r2, r2, #12
 80013ac:	2a04      	cmp	r2, #4
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	f002 020c 	and.w	r2, r2, #12
 80013b6:	2a08      	cmp	r2, #8
 80013b8:	d10b      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5e>
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	0259      	lsls	r1, r3, #9
 80013be:	d508      	bpl.n	80013d2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b8d      	ldr	r3, [pc, #564]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	039a      	lsls	r2, r3, #14
 80013c6:	d5dc      	bpl.n	8001382 <HAL_RCC_OscConfig+0xe>
 80013c8:	6863      	ldr	r3, [r4, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1d9      	bne.n	8001382 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	6863      	ldr	r3, [r4, #4]
 80013d4:	4d88      	ldr	r5, [pc, #544]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d113      	bne.n	8001404 <HAL_RCC_OscConfig+0x90>
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc14 	bl	8000c10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e8:	4e83      	ldr	r6, [pc, #524]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80013ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	6833      	ldr	r3, [r6, #0]
 80013ee:	039b      	lsls	r3, r3, #14
 80013f0:	d4c7      	bmi.n	8001382 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f2:	f7ff fc0d 	bl	8000c10 <HAL_GetTick>
 80013f6:	1b40      	subs	r0, r0, r5
 80013f8:	2864      	cmp	r0, #100	@ 0x64
 80013fa:	d9f7      	bls.n	80013ec <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
}
 80013fe:	b002      	add	sp, #8
 8001400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	b99b      	cbnz	r3, 800142e <HAL_RCC_OscConfig+0xba>
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140c:	602b      	str	r3, [r5, #0]
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001414:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001416:	f7ff fbfb 	bl	8000c10 <HAL_GetTick>
 800141a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	039f      	lsls	r7, r3, #14
 8001420:	d5af      	bpl.n	8001382 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001422:	f7ff fbf5 	bl	8000c10 <HAL_GetTick>
 8001426:	1b80      	subs	r0, r0, r6
 8001428:	2864      	cmp	r0, #100	@ 0x64
 800142a:	d9f7      	bls.n	800141c <HAL_RCC_OscConfig+0xa8>
 800142c:	e7e6      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	d103      	bne.n	800143e <HAL_RCC_OscConfig+0xca>
 8001436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143a:	602b      	str	r3, [r5, #0]
 800143c:	e7ce      	b.n	80013dc <HAL_RCC_OscConfig+0x68>
 800143e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144a:	e7ca      	b.n	80013e2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144c:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	f012 0f0c 	tst.w	r2, #12
 8001454:	d007      	beq.n	8001466 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	f002 020c 	and.w	r2, r2, #12
 800145c:	2a08      	cmp	r2, #8
 800145e:	d111      	bne.n	8001484 <HAL_RCC_OscConfig+0x110>
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	025d      	lsls	r5, r3, #9
 8001464:	d40e      	bmi.n	8001484 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4a64      	ldr	r2, [pc, #400]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	0799      	lsls	r1, r3, #30
 800146c:	d502      	bpl.n	8001474 <HAL_RCC_OscConfig+0x100>
 800146e:	68e3      	ldr	r3, [r4, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d1ac      	bne.n	80013ce <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	6813      	ldr	r3, [r2, #0]
 8001476:	6921      	ldr	r1, [r4, #16]
 8001478:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800147c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001480:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	e781      	b.n	8001388 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001484:	68e3      	ldr	r3, [r4, #12]
 8001486:	4d5c      	ldr	r5, [pc, #368]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 8001488:	b1bb      	cbz	r3, 80014ba <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001492:	f7ff fbbd 	bl	8000c10 <HAL_GetTick>
 8001496:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	079b      	lsls	r3, r3, #30
 800149c:	d507      	bpl.n	80014ae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	6922      	ldr	r2, [r4, #16]
 80014a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80014a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014aa:	602b      	str	r3, [r5, #0]
 80014ac:	e76c      	b.n	8001388 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fbaf 	bl	8000c10 <HAL_GetTick>
 80014b2:	1b80      	subs	r0, r0, r6
 80014b4:	2802      	cmp	r0, #2
 80014b6:	d9ef      	bls.n	8001498 <HAL_RCC_OscConfig+0x124>
 80014b8:	e7a0      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014c2:	f7ff fba5 	bl	8000c10 <HAL_GetTick>
 80014c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	079f      	lsls	r7, r3, #30
 80014cc:	f57f af5c 	bpl.w	8001388 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb9e 	bl	8000c10 <HAL_GetTick>
 80014d4:	1b80      	subs	r0, r0, r6
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d9f6      	bls.n	80014c8 <HAL_RCC_OscConfig+0x154>
 80014da:	e78f      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014dc:	6963      	ldr	r3, [r4, #20]
 80014de:	4d46      	ldr	r5, [pc, #280]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 80014e0:	b183      	cbz	r3, 8001504 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80014e2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb91 	bl	8000c10 <HAL_GetTick>
 80014ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80014f2:	079b      	lsls	r3, r3, #30
 80014f4:	f53f af4c 	bmi.w	8001390 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fb8a 	bl	8000c10 <HAL_GetTick>
 80014fc:	1b80      	subs	r0, r0, r6
 80014fe:	2802      	cmp	r0, #2
 8001500:	d9f6      	bls.n	80014f0 <HAL_RCC_OscConfig+0x17c>
 8001502:	e77b      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8001504:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800150c:	f7ff fb80 	bl	8000c10 <HAL_GetTick>
 8001510:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001512:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001514:	079f      	lsls	r7, r3, #30
 8001516:	f57f af3b 	bpl.w	8001390 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fb79 	bl	8000c10 <HAL_GetTick>
 800151e:	1b80      	subs	r0, r0, r6
 8001520:	2802      	cmp	r0, #2
 8001522:	d9f6      	bls.n	8001512 <HAL_RCC_OscConfig+0x19e>
 8001524:	e76a      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 8001528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800152a:	00d5      	lsls	r5, r2, #3
 800152c:	d427      	bmi.n	800157e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8001530:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001542:	4d2e      	ldr	r5, [pc, #184]	@ (80015fc <HAL_RCC_OscConfig+0x288>)
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	05d8      	lsls	r0, r3, #23
 8001548:	d51b      	bpl.n	8001582 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154a:	68a3      	ldr	r3, [r4, #8]
 800154c:	4d2a      	ldr	r5, [pc, #168]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 800154e:	2b01      	cmp	r3, #1
 8001550:	d127      	bne.n	80015a2 <HAL_RCC_OscConfig+0x22e>
 8001552:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800155e:	f7ff fb57 	bl	8000c10 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	4e25      	ldr	r6, [pc, #148]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8001564:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001568:	079a      	lsls	r2, r3, #30
 800156a:	d53f      	bpl.n	80015ec <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 800156c:	2f00      	cmp	r7, #0
 800156e:	f43f af13 	beq.w	8001398 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <HAL_RCC_OscConfig+0x284>)
 8001574:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
 800157c:	e70c      	b.n	8001398 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800157e:	2700      	movs	r7, #0
 8001580:	e7df      	b.n	8001542 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800158a:	f7ff fb41 	bl	8000c10 <HAL_GetTick>
 800158e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	05d9      	lsls	r1, r3, #23
 8001594:	d4d9      	bmi.n	800154a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff fb3b 	bl	8000c10 <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	2864      	cmp	r0, #100	@ 0x64
 800159e:	d9f7      	bls.n	8001590 <HAL_RCC_OscConfig+0x21c>
 80015a0:	e72c      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a2:	b9ab      	cbnz	r3, 80015d0 <HAL_RCC_OscConfig+0x25c>
 80015a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	672b      	str	r3, [r5, #112]	@ 0x70
 80015b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80015b8:	f7ff fb2a 	bl	8000c10 <HAL_GetTick>
 80015bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80015c0:	079b      	lsls	r3, r3, #30
 80015c2:	d5d3      	bpl.n	800156c <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb24 	bl	8000c10 <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	4540      	cmp	r0, r8
 80015cc:	d9f7      	bls.n	80015be <HAL_RCC_OscConfig+0x24a>
 80015ce:	e715      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80015d4:	d103      	bne.n	80015de <HAL_RCC_OscConfig+0x26a>
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	672b      	str	r3, [r5, #112]	@ 0x70
 80015dc:	e7b9      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	672b      	str	r3, [r5, #112]	@ 0x70
 80015e4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	e7b5      	b.n	8001558 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb10 	bl	8000c10 <HAL_GetTick>
 80015f0:	1b40      	subs	r0, r0, r5
 80015f2:	4540      	cmp	r0, r8
 80015f4:	d9b7      	bls.n	8001566 <HAL_RCC_OscConfig+0x1f2>
 80015f6:	e701      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001600:	4d38      	ldr	r5, [pc, #224]	@ (80016e4 <HAL_RCC_OscConfig+0x370>)
 8001602:	68ab      	ldr	r3, [r5, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d041      	beq.n	8001690 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 800160c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001610:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001614:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001616:	d12e      	bne.n	8001676 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8001618:	f7ff fafa 	bl	8000c10 <HAL_GetTick>
 800161c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	0199      	lsls	r1, r3, #6
 8001622:	d422      	bmi.n	800166a <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001624:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800162e:	430b      	orrs	r3, r1
 8001630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001634:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001636:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800163a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800163c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001640:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001644:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001646:	682b      	ldr	r3, [r5, #0]
 8001648:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800164c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800164e:	f7ff fadf 	bl	8000c10 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4d24      	ldr	r5, [pc, #144]	@ (80016e4 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8001654:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	019a      	lsls	r2, r3, #6
 800165a:	f53f aea1 	bmi.w	80013a0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fad7 	bl	8000c10 <HAL_GetTick>
 8001662:	1b00      	subs	r0, r0, r4
 8001664:	2802      	cmp	r0, #2
 8001666:	d9f6      	bls.n	8001656 <HAL_RCC_OscConfig+0x2e2>
 8001668:	e6c8      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fad1 	bl	8000c10 <HAL_GetTick>
 800166e:	1b80      	subs	r0, r0, r6
 8001670:	2802      	cmp	r0, #2
 8001672:	d9d4      	bls.n	800161e <HAL_RCC_OscConfig+0x2aa>
 8001674:	e6c2      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001676:	f7ff facb 	bl	8000c10 <HAL_GetTick>
 800167a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	f57f ae8e 	bpl.w	80013a0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fac4 	bl	8000c10 <HAL_GetTick>
 8001688:	1b00      	subs	r0, r0, r4
 800168a:	2802      	cmp	r0, #2
 800168c:	d9f6      	bls.n	800167c <HAL_RCC_OscConfig+0x308>
 800168e:	e6b5      	b.n	80013fc <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001690:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001692:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	f43f ae9b 	beq.w	80013ce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	69e1      	ldr	r1, [r4, #28]
 800169e:	428a      	cmp	r2, r1
 80016a0:	f47f ae95 	bne.w	80013ce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	6a21      	ldr	r1, [r4, #32]
 80016aa:	428a      	cmp	r2, r1
 80016ac:	f47f ae8f 	bne.w	80013ce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b6:	401a      	ands	r2, r3
 80016b8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80016bc:	f47f ae87 	bne.w	80013ce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80016c2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80016c6:	0852      	lsrs	r2, r2, #1
 80016c8:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ca:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016ce:	f47f ae7e 	bne.w	80013ce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80016d4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016d8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80016dc:	bf14      	ite	ne
 80016de:	2001      	movne	r0, #1
 80016e0:	2000      	moveq	r0, #0
 80016e2:	e68c      	b.n	80013fe <HAL_RCC_OscConfig+0x8a>
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e8:	4913      	ldr	r1, [pc, #76]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80016ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ec:	688b      	ldr	r3, [r1, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d01b      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x46>
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11b      	bne.n	8001732 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016fa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fe:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001700:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001704:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800170c:	bf1a      	itte	ne
 800170e:	480b      	ldrne	r0, [pc, #44]	@ (800173c <HAL_RCC_GetSysClockFreq+0x54>)
 8001710:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	480b      	ldreq	r0, [pc, #44]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x58>)
 8001714:	fba1 0100 	umull	r0, r1, r1, r0
 8001718:	f7fe fd7a 	bl	8000210 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x50>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001724:	3301      	adds	r3, #1
 8001726:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001728:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800172c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <HAL_RCC_GetSysClockFreq+0x54>)
 8001730:	e7fc      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001732:	4803      	ldr	r0, [pc, #12]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001734:	e7fa      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x44>
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	017d7840 	.word	0x017d7840
 8001740:	00f42400 	.word	0x00f42400

08001744 <HAL_RCC_ClockConfig>:
{
 8001744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001748:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800174a:	4604      	mov	r4, r0
 800174c:	b910      	cbnz	r0, 8001754 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
}
 8001750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4a45      	ldr	r2, [pc, #276]	@ (800186c <HAL_RCC_ClockConfig+0x128>)
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	428b      	cmp	r3, r1
 800175e:	d328      	bcc.n	80017b2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	6821      	ldr	r1, [r4, #0]
 8001762:	078f      	lsls	r7, r1, #30
 8001764:	d430      	bmi.n	80017c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001766:	07c8      	lsls	r0, r1, #31
 8001768:	d443      	bmi.n	80017f2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800176a:	4a40      	ldr	r2, [pc, #256]	@ (800186c <HAL_RCC_ClockConfig+0x128>)
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	42ab      	cmp	r3, r5
 8001774:	d866      	bhi.n	8001844 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	0751      	lsls	r1, r2, #29
 800177a:	d46f      	bmi.n	800185c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	0713      	lsls	r3, r2, #28
 800177e:	d507      	bpl.n	8001790 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001780:	4a3b      	ldr	r2, [pc, #236]	@ (8001870 <HAL_RCC_ClockConfig+0x12c>)
 8001782:	6921      	ldr	r1, [r4, #16]
 8001784:	6893      	ldr	r3, [r2, #8]
 8001786:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800178a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800178e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001790:	f7ff ffaa 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <HAL_RCC_ClockConfig+0x12c>)
 8001796:	4a37      	ldr	r2, [pc, #220]	@ (8001874 <HAL_RCC_ClockConfig+0x130>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	40d8      	lsrs	r0, r3
 80017a2:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <HAL_RCC_ClockConfig+0x134>)
 80017a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <HAL_RCC_ClockConfig+0x138>)
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f7fe fff7 	bl	800079c <HAL_InitTick>
  return HAL_OK;
 80017ae:	2000      	movs	r0, #0
 80017b0:	e7ce      	b.n	8001750 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	f023 030f 	bic.w	r3, r3, #15
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017bc:	6813      	ldr	r3, [r2, #0]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	428b      	cmp	r3, r1
 80017c4:	d1c3      	bne.n	800174e <HAL_RCC_ClockConfig+0xa>
 80017c6:	e7cb      	b.n	8001760 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	f011 0f04 	tst.w	r1, #4
 80017cc:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_RCC_ClockConfig+0x12c>)
 80017ce:	d003      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80017d6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	070e      	lsls	r6, r1, #28
 80017da:	d503      	bpl.n	80017e4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80017e2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	68a0      	ldr	r0, [r4, #8]
 80017e8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80017ec:	4302      	orrs	r2, r0
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e7b9      	b.n	8001766 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	6861      	ldr	r1, [r4, #4]
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_RCC_ClockConfig+0x12c>)
 80017f6:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	d11b      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	d0a5      	beq.n	800174e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001808:	4f19      	ldr	r7, [pc, #100]	@ (8001870 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	f022 0203 	bic.w	r2, r2, #3
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001812:	f7ff f9fd 	bl	8000c10 <HAL_GetTick>
 8001816:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	6862      	ldr	r2, [r4, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001824:	d0a1      	beq.n	800176a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001826:	f7ff f9f3 	bl	8000c10 <HAL_GetTick>
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	4540      	cmp	r0, r8
 800182e:	d9f3      	bls.n	8001818 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001830:	2003      	movs	r0, #3
 8001832:	e78d      	b.n	8001750 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001834:	2902      	cmp	r1, #2
 8001836:	d102      	bne.n	800183e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001838:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800183c:	e7e0      	b.n	8001800 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	f012 0f02 	tst.w	r2, #2
 8001842:	e7dd      	b.n	8001800 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f023 030f 	bic.w	r3, r3, #15
 800184a:	432b      	orrs	r3, r5
 800184c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	42ab      	cmp	r3, r5
 8001856:	f47f af7a 	bne.w	800174e <HAL_RCC_ClockConfig+0xa>
 800185a:	e78c      	b.n	8001776 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4904      	ldr	r1, [pc, #16]	@ (8001870 <HAL_RCC_ClockConfig+0x12c>)
 800185e:	68e0      	ldr	r0, [r4, #12]
 8001860:	688b      	ldr	r3, [r1, #8]
 8001862:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001866:	4303      	orrs	r3, r0
 8001868:	608b      	str	r3, [r1, #8]
 800186a:	e787      	b.n	800177c <HAL_RCC_ClockConfig+0x38>
 800186c:	40023c00 	.word	0x40023c00
 8001870:	40023800 	.word	0x40023800
 8001874:	08006814 	.word	0x08006814
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	4a03      	ldr	r2, [pc, #12]	@ (800189c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800188e:	6810      	ldr	r0, [r2, #0]
}
 8001890:	40d8      	lsrs	r0, r3
 8001892:	4770      	bx	lr
 8001894:	40023800 	.word	0x40023800
 8001898:	08006824 	.word	0x08006824
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018a0:	230f      	movs	r3, #15
 80018a2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_GetClockConfig+0x34>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80018b4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80018bc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80018c6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_RCC_GetClockConfig+0x38>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	600b      	str	r3, [r1, #0]
}
 80018d2:	4770      	bx	lr
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40023c00 	.word	0x40023c00

080018dc <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80018dc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80018e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018e8:	4770      	bx	lr

080018ea <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 80018ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ec:	4605      	mov	r5, r0
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	460e      	mov	r6, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80018f2:	f7ff f98d 	bl	8000c10 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80018f6:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80018f8:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80018fa:	2108      	movs	r1, #8
 80018fc:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80018fe:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001902:	f000 ffdf 	bl	80028c4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001906:	4604      	mov	r4, r0
 8001908:	b9d8      	cbnz	r0, 8001942 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800190a:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800190c:	6828      	ldr	r0, [r5, #0]
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	f001 f889 	bl	8002a26 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001914:	4604      	mov	r4, r0
 8001916:	b9a0      	cbnz	r0, 8001942 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800191e:	2130      	movs	r1, #48	@ 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001920:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001922:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8001924:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001928:	2302      	movs	r3, #2
 800192a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800192e:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001930:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8001932:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001934:	f000 feff 	bl	8002736 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001938:	6828      	ldr	r0, [r5, #0]
 800193a:	f001 f8a6 	bl	8002a8a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800193e:	4604      	mov	r4, r0
 8001940:	b190      	cbz	r0, 8001968 <SD_FindSCR.constprop.0+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001942:	4620      	mov	r0, r4
 8001944:	b009      	add	sp, #36	@ 0x24
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8001948:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800194a:	029b      	lsls	r3, r3, #10
 800194c:	d512      	bpl.n	8001974 <SD_FindSCR.constprop.0+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800194e:	f000 fece 	bl	80026ee <SDMMC_ReadFIFO>
 8001952:	ab08      	add	r3, sp, #32
 8001954:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 8001958:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800195a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800195e:	f7ff f957 	bl	8000c10 <HAL_GetTick>
 8001962:	1bc0      	subs	r0, r0, r7
 8001964:	3001      	adds	r0, #1
 8001966:	d023      	beq.n	80019b0 <SD_FindSCR.constprop.0+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8001968:	6828      	ldr	r0, [r5, #0]
 800196a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800196c:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8001970:	d0ea      	beq.n	8001948 <SD_FindSCR.constprop.0+0x5e>
 8001972:	e002      	b.n	800197a <SD_FindSCR.constprop.0+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8001974:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001976:	0499      	lsls	r1, r3, #18
 8001978:	d4f1      	bmi.n	800195e <SD_FindSCR.constprop.0+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800197a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800197c:	071a      	lsls	r2, r3, #28
 800197e:	d502      	bpl.n	8001986 <SD_FindSCR.constprop.0+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8001980:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8001982:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8001984:	e7dd      	b.n	8001942 <SD_FindSCR.constprop.0+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8001986:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001988:	079b      	lsls	r3, r3, #30
 800198a:	d501      	bpl.n	8001990 <SD_FindSCR.constprop.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800198c:	2402      	movs	r4, #2
 800198e:	e7f8      	b.n	8001982 <SD_FindSCR.constprop.0+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8001990:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8001992:	f014 0420 	ands.w	r4, r4, #32
 8001996:	d001      	beq.n	800199c <SD_FindSCR.constprop.0+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8001998:	2420      	movs	r4, #32
 800199a:	e7f2      	b.n	8001982 <SD_FindSCR.constprop.0+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800199c:	f240 533a 	movw	r3, #1338	@ 0x53a
 80019a0:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80019a2:	9b01      	ldr	r3, [sp, #4]
 80019a4:	ba1b      	rev	r3, r3
 80019a6:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80019a8:	9b00      	ldr	r3, [sp, #0]
 80019aa:	ba1b      	rev	r3, r3
 80019ac:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 80019ae:	e7c8      	b.n	8001942 <SD_FindSCR.constprop.0+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 80019b0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80019b4:	e7c5      	b.n	8001942 <SD_FindSCR.constprop.0+0x58>

080019b6 <HAL_SD_MspInit>:
}
 80019b6:	4770      	bx	lr

080019b8 <HAL_SD_ReadBlocks_DMA>:
{
 80019b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019bc:	4615      	mov	r5, r2
 80019be:	b087      	sub	sp, #28
 80019c0:	4604      	mov	r4, r0
 80019c2:	461f      	mov	r7, r3
  if(NULL == pData)
 80019c4:	460a      	mov	r2, r1
 80019c6:	b941      	cbnz	r1, 80019da <HAL_SD_ReadBlocks_DMA+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80019c8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80019ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80019ce:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80019d0:	2601      	movs	r6, #1
}
 80019d2:	4630      	mov	r0, r6
 80019d4:	b007      	add	sp, #28
 80019d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80019da:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 80019de:	2b01      	cmp	r3, #1
 80019e0:	fa5f f983 	uxtb.w	r9, r3
 80019e4:	d16b      	bne.n	8001abe <HAL_SD_ReadBlocks_DMA+0x106>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80019e6:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80019e8:	19e9      	adds	r1, r5, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80019ea:	6383      	str	r3, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80019ec:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80019ee:	4281      	cmp	r1, r0
 80019f0:	d903      	bls.n	80019fa <HAL_SD_ReadBlocks_DMA+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80019f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80019f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	e7e9      	b.n	80019ce <HAL_SD_ReadBlocks_DMA+0x16>
    hsd->Instance->DCTRL = 0U;
 80019fa:	6826      	ldr	r6, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80019fc:	2103      	movs	r1, #3
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80019fe:	6c20      	ldr	r0, [r4, #64]	@ 0x40
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001a00:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8001a04:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8001a08:	62f3      	str	r3, [r6, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001a0a:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 8001a0c:	f441 7195 	orr.w	r1, r1, #298	@ 0x12a
 8001a10:	63f1      	str	r1, [r6, #60]	@ 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001a12:	492c      	ldr	r1, [pc, #176]	@ (8001ac4 <HAL_SD_ReadBlocks_DMA+0x10c>)
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a14:	6083      	str	r3, [r0, #8]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001a16:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001a18:	492b      	ldr	r1, [pc, #172]	@ (8001ac8 <HAL_SD_ReadBlocks_DMA+0x110>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8001a1a:	e9c0 1313 	strd	r1, r3, [r0, #76]	@ 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8001a1e:	6801      	ldr	r1, [r0, #0]
 8001a20:	680b      	ldr	r3, [r1, #0]
 8001a22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001a26:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001a28:	f106 0180 	add.w	r1, r6, #128	@ 0x80
 8001a2c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8001a30:	f7ff fa60 	bl	8000ef4 <HAL_DMA_Start_IT>
 8001a34:	4606      	mov	r6, r0
 8001a36:	6820      	ldr	r0, [r4, #0]
 8001a38:	b166      	cbz	r6, 8001a54 <HAL_SD_ReadBlocks_DMA+0x9c>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8001a3a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001a3c:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
 8001a40:	63c3      	str	r3, [r0, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <HAL_SD_ReadBlocks_DMA+0x114>)
 8001a44:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001a46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a4c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001a4e:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8001a52:	e7bd      	b.n	80019d0 <HAL_SD_ReadBlocks_DMA+0x18>
      __HAL_SD_DMA_ENABLE(hsd);
 8001a54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001a56:	2290      	movs	r2, #144	@ 0x90
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001a58:	2100      	movs	r1, #0
      __HAL_SD_DMA_ENABLE(hsd);
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	62c3      	str	r3, [r0, #44]	@ 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a62:	2b01      	cmp	r3, #1
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001a68:	e9cd 3800 	strd	r3, r8, [sp]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001a6c:	f04f 0302 	mov.w	r3, #2
        add *= 512U;
 8001a70:	bf18      	it	ne
 8001a72:	026d      	lslne	r5, r5, #9
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8001a74:	e9cd 2302 	strd	r2, r3, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e9cd 1304 	strd	r1, r3, [sp, #16]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001a7e:	4669      	mov	r1, sp
 8001a80:	f000 fe59 	bl	8002736 <SDMMC_ConfigData>
      if(NumberOfBlocks > 1U)
 8001a84:	2f01      	cmp	r7, #1
 8001a86:	d913      	bls.n	8001ab0 <HAL_SD_ReadBlocks_DMA+0xf8>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001a88:	2382      	movs	r3, #130	@ 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001a8e:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001a90:	f000 ff4a 	bl	8002928 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d09c      	beq.n	80019d2 <HAL_SD_ReadBlocks_DMA+0x1a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <HAL_SD_ReadBlocks_DMA+0x114>)
 8001a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8001a9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001aa0:	4303      	orrs	r3, r0
 8001aa2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8001aae:	e78f      	b.n	80019d0 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001ab0:	2381      	movs	r3, #129	@ 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001ab6:	6323      	str	r3, [r4, #48]	@ 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ab8:	f000 ff1d 	bl	80028f6 <SDMMC_CmdReadSingleBlock>
 8001abc:	e7ea      	b.n	8001a94 <HAL_SD_ReadBlocks_DMA+0xdc>
    return HAL_BUSY;
 8001abe:	2602      	movs	r6, #2
 8001ac0:	e787      	b.n	80019d2 <HAL_SD_ReadBlocks_DMA+0x1a>
 8001ac2:	bf00      	nop
 8001ac4:	08001be3 	.word	0x08001be3
 8001ac8:	08002135 	.word	0x08002135
 8001acc:	004005ff 	.word	0x004005ff

08001ad0 <HAL_SD_WriteBlocks_DMA>:
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	460f      	mov	r7, r1
 8001ad4:	b087      	sub	sp, #28
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	4611      	mov	r1, r2
 8001ada:	461e      	mov	r6, r3
  if(NULL == pData)
 8001adc:	b93f      	cbnz	r7, 8001aee <HAL_SD_WriteBlocks_DMA+0x1e>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001ade:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001ae0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001ae4:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8001ae6:	2701      	movs	r7, #1
}
 8001ae8:	4638      	mov	r0, r7
 8001aea:	b007      	add	sp, #28
 8001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001aee:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d16b      	bne.n	8001bce <HAL_SD_WriteBlocks_DMA+0xfe>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001af6:	2200      	movs	r2, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001af8:	198b      	adds	r3, r1, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001afa:	6382      	str	r2, [r0, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001afc:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8001afe:	4283      	cmp	r3, r0
 8001b00:	d903      	bls.n	8001b0a <HAL_SD_WriteBlocks_DMA+0x3a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001b02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001b04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	e7ec      	b.n	8001ae4 <HAL_SD_WriteBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 8001b0a:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001b0c:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001b0e:	4d31      	ldr	r5, [pc, #196]	@ (8001bd4 <HAL_SD_WriteBlocks_DMA+0x104>)
    hsd->State = HAL_SD_STATE_BUSY;
 8001b10:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8001b14:	62c2      	str	r2, [r0, #44]	@ 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8001b16:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001b18:	f043 031a 	orr.w	r3, r3, #26
 8001b1c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001b1e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001b20:	63dd      	str	r5, [r3, #60]	@ 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001b22:	4d2d      	ldr	r5, [pc, #180]	@ (8001bd8 <HAL_SD_WriteBlocks_DMA+0x108>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8001b24:	e9c3 5213 	strd	r5, r2, [r3, #76]	@ 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001b28:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b2a:	2b01      	cmp	r3, #1
      add *= 512U;
 8001b2c:	bf18      	it	ne
 8001b2e:	0249      	lslne	r1, r1, #9
    if(NumberOfBlocks > 1U)
 8001b30:	2e01      	cmp	r6, #1
 8001b32:	d911      	bls.n	8001b58 <HAL_SD_WriteBlocks_DMA+0x88>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001b34:	23a0      	movs	r3, #160	@ 0xa0
 8001b36:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001b38:	f000 ff28 	bl	800298c <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001b3c:	4605      	mov	r5, r0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001b3e:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b40:	b178      	cbz	r0, 8001b62 <HAL_SD_WriteBlocks_DMA+0x92>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001b42:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <HAL_SD_WriteBlocks_DMA+0x10c>)
 8001b44:	6393      	str	r3, [r2, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8001b46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8001b56:	e7c6      	b.n	8001ae6 <HAL_SD_WriteBlocks_DMA+0x16>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001b58:	2390      	movs	r3, #144	@ 0x90
 8001b5a:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001b5c:	f000 fefd 	bl	800295a <SDMMC_CmdWriteSingleBlock>
 8001b60:	e7ec      	b.n	8001b3c <HAL_SD_WriteBlocks_DMA+0x6c>
    __HAL_SD_DMA_ENABLE(hsd);
 8001b62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001b64:	0276      	lsls	r6, r6, #9
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b66:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001b68:	3280      	adds	r2, #128	@ 0x80
    __HAL_SD_DMA_ENABLE(hsd);
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8001b6e:	6801      	ldr	r1, [r0, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 8001b70:	f842 3c54 	str.w	r3, [r2, #-84]
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	6083      	str	r3, [r0, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8001b78:	680b      	ldr	r3, [r1, #0]
 8001b7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b82:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001b84:	4639      	mov	r1, r7
 8001b86:	08b3      	lsrs	r3, r6, #2
 8001b88:	f7ff f9b4 	bl	8000ef4 <HAL_DMA_Start_IT>
 8001b8c:	4607      	mov	r7, r0
 8001b8e:	b178      	cbz	r0, 8001bb0 <HAL_SD_WriteBlocks_DMA+0xe0>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b94:	f022 021a 	bic.w	r2, r2, #26
 8001b98:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <HAL_SD_WriteBlocks_DMA+0x10c>)
 8001b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001b9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001ba0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ba4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001bac:	6325      	str	r5, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8001bae:	e79a      	b.n	8001ae6 <HAL_SD_WriteBlocks_DMA+0x16>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001bb4:	4669      	mov	r1, sp
 8001bb6:	6820      	ldr	r0, [r4, #0]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8001bb8:	9504      	str	r5, [sp, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001bba:	e9cd 3600 	strd	r3, r6, [sp]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8001bbe:	2390      	movs	r3, #144	@ 0x90
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8001bc0:	e9cd 3502 	strd	r3, r5, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8001bc8:	f000 fdb5 	bl	8002736 <SDMMC_ConfigData>
      return HAL_OK;
 8001bcc:	e78c      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8001bce:	2702      	movs	r7, #2
 8001bd0:	e78a      	b.n	8001ae8 <HAL_SD_WriteBlocks_DMA+0x18>
 8001bd2:	bf00      	nop
 8001bd4:	080018dd 	.word	0x080018dd
 8001bd8:	08002135 	.word	0x08002135
 8001bdc:	004005ff 	.word	0x004005ff

08001be0 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 8001be0:	4770      	bx	lr

08001be2 <SD_DMAReceiveCplt>:
{
 8001be2:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001be4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001be6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001be8:	6820      	ldr	r0, [r4, #0]
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001bea:	2b82      	cmp	r3, #130	@ 0x82
 8001bec:	d108      	bne.n	8001c00 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001bee:	f000 fee7 	bl	80029c0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001bf2:	b128      	cbz	r0, 8001c00 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8001bf4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001bf6:	4303      	orrs	r3, r0
      HAL_SD_ErrorCallback(hsd);
 8001bf8:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 8001bfa:	63a3      	str	r3, [r4, #56]	@ 0x38
      HAL_SD_ErrorCallback(hsd);
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8001c00:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 8001c02:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8001c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c06:	f022 0208 	bic.w	r2, r2, #8
 8001c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8001c0c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8001c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6323      	str	r3, [r4, #48]	@ 0x30
  HAL_SD_RxCpltCallback(hsd);
 8001c1c:	f7fe ffad 	bl	8000b7a <HAL_SD_RxCpltCallback>
}
 8001c20:	bd10      	pop	{r4, pc}
	...

08001c24 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001c24:	6e42      	ldr	r2, [r0, #100]	@ 0x64
{
 8001c26:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001c28:	0f90      	lsrs	r0, r2, #30
{
 8001c2a:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001c2c:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001c2e:	f3c2 6083 	ubfx	r0, r2, #26, #4
 8001c32:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001c34:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8001c38:	7088      	strb	r0, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001c3a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8001c3e:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001c40:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001c44:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001c46:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001c48:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001c4a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c4c:	0d10      	lsrs	r0, r2, #20
 8001c4e:	80c8      	strh	r0, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001c50:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8001c54:	7208      	strb	r0, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001c56:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8001c5a:	7248      	strb	r0, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001c5c:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8001c60:	7288      	strb	r0, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001c62:	f3c2 3040 	ubfx	r0, r2, #13, #1
 8001c66:	72c8      	strb	r0, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001c68:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8001c6c:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001c6e:	2000      	movs	r0, #0
 8001c70:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001c72:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001c74:	2800      	cmp	r0, #0
 8001c76:	d16b      	bne.n	8001d50 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001c78:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8001c7c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8001c7e:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 8001c82:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8001c86:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001c88:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 8001c8c:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001c8e:	f3c0 6202 	ubfx	r2, r0, #24, #3
 8001c92:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001c94:	f3c0 5242 	ubfx	r2, r0, #21, #3
 8001c98:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001c9a:	f3c0 4282 	ubfx	r2, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001c9e:	f3c0 30c2 	ubfx	r0, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001ca2:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001ca4:	7608      	strb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001ca6:	6908      	ldr	r0, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001ca8:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001caa:	3001      	adds	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001cac:	f002 0207 	and.w	r2, r2, #7
 8001cb0:	3202      	adds	r2, #2
 8001cb2:	4090      	lsls	r0, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001cb4:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001cb6:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001cb8:	7a0c      	ldrb	r4, [r1, #8]
 8001cba:	f004 040f 	and.w	r4, r4, #15
 8001cbe:	40a2      	lsls	r2, r4
 8001cc0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001cc2:	0a52      	lsrs	r2, r2, #9
 8001cc4:	4342      	muls	r2, r0
 8001cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ccc:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001cce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cd0:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8001cd4:	7648      	strb	r0, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001cd6:	f3c2 10c6 	ubfx	r0, r2, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001cda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001cde:	7688      	strb	r0, [r1, #26]
  pCSD->Reserved3 = 0;
 8001ce0:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001ce2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	0fda      	lsrs	r2, r3, #31
 8001ce8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001cea:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001cee:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001cf0:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001cf4:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001cf6:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8001cfa:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001cfc:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001d00:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001d04:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8001d08:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001d0c:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001d10:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001d14:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001d18:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001d1c:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001d20:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001d24:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001d28:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001d2c:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001d30:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001d34:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001d38:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001d3c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001d40:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001d44:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
  return HAL_OK;
 8001d4e:	e01b      	b.n	8001d88 <HAL_SD_GetCardCSD+0x164>
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001d50:	2801      	cmp	r0, #1
 8001d52:	d10f      	bne.n	8001d74 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001d54:	0412      	lsls	r2, r2, #16
 8001d56:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
 8001d5a:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8001d5e:	4302      	orrs	r2, r0
 8001d60:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001d62:	690a      	ldr	r2, [r1, #16]
 8001d64:	3201      	adds	r2, #1
 8001d66:	0292      	lsls	r2, r2, #10
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d70:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001d72:	e7a9      	b.n	8001cc8 <HAL_SD_GetCardCSD+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001d74:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8001d76:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001d78:	4904      	ldr	r1, [pc, #16]	@ (8001d8c <HAL_SD_GetCardCSD+0x168>)
 8001d7a:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d7e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d84:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	bf00      	nop
 8001d8c:	004005ff 	.word	0x004005ff

08001d90 <HAL_SD_InitCard>:
{
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001d92:	2300      	movs	r3, #0
{
 8001d94:	b099      	sub	sp, #100	@ 0x64
 8001d96:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d98:	930b      	str	r3, [sp, #44]	@ 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001d9a:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d9e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001da2:	2376      	movs	r3, #118	@ 0x76
 8001da4:	930c      	str	r3, [sp, #48]	@ 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8001da6:	ab0a      	add	r3, sp, #40	@ 0x28
 8001da8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dac:	ab07      	add	r3, sp, #28
 8001dae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db4:	6820      	ldr	r0, [r4, #0]
 8001db6:	f000 fc7e 	bl	80026b6 <SDMMC_Init>
  if(status != HAL_OK)
 8001dba:	4605      	mov	r5, r0
 8001dbc:	bb70      	cbnz	r0, 8001e1c <HAL_SD_InitCard+0x8c>
  __HAL_SD_DISABLE(hsd);
 8001dbe:	6820      	ldr	r0, [r4, #0]
 8001dc0:	6843      	ldr	r3, [r0, #4]
 8001dc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc6:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8001dc8:	f000 fc99 	bl	80026fe <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001dcc:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8001dce:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8001dd0:	6853      	ldr	r3, [r2, #4]
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd6:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8001dd8:	f7fe ff20 	bl	8000c1c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001ddc:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8001dde:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001de0:	f000 fcbc 	bl	800275c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001de4:	4605      	mov	r5, r0
 8001de6:	b998      	cbnz	r0, 8001e10 <HAL_SD_InitCard+0x80>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001de8:	6820      	ldr	r0, [r4, #0]
 8001dea:	f000 ff93 	bl	8002d14 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dee:	b130      	cbz	r0, 8001dfe <HAL_SD_InitCard+0x6e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001df0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001df2:	64a5      	str	r5, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001df4:	f000 fcb2 	bl	800275c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001df8:	b1a0      	cbz	r0, 8001e24 <HAL_SD_InitCard+0x94>
      return errorstate;
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	e008      	b.n	8001e10 <HAL_SD_InitCard+0x80>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e02:	2100      	movs	r1, #0
 8001e04:	6820      	ldr	r0, [r4, #0]
 8001e06:	f000 fe0e 	bl	8002a26 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e0a:	b170      	cbz	r0, 8001e2a <HAL_SD_InitCard+0x9a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001e0c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001e16:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001e18:	432b      	orrs	r3, r5
 8001e1a:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8001e1c:	2501      	movs	r5, #1
}
 8001e1e:	4628      	mov	r0, r5
 8001e20:	b019      	add	sp, #100	@ 0x64
 8001e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8001e24:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d0eb      	beq.n	8001e02 <HAL_SD_InitCard+0x72>
{
 8001e2a:	2100      	movs	r1, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001e2c:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8001e30:	4f58      	ldr	r7, [pc, #352]	@ (8001f94 <HAL_SD_InitCard+0x204>)
 8001e32:	e014      	b.n	8001e5e <HAL_SD_InitCard+0xce>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e34:	6820      	ldr	r0, [r4, #0]
 8001e36:	f000 fdf6 	bl	8002a26 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d1e7      	bne.n	8001e10 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8001e40:	4639      	mov	r1, r7
 8001e42:	6820      	ldr	r0, [r4, #0]
 8001e44:	f000 fec8 	bl	8002bd8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d1df      	bne.n	8001e0c <HAL_SD_InitCard+0x7c>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	f000 fc6e 	bl	8002730 <SDMMC_GetResponse>
    count++;
 8001e54:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001e56:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001e58:	0fc1      	lsrs	r1, r0, #31
    count++;
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001e5e:	9b06      	ldr	r3, [sp, #24]
 8001e60:	42b3      	cmp	r3, r6
 8001e62:	d801      	bhi.n	8001e68 <HAL_SD_InitCard+0xd8>
 8001e64:	2900      	cmp	r1, #0
 8001e66:	d0e5      	beq.n	8001e34 <HAL_SD_InitCard+0xa4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8001e68:	9b06      	ldr	r3, [sp, #24]
 8001e6a:	42b3      	cmp	r3, r6
 8001e6c:	d811      	bhi.n	8001e92 <HAL_SD_InitCard+0x102>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001e6e:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8001e72:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8001e78:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8001e7c:	f000 fc43 	bl	8002706 <SDMMC_GetPowerState>
 8001e80:	b950      	cbnz	r0, 8001e98 <HAL_SD_InitCard+0x108>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001e82:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8001e8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	e7c3      	b.n	8001e1a <HAL_SD_InitCard+0x8a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001e92:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8001e96:	e7bb      	b.n	8001e10 <HAL_SD_InitCard+0x80>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001e9a:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d043      	beq.n	8001f28 <HAL_SD_InitCard+0x198>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001ea0:	f000 fe4c 	bl	8002b3c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d1ed      	bne.n	8001e86 <HAL_SD_InitCard+0xf6>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001eaa:	6820      	ldr	r0, [r4, #0]
 8001eac:	f000 fc40 	bl	8002730 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001eb0:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001eb2:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	f000 fc3b 	bl	8002730 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001eba:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001ebc:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	f000 fc36 	bl	8002730 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001ec4:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001ec6:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	f000 fc31 	bl	8002730 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001ece:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001ed0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d027      	beq.n	8001f28 <HAL_SD_InitCard+0x198>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8001ed8:	f10d 0116 	add.w	r1, sp, #22
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	f000 fed5 	bl	8002c8c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d1ce      	bne.n	8001e86 <HAL_SD_InitCard+0xf6>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001ee8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001eea:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d01b      	beq.n	8001f28 <HAL_SD_InitCard+0x198>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001ef0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8001ef4:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001ef6:	0409      	lsls	r1, r1, #16
 8001ef8:	f000 fe36 	bl	8002b68 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001efc:	4601      	mov	r1, r0
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d1c1      	bne.n	8001e86 <HAL_SD_InitCard+0xf6>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f000 fc14 	bl	8002730 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001f08:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8001f0a:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	f000 fc0f 	bl	8002730 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001f12:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8001f14:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	f000 fc0a 	bl	8002730 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001f1c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8001f1e:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	f000 fc05 	bl	8002730 <SDMMC_GetResponse>
 8001f26:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8001f28:	2104      	movs	r1, #4
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	f000 fc00 	bl	8002730 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8001f30:	a90d      	add	r1, sp, #52	@ 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8001f32:	0d00      	lsrs	r0, r0, #20
 8001f34:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff fe74 	bl	8001c24 <HAL_SD_GetCardCSD>
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	bb28      	cbnz	r0, 8001f8c <HAL_SD_InitCard+0x1fc>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8001f40:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001f42:	4603      	mov	r3, r0
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	0412      	lsls	r2, r2, #16
 8001f48:	f000 fd54 	bl	80029f4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d199      	bne.n	8001e86 <HAL_SD_InitCard+0xf6>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8001f52:	f104 0310 	add.w	r3, r4, #16
 8001f56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f5a:	1d23      	adds	r3, r4, #4
 8001f5c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f62:	6820      	ldr	r0, [r4, #0]
 8001f64:	f000 fba7 	bl	80026b6 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f6c:	6820      	ldr	r0, [r4, #0]
 8001f6e:	f000 fca9 	bl	80028c4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f72:	2800      	cmp	r0, #0
 8001f74:	f43f af53 	beq.w	8001e1e <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_SD_InitCard+0x208>)
 8001f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8001f7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001f80:	4303      	orrs	r3, r0
 8001f82:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001f8a:	e747      	b.n	8001e1c <HAL_SD_InitCard+0x8c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001f8c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8001f90:	e779      	b.n	8001e86 <HAL_SD_InitCard+0xf6>
 8001f92:	bf00      	nop
 8001f94:	c1100000 	.word	0xc1100000
 8001f98:	004005ff 	.word	0x004005ff

08001f9c <HAL_SD_Init>:
{
 8001f9c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	b908      	cbnz	r0, 8001fa6 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8001fa2:	2001      	movs	r0, #1
}
 8001fa4:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8001fa6:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8001faa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fae:	b913      	cbnz	r3, 8001fb6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8001fb0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001fb2:	f7ff fd00 	bl	80019b6 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8001fb6:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001fb8:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8001fba:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001fbe:	f7ff fee7 	bl	8001d90 <HAL_SD_InitCard>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d1ed      	bne.n	8001fa2 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001fc8:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8001fca:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001fcc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 8001fd0:	e7e8      	b.n	8001fa4 <HAL_SD_Init+0x8>

08001fd2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001fd2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001fd4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001fd6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001fd8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001fda:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001fdc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001fde:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001fe0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001fe2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001fe4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001fe6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001fe8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001fea:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001fec:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001fee:	6e03      	ldr	r3, [r0, #96]	@ 0x60
}
 8001ff0:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001ff2:	61cb      	str	r3, [r1, #28]
}
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_SD_ConfigWideBusOperation>:
{
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8001ffa:	2303      	movs	r3, #3
{
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	b08b      	sub	sp, #44	@ 0x2c
 8002000:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8002002:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002006:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002008:	6800      	ldr	r0, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 800200a:	2b03      	cmp	r3, #3
 800200c:	d002      	beq.n	8002014 <HAL_SD_ConfigWideBusOperation+0x1c>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800200e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002012:	d103      	bne.n	800201c <HAL_SD_ConfigWideBusOperation+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002014:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201a:	e01d      	b.n	8002058 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800201c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8002020:	d137      	bne.n	8002092 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8002022:	2100      	movs	r1, #0
 8002024:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002028:	f000 fb82 	bl	8002730 <SDMMC_GetResponse>
 800202c:	0180      	lsls	r0, r0, #6
 800202e:	d449      	bmi.n	80020c4 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8002030:	a904      	add	r1, sp, #16
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff fc59 	bl	80018ea <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002038:	b960      	cbnz	r0, 8002054 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800203a:	9b05      	ldr	r3, [sp, #20]
 800203c:	0359      	lsls	r1, r3, #13
 800203e:	d544      	bpl.n	80020ca <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002040:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002042:	6820      	ldr	r0, [r4, #0]
 8002044:	0409      	lsls	r1, r1, #16
 8002046:	f000 fcee 	bl	8002a26 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800204a:	b918      	cbnz	r0, 8002054 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800204c:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	f000 fd02 	bl	8002a58 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002054:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002056:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002058:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800205a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800205c:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800205e:	2e00      	cmp	r6, #0
 8002060:	d03a      	beq.n	80020d8 <HAL_SD_ConfigWideBusOperation+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002062:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8002064:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002066:	63bb      	str	r3, [r7, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002068:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800206c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002070:	6820      	ldr	r0, [r4, #0]
 8002072:	f000 fc27 	bl	80028c4 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002076:	b130      	cbz	r0, 8002086 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002078:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800207a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800207c:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_SD_ConfigWideBusOperation+0x110>)
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002080:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002082:	4303      	orrs	r3, r0
 8002084:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800208a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800208e:	b00b      	add	sp, #44	@ 0x2c
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8002092:	b9e9      	cbnz	r1, 80020d0 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8002094:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002098:	f000 fb4a 	bl	8002730 <SDMMC_GetResponse>
 800209c:	0182      	lsls	r2, r0, #6
 800209e:	d411      	bmi.n	80020c4 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 80020a0:	a904      	add	r1, sp, #16
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff fc21 	bl	80018ea <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1d3      	bne.n	8002054 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80020ac:	9b05      	ldr	r3, [sp, #20]
 80020ae:	03db      	lsls	r3, r3, #15
 80020b0:	d50b      	bpl.n	80020ca <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80020b2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	0409      	lsls	r1, r1, #16
 80020b8:	f000 fcb5 	bl	8002a26 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80020bc:	2800      	cmp	r0, #0
 80020be:	d1c9      	bne.n	8002054 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80020c0:	4601      	mov	r1, r0
 80020c2:	e7c4      	b.n	800204e <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80020c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020c8:	e7c4      	b.n	8002054 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80020ca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80020ce:	e7c1      	b.n	8002054 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80020d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80020d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020d6:	e7bf      	b.n	8002058 <HAL_SD_ConfigWideBusOperation+0x60>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80020d8:	6863      	ldr	r3, [r4, #4]
 80020da:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80020dc:	68a3      	ldr	r3, [r4, #8]
 80020de:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80020e0:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80020e2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80020e6:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80020e8:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80020ea:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80020ec:	69a3      	ldr	r3, [r4, #24]
 80020ee:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 80020f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80020f2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80020f6:	ab04      	add	r3, sp, #16
 80020f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80020fc:	4638      	mov	r0, r7
 80020fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002100:	f000 fad9 	bl	80026b6 <SDMMC_Init>
 8002104:	e7b2      	b.n	800206c <HAL_SD_ConfigWideBusOperation+0x74>
 8002106:	bf00      	nop
 8002108:	004005ff 	.word	0x004005ff

0800210c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800210c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 800210e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002110:	0409      	lsls	r1, r1, #16
{
 8002112:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002114:	6800      	ldr	r0, [r0, #0]
 8002116:	f000 fcd1 	bl	8002abc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800211a:	4601      	mov	r1, r0
 800211c:	b928      	cbnz	r0, 800212a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800211e:	6820      	ldr	r0, [r4, #0]
 8002120:	f000 fb06 	bl	8002730 <SDMMC_GetResponse>
}
 8002124:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8002128:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800212a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800212c:	4303      	orrs	r3, r0
  uint32_t resp1 = 0;
 800212e:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8002130:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002132:	e7f7      	b.n	8002124 <HAL_SD_GetCardState+0x18>

08002134 <SD_DMAError>:
{
 8002134:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002136:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002138:	f7fe ffea 	bl	8001110 <HAL_DMA_GetError>
 800213c:	2802      	cmp	r0, #2
 800213e:	d026      	beq.n	800218e <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002142:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002144:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002146:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800214a:	d001      	beq.n	8002150 <SD_DMAError+0x1c>
 800214c:	2b01      	cmp	r3, #1
 800214e:	d11b      	bne.n	8002188 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002150:	6823      	ldr	r3, [r4, #0]
      CardState = HAL_SD_GetCardState(hsd);
 8002152:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002154:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <SD_DMAError+0x5c>)
 8002156:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002160:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002166:	63a3      	str	r3, [r4, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002168:	f7ff ffd0 	bl	800210c <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800216c:	3805      	subs	r0, #5
 800216e:	2801      	cmp	r0, #1
 8002170:	d805      	bhi.n	800217e <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	f000 fc24 	bl	80029c0 <SDMMC_CmdStopTransfer>
 8002178:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800217a:	4303      	orrs	r3, r0
 800217c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 800217e:	2301      	movs	r3, #1
 8002180:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002184:	2300      	movs	r3, #0
 8002186:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_SD_ErrorCallback(hsd);
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff fd29 	bl	8001be0 <HAL_SD_ErrorCallback>
}
 800218e:	bd10      	pop	{r4, pc}
 8002190:	004005ff 	.word	0x004005ff

08002194 <SD_DMATxAbort>:
{
 8002194:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002196:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002198:	f240 523a 	movw	r2, #1338	@ 0x53a
 800219c:	6823      	ldr	r3, [r4, #0]
  CardState = HAL_SD_GetCardState(hsd);
 800219e:	4620      	mov	r0, r4
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80021a0:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80021a2:	f7ff ffb3 	bl	800210c <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80021a6:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80021a8:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 80021aa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80021ae:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80021b0:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 80021b2:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80021b4:	d805      	bhi.n	80021c2 <SD_DMATxAbort+0x2e>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80021b6:	6820      	ldr	r0, [r4, #0]
 80021b8:	f000 fc02 	bl	80029c0 <SDMMC_CmdStopTransfer>
 80021bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80021be:	4303      	orrs	r3, r0
 80021c0:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80021c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    HAL_SD_AbortCallback(hsd);
 80021c4:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80021c6:	b913      	cbnz	r3, 80021ce <SD_DMATxAbort+0x3a>
    HAL_SD_AbortCallback(hsd);
 80021c8:	f7fe fccf 	bl	8000b6a <HAL_SD_AbortCallback>
}
 80021cc:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 80021ce:	f7ff fd07 	bl	8001be0 <HAL_SD_ErrorCallback>
}
 80021d2:	e7fb      	b.n	80021cc <SD_DMATxAbort+0x38>

080021d4 <HAL_SD_IRQHandler>:
{
 80021d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 80021d8:	6b05      	ldr	r5, [r0, #48]	@ 0x30
{
 80021da:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80021dc:	6800      	ldr	r0, [r0, #0]
 80021de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80021e0:	041f      	lsls	r7, r3, #16
 80021e2:	d51f      	bpl.n	8002224 <HAL_SD_IRQHandler+0x50>
 80021e4:	072e      	lsls	r6, r5, #28
 80021e6:	d51d      	bpl.n	8002224 <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 80021e8:	e9d4 670a 	ldrd	r6, r7, [r4, #40]	@ 0x28

  if (dataremaining > 0U)
 80021ec:	b1bf      	cbz	r7, 800221e <HAL_SD_IRQHandler+0x4a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80021ee:	1d35      	adds	r5, r6, #4
 80021f0:	f106 0824 	add.w	r8, r6, #36	@ 0x24
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80021f4:	6820      	ldr	r0, [r4, #0]
    for(count = 0U; count < 8U; count++)
 80021f6:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 80021f8:	f000 fa79 	bl	80026ee <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80021fc:	f805 0c08 	strb.w	r0, [r5, #-8]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002200:	0a03      	lsrs	r3, r0, #8
 8002202:	f805 3c07 	strb.w	r3, [r5, #-7]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002206:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002208:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800220a:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800220e:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 8002212:	45a8      	cmp	r8, r5
 8002214:	d1ee      	bne.n	80021f4 <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 8002216:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 8002218:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 800221a:	62a6      	str	r6, [r4, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800221c:	62e7      	str	r7, [r4, #44]	@ 0x2c
}
 800221e:	b002      	add	sp, #8
 8002220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8002224:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002226:	05d9      	lsls	r1, r3, #23
 8002228:	d544      	bpl.n	80022b4 <HAL_SD_IRQHandler+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800222a:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if((context & SD_CONTEXT_IT) != 0U)
 800222e:	072a      	lsls	r2, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8002230:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002232:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002234:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8002238:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800223c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800223e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	62c3      	str	r3, [r0, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8002246:	d51a      	bpl.n	800227e <HAL_SD_IRQHandler+0xaa>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002248:	f015 0f22 	tst.w	r5, #34	@ 0x22
 800224c:	d008      	beq.n	8002260 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800224e:	f000 fbb7 	bl	80029c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002252:	b128      	cbz	r0, 8002260 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 8002254:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002256:	4303      	orrs	r3, r0
          HAL_SD_ErrorCallback(hsd);
 8002258:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800225a:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800225c:	f7ff fcc0 	bl	8001be0 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	f240 523a 	movw	r2, #1338	@ 0x53a
        HAL_SD_RxCpltCallback(hsd);
 8002266:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800226a:	2301      	movs	r3, #1
 800226c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002270:	2300      	movs	r3, #0
 8002272:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002274:	07ab      	lsls	r3, r5, #30
 8002276:	d01a      	beq.n	80022ae <HAL_SD_IRQHandler+0xda>
        HAL_SD_RxCpltCallback(hsd);
 8002278:	f7fe fc7f 	bl	8000b7a <HAL_SD_RxCpltCallback>
 800227c:	e7cf      	b.n	800221e <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800227e:	062f      	lsls	r7, r5, #24
 8002280:	d5cd      	bpl.n	800221e <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002282:	06ae      	lsls	r6, r5, #26
 8002284:	d508      	bpl.n	8002298 <HAL_SD_IRQHandler+0xc4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002286:	f000 fb9b 	bl	80029c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800228a:	b128      	cbz	r0, 8002298 <HAL_SD_IRQHandler+0xc4>
          hsd->ErrorCode |= errorstate;
 800228c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800228e:	4303      	orrs	r3, r0
          HAL_SD_ErrorCallback(hsd);
 8002290:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8002292:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8002294:	f7ff fca4 	bl	8001be0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002298:	07a8      	lsls	r0, r5, #30
 800229a:	d1c0      	bne.n	800221e <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800229c:	6822      	ldr	r2, [r4, #0]
        HAL_SD_TxCpltCallback(hsd);
 800229e:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80022a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80022a2:	f023 0308 	bic.w	r3, r3, #8
 80022a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80022ae:	f7fe fc60 	bl	8000b72 <HAL_SD_TxCpltCallback>
 80022b2:	e7b4      	b.n	800221e <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80022b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80022b6:	0459      	lsls	r1, r3, #17
 80022b8:	d526      	bpl.n	8002308 <HAL_SD_IRQHandler+0x134>
 80022ba:	072a      	lsls	r2, r5, #28
 80022bc:	d524      	bpl.n	8002308 <HAL_SD_IRQHandler+0x134>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 80022be:	6a67      	ldr	r7, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d0ac      	beq.n	800221e <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 80022c4:	6a26      	ldr	r6, [r4, #32]
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80022c6:	1d35      	adds	r5, r6, #4
 80022c8:	f106 0824 	add.w	r8, r6, #36	@ 0x24
    {
      data = (uint32_t)(*tmp);
 80022cc:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    for(count = 0U; count < 8U; count++)
 80022d0:	3504      	adds	r5, #4
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80022d2:	a901      	add	r1, sp, #4
 80022d4:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 80022d6:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80022d8:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 80022dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022e0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80022e2:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 80022e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022ea:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80022ec:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 80022f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022f4:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80022f6:	f000 f9fd 	bl	80026f4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80022fa:	4545      	cmp	r5, r8
 80022fc:	d1e6      	bne.n	80022cc <HAL_SD_IRQHandler+0xf8>
    }

    hsd->pTxBuffPtr = tmp;
 80022fe:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 8002300:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 8002302:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8002304:	6267      	str	r7, [r4, #36]	@ 0x24
  }
}
 8002306:	e78a      	b.n	800221e <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8002308:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800230a:	f013 0f3a 	tst.w	r3, #58	@ 0x3a
 800230e:	d086      	beq.n	800221e <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8002310:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002312:	079b      	lsls	r3, r3, #30
 8002314:	d503      	bpl.n	800231e <HAL_SD_IRQHandler+0x14a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002316:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800231e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002320:	071f      	lsls	r7, r3, #28
 8002322:	d503      	bpl.n	800232c <HAL_SD_IRQHandler+0x158>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002324:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800232c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800232e:	069e      	lsls	r6, r3, #26
 8002330:	d503      	bpl.n	800233a <HAL_SD_IRQHandler+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002332:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002334:	f043 0320 	orr.w	r3, r3, #32
 8002338:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800233a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800233c:	06d9      	lsls	r1, r3, #27
 800233e:	d503      	bpl.n	8002348 <HAL_SD_IRQHandler+0x174>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002340:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002348:	f240 533a 	movw	r3, #1338	@ 0x53a
 800234c:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800234e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002350:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8002354:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002356:	f000 fb33 	bl	80029c0 <SDMMC_CmdStopTransfer>
 800235a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800235c:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800235e:	ea43 0300 	orr.w	r3, r3, r0
 8002362:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002364:	d508      	bpl.n	8002378 <HAL_SD_IRQHandler+0x1a4>
      hsd->State = HAL_SD_STATE_READY;
 8002366:	2301      	movs	r3, #1
      HAL_SD_ErrorCallback(hsd);
 8002368:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800236a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800236e:	2300      	movs	r3, #0
 8002370:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8002372:	f7ff fc35 	bl	8001be0 <HAL_SD_ErrorCallback>
 8002376:	e752      	b.n	800221e <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002378:	062b      	lsls	r3, r5, #24
 800237a:	f57f af50 	bpl.w	800221e <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800237e:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8002382:	d00d      	beq.n	80023a0 <HAL_SD_IRQHandler+0x1cc>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002384:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_SD_IRQHandler+0x1f8>)
 8002388:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800238a:	f7fe fdf0 	bl	8000f6e <HAL_DMA_Abort_IT>
 800238e:	2800      	cmp	r0, #0
 8002390:	f43f af45 	beq.w	800221e <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8002394:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 8002396:	b002      	add	sp, #8
 8002398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 800239c:	f7ff befa 	b.w	8002194 <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80023a0:	f015 0503 	ands.w	r5, r5, #3
 80023a4:	d009      	beq.n	80023ba <HAL_SD_IRQHandler+0x1e6>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80023a6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80023a8:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_SD_IRQHandler+0x1fc>)
 80023aa:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80023ac:	f7fe fddf 	bl	8000f6e <HAL_DMA_Abort_IT>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	f43f af34 	beq.w	800221e <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 80023b6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80023b8:	e7ed      	b.n	8002396 <HAL_SD_IRQHandler+0x1c2>
        hsd->State = HAL_SD_STATE_READY;
 80023ba:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023bc:	63a5      	str	r5, [r4, #56]	@ 0x38
        HAL_SD_AbortCallback(hsd);
 80023be:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80023c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80023c4:	6325      	str	r5, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80023c6:	f7fe fbd0 	bl	8000b6a <HAL_SD_AbortCallback>
}
 80023ca:	e728      	b.n	800221e <HAL_SD_IRQHandler+0x4a>
 80023cc:	08002195 	.word	0x08002195
 80023d0:	080023d5 	.word	0x080023d5

080023d4 <SD_DMARxAbort>:
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
 80023d4:	f7ff bede 	b.w	8002194 <SD_DMATxAbort>

080023d8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d133      	bne.n	800244c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f4:	4a16      	ldr	r2, [pc, #88]	@ (8002450 <HAL_TIM_Base_Start_IT+0x74>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01a      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023fe:	d017      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 8002400:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 8002408:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800240c:	4293      	cmp	r3, r2
 800240e:	d00f      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 8002410:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002414:	4293      	cmp	r3, r2
 8002416:	d00b      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 8002418:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 8002420:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x54>
 8002428:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800242c:	4293      	cmp	r3, r2
 800242e:	d107      	bne.n	8002440 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_TIM_Base_Start_IT+0x78>)
 8002434:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	2a06      	cmp	r2, #6
 8002438:	d006      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x6c>
 800243a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800243e:	d003      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2000      	movs	r0, #0
 800244a:	4770      	bx	lr
    return HAL_ERROR;
 800244c:	2001      	movs	r0, #1
}
 800244e:	4770      	bx	lr
 8002450:	40010000 	.word	0x40010000
 8002454:	00010007 	.word	0x00010007

08002458 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8002460:	6803      	ldr	r3, [r0, #0]
{
 8002462:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002464:	68dd      	ldr	r5, [r3, #12]
{
 8002466:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8002468:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800246a:	07b2      	lsls	r2, r6, #30
 800246c:	d50d      	bpl.n	800248a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800246e:	07a9      	lsls	r1, r5, #30
 8002470:	d50b      	bpl.n	800248a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002472:	f06f 0202 	mvn.w	r2, #2
 8002476:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002478:	2201      	movs	r2, #1
 800247a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	079a      	lsls	r2, r3, #30
 8002480:	d075      	beq.n	800256e <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	f7ff ffea 	bl	800245a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	2300      	movs	r3, #0
 8002488:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800248a:	0773      	lsls	r3, r6, #29
 800248c:	d510      	bpl.n	80024b0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800248e:	0768      	lsls	r0, r5, #29
 8002490:	d50e      	bpl.n	80024b0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002498:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800249a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800249c:	2202      	movs	r2, #2
 800249e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80024a6:	d068      	beq.n	800257a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024a8:	f7ff ffd7 	bl	800245a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ac:	2300      	movs	r3, #0
 80024ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024b0:	0731      	lsls	r1, r6, #28
 80024b2:	d50f      	bpl.n	80024d4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024b4:	072a      	lsls	r2, r5, #28
 80024b6:	d50d      	bpl.n	80024d4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c2:	2204      	movs	r2, #4
 80024c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	079b      	lsls	r3, r3, #30
 80024ca:	d05c      	beq.n	8002586 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80024cc:	f7ff ffc5 	bl	800245a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d0:	2300      	movs	r3, #0
 80024d2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024d4:	06f1      	lsls	r1, r6, #27
 80024d6:	d510      	bpl.n	80024fa <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024d8:	06ea      	lsls	r2, r5, #27
 80024da:	d50e      	bpl.n	80024fa <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	2208      	movs	r2, #8
 80024e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80024f0:	d04f      	beq.n	8002592 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	f7ff ffb2 	bl	800245a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	2300      	movs	r3, #0
 80024f8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024fa:	07f3      	lsls	r3, r6, #31
 80024fc:	d508      	bpl.n	8002510 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024fe:	07e8      	lsls	r0, r5, #31
 8002500:	d506      	bpl.n	8002510 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002508:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800250a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800250c:	f7fe f988 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002510:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 8002514:	d008      	beq.n	8002528 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002516:	0629      	lsls	r1, r5, #24
 8002518:	d506      	bpl.n	8002528 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8002520:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002522:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002524:	f000 f8c5 	bl	80026b2 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002528:	05f2      	lsls	r2, r6, #23
 800252a:	d508      	bpl.n	800253e <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800252c:	062b      	lsls	r3, r5, #24
 800252e:	d506      	bpl.n	800253e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002536:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002538:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800253a:	f000 f8bb 	bl	80026b4 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800253e:	0670      	lsls	r0, r6, #25
 8002540:	d508      	bpl.n	8002554 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002542:	0669      	lsls	r1, r5, #25
 8002544:	d506      	bpl.n	8002554 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800254c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800254e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002550:	f7ff ff85 	bl	800245e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002554:	06b2      	lsls	r2, r6, #26
 8002556:	d522      	bpl.n	800259e <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002558:	06ab      	lsls	r3, r5, #26
 800255a:	d520      	bpl.n	800259e <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002562:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002564:	611a      	str	r2, [r3, #16]
}
 8002566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800256a:	f000 b8a1 	b.w	80026b0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	f7ff ff73 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff ff72 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 8002578:	e785      	b.n	8002486 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	f7ff ff6d 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff ff6c 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 8002584:	e792      	b.n	80024ac <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	f7ff ff67 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258a:	4620      	mov	r0, r4
 800258c:	f7ff ff66 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 8002590:	e79e      	b.n	80024d0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	f7ff ff61 	bl	8002458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff ff60 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
 800259c:	e7ab      	b.n	80024f6 <HAL_TIM_IRQHandler+0x96>
}
 800259e:	bd70      	pop	{r4, r5, r6, pc}

080025a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a0:	4a29      	ldr	r2, [pc, #164]	@ (8002648 <TIM_Base_SetConfig+0xa8>)
  tmpcr1 = TIMx->CR1;
 80025a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a4:	4290      	cmp	r0, r2
 80025a6:	d012      	beq.n	80025ce <TIM_Base_SetConfig+0x2e>
 80025a8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80025ac:	d00f      	beq.n	80025ce <TIM_Base_SetConfig+0x2e>
 80025ae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80025b2:	4290      	cmp	r0, r2
 80025b4:	d00b      	beq.n	80025ce <TIM_Base_SetConfig+0x2e>
 80025b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025ba:	4290      	cmp	r0, r2
 80025bc:	d007      	beq.n	80025ce <TIM_Base_SetConfig+0x2e>
 80025be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025c2:	4290      	cmp	r0, r2
 80025c4:	d003      	beq.n	80025ce <TIM_Base_SetConfig+0x2e>
 80025c6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80025ca:	4290      	cmp	r0, r2
 80025cc:	d108      	bne.n	80025e0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80025d2:	684a      	ldr	r2, [r1, #4]
 80025d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	68ca      	ldr	r2, [r1, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	e016      	b.n	800260e <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e0:	4a1a      	ldr	r2, [pc, #104]	@ (800264c <TIM_Base_SetConfig+0xac>)
 80025e2:	4290      	cmp	r0, r2
 80025e4:	d0f7      	beq.n	80025d6 <TIM_Base_SetConfig+0x36>
 80025e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025ea:	4290      	cmp	r0, r2
 80025ec:	d0f3      	beq.n	80025d6 <TIM_Base_SetConfig+0x36>
 80025ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025f2:	4290      	cmp	r0, r2
 80025f4:	d0ef      	beq.n	80025d6 <TIM_Base_SetConfig+0x36>
 80025f6:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80025fa:	4290      	cmp	r0, r2
 80025fc:	d0eb      	beq.n	80025d6 <TIM_Base_SetConfig+0x36>
 80025fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002602:	4290      	cmp	r0, r2
 8002604:	d0e7      	beq.n	80025d6 <TIM_Base_SetConfig+0x36>
 8002606:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800260a:	4290      	cmp	r0, r2
 800260c:	d0e3      	beq.n	80025d6 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260e:	694a      	ldr	r2, [r1, #20]
 8002610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002614:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002616:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	688b      	ldr	r3, [r1, #8]
 800261a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800261c:	680b      	ldr	r3, [r1, #0]
 800261e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <TIM_Base_SetConfig+0xa8>)
 8002622:	4298      	cmp	r0, r3
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x8e>
 8002626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800262a:	4298      	cmp	r0, r3
 800262c:	d101      	bne.n	8002632 <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800262e:	690b      	ldr	r3, [r1, #16]
 8002630:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002632:	2301      	movs	r3, #1
 8002634:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002636:	6903      	ldr	r3, [r0, #16]
 8002638:	07db      	lsls	r3, r3, #31
 800263a:	d503      	bpl.n	8002644 <TIM_Base_SetConfig+0xa4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800263c:	6903      	ldr	r3, [r0, #16]
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6103      	str	r3, [r0, #16]
  }
}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000
 800264c:	40014000 	.word	0x40014000

08002650 <HAL_TIM_Base_Init>:
{
 8002650:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002652:	4604      	mov	r4, r0
 8002654:	b350      	cbz	r0, 80026ac <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800265a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800265e:	b91b      	cbnz	r3, 8002668 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002660:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002664:	f7ff feb8 	bl	80023d8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002672:	f7ff ff95 	bl	80025a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002676:	2301      	movs	r3, #1
  return HAL_OK;
 8002678:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002682:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002686:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800268a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800268e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800269a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800269e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80026a2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80026a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80026aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7fc      	b.n	80026aa <HAL_TIM_Base_Init+0x5a>

080026b0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80026b4:	4770      	bx	lr

080026b6 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80026b6:	b084      	sub	sp, #16
 80026b8:	b510      	push	{r4, lr}
 80026ba:	ac03      	add	r4, sp, #12
 80026bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80026c0:	460b      	mov	r3, r1
 80026c2:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026c4:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80026c6:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80026c8:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026ca:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
             Init.ClockBypass         |\
 80026ce:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80026d0:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026d2:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
             Init.ClockPowerSave      |\
 80026d6:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80026d8:	9907      	ldr	r1, [sp, #28]
 80026da:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80026dc:	9908      	ldr	r1, [sp, #32]
 80026de:	430b      	orrs	r3, r1

  return HAL_OK;
}
 80026e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026e4:	4313      	orrs	r3, r2
}
 80026e6:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80026e8:	6043      	str	r3, [r0, #4]
}
 80026ea:	2000      	movs	r0, #0
 80026ec:	4770      	bx	lr

080026ee <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80026ee:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 80026f2:	4770      	bx	lr

080026f4 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80026f4:	680b      	ldr	r3, [r1, #0]
 80026f6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 80026fa:	2000      	movs	r0, #0
 80026fc:	4770      	bx	lr

080026fe <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80026fe:	2303      	movs	r3, #3
 8002700:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8002702:	2000      	movs	r0, #0
 8002704:	4770      	bx	lr

08002706 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8002706:	6800      	ldr	r0, [r0, #0]
}
 8002708:	f000 0003 	and.w	r0, r0, #3
 800270c:	4770      	bx	lr

0800270e <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800270e:	680b      	ldr	r3, [r1, #0]
{
 8002710:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8002712:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002714:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002716:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800271a:	f36f 020b 	bfc	r2, #0, #12
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800271e:	4323      	orrs	r3, r4
                       Command->Response         |\
 8002720:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8002722:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8002724:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8002726:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002728:	4313      	orrs	r3, r2
 800272a:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 800272c:	2000      	movs	r0, #0
 800272e:	bd10      	pop	{r4, pc}

08002730 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8002730:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8002732:	5840      	ldr	r0, [r0, r1]
}  
 8002734:	4770      	bx	lr

08002736 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8002736:	680b      	ldr	r3, [r1, #0]
{
 8002738:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800273a:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800273c:	684b      	ldr	r3, [r1, #4]
 800273e:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002740:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002742:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002746:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800274a:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800274c:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800274e:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002750:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002752:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002754:	4313      	orrs	r3, r2
 8002756:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 8002758:	2000      	movs	r0, #0
 800275a:	bd10      	pop	{r4, pc}

0800275c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800275c:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800275e:	2300      	movs	r3, #0
{
 8002760:	b086      	sub	sp, #24
 8002762:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002764:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002766:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800276a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800276e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002772:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002774:	f7ff ffcb 	bl	800270e <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002778:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <SDMMC_CmdGoIdleState+0x48>)
 800277a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	fbb3 f3f2 	udiv	r3, r3, r2
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800278a:	b143      	cbz	r3, 800279e <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800278c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800278e:	3b01      	subs	r3, #1
 8002790:	0612      	lsls	r2, r2, #24
 8002792:	d5fa      	bpl.n	800278a <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002794:	23c5      	movs	r3, #197	@ 0xc5
  
  return SDMMC_ERROR_NONE;
 8002796:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002798:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800279a:	b006      	add	sp, #24
 800279c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800279e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  return errorstate;
 80027a2:	e7fa      	b.n	800279a <SDMMC_CmdGoIdleState+0x3e>
 80027a4:	20000000 	.word	0x20000000

080027a8 <SDMMC_GetCmdResp1>:
{
 80027a8:	4603      	mov	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80027aa:	4844      	ldr	r0, [pc, #272]	@ (80028bc <SDMMC_GetCmdResp1+0x114>)
{
 80027ac:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80027ae:	6800      	ldr	r0, [r0, #0]
 80027b0:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 80027b4:	fbb0 f0f4 	udiv	r0, r0, r4
 80027b8:	4342      	muls	r2, r0
    if (count-- == 0U)
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	d049      	beq.n	8002852 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 80027be:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80027c0:	f010 0f45 	tst.w	r0, #69	@ 0x45
 80027c4:	d007      	beq.n	80027d6 <SDMMC_GetCmdResp1+0x2e>
 80027c6:	0500      	lsls	r0, r0, #20
 80027c8:	d405      	bmi.n	80027d6 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80027ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027cc:	0754      	lsls	r4, r2, #29
 80027ce:	d504      	bpl.n	80027da <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80027d0:	2004      	movs	r0, #4
 80027d2:	6398      	str	r0, [r3, #56]	@ 0x38
}
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	3a01      	subs	r2, #1
 80027d8:	e7ef      	b.n	80027ba <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80027da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027dc:	07d0      	lsls	r0, r2, #31
 80027de:	d503      	bpl.n	80027e8 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80027e0:	2201      	movs	r2, #1
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80027e4:	2001      	movs	r0, #1
 80027e6:	e7f5      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80027e8:	22c5      	movs	r2, #197	@ 0xc5
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80027ec:	691a      	ldr	r2, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4291      	cmp	r1, r2
 80027f2:	d1f7      	bne.n	80027e4 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 80027f4:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80027f6:	4832      	ldr	r0, [pc, #200]	@ (80028c0 <SDMMC_GetCmdResp1+0x118>)
 80027f8:	4018      	ands	r0, r3
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d0ea      	beq.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db2a      	blt.n	8002858 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002802:	005a      	lsls	r2, r3, #1
 8002804:	d42b      	bmi.n	800285e <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002806:	009c      	lsls	r4, r3, #2
 8002808:	d42b      	bmi.n	8002862 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800280a:	00d9      	lsls	r1, r3, #3
 800280c:	d42b      	bmi.n	8002866 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800280e:	011a      	lsls	r2, r3, #4
 8002810:	d42c      	bmi.n	800286c <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002812:	015c      	lsls	r4, r3, #5
 8002814:	d42d      	bmi.n	8002872 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002816:	01d9      	lsls	r1, r3, #7
 8002818:	d42e      	bmi.n	8002878 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800281a:	021a      	lsls	r2, r3, #8
 800281c:	d42f      	bmi.n	800287e <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800281e:	025c      	lsls	r4, r3, #9
 8002820:	d430      	bmi.n	8002884 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002822:	0299      	lsls	r1, r3, #10
 8002824:	d431      	bmi.n	800288a <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002826:	02da      	lsls	r2, r3, #11
 8002828:	d432      	bmi.n	8002890 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800282a:	035c      	lsls	r4, r3, #13
 800282c:	d433      	bmi.n	8002896 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800282e:	0399      	lsls	r1, r3, #14
 8002830:	d434      	bmi.n	800289c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002832:	03da      	lsls	r2, r3, #15
 8002834:	d435      	bmi.n	80028a2 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002836:	041c      	lsls	r4, r3, #16
 8002838:	d436      	bmi.n	80028a8 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800283a:	0459      	lsls	r1, r3, #17
 800283c:	d437      	bmi.n	80028ae <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800283e:	049a      	lsls	r2, r3, #18
 8002840:	d438      	bmi.n	80028b4 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002842:	f013 0f08 	tst.w	r3, #8
 8002846:	bf0c      	ite	eq
 8002848:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800284c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8002850:	e7c0      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8002852:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002856:	e7bd      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002858:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800285c:	e7ba      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800285e:	2040      	movs	r0, #64	@ 0x40
 8002860:	e7b8      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002862:	2080      	movs	r0, #128	@ 0x80
 8002864:	e7b6      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002866:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800286a:	e7b3      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800286c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002870:	e7b0      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002872:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002876:	e7ad      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002878:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800287c:	e7aa      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800287e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002882:	e7a7      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002884:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002888:	e7a4      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800288a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800288e:	e7a1      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8002890:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002894:	e79e      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002896:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800289a:	e79b      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800289c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80028a0:	e798      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80028a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028a6:	e795      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80028a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80028ac:	e792      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80028ae:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80028b2:	e78f      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80028b4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80028b8:	e78c      	b.n	80027d4 <SDMMC_GetCmdResp1+0x2c>
 80028ba:	bf00      	nop
 80028bc:	20000000 	.word	0x20000000
 80028c0:	fdffe008 	.word	0xfdffe008

080028c4 <SDMMC_CmdBlockLength>:
{
 80028c4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80028c6:	2340      	movs	r3, #64	@ 0x40
{
 80028c8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80028ca:	2510      	movs	r5, #16
{
 80028cc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80028ce:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80028d0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80028d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80028d4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80028d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80028e0:	f7ff ff15 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80028e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e8:	4629      	mov	r1, r5
 80028ea:	4620      	mov	r0, r4
}
 80028ec:	b007      	add	sp, #28
 80028ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80028f2:	f7ff bf59 	b.w	80027a8 <SDMMC_GetCmdResp1>

080028f6 <SDMMC_CmdReadSingleBlock>:
{
 80028f6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80028f8:	2340      	movs	r3, #64	@ 0x40
{
 80028fa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80028fc:	2511      	movs	r5, #17
{
 80028fe:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002900:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002902:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002904:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002906:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800290a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800290e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002912:	f7ff fefc 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4629      	mov	r1, r5
 800291c:	4620      	mov	r0, r4
}
 800291e:	b007      	add	sp, #28
 8002920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002924:	f7ff bf40 	b.w	80027a8 <SDMMC_GetCmdResp1>

08002928 <SDMMC_CmdReadMultiBlock>:
{
 8002928:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800292a:	2340      	movs	r3, #64	@ 0x40
{
 800292c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800292e:	2512      	movs	r5, #18
{
 8002930:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002932:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002934:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002936:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002938:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800293c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002940:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002944:	f7ff fee3 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294c:	4629      	mov	r1, r5
 800294e:	4620      	mov	r0, r4
}
 8002950:	b007      	add	sp, #28
 8002952:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8002956:	f7ff bf27 	b.w	80027a8 <SDMMC_GetCmdResp1>

0800295a <SDMMC_CmdWriteSingleBlock>:
{
 800295a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800295c:	2340      	movs	r3, #64	@ 0x40
{
 800295e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002960:	2518      	movs	r5, #24
{
 8002962:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002964:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002966:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002968:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800296a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800296e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002972:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002976:	f7ff feca 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4629      	mov	r1, r5
 8002980:	4620      	mov	r0, r4
}
 8002982:	b007      	add	sp, #28
 8002984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8002988:	f7ff bf0e 	b.w	80027a8 <SDMMC_GetCmdResp1>

0800298c <SDMMC_CmdWriteMultiBlock>:
{
 800298c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800298e:	2340      	movs	r3, #64	@ 0x40
{
 8002990:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002992:	2519      	movs	r5, #25
{
 8002994:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002996:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002998:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800299a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800299c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80029a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80029a8:	f7ff feb1 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80029ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b0:	4629      	mov	r1, r5
 80029b2:	4620      	mov	r0, r4
}
 80029b4:	b007      	add	sp, #28
 80029b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80029ba:	f7ff bef5 	b.w	80027a8 <SDMMC_GetCmdResp1>
	...

080029c0 <SDMMC_CmdStopTransfer>:
{
 80029c0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80029c2:	2300      	movs	r3, #0
{
 80029c4:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80029c6:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80029c8:	2240      	movs	r2, #64	@ 0x40
{
 80029ca:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80029cc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80029ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80029d2:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80029d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80029dc:	f7ff fe97 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80029e0:	4a03      	ldr	r2, [pc, #12]	@ (80029f0 <SDMMC_CmdStopTransfer+0x30>)
 80029e2:	4629      	mov	r1, r5
 80029e4:	4620      	mov	r0, r4
}
 80029e6:	b007      	add	sp, #28
 80029e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80029ec:	f7ff bedc 	b.w	80027a8 <SDMMC_GetCmdResp1>
 80029f0:	05f5e100 	.word	0x05f5e100

080029f4 <SDMMC_CmdSelDesel>:
{
 80029f4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80029f6:	2340      	movs	r3, #64	@ 0x40
{
 80029f8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80029fa:	2507      	movs	r5, #7
{
 80029fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80029fe:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a00:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a02:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a04:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a10:	f7ff fe7d 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4629      	mov	r1, r5
 8002a1a:	4620      	mov	r0, r4
}
 8002a1c:	b007      	add	sp, #28
 8002a1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8002a22:	f7ff bec1 	b.w	80027a8 <SDMMC_GetCmdResp1>

08002a26 <SDMMC_CmdAppCommand>:
{
 8002a26:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a28:	2340      	movs	r3, #64	@ 0x40
{
 8002a2a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a2c:	2537      	movs	r5, #55	@ 0x37
{
 8002a2e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a30:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002a32:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a34:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a36:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a42:	f7ff fe64 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	4620      	mov	r0, r4
}
 8002a4e:	b007      	add	sp, #28
 8002a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8002a54:	f7ff bea8 	b.w	80027a8 <SDMMC_GetCmdResp1>

08002a58 <SDMMC_CmdBusWidth>:
{
 8002a58:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a5a:	2340      	movs	r3, #64	@ 0x40
{
 8002a5c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a5e:	2506      	movs	r5, #6
{
 8002a60:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a62:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8002a64:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a66:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a68:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a74:	f7ff fe4b 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8002a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	4620      	mov	r0, r4
}
 8002a80:	b007      	add	sp, #28
 8002a82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8002a86:	f7ff be8f 	b.w	80027a8 <SDMMC_GetCmdResp1>

08002a8a <SDMMC_CmdSendSCR>:
{
 8002a8a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002a8c:	2300      	movs	r3, #0
{
 8002a8e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002a90:	2533      	movs	r5, #51	@ 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002a92:	2240      	movs	r2, #64	@ 0x40
{
 8002a94:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002a96:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002a98:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002a9c:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aa4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002aa6:	f7ff fe32 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4629      	mov	r1, r5
 8002ab0:	4620      	mov	r0, r4
}
 8002ab2:	b007      	add	sp, #28
 8002ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8002ab8:	f7ff be76 	b.w	80027a8 <SDMMC_GetCmdResp1>

08002abc <SDMMC_CmdSendStatus>:
{
 8002abc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002abe:	2340      	movs	r3, #64	@ 0x40
{
 8002ac0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002ac2:	250d      	movs	r5, #13
{
 8002ac4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ac6:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = Argument;
 8002ac8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002aca:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002acc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002ad8:	f7ff fe19 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8002adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4620      	mov	r0, r4
}
 8002ae4:	b007      	add	sp, #28
 8002ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8002aea:	f7ff be5d 	b.w	80027a8 <SDMMC_GetCmdResp1>
	...

08002af0 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <SDMMC_GetCmdResp2+0x48>)
 8002af2:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8002af6:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002b02:	434b      	muls	r3, r1
    if (count-- == 0U)
 8002b04:	b1ab      	cbz	r3, 8002b32 <SDMMC_GetCmdResp2+0x42>
    sta_reg = SDMMCx->STA;
 8002b06:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8002b08:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8002b0c:	d007      	beq.n	8002b1e <SDMMC_GetCmdResp2+0x2e>
 8002b0e:	0509      	lsls	r1, r1, #20
 8002b10:	d405      	bmi.n	8002b1e <SDMMC_GetCmdResp2+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002b12:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002b14:	075b      	lsls	r3, r3, #29
 8002b16:	d504      	bpl.n	8002b22 <SDMMC_GetCmdResp2+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002b18:	2004      	movs	r0, #4
 8002b1a:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002b1c:	4770      	bx	lr
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	e7f0      	b.n	8002b04 <SDMMC_GetCmdResp2+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002b22:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002b24:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002b2c:	23c5      	moveq	r3, #197	@ 0xc5
 8002b2e:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8002b30:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002b32:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8002b36:	4770      	bx	lr
 8002b38:	20000000 	.word	0x20000000

08002b3c <SDMMC_CmdSendCID>:
{
 8002b3c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002b3e:	2300      	movs	r3, #0
{
 8002b40:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002b42:	2202      	movs	r2, #2
{
 8002b44:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b46:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002b48:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002b4c:	22c0      	movs	r2, #192	@ 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002b4e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b56:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b58:	f7ff fdd9 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002b5c:	4620      	mov	r0, r4
}
 8002b5e:	b006      	add	sp, #24
 8002b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002b64:	f7ff bfc4 	b.w	8002af0 <SDMMC_GetCmdResp2>

08002b68 <SDMMC_CmdSendCSD>:
{
 8002b68:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002b6a:	2209      	movs	r2, #9
{
 8002b6c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002b6e:	23c0      	movs	r3, #192	@ 0xc0
{
 8002b70:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8002b72:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b74:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8002b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b7e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002b82:	a901      	add	r1, sp, #4
 8002b84:	f7ff fdc3 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002b88:	4620      	mov	r0, r4
}
 8002b8a:	b006      	add	sp, #24
 8002b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8002b90:	f7ff bfae 	b.w	8002af0 <SDMMC_GetCmdResp2>

08002b94 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <SDMMC_GetCmdResp3+0x40>)
 8002b96:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8002b9a:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002ba6:	434b      	muls	r3, r1
    if (count-- == 0U)
 8002ba8:	b18b      	cbz	r3, 8002bce <SDMMC_GetCmdResp3+0x3a>
    sta_reg = SDMMCx->STA;
 8002baa:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8002bac:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8002bb0:	d008      	beq.n	8002bc4 <SDMMC_GetCmdResp3+0x30>
 8002bb2:	0509      	lsls	r1, r1, #20
 8002bb4:	d406      	bmi.n	8002bc4 <SDMMC_GetCmdResp3+0x30>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002bb6:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002bb8:	f010 0004 	ands.w	r0, r0, #4
 8002bbc:	d004      	beq.n	8002bc8 <SDMMC_GetCmdResp3+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002bbe:	2004      	movs	r0, #4
 8002bc0:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002bc2:	4770      	bx	lr
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	e7ef      	b.n	8002ba8 <SDMMC_GetCmdResp3+0x14>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002bc8:	23c5      	movs	r3, #197	@ 0xc5
 8002bca:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8002bcc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002bce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8002bd2:	4770      	bx	lr
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002bd8:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002bdc:	2229      	movs	r2, #41	@ 0x29
 8002bde:	2340      	movs	r3, #64	@ 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002be0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
{
 8002be4:	b510      	push	{r4, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002bea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002bec:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002bfa:	a901      	add	r1, sp, #4
 8002bfc:	f7ff fd87 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8002c00:	4620      	mov	r0, r4
}
 8002c02:	b006      	add	sp, #24
 8002c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8002c08:	f7ff bfc4 	b.w	8002b94 <SDMMC_GetCmdResp3>

08002c0c <SDMMC_GetCmdResp6>:
{
 8002c0c:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002c0e:	481e      	ldr	r0, [pc, #120]	@ (8002c88 <SDMMC_GetCmdResp6+0x7c>)
{
 8002c10:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002c12:	6800      	ldr	r0, [r0, #0]
 8002c14:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8002c18:	fbb0 f0f4 	udiv	r0, r0, r4
 8002c1c:	f241 3488 	movw	r4, #5000	@ 0x1388
 8002c20:	4360      	muls	r0, r4
    if (count-- == 0U)
 8002c22:	b358      	cbz	r0, 8002c7c <SDMMC_GetCmdResp6+0x70>
    sta_reg = SDMMCx->STA;
 8002c24:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8002c26:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8002c2a:	d007      	beq.n	8002c3c <SDMMC_GetCmdResp6+0x30>
 8002c2c:	0524      	lsls	r4, r4, #20
 8002c2e:	d405      	bmi.n	8002c3c <SDMMC_GetCmdResp6+0x30>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002c30:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002c32:	0744      	lsls	r4, r0, #29
 8002c34:	d504      	bpl.n	8002c40 <SDMMC_GetCmdResp6+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002c36:	2004      	movs	r0, #4
 8002c38:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8002c3a:	bd10      	pop	{r4, pc}
 8002c3c:	3801      	subs	r0, #1
 8002c3e:	e7f0      	b.n	8002c22 <SDMMC_GetCmdResp6+0x16>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002c40:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002c42:	07c0      	lsls	r0, r0, #31
 8002c44:	d503      	bpl.n	8002c4e <SDMMC_GetCmdResp6+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002c46:	2201      	movs	r2, #1
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e7f5      	b.n	8002c3a <SDMMC_GetCmdResp6+0x2e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8002c4e:	6918      	ldr	r0, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8002c50:	b2c0      	uxtb	r0, r0
 8002c52:	4281      	cmp	r1, r0
 8002c54:	d1f9      	bne.n	8002c4a <SDMMC_GetCmdResp6+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8002c56:	21c5      	movs	r1, #197	@ 0xc5
 8002c58:	6399      	str	r1, [r3, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8002c5a:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002c5c:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8002c60:	d102      	bne.n	8002c68 <SDMMC_GetCmdResp6+0x5c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8002c66:	e7e8      	b.n	8002c3a <SDMMC_GetCmdResp6+0x2e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002c68:	045a      	lsls	r2, r3, #17
 8002c6a:	d40a      	bmi.n	8002c82 <SDMMC_GetCmdResp6+0x76>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002c6c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002c70:	bf0c      	ite	eq
 8002c72:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8002c76:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 8002c7a:	e7de      	b.n	8002c3a <SDMMC_GetCmdResp6+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8002c7c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002c80:	e7db      	b.n	8002c3a <SDMMC_GetCmdResp6+0x2e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002c82:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c86:	e7d8      	b.n	8002c3a <SDMMC_GetCmdResp6+0x2e>
 8002c88:	20000000 	.word	0x20000000

08002c8c <SDMMC_CmdSetRelAdd>:
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002c8e:	2300      	movs	r3, #0
{
 8002c90:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002c92:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8002c94:	2240      	movs	r2, #64	@ 0x40
{
 8002c96:	4604      	mov	r4, r0
 8002c98:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002c9a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002c9c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002ca0:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002ca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002caa:	f7ff fd30 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002cae:	462a      	mov	r2, r5
 8002cb0:	4631      	mov	r1, r6
 8002cb2:	4620      	mov	r0, r4
}
 8002cb4:	b006      	add	sp, #24
 8002cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002cba:	f7ff bfa7 	b.w	8002c0c <SDMMC_GetCmdResp6>
	...

08002cc0 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <SDMMC_GetCmdResp7+0x50>)
 8002cc2:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8002cc6:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cce:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002cd2:	434b      	muls	r3, r1
    if (count-- == 0U)
 8002cd4:	b1cb      	cbz	r3, 8002d0a <SDMMC_GetCmdResp7+0x4a>
    sta_reg = SDMMCx->STA;
 8002cd6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8002cd8:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8002cdc:	d007      	beq.n	8002cee <SDMMC_GetCmdResp7+0x2e>
 8002cde:	0508      	lsls	r0, r1, #20
 8002ce0:	d405      	bmi.n	8002cee <SDMMC_GetCmdResp7+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8002ce2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002ce4:	0759      	lsls	r1, r3, #29
 8002ce6:	d504      	bpl.n	8002cf2 <SDMMC_GetCmdResp7+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8002ce8:	2004      	movs	r0, #4
 8002cea:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002cec:	4770      	bx	lr
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	e7f0      	b.n	8002cd4 <SDMMC_GetCmdResp7+0x14>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8002cf2:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002cf4:	f010 0001 	ands.w	r0, r0, #1
 8002cf8:	d002      	beq.n	8002d00 <SDMMC_GetCmdResp7+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8002cfa:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8002cfc:	6393      	str	r3, [r2, #56]	@ 0x38
 8002cfe:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8002d00:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002d02:	065b      	lsls	r3, r3, #25
 8002d04:	d503      	bpl.n	8002d0e <SDMMC_GetCmdResp7+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8002d06:	2340      	movs	r3, #64	@ 0x40
 8002d08:	e7f8      	b.n	8002cfc <SDMMC_GetCmdResp7+0x3c>
      return SDMMC_ERROR_TIMEOUT;
 8002d0a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8002d0e:	4770      	bx	lr
 8002d10:	20000000 	.word	0x20000000

08002d14 <SDMMC_CmdOperCond>:
{
 8002d14:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002d16:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
{
 8002d1a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002d1c:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002d1e:	2140      	movs	r1, #64	@ 0x40
{
 8002d20:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002d22:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002d30:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8002d32:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8002d34:	f7ff fceb 	bl	800270e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8002d38:	4620      	mov	r0, r4
}
 8002d3a:	b006      	add	sp, #24
 8002d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8002d40:	f7ff bfbe 	b.w	8002cc0 <SDMMC_GetCmdResp7>

08002d44 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002d44:	4b03      	ldr	r3, [pc, #12]	@ (8002d54 <disk_status+0x10>)
 8002d46:	181a      	adds	r2, r3, r0
 8002d48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	7b10      	ldrb	r0, [r2, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4718      	bx	r3
 8002d54:	20000b1c 	.word	0x20000b1c

08002d58 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <disk_initialize+0x1c>)
 8002d5a:	5c1a      	ldrb	r2, [r3, r0]
 8002d5c:	b942      	cbnz	r2, 8002d70 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8002d5e:	2201      	movs	r2, #1
 8002d60:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002d62:	181a      	adds	r2, r3, r0
 8002d64:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002d68:	7b10      	ldrb	r0, [r2, #12]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4718      	bx	r3
  }
  return stat;
}
 8002d70:	2000      	movs	r0, #0
 8002d72:	4770      	bx	lr
 8002d74:	20000b1c 	.word	0x20000b1c

08002d78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002d78:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d7a:	4c05      	ldr	r4, [pc, #20]	@ (8002d90 <disk_read+0x18>)
 8002d7c:	1825      	adds	r5, r4, r0
 8002d7e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002d82:	6860      	ldr	r0, [r4, #4]
 8002d84:	6884      	ldr	r4, [r0, #8]
 8002d86:	7b28      	ldrb	r0, [r5, #12]
 8002d88:	46a4      	mov	ip, r4
  return res;
}
 8002d8a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d8c:	4760      	bx	ip
 8002d8e:	bf00      	nop
 8002d90:	20000b1c 	.word	0x20000b1c

08002d94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002d94:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002d96:	4c05      	ldr	r4, [pc, #20]	@ (8002dac <disk_write+0x18>)
 8002d98:	1825      	adds	r5, r4, r0
 8002d9a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002d9e:	6860      	ldr	r0, [r4, #4]
 8002da0:	68c4      	ldr	r4, [r0, #12]
 8002da2:	7b28      	ldrb	r0, [r5, #12]
 8002da4:	46a4      	mov	ip, r4
  return res;
}
 8002da6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002da8:	4760      	bx	ip
 8002daa:	bf00      	nop
 8002dac:	20000b1c 	.word	0x20000b1c

08002db0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <disk_ioctl+0x18>)
{
 8002db2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002db4:	181c      	adds	r4, r3, r0
 8002db6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	7b20      	ldrb	r0, [r4, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8002dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002dc4:	4718      	bx	r3
 8002dc6:	bf00      	nop
 8002dc8:	20000b1c 	.word	0x20000b1c

08002dcc <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	4770      	bx	lr

08002dd0 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8002dd0:	6800      	ldr	r0, [r0, #0]
 8002dd2:	4770      	bx	lr

08002dd4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002dd4:	0a0b      	lsrs	r3, r1, #8
 8002dd6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002dd8:	7043      	strb	r3, [r0, #1]
 8002dda:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002ddc:	0e09      	lsrs	r1, r1, #24
 8002dde:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002de0:	70c1      	strb	r1, [r0, #3]
}
 8002de2:	4770      	bx	lr

08002de4 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8002de4:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8002de6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8002dea:	4290      	cmp	r0, r2
 8002dec:	d1fb      	bne.n	8002de6 <mem_set+0x2>
}
 8002dee:	4770      	bx	lr

08002df0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <chk_lock+0x70>)
{
 8002df2:	4602      	mov	r2, r0
		if (Files[i].fs) {	/* Existing entry */
 8002df4:	6818      	ldr	r0, [r3, #0]
{
 8002df6:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8002df8:	b160      	cbz	r0, 8002e14 <chk_lock+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002dfa:	6814      	ldr	r4, [r2, #0]
 8002dfc:	42a0      	cmp	r0, r4
 8002dfe:	d107      	bne.n	8002e10 <chk_lock+0x20>
 8002e00:	685c      	ldr	r4, [r3, #4]
 8002e02:	6890      	ldr	r0, [r2, #8]
 8002e04:	4284      	cmp	r4, r0
 8002e06:	d103      	bne.n	8002e10 <chk_lock+0x20>
				Files[i].clu == dp->obj.sclust &&
 8002e08:	689c      	ldr	r4, [r3, #8]
 8002e0a:	6950      	ldr	r0, [r2, #20]
 8002e0c:	4284      	cmp	r4, r0
 8002e0e:	d012      	beq.n	8002e36 <chk_lock+0x46>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002e10:	2400      	movs	r4, #0
 8002e12:	e000      	b.n	8002e16 <chk_lock+0x26>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8002e14:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8002e16:	6918      	ldr	r0, [r3, #16]
 8002e18:	b1b8      	cbz	r0, 8002e4a <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002e1a:	6815      	ldr	r5, [r2, #0]
 8002e1c:	42a8      	cmp	r0, r5
 8002e1e:	d107      	bne.n	8002e30 <chk_lock+0x40>
 8002e20:	695d      	ldr	r5, [r3, #20]
 8002e22:	6890      	ldr	r0, [r2, #8]
 8002e24:	4285      	cmp	r5, r0
 8002e26:	d103      	bne.n	8002e30 <chk_lock+0x40>
				Files[i].clu == dp->obj.sclust &&
 8002e28:	6998      	ldr	r0, [r3, #24]
 8002e2a:	6952      	ldr	r2, [r2, #20]
 8002e2c:	4290      	cmp	r0, r2
 8002e2e:	d006      	beq.n	8002e3e <chk_lock+0x4e>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002e30:	b13c      	cbz	r4, 8002e42 <chk_lock+0x52>
 8002e32:	2000      	movs	r0, #0
 8002e34:	e009      	b.n	8002e4a <chk_lock+0x5a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002e36:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e38:	b141      	cbz	r1, 8002e4c <chk_lock+0x5c>
 8002e3a:	2010      	movs	r0, #16
 8002e3c:	e005      	b.n	8002e4a <chk_lock+0x5a>
 8002e3e:	2201      	movs	r2, #1
 8002e40:	e7fa      	b.n	8002e38 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002e42:	2902      	cmp	r1, #2
 8002e44:	bf0c      	ite	eq
 8002e46:	2000      	moveq	r0, #0
 8002e48:	2012      	movne	r0, #18
}
 8002e4a:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e4c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002e50:	8998      	ldrh	r0, [r3, #12]
 8002e52:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8002e56:	4258      	negs	r0, r3
 8002e58:	4158      	adcs	r0, r3
 8002e5a:	0100      	lsls	r0, r0, #4
 8002e5c:	e7f5      	b.n	8002e4a <chk_lock+0x5a>
 8002e5e:	bf00      	nop
 8002e60:	20000af0 	.word	0x20000af0

08002e64 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8002e64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <inc_lock+0x80>)
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	6806      	ldr	r6, [r0, #0]
 8002e6c:	429e      	cmp	r6, r3
 8002e6e:	d107      	bne.n	8002e80 <inc_lock+0x1c>
 8002e70:	6855      	ldr	r5, [r2, #4]
 8002e72:	6884      	ldr	r4, [r0, #8]
 8002e74:	42a5      	cmp	r5, r4
 8002e76:	d103      	bne.n	8002e80 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8002e78:	6895      	ldr	r5, [r2, #8]
 8002e7a:	6944      	ldr	r4, [r0, #20]
 8002e7c:	42a5      	cmp	r5, r4
 8002e7e:	d019      	beq.n	8002eb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002e80:	6914      	ldr	r4, [r2, #16]
 8002e82:	42b4      	cmp	r4, r6
 8002e84:	d118      	bne.n	8002eb8 <inc_lock+0x54>
 8002e86:	6957      	ldr	r7, [r2, #20]
 8002e88:	6885      	ldr	r5, [r0, #8]
 8002e8a:	42af      	cmp	r7, r5
 8002e8c:	d114      	bne.n	8002eb8 <inc_lock+0x54>
			Files[i].clu == dp->obj.sclust &&
 8002e8e:	6997      	ldr	r7, [r2, #24]
 8002e90:	6945      	ldr	r5, [r0, #20]
 8002e92:	42af      	cmp	r7, r5
 8002e94:	d110      	bne.n	8002eb8 <inc_lock+0x54>
 8002e96:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e98:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 8002e9c:	8980      	ldrh	r0, [r0, #12]
 8002e9e:	b9e9      	cbnz	r1, 8002edc <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ea0:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8002ea4:	8989      	ldrh	r1, [r1, #12]
 8002ea6:	3101      	adds	r1, #1
 8002ea8:	b289      	uxth	r1, r1
 8002eaa:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8002eae:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002eb0:	8191      	strh	r1, [r2, #12]
}
 8002eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e7ef      	b.n	8002e98 <inc_lock+0x34>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002eb8:	b10b      	cbz	r3, 8002ebe <inc_lock+0x5a>
 8002eba:	b98c      	cbnz	r4, 8002ee0 <inc_lock+0x7c>
 8002ebc:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8002ebe:	011d      	lsls	r5, r3, #4
 8002ec0:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8002ec4:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8002ec6:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8002ec8:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8002eca:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8002ecc:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8002ece:	2000      	movs	r0, #0
 8002ed0:	81a0      	strh	r0, [r4, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002ed2:	2900      	cmp	r1, #0
 8002ed4:	d0e4      	beq.n	8002ea0 <inc_lock+0x3c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002eda:	e7e6      	b.n	8002eaa <inc_lock+0x46>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d0fa      	beq.n	8002ed6 <inc_lock+0x72>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e7e6      	b.n	8002eb2 <inc_lock+0x4e>
 8002ee4:	20000af0 	.word	0x20000af0

08002ee8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002ee8:	3801      	subs	r0, #1
 8002eea:	2801      	cmp	r0, #1
 8002eec:	d815      	bhi.n	8002f1a <dec_lock+0x32>
		n = Files[i].ctr;
 8002eee:	4a0c      	ldr	r2, [pc, #48]	@ (8002f20 <dec_lock+0x38>)
 8002ef0:	0101      	lsls	r1, r0, #4
 8002ef2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8002ef6:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efc:	d104      	bne.n	8002f08 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8002efe:	2300      	movs	r3, #0
 8002f00:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002f02:	2300      	movs	r3, #0
 8002f04:	5053      	str	r3, [r2, r1]
 8002f06:	e006      	b.n	8002f16 <dec_lock+0x2e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0fa      	beq.n	8002f02 <dec_lock+0x1a>
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8002f10:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f5      	beq.n	8002f02 <dec_lock+0x1a>
		res = FR_OK;
 8002f16:	2000      	movs	r0, #0
 8002f18:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002f1a:	2002      	movs	r0, #2
	}
	return res;
}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000af0 	.word	0x20000af0

08002f24 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <clear_lock+0x18>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4290      	cmp	r0, r2
 8002f2a:	bf04      	itt	eq
 8002f2c:	2200      	moveq	r2, #0
 8002f2e:	601a      	streq	r2, [r3, #0]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	4290      	cmp	r0, r2
 8002f34:	bf04      	itt	eq
 8002f36:	2200      	moveq	r2, #0
 8002f38:	611a      	streq	r2, [r3, #16]
	}
}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000af0 	.word	0x20000af0

08002f40 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002f40:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8002f42:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002f44:	3b02      	subs	r3, #2
 8002f46:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8002f48:	bf83      	ittte	hi
 8002f4a:	8943      	ldrhhi	r3, [r0, #10]
 8002f4c:	6b00      	ldrhi	r0, [r0, #48]	@ 0x30
 8002f4e:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002f52:	2000      	movls	r0, #0
}
 8002f54:	4770      	bx	lr

08002f56 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f56:	6802      	ldr	r2, [r0, #0]
 8002f58:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002f5a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f5c:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002f5e:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002f60:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f64:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002f66:	b130      	cbz	r0, 8002f76 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8002f68:	4281      	cmp	r1, r0
 8002f6a:	d302      	bcc.n	8002f72 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8002f6c:	1a09      	subs	r1, r1, r0
 8002f6e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002f70:	e7f8      	b.n	8002f64 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002f72:	6858      	ldr	r0, [r3, #4]
 8002f74:	4408      	add	r0, r1
}
 8002f76:	4770      	bx	lr

08002f78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8002f7e:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002f80:	01c2      	lsls	r2, r0, #7
 8002f82:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
 8002f86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002f8a:	fa50 f282 	uxtab	r2, r0, r2
	} while (--n);
 8002f8e:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002f90:	b2d0      	uxtb	r0, r2
	} while (--n);
 8002f92:	d1f5      	bne.n	8002f80 <sum_sfn+0x8>
	return sum;
}
 8002f94:	4770      	bx	lr

08002f96 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002f96:	6802      	ldr	r2, [r0, #0]
{
 8002f98:	4601      	mov	r1, r0
 8002f9a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8002f9c:	b1aa      	cbz	r2, 8002fca <get_ldnumber+0x34>
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	461c      	mov	r4, r3
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002fa2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002fa6:	281f      	cmp	r0, #31
 8002fa8:	d90d      	bls.n	8002fc6 <get_ldnumber+0x30>
 8002faa:	283a      	cmp	r0, #58	@ 0x3a
 8002fac:	d1f8      	bne.n	8002fa0 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8002fae:	7813      	ldrb	r3, [r2, #0]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002fb0:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8002fb4:	b2c3      	uxtb	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d807      	bhi.n	8002fca <get_ldnumber+0x34>
			i = *tp++ - '0';
 8002fba:	3201      	adds	r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002fbc:	4294      	cmp	r4, r2
 8002fbe:	d104      	bne.n	8002fca <get_ldnumber+0x34>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 8002fc0:	3401      	adds	r4, #1
 8002fc2:	600c      	str	r4, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8002fc4:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e7fc      	b.n	8002fc4 <get_ldnumber+0x2e>
	int vol = -1;
 8002fca:	f04f 30ff 	mov.w	r0, #4294967295
 8002fce:	e7f9      	b.n	8002fc4 <get_ldnumber+0x2e>

08002fd0 <sync_window>:
{
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002fd2:	78c3      	ldrb	r3, [r0, #3]
{
 8002fd4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002fd6:	b90b      	cbnz	r3, 8002fdc <sync_window+0xc>
	FRESULT res = FR_OK;
 8002fd8:	2000      	movs	r0, #0
}
 8002fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8002fdc:	6b45      	ldr	r5, [r0, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002fde:	f100 0738 	add.w	r7, r0, #56	@ 0x38
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	7840      	ldrb	r0, [r0, #1]
 8002fe6:	462a      	mov	r2, r5
 8002fe8:	4639      	mov	r1, r7
 8002fea:	f7ff fed3 	bl	8002d94 <disk_write>
 8002fee:	b990      	cbnz	r0, 8003016 <sync_window+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002ff0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ff2:	6a22      	ldr	r2, [r4, #32]
 8002ff4:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8002ff6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d2ed      	bcs.n	8002fd8 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ffc:	78a6      	ldrb	r6, [r4, #2]
 8002ffe:	2e01      	cmp	r6, #1
 8003000:	d9ea      	bls.n	8002fd8 <sync_window+0x8>
					wsect += fs->fsize;
 8003002:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003004:	4639      	mov	r1, r7
 8003006:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003008:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800300a:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800300c:	2301      	movs	r3, #1
 800300e:	462a      	mov	r2, r5
 8003010:	f7ff fec0 	bl	8002d94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003014:	e7f3      	b.n	8002ffe <sync_window+0x2e>
			res = FR_DISK_ERR;
 8003016:	2001      	movs	r0, #1
 8003018:	e7df      	b.n	8002fda <sync_window+0xa>

0800301a <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800301a:	3801      	subs	r0, #1
 800301c:	440a      	add	r2, r1
			*d++ = *s++;
 800301e:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8003022:	4291      	cmp	r1, r2
			*d++ = *s++;
 8003024:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8003028:	d1f9      	bne.n	800301e <mem_cpy.part.0+0x4>
}
 800302a:	4770      	bx	lr

0800302c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 800302c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003030:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8003032:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8003034:	7803      	ldrb	r3, [r0, #0]
 8003036:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003038:	bf01      	itttt	eq
 800303a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800303c:	750a      	strbeq	r2, [r1, #20]
 800303e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8003040:	754a      	strbeq	r2, [r1, #21]
}
 8003042:	4770      	bx	lr

08003044 <move_window>:
{
 8003044:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003046:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8003048:	4605      	mov	r5, r0
 800304a:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800304c:	428b      	cmp	r3, r1
 800304e:	d010      	beq.n	8003072 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8003050:	f7ff ffbe 	bl	8002fd0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003054:	b960      	cbnz	r0, 8003070 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003056:	4622      	mov	r2, r4
 8003058:	2301      	movs	r3, #1
 800305a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800305e:	7868      	ldrb	r0, [r5, #1]
 8003060:	f7ff fe8a 	bl	8002d78 <disk_read>
				res = FR_DISK_ERR;
 8003064:	2800      	cmp	r0, #0
 8003066:	bf1c      	itt	ne
 8003068:	f04f 34ff 	movne.w	r4, #4294967295
 800306c:	2001      	movne	r0, #1
			fs->winsect = sector;
 800306e:	636c      	str	r4, [r5, #52]	@ 0x34
}
 8003070:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8003072:	2000      	movs	r0, #0
 8003074:	e7fc      	b.n	8003070 <move_window+0x2c>
	...

08003078 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003078:	2300      	movs	r3, #0
{
 800307a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800307c:	70c3      	strb	r3, [r0, #3]
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
{
 8003082:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003084:	6343      	str	r3, [r0, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003086:	f7ff ffdd 	bl	8003044 <move_window>
 800308a:	4603      	mov	r3, r0
 800308c:	bb18      	cbnz	r0, 80030d6 <check_fs+0x5e>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800308e:	f8b4 1236 	ldrh.w	r1, [r4, #566]	@ 0x236
 8003092:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8003096:	4291      	cmp	r1, r2
 8003098:	d11f      	bne.n	80030da <check_fs+0x62>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800309a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800309e:	2ae9      	cmp	r2, #233	@ 0xe9
 80030a0:	d005      	beq.n	80030ae <check_fs+0x36>
 80030a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80030a4:	490f      	ldr	r1, [pc, #60]	@ (80030e4 <check_fs+0x6c>)
 80030a6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80030aa:	428a      	cmp	r2, r1
 80030ac:	d117      	bne.n	80030de <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80030ae:	f104 006e 	add.w	r0, r4, #110	@ 0x6e
 80030b2:	4a0d      	ldr	r2, [pc, #52]	@ (80030e8 <check_fs+0x70>)
 80030b4:	f7ff fe8c 	bl	8002dd0 <ld_dword>
 80030b8:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80030bc:	4290      	cmp	r0, r2
 80030be:	d008      	beq.n	80030d2 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <check_fs+0x74>)
 80030c2:	f104 008a 	add.w	r0, r4, #138	@ 0x8a
 80030c6:	f7ff fe83 	bl	8002dd0 <ld_dword>
 80030ca:	1ac3      	subs	r3, r0, r3
 80030cc:	bf18      	it	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80030d6:	2304      	movs	r3, #4
 80030d8:	e7fb      	b.n	80030d2 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80030da:	2303      	movs	r3, #3
 80030dc:	e7f9      	b.n	80030d2 <check_fs+0x5a>
	return 2;
 80030de:	2302      	movs	r3, #2
 80030e0:	e7f7      	b.n	80030d2 <check_fs+0x5a>
 80030e2:	bf00      	nop
 80030e4:	009000eb 	.word	0x009000eb
 80030e8:	00544146 	.word	0x00544146
 80030ec:	33544146 	.word	0x33544146

080030f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80030f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80030f4:	2300      	movs	r3, #0
{
 80030f6:	4688      	mov	r8, r1
 80030f8:	4617      	mov	r7, r2
	*rfs = 0;
 80030fa:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80030fc:	f7ff ff4b 	bl	8002f96 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003100:	1e05      	subs	r5, r0, #0
 8003102:	f2c0 811f 	blt.w	8003344 <find_volume+0x254>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003106:	4e93      	ldr	r6, [pc, #588]	@ (8003354 <find_volume+0x264>)
 8003108:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800310c:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800310e:	2c00      	cmp	r4, #0
 8003110:	f000 811a 	beq.w	8003348 <find_volume+0x258>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8003114:	6920      	ldr	r0, [r4, #16]
 8003116:	f001 fe40 	bl	8004d9a <ff_req_grant>
 800311a:	2800      	cmp	r0, #0
 800311c:	f000 8116 	beq.w	800334c <find_volume+0x25c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003120:	f8c8 4000 	str.w	r4, [r8]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003124:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003128:	7823      	ldrb	r3, [r4, #0]
 800312a:	b173      	cbz	r3, 800314a <find_volume+0x5a>
		stat = disk_status(fs->drv);
 800312c:	7860      	ldrb	r0, [r4, #1]
 800312e:	f7ff fe09 	bl	8002d44 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003132:	07c3      	lsls	r3, r0, #31
 8003134:	d409      	bmi.n	800314a <find_volume+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003136:	2f00      	cmp	r7, #0
 8003138:	f000 80dc 	beq.w	80032f4 <find_volume+0x204>
 800313c:	0741      	lsls	r1, r0, #29
 800313e:	f140 80d9 	bpl.w	80032f4 <find_volume+0x204>
				return FR_WRITE_PROTECTED;
 8003142:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8003144:	b004      	add	sp, #16
 8003146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800314a:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800314c:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 800314e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003150:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003152:	f7ff fe01 	bl	8002d58 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003156:	07c2      	lsls	r2, r0, #31
 8003158:	f100 80fa 	bmi.w	8003350 <find_volume+0x260>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800315c:	b10f      	cbz	r7, 8003162 <find_volume+0x72>
 800315e:	0743      	lsls	r3, r0, #29
 8003160:	d4ef      	bmi.n	8003142 <find_volume+0x52>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003162:	2100      	movs	r1, #0
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff ff87 	bl	8003078 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800316a:	2802      	cmp	r0, #2
 800316c:	f040 80ce 	bne.w	800330c <find_volume+0x21c>
 8003170:	466d      	mov	r5, sp
 8003172:	f504 73ff 	add.w	r3, r4, #510	@ 0x1fe
 8003176:	f204 213e 	addw	r1, r4, #574	@ 0x23e
 800317a:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800317c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8003180:	b110      	cbz	r0, 8003188 <find_volume+0x98>
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fe24 	bl	8002dd0 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003188:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800318a:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800318e:	428b      	cmp	r3, r1
 8003190:	d1f4      	bne.n	800317c <find_volume+0x8c>
 8003192:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 8003196:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800319a:	2f00      	cmp	r7, #0
 800319c:	f000 80ac 	beq.w	80032f8 <find_volume+0x208>
 80031a0:	4639      	mov	r1, r7
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff ff68 	bl	8003078 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80031a8:	2801      	cmp	r0, #1
 80031aa:	f200 80a6 	bhi.w	80032fa <find_volume+0x20a>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80031ae:	f8b4 3043 	ldrh.w	r3, [r4, #67]	@ 0x43
 80031b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b6:	f040 80af 	bne.w	8003318 <find_volume+0x228>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80031ba:	f8b4 104e 	ldrh.w	r1, [r4, #78]	@ 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80031be:	b921      	cbnz	r1, 80031ca <find_volume+0xda>
 80031c0:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80031c4:	f7ff fe04 	bl	8002dd0 <ld_dword>
 80031c8:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80031ca:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
		fs->fsize = fasize;
 80031ce:	6221      	str	r1, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80031d0:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80031d2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f200 809f 	bhi.w	8003318 <find_volume+0x228>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80031da:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
 80031de:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	f000 8099 	beq.w	8003318 <find_volume+0x228>
 80031e6:	1e6b      	subs	r3, r5, #1
 80031e8:	422b      	tst	r3, r5
 80031ea:	f040 8095 	bne.w	8003318 <find_volume+0x228>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80031ee:	f8b4 8049 	ldrh.w	r8, [r4, #73]	@ 0x49
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80031f2:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80031f6:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80031fa:	f040 808d 	bne.w	8003318 <find_volume+0x228>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80031fe:	f8b4 004b 	ldrh.w	r0, [r4, #75]	@ 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003202:	b918      	cbnz	r0, 800320c <find_volume+0x11c>
 8003204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003208:	f7ff fde2 	bl	8002dd0 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800320c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8081 	beq.w	8003318 <find_volume+0x228>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003216:	fb01 fc02 	mul.w	ip, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800321a:	eb03 1e18 	add.w	lr, r3, r8, lsr #4
 800321e:	44e6      	add	lr, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003220:	4570      	cmp	r0, lr
 8003222:	d379      	bcc.n	8003318 <find_volume+0x228>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003224:	eba0 000e 	sub.w	r0, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003228:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800322a:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800322e:	d373      	bcc.n	8003318 <find_volume+0x228>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003230:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 8003234:	4282      	cmp	r2, r0
 8003236:	d873      	bhi.n	8003320 <find_volume+0x230>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003238:	f640 75f5 	movw	r5, #4085	@ 0xff5
 800323c:	42aa      	cmp	r2, r5
 800323e:	bf94      	ite	ls
 8003240:	2501      	movls	r5, #1
 8003242:	2502      	movhi	r5, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003244:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003246:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
 8003248:	eb07 000e 	add.w	r0, r7, lr
		if (fmt == FS_FAT32) {
 800324c:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800324e:	61e2      	str	r2, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8003250:	6267      	str	r7, [r4, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003252:	62a3      	str	r3, [r4, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8003254:	6320      	str	r0, [r4, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8003256:	d165      	bne.n	8003324 <find_volume+0x234>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003258:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800325c:	ea58 0303 	orrs.w	r3, r8, r3
 8003260:	d15a      	bne.n	8003318 <find_volume+0x228>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003262:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003264:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8003268:	f7ff fdb2 	bl	8002dd0 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800326c:	f202 12ff 	addw	r2, r2, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003270:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003272:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
 8003276:	d34f      	bcc.n	8003318 <find_volume+0x228>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800327c:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800327e:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8003282:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8003286:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003288:	d12b      	bne.n	80032e2 <find_volume+0x1f2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800328a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 800328e:	2b01      	cmp	r3, #1
 8003290:	d127      	bne.n	80032e2 <find_volume+0x1f2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003292:	1c79      	adds	r1, r7, #1
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff fed5 	bl	8003044 <move_window>
 800329a:	bb10      	cbnz	r0, 80032e2 <find_volume+0x1f2>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800329c:	f8b4 2236 	ldrh.w	r2, [r4, #566]	@ 0x236
 80032a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
			fs->fsi_flag = 0;
 80032a4:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d11b      	bne.n	80032e2 <find_volume+0x1f2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80032aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003358 <find_volume+0x268>)
 80032ac:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80032b0:	f7ff fd8e 	bl	8002dd0 <ld_dword>
 80032b4:	4298      	cmp	r0, r3
 80032b6:	d114      	bne.n	80032e2 <find_volume+0x1f2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80032b8:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 80032bc:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 80032c0:	f7ff fd86 	bl	8002dd0 <ld_dword>
 80032c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80032c8:	3320      	adds	r3, #32
 80032ca:	4298      	cmp	r0, r3
 80032cc:	d109      	bne.n	80032e2 <find_volume+0x1f2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80032ce:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 80032d2:	f7ff fd7d 	bl	8002dd0 <ld_dword>
 80032d6:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80032d8:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 80032dc:	f7ff fd78 	bl	8002dd0 <ld_dword>
 80032e0:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 80032e2:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
	clear_lock(fs);
 80032e4:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 80032e6:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80032e8:	3301      	adds	r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	80e3      	strh	r3, [r4, #6]
 80032ee:	8533      	strh	r3, [r6, #40]	@ 0x28
	clear_lock(fs);
 80032f0:	f7ff fe18 	bl	8002f24 <clear_lock>
			return FR_OK;				/* The file system object is valid */
 80032f4:	2000      	movs	r0, #0
 80032f6:	e725      	b.n	8003144 <find_volume+0x54>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80032f8:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80032fa:	f108 0801 	add.w	r8, r8, #1
 80032fe:	f1b8 0f04 	cmp.w	r8, #4
 8003302:	f47f af48 	bne.w	8003196 <find_volume+0xa6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003306:	2804      	cmp	r0, #4
 8003308:	d106      	bne.n	8003318 <find_volume+0x228>
 800330a:	e001      	b.n	8003310 <find_volume+0x220>
 800330c:	2804      	cmp	r0, #4
 800330e:	d101      	bne.n	8003314 <find_volume+0x224>
 8003310:	2001      	movs	r0, #1
 8003312:	e717      	b.n	8003144 <find_volume+0x54>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003314:	2801      	cmp	r0, #1
 8003316:	d901      	bls.n	800331c <find_volume+0x22c>
 8003318:	200d      	movs	r0, #13
 800331a:	e713      	b.n	8003144 <find_volume+0x54>
 800331c:	2700      	movs	r7, #0
 800331e:	e746      	b.n	80031ae <find_volume+0xbe>
		fmt = FS_FAT32;
 8003320:	2503      	movs	r5, #3
 8003322:	e78f      	b.n	8003244 <find_volume+0x154>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003324:	f1b8 0f00 	cmp.w	r8, #0
 8003328:	d0f6      	beq.n	8003318 <find_volume+0x228>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800332a:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800332c:	eb03 000c 	add.w	r0, r3, ip
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003330:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003334:	bf1b      	ittet	ne
 8003336:	189b      	addne	r3, r3, r2
 8003338:	f002 0201 	andne.w	r2, r2, #1
 800333c:	461a      	moveq	r2, r3
 800333e:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
 8003342:	e793      	b.n	800326c <find_volume+0x17c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003344:	200b      	movs	r0, #11
 8003346:	e6fd      	b.n	8003144 <find_volume+0x54>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003348:	200c      	movs	r0, #12
 800334a:	e6fb      	b.n	8003144 <find_volume+0x54>
	ENTER_FF(fs);						/* Lock the volume */
 800334c:	200f      	movs	r0, #15
 800334e:	e6f9      	b.n	8003144 <find_volume+0x54>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003350:	2003      	movs	r0, #3
 8003352:	e6f7      	b.n	8003144 <find_volume+0x54>
 8003354:	20000af0 	.word	0x20000af0
 8003358:	41615252 	.word	0x41615252

0800335c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800335c:	2901      	cmp	r1, #1
{
 800335e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003362:	4606      	mov	r6, r0
 8003364:	460c      	mov	r4, r1
 8003366:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003368:	d96e      	bls.n	8003448 <put_fat+0xec>
 800336a:	69c3      	ldr	r3, [r0, #28]
 800336c:	428b      	cmp	r3, r1
 800336e:	d96b      	bls.n	8003448 <put_fat+0xec>
		switch (fs->fs_type) {
 8003370:	7803      	ldrb	r3, [r0, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d03d      	beq.n	80033f2 <put_fat+0x96>
 8003376:	2b03      	cmp	r3, #3
 8003378:	d04e      	beq.n	8003418 <put_fat+0xbc>
 800337a:	2b01      	cmp	r3, #1
 800337c:	d164      	bne.n	8003448 <put_fat+0xec>
			bc = (UINT)clst; bc += bc / 2;
 800337e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003382:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003384:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003388:	f7ff fe5c 	bl	8003044 <move_window>
			if (res != FR_OK) break;
 800338c:	4605      	mov	r5, r0
 800338e:	bb28      	cbnz	r0, 80033dc <put_fat+0x80>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003390:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8003394:	f106 0938 	add.w	r9, r6, #56	@ 0x38
 8003398:	f108 0a01 	add.w	sl, r8, #1
 800339c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80033a0:	b2fb      	uxtb	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80033a2:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80033a4:	bf1f      	itttt	ne
 80033a6:	f819 2008 	ldrbne.w	r2, [r9, r8]
 80033aa:	f002 020f 	andne.w	r2, r2, #15
 80033ae:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
 80033b2:	b2db      	uxtbne	r3, r3
 80033b4:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 80033b8:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80033ba:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
			fs->wflag = 1;
 80033bc:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80033be:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80033c2:	f7ff fe3f 	bl	8003044 <move_window>
			if (res != FR_OK) break;
 80033c6:	4605      	mov	r5, r0
 80033c8:	b940      	cbnz	r0, 80033dc <put_fat+0x80>
			p = fs->win + bc % SS(fs);
 80033ca:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80033ce:	b144      	cbz	r4, 80033e2 <put_fat+0x86>
 80033d0:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80033d4:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	70f3      	strb	r3, [r6, #3]
}
 80033dc:	4628      	mov	r0, r5
 80033de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80033e2:	f819 300a 	ldrb.w	r3, [r9, sl]
 80033e6:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80033ea:	f023 030f 	bic.w	r3, r3, #15
 80033ee:	431f      	orrs	r7, r3
 80033f0:	e7f0      	b.n	80033d4 <put_fat+0x78>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80033f2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80033f4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80033f8:	f7ff fe24 	bl	8003044 <move_window>
			if (res != FR_OK) break;
 80033fc:	4605      	mov	r5, r0
 80033fe:	2800      	cmp	r0, #0
 8003400:	d1ec      	bne.n	80033dc <put_fat+0x80>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003402:	0064      	lsls	r4, r4, #1
 8003404:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 8003408:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800340c:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800340e:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8003410:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8003414:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
 8003416:	e7df      	b.n	80033d8 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003418:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800341a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800341e:	f7ff fe11 	bl	8003044 <move_window>
			if (res != FR_OK) break;
 8003422:	4605      	mov	r5, r0
 8003424:	2800      	cmp	r0, #0
 8003426:	d1d9      	bne.n	80033dc <put_fat+0x80>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003428:	00a4      	lsls	r4, r4, #2
 800342a:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 800342e:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8003432:	4423      	add	r3, r4
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fccb 	bl	8002dd0 <ld_dword>
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800343a:	4601      	mov	r1, r0
 800343c:	4618      	mov	r0, r3
 800343e:	f367 011b 	bfi	r1, r7, #0, #28
 8003442:	f7ff fcc7 	bl	8002dd4 <st_dword>
 8003446:	e7c7      	b.n	80033d8 <put_fat+0x7c>
	FRESULT res = FR_INT_ERR;
 8003448:	2502      	movs	r5, #2
 800344a:	e7c7      	b.n	80033dc <put_fat+0x80>

0800344c <sync_fs>:
{
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003450:	f7ff fdbe 	bl	8002fd0 <sync_window>
 8003454:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8003456:	2800      	cmp	r0, #0
 8003458:	d142      	bne.n	80034e0 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800345a:	7823      	ldrb	r3, [r4, #0]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d137      	bne.n	80034d0 <sync_fs+0x84>
 8003460:	7927      	ldrb	r7, [r4, #4]
 8003462:	2f01      	cmp	r7, #1
 8003464:	d134      	bne.n	80034d0 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8003466:	f104 0638 	add.w	r6, r4, #56	@ 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 800346a:	2355      	movs	r3, #85	@ 0x55
			mem_set(fs->win, 0, SS(fs));
 800346c:	4601      	mov	r1, r0
 800346e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003472:	4630      	mov	r0, r6
 8003474:	f7ff fcb6 	bl	8002de4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8003478:	f884 3236 	strb.w	r3, [r4, #566]	@ 0x236
	*ptr++ = (BYTE)val;
 800347c:	23aa      	movs	r3, #170	@ 0xaa
	*ptr++ = (BYTE)val;
 800347e:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8003480:	2172      	movs	r1, #114	@ 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003482:	f504 7008 	add.w	r0, r4, #544	@ 0x220
	*ptr++ = (BYTE)val;
 8003486:	f884 3237 	strb.w	r3, [r4, #567]	@ 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 800348a:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 800348c:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8003490:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8003494:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8003498:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800349a:	f884 121c 	strb.w	r1, [r4, #540]	@ 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 800349e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
	*ptr++ = (BYTE)val;
 80034a2:	f884 321f 	strb.w	r3, [r4, #543]	@ 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 80034a6:	f884 121d 	strb.w	r1, [r4, #541]	@ 0x21d
	*ptr++ = (BYTE)val; val >>= 8;
 80034aa:	f884 221e 	strb.w	r2, [r4, #542]	@ 0x21e
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80034ae:	69a1      	ldr	r1, [r4, #24]
 80034b0:	f7ff fc90 	bl	8002dd4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80034b4:	6961      	ldr	r1, [r4, #20]
 80034b6:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 80034ba:	f7ff fc8b 	bl	8002dd4 <st_dword>
			fs->winsect = fs->volbase + 1;
 80034be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80034c0:	463b      	mov	r3, r7
 80034c2:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 80034c4:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80034c6:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80034c8:	6362      	str	r2, [r4, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80034ca:	f7ff fc63 	bl	8002d94 <disk_write>
			fs->fsi_flag = 0;
 80034ce:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80034d0:	2200      	movs	r2, #0
 80034d2:	7860      	ldrb	r0, [r4, #1]
 80034d4:	4611      	mov	r1, r2
 80034d6:	f7ff fc6b 	bl	8002db0 <disk_ioctl>
 80034da:	3800      	subs	r0, #0
 80034dc:	bf18      	it	ne
 80034de:	2001      	movne	r0, #1
}
 80034e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034e2 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80034e2:	b140      	cbz	r0, 80034f6 <unlock_fs+0x14>
 80034e4:	290c      	cmp	r1, #12
 80034e6:	d804      	bhi.n	80034f2 <unlock_fs+0x10>
 80034e8:	290a      	cmp	r1, #10
 80034ea:	d804      	bhi.n	80034f6 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 80034ec:	6900      	ldr	r0, [r0, #16]
 80034ee:	f001 bc5d 	b.w	8004dac <ff_rel_grant>
 80034f2:	290f      	cmp	r1, #15
 80034f4:	d1fa      	bne.n	80034ec <unlock_fs+0xa>
}
 80034f6:	4770      	bx	lr

080034f8 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 80034f8:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80034fa:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80034fc:	bf04      	itt	eq
 80034fe:	8a8a      	ldrheq	r2, [r1, #20]
 8003500:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8003504:	4618      	mov	r0, r3
 8003506:	4770      	bx	lr

08003508 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003508:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800350a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350c:	4606      	mov	r6, r0
 800350e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003510:	d94e      	bls.n	80035b0 <get_fat.isra.0+0xa8>
 8003512:	69c3      	ldr	r3, [r0, #28]
 8003514:	4299      	cmp	r1, r3
 8003516:	d24b      	bcs.n	80035b0 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8003518:	7803      	ldrb	r3, [r0, #0]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d029      	beq.n	8003572 <get_fat.isra.0+0x6a>
 800351e:	2b03      	cmp	r3, #3
 8003520:	d034      	beq.n	800358c <get_fat.isra.0+0x84>
 8003522:	2b01      	cmp	r3, #1
 8003524:	d144      	bne.n	80035b0 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8003526:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800352a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800352c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8003530:	f7ff fd88 	bl	8003044 <move_window>
 8003534:	b110      	cbz	r0, 800353c <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003536:	f04f 30ff 	mov.w	r0, #4294967295
}
 800353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800353c:	1c6f      	adds	r7, r5, #1
 800353e:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003542:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003544:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8003546:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003548:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800354c:	f895 5038 	ldrb.w	r5, [r5, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003550:	f7ff fd78 	bl	8003044 <move_window>
 8003554:	2800      	cmp	r0, #0
 8003556:	d1ee      	bne.n	8003536 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003558:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800355c:	4437      	add	r7, r6
 800355e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003562:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003566:	07e3      	lsls	r3, r4, #31
 8003568:	bf4c      	ite	mi
 800356a:	0900      	lsrmi	r0, r0, #4
 800356c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003570:	e7e3      	b.n	800353a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003572:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003574:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003578:	f7ff fd64 	bl	8003044 <move_window>
 800357c:	2800      	cmp	r0, #0
 800357e:	d1da      	bne.n	8003536 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003580:	0064      	lsls	r4, r4, #1
 8003582:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8003586:	4434      	add	r4, r6
 8003588:	8f20      	ldrh	r0, [r4, #56]	@ 0x38
			break;
 800358a:	e7d6      	b.n	800353a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800358c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800358e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003592:	f7ff fd57 	bl	8003044 <move_window>
 8003596:	2800      	cmp	r0, #0
 8003598:	d1cd      	bne.n	8003536 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800359a:	00a4      	lsls	r4, r4, #2
 800359c:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 80035a0:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 80035a4:	4420      	add	r0, r4
 80035a6:	f7ff fc13 	bl	8002dd0 <ld_dword>
 80035aa:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 80035ae:	e7c4      	b.n	800353a <get_fat.isra.0+0x32>
		val = 1;	/* Internal error */
 80035b0:	2001      	movs	r0, #1
	return val;
 80035b2:	e7c2      	b.n	800353a <get_fat.isra.0+0x32>

080035b4 <remove_chain>:
{
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	460c      	mov	r4, r1
 80035b8:	4606      	mov	r6, r0
 80035ba:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 80035bc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80035be:	2c01      	cmp	r4, #1
 80035c0:	d92b      	bls.n	800361a <remove_chain+0x66>
 80035c2:	69eb      	ldr	r3, [r5, #28]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	d928      	bls.n	800361a <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80035c8:	b12a      	cbz	r2, 80035d6 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	4628      	mov	r0, r5
 80035d0:	f7ff fec4 	bl	800335c <put_fat>
		if (res != FR_OK) return res;
 80035d4:	b938      	cbnz	r0, 80035e6 <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80035d6:	4621      	mov	r1, r4
 80035d8:	6830      	ldr	r0, [r6, #0]
 80035da:	4627      	mov	r7, r4
 80035dc:	f7ff ff94 	bl	8003508 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 80035e0:	4604      	mov	r4, r0
 80035e2:	b908      	cbnz	r0, 80035e8 <remove_chain+0x34>
	return FR_OK;
 80035e4:	2000      	movs	r0, #0
}
 80035e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80035e8:	2801      	cmp	r0, #1
 80035ea:	d016      	beq.n	800361a <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d016      	beq.n	800361e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80035f0:	2200      	movs	r2, #0
 80035f2:	4639      	mov	r1, r7
 80035f4:	4628      	mov	r0, r5
 80035f6:	f7ff feb1 	bl	800335c <put_fat>
			if (res != FR_OK) return res;
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d1f3      	bne.n	80035e6 <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80035fe:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8003602:	1e91      	subs	r1, r2, #2
 8003604:	428b      	cmp	r3, r1
 8003606:	d205      	bcs.n	8003614 <remove_chain+0x60>
			fs->free_clst++;
 8003608:	3301      	adds	r3, #1
 800360a:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 800360c:	792b      	ldrb	r3, [r5, #4]
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003614:	42a2      	cmp	r2, r4
 8003616:	d8de      	bhi.n	80035d6 <remove_chain+0x22>
 8003618:	e7e4      	b.n	80035e4 <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800361a:	2002      	movs	r0, #2
 800361c:	e7e3      	b.n	80035e6 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800361e:	2001      	movs	r0, #1
 8003620:	e7e1      	b.n	80035e6 <remove_chain+0x32>

08003622 <create_chain>:
{
 8003622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003626:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8003628:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800362a:	460f      	mov	r7, r1
 800362c:	b971      	cbnz	r1, 800364c <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800362e:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003630:	b1ee      	cbz	r6, 800366e <create_chain+0x4c>
 8003632:	69eb      	ldr	r3, [r5, #28]
 8003634:	429e      	cmp	r6, r3
 8003636:	bf28      	it	cs
 8003638:	2601      	movcs	r6, #1
		ncl = scl;	/* Start cluster */
 800363a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800363c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800363e:	69eb      	ldr	r3, [r5, #28]
 8003640:	42a3      	cmp	r3, r4
 8003642:	d817      	bhi.n	8003674 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8003644:	2e01      	cmp	r6, #1
 8003646:	d114      	bne.n	8003672 <create_chain+0x50>
 8003648:	2400      	movs	r4, #0
 800364a:	e006      	b.n	800365a <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800364c:	4628      	mov	r0, r5
 800364e:	f7ff ff5b 	bl	8003508 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003652:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003654:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003656:	d803      	bhi.n	8003660 <create_chain+0x3e>
 8003658:	2401      	movs	r4, #1
}
 800365a:	4620      	mov	r0, r4
 800365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d030      	beq.n	80036c6 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003664:	69eb      	ldr	r3, [r5, #28]
 8003666:	4283      	cmp	r3, r0
 8003668:	d8f7      	bhi.n	800365a <create_chain+0x38>
		scl = clst;
 800366a:	463e      	mov	r6, r7
 800366c:	e7e5      	b.n	800363a <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800366e:	2601      	movs	r6, #1
 8003670:	e7e3      	b.n	800363a <create_chain+0x18>
				ncl = 2;
 8003672:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003674:	4621      	mov	r1, r4
 8003676:	f8d8 0000 	ldr.w	r0, [r8]
 800367a:	f7ff ff45 	bl	8003508 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 800367e:	b130      	cbz	r0, 800368e <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003680:	2801      	cmp	r0, #1
 8003682:	d0e9      	beq.n	8003658 <create_chain+0x36>
 8003684:	3001      	adds	r0, #1
 8003686:	d01e      	beq.n	80036c6 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8003688:	42b4      	cmp	r4, r6
 800368a:	d1d7      	bne.n	800363c <create_chain+0x1a>
 800368c:	e7dc      	b.n	8003648 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	4621      	mov	r1, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f7ff fe61 	bl	800335c <put_fat>
		if (res == FR_OK && clst != 0) {
 800369a:	b990      	cbnz	r0, 80036c2 <create_chain+0xa0>
 800369c:	b957      	cbnz	r7, 80036b4 <create_chain+0x92>
		fs->last_clst = ncl;
 800369e:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80036a0:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 80036a4:	3a02      	subs	r2, #2
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d910      	bls.n	80036cc <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80036aa:	792b      	ldrb	r3, [r5, #4]
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	712b      	strb	r3, [r5, #4]
 80036b2:	e7d2      	b.n	800365a <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80036b4:	4622      	mov	r2, r4
 80036b6:	4639      	mov	r1, r7
 80036b8:	4628      	mov	r0, r5
 80036ba:	f7ff fe4f 	bl	800335c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80036be:	2800      	cmp	r0, #0
 80036c0:	d0ed      	beq.n	800369e <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80036c2:	2801      	cmp	r0, #1
 80036c4:	d1c8      	bne.n	8003658 <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80036c6:	f04f 34ff 	mov.w	r4, #4294967295
 80036ca:	e7c6      	b.n	800365a <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80036cc:	3b01      	subs	r3, #1
 80036ce:	61ab      	str	r3, [r5, #24]
 80036d0:	e7eb      	b.n	80036aa <create_chain+0x88>

080036d2 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80036d2:	6943      	ldr	r3, [r0, #20]
{
 80036d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80036d8:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80036dc:	69c3      	ldr	r3, [r0, #28]
{
 80036de:	4605      	mov	r5, r0
 80036e0:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80036e2:	b18b      	cbz	r3, 8003708 <dir_next+0x36>
 80036e4:	f5b8 1f00 	cmp.w	r8, #2097152	@ 0x200000
 80036e8:	d20e      	bcs.n	8003708 <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80036ea:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 80036ee:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80036f0:	2f00      	cmp	r7, #0
 80036f2:	d14f      	bne.n	8003794 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
 80036f4:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 80036f6:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 80036f8:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80036fa:	b941      	cbnz	r1, 800370e <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80036fc:	8923      	ldrh	r3, [r4, #8]
 80036fe:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8003702:	d847      	bhi.n	8003794 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 8003704:	2300      	movs	r3, #0
 8003706:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003708:	2004      	movs	r0, #4
}
 800370a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800370e:	f8b4 900a 	ldrh.w	r9, [r4, #10]
 8003712:	f109 39ff 	add.w	r9, r9, #4294967295
 8003716:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
 800371a:	d13b      	bne.n	8003794 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff fef3 	bl	8003508 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003722:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003724:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003726:	d801      	bhi.n	800372c <dir_next+0x5a>
 8003728:	2002      	movs	r0, #2
 800372a:	e7ee      	b.n	800370a <dir_next+0x38>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800372c:	1c42      	adds	r2, r0, #1
 800372e:	d101      	bne.n	8003734 <dir_next+0x62>
 8003730:	2001      	movs	r0, #1
 8003732:	e7ea      	b.n	800370a <dir_next+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003734:	69e3      	ldr	r3, [r4, #28]
 8003736:	4283      	cmp	r3, r0
 8003738:	d826      	bhi.n	8003788 <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 800373a:	f1ba 0f00 	cmp.w	sl, #0
 800373e:	d0e1      	beq.n	8003704 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003740:	69a9      	ldr	r1, [r5, #24]
 8003742:	4628      	mov	r0, r5
 8003744:	f7ff ff6d 	bl	8003622 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003748:	4606      	mov	r6, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	d035      	beq.n	80037ba <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800374e:	2801      	cmp	r0, #1
 8003750:	d0ea      	beq.n	8003728 <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	d0ec      	beq.n	8003730 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003756:	4620      	mov	r0, r4
 8003758:	f7ff fc3a 	bl	8002fd0 <sync_window>
 800375c:	4601      	mov	r1, r0
 800375e:	2800      	cmp	r0, #0
 8003760:	d1e6      	bne.n	8003730 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003762:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8003766:	f44f 7200 	mov.w	r2, #512	@ 0x200
						fs->wflag = 1;
 800376a:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800376e:	f7ff fb39 	bl	8002de4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003772:	4631      	mov	r1, r6
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff fbe3 	bl	8002f40 <clust2sect>
 800377a:	8963      	ldrh	r3, [r4, #10]
 800377c:	6360      	str	r0, [r4, #52]	@ 0x34
 800377e:	4599      	cmp	r9, r3
 8003780:	d30f      	bcc.n	80037a2 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
 8003782:	eba0 0009 	sub.w	r0, r0, r9
 8003786:	6360      	str	r0, [r4, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8003788:	4631      	mov	r1, r6
 800378a:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 800378c:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800378e:	f7ff fbd7 	bl	8002f40 <clust2sect>
 8003792:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003794:	3438      	adds	r4, #56	@ 0x38
	return FR_OK;
 8003796:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8003798:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800379c:	443c      	add	r4, r7
 800379e:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80037a0:	e7b3      	b.n	800370a <dir_next+0x38>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80037a2:	4620      	mov	r0, r4
						fs->wflag = 1;
 80037a4:	f884 a003 	strb.w	sl, [r4, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80037a8:	f7ff fc12 	bl	8002fd0 <sync_window>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1bf      	bne.n	8003730 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80037b0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80037b2:	f109 0901 	add.w	r9, r9, #1
 80037b6:	3001      	adds	r0, #1
 80037b8:	e7df      	b.n	800377a <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80037ba:	2007      	movs	r0, #7
 80037bc:	e7a5      	b.n	800370a <dir_next+0x38>

080037be <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80037be:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
{
 80037c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c4:	4606      	mov	r6, r0
 80037c6:	460c      	mov	r4, r1
	FATFS *fs = dp->obj.fs;
 80037c8:	6805      	ldr	r5, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80037ca:	d301      	bcc.n	80037d0 <dir_sdi+0x12>
		return FR_INT_ERR;
 80037cc:	2002      	movs	r0, #2
}
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80037d0:	06ca      	lsls	r2, r1, #27
 80037d2:	d1fb      	bne.n	80037cc <dir_sdi+0xe>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80037d4:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 80037d6:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80037d8:	b9ba      	cbnz	r2, 800380a <dir_sdi+0x4c>
 80037da:	782b      	ldrb	r3, [r5, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <dir_sdi+0x26>
		clst = fs->dirbase;
 80037e0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80037e2:	b99b      	cbnz	r3, 800380c <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80037e4:	892b      	ldrh	r3, [r5, #8]
 80037e6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80037ea:	d9ef      	bls.n	80037cc <dir_sdi+0xe>
		dp->sect = fs->dirbase;
 80037ec:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	dp->clust = clst;					/* Current cluster# */
 80037ee:	e9c6 2006 	strd	r2, r0, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d0ea      	beq.n	80037cc <dir_sdi+0xe>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80037f6:	eb00 2054 	add.w	r0, r0, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80037fa:	3538      	adds	r5, #56	@ 0x38
 80037fc:	f3c4 0408 	ubfx	r4, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003800:	61f0      	str	r0, [r6, #28]
	return FR_OK;
 8003802:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003804:	4425      	add	r5, r4
 8003806:	6235      	str	r5, [r6, #32]
	return FR_OK;
 8003808:	e7e1      	b.n	80037ce <dir_sdi+0x10>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800380a:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800380c:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800380e:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003810:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8003812:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003814:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8003816:	d203      	bcs.n	8003820 <dir_sdi+0x62>
		dp->sect = clust2sect(fs, clst);
 8003818:	4628      	mov	r0, r5
 800381a:	f7ff fb91 	bl	8002f40 <clust2sect>
 800381e:	e7e6      	b.n	80037ee <dir_sdi+0x30>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003820:	6830      	ldr	r0, [r6, #0]
 8003822:	f7ff fe71 	bl	8003508 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003826:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003828:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800382a:	d006      	beq.n	800383a <dir_sdi+0x7c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800382c:	2801      	cmp	r0, #1
 800382e:	d9cd      	bls.n	80037cc <dir_sdi+0xe>
 8003830:	69eb      	ldr	r3, [r5, #28]
 8003832:	4283      	cmp	r3, r0
 8003834:	d9ca      	bls.n	80037cc <dir_sdi+0xe>
			ofs -= csz;
 8003836:	1be4      	subs	r4, r4, r7
 8003838:	e7eb      	b.n	8003812 <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800383a:	2001      	movs	r0, #1
 800383c:	e7c7      	b.n	80037ce <dir_sdi+0x10>
	...

08003840 <dir_find>:
{
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8003844:	6803      	ldr	r3, [r0, #0]
{
 8003846:	b085      	sub	sp, #20
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003848:	2100      	movs	r1, #0
{
 800384a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800384c:	9300      	str	r3, [sp, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800384e:	f7ff ffb6 	bl	80037be <dir_sdi>
	if (res != FR_OK) return res;
 8003852:	4606      	mov	r6, r0
 8003854:	2800      	cmp	r0, #0
 8003856:	f040 8096 	bne.w	8003986 <dir_find+0x146>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800385a:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 800385e:	f04f 3aff 	mov.w	sl, #4294967295
 8003862:	46c1      	mov	r9, r8
 8003864:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
		res = move_window(fs, dp->sect);
 8003868:	69e1      	ldr	r1, [r4, #28]
 800386a:	9800      	ldr	r0, [sp, #0]
 800386c:	f7ff fbea 	bl	8003044 <move_window>
		if (res != FR_OK) break;
 8003870:	4606      	mov	r6, r0
 8003872:	2800      	cmp	r0, #0
 8003874:	f040 8087 	bne.w	8003986 <dir_find+0x146>
		c = dp->dir[DIR_Name];
 8003878:	6a25      	ldr	r5, [r4, #32]
 800387a:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800387c:	2f00      	cmp	r7, #0
 800387e:	f000 8086 	beq.w	800398e <dir_find+0x14e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003882:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003884:	2fe5      	cmp	r7, #229	@ 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003886:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 800388a:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800388c:	d003      	beq.n	8003896 <dir_find+0x56>
 800388e:	0710      	lsls	r0, r2, #28
 8003890:	d504      	bpl.n	800389c <dir_find+0x5c>
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d004      	beq.n	80038a0 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003896:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
 800389a:	e04e      	b.n	800393a <dir_find+0xfa>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d154      	bne.n	800394a <dir_find+0x10a>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80038a0:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80038a4:	0659      	lsls	r1, r3, #25
 80038a6:	d43e      	bmi.n	8003926 <dir_find+0xe6>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80038a8:	067a      	lsls	r2, r7, #25
 80038aa:	d544      	bpl.n	8003936 <dir_find+0xf6>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80038ac:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80038ae:	f007 07bf 	and.w	r7, r7, #191	@ 0xbf
						sum = dp->dir[LDIR_Chksum];
 80038b2:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80038b6:	6323      	str	r3, [r4, #48]	@ 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80038b8:	7b6b      	ldrb	r3, [r5, #13]
 80038ba:	4543      	cmp	r3, r8
 80038bc:	d13d      	bne.n	800393a <dir_find+0xfa>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80038be:	8b6b      	ldrh	r3, [r5, #26]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13a      	bne.n	800393a <dir_find+0xfa>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80038c4:	782e      	ldrb	r6, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80038c6:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80038c8:	9b00      	ldr	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80038ca:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80038ce:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8003998 <dir_find+0x158>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80038d2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80038d6:	230d      	movs	r3, #13
 80038d8:	3e01      	subs	r6, #1
 80038da:	435e      	muls	r6, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80038dc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80038e0:	5aeb      	ldrh	r3, [r5, r3]
		if (wc) {
 80038e2:	b36a      	cbz	r2, 8003940 <dir_find+0x100>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80038e4:	2efe      	cmp	r6, #254	@ 0xfe
 80038e6:	d828      	bhi.n	800393a <dir_find+0xfa>
 80038e8:	4618      	mov	r0, r3
 80038ea:	9303      	str	r3, [sp, #12]
 80038ec:	f001 fa80 	bl	8004df0 <ff_wtoupper>
 80038f0:	1c71      	adds	r1, r6, #1
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	f83b 0016 	ldrh.w	r0, [fp, r6, lsl #1]
 80038f8:	9101      	str	r1, [sp, #4]
 80038fa:	f001 fa79 	bl	8004df0 <ff_wtoupper>
 80038fe:	9a02      	ldr	r2, [sp, #8]
 8003900:	4282      	cmp	r2, r0
 8003902:	d11a      	bne.n	800393a <dir_find+0xfa>
			wc = uc;
 8003904:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003906:	9901      	ldr	r1, [sp, #4]
			wc = uc;
 8003908:	461a      	mov	r2, r3
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800390a:	460e      	mov	r6, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800390c:	4b21      	ldr	r3, [pc, #132]	@ (8003994 <dir_find+0x154>)
 800390e:	454b      	cmp	r3, r9
 8003910:	d1e4      	bne.n	80038dc <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003912:	782b      	ldrb	r3, [r5, #0]
 8003914:	065b      	lsls	r3, r3, #25
 8003916:	d503      	bpl.n	8003920 <dir_find+0xe0>
 8003918:	b112      	cbz	r2, 8003920 <dir_find+0xe0>
 800391a:	f83b 3016 	ldrh.w	r3, [fp, r6, lsl #1]
 800391e:	b963      	cbnz	r3, 800393a <dir_find+0xfa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003920:	3f01      	subs	r7, #1
 8003922:	fa5f f987 	uxtb.w	r9, r7
		res = dir_next(dp, 0);	/* Next entry */
 8003926:	2100      	movs	r1, #0
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff fed2 	bl	80036d2 <dir_next>
	} while (res == FR_OK);
 800392e:	4606      	mov	r6, r0
 8003930:	2800      	cmp	r0, #0
 8003932:	d099      	beq.n	8003868 <dir_find+0x28>
 8003934:	e027      	b.n	8003986 <dir_find+0x146>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003936:	45b9      	cmp	r9, r7
 8003938:	d0be      	beq.n	80038b8 <dir_find+0x78>
 800393a:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 800393e:	e7f2      	b.n	8003926 <dir_find+0xe6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003940:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003944:	428b      	cmp	r3, r1
 8003946:	d0e1      	beq.n	800390c <dir_find+0xcc>
 8003948:	e7f7      	b.n	800393a <dir_find+0xfa>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800394a:	f1b9 0f00 	cmp.w	r9, #0
 800394e:	d104      	bne.n	800395a <dir_find+0x11a>
 8003950:	4628      	mov	r0, r5
 8003952:	f7ff fb11 	bl	8002f78 <sum_sfn>
 8003956:	4540      	cmp	r0, r8
 8003958:	d015      	beq.n	8003986 <dir_find+0x146>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800395a:	f894 602f 	ldrb.w	r6, [r4, #47]	@ 0x2f
 800395e:	f016 0601 	ands.w	r6, r6, #1
 8003962:	d198      	bne.n	8003896 <dir_find+0x56>
 8003964:	f104 0224 	add.w	r2, r4, #36	@ 0x24
	int r = 0;
 8003968:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 800396c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003970:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8003974:	42a9      	cmp	r1, r5
		r = *d++ - *s++;
 8003976:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 800397a:	d002      	beq.n	8003982 <dir_find+0x142>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f5      	beq.n	800396c <dir_find+0x12c>
 8003980:	e789      	b.n	8003896 <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003982:	2b00      	cmp	r3, #0
 8003984:	d187      	bne.n	8003896 <dir_find+0x56>
}
 8003986:	4630      	mov	r0, r6
 8003988:	b005      	add	sp, #20
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800398e:	2604      	movs	r6, #4
 8003990:	e7f9      	b.n	8003986 <dir_find+0x146>
 8003992:	bf00      	nop
 8003994:	08006841 	.word	0x08006841
 8003998:	08006834 	.word	0x08006834

0800399c <dir_register>:
{
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80039a0:	f890 502f 	ldrb.w	r5, [r0, #47]	@ 0x2f
{
 80039a4:	b089      	sub	sp, #36	@ 0x24
 80039a6:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80039a8:	f015 05a0 	ands.w	r5, r5, #160	@ 0xa0
 80039ac:	f040 8091 	bne.w	8003ad2 <dir_register+0x136>
	FATFS *fs = dp->obj.fs;
 80039b0:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80039b2:	68f2      	ldr	r2, [r6, #12]
 80039b4:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d169      	bne.n	8003a90 <dir_register+0xf4>
	mem_cpy(sn, dp->fn, 12);
 80039bc:	f104 0724 	add.w	r7, r4, #36	@ 0x24
	if (cnt) {
 80039c0:	220c      	movs	r2, #12
 80039c2:	a805      	add	r0, sp, #20
 80039c4:	4639      	mov	r1, r7
 80039c6:	f7ff fb28 	bl	800301a <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80039ca:	f89d b01f 	ldrb.w	fp, [sp, #31]
 80039ce:	f01b 0f01 	tst.w	fp, #1
 80039d2:	f000 8085 	beq.w	8003ae0 <dir_register+0x144>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80039d6:	2340      	movs	r3, #64	@ 0x40
		for (n = 1; n < 100; n++) {
 80039d8:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80039dc:	f8df a234 	ldr.w	sl, [pc, #564]	@ 8003c14 <dir_register+0x278>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80039e0:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80039e4:	220b      	movs	r2, #11
 80039e6:	a905      	add	r1, sp, #20
 80039e8:	4638      	mov	r0, r7
 80039ea:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
 80039ee:	f7ff fb14 	bl	800301a <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80039f2:	f1b8 0f05 	cmp.w	r8, #5
 80039f6:	d95b      	bls.n	8003ab0 <dir_register+0x114>
 80039f8:	f1a9 0102 	sub.w	r1, r9, #2
		sr = seq;
 80039fc:	4643      	mov	r3, r8
		while (*lfn) {	/* Create a CRC */
 80039fe:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	d146      	bne.n	8003a94 <dir_register+0xf8>
 8003a06:	a805      	add	r0, sp, #20
 8003a08:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8003a0a:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
 8003a0e:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 8003a10:	f10c 0130 	add.w	r1, ip, #48	@ 0x30
		if (c > '9') c += 7;
 8003a14:	2939      	cmp	r1, #57	@ 0x39
 8003a16:	bf88      	it	hi
 8003a18:	f10c 0137 	addhi.w	r1, ip, #55	@ 0x37
	} while (seq);
 8003a1c:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 8003a1e:	f800 1d01 	strb.w	r1, [r0, #-1]!
		seq /= 16;
 8003a22:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8003a26:	d845      	bhi.n	8003ab4 <dir_register+0x118>
	ns[i] = '~';
 8003a28:	f102 0320 	add.w	r3, r2, #32
 8003a2c:	217e      	movs	r1, #126	@ 0x7e
 8003a2e:	446b      	add	r3, sp
 8003a30:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003a34:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4608      	mov	r0, r1
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d006      	beq.n	8003a4e <dir_register+0xb2>
 8003a40:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8003a44:	f103 0e01 	add.w	lr, r3, #1
 8003a48:	f1bc 0f20 	cmp.w	ip, #32
 8003a4c:	d134      	bne.n	8003ab8 <dir_register+0x11c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003a4e:	2a07      	cmp	r2, #7
 8003a50:	f103 0301 	add.w	r3, r3, #1
 8003a54:	bf9b      	ittet	ls
 8003a56:	f102 0018 	addls.w	r0, r2, #24
 8003a5a:	f102 0020 	addls.w	r0, r2, #32
 8003a5e:	2020      	movhi	r0, #32
 8003a60:	3201      	addls	r2, #1
 8003a62:	bf9c      	itt	ls
 8003a64:	4468      	addls	r0, sp
 8003a66:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
 8003a6a:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003a6c:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
 8003a6e:	d9ee      	bls.n	8003a4e <dir_register+0xb2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7ff fee5 	bl	8003840 <dir_find>
 8003a76:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 8003a78:	bb70      	cbnz	r0, 8003ad8 <dir_register+0x13c>
		for (n = 1; n < 100; n++) {
 8003a7a:	f108 0801 	add.w	r8, r8, #1
 8003a7e:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8003a82:	d1af      	bne.n	80039e4 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003a84:	f04f 0907 	mov.w	r9, #7
}
 8003a88:	4648      	mov	r0, r9
 8003a8a:	b009      	add	sp, #36	@ 0x24
 8003a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003a90:	3501      	adds	r5, #1
 8003a92:	e78f      	b.n	80039b4 <dir_register+0x18>
 8003a94:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8003a96:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
 8003a9a:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 8003a9c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003aa0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003aa4:	bf18      	it	ne
 8003aa6:	ea83 030a 	eorne.w	r3, r3, sl
			for (i = 0; i < 16; i++) {
 8003aaa:	3801      	subs	r0, #1
 8003aac:	d1f3      	bne.n	8003a96 <dir_register+0xfa>
 8003aae:	e7a6      	b.n	80039fe <dir_register+0x62>
 8003ab0:	4643      	mov	r3, r8
 8003ab2:	e7a8      	b.n	8003a06 <dir_register+0x6a>
		seq /= 16;
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e7a8      	b.n	8003a0a <dir_register+0x6e>
 8003ab8:	4673      	mov	r3, lr
 8003aba:	e7bf      	b.n	8003a3c <dir_register+0xa0>
				n = 0;					/* Not a blank entry. Restart to search */
 8003abc:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff fe06 	bl	80036d2 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003ac6:	4681      	mov	r9, r0
 8003ac8:	b1f8      	cbz	r0, 8003b0a <dir_register+0x16e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003aca:	f1b9 0f04 	cmp.w	r9, #4
 8003ace:	d0d9      	beq.n	8003a84 <dir_register+0xe8>
 8003ad0:	e7da      	b.n	8003a88 <dir_register+0xec>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003ad2:	f04f 0906 	mov.w	r9, #6
 8003ad6:	e7d7      	b.n	8003a88 <dir_register+0xec>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003ad8:	2804      	cmp	r0, #4
 8003ada:	d1d5      	bne.n	8003a88 <dir_register+0xec>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003adc:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003ae0:	f01b 0f02 	tst.w	fp, #2
	res = dir_sdi(dp, 0);
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 8003aea:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003aee:	bf1b      	ittet	ne
 8003af0:	350c      	addne	r5, #12
 8003af2:	230d      	movne	r3, #13
 8003af4:	2501      	moveq	r5, #1
 8003af6:	fbb5 f5f3 	udivne	r5, r5, r3
 8003afa:	bf18      	it	ne
 8003afc:	3501      	addne	r5, #1
	res = dir_sdi(dp, 0);
 8003afe:	f7ff fe5e 	bl	80037be <dir_sdi>
	if (res == FR_OK) {
 8003b02:	4681      	mov	r9, r0
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d1e0      	bne.n	8003aca <dir_register+0x12e>
		n = 0;
 8003b08:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8003b0a:	69e1      	ldr	r1, [r4, #28]
 8003b0c:	4650      	mov	r0, sl
 8003b0e:	f7ff fa99 	bl	8003044 <move_window>
			if (res != FR_OK) break;
 8003b12:	4681      	mov	r9, r0
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d1d8      	bne.n	8003aca <dir_register+0x12e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003b18:	6a23      	ldr	r3, [r4, #32]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2be5      	cmp	r3, #229	@ 0xe5
 8003b1e:	d001      	beq.n	8003b24 <dir_register+0x188>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1cb      	bne.n	8003abc <dir_register+0x120>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003b24:	f108 0801 	add.w	r8, r8, #1
 8003b28:	4545      	cmp	r5, r8
 8003b2a:	d1c8      	bne.n	8003abe <dir_register+0x122>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003b2c:	3d01      	subs	r5, #1
 8003b2e:	d055      	beq.n	8003bdc <dir_register+0x240>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003b30:	6961      	ldr	r1, [r4, #20]
 8003b32:	4620      	mov	r0, r4
 8003b34:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8003b38:	f7ff fe41 	bl	80037be <dir_sdi>
		if (res == FR_OK) {
 8003b3c:	4681      	mov	r9, r0
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d1a2      	bne.n	8003a88 <dir_register+0xec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003b42:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003b46:	4638      	mov	r0, r7
 8003b48:	f7ff fa16 	bl	8002f78 <sum_sfn>
 8003b4c:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8003b4e:	69e1      	ldr	r1, [r4, #28]
 8003b50:	4630      	mov	r0, r6
 8003b52:	f7ff fa77 	bl	8003044 <move_window>
 8003b56:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d195      	bne.n	8003a88 <dir_register+0xec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003b5c:	6a23      	ldr	r3, [r4, #32]
 8003b5e:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003b60:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003b62:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003b66:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8003b6a:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003b6c:	f04f 020f 	mov.w	r2, #15
 8003b70:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8003c18 <dir_register+0x27c>
 8003b74:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003b76:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 8003b78:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8003b7a:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 8003b7e:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8003b80:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8003b82:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003b84:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003b86:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
 8003b8a:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003b8e:	bf18      	it	ne
 8003b90:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8003b94:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8003b98:	bf18      	it	ne
 8003b9a:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8003b9c:	f803 0009 	strb.w	r0, [r3, r9]
 8003ba0:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	bf08      	it	eq
 8003ba8:	4640      	moveq	r0, r8
	} while (++s < 13);
 8003baa:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8003bae:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 8003bb2:	d1e7      	bne.n	8003b84 <dir_register+0x1e8>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003bb4:	4540      	cmp	r0, r8
 8003bb6:	d002      	beq.n	8003bbe <dir_register+0x222>
 8003bb8:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003bbc:	b90a      	cbnz	r2, 8003bc2 <dir_register+0x226>
 8003bbe:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003bc2:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8003bc4:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4620      	mov	r0, r4
				fs->wflag = 1;
 8003bca:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003bcc:	f7ff fd81 	bl	80036d2 <dir_next>
			} while (res == FR_OK && --nent);
 8003bd0:	4681      	mov	r9, r0
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	f47f af58 	bne.w	8003a88 <dir_register+0xec>
 8003bd8:	3d01      	subs	r5, #1
 8003bda:	d1b8      	bne.n	8003b4e <dir_register+0x1b2>
		res = move_window(fs, dp->sect);
 8003bdc:	69e1      	ldr	r1, [r4, #28]
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff fa30 	bl	8003044 <move_window>
		if (res == FR_OK) {
 8003be4:	4681      	mov	r9, r0
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f47f af4e 	bne.w	8003a88 <dir_register+0xec>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003bec:	4601      	mov	r1, r0
 8003bee:	2220      	movs	r2, #32
 8003bf0:	6a20      	ldr	r0, [r4, #32]
 8003bf2:	f7ff f8f7 	bl	8002de4 <mem_set>
	if (cnt) {
 8003bf6:	220b      	movs	r2, #11
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	6a20      	ldr	r0, [r4, #32]
 8003bfc:	f7ff fa0d 	bl	800301a <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003c00:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8003c04:	6a22      	ldr	r2, [r4, #32]
 8003c06:	f003 0318 	and.w	r3, r3, #24
 8003c0a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	70f3      	strb	r3, [r6, #3]
 8003c10:	e73a      	b.n	8003a88 <dir_register+0xec>
 8003c12:	bf00      	nop
 8003c14:	00011021 	.word	0x00011021
 8003c18:	08006834 	.word	0x08006834

08003c1c <follow_path>:
{
 8003c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8003c20:	6803      	ldr	r3, [r0, #0]
{
 8003c22:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8003c24:	9300      	str	r3, [sp, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003c26:	468a      	mov	sl, r1
 8003c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c2e:	d0fa      	beq.n	8003c26 <follow_path+0xa>
 8003c30:	2b5c      	cmp	r3, #92	@ 0x5c
 8003c32:	d0f8      	beq.n	8003c26 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8003c34:	2300      	movs	r3, #0
 8003c36:	60b3      	str	r3, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c38:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3c:	2b1f      	cmp	r3, #31
 8003c3e:	f200 8084 	bhi.w	8003d4a <follow_path+0x12e>
		dp->fn[NSFLAG] = NS_NONAME;
 8003c42:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8003c44:	2100      	movs	r1, #0
 8003c46:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 8003c48:	f886 302f 	strb.w	r3, [r6, #47]	@ 0x2f
}
 8003c4c:	b003      	add	sp, #12
 8003c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8003c52:	f7ff bdb4 	b.w	80037be <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003c56:	3501      	adds	r5, #1
 8003c58:	e089      	b.n	8003d6e <follow_path+0x152>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003c5a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8003c5e:	d00c      	beq.n	8003c7a <follow_path+0x5e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003c60:	2101      	movs	r1, #1
 8003c62:	4620      	mov	r0, r4
 8003c64:	f001 f8a8 	bl	8004db8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003c68:	b138      	cbz	r0, 8003c7a <follow_path+0x5e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003c6a:	287f      	cmp	r0, #127	@ 0x7f
 8003c6c:	d807      	bhi.n	8003c7e <follow_path+0x62>
 8003c6e:	4985      	ldr	r1, [pc, #532]	@ (8003e84 <follow_path+0x268>)
	while (*str && *str != chr) str++;
 8003c70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c74:	b11a      	cbz	r2, 8003c7e <follow_path+0x62>
 8003c76:	4290      	cmp	r0, r2
 8003c78:	d1fa      	bne.n	8003c70 <follow_path+0x54>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003c7a:	2006      	movs	r0, #6
 8003c7c:	e0fe      	b.n	8003e7c <follow_path+0x260>
		w = p[si++];					/* Get a character */
 8003c7e:	462f      	mov	r7, r5
		lfn[di++] = w;					/* Store the Unicode character */
 8003c80:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 8003c84:	e069      	b.n	8003d5a <follow_path+0x13e>
		w = lfn[di - 1];
 8003c86:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8003c8a:	2920      	cmp	r1, #32
 8003c8c:	d001      	beq.n	8003c92 <follow_path+0x76>
 8003c8e:	292e      	cmp	r1, #46	@ 0x2e
 8003c90:	d17b      	bne.n	8003d8a <follow_path+0x16e>
		di--;
 8003c92:	3f01      	subs	r7, #1
 8003c94:	e076      	b.n	8003d84 <follow_path+0x168>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003c96:	3101      	adds	r1, #1
 8003c98:	e087      	b.n	8003daa <follow_path+0x18e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003c9a:	45c1      	cmp	r9, r8
 8003c9c:	f080 80b4 	bcs.w	8003e08 <follow_path+0x1ec>
 8003ca0:	42ba      	cmp	r2, r7
 8003ca2:	d111      	bne.n	8003cc8 <follow_path+0xac>
			if (ni == 11) {				/* Long extension */
 8003ca4:	f1b8 0f0b 	cmp.w	r8, #11
 8003ca8:	d106      	bne.n	8003cb8 <follow_path+0x9c>
 8003caa:	e0b1      	b.n	8003e10 <follow_path+0x1f4>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003cac:	42ba      	cmp	r2, r7
 8003cae:	d003      	beq.n	8003cb8 <follow_path+0x9c>
 8003cb0:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8003cb4:	f200 80b0 	bhi.w	8003e18 <follow_path+0x1fc>
			b <<= 2; continue;
 8003cb8:	00ad      	lsls	r5, r5, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003cba:	463a      	mov	r2, r7
 8003cbc:	f04f 080b 	mov.w	r8, #11
 8003cc0:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8003cc4:	b2ed      	uxtb	r5, r5
 8003cc6:	e098      	b.n	8003dfa <follow_path+0x1de>
		if (w >= 0x80) {				/* Non ASCII character */
 8003cc8:	287f      	cmp	r0, #127	@ 0x7f
 8003cca:	d90c      	bls.n	8003ce6 <follow_path+0xca>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003ccc:	2100      	movs	r1, #0
 8003cce:	9201      	str	r2, [sp, #4]
			cf |= NS_LFN;				/* Force create LFN entry */
 8003cd0:	f044 0402 	orr.w	r4, r4, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003cd4:	f001 f870 	bl	8004db8 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003cd8:	9a01      	ldr	r2, [sp, #4]
 8003cda:	b150      	cbz	r0, 8003cf2 <follow_path+0xd6>
 8003cdc:	496a      	ldr	r1, [pc, #424]	@ (8003e88 <follow_path+0x26c>)
 8003cde:	4401      	add	r1, r0
 8003ce0:	f811 0c73 	ldrb.w	r0, [r1, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003ce4:	b128      	cbz	r0, 8003cf2 <follow_path+0xd6>
	while (*str && *str != chr) str++;
 8003ce6:	4b69      	ldr	r3, [pc, #420]	@ (8003e8c <follow_path+0x270>)
 8003ce8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003cec:	b159      	cbz	r1, 8003d06 <follow_path+0xea>
 8003cee:	4288      	cmp	r0, r1
 8003cf0:	d1fa      	bne.n	8003ce8 <follow_path+0xcc>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003cf2:	f044 0403 	orr.w	r4, r4, #3
 8003cf6:	205f      	movs	r0, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8003cf8:	eb06 0109 	add.w	r1, r6, r9
 8003cfc:	f109 0901 	add.w	r9, r9, #1
 8003d00:	f881 0024 	strb.w	r0, [r1, #36]	@ 0x24
 8003d04:	e079      	b.n	8003dfa <follow_path+0x1de>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003d06:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 8003d0a:	2919      	cmp	r1, #25
 8003d0c:	d802      	bhi.n	8003d14 <follow_path+0xf8>
					b |= 2;
 8003d0e:	f045 0502 	orr.w	r5, r5, #2
 8003d12:	e7f1      	b.n	8003cf8 <follow_path+0xdc>
					if (IsLower(w)) {	/* ASCII small capital */
 8003d14:	f1a0 0161 	sub.w	r1, r0, #97	@ 0x61
 8003d18:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8003d1a:	bf9e      	ittt	ls
 8003d1c:	3820      	subls	r0, #32
 8003d1e:	f045 0501 	orrls.w	r5, r5, #1
 8003d22:	b280      	uxthls	r0, r0
 8003d24:	e7e8      	b.n	8003cf8 <follow_path+0xdc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003d26:	075a      	lsls	r2, r3, #29
 8003d28:	f100 80a8 	bmi.w	8003e7c <follow_path+0x260>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003d2c:	79b3      	ldrb	r3, [r6, #6]
 8003d2e:	06db      	lsls	r3, r3, #27
 8003d30:	d565      	bpl.n	8003dfe <follow_path+0x1e2>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003d32:	9b00      	ldr	r3, [sp, #0]
 8003d34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d38:	6973      	ldr	r3, [r6, #20]
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	4419      	add	r1, r3
 8003d40:	9b00      	ldr	r3, [sp, #0]
 8003d42:	7818      	ldrb	r0, [r3, #0]
 8003d44:	f7ff fbd8 	bl	80034f8 <ld_clust.isra.0>
 8003d48:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8003d4a:	6833      	ldr	r3, [r6, #0]
 8003d4c:	f10a 39ff 	add.w	r9, sl, #4294967295
 8003d50:	2700      	movs	r7, #0
 8003d52:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8003d56:	f1ab 0802 	sub.w	r8, fp, #2
		w = p[si++];					/* Get a character */
 8003d5a:	f819 4f01 	ldrb.w	r4, [r9, #1]!
 8003d5e:	1c7d      	adds	r5, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8003d60:	2c1f      	cmp	r4, #31
 8003d62:	d90c      	bls.n	8003d7e <follow_path+0x162>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003d64:	2c2f      	cmp	r4, #47	@ 0x2f
 8003d66:	d002      	beq.n	8003d6e <follow_path+0x152>
 8003d68:	2c5c      	cmp	r4, #92	@ 0x5c
 8003d6a:	f47f af76 	bne.w	8003c5a <follow_path+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003d6e:	f81a 2005 	ldrb.w	r2, [sl, r5]
 8003d72:	2a2f      	cmp	r2, #47	@ 0x2f
 8003d74:	f43f af6f 	beq.w	8003c56 <follow_path+0x3a>
 8003d78:	2a5c      	cmp	r2, #92	@ 0x5c
 8003d7a:	f43f af6c 	beq.w	8003c56 <follow_path+0x3a>
	*path = &p[si];						/* Return pointer to the next segment */
 8003d7e:	44aa      	add	sl, r5
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003d80:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8003d84:	2f00      	cmp	r7, #0
 8003d86:	f47f af7e 	bne.w	8003c86 <follow_path+0x6a>
	lfn[di] = 0;						/* LFN is created */
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	eb0b 0547 	add.w	r5, fp, r7, lsl #1
 8003d92:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003d96:	2f00      	cmp	r7, #0
 8003d98:	f43f af6f 	beq.w	8003c7a <follow_path+0x5e>
	mem_set(dp->fn, ' ', 11);
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	220b      	movs	r2, #11
 8003da0:	f106 0024 	add.w	r0, r6, #36	@ 0x24
 8003da4:	f7ff f81e 	bl	8002de4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003da8:	2100      	movs	r1, #0
 8003daa:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 8003dae:	2a20      	cmp	r2, #32
 8003db0:	f43f af71 	beq.w	8003c96 <follow_path+0x7a>
 8003db4:	2a2e      	cmp	r2, #46	@ 0x2e
 8003db6:	f43f af6e 	beq.w	8003c96 <follow_path+0x7a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003dba:	2c1f      	cmp	r4, #31
 8003dbc:	bf8c      	ite	hi
 8003dbe:	2400      	movhi	r4, #0
 8003dc0:	2401      	movls	r4, #1
 8003dc2:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 8003dc4:	b109      	cbz	r1, 8003dca <follow_path+0x1ae>
 8003dc6:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003dca:	f835 2d02 	ldrh.w	r2, [r5, #-2]!
 8003dce:	2a2e      	cmp	r2, #46	@ 0x2e
 8003dd0:	d001      	beq.n	8003dd6 <follow_path+0x1ba>
 8003dd2:	3f01      	subs	r7, #1
 8003dd4:	d1f9      	bne.n	8003dca <follow_path+0x1ae>
		dp->fn[i++] = (BYTE)w;
 8003dd6:	f04f 0900 	mov.w	r9, #0
 8003dda:	f04f 0808 	mov.w	r8, #8
 8003dde:	464d      	mov	r5, r9
		w = lfn[si++];					/* Get an LFN character */
 8003de0:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8003de4:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8003de6:	b1b8      	cbz	r0, 8003e18 <follow_path+0x1fc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003de8:	2820      	cmp	r0, #32
 8003dea:	d004      	beq.n	8003df6 <follow_path+0x1da>
 8003dec:	282e      	cmp	r0, #46	@ 0x2e
 8003dee:	f47f af54 	bne.w	8003c9a <follow_path+0x7e>
 8003df2:	42ba      	cmp	r2, r7
 8003df4:	d005      	beq.n	8003e02 <follow_path+0x1e6>
			cf |= NS_LOSS | NS_LFN; continue;
 8003df6:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	e7f0      	b.n	8003de0 <follow_path+0x1c4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003dfe:	2005      	movs	r0, #5
	return res;
 8003e00:	e03c      	b.n	8003e7c <follow_path+0x260>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003e02:	45c1      	cmp	r9, r8
 8003e04:	f4ff af4e 	bcc.w	8003ca4 <follow_path+0x88>
			if (ni == 11) {				/* Long extension */
 8003e08:	f1b8 0f0b 	cmp.w	r8, #11
 8003e0c:	f47f af4e 	bne.w	8003cac <follow_path+0x90>
				cf |= NS_LOSS | NS_LFN; break;
 8003e10:	f044 0403 	orr.w	r4, r4, #3
 8003e14:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003e18:	f896 3024 	ldrb.w	r3, [r6, #36]	@ 0x24
 8003e1c:	2be5      	cmp	r3, #229	@ 0xe5
 8003e1e:	bf04      	itt	eq
 8003e20:	2305      	moveq	r3, #5
 8003e22:	f886 3024 	strbeq.w	r3, [r6, #36]	@ 0x24
	if (ni == 8) b <<= 2;
 8003e26:	f1b8 0f08 	cmp.w	r8, #8
 8003e2a:	bf04      	itt	eq
 8003e2c:	00ad      	lsleq	r5, r5, #2
 8003e2e:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003e30:	f005 030c 	and.w	r3, r5, #12
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d003      	beq.n	8003e40 <follow_path+0x224>
 8003e38:	f005 0203 	and.w	r2, r5, #3
 8003e3c:	2a03      	cmp	r2, #3
 8003e3e:	d101      	bne.n	8003e44 <follow_path+0x228>
 8003e40:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003e44:	07a1      	lsls	r1, r4, #30
 8003e46:	d409      	bmi.n	8003e5c <follow_path+0x240>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003e48:	f005 0503 	and.w	r5, r5, #3
 8003e4c:	2d01      	cmp	r5, #1
 8003e4e:	bf08      	it	eq
 8003e50:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	bf08      	it	eq
 8003e58:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 8003e5c:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003e5e:	f886 402f 	strb.w	r4, [r6, #47]	@ 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8003e62:	f7ff fced 	bl	8003840 <dir_find>
			ns = dp->fn[NSFLAG];
 8003e66:	f896 302f 	ldrb.w	r3, [r6, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	f43f af5b 	beq.w	8003d26 <follow_path+0x10a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003e70:	2804      	cmp	r0, #4
 8003e72:	d103      	bne.n	8003e7c <follow_path+0x260>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003e74:	f013 0f04 	tst.w	r3, #4
 8003e78:	bf08      	it	eq
 8003e7a:	2005      	moveq	r0, #5
}
 8003e7c:	b003      	add	sp, #12
 8003e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e82:	bf00      	nop
 8003e84:	08006cdf 	.word	0x08006cdf
 8003e88:	08006834 	.word	0x08006834
 8003e8c:	08006ce8 	.word	0x08006ce8

08003e90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003e90:	b538      	push	{r3, r4, r5, lr}
 8003e92:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003e94:	4604      	mov	r4, r0
 8003e96:	b1f8      	cbz	r0, 8003ed8 <validate+0x48>
 8003e98:	6803      	ldr	r3, [r0, #0]
 8003e9a:	b913      	cbnz	r3, 8003ea2 <validate+0x12>
	FRESULT res = FR_INVALID_OBJECT;
 8003e9c:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	e013      	b.n	8003eca <validate+0x3a>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003ea2:	781a      	ldrb	r2, [r3, #0]
 8003ea4:	2a00      	cmp	r2, #0
 8003ea6:	d0f9      	beq.n	8003e9c <validate+0xc>
 8003ea8:	8881      	ldrh	r1, [r0, #4]
 8003eaa:	88da      	ldrh	r2, [r3, #6]
 8003eac:	4291      	cmp	r1, r2
 8003eae:	d1f5      	bne.n	8003e9c <validate+0xc>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8003eb0:	6918      	ldr	r0, [r3, #16]
 8003eb2:	f000 ff72 	bl	8004d9a <ff_req_grant>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	b180      	cbz	r0, 8003edc <validate+0x4c>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	7858      	ldrb	r0, [r3, #1]
 8003ebe:	f7fe ff41 	bl	8002d44 <disk_status>
 8003ec2:	f010 0001 	ands.w	r0, r0, #1
 8003ec6:	d102      	bne.n	8003ece <validate+0x3e>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003ec8:	6824      	ldr	r4, [r4, #0]
 8003eca:	602c      	str	r4, [r5, #0]
	return res;
}
 8003ecc:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 8003ece:	2100      	movs	r1, #0
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	f7ff fb06 	bl	80034e2 <unlock_fs>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003ed6:	e7e1      	b.n	8003e9c <validate+0xc>
	FRESULT res = FR_INVALID_OBJECT;
 8003ed8:	2009      	movs	r0, #9
 8003eda:	e7f6      	b.n	8003eca <validate+0x3a>
			res = FR_TIMEOUT;
 8003edc:	200f      	movs	r0, #15
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003ede:	461c      	mov	r4, r3
 8003ee0:	e7f3      	b.n	8003eca <validate+0x3a>
	...

08003ee4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	4617      	mov	r7, r2
 8003eec:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003ef0:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8003ef2:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8003ef4:	f7ff f84f 	bl	8002f96 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003ef8:	1e05      	subs	r5, r0, #0
 8003efa:	db33      	blt.n	8003f64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003efc:	4c1a      	ldr	r4, [pc, #104]	@ (8003f68 <f_mount+0x84>)
 8003efe:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8003f02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003f06:	6a1e      	ldr	r6, [r3, #32]

	if (cfs) {
 8003f08:	b16e      	cbz	r6, 8003f26 <f_mount+0x42>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7ff f80a 	bl	8002f24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8003f10:	6930      	ldr	r0, [r6, #16]
 8003f12:	f000 ff3d 	bl	8004d90 <ff_del_syncobj>
 8003f16:	b920      	cbnz	r0, 8003f22 <f_mount+0x3e>
 8003f18:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	b005      	add	sp, #20
 8003f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 8003f22:	2300      	movs	r3, #0
 8003f24:	7033      	strb	r3, [r6, #0]
	if (fs) {
 8003f26:	9e01      	ldr	r6, [sp, #4]
 8003f28:	b91e      	cbnz	r6, 8003f32 <f_mount+0x4e>
	FatFs[vol] = fs;					/* Register new fs object */
 8003f2a:	444c      	add	r4, r9
 8003f2c:	6226      	str	r6, [r4, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003f2e:	2400      	movs	r4, #0
 8003f30:	e7f3      	b.n	8003f1a <f_mount+0x36>
		fs->fs_type = 0;				/* Clear new fs object */
 8003f32:	f04f 0800 	mov.w	r8, #0
 8003f36:	4631      	mov	r1, r6
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8003f38:	b2e8      	uxtb	r0, r5
		fs->fs_type = 0;				/* Clear new fs object */
 8003f3a:	f801 8b10 	strb.w	r8, [r1], #16
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8003f3e:	f000 ff19 	bl	8004d74 <ff_cre_syncobj>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d0e8      	beq.n	8003f18 <f_mount+0x34>
	FatFs[vol] = fs;					/* Register new fs object */
 8003f46:	444c      	add	r4, r9
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003f48:	2f01      	cmp	r7, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8003f4a:	6226      	str	r6, [r4, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003f4c:	d1ef      	bne.n	8003f2e <f_mount+0x4a>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003f4e:	a901      	add	r1, sp, #4
 8003f50:	4642      	mov	r2, r8
 8003f52:	4668      	mov	r0, sp
 8003f54:	f7ff f8cc 	bl	80030f0 <find_volume>
 8003f58:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	9801      	ldr	r0, [sp, #4]
 8003f5e:	f7ff fac0 	bl	80034e2 <unlock_fs>
 8003f62:	e7da      	b.n	8003f1a <f_mount+0x36>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f64:	240b      	movs	r4, #11
 8003f66:	e7d8      	b.n	8003f1a <f_mount+0x36>
 8003f68:	20000af0 	.word	0x20000af0

08003f6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	b090      	sub	sp, #64	@ 0x40
 8003f72:	4691      	mov	r9, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003f74:	4605      	mov	r5, r0
{
 8003f76:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	f000 8107 	beq.w	800418c <f_open+0x220>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003f7e:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8003f82:	a902      	add	r1, sp, #8
 8003f84:	a801      	add	r0, sp, #4
 8003f86:	463a      	mov	r2, r7
 8003f88:	f7ff f8b2 	bl	80030f0 <find_volume>
	if (res == FR_OK) {
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	f040 8085 	bne.w	800409e <f_open+0x132>
		dj.obj.fs = fs;
 8003f94:	9e02      	ldr	r6, [sp, #8]
		INIT_NAMBUF(fs);
 8003f96:	f44f 7000 	mov.w	r0, #512	@ 0x200
		dj.obj.fs = fs;
 8003f9a:	9603      	str	r6, [sp, #12]
		INIT_NAMBUF(fs);
 8003f9c:	f000 ff08 	bl	8004db0 <ff_memalloc>
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	b940      	cbnz	r0, 8003fb6 <f_open+0x4a>
 8003fa4:	2411      	movs	r4, #17
 8003fa6:	2111      	movs	r1, #17
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f7ff fa9a 	bl	80034e2 <unlock_fs>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
 8003fae:	4620      	mov	r0, r4
 8003fb0:	b010      	add	sp, #64	@ 0x40
 8003fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		INIT_NAMBUF(fs);
 8003fb6:	60f0      	str	r0, [r6, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003fb8:	a803      	add	r0, sp, #12
 8003fba:	9901      	ldr	r1, [sp, #4]
 8003fbc:	f7ff fe2e 	bl	8003c1c <follow_path>
		if (res == FR_OK) {
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	b960      	cbnz	r0, 8003fde <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003fc4:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	db6f      	blt.n	80040ac <f_open+0x140>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003fcc:	f019 0f3e 	tst.w	r9, #62	@ 0x3e
 8003fd0:	a803      	add	r0, sp, #12
 8003fd2:	bf14      	ite	ne
 8003fd4:	2101      	movne	r1, #1
 8003fd6:	2100      	moveq	r1, #0
 8003fd8:	f7fe ff0a 	bl	8002df0 <chk_lock>
 8003fdc:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003fde:	f019 0f1c 	tst.w	r9, #28
 8003fe2:	d06f      	beq.n	80040c4 <f_open+0x158>
			if (res != FR_OK) {					/* No file, create new */
 8003fe4:	2c00      	cmp	r4, #0
 8003fe6:	d063      	beq.n	80040b0 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003fe8:	2c04      	cmp	r4, #4
 8003fea:	d154      	bne.n	8004096 <f_open+0x12a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003fec:	4b68      	ldr	r3, [pc, #416]	@ (8004190 <f_open+0x224>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	b11a      	cbz	r2, 8003ffa <f_open+0x8e>
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 80c5 	bne.w	8004184 <f_open+0x218>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003ffa:	a803      	add	r0, sp, #12
 8003ffc:	f7ff fcce 	bl	800399c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004000:	4604      	mov	r4, r0
 8004002:	2800      	cmp	r0, #0
 8004004:	d147      	bne.n	8004096 <f_open+0x12a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004006:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800400a:	073b      	lsls	r3, r7, #28
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800400c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800400e:	d534      	bpl.n	800407a <f_open+0x10e>
				dw = GET_FATTIME();
 8004010:	f7fe fedc 	bl	8002dcc <get_fattime>
 8004014:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004016:	4601      	mov	r1, r0
 8004018:	f104 000e 	add.w	r0, r4, #14
 800401c:	f7fe feda 	bl	8002dd4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004020:	4611      	mov	r1, r2
 8004022:	f104 0016 	add.w	r0, r4, #22
 8004026:	f7fe fed5 	bl	8002dd4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800402a:	2320      	movs	r3, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800402c:	4621      	mov	r1, r4
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800402e:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004030:	7830      	ldrb	r0, [r6, #0]
 8004032:	f7ff fa61 	bl	80034f8 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004036:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004038:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800403a:	4630      	mov	r0, r6
 800403c:	f7fe fff6 	bl	800302c <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 8004040:	2200      	movs	r2, #0
					fs->wflag = 1;
 8004042:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004044:	7722      	strb	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004046:	7762      	strb	r2, [r4, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8004048:	77a2      	strb	r2, [r4, #30]
	*ptr++ = (BYTE)val;
 800404a:	77e2      	strb	r2, [r4, #31]
					fs->wflag = 1;
 800404c:	70f3      	strb	r3, [r6, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800404e:	f1b9 0f00 	cmp.w	r9, #0
 8004052:	d010      	beq.n	8004076 <f_open+0x10a>
						res = remove_chain(&dj.obj, cl, 0);
 8004054:	4649      	mov	r1, r9
 8004056:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8004058:	f8d6 a034 	ldr.w	sl, [r6, #52]	@ 0x34
						res = remove_chain(&dj.obj, cl, 0);
 800405c:	f7ff faaa 	bl	80035b4 <remove_chain>
						if (res == FR_OK) {
 8004060:	4604      	mov	r4, r0
 8004062:	b9c0      	cbnz	r0, 8004096 <f_open+0x12a>
							res = move_window(fs, dw);
 8004064:	4651      	mov	r1, sl
 8004066:	4630      	mov	r0, r6
 8004068:	f7fe ffec 	bl	8003044 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800406c:	f109 31ff 	add.w	r1, r9, #4294967295
		if (res == FR_OK) {
 8004070:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004072:	6171      	str	r1, [r6, #20]
		if (res == FR_OK) {
 8004074:	b978      	cbnz	r0, 8004096 <f_open+0x12a>
				mode |= FA_MODIFIED;
 8004076:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800407a:	6b73      	ldr	r3, [r6, #52]	@ 0x34
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800407c:	2f01      	cmp	r7, #1
			fp->dir_ptr = dj.dir;
 800407e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004080:	a803      	add	r0, sp, #12
 8004082:	bf94      	ite	ls
 8004084:	2100      	movls	r1, #0
 8004086:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004088:	626b      	str	r3, [r5, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800408a:	62ac      	str	r4, [r5, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800408c:	f7fe feea 	bl	8002e64 <inc_lock>
 8004090:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004092:	bb20      	cbnz	r0, 80040de <f_open+0x172>
						res = FR_INT_ERR;
 8004094:	2402      	movs	r4, #2
		FREE_NAMBUF();
 8004096:	4640      	mov	r0, r8
 8004098:	f000 fe8c 	bl	8004db4 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800409c:	b10c      	cbz	r4, 80040a2 <f_open+0x136>
 800409e:	2300      	movs	r3, #0
 80040a0:	602b      	str	r3, [r5, #0]
	LEAVE_FF(fs, res);
 80040a2:	4621      	mov	r1, r4
 80040a4:	9802      	ldr	r0, [sp, #8]
 80040a6:	f7ff fa1c 	bl	80034e2 <unlock_fs>
 80040aa:	e780      	b.n	8003fae <f_open+0x42>
				res = FR_INVALID_NAME;
 80040ac:	2406      	movs	r4, #6
 80040ae:	e796      	b.n	8003fde <f_open+0x72>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80040b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80040b4:	f013 0f11 	tst.w	r3, #17
 80040b8:	d10f      	bne.n	80040da <f_open+0x16e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80040ba:	f019 0f04 	tst.w	r9, #4
 80040be:	d0a4      	beq.n	800400a <f_open+0x9e>
 80040c0:	2408      	movs	r4, #8
 80040c2:	e7e8      	b.n	8004096 <f_open+0x12a>
			if (res == FR_OK) {					/* Following succeeded */
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d1e6      	bne.n	8004096 <f_open+0x12a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80040c8:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80040cc:	06dc      	lsls	r4, r3, #27
 80040ce:	d45b      	bmi.n	8004188 <f_open+0x21c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80040d0:	f019 0f02 	tst.w	r9, #2
 80040d4:	d0d1      	beq.n	800407a <f_open+0x10e>
 80040d6:	07d8      	lsls	r0, r3, #31
 80040d8:	d5cf      	bpl.n	800407a <f_open+0x10e>
						res = FR_DENIED;
 80040da:	2407      	movs	r4, #7
 80040dc:	e7db      	b.n	8004096 <f_open+0x12a>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80040de:	7830      	ldrb	r0, [r6, #0]
 80040e0:	4621      	mov	r1, r4
 80040e2:	f7ff fa09 	bl	80034f8 <ld_clust.isra.0>
 80040e6:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80040e8:	f104 001c 	add.w	r0, r4, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 80040ec:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80040ee:	f7fe fe6f 	bl	8002dd0 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80040f2:	f105 0930 	add.w	r9, r5, #48	@ 0x30
			fp->obj.id = fs->id;
 80040f6:	88f3      	ldrh	r3, [r6, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80040f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80040fc:	60e8      	str	r0, [r5, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80040fe:	4648      	mov	r0, r9
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004100:	62e9      	str	r1, [r5, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004102:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 8004104:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 8004106:	752f      	strb	r7, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8004108:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800410a:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800410c:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800410e:	f7fe fe69 	bl	8002de4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004112:	06ba      	lsls	r2, r7, #26
 8004114:	d401      	bmi.n	800411a <f_open+0x1ae>
					res = FR_NO_FILE;
 8004116:	2400      	movs	r4, #0
 8004118:	e7bd      	b.n	8004096 <f_open+0x12a>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800411a:	68ef      	ldr	r7, [r5, #12]
 800411c:	2f00      	cmp	r7, #0
 800411e:	d0fa      	beq.n	8004116 <f_open+0x1aa>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004120:	8973      	ldrh	r3, [r6, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004122:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004124:	ebb7 2f43 	cmp.w	r7, r3, lsl #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004128:	61af      	str	r7, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800412a:	ea4f 2443 	mov.w	r4, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800412e:	d90f      	bls.n	8004150 <f_open+0x1e4>
					clst = get_fat(&fp->obj, clst);
 8004130:	6828      	ldr	r0, [r5, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004132:	1b3f      	subs	r7, r7, r4
					clst = get_fat(&fp->obj, clst);
 8004134:	f7ff f9e8 	bl	8003508 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8004138:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800413a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800413c:	d91e      	bls.n	800417c <f_open+0x210>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	d01e      	beq.n	8004180 <f_open+0x214>
 8004142:	42a7      	cmp	r7, r4
 8004144:	d8f4      	bhi.n	8004130 <f_open+0x1c4>
 8004146:	2400      	movs	r4, #0
				fp->clust = clst;
 8004148:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800414a:	2c00      	cmp	r4, #0
 800414c:	d1a3      	bne.n	8004096 <f_open+0x12a>
 800414e:	e000      	b.n	8004152 <f_open+0x1e6>
				fp->clust = clst;
 8004150:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004152:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0dd      	beq.n	8004116 <f_open+0x1aa>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800415a:	4630      	mov	r0, r6
 800415c:	f7fe fef0 	bl	8002f40 <clust2sect>
 8004160:	2800      	cmp	r0, #0
 8004162:	d097      	beq.n	8004094 <f_open+0x128>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004164:	eb00 2257 	add.w	r2, r0, r7, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004168:	2301      	movs	r3, #1
 800416a:	4649      	mov	r1, r9
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800416c:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800416e:	7870      	ldrb	r0, [r6, #1]
 8004170:	f7fe fe02 	bl	8002d78 <disk_read>
 8004174:	1e04      	subs	r4, r0, #0
 8004176:	bf18      	it	ne
 8004178:	2401      	movne	r4, #1
 800417a:	e78c      	b.n	8004096 <f_open+0x12a>
					if (clst <= 1) res = FR_INT_ERR;
 800417c:	2402      	movs	r4, #2
 800417e:	e7e3      	b.n	8004148 <f_open+0x1dc>
 8004180:	2401      	movs	r4, #1
 8004182:	e7e1      	b.n	8004148 <f_open+0x1dc>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004184:	2412      	movs	r4, #18
 8004186:	e786      	b.n	8004096 <f_open+0x12a>
					res = FR_NO_FILE;
 8004188:	2404      	movs	r4, #4
 800418a:	e784      	b.n	8004096 <f_open+0x12a>
	if (!fp) return FR_INVALID_OBJECT;
 800418c:	2409      	movs	r4, #9
 800418e:	e70e      	b.n	8003fae <f_open+0x42>
 8004190:	20000af0 	.word	0x20000af0

08004194 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	469b      	mov	fp, r3
 800419a:	b087      	sub	sp, #28
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800419c:	2300      	movs	r3, #0
{
 800419e:	468a      	mov	sl, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80041a0:	a905      	add	r1, sp, #20
{
 80041a2:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 80041a4:	f8cb 3000 	str.w	r3, [fp]
{
 80041a8:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80041aa:	f7ff fe71 	bl	8003e90 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80041ae:	4607      	mov	r7, r0
 80041b0:	b908      	cbnz	r0, 80041b6 <f_read+0x22>
 80041b2:	7d67      	ldrb	r7, [r4, #21]
 80041b4:	b127      	cbz	r7, 80041c0 <f_read+0x2c>
 80041b6:	4639      	mov	r1, r7
 80041b8:	9805      	ldr	r0, [sp, #20]
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80041ba:	f7ff f992 	bl	80034e2 <unlock_fs>
 80041be:	e00a      	b.n	80041d6 <f_read+0x42>
 80041c0:	7d23      	ldrb	r3, [r4, #20]
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80041c2:	9d05      	ldr	r5, [sp, #20]
 80041c4:	f013 0301 	ands.w	r3, r3, #1
 80041c8:	9302      	str	r3, [sp, #8]
 80041ca:	d108      	bne.n	80041de <f_read+0x4a>
 80041cc:	2707      	movs	r7, #7
 80041ce:	2107      	movs	r1, #7
 80041d0:	4628      	mov	r0, r5
 80041d2:	f7ff f986 	bl	80034e2 <unlock_fs>
}
 80041d6:	4638      	mov	r0, r7
 80041d8:	b007      	add	sp, #28
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->obj.objsize - fp->fptr;
 80041de:	69a3      	ldr	r3, [r4, #24]
 80041e0:	68e6      	ldr	r6, [r4, #12]
 80041e2:	1af6      	subs	r6, r6, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80041e4:	f104 0330 	add.w	r3, r4, #48	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80041e8:	4546      	cmp	r6, r8
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80041ea:	9301      	str	r3, [sp, #4]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80041ec:	bf28      	it	cs
 80041ee:	4646      	movcs	r6, r8
	for ( ;  btr;								/* Repeat until all data read */
 80041f0:	b916      	cbnz	r6, 80041f8 <f_read+0x64>
	LEAVE_FF(fs, FR_OK);
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	e7e0      	b.n	80041ba <f_read+0x26>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80041f8:	69a1      	ldr	r1, [r4, #24]
 80041fa:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d17f      	bne.n	8004302 <f_read+0x16e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004202:	f8b5 900a 	ldrh.w	r9, [r5, #10]
 8004206:	f109 39ff 	add.w	r9, r9, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 800420a:	ea19 2951 	ands.w	r9, r9, r1, lsr #9
 800420e:	d11f      	bne.n	8004250 <f_read+0xbc>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004210:	b949      	cbnz	r1, 8004226 <f_read+0x92>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004212:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004214:	2801      	cmp	r0, #1
 8004216:	d811      	bhi.n	800423c <f_read+0xa8>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004218:	2102      	movs	r1, #2
 800421a:	4628      	mov	r0, r5
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800421c:	2702      	movs	r7, #2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800421e:	7561      	strb	r1, [r4, #21]
 8004220:	f7ff f95f 	bl	80034e2 <unlock_fs>
 8004224:	e7d7      	b.n	80041d6 <f_read+0x42>
					if (fp->cltbl) {
 8004226:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004228:	b11b      	cbz	r3, 8004232 <f_read+0x9e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800422a:	4620      	mov	r0, r4
 800422c:	f7fe fe93 	bl	8002f56 <clmt_clust>
 8004230:	e7f0      	b.n	8004214 <f_read+0x80>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004232:	69e1      	ldr	r1, [r4, #28]
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	f7ff f967 	bl	8003508 <get_fat.isra.0>
 800423a:	e7eb      	b.n	8004214 <f_read+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d106      	bne.n	800424e <f_read+0xba>
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004240:	2101      	movs	r1, #1
 8004242:	4628      	mov	r0, r5
 8004244:	7561      	strb	r1, [r4, #21]
 8004246:	f7ff f94c 	bl	80034e2 <unlock_fs>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800424a:	9f02      	ldr	r7, [sp, #8]
 800424c:	e7c3      	b.n	80041d6 <f_read+0x42>
				fp->clust = clst;				/* Update current cluster */
 800424e:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004250:	69e1      	ldr	r1, [r4, #28]
 8004252:	4628      	mov	r0, r5
 8004254:	f7fe fe74 	bl	8002f40 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004258:	2800      	cmp	r0, #0
 800425a:	d0dd      	beq.n	8004218 <f_read+0x84>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800425c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 8004260:	eb09 0800 	add.w	r8, r9, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004264:	d331      	bcc.n	80042ca <f_read+0x136>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004266:	896a      	ldrh	r2, [r5, #10]
 8004268:	eb09 2156 	add.w	r1, r9, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800426c:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800426e:	7868      	ldrb	r0, [r5, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004270:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004272:	4651      	mov	r1, sl
					cc = fs->csize - csect;
 8004274:	bf88      	it	hi
 8004276:	eba2 0309 	subhi.w	r3, r2, r9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800427a:	4642      	mov	r2, r8
 800427c:	9303      	str	r3, [sp, #12]
 800427e:	f7fe fd7b 	bl	8002d78 <disk_read>
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	2800      	cmp	r0, #0
 8004286:	d1db      	bne.n	8004240 <f_read+0xac>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004288:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800428c:	2a00      	cmp	r2, #0
 800428e:	da0e      	bge.n	80042ae <f_read+0x11a>
 8004290:	6a20      	ldr	r0, [r4, #32]
 8004292:	eba0 0008 	sub.w	r0, r0, r8
 8004296:	4298      	cmp	r0, r3
 8004298:	d209      	bcs.n	80042ae <f_read+0x11a>
 800429a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800429e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80042a2:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 80042a6:	9303      	str	r3, [sp, #12]
	if (cnt) {
 80042a8:	f7fe feb7 	bl	800301a <mem_cpy.part.0>
 80042ac:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80042ae:	ea4f 2843 	mov.w	r8, r3, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80042b2:	69a3      	ldr	r3, [r4, #24]
 80042b4:	44c2      	add	sl, r8
 80042b6:	eba6 0608 	sub.w	r6, r6, r8
 80042ba:	4443      	add	r3, r8
 80042bc:	61a3      	str	r3, [r4, #24]
 80042be:	f8db 3000 	ldr.w	r3, [fp]
 80042c2:	4443      	add	r3, r8
 80042c4:	f8cb 3000 	str.w	r3, [fp]
 80042c8:	e792      	b.n	80041f0 <f_read+0x5c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80042ca:	6a22      	ldr	r2, [r4, #32]
 80042cc:	4542      	cmp	r2, r8
 80042ce:	d016      	beq.n	80042fe <f_read+0x16a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80042d0:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042d4:	7868      	ldrb	r0, [r5, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	da09      	bge.n	80042ee <f_read+0x15a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042da:	2301      	movs	r3, #1
 80042dc:	9901      	ldr	r1, [sp, #4]
 80042de:	f7fe fd59 	bl	8002d94 <disk_write>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d1ac      	bne.n	8004240 <f_read+0xac>
					fp->flag &= (BYTE)~FA_DIRTY;
 80042e6:	7d23      	ldrb	r3, [r4, #20]
 80042e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ec:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80042ee:	2301      	movs	r3, #1
 80042f0:	4642      	mov	r2, r8
 80042f2:	9901      	ldr	r1, [sp, #4]
 80042f4:	7868      	ldrb	r0, [r5, #1]
 80042f6:	f7fe fd3f 	bl	8002d78 <disk_read>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d1a0      	bne.n	8004240 <f_read+0xac>
			fp->sect = sect;
 80042fe:	f8c4 8020 	str.w	r8, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004302:	69a1      	ldr	r1, [r4, #24]
 8004304:	4650      	mov	r0, sl
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800430c:	f5c1 7800 	rsb	r8, r1, #512	@ 0x200
 8004310:	4419      	add	r1, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004312:	45b0      	cmp	r8, r6
 8004314:	bf28      	it	cs
 8004316:	46b0      	movcs	r8, r6
	if (cnt) {
 8004318:	4642      	mov	r2, r8
 800431a:	f7fe fe7e 	bl	800301a <mem_cpy.part.0>
 800431e:	e7c8      	b.n	80042b2 <f_read+0x11e>

08004320 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	469a      	mov	sl, r3
 8004326:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8004328:	2300      	movs	r3, #0
{
 800432a:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800432c:	a903      	add	r1, sp, #12
{
 800432e:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8004330:	f8ca 3000 	str.w	r3, [sl]
{
 8004334:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004336:	f7ff fdab 	bl	8003e90 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800433a:	4607      	mov	r7, r0
 800433c:	b908      	cbnz	r0, 8004342 <f_write+0x22>
 800433e:	7d67      	ldrb	r7, [r4, #21]
 8004340:	b127      	cbz	r7, 800434c <f_write+0x2c>
 8004342:	4639      	mov	r1, r7
 8004344:	9803      	ldr	r0, [sp, #12]
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
 8004346:	f7ff f8cc 	bl	80034e2 <unlock_fs>
 800434a:	e008      	b.n	800435e <f_write+0x3e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800434c:	7d23      	ldrb	r3, [r4, #20]
 800434e:	9d03      	ldr	r5, [sp, #12]
 8004350:	079a      	lsls	r2, r3, #30
 8004352:	d408      	bmi.n	8004366 <f_write+0x46>
 8004354:	2707      	movs	r7, #7
 8004356:	2107      	movs	r1, #7
 8004358:	4628      	mov	r0, r5
 800435a:	f7ff f8c2 	bl	80034e2 <unlock_fs>
}
 800435e:	4638      	mov	r0, r7
 8004360:	b005      	add	sp, #20
 8004362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004366:	69a3      	ldr	r3, [r4, #24]
 8004368:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800436a:	bf28      	it	cs
 800436c:	43de      	mvncs	r6, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800436e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8004372:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8004374:	b1d6      	cbz	r6, 80043ac <f_write+0x8c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004376:	69a1      	ldr	r1, [r4, #24]
 8004378:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800437c:	2b00      	cmp	r3, #0
 800437e:	f040 8098 	bne.w	80044b2 <f_write+0x192>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004382:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8004386:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 800438a:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 800438e:	d12c      	bne.n	80043ea <f_write+0xca>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004390:	b931      	cbnz	r1, 80043a0 <f_write+0x80>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004392:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8004394:	b998      	cbnz	r0, 80043be <f_write+0x9e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004396:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff f942 	bl	8003622 <create_chain>
 800439e:	e004      	b.n	80043aa <f_write+0x8a>
					if (fp->cltbl) {
 80043a0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80043a2:	b153      	cbz	r3, 80043ba <f_write+0x9a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7fe fdd6 	bl	8002f56 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80043aa:	b940      	cbnz	r0, 80043be <f_write+0x9e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80043ac:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80043ae:	2100      	movs	r1, #0
 80043b0:	4628      	mov	r0, r5
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80043b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b6:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80043b8:	e7c5      	b.n	8004346 <f_write+0x26>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80043ba:	69e1      	ldr	r1, [r4, #28]
 80043bc:	e7ec      	b.n	8004398 <f_write+0x78>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80043be:	2801      	cmp	r0, #1
 80043c0:	d106      	bne.n	80043d0 <f_write+0xb0>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80043c2:	2102      	movs	r1, #2
 80043c4:	4628      	mov	r0, r5
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80043c6:	2702      	movs	r7, #2
			if (!sect) ABORT(fs, FR_INT_ERR);
 80043c8:	7561      	strb	r1, [r4, #21]
 80043ca:	f7ff f88a 	bl	80034e2 <unlock_fs>
 80043ce:	e7c6      	b.n	800435e <f_write+0x3e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d106      	bne.n	80043e2 <f_write+0xc2>
					ABORT(fs, FR_DISK_ERR);
 80043d4:	2101      	movs	r1, #1
 80043d6:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80043d8:	2701      	movs	r7, #1
					ABORT(fs, FR_DISK_ERR);
 80043da:	7561      	strb	r1, [r4, #21]
 80043dc:	f7ff f881 	bl	80034e2 <unlock_fs>
 80043e0:	e7bd      	b.n	800435e <f_write+0x3e>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80043e2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80043e4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80043e6:	b903      	cbnz	r3, 80043ea <f_write+0xca>
 80043e8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80043ea:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da0b      	bge.n	800440a <f_write+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043f2:	2301      	movs	r3, #1
 80043f4:	6a22      	ldr	r2, [r4, #32]
 80043f6:	9900      	ldr	r1, [sp, #0]
 80043f8:	7868      	ldrb	r0, [r5, #1]
 80043fa:	f7fe fccb 	bl	8002d94 <disk_write>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d1e8      	bne.n	80043d4 <f_write+0xb4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004402:	7d23      	ldrb	r3, [r4, #20]
 8004404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004408:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800440a:	69e1      	ldr	r1, [r4, #28]
 800440c:	4628      	mov	r0, r5
 800440e:	f7fe fd97 	bl	8002f40 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004412:	2800      	cmp	r0, #0
 8004414:	d0d5      	beq.n	80043c2 <f_write+0xa2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004416:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 800441a:	eb08 0b00 	add.w	fp, r8, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800441e:	d336      	bcc.n	800448e <f_write+0x16e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004420:	8969      	ldrh	r1, [r5, #10]
 8004422:	eb08 2056 	add.w	r0, r8, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004426:	0a73      	lsrs	r3, r6, #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004428:	465a      	mov	r2, fp
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800442a:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800442c:	7868      	ldrb	r0, [r5, #1]
					cc = fs->csize - csect;
 800442e:	bf88      	it	hi
 8004430:	eba1 0308 	subhi.w	r3, r1, r8
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004434:	4649      	mov	r1, r9
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	f7fe fcac 	bl	8002d94 <disk_write>
 800443c:	9b01      	ldr	r3, [sp, #4]
 800443e:	2800      	cmp	r0, #0
 8004440:	d1c8      	bne.n	80043d4 <f_write+0xb4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004442:	6a21      	ldr	r1, [r4, #32]
 8004444:	eba1 010b 	sub.w	r1, r1, fp
 8004448:	4299      	cmp	r1, r3
 800444a:	d20d      	bcs.n	8004468 <f_write+0x148>
 800444c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004450:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004454:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004458:	9301      	str	r3, [sp, #4]
	if (cnt) {
 800445a:	f7fe fdde 	bl	800301a <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800445e:	7d22      	ldrb	r2, [r4, #20]
 8004460:	9b01      	ldr	r3, [sp, #4]
 8004462:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004466:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004468:	ea4f 2843 	mov.w	r8, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800446c:	69a3      	ldr	r3, [r4, #24]
 800446e:	44c1      	add	r9, r8
 8004470:	68e2      	ldr	r2, [r4, #12]
 8004472:	eba6 0608 	sub.w	r6, r6, r8
 8004476:	4443      	add	r3, r8
 8004478:	61a3      	str	r3, [r4, #24]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf2c      	ite	cs
 800447e:	60e2      	strcs	r2, [r4, #12]
 8004480:	60e3      	strcc	r3, [r4, #12]
 8004482:	f8da 3000 	ldr.w	r3, [sl]
 8004486:	4443      	add	r3, r8
 8004488:	f8ca 3000 	str.w	r3, [sl]
 800448c:	e772      	b.n	8004374 <f_write+0x54>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800448e:	6a21      	ldr	r1, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 8004490:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004492:	4559      	cmp	r1, fp
 8004494:	d00b      	beq.n	80044ae <f_write+0x18e>
 8004496:	68e1      	ldr	r1, [r4, #12]
 8004498:	4299      	cmp	r1, r3
 800449a:	d908      	bls.n	80044ae <f_write+0x18e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800449c:	2301      	movs	r3, #1
 800449e:	465a      	mov	r2, fp
 80044a0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80044a4:	7868      	ldrb	r0, [r5, #1]
 80044a6:	f7fe fc67 	bl	8002d78 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d192      	bne.n	80043d4 <f_write+0xb4>
			fp->sect = sect;
 80044ae:	f8c4 b020 	str.w	fp, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80044b2:	69a0      	ldr	r0, [r4, #24]
 80044b4:	4649      	mov	r1, r9
 80044b6:	9b00      	ldr	r3, [sp, #0]
 80044b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80044bc:	f5c0 7800 	rsb	r8, r0, #512	@ 0x200
 80044c0:	4418      	add	r0, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80044c2:	45b0      	cmp	r8, r6
 80044c4:	bf28      	it	cs
 80044c6:	46b0      	movcs	r8, r6
	if (cnt) {
 80044c8:	4642      	mov	r2, r8
 80044ca:	f7fe fda6 	bl	800301a <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80044ce:	7d23      	ldrb	r3, [r4, #20]
 80044d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044d4:	7523      	strb	r3, [r4, #20]
 80044d6:	e7c9      	b.n	800446c <f_write+0x14c>

080044d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80044d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80044dc:	a901      	add	r1, sp, #4
{
 80044de:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80044e0:	f7ff fcd6 	bl	8003e90 <validate>
	if (res == FR_OK) {
 80044e4:	4604      	mov	r4, r0
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d144      	bne.n	8004574 <f_sync+0x9c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80044ea:	7d2b      	ldrb	r3, [r5, #20]
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80044ec:	9f01      	ldr	r7, [sp, #4]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80044ee:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 80044f2:	d03f      	beq.n	8004574 <f_sync+0x9c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	d514      	bpl.n	8004522 <f_sync+0x4a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80044f8:	2301      	movs	r3, #1
 80044fa:	6a2a      	ldr	r2, [r5, #32]
 80044fc:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 8004500:	7878      	ldrb	r0, [r7, #1]
 8004502:	f7fe fc47 	bl	8002d94 <disk_write>
 8004506:	b140      	cbz	r0, 800451a <f_sync+0x42>
 8004508:	2401      	movs	r4, #1
 800450a:	2101      	movs	r1, #1
 800450c:	4638      	mov	r0, r7
 800450e:	f7fe ffe8 	bl	80034e2 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8004512:	4620      	mov	r0, r4
 8004514:	b002      	add	sp, #8
 8004516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800451a:	7d2b      	ldrb	r3, [r5, #20]
 800451c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004520:	752b      	strb	r3, [r5, #20]
			tm = GET_FATTIME();				/* Modified time */
 8004522:	f7fe fc53 	bl	8002dcc <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8004526:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 8004528:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
 800452a:	4638      	mov	r0, r7
 800452c:	f7fe fd8a 	bl	8003044 <move_window>
				if (res == FR_OK) {
 8004530:	4604      	mov	r4, r0
 8004532:	b9f8      	cbnz	r0, 8004574 <f_sync+0x9c>
					dir = fp->dir_ptr;
 8004534:	6aae      	ldr	r6, [r5, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004536:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004538:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800453a:	f043 0320 	orr.w	r3, r3, #32
 800453e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004540:	68aa      	ldr	r2, [r5, #8]
 8004542:	6828      	ldr	r0, [r5, #0]
 8004544:	f7fe fd72 	bl	800302c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004548:	68e9      	ldr	r1, [r5, #12]
 800454a:	f106 001c 	add.w	r0, r6, #28
 800454e:	f7fe fc41 	bl	8002dd4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004552:	4641      	mov	r1, r8
 8004554:	f106 0016 	add.w	r0, r6, #22
 8004558:	f7fe fc3c 	bl	8002dd4 <st_dword>
					fs->wflag = 1;
 800455c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800455e:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004560:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
 8004562:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8004564:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004566:	f7fe ff71 	bl	800344c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800456a:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800456c:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800456e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004572:	752b      	strb	r3, [r5, #20]
	LEAVE_FF(fs, res);
 8004574:	4621      	mov	r1, r4
 8004576:	9801      	ldr	r0, [sp, #4]
 8004578:	f7fe ffb3 	bl	80034e2 <unlock_fs>
 800457c:	e7c9      	b.n	8004512 <f_sync+0x3a>

0800457e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800457e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004580:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004582:	f7ff ffa9 	bl	80044d8 <f_sync>
	if (res == FR_OK)
 8004586:	4604      	mov	r4, r0
 8004588:	b978      	cbnz	r0, 80045aa <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800458a:	a901      	add	r1, sp, #4
 800458c:	4628      	mov	r0, r5
 800458e:	f7ff fc7f 	bl	8003e90 <validate>
		if (res == FR_OK) {
 8004592:	4604      	mov	r4, r0
 8004594:	b948      	cbnz	r0, 80045aa <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004596:	6928      	ldr	r0, [r5, #16]
 8004598:	f7fe fca6 	bl	8002ee8 <dec_lock>
			if (res == FR_OK)
 800459c:	4604      	mov	r4, r0
 800459e:	b900      	cbnz	r0, 80045a2 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80045a0:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80045a2:	2100      	movs	r1, #0
 80045a4:	9801      	ldr	r0, [sp, #4]
 80045a6:	f7fe ff9c 	bl	80034e2 <unlock_fs>
#endif
		}
	}
	return res;
}
 80045aa:	4620      	mov	r0, r4
 80045ac:	b003      	add	sp, #12
 80045ae:	bd30      	pop	{r4, r5, pc}

080045b0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	b089      	sub	sp, #36	@ 0x24
 80045b6:	460d      	mov	r5, r1
 80045b8:	4616      	mov	r6, r2
 80045ba:	461c      	mov	r4, r3
 80045bc:	9005      	str	r0, [sp, #20]
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80045be:	a805      	add	r0, sp, #20
 80045c0:	f7fe fce9 	bl	8002f96 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80045c4:	1e07      	subs	r7, r0, #0
 80045c6:	f2c0 8227 	blt.w	8004a18 <f_mkfs+0x468>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80045ca:	4b95      	ldr	r3, [pc, #596]	@ (8004820 <f_mkfs+0x270>)
 80045cc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	b10b      	cbz	r3, 80045d8 <f_mkfs+0x28>
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80045d8:	b2ff      	uxtb	r7, r7
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80045da:	4638      	mov	r0, r7
 80045dc:	f7fe fbbc 	bl	8002d58 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80045e0:	07c1      	lsls	r1, r0, #31
 80045e2:	f100 821b 	bmi.w	8004a1c <f_mkfs+0x46c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80045e6:	0742      	lsls	r2, r0, #29
 80045e8:	f100 821a 	bmi.w	8004a20 <f_mkfs+0x470>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80045ec:	aa06      	add	r2, sp, #24
 80045ee:	2103      	movs	r1, #3
 80045f0:	4638      	mov	r0, r7
 80045f2:	f7fe fbdd 	bl	8002db0 <disk_ioctl>
 80045f6:	b930      	cbnz	r0, 8004606 <f_mkfs+0x56>
 80045f8:	9a06      	ldr	r2, [sp, #24]
 80045fa:	1e53      	subs	r3, r2, #1
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004600:	d201      	bcs.n	8004606 <f_mkfs+0x56>
 8004602:	421a      	tst	r2, r3
 8004604:	d001      	beq.n	800460a <f_mkfs+0x5a>
 8004606:	2301      	movs	r3, #1
 8004608:	9306      	str	r3, [sp, #24]
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800460a:	b15e      	cbz	r6, 8004624 <f_mkfs+0x74>
 800460c:	f5a6 7200 	sub.w	r2, r6, #512	@ 0x200
 8004610:	4b84      	ldr	r3, [pc, #528]	@ (8004824 <f_mkfs+0x274>)
 8004612:	429a      	cmp	r2, r3
 8004614:	d903      	bls.n	800461e <f_mkfs+0x6e>
 8004616:	2013      	movs	r0, #19
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
 8004618:	b009      	add	sp, #36	@ 0x24
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800461e:	1e73      	subs	r3, r6, #1
 8004620:	4233      	tst	r3, r6
 8004622:	d1f8      	bne.n	8004616 <f_mkfs+0x66>
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8004624:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004626:	f36f 0308 	bfc	r3, #0, #9
 800462a:	9303      	str	r3, [sp, #12]
	if (!szb_buf) return FR_MKFS_ABORTED;
 800462c:	b90b      	cbnz	r3, 8004632 <f_mkfs+0x82>
 800462e:	200e      	movs	r0, #14
 8004630:	e7f2      	b.n	8004618 <f_mkfs+0x68>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8004632:	aa07      	add	r2, sp, #28
 8004634:	2101      	movs	r1, #1
 8004636:	4638      	mov	r0, r7
 8004638:	f7fe fbba 	bl	8002db0 <disk_ioctl>
 800463c:	2800      	cmp	r0, #0
 800463e:	f040 8284 	bne.w	8004b4a <f_mkfs+0x59a>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8004642:	f015 0208 	ands.w	r2, r5, #8
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8004646:	9b07      	ldr	r3, [sp, #28]
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8004648:	9201      	str	r2, [sp, #4]
 800464a:	d14a      	bne.n	80046e2 <f_mkfs+0x132>
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800464c:	2b3e      	cmp	r3, #62	@ 0x3e
 800464e:	d9ee      	bls.n	800462e <f_mkfs+0x7e>
 8004650:	f04f 083f 	mov.w	r8, #63	@ 0x3f
		sz_vol -= b_vol;						/* Volume size */
 8004654:	eba3 0008 	sub.w	r0, r3, r8
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8004658:	287f      	cmp	r0, #127	@ 0x7f
		sz_vol -= b_vol;						/* Volume size */
 800465a:	9007      	str	r0, [sp, #28]
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800465c:	d9e7      	bls.n	800462e <f_mkfs+0x7e>
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800465e:	f5b6 3f81 	cmp.w	r6, #66048	@ 0x10200
 8004662:	d2d8      	bcs.n	8004616 <f_mkfs+0x66>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8004664:	f015 0c02 	ands.w	ip, r5, #2
 8004668:	d03d      	beq.n	80046e6 <f_mkfs+0x136>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800466a:	f005 0307 	and.w	r3, r5, #7
 800466e:	2b02      	cmp	r3, #2
 8004670:	d03d      	beq.n	80046ee <f_mkfs+0x13e>
 8004672:	f005 0501 	and.w	r5, r5, #1
 8004676:	f1c5 0503 	rsb	r5, r5, #3
 800467a:	b2ed      	uxtb	r5, r5
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800467c:	9b06      	ldr	r3, [sp, #24]
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800467e:	2d03      	cmp	r5, #3
	au /= ss;	/* Cluster size in unit of sector */
 8004680:	ea4f 2656 	mov.w	r6, r6, lsr #9
 8004684:	f103 3eff 	add.w	lr, r3, #4294967295
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004688:	f1c3 0300 	rsb	r3, r3, #0
 800468c:	9304      	str	r3, [sp, #16]
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800468e:	d030      	beq.n	80046f2 <f_mkfs+0x142>
				if (!pau) {	/* au auto-selection */
 8004690:	2e00      	cmp	r6, #0
 8004692:	f040 8088 	bne.w	80047a6 <f_mkfs+0x1f6>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8004696:	0b05      	lsrs	r5, r0, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004698:	4963      	ldr	r1, [pc, #396]	@ (8004828 <f_mkfs+0x278>)
 800469a:	2201      	movs	r2, #1
 800469c:	f831 3b02 	ldrh.w	r3, [r1], #2
 80046a0:	b10b      	cbz	r3, 80046a6 <f_mkfs+0xf6>
 80046a2:	42ab      	cmp	r3, r5
 80046a4:	d97d      	bls.n	80047a2 <f_mkfs+0x1f2>
				n_clst = sz_vol / pau;
 80046a6:	fbb0 f5f2 	udiv	r5, r0, r2
				if (n_clst > MAX_FAT12) {
 80046aa:	f640 73f5 	movw	r3, #4085	@ 0xff5
				sz_rsv = 1;						/* Number of reserved sectors */
 80046ae:	f04f 0b01 	mov.w	fp, #1
				if (n_clst > MAX_FAT12) {
 80046b2:	429d      	cmp	r5, r3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80046b4:	4633      	mov	r3, r6
 80046b6:	4616      	mov	r6, r2
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80046b8:	f04f 0220 	mov.w	r2, #32
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80046bc:	bf93      	iteet	ls
 80046be:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80046c2:	3502      	addhi	r5, #2
 80046c4:	f04f 0902 	movhi.w	r9, #2
					fmt = FS_FAT12;
 80046c8:	f04f 0901 	movls.w	r9, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80046cc:	bf94      	ite	ls
 80046ce:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80046d0:	006d      	lslhi	r5, r5, #1
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80046d2:	9200      	str	r2, [sp, #0]
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80046d4:	bf9c      	itt	ls
 80046d6:	086d      	lsrls	r5, r5, #1
 80046d8:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80046da:	f205 15ff 	addw	r5, r5, #511	@ 0x1ff
 80046de:	0a6d      	lsrs	r5, r5, #9
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80046e0:	e025      	b.n	800472e <f_mkfs+0x17e>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80046e2:	4680      	mov	r8, r0
 80046e4:	e7b6      	b.n	8004654 <f_mkfs+0xa4>
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80046e6:	07eb      	lsls	r3, r5, #31
 80046e8:	d595      	bpl.n	8004616 <f_mkfs+0x66>
		fmt = FS_FAT16;
 80046ea:	2502      	movs	r5, #2
 80046ec:	e7c6      	b.n	800467c <f_mkfs+0xcc>
				fmt = FS_FAT32; break;
 80046ee:	2503      	movs	r5, #3
 80046f0:	e7c4      	b.n	800467c <f_mkfs+0xcc>
				if (!pau) {	/* au auto-selection */
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	d151      	bne.n	800479a <f_mkfs+0x1ea>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80046f6:	0c41      	lsrs	r1, r0, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80046f8:	4a4c      	ldr	r2, [pc, #304]	@ (800482c <f_mkfs+0x27c>)
 80046fa:	2601      	movs	r6, #1
 80046fc:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004700:	b113      	cbz	r3, 8004708 <f_mkfs+0x158>
 8004702:	428b      	cmp	r3, r1
 8004704:	d94b      	bls.n	800479e <f_mkfs+0x1ee>
 8004706:	2300      	movs	r3, #0
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004708:	4949      	ldr	r1, [pc, #292]	@ (8004830 <f_mkfs+0x280>)
				n_clst = sz_vol / pau;	/* Number of clusters */
 800470a:	fbb0 f2f6 	udiv	r2, r0, r6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800470e:	0095      	lsls	r5, r2, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004710:	f5a2 427f 	sub.w	r2, r2, #65280	@ 0xff00
 8004714:	3af6      	subs	r2, #246	@ 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004716:	f205 2507 	addw	r5, r5, #519	@ 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800471a:	428a      	cmp	r2, r1
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800471c:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004720:	d885      	bhi.n	800462e <f_mkfs+0x7e>
				sz_dir = 0;		/* No static directory */
 8004722:	2200      	movs	r2, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 8004724:	f04f 0b20 	mov.w	fp, #32
 8004728:	f04f 0903 	mov.w	r9, #3
				sz_dir = 0;		/* No static directory */
 800472c:	9200      	str	r2, [sp, #0]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800472e:	9a00      	ldr	r2, [sp, #0]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8004730:	eb0b 0a08 	add.w	sl, fp, r8
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8004734:	f1b9 0f03 	cmp.w	r9, #3
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004738:	eb02 0105 	add.w	r1, r2, r5
 800473c:	eb01 020a 	add.w	r2, r1, sl
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004740:	9904      	ldr	r1, [sp, #16]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004742:	9202      	str	r2, [sp, #8]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004744:	4472      	add	r2, lr
 8004746:	ea02 0201 	and.w	r2, r2, r1
 800474a:	9902      	ldr	r1, [sp, #8]
 800474c:	eba2 0201 	sub.w	r2, r2, r1
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8004750:	9902      	ldr	r1, [sp, #8]
				sz_rsv += n; b_fat += n;
 8004752:	bf06      	itte	eq
 8004754:	4493      	addeq	fp, r2
 8004756:	4492      	addeq	sl, r2
				sz_fat += n / n_fats;
 8004758:	18ad      	addne	r5, r5, r2
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800475a:	ebc8 1206 	rsb	r2, r8, r6, lsl #4
 800475e:	440a      	add	r2, r1
 8004760:	4290      	cmp	r0, r2
 8004762:	f4ff af64 	bcc.w	800462e <f_mkfs+0x7e>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8004766:	9a00      	ldr	r2, [sp, #0]
			if (fmt == FS_FAT32) {
 8004768:	f1b9 0f03 	cmp.w	r9, #3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800476c:	eba0 0202 	sub.w	r2, r0, r2
 8004770:	eba2 020b 	sub.w	r2, r2, fp
 8004774:	eba2 0205 	sub.w	r2, r2, r5
 8004778:	fbb2 f2f6 	udiv	r2, r2, r6
 800477c:	9202      	str	r2, [sp, #8]
			if (fmt == FS_FAT32) {
 800477e:	d114      	bne.n	80047aa <f_mkfs+0x1fa>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8004780:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004784:	9902      	ldr	r1, [sp, #8]
 8004786:	4291      	cmp	r1, r2
 8004788:	f200 8163 	bhi.w	8004a52 <f_mkfs+0x4a2>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f af4e 	bne.w	800462e <f_mkfs+0x7e>
 8004792:	2e01      	cmp	r6, #1
 8004794:	f67f af4b 	bls.w	800462e <f_mkfs+0x7e>
 8004798:	0876      	lsrs	r6, r6, #1
				if (!pau) {	/* au auto-selection */
 800479a:	4633      	mov	r3, r6
 800479c:	e7b4      	b.n	8004708 <f_mkfs+0x158>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800479e:	0076      	lsls	r6, r6, #1
 80047a0:	e7ac      	b.n	80046fc <f_mkfs+0x14c>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80047a2:	0052      	lsls	r2, r2, #1
 80047a4:	e77a      	b.n	800469c <f_mkfs+0xec>
			pau = au;
 80047a6:	4632      	mov	r2, r6
 80047a8:	e77d      	b.n	80046a6 <f_mkfs+0xf6>
			if (fmt == FS_FAT16) {
 80047aa:	f1b9 0f02 	cmp.w	r9, #2
 80047ae:	f040 8148 	bne.w	8004a42 <f_mkfs+0x492>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80047b2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80047b6:	9902      	ldr	r1, [sp, #8]
 80047b8:	4291      	cmp	r1, r2
 80047ba:	d908      	bls.n	80047ce <f_mkfs+0x21e>
					if (!au && (pau * 2) <= 64) {
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 813a 	bne.w	8004a36 <f_mkfs+0x486>
 80047c2:	0072      	lsls	r2, r6, #1
 80047c4:	2a40      	cmp	r2, #64	@ 0x40
 80047c6:	f200 812d 	bhi.w	8004a24 <f_mkfs+0x474>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80047ca:	4616      	mov	r6, r2
 80047cc:	e760      	b.n	8004690 <f_mkfs+0xe0>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80047ce:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80047d2:	9902      	ldr	r1, [sp, #8]
 80047d4:	4291      	cmp	r1, r2
 80047d6:	f200 813c 	bhi.w	8004a52 <f_mkfs+0x4a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f47f af27 	bne.w	800462e <f_mkfs+0x7e>
 80047e0:	0076      	lsls	r6, r6, #1
 80047e2:	2e80      	cmp	r6, #128	@ 0x80
 80047e4:	f67f af54 	bls.w	8004690 <f_mkfs+0xe0>
 80047e8:	e721      	b.n	800462e <f_mkfs+0x7e>
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80047ea:	f104 0020 	add.w	r0, r4, #32
 80047ee:	f7fe faf1 	bl	8002dd4 <st_dword>
 80047f2:	e158      	b.n	8004aa6 <f_mkfs+0x4f6>
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80047f4:	f7fe faea 	bl	8002dcc <get_fattime>
 80047f8:	4601      	mov	r1, r0
 80047fa:	f104 0027 	add.w	r0, r4, #39	@ 0x27
 80047fe:	2213      	movs	r2, #19
 8004800:	f7fe fae8 	bl	8002dd4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8004804:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004808:	490a      	ldr	r1, [pc, #40]	@ (8004834 <f_mkfs+0x284>)
 800480a:	f104 002b 	add.w	r0, r4, #43	@ 0x2b
	*ptr++ = (BYTE)val;
 800480e:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8004810:	2380      	movs	r3, #128	@ 0x80
	*ptr++ = (BYTE)val; val >>= 8;
 8004812:	75a5      	strb	r5, [r4, #22]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8004814:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8004818:	2329      	movs	r3, #41	@ 0x29
 800481a:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
	if (cnt) {
 800481e:	e180      	b.n	8004b22 <f_mkfs+0x572>
 8004820:	20000af0 	.word	0x20000af0
 8004824:	00fffe00 	.word	0x00fffe00
 8004828:	080068d0 	.word	0x080068d0
 800482c:	080068c2 	.word	0x080068c2
 8004830:	0ffeffff 	.word	0x0ffeffff
 8004834:	08006d0f 	.word	0x08006d0f
		if (fmt == FS_FAT32) {
 8004838:	f1b9 0f03 	cmp.w	r9, #3
 800483c:	d141      	bne.n	80048c2 <f_mkfs+0x312>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800483e:	2301      	movs	r3, #1
 8004840:	f108 0206 	add.w	r2, r8, #6
 8004844:	4621      	mov	r1, r4
 8004846:	4638      	mov	r0, r7
 8004848:	f7fe faa4 	bl	8002d94 <disk_write>
	*ptr++ = (BYTE)val; val >>= 8;
 800484c:	2352      	movs	r3, #82	@ 0x52
			mem_set(buf, 0, ss);
 800484e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004852:	4659      	mov	r1, fp
 8004854:	4620      	mov	r0, r4
 8004856:	f7fe fac5 	bl	8002de4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800485a:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800485c:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800485e:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val;
 8004860:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004862:	2172      	movs	r1, #114	@ 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 8004864:	70a3      	strb	r3, [r4, #2]
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8004866:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
	*ptr++ = (BYTE)val;
 800486a:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800486e:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val;
 8004870:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004872:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 8004876:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800487a:	1e59      	subs	r1, r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800487c:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004880:	f108 0207 	add.w	r2, r8, #7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8004884:	f7fe faa6 	bl	8002dd4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8004888:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800488a:	4621      	mov	r1, r4
 800488c:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800488e:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
	*ptr++ = (BYTE)val; val >>= 8;
 8004892:	f04f 0355 	mov.w	r3, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 8004896:	f884 b1ed 	strb.w	fp, [r4, #493]	@ 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 800489a:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 800489e:	f06f 0355 	mvn.w	r3, #85	@ 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 80048a2:	f884 b1ee 	strb.w	fp, [r4, #494]	@ 0x1ee
	*ptr++ = (BYTE)val;
 80048a6:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80048aa:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80048ac:	f884 b1ef 	strb.w	fp, [r4, #495]	@ 0x1ef
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80048b0:	f7fe fa70 	bl	8002d94 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80048b4:	2301      	movs	r3, #1
 80048b6:	4621      	mov	r1, r4
 80048b8:	4638      	mov	r0, r7
 80048ba:	eb08 0203 	add.w	r2, r8, r3
 80048be:	f7fe fa69 	bl	8002d94 <disk_write>
		mem_set(buf, 0, (UINT)szb_buf);
 80048c2:	9a03      	ldr	r2, [sp, #12]
 80048c4:	2100      	movs	r1, #0
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7fe fa8c 	bl	8002de4 <mem_set>
			if (fmt == FS_FAT32) {
 80048cc:	f1b9 0f03 	cmp.w	r9, #3
 80048d0:	d158      	bne.n	8004984 <f_mkfs+0x3d4>
	*ptr++ = (BYTE)val; val >>= 8;
 80048d2:	23f8      	movs	r3, #248	@ 0xf8
 80048d4:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048d6:	23ff      	movs	r3, #255	@ 0xff
 80048d8:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80048da:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80048dc:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80048de:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e0:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e2:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 80048e4:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e6:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e8:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 80048ea:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 80048ec:	230f      	movs	r3, #15
 80048ee:	72e3      	strb	r3, [r4, #11]
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80048f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80048f2:	0a5b      	lsrs	r3, r3, #9
 80048f4:	9302      	str	r3, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80048f6:	9b02      	ldr	r3, [sp, #8]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80048f8:	4621      	mov	r1, r4
 80048fa:	4652      	mov	r2, sl
 80048fc:	4638      	mov	r0, r7
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80048fe:	42ab      	cmp	r3, r5
 8004900:	bf28      	it	cs
 8004902:	462b      	movcs	r3, r5
 8004904:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8004906:	f7fe fa45 	bl	8002d94 <disk_write>
 800490a:	4601      	mov	r1, r0
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 811c 	bne.w	8004b4a <f_mkfs+0x59a>
				mem_set(buf, 0, ss);
 8004912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004916:	4620      	mov	r0, r4
 8004918:	f7fe fa64 	bl	8002de4 <mem_set>
			} while (nsect);
 800491c:	ebb5 050b 	subs.w	r5, r5, fp
				sect += n; nsect -= n;
 8004920:	44da      	add	sl, fp
			} while (nsect);
 8004922:	d1e8      	bne.n	80048f6 <f_mkfs+0x346>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8004924:	9b00      	ldr	r3, [sp, #0]
 8004926:	f1b9 0f03 	cmp.w	r9, #3
 800492a:	bf08      	it	eq
 800492c:	4633      	moveq	r3, r6
 800492e:	9300      	str	r3, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004930:	9d00      	ldr	r5, [sp, #0]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8004932:	4652      	mov	r2, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004934:	9b02      	ldr	r3, [sp, #8]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8004936:	4621      	mov	r1, r4
 8004938:	4638      	mov	r0, r7
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800493a:	429d      	cmp	r5, r3
 800493c:	bf28      	it	cs
 800493e:	461d      	movcs	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8004940:	462b      	mov	r3, r5
 8004942:	f7fe fa27 	bl	8002d94 <disk_write>
 8004946:	2800      	cmp	r0, #0
 8004948:	f040 80ff 	bne.w	8004b4a <f_mkfs+0x59a>
		} while (nsect);
 800494c:	9b00      	ldr	r3, [sp, #0]
			sect += n; nsect -= n;
 800494e:	44aa      	add	sl, r5
		} while (nsect);
 8004950:	1b5b      	subs	r3, r3, r5
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	d1ec      	bne.n	8004930 <f_mkfs+0x380>
		if (fmt == FS_FAT32) {
 8004956:	f1b9 0f03 	cmp.w	r9, #3
 800495a:	d01d      	beq.n	8004998 <f_mkfs+0x3e8>
			if (sz_vol >= 0x10000) {
 800495c:	9b07      	ldr	r3, [sp, #28]
 800495e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004962:	d21b      	bcs.n	800499c <f_mkfs+0x3ec>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8004964:	f1b9 0f02 	cmp.w	r9, #2
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2304      	moveq	r3, #4
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800496e:	9a01      	ldr	r2, [sp, #4]
 8004970:	b1b2      	cbz	r2, 80049a0 <f_mkfs+0x3f0>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8004972:	2200      	movs	r2, #0
 8004974:	4638      	mov	r0, r7
 8004976:	4611      	mov	r1, r2
 8004978:	f7fe fa1a 	bl	8002db0 <disk_ioctl>
 800497c:	3800      	subs	r0, #0
 800497e:	bf18      	it	ne
 8004980:	2001      	movne	r0, #1
 8004982:	e649      	b.n	8004618 <f_mkfs+0x68>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8004984:	f1b9 0f01 	cmp.w	r9, #1
 8004988:	4971      	ldr	r1, [pc, #452]	@ (8004b50 <f_mkfs+0x5a0>)
 800498a:	4620      	mov	r0, r4
 800498c:	bf18      	it	ne
 800498e:	f06f 0107 	mvnne.w	r1, #7
 8004992:	f7fe fa1f 	bl	8002dd4 <st_dword>
 8004996:	e7ab      	b.n	80048f0 <f_mkfs+0x340>
			sys = 0x0C;		/* FAT32X */
 8004998:	230c      	movs	r3, #12
 800499a:	e7e8      	b.n	800496e <f_mkfs+0x3be>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800499c:	2306      	movs	r3, #6
 800499e:	e7e6      	b.n	800496e <f_mkfs+0x3be>
			mem_set(buf, 0, ss);
 80049a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a4:	9901      	ldr	r1, [sp, #4]
 80049a6:	4620      	mov	r0, r4
			pte[PTE_StHead] = 1;				/* Start head */
 80049a8:	2501      	movs	r5, #1
			mem_set(buf, 0, ss);
 80049aa:	f7fe fa1b 	bl	8002de4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80049ae:	2255      	movs	r2, #85	@ 0x55
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80049b0:	9e07      	ldr	r6, [sp, #28]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80049b2:	4641      	mov	r1, r8
	*ptr++ = (BYTE)val; val >>= 8;
 80049b4:	f884 21fe 	strb.w	r2, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80049b8:	22aa      	movs	r2, #170	@ 0xaa
			pte[PTE_System] = sys;				/* System type */
 80049ba:	f884 31c2 	strb.w	r3, [r4, #450]	@ 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80049be:	f643 63c1 	movw	r3, #16065	@ 0x3ec1
	*ptr++ = (BYTE)val;
 80049c2:	f884 21ff 	strb.w	r2, [r4, #511]	@ 0x1ff
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80049c6:	f504 70e3 	add.w	r0, r4, #454	@ 0x1c6
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80049ca:	9a01      	ldr	r2, [sp, #4]
			pte[PTE_StHead] = 1;				/* Start head */
 80049cc:	f884 51bf 	strb.w	r5, [r4, #447]	@ 0x1bf
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80049d0:	f884 21be 	strb.w	r2, [r4, #446]	@ 0x1be
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80049d4:	f884 21c1 	strb.w	r2, [r4, #449]	@ 0x1c1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80049d8:	eb06 0208 	add.w	r2, r6, r8
			pte[PTE_StSec] = 1;					/* Start sector */
 80049dc:	f884 51c0 	strb.w	r5, [r4, #448]	@ 0x1c0
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80049e0:	fbb2 f2f3 	udiv	r2, r2, r3
			pte[PTE_EdHead] = 254;				/* End head */
 80049e4:	23fe      	movs	r3, #254	@ 0xfe
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80049e6:	f884 21c5 	strb.w	r2, [r4, #453]	@ 0x1c5
			pte[PTE_EdHead] = 254;				/* End head */
 80049ea:	f884 31c3 	strb.w	r3, [r4, #451]	@ 0x1c3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80049ee:	0893      	lsrs	r3, r2, #2
 80049f0:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80049f4:	f884 31c4 	strb.w	r3, [r4, #452]	@ 0x1c4
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80049f8:	f7fe f9ec 	bl	8002dd4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80049fc:	4631      	mov	r1, r6
 80049fe:	f504 70e5 	add.w	r0, r4, #458	@ 0x1ca
 8004a02:	f7fe f9e7 	bl	8002dd4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8004a06:	462b      	mov	r3, r5
 8004a08:	9a01      	ldr	r2, [sp, #4]
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7fe f9c1 	bl	8002d94 <disk_write>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d0ad      	beq.n	8004972 <f_mkfs+0x3c2>
 8004a16:	e098      	b.n	8004b4a <f_mkfs+0x59a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a18:	200b      	movs	r0, #11
 8004a1a:	e5fd      	b.n	8004618 <f_mkfs+0x68>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	e5fb      	b.n	8004618 <f_mkfs+0x68>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004a20:	200a      	movs	r0, #10
 8004a22:	e5f9      	b.n	8004618 <f_mkfs+0x68>
					if ((opt & FM_FAT32)) {
 8004a24:	f1bc 0f00 	cmp.w	ip, #0
 8004a28:	f47f ae65 	bne.w	80046f6 <f_mkfs+0x146>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004a2c:	2a80      	cmp	r2, #128	@ 0x80
 8004a2e:	f63f adfe 	bhi.w	800462e <f_mkfs+0x7e>
 8004a32:	4616      	mov	r6, r2
 8004a34:	e637      	b.n	80046a6 <f_mkfs+0xf6>
					if ((opt & FM_FAT32)) {
 8004a36:	f1bc 0f00 	cmp.w	ip, #0
 8004a3a:	f43f adf8 	beq.w	800462e <f_mkfs+0x7e>
			pau = au;
 8004a3e:	461e      	mov	r6, r3
 8004a40:	e662      	b.n	8004708 <f_mkfs+0x158>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8004a42:	f640 73f5 	movw	r3, #4085	@ 0xff5
 8004a46:	9a02      	ldr	r2, [sp, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	f63f adf0 	bhi.w	800462e <f_mkfs+0x7e>
 8004a4e:	f04f 0901 	mov.w	r9, #1
		mem_set(buf, 0, ss);
 8004a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a56:	2100      	movs	r1, #0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7fe f9c3 	bl	8002de4 <mem_set>
	if (cnt) {
 8004a5e:	220b      	movs	r2, #11
 8004a60:	493c      	ldr	r1, [pc, #240]	@ (8004b54 <f_mkfs+0x5a4>)
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7fe fad9 	bl	800301a <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 8004a68:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8004a6a:	2202      	movs	r2, #2
		if (sz_vol < 0x10000) {
 8004a6c:	9907      	ldr	r1, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a6e:	72e3      	strb	r3, [r4, #11]
 8004a70:	7463      	strb	r3, [r4, #17]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8004a72:	f1b9 0303 	subs.w	r3, r9, #3
	*ptr++ = (BYTE)val;
 8004a76:	7322      	strb	r2, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8004a78:	f04f 0201 	mov.w	r2, #1
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8004a7c:	bf18      	it	ne
 8004a7e:	2301      	movne	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004a80:	f884 b00e 	strb.w	fp, [r4, #14]
		if (sz_vol < 0x10000) {
 8004a84:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
 8004a88:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004a8c:	fa03 f302 	lsl.w	r3, r3, r2
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8004a90:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 8004a92:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8004a96:	7422      	strb	r2, [r4, #16]
	*ptr++ = (BYTE)val;
 8004a98:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 8004a9a:	f4bf aea6 	bcs.w	80047ea <f_mkfs+0x23a>
	*ptr++ = (BYTE)val; val >>= 8;
 8004a9e:	74e1      	strb	r1, [r4, #19]
 8004aa0:	f3c1 2107 	ubfx	r1, r1, #8, #8
	*ptr++ = (BYTE)val;
 8004aa4:	7521      	strb	r1, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8004aa6:	23f8      	movs	r3, #248	@ 0xf8
	*ptr++ = (BYTE)val;
 8004aa8:	f04f 0b00 	mov.w	fp, #0
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8004aac:	4641      	mov	r1, r8
 8004aae:	f104 001c 	add.w	r0, r4, #28
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8004ab2:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ab4:	233f      	movs	r3, #63	@ 0x3f
	*ptr++ = (BYTE)val;
 8004ab6:	f884 b019 	strb.w	fp, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8004aba:	7623      	strb	r3, [r4, #24]
 8004abc:	23ff      	movs	r3, #255	@ 0xff
	*ptr++ = (BYTE)val;
 8004abe:	f884 b01b 	strb.w	fp, [r4, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ac2:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8004ac4:	f7fe f986 	bl	8002dd4 <st_dword>
		if (fmt == FS_FAT32) {
 8004ac8:	f1b9 0f03 	cmp.w	r9, #3
 8004acc:	f47f ae92 	bne.w	80047f4 <f_mkfs+0x244>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8004ad0:	f7fe f97c 	bl	8002dcc <get_fattime>
 8004ad4:	4601      	mov	r1, r0
 8004ad6:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8004ada:	2213      	movs	r2, #19
 8004adc:	f7fe f97a 	bl	8002dd4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004ae6:	f7fe f975 	bl	8002dd4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8004aea:	2302      	movs	r3, #2
 8004aec:	491a      	ldr	r1, [pc, #104]	@ (8004b58 <f_mkfs+0x5a8>)
 8004aee:	f104 0047 	add.w	r0, r4, #71	@ 0x47
 8004af2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8004af6:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004af8:	f884 b02d 	strb.w	fp, [r4, #45]	@ 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
 8004afc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8004b00:	2306      	movs	r3, #6
	*ptr++ = (BYTE)val; val >>= 8;
 8004b02:	f884 b02e 	strb.w	fp, [r4, #46]	@ 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 8004b06:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8004b0a:	2380      	movs	r3, #128	@ 0x80
	*ptr++ = (BYTE)val;
 8004b0c:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8004b10:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004b14:	2329      	movs	r3, #41	@ 0x29
	*ptr++ = (BYTE)val;
 8004b16:	f884 b031 	strb.w	fp, [r4, #49]	@ 0x31
 8004b1a:	f884 b033 	strb.w	fp, [r4, #51]	@ 0x33
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004b1e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
	if (cnt) {
 8004b22:	f7fe fa7a 	bl	800301a <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 8004b26:	f04f 0355 	mov.w	r3, #85	@ 0x55
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004b2e:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 8004b32:	f06f 0355 	mvn.w	r3, #85	@ 0x55
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8004b36:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
 8004b38:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f7fe f929 	bl	8002d94 <disk_write>
 8004b42:	4683      	mov	fp, r0
 8004b44:	2800      	cmp	r0, #0
 8004b46:	f43f ae77 	beq.w	8004838 <f_mkfs+0x288>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	e564      	b.n	8004618 <f_mkfs+0x68>
 8004b4e:	bf00      	nop
 8004b50:	00fffff8 	.word	0x00fffff8
 8004b54:	08006cef 	.word	0x08006cef
 8004b58:	08006cfb 	.word	0x08006cfb

08004b5c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b9c <FATFS_LinkDriverEx+0x40>)
{
 8004b5e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8004b60:	7b9c      	ldrb	r4, [r3, #14]
 8004b62:	2c01      	cmp	r4, #1
 8004b64:	d817      	bhi.n	8004b96 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004b66:	7b9d      	ldrb	r5, [r3, #14]
 8004b68:	2400      	movs	r4, #0
 8004b6a:	b2ed      	uxtb	r5, r5
 8004b6c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004b6e:	7b9d      	ldrb	r5, [r3, #14]
 8004b70:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004b74:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004b76:	7b98      	ldrb	r0, [r3, #14]
 8004b78:	4418      	add	r0, r3
 8004b7a:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8004b7c:	7b9a      	ldrb	r2, [r3, #14]
 8004b7e:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8004b80:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 8004b82:	b2c0      	uxtb	r0, r0
 8004b84:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
 8004b86:	233a      	movs	r3, #58	@ 0x3a
    path[2] = '/';
    path[3] = 0;
 8004b88:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8004b8a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8004b8c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004b8e:	232f      	movs	r3, #47	@ 0x2f
    path[3] = 0;
 8004b90:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8004b92:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8004b94:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004b96:	2001      	movs	r0, #1
 8004b98:	e7fc      	b.n	8004b94 <FATFS_LinkDriverEx+0x38>
 8004b9a:	bf00      	nop
 8004b9c:	20000b1c 	.word	0x20000b1c

08004ba0 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f7ff bfdb 	b.w	8004b5c <FATFS_LinkDriverEx>
	...

08004ba8 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8004ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd4 <FATFS_UnLinkDriverEx+0x2c>)
 8004baa:	7b93      	ldrb	r3, [r2, #14]
 8004bac:	b17b      	cbz	r3, 8004bce <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8004bae:	7803      	ldrb	r3, [r0, #0]
 8004bb0:	3b30      	subs	r3, #48	@ 0x30
    if(disk.drv[DiskNum] != 0)
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004bb8:	6848      	ldr	r0, [r1, #4]
 8004bba:	b140      	cbz	r0, 8004bce <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
 8004bbc:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8004bbe:	4413      	add	r3, r2
 8004bc0:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 8004bc2:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 8004bc4:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	7393      	strb	r3, [r2, #14]
      ret = 0;
 8004bcc:	4770      	bx	lr
  uint8_t ret = 1;
 8004bce:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000b1c 	.word	0x20000b1c

08004bd8 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f7ff bfe5 	b.w	8004ba8 <FATFS_UnLinkDriverEx>
	...

08004be0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004be2:	4608      	mov	r0, r1
 8004be4:	4611      	mov	r1, r2
  uint32_t timer;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7fb fe88 	bl	80008fc <BSP_SD_ReadBlocks_DMA>
 8004bec:	b110      	cbz	r0, 8004bf4 <SD_read+0x14>
  DRESULT res = RES_ERROR;
 8004bee:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 8004bf0:	b004      	add	sp, #16
 8004bf2:	bd10      	pop	{r4, pc}
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <SD_read+0x4c>)
 8004bf6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004bfa:	a801      	add	r0, sp, #4
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	f000 f9ff 	bl	8005000 <osMessageGet>
    if (event.status == osEventMessage)
 8004c02:	9b01      	ldr	r3, [sp, #4]
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d1f2      	bne.n	8004bee <SD_read+0xe>
      if (event.value.v == READ_CPLT_MSG)
 8004c08:	9b02      	ldr	r3, [sp, #8]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d1ef      	bne.n	8004bee <SD_read+0xe>
        timer = osKernelSysTick() + SD_TIMEOUT;
 8004c0e:	f000 f93d 	bl	8004e8c <osKernelSysTick>
 8004c12:	f500 44ea 	add.w	r4, r0, #29952	@ 0x7500
 8004c16:	3430      	adds	r4, #48	@ 0x30
        while(timer > osKernelSysTick())
 8004c18:	f000 f938 	bl	8004e8c <osKernelSysTick>
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d2e6      	bcs.n	8004bee <SD_read+0xe>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004c20:	f7fb ff92 	bl	8000b48 <BSP_SD_GetCardState>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d1f7      	bne.n	8004c18 <SD_read+0x38>
 8004c28:	e7e2      	b.n	8004bf0 <SD_read+0x10>
 8004c2a:	bf00      	nop
 8004c2c:	20000b2c 	.word	0x20000b2c

08004c30 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c32:	4608      	mov	r0, r1
 8004c34:	4611      	mov	r1, r2
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif


  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7fb fe6e 	bl	8000918 <BSP_SD_WriteBlocks_DMA>
 8004c3c:	b110      	cbz	r0, 8004c44 <SD_write+0x14>
  DRESULT res = RES_ERROR;
 8004c3e:	2001      	movs	r0, #1
      }
    }
  }

  return res;
}
 8004c40:	b004      	add	sp, #16
 8004c42:	bd10      	pop	{r4, pc}
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8004c44:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <SD_write+0x4c>)
 8004c46:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004c4a:	a801      	add	r0, sp, #4
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	f000 f9d7 	bl	8005000 <osMessageGet>
    if (event.status == osEventMessage)
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d1f2      	bne.n	8004c3e <SD_write+0xe>
      if (event.value.v == WRITE_CPLT_MSG)
 8004c58:	9b02      	ldr	r3, [sp, #8]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d1ef      	bne.n	8004c3e <SD_write+0xe>
        timer = osKernelSysTick() + SD_TIMEOUT;
 8004c5e:	f000 f915 	bl	8004e8c <osKernelSysTick>
 8004c62:	f500 44ea 	add.w	r4, r0, #29952	@ 0x7500
 8004c66:	3430      	adds	r4, #48	@ 0x30
        while(timer > osKernelSysTick())
 8004c68:	f000 f910 	bl	8004e8c <osKernelSysTick>
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d2e6      	bcs.n	8004c3e <SD_write+0xe>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004c70:	f7fb ff6a 	bl	8000b48 <BSP_SD_GetCardState>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1f7      	bne.n	8004c68 <SD_write+0x38>
 8004c78:	e7e2      	b.n	8004c40 <SD_write+0x10>
 8004c7a:	bf00      	nop
 8004c7c:	20000b2c 	.word	0x20000b2c

08004c80 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c80:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <SD_ioctl+0x4c>)
{
 8004c82:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c84:	781c      	ldrb	r4, [r3, #0]
{
 8004c86:	b089      	sub	sp, #36	@ 0x24
 8004c88:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c8a:	f014 0401 	ands.w	r4, r4, #1
 8004c8e:	d119      	bne.n	8004cc4 <SD_ioctl+0x44>

  switch (cmd)
 8004c90:	2903      	cmp	r1, #3
 8004c92:	d819      	bhi.n	8004cc8 <SD_ioctl+0x48>
 8004c94:	e8df f001 	tbb	[pc, r1]
 8004c98:	1008020d 	.word	0x1008020d
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004c9c:	4668      	mov	r0, sp
 8004c9e:	f7fb ff5d 	bl	8000b5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004ca2:	9b06      	ldr	r3, [sp, #24]
    break;

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004ca4:	602b      	str	r3, [r5, #0]
	res = RES_OK;
    break;
 8004ca6:	e004      	b.n	8004cb2 <SD_ioctl+0x32>
    BSP_SD_GetCardInfo(&CardInfo);
 8004ca8:	4668      	mov	r0, sp
 8004caa:	f7fb ff57 	bl	8000b5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004cae:	9b07      	ldr	r3, [sp, #28]
 8004cb0:	802b      	strh	r3, [r5, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	b009      	add	sp, #36	@ 0x24
 8004cb6:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8004cb8:	4668      	mov	r0, sp
 8004cba:	f7fb ff4f 	bl	8000b5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004cbe:	9b07      	ldr	r3, [sp, #28]
 8004cc0:	0a5b      	lsrs	r3, r3, #9
 8004cc2:	e7ef      	b.n	8004ca4 <SD_ioctl+0x24>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004cc4:	2403      	movs	r4, #3
 8004cc6:	e7f4      	b.n	8004cb2 <SD_ioctl+0x32>
    res = RES_PARERR;
 8004cc8:	2404      	movs	r4, #4
 8004cca:	e7f2      	b.n	8004cb2 <SD_ioctl+0x32>
 8004ccc:	2000000c 	.word	0x2000000c

08004cd0 <SD_status>:
{
 8004cd0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4c05      	ldr	r4, [pc, #20]	@ (8004cec <SD_status+0x1c>)
 8004cd6:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8004cd8:	f7fb ff36 	bl	8000b48 <BSP_SD_GetCardState>
 8004cdc:	b918      	cbnz	r0, 8004ce6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8004cde:	7823      	ldrb	r3, [r4, #0]
 8004ce0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004ce4:	7023      	strb	r3, [r4, #0]
  return Stat;
 8004ce6:	7820      	ldrb	r0, [r4, #0]
}
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	bf00      	nop
 8004cec:	2000000c 	.word	0x2000000c

08004cf0 <SD_initialize>:
{
 8004cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Stat = STA_NOINIT;
 8004cf2:	4c13      	ldr	r4, [pc, #76]	@ (8004d40 <SD_initialize+0x50>)
 8004cf4:	2501      	movs	r5, #1
 8004cf6:	7025      	strb	r5, [r4, #0]
  if(osKernelRunning())
 8004cf8:	f000 f8c1 	bl	8004e7e <osKernelRunning>
 8004cfc:	b1e0      	cbz	r0, 8004d38 <SD_initialize+0x48>
    if(BSP_SD_Init() == MSD_OK)
 8004cfe:	f7fb fef7 	bl	8000af0 <BSP_SD_Init>
 8004d02:	b950      	cbnz	r0, 8004d1a <SD_initialize+0x2a>
  Stat = STA_NOINIT;
 8004d04:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8004d06:	f7fb ff1f 	bl	8000b48 <BSP_SD_GetCardState>
 8004d0a:	b918      	cbnz	r0, 8004d14 <SD_initialize+0x24>
    Stat &= ~STA_NOINIT;
 8004d0c:	7823      	ldrb	r3, [r4, #0]
 8004d0e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004d12:	7023      	strb	r3, [r4, #0]
  return Stat;
 8004d14:	7823      	ldrb	r3, [r4, #0]
 8004d16:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 8004d18:	7023      	strb	r3, [r4, #0]
    if (Stat != STA_NOINIT)
 8004d1a:	7823      	ldrb	r3, [r4, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d00b      	beq.n	8004d38 <SD_initialize+0x48>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8004d20:	4a08      	ldr	r2, [pc, #32]	@ (8004d44 <SD_initialize+0x54>)
 8004d22:	466b      	mov	r3, sp
 8004d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d28:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f000 f938 	bl	8004fa4 <osMessageCreate>
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <SD_initialize+0x58>)
 8004d36:	6018      	str	r0, [r3, #0]
  return Stat;
 8004d38:	7820      	ldrb	r0, [r4, #0]
}
 8004d3a:	b003      	add	sp, #12
 8004d3c:	bd30      	pop	{r4, r5, pc}
 8004d3e:	bf00      	nop
 8004d40:	2000000c 	.word	0x2000000c
 8004d44:	080068e0 	.word	0x080068e0
 8004d48:	20000b2c 	.word	0x20000b2c

08004d4c <BSP_SD_WriteCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8004d4c:	4b03      	ldr	r3, [pc, #12]	@ (8004d5c <BSP_SD_WriteCpltCallback+0x10>)
 8004d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d52:	2102      	movs	r1, #2
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f000 b92a 	b.w	8004fae <osMessagePut>
 8004d5a:	bf00      	nop
 8004d5c:	20000b2c 	.word	0x20000b2c

08004d60 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8004d60:	4b03      	ldr	r3, [pc, #12]	@ (8004d70 <BSP_SD_ReadCpltCallback+0x10>)
 8004d62:	f04f 32ff 	mov.w	r2, #4294967295
 8004d66:	2101      	movs	r1, #1
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f000 b920 	b.w	8004fae <osMessagePut>
 8004d6e:	bf00      	nop
 8004d70:	20000b2c 	.word	0x20000b2c

08004d74 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8004d74:	b513      	push	{r0, r1, r4, lr}
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8004d76:	2300      	movs	r3, #0
{
 8004d78:	460c      	mov	r4, r1
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004d7a:	a801      	add	r0, sp, #4
 8004d7c:	2101      	movs	r1, #1
    osSemaphoreDef(SEM);
 8004d7e:	9301      	str	r3, [sp, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004d80:	f000 f8d1 	bl	8004f26 <osSemaphoreCreate>
 8004d84:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 8004d86:	3800      	subs	r0, #0
 8004d88:	bf18      	it	ne
 8004d8a:	2001      	movne	r0, #1
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd10      	pop	{r4, pc}

08004d90 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8004d90:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8004d92:	f000 f905 	bl	8004fa0 <osSemaphoreDelete>
#endif
    return 1;
}
 8004d96:	2001      	movs	r0, #1
 8004d98:	bd08      	pop	{r3, pc}

08004d9a <ff_req_grant>:
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8004d9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
{
 8004d9e:	b508      	push	{r3, lr}
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8004da0:	f000 f8d6 	bl	8004f50 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 8004da4:	fab0 f080 	clz	r0, r0
 8004da8:	0940      	lsrs	r0, r0, #5
 8004daa:	bd08      	pop	{r3, pc}

08004dac <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8004dac:	f000 b8f6 	b.w	8004f9c <osSemaphoreRelease>

08004db0 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8004db0:	f001 ba96 	b.w	80062e0 <pvPortMalloc>

08004db4 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8004db4:	f001 bb1a 	b.w	80063ec <vPortFree>

08004db8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004db8:	287f      	cmp	r0, #127	@ 0x7f
 8004dba:	d915      	bls.n	8004de8 <ff_convert+0x30>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8004dbc:	b131      	cbz	r1, 8004dcc <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004dbe:	28ff      	cmp	r0, #255	@ 0xff
 8004dc0:	d811      	bhi.n	8004de6 <ff_convert+0x2e>
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <ff_convert+0x34>)
 8004dc4:	3880      	subs	r0, #128	@ 0x80
 8004dc6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004dca:	4770      	bx	lr
 8004dcc:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <ff_convert+0x34>)

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 8004dce:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004dd2:	4282      	cmp	r2, r0
 8004dd4:	d005      	beq.n	8004de2 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8004dd6:	3101      	adds	r1, #1
 8004dd8:	2980      	cmp	r1, #128	@ 0x80
 8004dda:	d1f8      	bne.n	8004dce <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8004ddc:	3180      	adds	r1, #128	@ 0x80
 8004dde:	b2c8      	uxtb	r0, r1
 8004de0:	4770      	bx	lr
 8004de2:	b289      	uxth	r1, r1
 8004de4:	e7fa      	b.n	8004ddc <ff_convert+0x24>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004de6:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	080068fc 	.word	0x080068fc

08004df0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8004df0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e70 <ff_wtoupper+0x80>)
 8004df2:	f102 03bc 	add.w	r3, r2, #188	@ 0xbc
 8004df6:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8004dfa:	bf28      	it	cs
 8004dfc:	4613      	movcs	r3, r2
{
 8004dfe:	b570      	push	{r4, r5, r6, lr}
 8004e00:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8004e02:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 8004e06:	460a      	mov	r2, r1
 8004e08:	b1ab      	cbz	r3, 8004e36 <ff_wtoupper+0x46>
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	d313      	bcc.n	8004e36 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004e0e:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8004e12:	0a25      	lsrs	r5, r4, #8
 8004e14:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 8004e16:	fa53 f484 	uxtab	r4, r3, r4
 8004e1a:	42a0      	cmp	r0, r4
 8004e1c:	da21      	bge.n	8004e62 <ff_wtoupper+0x72>
			switch (cmd) {
 8004e1e:	2d08      	cmp	r5, #8
 8004e20:	d809      	bhi.n	8004e36 <ff_wtoupper+0x46>
 8004e22:	e8df f005 	tbb	[pc, r5]
 8004e26:	0905      	.short	0x0905
 8004e28:	1513110f 	.word	0x1513110f
 8004e2c:	1917      	.short	0x1917
 8004e2e:	1b          	.byte	0x1b
 8004e2f:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8004e38:	1ac3      	subs	r3, r0, r3
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	1ac0      	subs	r0, r0, r3
			case 7: chr -= 80; break;				/* Shift -80 */
 8004e40:	b280      	uxth	r0, r0
 8004e42:	e7f8      	b.n	8004e36 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 8004e44:	3810      	subs	r0, #16
 8004e46:	e7fb      	b.n	8004e40 <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8004e48:	3820      	subs	r0, #32
 8004e4a:	e7f9      	b.n	8004e40 <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8004e4c:	3830      	subs	r0, #48	@ 0x30
 8004e4e:	e7f7      	b.n	8004e40 <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8004e50:	381a      	subs	r0, #26
 8004e52:	e7f5      	b.n	8004e40 <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
 8004e54:	3008      	adds	r0, #8
 8004e56:	e7f3      	b.n	8004e40 <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
 8004e58:	3850      	subs	r0, #80	@ 0x50
 8004e5a:	e7f1      	b.n	8004e40 <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8004e5c:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 8004e60:	e7ee      	b.n	8004e40 <ff_wtoupper+0x50>
		if (!cmd) p += nc;
 8004e62:	3104      	adds	r1, #4
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	d1cc      	bne.n	8004e02 <ff_wtoupper+0x12>
 8004e68:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8004e6c:	e7c8      	b.n	8004e00 <ff_wtoupper+0x10>
 8004e6e:	bf00      	nop
 8004e70:	080069fc 	.word	0x080069fc

08004e74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e74:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004e76:	f000 feeb 	bl	8005c50 <vTaskStartScheduler>
  
  return osOK;
}
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	bd08      	pop	{r3, pc}

08004e7e <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8004e7e:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8004e80:	f001 f8f4 	bl	800606c <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 8004e84:	3801      	subs	r0, #1
 8004e86:	bf18      	it	ne
 8004e88:	2001      	movne	r0, #1
 8004e8a:	bd08      	pop	{r3, pc}

08004e8c <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8c:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8004e90:	b10b      	cbz	r3, 8004e96 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8004e92:	f000 bf27 	b.w	8005ce4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8004e96:	f000 bf1f 	b.w	8005cd8 <xTaskGetTickCount>

08004e9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e9a:	b530      	push	{r4, r5, lr}
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ea2:	8a22      	ldrh	r2, [r4, #16]
 8004ea4:	ad03      	add	r5, sp, #12
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ea6:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8004eaa:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8004eac:	bf14      	ite	ne
 8004eae:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004eb0:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eb2:	e9d0 1000 	ldrd	r1, r0, [r0]
 8004eb6:	e9cd 4500 	strd	r4, r5, [sp]
 8004eba:	f000 fe01 	bl	8005ac0 <xTaskCreate>
 8004ebe:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ec0:	bf0c      	ite	eq
 8004ec2:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8004ec4:	2000      	movne	r0, #0
}
 8004ec6:	b005      	add	sp, #20
 8004ec8:	bd30      	pop	{r4, r5, pc}

08004eca <osMutexRelease>:
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8004eca:	2300      	movs	r3, #0
{
 8004ecc:	b507      	push	{r0, r1, r2, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8004ed4:	b1b3      	cbz	r3, 8004f04 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004ed6:	a901      	add	r1, sp, #4
 8004ed8:	f000 fb43 	bl	8005562 <xQueueGiveFromISR>
 8004edc:	2801      	cmp	r0, #1
 8004ede:	d003      	beq.n	8004ee8 <osMutexRelease+0x1e>
      return osErrorOS;
 8004ee0:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8004ee2:	b003      	add	sp, #12
 8004ee4:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	b14b      	cbz	r3, 8004f00 <osMutexRelease+0x36>
 8004eec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8004f00:	2000      	movs	r0, #0
 8004f02:	e7ee      	b.n	8004ee2 <osMutexRelease+0x18>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004f04:	461a      	mov	r2, r3
 8004f06:	4619      	mov	r1, r3
 8004f08:	f000 fa0d 	bl	8005326 <xQueueGenericSend>
 8004f0c:	2801      	cmp	r0, #1
 8004f0e:	d1e7      	bne.n	8004ee0 <osMutexRelease+0x16>
 8004f10:	e7f6      	b.n	8004f00 <osMutexRelease+0x36>

08004f12 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8004f12:	b510      	push	{r4, lr}
 8004f14:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8004f18:	b91c      	cbnz	r4, 8004f22 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8004f1a:	f000 fd4b 	bl	80059b4 <vQueueDelete>

  return osOK;
}
 8004f1e:	4620      	mov	r0, r4
 8004f20:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8004f22:	2482      	movs	r4, #130	@ 0x82
 8004f24:	e7fb      	b.n	8004f1e <osMutexDelete+0xc>

08004f26 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8004f26:	2901      	cmp	r1, #1
{ 
 8004f28:	4608      	mov	r0, r1
 8004f2a:	b510      	push	{r4, lr}
  if (count == 1) {
 8004f2c:	d10c      	bne.n	8004f48 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8004f2e:	2203      	movs	r2, #3
 8004f30:	2100      	movs	r1, #0
 8004f32:	f000 f9b3 	bl	800529c <xQueueGenericCreate>
 8004f36:	4604      	mov	r4, r0
 8004f38:	b120      	cbz	r0, 8004f44 <osSemaphoreCreate+0x1e>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f000 f9f1 	bl	8005326 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8004f44:	4620      	mov	r0, r4
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8004f4c:	f000 b9c9 	b.w	80052e2 <xQueueCreateCountingSemaphore>

08004f50 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f50:	2300      	movs	r3, #0
{
 8004f52:	b507      	push	{r0, r1, r2, lr}
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f54:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8004f56:	b1f8      	cbz	r0, 8004f98 <osSemaphoreWait+0x48>
 8004f58:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004f5c:	b1ba      	cbz	r2, 8004f8e <osSemaphoreWait+0x3e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f5e:	aa01      	add	r2, sp, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	f000 fcc0 	bl	80058e6 <xQueueReceiveFromISR>
 8004f66:	2801      	cmp	r0, #1
 8004f68:	d003      	beq.n	8004f72 <osSemaphoreWait+0x22>
      return osErrorOS;
 8004f6a:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8004f6c:	b003      	add	sp, #12
 8004f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	portEND_SWITCHING_ISR(taskWoken);
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	b14b      	cbz	r3, 8004f8a <osSemaphoreWait+0x3a>
 8004f76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
  return osOK;
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e7ee      	b.n	8004f6c <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004f8e:	f000 fbe5 	bl	800575c <xQueueSemaphoreTake>
 8004f92:	2801      	cmp	r0, #1
 8004f94:	d0f9      	beq.n	8004f8a <osSemaphoreWait+0x3a>
 8004f96:	e7e8      	b.n	8004f6a <osSemaphoreWait+0x1a>
    return osErrorParameter;
 8004f98:	2080      	movs	r0, #128	@ 0x80
 8004f9a:	e7e7      	b.n	8004f6c <osSemaphoreWait+0x1c>

08004f9c <osSemaphoreRelease>:
* @brief Release a Semaphore token
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
 8004f9c:	f7ff bf95 	b.w	8004eca <osMutexRelease>

08004fa0 <osSemaphoreDelete>:
* @brief Delete a Semaphore
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
 8004fa0:	f7ff bfb7 	b.w	8004f12 <osMutexDelete>

08004fa4 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004faa:	f000 b977 	b.w	800529c <xQueueGenericCreate>

08004fae <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fb0:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	9103      	str	r1, [sp, #12]
 8004fb6:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8004fba:	b1c3      	cbz	r3, 8004fee <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	aa03      	add	r2, sp, #12
 8004fc0:	a901      	add	r1, sp, #4
 8004fc2:	f000 fa6a 	bl	800549a <xQueueGenericSendFromISR>
 8004fc6:	2801      	cmp	r0, #1
 8004fc8:	d003      	beq.n	8004fd2 <osMessagePut+0x24>
      return osErrorOS;
 8004fca:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8004fcc:	b005      	add	sp, #20
 8004fce:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	b14b      	cbz	r3, 8004fea <osMessagePut+0x3c>
 8004fd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fde:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	f3bf 8f6f 	isb	sy
  return osOK;
 8004fea:	2000      	movs	r0, #0
 8004fec:	e7ee      	b.n	8004fcc <osMessagePut+0x1e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004fee:	2a01      	cmp	r2, #1
 8004ff0:	a901      	add	r1, sp, #4
 8004ff2:	bf38      	it	cc
 8004ff4:	2201      	movcc	r2, #1
 8004ff6:	f000 f996 	bl	8005326 <xQueueGenericSend>
 8004ffa:	2801      	cmp	r0, #1
 8004ffc:	d0f5      	beq.n	8004fea <osMessagePut+0x3c>
 8004ffe:	e7e4      	b.n	8004fca <osMessagePut+0x1c>

08005000 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005000:	b530      	push	{r4, r5, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8005002:	2300      	movs	r3, #0
{
 8005004:	b085      	sub	sp, #20
 8005006:	4605      	mov	r5, r0
 8005008:	4614      	mov	r4, r2
 800500a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800500c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800500e:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8005010:	b911      	cbnz	r1, 8005018 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8005012:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	e018      	b.n	800504a <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800501e:	b1e3      	cbz	r3, 800505a <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005020:	466a      	mov	r2, sp
 8005022:	a902      	add	r1, sp, #8
 8005024:	f000 fc5f 	bl	80058e6 <xQueueReceiveFromISR>
 8005028:	1e43      	subs	r3, r0, #1
 800502a:	4258      	negs	r0, r3
 800502c:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 800502e:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005030:	0100      	lsls	r0, r0, #4
 8005032:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8005034:	b14b      	cbz	r3, 800504a <osMessageGet+0x4a>
 8005036:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800503a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	f3bf 8f6f 	isb	sy
    return event;
 800504a:	ab04      	add	r3, sp, #16
 800504c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005050:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8005054:	4628      	mov	r0, r5
 8005056:	b005      	add	sp, #20
 8005058:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800505a:	a902      	add	r1, sp, #8
 800505c:	f000 fada 	bl	8005614 <xQueueReceive>
 8005060:	2801      	cmp	r0, #1
 8005062:	d101      	bne.n	8005068 <osMessageGet+0x68>
      event.status = osEventMessage;
 8005064:	2310      	movs	r3, #16
 8005066:	e7d5      	b.n	8005014 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005068:	3c00      	subs	r4, #0
 800506a:	bf18      	it	ne
 800506c:	2401      	movne	r4, #1
 800506e:	01a4      	lsls	r4, r4, #6
 8005070:	9401      	str	r4, [sp, #4]
  return event;
 8005072:	e7ea      	b.n	800504a <osMessageGet+0x4a>

08005074 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005074:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005076:	f000 fff9 	bl	800606c <xTaskGetSchedulerState>
 800507a:	2801      	cmp	r0, #1
 800507c:	d003      	beq.n	8005086 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800507e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005082:	f001 bac7 	b.w	8006614 <xPortSysTickHandler>
}
 8005086:	bd08      	pop	{r3, pc}

08005088 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005088:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005090:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005092:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005094:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800509c:	4770      	bx	lr

0800509e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050a2:	4770      	bx	lr

080050a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80050a4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050a6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80050a8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ac:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050ae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80050b0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80050b2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80050b4:	3301      	adds	r3, #1
 80050b6:	6003      	str	r3, [r0, #0]
}
 80050b8:	4770      	bx	lr

080050ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ba:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050bc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050be:	1c63      	adds	r3, r4, #1
 80050c0:	d10a      	bne.n	80050d8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050c2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050c8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050ca:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80050cc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80050ce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80050d0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80050d2:	3301      	adds	r3, #1
 80050d4:	6003      	str	r3, [r0, #0]
}
 80050d6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050d8:	f100 0208 	add.w	r2, r0, #8
 80050dc:	4613      	mov	r3, r2
 80050de:	6852      	ldr	r2, [r2, #4]
 80050e0:	6815      	ldr	r5, [r2, #0]
 80050e2:	42a5      	cmp	r5, r4
 80050e4:	d9fa      	bls.n	80050dc <vListInsert+0x22>
 80050e6:	e7ed      	b.n	80050c4 <vListInsert+0xa>

080050e8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050e8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ea:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80050ee:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050f0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050f6:	bf08      	it	eq
 80050f8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050fa:	2200      	movs	r2, #0
 80050fc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	3a01      	subs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005104:	6818      	ldr	r0, [r3, #0]
}
 8005106:	4770      	bx	lr

08005108 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005108:	b510      	push	{r4, lr}
 800510a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800510c:	f001 fa12 	bl	8006534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005110:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005112:	f001 fa33 	bl	800657c <vPortExitCritical>

	return xReturn;
}
 8005116:	fab4 f084 	clz	r0, r4
 800511a:	0940      	lsrs	r0, r0, #5
 800511c:	bd10      	pop	{r4, pc}

0800511e <prvCopyDataToQueue>:
{
 800511e:	b570      	push	{r4, r5, r6, lr}
 8005120:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005122:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8005124:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005126:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005128:	b942      	cbnz	r2, 800513c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800512a:	6806      	ldr	r6, [r0, #0]
 800512c:	b99e      	cbnz	r6, 8005156 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800512e:	6880      	ldr	r0, [r0, #8]
 8005130:	f000 fff8 	bl	8006124 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005134:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005136:	3501      	adds	r5, #1
 8005138:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800513a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800513c:	b96e      	cbnz	r6, 800515a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800513e:	6840      	ldr	r0, [r0, #4]
 8005140:	f001 fb44 	bl	80067cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005148:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800514a:	68a2      	ldr	r2, [r4, #8]
 800514c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800514e:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005150:	bf24      	itt	cs
 8005152:	6823      	ldrcs	r3, [r4, #0]
 8005154:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005156:	2000      	movs	r0, #0
 8005158:	e7ed      	b.n	8005136 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800515a:	68c0      	ldr	r0, [r0, #12]
 800515c:	f001 fb36 	bl	80067cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005160:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	4251      	negs	r1, r2
 8005166:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800516c:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800516e:	bf3e      	ittt	cc
 8005170:	68a3      	ldrcc	r3, [r4, #8]
 8005172:	185b      	addcc	r3, r3, r1
 8005174:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005176:	2e02      	cmp	r6, #2
 8005178:	d1ed      	bne.n	8005156 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800517a:	b10d      	cbz	r5, 8005180 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800517c:	3d01      	subs	r5, #1
 800517e:	e7ea      	b.n	8005156 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005180:	4628      	mov	r0, r5
 8005182:	e7d8      	b.n	8005136 <prvCopyDataToQueue+0x18>

08005184 <prvCopyDataFromQueue>:
{
 8005184:	4603      	mov	r3, r0
 8005186:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800518a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800518c:	b162      	cbz	r2, 80051a8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800518e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005190:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005192:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005194:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005196:	60dc      	str	r4, [r3, #12]
}
 8005198:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800519c:	bf24      	itt	cs
 800519e:	6819      	ldrcs	r1, [r3, #0]
 80051a0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a2:	68d9      	ldr	r1, [r3, #12]
 80051a4:	f001 bb12 	b.w	80067cc <memcpy>
}
 80051a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <prvUnlockQueue>:
{
 80051ae:	b570      	push	{r4, r5, r6, lr}
 80051b0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80051b2:	f001 f9bf 	bl	8006534 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80051b6:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ba:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80051be:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c0:	2d00      	cmp	r5, #0
 80051c2:	dd01      	ble.n	80051c8 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80051c6:	b9b3      	cbnz	r3, 80051f6 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 80051c8:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ca:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80051ce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80051d2:	f001 f9d3 	bl	800657c <vPortExitCritical>
	taskENTER_CRITICAL();
 80051d6:	f001 f9ad 	bl	8006534 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80051da:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 80051de:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	dd01      	ble.n	80051e8 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	b97b      	cbnz	r3, 8005208 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 80051e8:	23ff      	movs	r3, #255	@ 0xff
 80051ea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80051ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80051f2:	f001 b9c3 	b.w	800657c <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051f6:	4630      	mov	r0, r6
 80051f8:	f000 feac 	bl	8005f54 <xTaskRemoveFromEventList>
 80051fc:	b108      	cbz	r0, 8005202 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 80051fe:	f000 ff2d 	bl	800605c <vTaskMissedYield>
			--cTxLock;
 8005202:	3d01      	subs	r5, #1
 8005204:	b26d      	sxtb	r5, r5
 8005206:	e7db      	b.n	80051c0 <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005208:	4630      	mov	r0, r6
 800520a:	f000 fea3 	bl	8005f54 <xTaskRemoveFromEventList>
 800520e:	b108      	cbz	r0, 8005214 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8005210:	f000 ff24 	bl	800605c <vTaskMissedYield>
				--cRxLock;
 8005214:	3d01      	subs	r5, #1
 8005216:	b26d      	sxtb	r5, r5
 8005218:	e7e2      	b.n	80051e0 <prvUnlockQueue+0x32>

0800521a <xQueueGenericReset>:
{
 800521a:	b538      	push	{r3, r4, r5, lr}
 800521c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800521e:	4604      	mov	r4, r0
 8005220:	b950      	cbnz	r0, 8005238 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	b672      	cpsid	i
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	b662      	cpsie	i
 8005236:	e7fe      	b.n	8005236 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8005238:	f001 f97c 	bl	8006534 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005242:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005244:	434b      	muls	r3, r1
 8005246:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005248:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800524a:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800524c:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800524e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005250:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005252:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005254:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005256:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800525a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800525e:	b9a5      	cbnz	r5, 800528a <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	b173      	cbz	r3, 8005282 <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005264:	f104 0010 	add.w	r0, r4, #16
 8005268:	f000 fe74 	bl	8005f54 <xTaskRemoveFromEventList>
 800526c:	b148      	cbz	r0, 8005282 <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800526e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005276:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005282:	f001 f97b 	bl	800657c <vPortExitCritical>
}
 8005286:	2001      	movs	r0, #1
 8005288:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800528a:	f104 0010 	add.w	r0, r4, #16
 800528e:	f7ff fefb 	bl	8005088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005292:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005296:	f7ff fef7 	bl	8005088 <vListInitialise>
 800529a:	e7f2      	b.n	8005282 <xQueueGenericReset+0x68>

0800529c <xQueueGenericCreate>:
	{
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052a0:	4606      	mov	r6, r0
 80052a2:	b950      	cbnz	r0, 80052ba <xQueueGenericCreate+0x1e>
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	b672      	cpsid	i
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	b662      	cpsie	i
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ba:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052bc:	3048      	adds	r0, #72	@ 0x48
 80052be:	f001 f80f 	bl	80062e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80052c2:	4604      	mov	r4, r0
 80052c4:	b148      	cbz	r0, 80052da <xQueueGenericCreate+0x3e>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80052c6:	b155      	cbz	r5, 80052de <xQueueGenericCreate+0x42>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c8:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052cc:	2101      	movs	r1, #1
 80052ce:	4620      	mov	r0, r4
 80052d0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80052d2:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052d6:	f7ff ffa0 	bl	800521a <xQueueGenericReset>
	}
 80052da:	4620      	mov	r0, r4
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052de:	4603      	mov	r3, r0
 80052e0:	e7f4      	b.n	80052cc <xQueueGenericCreate+0x30>

080052e2 <xQueueCreateCountingSemaphore>:
	{
 80052e2:	b510      	push	{r4, lr}
 80052e4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80052e6:	b950      	cbnz	r0, 80052fe <xQueueCreateCountingSemaphore+0x1c>
 80052e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ec:	b672      	cpsid	i
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	b662      	cpsie	i
 80052fc:	e7fe      	b.n	80052fc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052fe:	4288      	cmp	r0, r1
 8005300:	d20a      	bcs.n	8005318 <xQueueCreateCountingSemaphore+0x36>
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	b672      	cpsid	i
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	b662      	cpsie	i
 8005316:	e7fe      	b.n	8005316 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005318:	2202      	movs	r2, #2
 800531a:	2100      	movs	r1, #0
 800531c:	f7ff ffbe 	bl	800529c <xQueueGenericCreate>
		if( xHandle != NULL )
 8005320:	b100      	cbz	r0, 8005324 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005322:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8005324:	bd10      	pop	{r4, pc}

08005326 <xQueueGenericSend>:
{
 8005326:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800532a:	460f      	mov	r7, r1
 800532c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800532e:	4604      	mov	r4, r0
{
 8005330:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005332:	b950      	cbnz	r0, 800534a <xQueueGenericSend+0x24>
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	b672      	cpsid	i
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	b662      	cpsie	i
 8005348:	e7fe      	b.n	8005348 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800534a:	b961      	cbnz	r1, 8005366 <xQueueGenericSend+0x40>
 800534c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800534e:	b153      	cbz	r3, 8005366 <xQueueGenericSend+0x40>
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	b672      	cpsid	i
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	b662      	cpsie	i
 8005364:	e7fe      	b.n	8005364 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005366:	2e02      	cmp	r6, #2
 8005368:	d10d      	bne.n	8005386 <xQueueGenericSend+0x60>
 800536a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d00a      	beq.n	8005386 <xQueueGenericSend+0x60>
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	b672      	cpsid	i
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	b662      	cpsie	i
 8005384:	e7fe      	b.n	8005384 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005386:	f000 fe71 	bl	800606c <xTaskGetSchedulerState>
 800538a:	4605      	mov	r5, r0
 800538c:	b320      	cbz	r0, 80053d8 <xQueueGenericSend+0xb2>
 800538e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005390:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005394:	f001 f8ce 	bl	8006534 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005398:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800539a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800539c:	429a      	cmp	r2, r3
 800539e:	d229      	bcs.n	80053f4 <xQueueGenericSend+0xce>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a0:	4632      	mov	r2, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	4620      	mov	r0, r4
 80053a6:	f7ff feba 	bl	800511e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053ac:	b11b      	cbz	r3, 80053b6 <xQueueGenericSend+0x90>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80053b2:	f000 fdcf 	bl	8005f54 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80053b6:	b148      	cbz	r0, 80053cc <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 80053b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80053bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80053cc:	f001 f8d6 	bl	800657c <vPortExitCritical>
				return pdPASS;
 80053d0:	2001      	movs	r0, #1
}
 80053d2:	b004      	add	sp, #16
 80053d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053d8:	9b01      	ldr	r3, [sp, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0d8      	beq.n	8005390 <xQueueGenericSend+0x6a>
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	b672      	cpsid	i
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	b662      	cpsie	i
 80053f2:	e7fe      	b.n	80053f2 <xQueueGenericSend+0xcc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f4:	2e02      	cmp	r6, #2
 80053f6:	d0d3      	beq.n	80053a0 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	b91b      	cbnz	r3, 8005404 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 80053fc:	f001 f8be 	bl	800657c <vPortExitCritical>
					return errQUEUE_FULL;
 8005400:	2000      	movs	r0, #0
 8005402:	e7e6      	b.n	80053d2 <xQueueGenericSend+0xac>
				else if( xEntryTimeSet == pdFALSE )
 8005404:	b915      	cbnz	r5, 800540c <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005406:	a802      	add	r0, sp, #8
 8005408:	f000 fde0 	bl	8005fcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800540c:	f001 f8b6 	bl	800657c <vPortExitCritical>
		vTaskSuspendAll();
 8005410:	f000 fc58 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005414:	f001 f88e 	bl	8006534 <vPortEnterCritical>
 8005418:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800541c:	2bff      	cmp	r3, #255	@ 0xff
 800541e:	d101      	bne.n	8005424 <xQueueGenericSend+0xfe>
 8005420:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 8005424:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005428:	2bff      	cmp	r3, #255	@ 0xff
 800542a:	d101      	bne.n	8005430 <xQueueGenericSend+0x10a>
 800542c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 8005430:	f001 f8a4 	bl	800657c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005434:	a901      	add	r1, sp, #4
 8005436:	a802      	add	r0, sp, #8
 8005438:	f000 fdd2 	bl	8005fe0 <xTaskCheckForTimeOut>
 800543c:	bb38      	cbnz	r0, 800548e <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800543e:	f001 f879 	bl	8006534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005442:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005444:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005446:	429a      	cmp	r2, r3
 8005448:	d10e      	bne.n	8005468 <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800544a:	f001 f897 	bl	800657c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800544e:	9901      	ldr	r1, [sp, #4]
 8005450:	f104 0010 	add.w	r0, r4, #16
 8005454:	f000 fd62 	bl	8005f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff fea8 	bl	80051ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800545e:	f000 fcbd 	bl	8005ddc <xTaskResumeAll>
 8005462:	b148      	cbz	r0, 8005478 <xQueueGenericSend+0x152>
 8005464:	2501      	movs	r5, #1
 8005466:	e795      	b.n	8005394 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 8005468:	f001 f888 	bl	800657c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800546c:	4620      	mov	r0, r4
 800546e:	f7ff fe9e 	bl	80051ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005472:	f000 fcb3 	bl	8005ddc <xTaskResumeAll>
 8005476:	e7f5      	b.n	8005464 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 8005478:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800547c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005480:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	e7ea      	b.n	8005464 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 800548e:	4620      	mov	r0, r4
 8005490:	f7ff fe8d 	bl	80051ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005494:	f000 fca2 	bl	8005ddc <xTaskResumeAll>
			return errQUEUE_FULL;
 8005498:	e7b2      	b.n	8005400 <xQueueGenericSend+0xda>

0800549a <xQueueGenericSendFromISR>:
{
 800549a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800549e:	4689      	mov	r9, r1
 80054a0:	4617      	mov	r7, r2
 80054a2:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80054a4:	4604      	mov	r4, r0
 80054a6:	b950      	cbnz	r0, 80054be <xQueueGenericSendFromISR+0x24>
 80054a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ac:	b672      	cpsid	i
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	b662      	cpsie	i
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054be:	b961      	cbnz	r1, 80054da <xQueueGenericSendFromISR+0x40>
 80054c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80054c2:	b153      	cbz	r3, 80054da <xQueueGenericSendFromISR+0x40>
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	b672      	cpsid	i
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	b662      	cpsie	i
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054da:	2e02      	cmp	r6, #2
 80054dc:	d10d      	bne.n	80054fa <xQueueGenericSendFromISR+0x60>
 80054de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d00a      	beq.n	80054fa <xQueueGenericSendFromISR+0x60>
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	b672      	cpsid	i
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	b662      	cpsie	i
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054fa:	f001 f915 	bl	8006728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054fe:	f3ef 8811 	mrs	r8, BASEPRI
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	b672      	cpsid	i
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005516:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005518:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800551a:	429a      	cmp	r2, r3
 800551c:	d301      	bcc.n	8005522 <xQueueGenericSendFromISR+0x88>
 800551e:	2e02      	cmp	r6, #2
 8005520:	d11d      	bne.n	800555e <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005522:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005526:	4632      	mov	r2, r6
 8005528:	4649      	mov	r1, r9
 800552a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800552c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800552e:	f7ff fdf6 	bl	800511e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005532:	1c6b      	adds	r3, r5, #1
 8005534:	d10e      	bne.n	8005554 <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005536:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005538:	b13b      	cbz	r3, 800554a <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800553a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800553e:	f000 fd09 	bl	8005f54 <xTaskRemoveFromEventList>
 8005542:	b110      	cbz	r0, 800554a <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 8005544:	b10f      	cbz	r7, 800554a <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800554a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800554c:	f388 8811 	msr	BASEPRI, r8
}
 8005550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005554:	3501      	adds	r5, #1
 8005556:	b26d      	sxtb	r5, r5
 8005558:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800555c:	e7f5      	b.n	800554a <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 800555e:	2000      	movs	r0, #0
 8005560:	e7f4      	b.n	800554c <xQueueGenericSendFromISR+0xb2>

08005562 <xQueueGiveFromISR>:
{
 8005562:	b570      	push	{r4, r5, r6, lr}
 8005564:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005566:	4604      	mov	r4, r0
 8005568:	b950      	cbnz	r0, 8005580 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	e7fe      	b.n	800557e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005580:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005582:	b153      	cbz	r3, 800559a <xQueueGiveFromISR+0x38>
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	e7fe      	b.n	8005598 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800559a:	6803      	ldr	r3, [r0, #0]
 800559c:	b963      	cbnz	r3, 80055b8 <xQueueGiveFromISR+0x56>
 800559e:	6883      	ldr	r3, [r0, #8]
 80055a0:	b153      	cbz	r3, 80055b8 <xQueueGiveFromISR+0x56>
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	b672      	cpsid	i
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	b662      	cpsie	i
 80055b6:	e7fe      	b.n	80055b6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b8:	f001 f8b6 	bl	8006728 <vPortValidateInterruptPriority>
	__asm volatile
 80055bc:	f3ef 8611 	mrs	r6, BASEPRI
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80055d8:	4293      	cmp	r3, r2
 80055da:	d919      	bls.n	8005610 <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 80055dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055e0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80055e2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055e6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 80055e8:	d10d      	bne.n	8005606 <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055ec:	b13b      	cbz	r3, 80055fe <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80055f2:	f000 fcaf 	bl	8005f54 <xTaskRemoveFromEventList>
 80055f6:	b110      	cbz	r0, 80055fe <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 80055f8:	b10d      	cbz	r5, 80055fe <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 80055fe:	2001      	movs	r0, #1
	__asm volatile
 8005600:	f386 8811 	msr	BASEPRI, r6
}
 8005604:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005606:	3301      	adds	r3, #1
 8005608:	b25b      	sxtb	r3, r3
 800560a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800560e:	e7f6      	b.n	80055fe <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 8005610:	2000      	movs	r0, #0
 8005612:	e7f5      	b.n	8005600 <xQueueGiveFromISR+0x9e>

08005614 <xQueueReceive>:
{
 8005614:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005618:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800561a:	4604      	mov	r4, r0
{
 800561c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800561e:	b950      	cbnz	r0, 8005636 <xQueueReceive+0x22>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	b672      	cpsid	i
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	b662      	cpsie	i
 8005634:	e7fe      	b.n	8005634 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005636:	b961      	cbnz	r1, 8005652 <xQueueReceive+0x3e>
 8005638:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800563a:	b153      	cbz	r3, 8005652 <xQueueReceive+0x3e>
 800563c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	e7fe      	b.n	8005650 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005652:	f000 fd0b 	bl	800606c <xTaskGetSchedulerState>
 8005656:	4605      	mov	r5, r0
 8005658:	b318      	cbz	r0, 80056a2 <xQueueReceive+0x8e>
 800565a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800565c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005660:	f000 ff68 	bl	8006534 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005664:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005666:	b357      	cbz	r7, 80056be <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005668:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800566a:	4631      	mov	r1, r6
 800566c:	4620      	mov	r0, r4
 800566e:	f7ff fd89 	bl	8005184 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005672:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	b173      	cbz	r3, 8005696 <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005678:	f104 0010 	add.w	r0, r4, #16
 800567c:	f000 fc6a 	bl	8005f54 <xTaskRemoveFromEventList>
 8005680:	b148      	cbz	r0, 8005696 <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 8005682:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005696:	f000 ff71 	bl	800657c <vPortExitCritical>
				return pdPASS;
 800569a:	2001      	movs	r0, #1
}
 800569c:	b004      	add	sp, #16
 800569e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a2:	9b01      	ldr	r3, [sp, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0d9      	beq.n	800565c <xQueueReceive+0x48>
 80056a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ac:	b672      	cpsid	i
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	b662      	cpsie	i
 80056bc:	e7fe      	b.n	80056bc <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	b91b      	cbnz	r3, 80056ca <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 80056c2:	f000 ff5b 	bl	800657c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80056c6:	2000      	movs	r0, #0
 80056c8:	e7e8      	b.n	800569c <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 80056ca:	b915      	cbnz	r5, 80056d2 <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056cc:	a802      	add	r0, sp, #8
 80056ce:	f000 fc7d 	bl	8005fcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80056d2:	f000 ff53 	bl	800657c <vPortExitCritical>
		vTaskSuspendAll();
 80056d6:	f000 faf5 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056da:	f000 ff2b 	bl	8006534 <vPortEnterCritical>
 80056de:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80056e2:	2bff      	cmp	r3, #255	@ 0xff
 80056e4:	d101      	bne.n	80056ea <xQueueReceive+0xd6>
 80056e6:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 80056ea:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80056ee:	2bff      	cmp	r3, #255	@ 0xff
 80056f0:	d101      	bne.n	80056f6 <xQueueReceive+0xe2>
 80056f2:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 80056f6:	f000 ff41 	bl	800657c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056fa:	a901      	add	r1, sp, #4
 80056fc:	a802      	add	r0, sp, #8
 80056fe:	f000 fc6f 	bl	8005fe0 <xTaskCheckForTimeOut>
 8005702:	bb00      	cbnz	r0, 8005746 <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005704:	4620      	mov	r0, r4
 8005706:	f7ff fcff 	bl	8005108 <prvIsQueueEmpty>
 800570a:	b1b0      	cbz	r0, 800573a <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800570c:	9901      	ldr	r1, [sp, #4]
 800570e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005712:	f000 fc03 	bl	8005f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005716:	4620      	mov	r0, r4
 8005718:	f7ff fd49 	bl	80051ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800571c:	f000 fb5e 	bl	8005ddc <xTaskResumeAll>
 8005720:	b948      	cbnz	r0, 8005736 <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 8005722:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	2501      	movs	r5, #1
 8005738:	e792      	b.n	8005660 <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fd37 	bl	80051ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005740:	f000 fb4c 	bl	8005ddc <xTaskResumeAll>
 8005744:	e7f7      	b.n	8005736 <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 8005746:	4620      	mov	r0, r4
 8005748:	f7ff fd31 	bl	80051ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800574c:	f000 fb46 	bl	8005ddc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff fcd9 	bl	8005108 <prvIsQueueEmpty>
 8005756:	2800      	cmp	r0, #0
 8005758:	d0ed      	beq.n	8005736 <xQueueReceive+0x122>
 800575a:	e7b4      	b.n	80056c6 <xQueueReceive+0xb2>

0800575c <xQueueSemaphoreTake>:
{
 800575c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8005760:	4604      	mov	r4, r0
{
 8005762:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005764:	b950      	cbnz	r0, 800577c <xQueueSemaphoreTake+0x20>
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	b672      	cpsid	i
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	b662      	cpsie	i
 800577a:	e7fe      	b.n	800577a <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800577c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800577e:	b155      	cbz	r5, 8005796 <xQueueSemaphoreTake+0x3a>
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	b672      	cpsid	i
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	b662      	cpsie	i
 8005794:	e7fe      	b.n	8005794 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005796:	f000 fc69 	bl	800606c <xTaskGetSchedulerState>
 800579a:	4606      	mov	r6, r0
 800579c:	b320      	cbz	r0, 80057e8 <xQueueSemaphoreTake+0x8c>
 800579e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80057a0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80057a2:	f000 fec7 	bl	8006534 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80057a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80057a8:	b363      	cbz	r3, 8005804 <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80057aa:	3b01      	subs	r3, #1
 80057ac:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	b913      	cbnz	r3, 80057b8 <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80057b2:	f000 fd65 	bl	8006280 <pvTaskIncrementMutexHeldCount>
 80057b6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b8:	6923      	ldr	r3, [r4, #16]
 80057ba:	b173      	cbz	r3, 80057da <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057bc:	f104 0010 	add.w	r0, r4, #16
 80057c0:	f000 fbc8 	bl	8005f54 <xTaskRemoveFromEventList>
 80057c4:	b148      	cbz	r0, 80057da <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 80057c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80057ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80057da:	f000 fecf 	bl	800657c <vPortExitCritical>
				return pdPASS;
 80057de:	2001      	movs	r0, #1
}
 80057e0:	b005      	add	sp, #20
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	4635      	mov	r5, r6
 80057e6:	e7db      	b.n	80057a0 <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0fa      	beq.n	80057e4 <xQueueSemaphoreTake+0x88>
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	b672      	cpsid	i
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	b662      	cpsie	i
 8005802:	e7fe      	b.n	8005802 <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	b963      	cbnz	r3, 8005822 <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005808:	2d00      	cmp	r5, #0
 800580a:	d068      	beq.n	80058de <xQueueSemaphoreTake+0x182>
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	b672      	cpsid	i
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	b662      	cpsie	i
 8005820:	e7fe      	b.n	8005820 <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 8005822:	b916      	cbnz	r6, 800582a <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005824:	a802      	add	r0, sp, #8
 8005826:	f000 fbd1 	bl	8005fcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800582a:	f000 fea7 	bl	800657c <vPortExitCritical>
		vTaskSuspendAll();
 800582e:	f000 fa49 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005832:	f000 fe7f 	bl	8006534 <vPortEnterCritical>
 8005836:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800583a:	2bff      	cmp	r3, #255	@ 0xff
 800583c:	d101      	bne.n	8005842 <xQueueSemaphoreTake+0xe6>
 800583e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8005842:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005846:	2bff      	cmp	r3, #255	@ 0xff
 8005848:	d101      	bne.n	800584e <xQueueSemaphoreTake+0xf2>
 800584a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800584e:	f000 fe95 	bl	800657c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005852:	a901      	add	r1, sp, #4
 8005854:	a802      	add	r0, sp, #8
 8005856:	f000 fbc3 	bl	8005fe0 <xTaskCheckForTimeOut>
 800585a:	bb50      	cbnz	r0, 80058b2 <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800585c:	4620      	mov	r0, r4
 800585e:	f7ff fc53 	bl	8005108 <prvIsQueueEmpty>
 8005862:	b300      	cbz	r0, 80058a6 <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	b93b      	cbnz	r3, 8005878 <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 8005868:	f000 fe64 	bl	8006534 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800586c:	68a0      	ldr	r0, [r4, #8]
 800586e:	f000 fc0d 	bl	800608c <xTaskPriorityInherit>
 8005872:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005874:	f000 fe82 	bl	800657c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005878:	9901      	ldr	r1, [sp, #4]
 800587a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800587e:	f000 fb4d 	bl	8005f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff fc93 	bl	80051ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005888:	f000 faa8 	bl	8005ddc <xTaskResumeAll>
 800588c:	b948      	cbnz	r0, 80058a2 <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 800588e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005896:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	2601      	movs	r6, #1
 80058a4:	e77d      	b.n	80057a2 <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff fc81 	bl	80051ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ac:	f000 fa96 	bl	8005ddc <xTaskResumeAll>
 80058b0:	e7f7      	b.n	80058a2 <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7ff fc7b 	bl	80051ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058b8:	f000 fa90 	bl	8005ddc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff fc23 	bl	8005108 <prvIsQueueEmpty>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d0ed      	beq.n	80058a2 <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 80058c6:	b165      	cbz	r5, 80058e2 <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 80058c8:	f000 fe34 	bl	8006534 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80058cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80058ce:	b119      	cbz	r1, 80058d8 <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80058d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058d8:	68a0      	ldr	r0, [r4, #8]
 80058da:	f000 fc75 	bl	80061c8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80058de:	f000 fe4d 	bl	800657c <vPortExitCritical>
					return errQUEUE_EMPTY;
 80058e2:	2000      	movs	r0, #0
 80058e4:	e77c      	b.n	80057e0 <xQueueSemaphoreTake+0x84>

080058e6 <xQueueReceiveFromISR>:
{
 80058e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ea:	4689      	mov	r9, r1
 80058ec:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80058ee:	4604      	mov	r4, r0
 80058f0:	b950      	cbnz	r0, 8005908 <xQueueReceiveFromISR+0x22>
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	b672      	cpsid	i
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	b662      	cpsie	i
 8005906:	e7fe      	b.n	8005906 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005908:	b961      	cbnz	r1, 8005924 <xQueueReceiveFromISR+0x3e>
 800590a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800590c:	b153      	cbz	r3, 8005924 <xQueueReceiveFromISR+0x3e>
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	e7fe      	b.n	8005922 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005924:	f000 ff00 	bl	8006728 <vPortValidateInterruptPriority>
	__asm volatile
 8005928:	f3ef 8711 	mrs	r7, BASEPRI
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	b672      	cpsid	i
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005940:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005942:	b30d      	cbz	r5, 8005988 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005944:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005948:	4649      	mov	r1, r9
 800594a:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800594c:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800594e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005950:	f7ff fc18 	bl	8005184 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005954:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005956:	1c73      	adds	r3, r6, #1
 8005958:	d111      	bne.n	800597e <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	b153      	cbz	r3, 8005974 <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595e:	f104 0010 	add.w	r0, r4, #16
 8005962:	f000 faf7 	bl	8005f54 <xTaskRemoveFromEventList>
 8005966:	b128      	cbz	r0, 8005974 <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8005968:	f1b8 0f00 	cmp.w	r8, #0
 800596c:	d002      	beq.n	8005974 <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800596e:	2301      	movs	r3, #1
 8005970:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8005974:	2001      	movs	r0, #1
	__asm volatile
 8005976:	f387 8811 	msr	BASEPRI, r7
}
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800597e:	3601      	adds	r6, #1
 8005980:	b276      	sxtb	r6, r6
 8005982:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8005986:	e7f5      	b.n	8005974 <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 8005988:	4628      	mov	r0, r5
 800598a:	e7f4      	b.n	8005976 <xQueueReceiveFromISR+0x90>

0800598c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800598c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800598e:	4a08      	ldr	r2, [pc, #32]	@ (80059b0 <vQueueUnregisterQueue+0x24>)
	{
 8005990:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005992:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005996:	684c      	ldr	r4, [r1, #4]
 8005998:	4284      	cmp	r4, r0
 800599a:	d104      	bne.n	80059a6 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800599c:	2000      	movs	r0, #0
 800599e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80059a2:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80059a4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a6:	3301      	adds	r3, #1
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d1f2      	bne.n	8005992 <vQueueUnregisterQueue+0x6>
 80059ac:	e7fa      	b.n	80059a4 <vQueueUnregisterQueue+0x18>
 80059ae:	bf00      	nop
 80059b0:	20000b30 	.word	0x20000b30

080059b4 <vQueueDelete>:
{
 80059b4:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80059b6:	4604      	mov	r4, r0
 80059b8:	b950      	cbnz	r0, 80059d0 <vQueueDelete+0x1c>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	b672      	cpsid	i
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	b662      	cpsie	i
 80059ce:	e7fe      	b.n	80059ce <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 80059d0:	f7ff ffdc 	bl	800598c <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 80059d4:	4620      	mov	r0, r4
}
 80059d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 80059da:	f000 bd07 	b.w	80063ec <vPortFree>
	...

080059e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059e2:	4c18      	ldr	r4, [pc, #96]	@ (8005a44 <prvAddCurrentTaskToDelayedList+0x64>)
{
 80059e4:	4606      	mov	r6, r0
 80059e6:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80059e8:	6825      	ldr	r5, [r4, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ea:	6860      	ldr	r0, [r4, #4]
 80059ec:	3004      	adds	r0, #4
 80059ee:	f7ff fb7b 	bl	80050e8 <uxListRemove>
 80059f2:	b938      	cbnz	r0, 8005a04 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059f4:	6862      	ldr	r2, [r4, #4]
 80059f6:	68a3      	ldr	r3, [r4, #8]
 80059f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80059fa:	2201      	movs	r2, #1
 80059fc:	408a      	lsls	r2, r1
 80059fe:	ea23 0302 	bic.w	r3, r3, r2
 8005a02:	60a3      	str	r3, [r4, #8]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a04:	1c73      	adds	r3, r6, #1
 8005a06:	d107      	bne.n	8005a18 <prvAddCurrentTaskToDelayedList+0x38>
 8005a08:	b137      	cbz	r7, 8005a18 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	480e      	ldr	r0, [pc, #56]	@ (8005a48 <prvAddCurrentTaskToDelayedList+0x68>)
 8005a0e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a14:	f7ff bb46 	b.w	80050a4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a18:	19ad      	adds	r5, r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a1a:	6863      	ldr	r3, [r4, #4]
 8005a1c:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a1e:	d306      	bcc.n	8005a2e <prvAddCurrentTaskToDelayedList+0x4e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a20:	6a20      	ldr	r0, [r4, #32]
 8005a22:	6861      	ldr	r1, [r4, #4]
}
 8005a24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a28:	3104      	adds	r1, #4
 8005a2a:	f7ff bb46 	b.w	80050ba <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a2e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	3104      	adds	r1, #4
 8005a34:	f7ff fb41 	bl	80050ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005a3a:	42ab      	cmp	r3, r5
 8005a3c:	d900      	bls.n	8005a40 <prvAddCurrentTaskToDelayedList+0x60>
					xNextTaskUnblockTime = xTimeToWake;
 8005a3e:	62a5      	str	r5, [r4, #40]	@ 0x28
}
 8005a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000b70 	.word	0x20000b70
 8005a48:	20000b7c 	.word	0x20000b7c

08005a4c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4c:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <prvResetNextTaskUnblockTime+0x1c>)
 8005a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	b91a      	cbnz	r2, 8005a5c <prvResetNextTaskUnblockTime+0x10>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a5a:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a5e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a60:	68d2      	ldr	r2, [r2, #12]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	e7f8      	b.n	8005a58 <prvResetNextTaskUnblockTime+0xc>
 8005a66:	bf00      	nop
 8005a68:	20000b70 	.word	0x20000b70

08005a6c <prvIdleTask>:
{
 8005a6c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6e:	4c13      	ldr	r4, [pc, #76]	@ (8005abc <prvIdleTask+0x50>)
				taskYIELD();
 8005a70:	f04f 26e0 	mov.w	r6, #3758153728	@ 0xe000e000
 8005a74:	f04f 5780 	mov.w	r7, #268435456	@ 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a7a:	b94b      	cbnz	r3, 8005a90 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a7c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d9fa      	bls.n	8005a78 <prvIdleTask+0xc>
				taskYIELD();
 8005a82:	f8c6 7d04 	str.w	r7, [r6, #3332]	@ 0xd04
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	e7f3      	b.n	8005a78 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 8005a90:	f000 fd50 	bl	8006534 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a94:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005a96:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a98:	1d28      	adds	r0, r5, #4
 8005a9a:	f7ff fb25 	bl	80050e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	6563      	str	r3, [r4, #84]	@ 0x54
				--uxDeletedTasksWaitingCleanUp;
 8005aa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	65a3      	str	r3, [r4, #88]	@ 0x58
			taskEXIT_CRITICAL();
 8005aaa:	f000 fd67 	bl	800657c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8005aae:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8005ab0:	f000 fc9c 	bl	80063ec <vPortFree>
			vPortFree( pxTCB );
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 fc99 	bl	80063ec <vPortFree>
	}
 8005aba:	e7dd      	b.n	8005a78 <prvIdleTask+0xc>
 8005abc:	20000b70 	.word	0x20000b70

08005ac0 <xTaskCreate>:
	{
 8005ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ac4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8005ac8:	4606      	mov	r6, r0
 8005aca:	4689      	mov	r9, r1
 8005acc:	461f      	mov	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ace:	4650      	mov	r0, sl
	{
 8005ad0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ad4:	f000 fc04 	bl	80062e0 <pvPortMalloc>
			if( pxStack != NULL )
 8005ad8:	4605      	mov	r5, r0
 8005ada:	b918      	cbnz	r0, 8005ae4 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ae4:	2054      	movs	r0, #84	@ 0x54
 8005ae6:	f000 fbfb 	bl	80062e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005aea:	4604      	mov	r4, r0
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f000 80a7 	beq.w	8005c40 <xTaskCreate+0x180>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af2:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8005af6:	6305      	str	r5, [r0, #48]	@ 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005af8:	4455      	add	r5, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005afa:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8005afe:	f1b9 0f00 	cmp.w	r9, #0
 8005b02:	f000 808f 	beq.w	8005c24 <xTaskCreate+0x164>
 8005b06:	f109 33ff 	add.w	r3, r9, #4294967295
 8005b0a:	f100 0233 	add.w	r2, r0, #51	@ 0x33
 8005b0e:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005b16:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8005b1a:	b109      	cbz	r1, 8005b20 <xTaskCreate+0x60>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b1c:	454b      	cmp	r3, r9
 8005b1e:	d1f8      	bne.n	8005b12 <xTaskCreate+0x52>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b20:	2300      	movs	r3, #0
 8005b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8005b28:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b2c:	f104 0a04 	add.w	sl, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b30:	2b06      	cmp	r3, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005b32:	f8c4 b048 	str.w	fp, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b36:	4650      	mov	r0, sl
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b38:	bf28      	it	cs
 8005b3a:	2306      	movcs	r3, #6
 8005b3c:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005b3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005b40:	6463      	str	r3, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b42:	f7ff faac 	bl	800509e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b46:	f104 0018 	add.w	r0, r4, #24
 8005b4a:	f7ff faa8 	bl	800509e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4e:	f1c9 0307 	rsb	r3, r9, #7
		pxNewTCB->ulNotifiedValue = 0;
 8005b52:	f8c4 b04c 	str.w	fp, [r4, #76]	@ 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b56:	463a      	mov	r2, r7
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b5c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b60:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b62:	f884 b050 	strb.w	fp, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b66:	f000 fcbb 	bl	80064e0 <pxPortInitialiseStack>
 8005b6a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005b6c:	f1b8 0f00 	cmp.w	r8, #0
 8005b70:	d001      	beq.n	8005b76 <xTaskCreate+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b72:	f8c8 4000 	str.w	r4, [r8]
		uxCurrentNumberOfTasks++;
 8005b76:	4d34      	ldr	r5, [pc, #208]	@ (8005c48 <xTaskCreate+0x188>)
	taskENTER_CRITICAL();
 8005b78:	f000 fcdc 	bl	8006534 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005b7c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8005b7e:	f105 075c 	add.w	r7, r5, #92	@ 0x5c
 8005b82:	3301      	adds	r3, #1
 8005b84:	656b      	str	r3, [r5, #84]	@ 0x54
		if( pxCurrentTCB == NULL )
 8005b86:	686e      	ldr	r6, [r5, #4]
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	d14e      	bne.n	8005c2a <xTaskCreate+0x16a>
			pxCurrentTCB = pxNewTCB;
 8005b8c:	606c      	str	r4, [r5, #4]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b8e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d120      	bne.n	8005bd6 <xTaskCreate+0x116>
 8005b94:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b96:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b98:	4640      	mov	r0, r8
 8005b9a:	f7ff fa75 	bl	8005088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b9e:	f108 0814 	add.w	r8, r8, #20
 8005ba2:	2e07      	cmp	r6, #7
 8005ba4:	d1f7      	bne.n	8005b96 <xTaskCreate+0xd6>
	vListInitialise( &xDelayedTaskList1 );
 8005ba6:	4e29      	ldr	r6, [pc, #164]	@ (8005c4c <xTaskCreate+0x18c>)
	vListInitialise( &xDelayedTaskList2 );
 8005ba8:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8005bac:	4630      	mov	r0, r6
 8005bae:	f7ff fa6b 	bl	8005088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f7ff fa68 	bl	8005088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bb8:	f1a6 00bc 	sub.w	r0, r6, #188	@ 0xbc
 8005bbc:	f7ff fa64 	bl	8005088 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005bc0:	f1a6 00a8 	sub.w	r0, r6, #168	@ 0xa8
 8005bc4:	f7ff fa60 	bl	8005088 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005bc8:	f1a6 00dc 	sub.w	r0, r6, #220	@ 0xdc
 8005bcc:	f7ff fa5c 	bl	8005088 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd0:	626e      	str	r6, [r5, #36]	@ 0x24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bd2:	f8c5 8020 	str.w	r8, [r5, #32]
		uxTaskNumber++;
 8005bd6:	f8d5 3114 	ldr.w	r3, [r5, #276]	@ 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8005bda:	2014      	movs	r0, #20
 8005bdc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
		uxTaskNumber++;
 8005bde:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8005be0:	68a9      	ldr	r1, [r5, #8]
 8005be2:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8005be6:	f8c5 3114 	str.w	r3, [r5, #276]	@ 0x114
		prvAddTaskToReadyList( pxNewTCB );
 8005bea:	2301      	movs	r3, #1
 8005bec:	4093      	lsls	r3, r2
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	60ab      	str	r3, [r5, #8]
 8005bf4:	f7ff fa56 	bl	80050a4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005bf8:	f000 fcc0 	bl	800657c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005bfc:	f8d5 3110 	ldr.w	r3, [r5, #272]	@ 0x110
 8005c00:	b173      	cbz	r3, 8005c20 <xTaskCreate+0x160>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c02:	686b      	ldr	r3, [r5, #4]
 8005c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c06:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d209      	bcs.n	8005c20 <xTaskCreate+0x160>
			taskYIELD_IF_USING_PREEMPTION();
 8005c0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8005c20:	2001      	movs	r0, #1
		return xReturn;
 8005c22:	e75d      	b.n	8005ae0 <xTaskCreate+0x20>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c24:	f880 9034 	strb.w	r9, [r0, #52]	@ 0x34
 8005c28:	e77d      	b.n	8005b26 <xTaskCreate+0x66>
			if( xSchedulerRunning == pdFALSE )
 8005c2a:	f8d5 2110 	ldr.w	r2, [r5, #272]	@ 0x110
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d1d0      	bne.n	8005bd6 <xTaskCreate+0x116>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c34:	686a      	ldr	r2, [r5, #4]
 8005c36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d8cc      	bhi.n	8005bd6 <xTaskCreate+0x116>
					pxCurrentTCB = pxNewTCB;
 8005c3c:	606c      	str	r4, [r5, #4]
 8005c3e:	e7ca      	b.n	8005bd6 <xTaskCreate+0x116>
					vPortFree( pxStack );
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fbd3 	bl	80063ec <vPortFree>
		if( pxNewTCB != NULL )
 8005c46:	e749      	b.n	8005adc <xTaskCreate+0x1c>
 8005c48:	20000b70 	.word	0x20000b70
 8005c4c:	20000c58 	.word	0x20000c58

08005c50 <vTaskStartScheduler>:
{
 8005c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8005c52:	4c19      	ldr	r4, [pc, #100]	@ (8005cb8 <vTaskStartScheduler+0x68>)
 8005c54:	2500      	movs	r5, #0
 8005c56:	2280      	movs	r2, #128	@ 0x80
 8005c58:	4918      	ldr	r1, [pc, #96]	@ (8005cbc <vTaskStartScheduler+0x6c>)
 8005c5a:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8005c5e:	4818      	ldr	r0, [pc, #96]	@ (8005cc0 <vTaskStartScheduler+0x70>)
 8005c60:	9500      	str	r5, [sp, #0]
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	462b      	mov	r3, r5
 8005c66:	f7ff ff2b 	bl	8005ac0 <xTaskCreate>
	if( xReturn == pdPASS )
 8005c6a:	2801      	cmp	r0, #1
 8005c6c:	d114      	bne.n	8005c98 <vTaskStartScheduler+0x48>
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	b672      	cpsid	i
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	62a3      	str	r3, [r4, #40]	@ 0x28
		xSchedulerRunning = pdTRUE;
 8005c88:	f8c4 0110 	str.w	r0, [r4, #272]	@ 0x110
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c8c:	6025      	str	r5, [r4, #0]
}
 8005c8e:	b003      	add	sp, #12
 8005c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005c94:	f000 bce8 	b.w	8006668 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d10a      	bne.n	8005cb2 <vTaskStartScheduler+0x62>
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	b672      	cpsid	i
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	b662      	cpsie	i
 8005cb0:	e7fe      	b.n	8005cb0 <vTaskStartScheduler+0x60>
}
 8005cb2:	b003      	add	sp, #12
 8005cb4:	bd30      	pop	{r4, r5, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000b70 	.word	0x20000b70
 8005cbc:	08006d23 	.word	0x08006d23
 8005cc0:	08005a6d 	.word	0x08005a6d

08005cc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005cc4:	4a03      	ldr	r2, [pc, #12]	@ (8005cd4 <vTaskSuspendAll+0x10>)
 8005cc6:	f8d2 3118 	ldr.w	r3, [r2, #280]	@ 0x118
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20000b70 	.word	0x20000b70

08005cd8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005cd8:	4b01      	ldr	r3, [pc, #4]	@ (8005ce0 <xTaskGetTickCount+0x8>)
 8005cda:	6818      	ldr	r0, [r3, #0]
}
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20000b70 	.word	0x20000b70

08005ce4 <xTaskGetTickCountFromISR>:
{
 8005ce4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ce6:	f000 fd1f 	bl	8006728 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005cea:	4b01      	ldr	r3, [pc, #4]	@ (8005cf0 <xTaskGetTickCountFromISR+0xc>)
 8005cec:	6818      	ldr	r0, [r3, #0]
}
 8005cee:	bd08      	pop	{r3, pc}
 8005cf0:	20000b70 	.word	0x20000b70

08005cf4 <xTaskIncrementTick>:
{
 8005cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf8:	4c36      	ldr	r4, [pc, #216]	@ (8005dd4 <xTaskIncrementTick+0xe0>)
 8005cfa:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d161      	bne.n	8005dc6 <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d02:	6827      	ldr	r7, [r4, #0]
 8005d04:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8005d06:	6027      	str	r7, [r4, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d08:	b9c7      	cbnz	r7, 8005d3c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8005d0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	b153      	cbz	r3, 8005d26 <xTaskIncrementTick+0x32>
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	b672      	cpsid	i
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	b662      	cpsie	i
 8005d24:	e7fe      	b.n	8005d24 <xTaskIncrementTick+0x30>
 8005d26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005d28:	6a22      	ldr	r2, [r4, #32]
 8005d2a:	6262      	str	r2, [r4, #36]	@ 0x24
 8005d2c:	6223      	str	r3, [r4, #32]
 8005d2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8005d32:	3301      	adds	r3, #1
 8005d34:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
 8005d38:	f7ff fe88 	bl	8005a4c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
BaseType_t xSwitchRequired = pdFALSE;
 8005d3e:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d40:	42bb      	cmp	r3, r7
 8005d42:	d910      	bls.n	8005d66 <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	2214      	movs	r2, #20
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	fb02 4303 	mla	r3, r2, r3, r4
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
				xSwitchRequired = pdTRUE;
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	bf28      	it	cs
 8005d54:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8005d56:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
			xSwitchRequired = pdTRUE;
 8005d5a:	2b00      	cmp	r3, #0
}
 8005d5c:	bf0c      	ite	eq
 8005d5e:	4628      	moveq	r0, r5
 8005d60:	2001      	movne	r0, #1
 8005d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8005d66:	f04f 0b01 	mov.w	fp, #1
 8005d6a:	f8df 906c 	ldr.w	r9, [pc, #108]	@ 8005dd8 <xTaskIncrementTick+0xe4>
 8005d6e:	f04f 0a14 	mov.w	sl, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	b91b      	cbnz	r3, 8005d80 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8005d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d7e:	e7e1      	b.n	8005d44 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d86:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005d88:	429f      	cmp	r7, r3
 8005d8a:	d3f7      	bcc.n	8005d7c <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d8c:	f106 0804 	add.w	r8, r6, #4
 8005d90:	4640      	mov	r0, r8
 8005d92:	f7ff f9a9 	bl	80050e8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d96:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8005d98:	b11b      	cbz	r3, 8005da2 <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d9a:	f106 0018 	add.w	r0, r6, #24
 8005d9e:	f7ff f9a3 	bl	80050e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005da2:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8005da4:	4641      	mov	r1, r8
 8005da6:	68a2      	ldr	r2, [r4, #8]
 8005da8:	fa0b f300 	lsl.w	r3, fp, r0
 8005dac:	fb0a 9000 	mla	r0, sl, r0, r9
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	f7ff f976 	bl	80050a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005db8:	6863      	ldr	r3, [r4, #4]
 8005dba:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	bf28      	it	cs
 8005dc2:	2501      	movcs	r5, #1
 8005dc4:	e7d5      	b.n	8005d72 <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8005dc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
BaseType_t xSwitchRequired = pdFALSE;
 8005dca:	2500      	movs	r5, #0
		++uxPendedTicks;
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
 8005dd2:	e7c0      	b.n	8005d56 <xTaskIncrementTick+0x62>
 8005dd4:	20000b70 	.word	0x20000b70
 8005dd8:	20000bcc 	.word	0x20000bcc

08005ddc <xTaskResumeAll>:
{
 8005ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005de0:	4c33      	ldr	r4, [pc, #204]	@ (8005eb0 <xTaskResumeAll+0xd4>)
 8005de2:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8005de6:	b953      	cbnz	r3, 8005dfe <xTaskResumeAll+0x22>
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	b672      	cpsid	i
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	b662      	cpsie	i
 8005dfc:	e7fe      	b.n	8005dfc <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8005dfe:	f000 fb99 	bl	8006534 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005e02:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8005e06:	3b01      	subs	r3, #1
 8005e08:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0c:	f8d4 5118 	ldr.w	r5, [r4, #280]	@ 0x118
 8005e10:	b12d      	cbz	r5, 8005e1e <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 8005e12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005e14:	f000 fbb2 	bl	800657c <vPortExitCritical>
}
 8005e18:	4620      	mov	r0, r4
 8005e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f6      	beq.n	8005e12 <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 8005e24:	2601      	movs	r6, #1
 8005e26:	f104 075c 	add.w	r7, r4, #92	@ 0x5c
 8005e2a:	f04f 0814 	mov.w	r8, #20
 8005e2e:	e01c      	b.n	8005e6a <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e32:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e34:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e38:	f105 0018 	add.w	r0, r5, #24
 8005e3c:	f7ff f954 	bl	80050e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e40:	4648      	mov	r0, r9
 8005e42:	f7ff f951 	bl	80050e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e46:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005e48:	68a2      	ldr	r2, [r4, #8]
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	fa06 f300 	lsl.w	r3, r6, r0
 8005e50:	fb08 7000 	mla	r0, r8, r0, r7
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60a3      	str	r3, [r4, #8]
 8005e58:	f7ff f924 	bl	80050a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d301      	bcc.n	8005e6a <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 8005e66:	f8c4 6128 	str.w	r6, [r4, #296]	@ 0x128
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1df      	bne.n	8005e30 <xTaskResumeAll+0x54>
				if( pxTCB != NULL )
 8005e70:	b10d      	cbz	r5, 8005e76 <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 8005e72:	f7ff fdeb 	bl	8005a4c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e76:	f8d4 5124 	ldr.w	r5, [r4, #292]	@ 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e7a:	b14d      	cbz	r5, 8005e90 <xTaskResumeAll+0xb4>
								xYieldPending = pdTRUE;
 8005e7c:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005e7e:	f7ff ff39 	bl	8005cf4 <xTaskIncrementTick>
 8005e82:	b108      	cbz	r0, 8005e88 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8005e84:	f8c4 6128 	str.w	r6, [r4, #296]	@ 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e88:	3d01      	subs	r5, #1
 8005e8a:	d1f8      	bne.n	8005e7e <xTaskResumeAll+0xa2>
						uxPendedTicks = 0;
 8005e8c:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
				if( xYieldPending != pdFALSE )
 8005e90:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0bc      	beq.n	8005e12 <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 8005e98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ea0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005eac:	2401      	movs	r4, #1
 8005eae:	e7b1      	b.n	8005e14 <xTaskResumeAll+0x38>
 8005eb0:	20000b70 	.word	0x20000b70

08005eb4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eb4:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <vTaskSwitchContext+0x64>)
 8005eb6:	f8d2 3118 	ldr.w	r3, [r2, #280]	@ 0x118
{
 8005eba:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ebc:	b11b      	cbz	r3, 8005ec6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8005ec4:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005ec6:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eca:	6893      	ldr	r3, [r2, #8]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2114      	movs	r1, #20
 8005ed4:	f1c3 031f 	rsb	r3, r3, #31
 8005ed8:	4359      	muls	r1, r3
 8005eda:	1850      	adds	r0, r2, r1
 8005edc:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8005ede:	b954      	cbnz	r4, 8005ef6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	b672      	cpsid	i
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	b662      	cpsie	i
 8005ef4:	e7fe      	b.n	8005ef4 <vTaskSwitchContext+0x40>
 8005ef6:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8005ef8:	4411      	add	r1, r2
 8005efa:	6864      	ldr	r4, [r4, #4]
 8005efc:	3164      	adds	r1, #100	@ 0x64
 8005efe:	428c      	cmp	r4, r1
 8005f00:	6604      	str	r4, [r0, #96]	@ 0x60
 8005f02:	bf04      	itt	eq
 8005f04:	6861      	ldreq	r1, [r4, #4]
 8005f06:	6601      	streq	r1, [r0, #96]	@ 0x60
 8005f08:	2114      	movs	r1, #20
 8005f0a:	fb01 2303 	mla	r3, r1, r3, r2
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	6053      	str	r3, [r2, #4]
}
 8005f14:	e7d6      	b.n	8005ec4 <vTaskSwitchContext+0x10>
 8005f16:	bf00      	nop
 8005f18:	20000b70 	.word	0x20000b70

08005f1c <vTaskPlaceOnEventList>:
{
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005f20:	b950      	cbnz	r0, 8005f38 <vTaskPlaceOnEventList+0x1c>
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	b672      	cpsid	i
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	b662      	cpsie	i
 8005f36:	e7fe      	b.n	8005f36 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f38:	4b05      	ldr	r3, [pc, #20]	@ (8005f50 <vTaskPlaceOnEventList+0x34>)
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	3118      	adds	r1, #24
 8005f3e:	f7ff f8bc 	bl	80050ba <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f42:	4620      	mov	r0, r4
 8005f44:	2101      	movs	r1, #1
}
 8005f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f4a:	f7ff bd49 	b.w	80059e0 <prvAddCurrentTaskToDelayedList>
 8005f4e:	bf00      	nop
 8005f50:	20000b70 	.word	0x20000b70

08005f54 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f54:	68c3      	ldr	r3, [r0, #12]
{
 8005f56:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005f5a:	b955      	cbnz	r5, 8005f72 <xTaskRemoveFromEventList+0x1e>
 8005f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f60:	b672      	cpsid	i
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	b662      	cpsie	i
 8005f70:	e7fe      	b.n	8005f70 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f72:	f105 0618 	add.w	r6, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4c14      	ldr	r4, [pc, #80]	@ (8005fc8 <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f7ff f8b5 	bl	80050e8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 8005f82:	b9d3      	cbnz	r3, 8005fba <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f84:	1d2e      	adds	r6, r5, #4
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff f8ae 	bl	80050e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f8c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005f8e:	2301      	movs	r3, #1
 8005f90:	68a1      	ldr	r1, [r4, #8]
 8005f92:	2014      	movs	r0, #20
 8005f94:	4093      	lsls	r3, r2
 8005f96:	430b      	orrs	r3, r1
 8005f98:	4631      	mov	r1, r6
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8005fa0:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fa4:	f7ff f87e 	bl	80050a4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d907      	bls.n	8005fc2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f8c4 0128 	str.w	r0, [r4, #296]	@ 0x128
}
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fba:	4631      	mov	r1, r6
 8005fbc:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8005fc0:	e7f0      	b.n	8005fa4 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8005fc2:	2000      	movs	r0, #0
	return xReturn;
 8005fc4:	e7f8      	b.n	8005fb8 <xTaskRemoveFromEventList+0x64>
 8005fc6:	bf00      	nop
 8005fc8:	20000b70 	.word	0x20000b70

08005fcc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	@ (8005fdc <vTaskInternalSetTimeOutState+0x10>)
 8005fce:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fd2:	681b      	ldr	r3, [r3, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fd4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fd6:	6043      	str	r3, [r0, #4]
}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000b70 	.word	0x20000b70

08005fe0 <xTaskCheckForTimeOut>:
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	b950      	cbnz	r0, 8005ffe <xTaskCheckForTimeOut+0x1e>
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	b672      	cpsid	i
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	b662      	cpsie	i
 8005ffc:	e7fe      	b.n	8005ffc <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005ffe:	b951      	cbnz	r1, 8006016 <xTaskCheckForTimeOut+0x36>
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	b672      	cpsid	i
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	b662      	cpsie	i
 8006014:	e7fe      	b.n	8006014 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8006016:	f000 fa8d 	bl	8006534 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800601a:	6823      	ldr	r3, [r4, #0]
		const TickType_t xConstTickCount = xTickCount;
 800601c:	480e      	ldr	r0, [pc, #56]	@ (8006058 <xTaskCheckForTimeOut+0x78>)
			if( *pxTicksToWait == portMAX_DELAY )
 800601e:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8006020:	6801      	ldr	r1, [r0, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006022:	d010      	beq.n	8006046 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006024:	f8d0 0120 	ldr.w	r0, [r0, #288]	@ 0x120
 8006028:	682e      	ldr	r6, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800602a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800602c:	4286      	cmp	r6, r0
 800602e:	d001      	beq.n	8006034 <xTaskCheckForTimeOut+0x54>
 8006030:	428a      	cmp	r2, r1
 8006032:	d90f      	bls.n	8006054 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006034:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006036:	4283      	cmp	r3, r0
 8006038:	d90a      	bls.n	8006050 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800603a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800603c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800603e:	4413      	add	r3, r2
 8006040:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006042:	f7ff ffc3 	bl	8005fcc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006046:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006048:	f000 fa98 	bl	800657c <vPortExitCritical>
}
 800604c:	4620      	mov	r0, r4
 800604e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006054:	2401      	movs	r4, #1
 8006056:	e7f7      	b.n	8006048 <xTaskCheckForTimeOut+0x68>
 8006058:	20000b70 	.word	0x20000b70

0800605c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800605c:	4b02      	ldr	r3, [pc, #8]	@ (8006068 <vTaskMissedYield+0xc>)
 800605e:	2201      	movs	r2, #1
 8006060:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000b70 	.word	0x20000b70

0800606c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <xTaskGetSchedulerState+0x1c>)
 800606e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006072:	b132      	cbz	r2, 8006082 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006074:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8006078:	fab0 f080 	clz	r0, r0
 800607c:	0940      	lsrs	r0, r0, #5
 800607e:	0040      	lsls	r0, r0, #1
 8006080:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006082:	2001      	movs	r0, #1
	}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000b70 	.word	0x20000b70

0800608c <xTaskPriorityInherit>:
	{
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8006090:	4604      	mov	r4, r0
 8006092:	2800      	cmp	r0, #0
 8006094:	d034      	beq.n	8006100 <xTaskPriorityInherit+0x74>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006096:	4d21      	ldr	r5, [pc, #132]	@ (800611c <xTaskPriorityInherit+0x90>)
 8006098:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800609a:	686a      	ldr	r2, [r5, #4]
 800609c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800609e:	4293      	cmp	r3, r2
 80060a0:	d234      	bcs.n	800610c <xTaskPriorityInherit+0x80>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060a2:	6982      	ldr	r2, [r0, #24]
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	db04      	blt.n	80060b2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a8:	686a      	ldr	r2, [r5, #4]
 80060aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060ac:	f1c2 0207 	rsb	r2, r2, #7
 80060b0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80060b2:	4f1b      	ldr	r7, [pc, #108]	@ (8006120 <xTaskPriorityInherit+0x94>)
 80060b4:	2614      	movs	r6, #20
 80060b6:	6962      	ldr	r2, [r4, #20]
 80060b8:	fb06 7303 	mla	r3, r6, r3, r7
 80060bc:	429a      	cmp	r2, r3
 80060be:	d121      	bne.n	8006104 <xTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c0:	f104 0804 	add.w	r8, r4, #4
 80060c4:	4640      	mov	r0, r8
 80060c6:	f7ff f80f 	bl	80050e8 <uxListRemove>
 80060ca:	b950      	cbnz	r0, 80060e2 <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80060cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060ce:	fb06 5601 	mla	r6, r6, r1, r5
 80060d2:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80060d4:	b92b      	cbnz	r3, 80060e2 <xTaskPriorityInherit+0x56>
 80060d6:	2201      	movs	r2, #1
 80060d8:	68ab      	ldr	r3, [r5, #8]
 80060da:	408a      	lsls	r2, r1
 80060dc:	ea23 0302 	bic.w	r3, r3, r2
 80060e0:	60ab      	str	r3, [r5, #8]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060e2:	686b      	ldr	r3, [r5, #4]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060e4:	2014      	movs	r0, #20
 80060e6:	68a9      	ldr	r1, [r5, #8]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060ea:	2301      	movs	r3, #1
 80060ec:	4093      	lsls	r3, r2
 80060ee:	fb00 7002 	mla	r0, r0, r2, r7
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060f2:	62e2      	str	r2, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060f4:	430b      	orrs	r3, r1
 80060f6:	4641      	mov	r1, r8
 80060f8:	60ab      	str	r3, [r5, #8]
 80060fa:	f7fe ffd3 	bl	80050a4 <vListInsertEnd>
				xReturn = pdTRUE;
 80060fe:	2001      	movs	r0, #1
	}
 8006100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006104:	686b      	ldr	r3, [r5, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800610a:	e7f8      	b.n	80060fe <xTaskPriorityInherit+0x72>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800610c:	686b      	ldr	r3, [r5, #4]
 800610e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	4298      	cmp	r0, r3
 8006114:	bf2c      	ite	cs
 8006116:	2000      	movcs	r0, #0
 8006118:	2001      	movcc	r0, #1
 800611a:	e7f1      	b.n	8006100 <xTaskPriorityInherit+0x74>
 800611c:	20000b70 	.word	0x20000b70
 8006120:	20000bcc 	.word	0x20000bcc

08006124 <xTaskPriorityDisinherit>:
	{
 8006124:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8006126:	4604      	mov	r4, r0
 8006128:	b908      	cbnz	r0, 800612e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800612a:	2000      	movs	r0, #0
	}
 800612c:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800612e:	4d24      	ldr	r5, [pc, #144]	@ (80061c0 <xTaskPriorityDisinherit+0x9c>)
 8006130:	686b      	ldr	r3, [r5, #4]
 8006132:	4283      	cmp	r3, r0
 8006134:	d00a      	beq.n	800614c <xTaskPriorityDisinherit+0x28>
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	b672      	cpsid	i
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	b662      	cpsie	i
 800614a:	e7fe      	b.n	800614a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800614c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800614e:	b953      	cbnz	r3, 8006166 <xTaskPriorityDisinherit+0x42>
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	b672      	cpsid	i
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	b662      	cpsie	i
 8006164:	e7fe      	b.n	8006164 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006166:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8006168:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800616a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 800616c:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800616e:	4291      	cmp	r1, r2
 8006170:	d0db      	beq.n	800612a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d9      	bne.n	800612a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006176:	1d06      	adds	r6, r0, #4
 8006178:	4630      	mov	r0, r6
 800617a:	f7fe ffb5 	bl	80050e8 <uxListRemove>
 800617e:	b958      	cbnz	r0, 8006198 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006180:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006182:	2314      	movs	r3, #20
 8006184:	fb03 5301 	mla	r3, r3, r1, r5
 8006188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618a:	b92b      	cbnz	r3, 8006198 <xTaskPriorityDisinherit+0x74>
 800618c:	2201      	movs	r2, #1
 800618e:	68ab      	ldr	r3, [r5, #8]
 8006190:	408a      	lsls	r2, r1
 8006192:	ea23 0302 	bic.w	r3, r3, r2
 8006196:	60ab      	str	r3, [r5, #8]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006198:	6c63      	ldr	r3, [r4, #68]	@ 0x44
					prvAddTaskToReadyList( pxTCB );
 800619a:	2014      	movs	r0, #20
 800619c:	68a9      	ldr	r1, [r5, #8]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619e:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80061a6:	2401      	movs	r4, #1
 80061a8:	fa04 f203 	lsl.w	r2, r4, r3
 80061ac:	430a      	orrs	r2, r1
 80061ae:	4631      	mov	r1, r6
 80061b0:	60aa      	str	r2, [r5, #8]
 80061b2:	4a04      	ldr	r2, [pc, #16]	@ (80061c4 <xTaskPriorityDisinherit+0xa0>)
 80061b4:	fb00 2003 	mla	r0, r0, r3, r2
 80061b8:	f7fe ff74 	bl	80050a4 <vListInsertEnd>
					xReturn = pdTRUE;
 80061bc:	4620      	mov	r0, r4
		return xReturn;
 80061be:	e7b5      	b.n	800612c <xTaskPriorityDisinherit+0x8>
 80061c0:	20000b70 	.word	0x20000b70
 80061c4:	20000bcc 	.word	0x20000bcc

080061c8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80061c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80061cc:	4604      	mov	r4, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d050      	beq.n	8006274 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 80061d2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80061d4:	b952      	cbnz	r2, 80061ec <vTaskPriorityDisinheritAfterTimeout+0x24>
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	b672      	cpsid	i
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	b662      	cpsie	i
 80061ea:	e7fe      	b.n	80061ea <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061ec:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80061ee:	4299      	cmp	r1, r3
 80061f0:	bf38      	it	cc
 80061f2:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061f4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80061f6:	428b      	cmp	r3, r1
 80061f8:	d03c      	beq.n	8006274 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	d13a      	bne.n	8006274 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 80061fe:	4d1e      	ldr	r5, [pc, #120]	@ (8006278 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8006200:	686a      	ldr	r2, [r5, #4]
 8006202:	4282      	cmp	r2, r0
 8006204:	d10a      	bne.n	800621c <vTaskPriorityDisinheritAfterTimeout+0x54>
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	b672      	cpsid	i
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	b662      	cpsie	i
 800621a:	e7fe      	b.n	800621a <vTaskPriorityDisinheritAfterTimeout+0x52>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800621c:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800621e:	2614      	movs	r6, #20
 8006220:	4f16      	ldr	r7, [pc, #88]	@ (800627c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006222:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8006224:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006226:	fb06 7303 	mla	r3, r6, r3, r7
 800622a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622c:	bfa4      	itt	ge
 800622e:	f1c1 0107 	rsbge	r1, r1, #7
 8006232:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006234:	429a      	cmp	r2, r3
 8006236:	d11d      	bne.n	8006274 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006238:	f100 0804 	add.w	r8, r0, #4
 800623c:	4640      	mov	r0, r8
 800623e:	f7fe ff53 	bl	80050e8 <uxListRemove>
 8006242:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006244:	b948      	cbnz	r0, 800625a <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006246:	fb06 5602 	mla	r6, r6, r2, r5
 800624a:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 800624c:	b92b      	cbnz	r3, 800625a <vTaskPriorityDisinheritAfterTimeout+0x92>
 800624e:	2101      	movs	r1, #1
 8006250:	68ab      	ldr	r3, [r5, #8]
 8006252:	4091      	lsls	r1, r2
 8006254:	ea23 0301 	bic.w	r3, r3, r1
 8006258:	60ab      	str	r3, [r5, #8]
						prvAddTaskToReadyList( pxTCB );
 800625a:	2301      	movs	r3, #1
 800625c:	68a9      	ldr	r1, [r5, #8]
 800625e:	2014      	movs	r0, #20
 8006260:	4093      	lsls	r3, r2
 8006262:	fb00 7002 	mla	r0, r0, r2, r7
 8006266:	430b      	orrs	r3, r1
 8006268:	4641      	mov	r1, r8
 800626a:	60ab      	str	r3, [r5, #8]
	}
 800626c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						prvAddTaskToReadyList( pxTCB );
 8006270:	f7fe bf18 	b.w	80050a4 <vListInsertEnd>
	}
 8006274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006278:	20000b70 	.word	0x20000b70
 800627c:	20000bcc 	.word	0x20000bcc

08006280 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006280:	4b04      	ldr	r3, [pc, #16]	@ (8006294 <pvTaskIncrementMutexHeldCount+0x14>)
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	b11a      	cbz	r2, 800628e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
 800628a:	3201      	adds	r2, #1
 800628c:	648a      	str	r2, [r1, #72]	@ 0x48
		return pxCurrentTCB;
 800628e:	6858      	ldr	r0, [r3, #4]
	}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000b70 	.word	0x20000b70

08006298 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006298:	4b10      	ldr	r3, [pc, #64]	@ (80062dc <prvInsertBlockIntoFreeList+0x44>)
{
 800629a:	b530      	push	{r4, r5, lr}
 800629c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800629e:	461a      	mov	r2, r3
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4283      	cmp	r3, r0
 80062a4:	d3fb      	bcc.n	800629e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062a6:	6854      	ldr	r4, [r2, #4]
 80062a8:	1911      	adds	r1, r2, r4
 80062aa:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062ac:	bf01      	itttt	eq
 80062ae:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 80062b0:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b2:	1909      	addeq	r1, r1, r4
 80062b4:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062b6:	6844      	ldr	r4, [r0, #4]
 80062b8:	1901      	adds	r1, r0, r4
 80062ba:	428b      	cmp	r3, r1
 80062bc:	d10b      	bne.n	80062d6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062be:	68a9      	ldr	r1, [r5, #8]
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d003      	beq.n	80062cc <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062c4:	6859      	ldr	r1, [r3, #4]
 80062c6:	4421      	add	r1, r4
 80062c8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ca:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062cc:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062ce:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062d0:	bf18      	it	ne
 80062d2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d4:	bd30      	pop	{r4, r5, pc}
 80062d6:	4619      	mov	r1, r3
 80062d8:	e7f8      	b.n	80062cc <prvInsertBlockIntoFreeList+0x34>
 80062da:	bf00      	nop
 80062dc:	20000c9c 	.word	0x20000c9c

080062e0 <pvPortMalloc>:
{
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80062e4:	4c3f      	ldr	r4, [pc, #252]	@ (80063e4 <pvPortMalloc+0x104>)
{
 80062e6:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80062e8:	f7ff fcec 	bl	8005cc4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	b9f3      	cbnz	r3, 800632e <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 80062f0:	4a3d      	ldr	r2, [pc, #244]	@ (80063e8 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062f2:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062f4:	bf1b      	ittet	ne
 80062f6:	1dd1      	addne	r1, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062f8:	f502 52c0 	addne.w	r2, r2, #6144	@ 0x1800
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062fc:	f44f 53c0 	moveq.w	r3, #6144	@ 0x1800
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006300:	f021 0107 	bicne.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006304:	bf1c      	itt	ne
 8006306:	1a53      	subne	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006308:	460a      	movne	r2, r1
	xStart.xBlockSize = ( size_t ) 0;
 800630a:	2100      	movs	r1, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800630c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800630e:	6022      	str	r2, [r4, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006310:	6061      	str	r1, [r4, #4]
	uxAddress -= xHeapStructSize;
 8006312:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006314:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8006318:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800631c:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 800631e:	60a3      	str	r3, [r4, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006320:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006324:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006328:	e9c4 1103 	strd	r1, r1, [r4, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800632c:	6163      	str	r3, [r4, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800632e:	6967      	ldr	r7, [r4, #20]
 8006330:	422f      	tst	r7, r5
 8006332:	d150      	bne.n	80063d6 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8006334:	2d00      	cmp	r5, #0
 8006336:	d04e      	beq.n	80063d6 <pvPortMalloc+0xf6>
				xWantedSize += xHeapStructSize;
 8006338:	f105 0308 	add.w	r3, r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800633c:	0768      	lsls	r0, r5, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800633e:	bf1c      	itt	ne
 8006340:	f023 0307 	bicne.w	r3, r3, #7
 8006344:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006346:	2b00      	cmp	r3, #0
 8006348:	d045      	beq.n	80063d6 <pvPortMalloc+0xf6>
 800634a:	6926      	ldr	r6, [r4, #16]
 800634c:	429e      	cmp	r6, r3
 800634e:	d342      	bcc.n	80063d6 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8006350:	6825      	ldr	r5, [r4, #0]
				pxPreviousBlock = &xStart;
 8006352:	4824      	ldr	r0, [pc, #144]	@ (80063e4 <pvPortMalloc+0x104>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006354:	686a      	ldr	r2, [r5, #4]
 8006356:	429a      	cmp	r2, r3
 8006358:	d201      	bcs.n	800635e <pvPortMalloc+0x7e>
 800635a:	6829      	ldr	r1, [r5, #0]
 800635c:	b9b9      	cbnz	r1, 800638e <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
 800635e:	68a1      	ldr	r1, [r4, #8]
 8006360:	42a9      	cmp	r1, r5
 8006362:	d038      	beq.n	80063d6 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006364:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006366:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006368:	f8d0 8000 	ldr.w	r8, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800636c:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800636e:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006370:	d914      	bls.n	800639c <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006372:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006374:	0741      	lsls	r1, r0, #29
 8006376:	d00d      	beq.n	8006394 <pvPortMalloc+0xb4>
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	b672      	cpsid	i
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	b662      	cpsie	i
 800638c:	e7fe      	b.n	800638c <pvPortMalloc+0xac>
					pxPreviousBlock = pxBlock;
 800638e:	4628      	mov	r0, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006390:	460d      	mov	r5, r1
 8006392:	e7df      	b.n	8006354 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006394:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006396:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006398:	f7ff ff7e 	bl	8006298 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800639c:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800639e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063a0:	68e1      	ldr	r1, [r4, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063a2:	f108 0808 	add.w	r8, r8, #8
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063a6:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063a8:	4317      	orrs	r7, r2
					pxBlock->pxNextFreeBlock = NULL;
 80063aa:	602b      	str	r3, [r5, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063ac:	428e      	cmp	r6, r1
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063ae:	6126      	str	r6, [r4, #16]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063b0:	606f      	str	r7, [r5, #4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b2:	bf38      	it	cc
 80063b4:	60e6      	strcc	r6, [r4, #12]
	( void ) xTaskResumeAll();
 80063b6:	f7ff fd11 	bl	8005ddc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ba:	f018 0f07 	tst.w	r8, #7
 80063be:	d00d      	beq.n	80063dc <pvPortMalloc+0xfc>
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	b672      	cpsid	i
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	b662      	cpsie	i
 80063d4:	e7fe      	b.n	80063d4 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	e7ec      	b.n	80063b6 <pvPortMalloc+0xd6>
}
 80063dc:	4640      	mov	r0, r8
 80063de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e2:	bf00      	nop
 80063e4:	20000c9c 	.word	0x20000c9c
 80063e8:	20000cb4 	.word	0x20000cb4

080063ec <vPortFree>:
{
 80063ec:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80063ee:	4604      	mov	r4, r0
 80063f0:	b388      	cbz	r0, 8006456 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063f2:	4d19      	ldr	r5, [pc, #100]	@ (8006458 <vPortFree+0x6c>)
 80063f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80063f8:	696a      	ldr	r2, [r5, #20]
 80063fa:	4213      	tst	r3, r2
 80063fc:	d10a      	bne.n	8006414 <vPortFree+0x28>
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	b672      	cpsid	i
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	b662      	cpsie	i
 8006412:	e7fe      	b.n	8006412 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006414:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006418:	b151      	cbz	r1, 8006430 <vPortFree+0x44>
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	b672      	cpsid	i
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	b662      	cpsie	i
 800642e:	e7fe      	b.n	800642e <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006430:	ea23 0302 	bic.w	r3, r3, r2
 8006434:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006438:	f7ff fc44 	bl	8005cc4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800643c:	692a      	ldr	r2, [r5, #16]
 800643e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006442:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006446:	4413      	add	r3, r2
 8006448:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800644a:	f7ff ff25 	bl	8006298 <prvInsertBlockIntoFreeList>
}
 800644e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8006452:	f7ff bcc3 	b.w	8005ddc <xTaskResumeAll>
}
 8006456:	bd38      	pop	{r3, r4, r5, pc}
 8006458:	20000c9c 	.word	0x20000c9c

0800645c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800645c:	4808      	ldr	r0, [pc, #32]	@ (8006480 <prvPortStartFirstTask+0x24>)
 800645e:	6800      	ldr	r0, [r0, #0]
 8006460:	6800      	ldr	r0, [r0, #0]
 8006462:	f380 8808 	msr	MSP, r0
 8006466:	f04f 0000 	mov.w	r0, #0
 800646a:	f380 8814 	msr	CONTROL, r0
 800646e:	b662      	cpsie	i
 8006470:	b661      	cpsie	f
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	df00      	svc	0
 800647c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800647e:	0000      	.short	0x0000
 8006480:	e000ed08 	.word	0xe000ed08

08006484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006494 <vPortEnableVFP+0x10>
 8006488:	6801      	ldr	r1, [r0, #0]
 800648a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800648e:	6001      	str	r1, [r0, #0]
 8006490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006492:	0000      	.short	0x0000
 8006494:	e000ed88 	.word	0xe000ed88

08006498 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8006498:	2300      	movs	r3, #0
{
 800649a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800649c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800649e:	4b0f      	ldr	r3, [pc, #60]	@ (80064dc <prvTaskExitError+0x44>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	d00a      	beq.n	80064bc <prvTaskExitError+0x24>
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	b672      	cpsid	i
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	b662      	cpsie	i
 80064ba:	e7fe      	b.n	80064ba <prvTaskExitError+0x22>
 80064bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c0:	b672      	cpsid	i
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	b662      	cpsie	i
	while( ulDummy == 0 )
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0fc      	beq.n	80064d0 <prvTaskExitError+0x38>
}
 80064d6:	b002      	add	sp, #8
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000010 	.word	0x20000010

080064e0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064e4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064e8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80064ec:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064ee:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f0:	4b03      	ldr	r3, [pc, #12]	@ (8006500 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064f2:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f4:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064f6:	f06f 0302 	mvn.w	r3, #2
 80064fa:	6203      	str	r3, [r0, #32]
}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	08006499 	.word	0x08006499
	...

08006510 <SVC_Handler>:
	__asm volatile (
 8006510:	4b07      	ldr	r3, [pc, #28]	@ (8006530 <pxCurrentTCBConst2>)
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	6808      	ldr	r0, [r1, #0]
 8006516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	f380 8809 	msr	PSP, r0
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8811 	msr	BASEPRI, r0
 800652a:	4770      	bx	lr
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst2>:
 8006530:	20000b74 	.word	0x20000b74

08006534 <vPortEnterCritical>:
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	b672      	cpsid	i
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	b662      	cpsie	i
	uxCriticalNesting++;
 8006548:	4a0b      	ldr	r2, [pc, #44]	@ (8006578 <vPortEnterCritical+0x44>)
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800654e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006552:	d110      	bne.n	8006576 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006554:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006558:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800655c:	b2db      	uxtb	r3, r3
 800655e:	b153      	cbz	r3, 8006576 <vPortEnterCritical+0x42>
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	b672      	cpsid	i
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	b662      	cpsie	i
 8006574:	e7fe      	b.n	8006574 <vPortEnterCritical+0x40>
}
 8006576:	4770      	bx	lr
 8006578:	20000010 	.word	0x20000010

0800657c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800657c:	4a09      	ldr	r2, [pc, #36]	@ (80065a4 <vPortExitCritical+0x28>)
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	b953      	cbnz	r3, 8006598 <vPortExitCritical+0x1c>
 8006582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006586:	b672      	cpsid	i
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	b662      	cpsie	i
 8006596:	e7fe      	b.n	8006596 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8006598:	3b01      	subs	r3, #1
 800659a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800659c:	b90b      	cbnz	r3, 80065a2 <vPortExitCritical+0x26>
	__asm volatile
 800659e:	f383 8811 	msr	BASEPRI, r3
}
 80065a2:	4770      	bx	lr
 80065a4:	20000010 	.word	0x20000010
	...

080065b0 <PendSV_Handler>:
	__asm volatile
 80065b0:	f3ef 8009 	mrs	r0, PSP
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <pxCurrentTCBConst>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f01e 0f10 	tst.w	lr, #16
 80065c0:	bf08      	it	eq
 80065c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	6010      	str	r0, [r2, #0]
 80065cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065d4:	b672      	cpsid	i
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	b662      	cpsie	i
 80065e4:	f7ff fc66 	bl	8005eb4 <vTaskSwitchContext>
 80065e8:	f04f 0000 	mov.w	r0, #0
 80065ec:	f380 8811 	msr	BASEPRI, r0
 80065f0:	bc09      	pop	{r0, r3}
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f01e 0f10 	tst.w	lr, #16
 80065fe:	bf08      	it	eq
 8006600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006604:	f380 8809 	msr	PSP, r0
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <pxCurrentTCBConst>:
 8006610:	20000b74 	.word	0x20000b74

08006614 <xPortSysTickHandler>:
{
 8006614:	b508      	push	{r3, lr}
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	b672      	cpsid	i
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800662a:	f7ff fb63 	bl	8005cf4 <xTaskIncrementTick>
 800662e:	b128      	cbz	r0, 800663c <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006630:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006638:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800663c:	2300      	movs	r3, #0
 800663e:	f383 8811 	msr	BASEPRI, r3
}
 8006642:	bd08      	pop	{r3, pc}

08006644 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006644:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006648:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800664a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800664e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006650:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006652:	4b04      	ldr	r3, [pc, #16]	@ (8006664 <vPortSetupTimerInterrupt+0x20>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	fbb3 f3f1 	udiv	r3, r3, r1
 800665a:	3b01      	subs	r3, #1
 800665c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800665e:	2307      	movs	r3, #7
 8006660:	6113      	str	r3, [r2, #16]
}
 8006662:	4770      	bx	lr
 8006664:	20000000 	.word	0x20000000

08006668 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006668:	4b2c      	ldr	r3, [pc, #176]	@ (800671c <xPortStartScheduler+0xb4>)
{
 800666a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006672:	22ff      	movs	r2, #255	@ 0xff
 8006674:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800667e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006682:	4b27      	ldr	r3, [pc, #156]	@ (8006720 <xPortStartScheduler+0xb8>)
 8006684:	f002 0250 	and.w	r2, r2, #80	@ 0x50
 8006688:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800668a:	2207      	movs	r2, #7
 800668c:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800668e:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8006692:	685a      	ldr	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006694:	0609      	lsls	r1, r1, #24
 8006696:	d40c      	bmi.n	80066b2 <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006698:	2a03      	cmp	r2, #3
 800669a:	d013      	beq.n	80066c4 <xPortStartScheduler+0x5c>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a0:	b672      	cpsid	i
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	b662      	cpsie	i
 80066b0:	e7fe      	b.n	80066b0 <xPortStartScheduler+0x48>
			ulMaxPRIGROUPValue--;
 80066b2:	3a01      	subs	r2, #1
 80066b4:	605a      	str	r2, [r3, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80066ba:	0052      	lsls	r2, r2, #1
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	f88d 2003 	strb.w	r2, [sp, #3]
 80066c2:	e7e4      	b.n	800668e <xPortStartScheduler+0x26>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066c4:	f44f 7240 	mov.w	r2, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066c8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 80066cc:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066ce:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	4a12      	ldr	r2, [pc, #72]	@ (800671c <xPortStartScheduler+0xb4>)
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066d8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80066dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066e0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80066e8:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066ec:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80066f0:	f7ff ffa8 	bl	8006644 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80066f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <xPortStartScheduler+0xbc>)
 80066f6:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80066f8:	f7ff fec4 	bl	8006484 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066fc:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006700:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006704:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006708:	f7ff fea8 	bl	800645c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800670c:	f7ff fbd2 	bl	8005eb4 <vTaskSwitchContext>
}
 8006710:	4628      	mov	r0, r5
	prvTaskExitError();
 8006712:	f7ff fec1 	bl	8006498 <prvTaskExitError>
}
 8006716:	b003      	add	sp, #12
 8006718:	bd30      	pop	{r4, r5, pc}
 800671a:	bf00      	nop
 800671c:	e000e400 	.word	0xe000e400
 8006720:	200024b4 	.word	0x200024b4
 8006724:	20000010 	.word	0x20000010

08006728 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006728:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800672c:	2b0f      	cmp	r3, #15
 800672e:	4a13      	ldr	r2, [pc, #76]	@ (800677c <vPortValidateInterruptPriority+0x54>)
 8006730:	d90f      	bls.n	8006752 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006732:	4913      	ldr	r1, [pc, #76]	@ (8006780 <vPortValidateInterruptPriority+0x58>)
 8006734:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006736:	7811      	ldrb	r1, [r2, #0]
 8006738:	4299      	cmp	r1, r3
 800673a:	d90a      	bls.n	8006752 <vPortValidateInterruptPriority+0x2a>
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	b672      	cpsid	i
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	b662      	cpsie	i
 8006750:	e7fe      	b.n	8006750 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006752:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006756:	6852      	ldr	r2, [r2, #4]
 8006758:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800675c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006760:	4293      	cmp	r3, r2
 8006762:	d90a      	bls.n	800677a <vPortValidateInterruptPriority+0x52>
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	b672      	cpsid	i
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	b662      	cpsie	i
 8006778:	e7fe      	b.n	8006778 <vPortValidateInterruptPriority+0x50>
	}
 800677a:	4770      	bx	lr
 800677c:	200024b4 	.word	0x200024b4
 8006780:	e000e3f0 	.word	0xe000e3f0

08006784 <__libc_init_array>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	4d0d      	ldr	r5, [pc, #52]	@ (80067bc <__libc_init_array+0x38>)
 8006788:	4c0d      	ldr	r4, [pc, #52]	@ (80067c0 <__libc_init_array+0x3c>)
 800678a:	1b64      	subs	r4, r4, r5
 800678c:	10a4      	asrs	r4, r4, #2
 800678e:	2600      	movs	r6, #0
 8006790:	42a6      	cmp	r6, r4
 8006792:	d109      	bne.n	80067a8 <__libc_init_array+0x24>
 8006794:	4d0b      	ldr	r5, [pc, #44]	@ (80067c4 <__libc_init_array+0x40>)
 8006796:	4c0c      	ldr	r4, [pc, #48]	@ (80067c8 <__libc_init_array+0x44>)
 8006798:	f000 f826 	bl	80067e8 <_init>
 800679c:	1b64      	subs	r4, r4, r5
 800679e:	10a4      	asrs	r4, r4, #2
 80067a0:	2600      	movs	r6, #0
 80067a2:	42a6      	cmp	r6, r4
 80067a4:	d105      	bne.n	80067b2 <__libc_init_array+0x2e>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ac:	4798      	blx	r3
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7ee      	b.n	8006790 <__libc_init_array+0xc>
 80067b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b6:	4798      	blx	r3
 80067b8:	3601      	adds	r6, #1
 80067ba:	e7f2      	b.n	80067a2 <__libc_init_array+0x1e>
 80067bc:	08006d30 	.word	0x08006d30
 80067c0:	08006d30 	.word	0x08006d30
 80067c4:	08006d30 	.word	0x08006d30
 80067c8:	08006d34 	.word	0x08006d34

080067cc <memcpy>:
 80067cc:	440a      	add	r2, r1
 80067ce:	4291      	cmp	r1, r2
 80067d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80067d4:	d100      	bne.n	80067d8 <memcpy+0xc>
 80067d6:	4770      	bx	lr
 80067d8:	b510      	push	{r4, lr}
 80067da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067e2:	4291      	cmp	r1, r2
 80067e4:	d1f9      	bne.n	80067da <memcpy+0xe>
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
