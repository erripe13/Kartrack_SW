
little_driver_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c9c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08011e64  08011e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ea0  08011ea0  000131bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011ea0  08011ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ea8  08011ea8  000131bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ea8  08011ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011eac  08011eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08011eb0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08011f2c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08011fcc  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001284  200001bc  0801206c  000131bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001440  0801206c  00013440  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000131bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a9e4  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009045  00000000  00000000  0004dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f60  00000000  00000000  00056c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002455  00000000  00000000  00059b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037902  00000000  00000000  0005bfcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047e6b  00000000  00000000  000938cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00121ebc  00000000  00000000  000db73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001fd5f6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c850  00000000  00000000  001fd63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000074  00000000  00000000  00209e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001bc 	.word	0x200001bc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08011e4c 	.word	0x08011e4c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001c0 	.word	0x200001c0
 8000204:	08011e4c 	.word	0x08011e4c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000556:	4b21      	ldr	r3, [pc, #132]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000558:	4a21      	ldr	r2, [pc, #132]	@ (80005e0 <MX_ADC3_Init+0x9c>)
 800055a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800055c:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <MX_ADC3_Init+0x98>)
 800055e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000562:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000564:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056a:	4b1c      	ldr	r3, [pc, #112]	@ (80005dc <MX_ADC3_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000570:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000586:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <MX_ADC3_Init+0xa0>)
 8000588:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <MX_ADC3_Init+0x98>)
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000592:	2201      	movs	r2, #1
 8000594:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_ADC3_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_ADC3_Init+0x98>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <MX_ADC3_Init+0x98>)
 80005a6:	f002 fc8b 	bl	8002ec0 <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80005b0:	f001 f92e 	bl	8001810 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	@ (80005dc <MX_ADC3_Init+0x98>)
 80005c6:	f002 fcbf 	bl	8002f48 <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80005d0:	f001 f91e 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200001d8 	.word	0x200001d8
 80005e0:	40012200 	.word	0x40012200
 80005e4:	0f000001 	.word	0x0f000001

080005e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <HAL_ADC_MspInit+0xa4>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d13c      	bne.n	8000684 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060e:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000614:	6453      	str	r3, [r2, #68]	@ 0x44
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800061a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_ADC_MspInit+0xa8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000652:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000656:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <HAL_ADC_MspInit+0xac>)
 8000668:	f003 fedc 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800066c:	2301      	movs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <HAL_ADC_MspInit+0xb0>)
 8000680:	f003 fed0 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012200 	.word	0x40012200
 8000690:	40023800 	.word	0x40023800
 8000694:	40021400 	.word	0x40021400
 8000698:	40020000 	.word	0x40020000

0800069c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <MX_CRC_Init+0x40>)
 80006a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_CRC_Init+0x3c>)
 80006c6:	f002 ff75 	bl	80035b4 <HAL_CRC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006d0:	f001 f89e 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000220 	.word	0x20000220
 80006dc:	40023000 	.word	0x40023000

080006e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <HAL_CRC_MspInit+0x38>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d10b      	bne.n	800070a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <HAL_CRC_MspInit+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a09      	ldr	r2, [pc, #36]	@ (800071c <HAL_CRC_MspInit+0x3c>)
 80006f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <HAL_CRC_MspInit+0x3c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023000 	.word	0x40023000
 800071c:	40023800 	.word	0x40023800

08000720 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <MX_DCMI_Init+0x64>)
 8000728:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_DCMI_Init+0x60>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_DCMI_Init+0x60>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000748:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <MX_DCMI_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_DCMI_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_DCMI_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_DCMI_Init+0x60>)
 800076e:	f003 f813 	bl	8003798 <HAL_DCMI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000778:	f001 f84a 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000244 	.word	0x20000244
 8000784:	50050000 	.word	0x50050000

08000788 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	@ 0x38
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a50      	ldr	r2, [pc, #320]	@ (80008e8 <HAL_DCMI_MspInit+0x160>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	f040 809a 	bne.w	80008e0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80007ac:	4b4f      	ldr	r3, [pc, #316]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b0:	4a4e      	ldr	r2, [pc, #312]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80007b8:	4b4c      	ldr	r3, [pc, #304]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c4:	4b49      	ldr	r3, [pc, #292]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c8:	4a48      	ldr	r2, [pc, #288]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d0:	4b46      	ldr	r3, [pc, #280]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	61fb      	str	r3, [r7, #28]
 80007da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007dc:	4b43      	ldr	r3, [pc, #268]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a42      	ldr	r2, [pc, #264]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e8:	4b40      	ldr	r3, [pc, #256]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f4:	4b3d      	ldr	r3, [pc, #244]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f8:	4a3c      	ldr	r2, [pc, #240]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 80007fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000800:	4b3a      	ldr	r3, [pc, #232]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800080c:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000810:	4a36      	ldr	r2, [pc, #216]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 8000812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000816:	6313      	str	r3, [r2, #48]	@ 0x30
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	4a30      	ldr	r2, [pc, #192]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000830:	4b2e      	ldr	r3, [pc, #184]	@ (80008ec <HAL_DCMI_MspInit+0x164>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800083c:	2360      	movs	r3, #96	@ 0x60
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084c:	230d      	movs	r3, #13
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	4826      	ldr	r0, [pc, #152]	@ (80008f0 <HAL_DCMI_MspInit+0x168>)
 8000858:	f003 fde4 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086c:	230d      	movs	r3, #13
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	481f      	ldr	r0, [pc, #124]	@ (80008f4 <HAL_DCMI_MspInit+0x16c>)
 8000878:	f003 fdd4 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800087c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800088e:	230d      	movs	r3, #13
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4817      	ldr	r0, [pc, #92]	@ (80008f8 <HAL_DCMI_MspInit+0x170>)
 800089a:	f003 fdc3 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800089e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b0:	230d      	movs	r3, #13
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	@ (80008fc <HAL_DCMI_MspInit+0x174>)
 80008bc:	f003 fdb2 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80008c0:	2350      	movs	r3, #80	@ 0x50
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d0:	230d      	movs	r3, #13
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <HAL_DCMI_MspInit+0x178>)
 80008dc:	f003 fda2 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	@ 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	50050000 	.word	0x50050000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40021c00 	.word	0x40021c00
 8000900:	40020000 	.word	0x40020000

08000904 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	@ (8000964 <MX_DMA2D_Init+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800093a:	f003 f839 	bl	80039b0 <HAL_DMA2D_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000944:	f000 ff64 	bl	8001810 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000948:	2101      	movs	r1, #1
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_DMA2D_Init+0x5c>)
 800094c:	f003 f98a 	bl	8003c64 <HAL_DMA2D_ConfigLayer>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 ff5b 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000294 	.word	0x20000294
 8000964:	4002b000 	.word	0x4002b000

08000968 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <HAL_DMA2D_MspInit+0x44>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d113      	bne.n	80009a2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_DMA2D_MspInit+0x48>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <HAL_DMA2D_MspInit+0x48>)
 8000980:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_DMA2D_MspInit+0x48>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	205a      	movs	r0, #90	@ 0x5a
 8000998:	f002 fde2 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800099c:	205a      	movs	r0, #90	@ 0x5a
 800099e:	f002 fdfb 	bl	8003598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	4002b000 	.word	0x4002b000
 80009b0:	40023800 	.word	0x40023800

080009b4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ETH_Init+0x84>)
 80009ba:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <MX_ETH_Init+0x88>)
 80009bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009cc:	22e1      	movs	r2, #225	@ 0xe1
 80009ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_ETH_Init+0x84>)
 80009e4:	4a16      	ldr	r2, [pc, #88]	@ (8000a40 <MX_ETH_Init+0x8c>)
 80009e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_ETH_Init+0x84>)
 80009ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_ETH_Init+0x84>)
 80009f2:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <MX_ETH_Init+0x90>)
 80009f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_ETH_Init+0x84>)
 80009f8:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <MX_ETH_Init+0x94>)
 80009fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_ETH_Init+0x84>)
 80009fe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a02:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_ETH_Init+0x84>)
 8000a06:	f003 f9bf 	bl	8003d88 <HAL_ETH_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a10:	f000 fefe 	bl	8001810 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a14:	2238      	movs	r2, #56	@ 0x38
 8000a16:	2100      	movs	r1, #0
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <MX_ETH_Init+0x98>)
 8000a1a:	f011 f989 	bl	8011d30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_ETH_Init+0x98>)
 8000a20:	2221      	movs	r2, #33	@ 0x21
 8000a22:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_ETH_Init+0x98>)
 8000a26:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a2a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_ETH_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000030c 	.word	0x2000030c
 8000a3c:	40028000 	.word	0x40028000
 8000a40:	200003bc 	.word	0x200003bc
 8000a44:	2000011c 	.word	0x2000011c
 8000a48:	2000007c 	.word	0x2000007c
 8000a4c:	200002d4 	.word	0x200002d4

08000a50 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a3f      	ldr	r2, [pc, #252]	@ (8000b6c <HAL_ETH_MspInit+0x11c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d178      	bne.n	8000b64 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a72:	4b3f      	ldr	r3, [pc, #252]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a3e      	ldr	r2, [pc, #248]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000a78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a38      	ldr	r2, [pc, #224]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000a90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	4b33      	ldr	r3, [pc, #204]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a32      	ldr	r2, [pc, #200]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000aa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a2c      	ldr	r2, [pc, #176]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a26      	ldr	r2, [pc, #152]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a20      	ldr	r2, [pc, #128]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <HAL_ETH_MspInit+0x120>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b02:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4815      	ldr	r0, [pc, #84]	@ (8000b74 <HAL_ETH_MspInit+0x124>)
 8000b20:	f003 fc80 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b24:	2332      	movs	r3, #50	@ 0x32
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b34:	230b      	movs	r3, #11
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480e      	ldr	r0, [pc, #56]	@ (8000b78 <HAL_ETH_MspInit+0x128>)
 8000b40:	f003 fc70 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b44:	2386      	movs	r3, #134	@ 0x86
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b54:	230b      	movs	r3, #11
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <HAL_ETH_MspInit+0x12c>)
 8000b60:	f003 fc60 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000b64:	bf00      	nop
 8000b66:	3738      	adds	r7, #56	@ 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40028000 	.word	0x40028000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000b9a:	4a20      	ldr	r2, [pc, #128]	@ (8000c1c <MX_FMC_Init+0x9c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bb8:	2240      	movs	r2, #64	@ 0x40
 8000bba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000bc2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000be4:	2307      	movs	r3, #7
 8000be6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_FMC_Init+0x98>)
 8000c02:	f009 fd88 	bl	800a716 <HAL_SDRAM_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c0c:	f000 fe00 	bl	8001810 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200003c4 	.word	0x200003c4
 8000c1c:	a0000140 	.word	0xa0000140

08000c20 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c34:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <HAL_FMC_MspInit+0x100>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d16d      	bne.n	8000d18 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <HAL_FMC_MspInit+0x100>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c42:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <HAL_FMC_MspInit+0x104>)
 8000c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c46:	4a37      	ldr	r2, [pc, #220]	@ (8000d24 <HAL_FMC_MspInit+0x104>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c4e:	4b35      	ldr	r3, [pc, #212]	@ (8000d24 <HAL_FMC_MspInit+0x104>)
 8000c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c5a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000c5e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	482c      	ldr	r0, [pc, #176]	@ (8000d28 <HAL_FMC_MspInit+0x108>)
 8000c76:	f003 fbd5 	bl	8004424 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c7a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c7e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4825      	ldr	r0, [pc, #148]	@ (8000d2c <HAL_FMC_MspInit+0x10c>)
 8000c96:	f003 fbc5 	bl	8004424 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c9a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c9e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cac:	230c      	movs	r3, #12
 8000cae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481e      	ldr	r0, [pc, #120]	@ (8000d30 <HAL_FMC_MspInit+0x110>)
 8000cb6:	f003 fbb5 	bl	8004424 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000cba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000cbe:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <HAL_FMC_MspInit+0x114>)
 8000cd6:	f003 fba5 	bl	8004424 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000cda:	2328      	movs	r3, #40	@ 0x28
 8000cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cea:	230c      	movs	r3, #12
 8000cec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <HAL_FMC_MspInit+0x118>)
 8000cf4:	f003 fb96 	bl	8004424 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480a      	ldr	r0, [pc, #40]	@ (8000d3c <HAL_FMC_MspInit+0x11c>)
 8000d12:	f003 fb87 	bl	8004424 <HAL_GPIO_Init>
 8000d16:	e000      	b.n	8000d1a <HAL_FMC_MspInit+0xfa>
    return;
 8000d18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200003f8 	.word	0x200003f8
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40021800 	.word	0x40021800
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40021400 	.word	0x40021400
 8000d38:	40021c00 	.word	0x40021c00
 8000d3c:	40020800 	.word	0x40020800

08000d40 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d48:	f7ff ff6a 	bl	8000c20 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	@ 0x40
 8000d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4bb0      	ldr	r3, [pc, #704]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4aaf      	ldr	r2, [pc, #700]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4bad      	ldr	r3, [pc, #692]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d82:	4baa      	ldr	r3, [pc, #680]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4aa9      	ldr	r2, [pc, #676]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4ba7      	ldr	r3, [pc, #668]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4ba4      	ldr	r3, [pc, #656]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4aa3      	ldr	r2, [pc, #652]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4ba1      	ldr	r3, [pc, #644]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	4b9e      	ldr	r3, [pc, #632]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a9d      	ldr	r2, [pc, #628]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b9b      	ldr	r3, [pc, #620]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b98      	ldr	r3, [pc, #608]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a97      	ldr	r2, [pc, #604]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b95      	ldr	r3, [pc, #596]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b92      	ldr	r3, [pc, #584]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a91      	ldr	r2, [pc, #580]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b8f      	ldr	r3, [pc, #572]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dfa:	4b8c      	ldr	r3, [pc, #560]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a8b      	ldr	r2, [pc, #556]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b89      	ldr	r3, [pc, #548]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e12:	4b86      	ldr	r3, [pc, #536]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a85      	ldr	r2, [pc, #532]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b83      	ldr	r3, [pc, #524]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e2a:	4b80      	ldr	r3, [pc, #512]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a7f      	ldr	r2, [pc, #508]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b7d      	ldr	r3, [pc, #500]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e42:	4b7a      	ldr	r3, [pc, #488]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a79      	ldr	r2, [pc, #484]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b77      	ldr	r3, [pc, #476]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	4b74      	ldr	r3, [pc, #464]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a73      	ldr	r2, [pc, #460]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b71      	ldr	r3, [pc, #452]	@ (800102c <MX_GPIO_Init+0x2d8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2120      	movs	r1, #32
 8000e76:	486e      	ldr	r0, [pc, #440]	@ (8001030 <MX_GPIO_Init+0x2dc>)
 8000e78:	f003 fc98 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	210c      	movs	r1, #12
 8000e80:	486c      	ldr	r0, [pc, #432]	@ (8001034 <MX_GPIO_Init+0x2e0>)
 8000e82:	f003 fc93 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2108      	movs	r1, #8
 8000e8a:	486b      	ldr	r0, [pc, #428]	@ (8001038 <MX_GPIO_Init+0x2e4>)
 8000e8c:	f003 fc8e 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e96:	4867      	ldr	r0, [pc, #412]	@ (8001034 <MX_GPIO_Init+0x2e0>)
 8000e98:	f003 fc88 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea2:	4866      	ldr	r0, [pc, #408]	@ (800103c <MX_GPIO_Init+0x2e8>)
 8000ea4:	f003 fc82 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	21c8      	movs	r1, #200	@ 0xc8
 8000eac:	4864      	ldr	r0, [pc, #400]	@ (8001040 <MX_GPIO_Init+0x2ec>)
 8000eae:	f003 fc7d 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	485f      	ldr	r0, [pc, #380]	@ (8001044 <MX_GPIO_Init+0x2f0>)
 8000ec6:	f003 faad 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000eca:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000edc:	230a      	movs	r3, #10
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4858      	ldr	r0, [pc, #352]	@ (8001048 <MX_GPIO_Init+0x2f4>)
 8000ee8:	f003 fa9c 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	4852      	ldr	r0, [pc, #328]	@ (800104c <MX_GPIO_Init+0x2f8>)
 8000f02:	f003 fa8f 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f06:	2340      	movs	r3, #64	@ 0x40
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f0a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4845      	ldr	r0, [pc, #276]	@ (8001030 <MX_GPIO_Init+0x2dc>)
 8000f1c:	f003 fa82 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f20:	2320      	movs	r3, #32
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	483e      	ldr	r0, [pc, #248]	@ (8001030 <MX_GPIO_Init+0x2dc>)
 8000f38:	f003 fa74 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f3c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4837      	ldr	r0, [pc, #220]	@ (8001034 <MX_GPIO_Init+0x2e0>)
 8000f56:	f003 fa65 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4838      	ldr	r0, [pc, #224]	@ (8001050 <MX_GPIO_Init+0x2fc>)
 8000f70:	f003 fa58 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f74:	2308      	movs	r3, #8
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482b      	ldr	r0, [pc, #172]	@ (8001038 <MX_GPIO_Init+0x2e4>)
 8000f8c:	f003 fa4a 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f90:	2310      	movs	r3, #16
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4823      	ldr	r0, [pc, #140]	@ (8001030 <MX_GPIO_Init+0x2dc>)
 8000fa4:	f003 fa3e 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000fa8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481f      	ldr	r0, [pc, #124]	@ (800103c <MX_GPIO_Init+0x2e8>)
 8000fbe:	f003 fa31 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4818      	ldr	r0, [pc, #96]	@ (800103c <MX_GPIO_Init+0x2e8>)
 8000fdc:	f003 fa22 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480f      	ldr	r0, [pc, #60]	@ (8001034 <MX_GPIO_Init+0x2e0>)
 8000ff8:	f003 fa14 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800100c:	230a      	movs	r3, #10
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001014:	4619      	mov	r1, r3
 8001016:	4809      	ldr	r0, [pc, #36]	@ (800103c <MX_GPIO_Init+0x2e8>)
 8001018:	f003 fa04 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800101c:	23c8      	movs	r3, #200	@ 0xc8
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
 8001028:	e014      	b.n	8001054 <MX_GPIO_Init+0x300>
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40022000 	.word	0x40022000
 8001038:	40022800 	.word	0x40022800
 800103c:	40021c00 	.word	0x40021c00
 8001040:	40021800 	.word	0x40021800
 8001044:	40021000 	.word	0x40021000
 8001048:	40020400 	.word	0x40020400
 800104c:	40022400 	.word	0x40022400
 8001050:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001058:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800105c:	4619      	mov	r1, r3
 800105e:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <MX_GPIO_Init+0x370>)
 8001060:	f003 f9e0 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001064:	2305      	movs	r3, #5
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001074:	230a      	movs	r3, #10
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107c:	4619      	mov	r1, r3
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <MX_GPIO_Init+0x374>)
 8001080:	f003 f9d0 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001084:	2304      	movs	r3, #4
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001094:	4619      	mov	r1, r3
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <MX_GPIO_Init+0x370>)
 8001098:	f003 f9c4 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800109c:	2328      	movs	r3, #40	@ 0x28
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010ac:	230a      	movs	r3, #10
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_GPIO_Init+0x378>)
 80010b8:	f003 f9b4 	bl	8004424 <HAL_GPIO_Init>

}
 80010bc:	bf00      	nop
 80010be:	3740      	adds	r7, #64	@ 0x40
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021800 	.word	0x40021800
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020000 	.word	0x40020000

080010d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	@ (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f005 fc9c 	bl	8006a48 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f000 fb7b 	bl	8001810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	@ (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f005 fd2f 	bl	8006b80 <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f000 fb72 	bl	8001810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f005 fd71 	bl	8006c16 <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fb69 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200003fc 	.word	0x200003fc
 8001148:	40005400 	.word	0x40005400
 800114c:	00c0eaff 	.word	0x00c0eaff

08001150 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C3_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C3_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C3_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800118c:	f005 fc5c 	bl	8006a48 <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fb3b 	bl	8001810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C3_Init+0x74>)
 800119e:	f005 fcef 	bl	8006b80 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fb32 	bl	8001810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_I2C3_Init+0x74>)
 80011b0:	f005 fd31 	bl	8006c16 <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fb29 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000450 	.word	0x20000450
 80011c8:	40005c00 	.word	0x40005c00
 80011cc:	00c0eaff 	.word	0x00c0eaff

080011d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0ac      	sub	sp, #176	@ 0xb0
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2284      	movs	r2, #132	@ 0x84
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f010 fd9d 	bl	8011d30 <memset>
  if(i2cHandle->Instance==I2C1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a44      	ldr	r2, [pc, #272]	@ (800130c <HAL_I2C_MspInit+0x13c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d13d      	bne.n	800127c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001200:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001204:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001206:	2300      	movs	r3, #0
 8001208:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fe3e 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800121a:	f000 faf9 	bl	8001810 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b3c      	ldr	r3, [pc, #240]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a3b      	ldr	r2, [pc, #236]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b39      	ldr	r3, [pc, #228]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001236:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800123a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123e:	2312      	movs	r3, #18
 8001240:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001250:	2304      	movs	r3, #4
 8001252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	482d      	ldr	r0, [pc, #180]	@ (8001314 <HAL_I2C_MspInit+0x144>)
 800125e:	f003 f8e1 	bl	8004424 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001262:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a2a      	ldr	r2, [pc, #168]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800127a:	e042      	b.n	8001302 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_I2C_MspInit+0x148>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d13d      	bne.n	8001302 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f006 fdfa 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80012a2:	f000 fab5 	bl	8001810 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012be:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c6:	2312      	movs	r3, #18
 80012c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012d8:	2304      	movs	r3, #4
 80012da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012e2:	4619      	mov	r1, r3
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <HAL_I2C_MspInit+0x14c>)
 80012e6:	f003 f89d 	bl	8004424 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 80012f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_I2C_MspInit+0x140>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
}
 8001302:	bf00      	nop
 8001304:	37b0      	adds	r7, #176	@ 0xb0
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400
 8001318:	40005c00 	.word	0x40005c00
 800131c:	40021c00 	.word	0x40021c00

08001320 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	@ 0x38
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2234      	movs	r2, #52	@ 0x34
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f010 fcff 	bl	8011d30 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001332:	4b3a      	ldr	r3, [pc, #232]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001334:	4a3a      	ldr	r2, [pc, #232]	@ (8001420 <MX_LTDC_Init+0x100>)
 8001336:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001338:	4b38      	ldr	r3, [pc, #224]	@ (800141c <MX_LTDC_Init+0xfc>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800133e:	4b37      	ldr	r3, [pc, #220]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001344:	4b35      	ldr	r3, [pc, #212]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800134a:	4b34      	ldr	r3, [pc, #208]	@ (800141c <MX_LTDC_Init+0xfc>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001350:	4b32      	ldr	r3, [pc, #200]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001352:	2228      	movs	r2, #40	@ 0x28
 8001354:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001356:	4b31      	ldr	r3, [pc, #196]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001358:	2209      	movs	r2, #9
 800135a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800135c:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <MX_LTDC_Init+0xfc>)
 800135e:	2235      	movs	r2, #53	@ 0x35
 8001360:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001362:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001364:	220b      	movs	r2, #11
 8001366:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001368:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <MX_LTDC_Init+0xfc>)
 800136a:	f240 2215 	movw	r2, #533	@ 0x215
 800136e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001372:	f240 121b 	movw	r2, #283	@ 0x11b
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_LTDC_Init+0xfc>)
 800137a:	f240 2235 	movw	r2, #565	@ 0x235
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001380:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001382:	f240 121d 	movw	r2, #285	@ 0x11d
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <MX_LTDC_Init+0xfc>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001398:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_LTDC_Init+0xfc>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013a0:	481e      	ldr	r0, [pc, #120]	@ (800141c <MX_LTDC_Init+0xfc>)
 80013a2:	f005 fc84 	bl	8006cae <HAL_LTDC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013ac:	f000 fa30 	bl	8001810 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013b4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80013c2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013c8:	23ff      	movs	r3, #255	@ 0xff
 80013ca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013d4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013d6:	2307      	movs	r3, #7
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013da:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80013e0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80013e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_LTDC_Init+0xfc>)
 8001406:	f005 fdb1 	bl	8006f6c <HAL_LTDC_ConfigLayer>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001410:	f000 f9fe 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3738      	adds	r7, #56	@ 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200004a4 	.word	0x200004a4
 8001420:	40016800 	.word	0x40016800

08001424 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	@ 0x38
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a55      	ldr	r2, [pc, #340]	@ (8001598 <HAL_LTDC_MspInit+0x174>)
 8001442:	4293      	cmp	r3, r2
 8001444:	f040 80a3 	bne.w	800158e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001448:	4b54      	ldr	r3, [pc, #336]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144c:	4a53      	ldr	r2, [pc, #332]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 800144e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001452:	6453      	str	r3, [r2, #68]	@ 0x44
 8001454:	4b51      	ldr	r3, [pc, #324]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001460:	4b4e      	ldr	r3, [pc, #312]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4a4d      	ldr	r2, [pc, #308]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	6313      	str	r3, [r2, #48]	@ 0x30
 800146c:	4b4b      	ldr	r3, [pc, #300]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001478:	4b48      	ldr	r3, [pc, #288]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	4a47      	ldr	r2, [pc, #284]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001482:	6313      	str	r3, [r2, #48]	@ 0x30
 8001484:	4b45      	ldr	r3, [pc, #276]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001490:	4b42      	ldr	r3, [pc, #264]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001494:	4a41      	ldr	r2, [pc, #260]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 8001496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800149a:	6313      	str	r3, [r2, #48]	@ 0x30
 800149c:	4b3f      	ldr	r3, [pc, #252]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a8:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a3b      	ldr	r2, [pc, #236]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 80014ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b39      	ldr	r3, [pc, #228]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014c0:	4b36      	ldr	r3, [pc, #216]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c4:	4a35      	ldr	r2, [pc, #212]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <HAL_LTDC_MspInit+0x178>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80014d8:	2310      	movs	r3, #16
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014e8:	230e      	movs	r3, #14
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	482b      	ldr	r0, [pc, #172]	@ (80015a0 <HAL_LTDC_MspInit+0x17c>)
 80014f4:	f002 ff96 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80014f8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800150a:	230e      	movs	r3, #14
 800150c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4823      	ldr	r0, [pc, #140]	@ (80015a4 <HAL_LTDC_MspInit+0x180>)
 8001516:	f002 ff85 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800151a:	23f7      	movs	r3, #247	@ 0xf7
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800152a:	230e      	movs	r3, #14
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	@ (80015a8 <HAL_LTDC_MspInit+0x184>)
 8001536:	f002 ff75 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800153a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800154c:	2309      	movs	r3, #9
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4815      	ldr	r0, [pc, #84]	@ (80015ac <HAL_LTDC_MspInit+0x188>)
 8001558:	f002 ff64 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800155c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800156e:	230e      	movs	r3, #14
 8001570:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <HAL_LTDC_MspInit+0x18c>)
 800157a:	f002 ff53 	bl	8004424 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2058      	movs	r0, #88	@ 0x58
 8001584:	f001 ffec 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001588:	2058      	movs	r0, #88	@ 0x58
 800158a:	f002 f805 	bl	8003598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800158e:	bf00      	nop
 8001590:	3738      	adds	r7, #56	@ 0x38
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40016800 	.word	0x40016800
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022400 	.word	0x40022400
 80015a8:	40022800 	.word	0x40022800
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40022000 	.word	0x40022000

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f001 fc30 	bl	8002e1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f853 	bl	8001668 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015c2:	f000 f8c3 	bl	800174c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff fbc5 	bl	8000d54 <MX_GPIO_Init>
  MX_ADC3_Init();
 80015ca:	f7fe ffbb 	bl	8000544 <MX_ADC3_Init>
  MX_CRC_Init();
 80015ce:	f7ff f865 	bl	800069c <MX_CRC_Init>
  MX_DCMI_Init();
 80015d2:	f7ff f8a5 	bl	8000720 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80015d6:	f7ff f995 	bl	8000904 <MX_DMA2D_Init>
  MX_ETH_Init();
 80015da:	f7ff f9eb 	bl	80009b4 <MX_ETH_Init>
  MX_FMC_Init();
 80015de:	f7ff facf 	bl	8000b80 <MX_FMC_Init>
  MX_I2C1_Init();
 80015e2:	f7ff fd75 	bl	80010d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80015e6:	f7ff fdb3 	bl	8001150 <MX_I2C3_Init>
  MX_LTDC_Init();
 80015ea:	f7ff fe99 	bl	8001320 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80015ee:	f000 f915 	bl	800181c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80015f2:	f000 f9cf 	bl	8001994 <MX_RTC_Init>
  MX_SAI2_Init();
 80015f6:	f000 fa9f 	bl	8001b38 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80015fa:	f000 fbaf 	bl	8001d5c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80015fe:	f000 fc31 	bl	8001e64 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001602:	f000 fcc3 	bl	8001f8c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001606:	f000 fea9 	bl	800235c <MX_TIM1_Init>
  MX_TIM2_Init();
 800160a:	f000 ff53 	bl	80024b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800160e:	f000 ffc7 	bl	80025a0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001612:	f001 f83d 	bl	8002690 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001616:	f001 f8b3 	bl	8002780 <MX_TIM8_Init>
  MX_TIM12_Init();
 800161a:	f001 f905 	bl	8002828 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800161e:	f001 faa5 	bl	8002b6c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001622:	f001 fad3 	bl	8002bcc <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001626:	f00d fd47 	bl	800f0b8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800162a:	f00f ffc5 	bl	80115b8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &rx, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	4909      	ldr	r1, [pc, #36]	@ (8001658 <main+0xa4>)
 8001632:	480a      	ldr	r0, [pc, #40]	@ (800165c <main+0xa8>)
 8001634:	f00a fb7d 	bl	800bd32 <HAL_UART_Receive_IT>
  const char *msg = "STM32 OK\r\n";
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <main+0xac>)
 800163a:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe fde3 	bl	8000208 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <main+0xb0>)
 800164e:	f00a fae7 	bl	800bc20 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001652:	f00f ffd7 	bl	8011604 <MX_USB_HOST_Process>
 8001656:	e7fc      	b.n	8001652 <main+0x9e>
 8001658:	2000054c 	.word	0x2000054c
 800165c:	20000a9c 	.word	0x20000a9c
 8001660:	08011e64 	.word	0x08011e64
 8001664:	20000a14 	.word	0x20000a14

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	@ 0x50
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0320 	add.w	r3, r7, #32
 8001672:	2230      	movs	r2, #48	@ 0x30
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f010 fb5a 	bl	8011d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800168c:	f005 fe22 	bl	80072d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <SystemClock_Config+0xdc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	4a2b      	ldr	r2, [pc, #172]	@ (8001744 <SystemClock_Config+0xdc>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169a:	6413      	str	r3, [r2, #64]	@ 0x40
 800169c:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <SystemClock_Config+0xdc>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <SystemClock_Config+0xe0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <SystemClock_Config+0xe0>)
 80016ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <SystemClock_Config+0xe0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016c0:	2309      	movs	r3, #9
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ca:	2301      	movs	r3, #1
 80016cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ce:	2302      	movs	r3, #2
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016d8:	2319      	movs	r3, #25
 80016da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80016dc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80016e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016e6:	2309      	movs	r3, #9
 80016e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 ff12 	bl	8007518 <HAL_RCC_OscConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016fa:	f000 f889 	bl	8001810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016fe:	f005 fdf9 	bl	80072f4 <HAL_PWREx_EnableOverDrive>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001708:	f000 f882 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170c:	230f      	movs	r3, #15
 800170e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001710:	2302      	movs	r3, #2
 8001712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001718:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800171c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	2106      	movs	r1, #6
 800172a:	4618      	mov	r0, r3
 800172c:	f006 f998 	bl	8007a60 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001736:	f000 f86b 	bl	8001810 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3750      	adds	r7, #80	@ 0x50
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000

0800174c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0a2      	sub	sp, #136	@ 0x88
 8001750:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2284      	movs	r2, #132	@ 0x84
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f010 fae9 	bl	8011d30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <PeriphCommonClock_Config+0x60>)
 8001760:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001762:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001766:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001768:	2305      	movs	r3, #5
 800176a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001770:	2303      	movs	r3, #3
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800177e:	2300      	movs	r3, #0
 8001780:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001782:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001786:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4618      	mov	r0, r3
 8001794:	f006 fb7c 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800179e:	f000 f837 	bl	8001810 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3788      	adds	r7, #136	@ 0x88
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	00b00008 	.word	0x00b00008

080017b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <HAL_UART_RxCpltCallback+0x30>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d10b      	bne.n	80017d8 <HAL_UART_RxCpltCallback+0x28>
        HAL_UART_Transmit(&huart1, &rx, 1, HAL_MAX_DELAY);
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	2201      	movs	r2, #1
 80017c6:	4907      	ldr	r1, [pc, #28]	@ (80017e4 <HAL_UART_RxCpltCallback+0x34>)
 80017c8:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <HAL_UART_RxCpltCallback+0x38>)
 80017ca:	f00a fa29 	bl	800bc20 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart6, &rx, 1);  // relance la réception
 80017ce:	2201      	movs	r2, #1
 80017d0:	4904      	ldr	r1, [pc, #16]	@ (80017e4 <HAL_UART_RxCpltCallback+0x34>)
 80017d2:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <HAL_UART_RxCpltCallback+0x30>)
 80017d4:	f00a faad 	bl	800bd32 <HAL_UART_Receive_IT>
    }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000a9c 	.word	0x20000a9c
 80017e4:	2000054c 	.word	0x2000054c
 80017e8:	20000a14 	.word	0x20000a14

080017ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017fe:	f001 fb1b 	bl	8002e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40001000 	.word	0x40001000

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_QUADSPI_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <MX_QUADSPI_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_QUADSPI_Init+0x50>)
 8001828:	2201      	movs	r2, #1
 800182a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_QUADSPI_Init+0x50>)
 800182e:	2204      	movs	r2, #4
 8001830:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_QUADSPI_Init+0x50>)
 8001834:	2210      	movs	r2, #16
 8001836:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_QUADSPI_Init+0x50>)
 800183a:	2218      	movs	r2, #24
 800183c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_QUADSPI_Init+0x50>)
 8001840:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001844:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_QUADSPI_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <MX_QUADSPI_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_QUADSPI_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_QUADSPI_Init+0x50>)
 800185a:	f005 fd9b 	bl	8007394 <HAL_QSPI_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001864:	f7ff ffd4 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000550 	.word	0x20000550
 8001870:	a0001000 	.word	0xa0001000

08001874 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	@ 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3b      	ldr	r2, [pc, #236]	@ (8001980 <HAL_QSPI_MspInit+0x10c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d170      	bne.n	8001978 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001896:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 8001898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189a:	4a3a      	ldr	r2, [pc, #232]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80018a2:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ae:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a28      	ldr	r2, [pc, #160]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <HAL_QSPI_MspInit+0x110>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80018f6:	2304      	movs	r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001906:	2309      	movs	r3, #9
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	481d      	ldr	r0, [pc, #116]	@ (8001988 <HAL_QSPI_MspInit+0x114>)
 8001912:	f002 fd87 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001916:	2340      	movs	r3, #64	@ 0x40
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001926:	230a      	movs	r3, #10
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4816      	ldr	r0, [pc, #88]	@ (800198c <HAL_QSPI_MspInit+0x118>)
 8001932:	f002 fd77 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001936:	2304      	movs	r3, #4
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001946:	2309      	movs	r3, #9
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	480e      	ldr	r0, [pc, #56]	@ (800198c <HAL_QSPI_MspInit+0x118>)
 8001952:	f002 fd67 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001956:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001968:	2309      	movs	r3, #9
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <HAL_QSPI_MspInit+0x11c>)
 8001974:	f002 fd56 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	@ 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	a0001000 	.word	0xa0001000
 8001984:	40023800 	.word	0x40023800
 8001988:	40021000 	.word	0x40021000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020c00 	.word	0x40020c00

08001994 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	@ 0x40
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800199a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80019ae:	463b      	mov	r3, r7
 80019b0:	2228      	movs	r2, #40	@ 0x28
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f010 f9bb 	bl	8011d30 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019ba:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019bc:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <MX_RTC_Init+0x144>)
 80019be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019c0:	4b44      	ldr	r3, [pc, #272]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019c8:	227f      	movs	r2, #127	@ 0x7f
 80019ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019cc:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019ce:	22ff      	movs	r2, #255	@ 0xff
 80019d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019d8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019de:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019e4:	483b      	ldr	r0, [pc, #236]	@ (8001ad4 <MX_RTC_Init+0x140>)
 80019e6:	f006 ff83 	bl	80088f0 <HAL_RTC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80019f0:	f7ff ff0e 	bl	8001810 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a12:	2201      	movs	r2, #1
 8001a14:	4619      	mov	r1, r3
 8001a16:	482f      	ldr	r0, [pc, #188]	@ (8001ad4 <MX_RTC_Init+0x140>)
 8001a18:	f006 ffec 	bl	80089f4 <HAL_RTC_SetTime>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001a22:	f7ff fef5 	bl	8001810 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a42:	2201      	movs	r2, #1
 8001a44:	4619      	mov	r1, r3
 8001a46:	4823      	ldr	r0, [pc, #140]	@ (8001ad4 <MX_RTC_Init+0x140>)
 8001a48:	f007 f86e 	bl	8008b28 <HAL_RTC_SetDate>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001a52:	f7ff fedd 	bl	8001810 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4811      	ldr	r0, [pc, #68]	@ (8001ad4 <MX_RTC_Init+0x140>)
 8001a8e:	f007 f8cf 	bl	8008c30 <HAL_RTC_SetAlarm>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001a98:	f7ff feba 	bl	8001810 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480a      	ldr	r0, [pc, #40]	@ (8001ad4 <MX_RTC_Init+0x140>)
 8001aaa:	f007 f8c1 	bl	8008c30 <HAL_RTC_SetAlarm>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001ab4:	f7ff feac 	bl	8001810 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ab8:	2202      	movs	r2, #2
 8001aba:	2100      	movs	r1, #0
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <MX_RTC_Init+0x140>)
 8001abe:	f007 fa81 	bl	8008fc4 <HAL_RTCEx_SetTimeStamp>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001ac8:	f7ff fea2 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	3740      	adds	r7, #64	@ 0x40
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000059c 	.word	0x2000059c
 8001ad8:	40002800 	.word	0x40002800

08001adc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0a4      	sub	sp, #144	@ 0x90
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2284      	movs	r2, #132	@ 0x84
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f010 f91f 	bl	8011d30 <memset>
  if(rtcHandle->Instance==RTC)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_RTC_MspInit+0x54>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d114      	bne.n	8001b26 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001afc:	2320      	movs	r3, #32
 8001afe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f006 f9c0 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001b16:	f7ff fe7b 	bl	8001810 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_RTC_MspInit+0x58>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <HAL_RTC_MspInit+0x58>)
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b24:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3790      	adds	r7, #144	@ 0x90
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40002800 	.word	0x40002800
 8001b34:	40023800 	.word	0x40023800

08001b38 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <MX_SAI2_Init+0x140>)
 8001b40:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b42:	4b4c      	ldr	r3, [pc, #304]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b48:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b4e:	4b49      	ldr	r3, [pc, #292]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b50:	2240      	movs	r2, #64	@ 0x40
 8001b52:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b54:	4b47      	ldr	r3, [pc, #284]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b5a:	4b46      	ldr	r3, [pc, #280]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b60:	4b44      	ldr	r3, [pc, #272]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b66:	4b43      	ldr	r3, [pc, #268]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b6c:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b72:	4b40      	ldr	r3, [pc, #256]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b78:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b7a:	4a40      	ldr	r2, [pc, #256]	@ (8001c7c <MX_SAI2_Init+0x144>)
 8001b7c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b84:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b90:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001b96:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b98:	2208      	movs	r2, #8
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001bcc:	4829      	ldr	r0, [pc, #164]	@ (8001c74 <MX_SAI2_Init+0x13c>)
 8001bce:	f007 fa61 	bl	8009094 <HAL_SAI_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001bd8:	f7ff fe1a 	bl	8001810 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001bdc:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001bde:	4a29      	ldr	r2, [pc, #164]	@ (8001c84 <MX_SAI2_Init+0x14c>)
 8001be0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001bea:	2203      	movs	r2, #3
 8001bec:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001bf0:	2240      	movs	r2, #64	@ 0x40
 8001bf2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c60:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <MX_SAI2_Init+0x148>)
 8001c62:	f007 fa17 	bl	8009094 <HAL_SAI_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c6c:	f7ff fdd0 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200005bc 	.word	0x200005bc
 8001c78:	40015c04 	.word	0x40015c04
 8001c7c:	0002ee00 	.word	0x0002ee00
 8001c80:	20000640 	.word	0x20000640
 8001c84:	40015c24 	.word	0x40015c24

08001c88 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	@ (8001d44 <HAL_SAI_MspInit+0xbc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d124      	bne.n	8001ce4 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_SAI_MspInit+0xc0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10b      	bne.n	8001cba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_SAI_MspInit+0xc4>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a29      	ldr	r2, [pc, #164]	@ (8001d4c <HAL_SAI_MspInit+0xc4>)
 8001ca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <HAL_SAI_MspInit+0xc4>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001cba:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <HAL_SAI_MspInit+0xc0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_SAI_MspInit+0xc0>)
 8001cc2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001cc4:	23f0      	movs	r3, #240	@ 0xf0
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481c      	ldr	r0, [pc, #112]	@ (8001d50 <HAL_SAI_MspInit+0xc8>)
 8001ce0:	f002 fba0 	bl	8004424 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d54 <HAL_SAI_MspInit+0xcc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d125      	bne.n	8001d3a <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001cee:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_SAI_MspInit+0xc0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10b      	bne.n	8001d0e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_SAI_MspInit+0xc4>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <HAL_SAI_MspInit+0xc4>)
 8001cfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_SAI_MspInit+0xc4>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_SAI_MspInit+0xc0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HAL_SAI_MspInit+0xc0>)
 8001d16:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <HAL_SAI_MspInit+0xd0>)
 8001d36:	f002 fb75 	bl	8004424 <HAL_GPIO_Init>

    }
}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	@ 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40015c04 	.word	0x40015c04
 8001d48:	200006c4 	.word	0x200006c4
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40015c24 	.word	0x40015c24
 8001d58:	40021800 	.word	0x40021800

08001d5c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d62:	4a0e      	ldr	r2, [pc, #56]	@ (8001d9c <MX_SDMMC1_SD_Init+0x40>)
 8001d64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d7e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <MX_SDMMC1_SD_Init+0x3c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200006c8 	.word	0x200006c8
 8001d9c:	40012c00 	.word	0x40012c00

08001da0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a25      	ldr	r2, [pc, #148]	@ (8001e54 <HAL_SD_MspInit+0xb4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d144      	bne.n	8001e4c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a24      	ldr	r2, [pc, #144]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001dc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a1e      	ldr	r2, [pc, #120]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a18      	ldr	r2, [pc, #96]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_SD_MspInit+0xb8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001e0a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001e0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <HAL_SD_MspInit+0xbc>)
 8001e28:	f002 fafc 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	@ (8001e60 <HAL_SD_MspInit+0xc0>)
 8001e48:	f002 faec 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	@ 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00

08001e64 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e6a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001e6e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	@ (8001ec0 <MX_SPDIFRX_Init+0x5c>)
 8001eae:	f008 fc67 	bl	800a780 <HAL_SPDIFRX_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001eb8:	f7ff fcaa 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000074c 	.word	0x2000074c

08001ec4 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0aa      	sub	sp, #168	@ 0xa8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2284      	movs	r2, #132	@ 0x84
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00f ff23 	bl	8011d30 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001ef2:	d143      	bne.n	8001f7c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001efa:	2364      	movs	r3, #100	@ 0x64
 8001efc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f005 ffbc 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f1e:	f7ff fc77 	bl	8001810 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f74:	4619      	mov	r1, r3
 8001f76:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <HAL_SPDIFRX_MspInit+0xc4>)
 8001f78:	f002 fa54 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	37a8      	adds	r7, #168	@ 0xa8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020c00 	.word	0x40020c00

08001f8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001f92:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <MX_SPI2_Init+0x78>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001f98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fa6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001faa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fda:	2207      	movs	r2, #7
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_SPI2_Init+0x74>)
 8001fec:	f008 fc24 	bl	800a838 <HAL_SPI_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ff6:	f7ff fc0b 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000798 	.word	0x20000798
 8002004:	40003800 	.word	0x40003800

08002008 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	@ 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a25      	ldr	r2, [pc, #148]	@ (80020bc <HAL_SPI_MspInit+0xb4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d144      	bne.n	80020b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800202a:	4b25      	ldr	r3, [pc, #148]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4a24      	ldr	r2, [pc, #144]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	4b22      	ldr	r3, [pc, #136]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002042:	4b1f      	ldr	r3, [pc, #124]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a1e      	ldr	r2, [pc, #120]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b1c      	ldr	r3, [pc, #112]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a18      	ldr	r2, [pc, #96]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_SPI_MspInit+0xb8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002072:	2302      	movs	r3, #2
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002082:	2305      	movs	r3, #5
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <HAL_SPI_MspInit+0xbc>)
 800208e:	f002 f9c9 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002092:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a4:	2305      	movs	r3, #5
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	@ (80020c8 <HAL_SPI_MspInit+0xc0>)
 80020b0:	f002 f9b8 	bl	8004424 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	@ 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40003800 	.word	0x40003800
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40020400 	.word	0x40020400

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_MspInit+0x44>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002110 <HAL_MspInit+0x44>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_MspInit+0x44>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_MspInit+0x44>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <HAL_MspInit+0x44>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_MspInit+0x44>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	@ 0x38
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002124:	4b33      	ldr	r3, [pc, #204]	@ (80021f4 <HAL_InitTick+0xe0>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a32      	ldr	r2, [pc, #200]	@ (80021f4 <HAL_InitTick+0xe0>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002130:	4b30      	ldr	r3, [pc, #192]	@ (80021f4 <HAL_InitTick+0xe0>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800213c:	f107 0210 	add.w	r2, r7, #16
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f005 fe70 	bl	8007e2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002156:	f005 fe41 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 800215a:	6378      	str	r0, [r7, #52]	@ 0x34
 800215c:	e004      	b.n	8002168 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800215e:	f005 fe3d 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 8002162:	4603      	mov	r3, r0
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216a:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <HAL_InitTick+0xe4>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	3b01      	subs	r3, #1
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <HAL_InitTick+0xe8>)
 8002178:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_InitTick+0xec>)
 800217a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800217c:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_InitTick+0xe8>)
 800217e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002182:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002184:	4a1d      	ldr	r2, [pc, #116]	@ (80021fc <HAL_InitTick+0xe8>)
 8002186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002188:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HAL_InitTick+0xe8>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <HAL_InitTick+0xe8>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_InitTick+0xe8>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800219c:	4817      	ldr	r0, [pc, #92]	@ (80021fc <HAL_InitTick+0xe8>)
 800219e:	f008 fbf6 	bl	800a98e <HAL_TIM_Base_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d11b      	bne.n	80021e8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <HAL_InitTick+0xe8>)
 80021b2:	f008 fc43 	bl	800aa3c <HAL_TIM_Base_Start_IT>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021c4:	2036      	movs	r0, #54	@ 0x36
 80021c6:	f001 f9e7 	bl	8003598 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d808      	bhi.n	80021e2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	2036      	movs	r0, #54	@ 0x36
 80021d6:	f001 f9c3 	bl	8003560 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <HAL_InitTick+0xf0>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e002      	b.n	80021e8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3738      	adds	r7, #56	@ 0x38
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	200007fc 	.word	0x200007fc
 8002200:	40001000 	.word	0x40001000
 8002204:	20000004 	.word	0x20000004

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <NMI_Handler+0x4>

08002210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <MemManage_Handler+0x4>

08002220 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <UsageFault_Handler+0x4>

08002230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <TIM6_DAC_IRQHandler+0x10>)
 800226e:	f008 fcb4 	bl	800abda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200007fc 	.word	0x200007fc

0800227c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <OTG_FS_IRQHandler+0x10>)
 8002282:	f002 fd8d 	bl	8004da0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000f18 	.word	0x20000f18

08002290 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <USART6_IRQHandler+0x10>)
 8002296:	f009 fd91 	bl	800bdbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000a9c 	.word	0x20000a9c

080022a4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <LTDC_IRQHandler+0x10>)
 80022aa:	f004 fd9d 	bl	8006de8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200004a4 	.word	0x200004a4

080022b8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DMA2D_IRQHandler+0x10>)
 80022be:	f001 fbc1 	bl	8003a44 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000294 	.word	0x20000294

080022cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <_sbrk+0x5c>)
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <_sbrk+0x60>)
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <_sbrk+0x64>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <_sbrk+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d207      	bcs.n	800230c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022fc:	f00f fd30 	bl	8011d60 <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	220c      	movs	r2, #12
 8002304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e009      	b.n	8002320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <_sbrk+0x64>)
 800231c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20050000 	.word	0x20050000
 800232c:	00000400 	.word	0x00000400
 8002330:	20000848 	.word	0x20000848
 8002334:	20001440 	.word	0x20001440

08002338 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <SystemInit+0x20>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <SystemInit+0x20>)
 8002344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b09a      	sub	sp, #104	@ 0x68
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	222c      	movs	r2, #44	@ 0x2c
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f00f fcca 	bl	8011d30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800239c:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <MX_TIM1_Init+0x150>)
 800239e:	4a44      	ldr	r2, [pc, #272]	@ (80024b0 <MX_TIM1_Init+0x154>)
 80023a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023a2:	4b42      	ldr	r3, [pc, #264]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023ae:	4b3f      	ldr	r3, [pc, #252]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023bc:	4b3b      	ldr	r3, [pc, #236]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c2:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023c8:	4838      	ldr	r0, [pc, #224]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023ca:	f008 fae0 	bl	800a98e <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023d4:	f7ff fa1c 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80023e2:	4619      	mov	r1, r3
 80023e4:	4831      	ldr	r0, [pc, #196]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023e6:	f008 fe13 	bl	800b010 <HAL_TIM_ConfigClockSource>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80023f0:	f7ff fa0e 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023f4:	482d      	ldr	r0, [pc, #180]	@ (80024ac <MX_TIM1_Init+0x150>)
 80023f6:	f008 fb99 	bl	800ab2c <HAL_TIM_PWM_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002400:	f7ff fa06 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002410:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002414:	4619      	mov	r1, r3
 8002416:	4825      	ldr	r0, [pc, #148]	@ (80024ac <MX_TIM1_Init+0x150>)
 8002418:	f009 fa8a 	bl	800b930 <HAL_TIMEx_MasterConfigSynchronization>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002422:	f7ff f9f5 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002426:	2360      	movs	r3, #96	@ 0x60
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242e:	2300      	movs	r3, #0
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002432:	2300      	movs	r3, #0
 8002434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002442:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002446:	2200      	movs	r2, #0
 8002448:	4619      	mov	r1, r3
 800244a:	4818      	ldr	r0, [pc, #96]	@ (80024ac <MX_TIM1_Init+0x150>)
 800244c:	f008 fccc 	bl	800ade8 <HAL_TIM_PWM_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002456:	f7ff f9db 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800246e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002472:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800247c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4807      	ldr	r0, [pc, #28]	@ (80024ac <MX_TIM1_Init+0x150>)
 8002490:	f009 fadc 	bl	800ba4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800249a:	f7ff f9b9 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800249e:	4803      	ldr	r0, [pc, #12]	@ (80024ac <MX_TIM1_Init+0x150>)
 80024a0:	f000 fa96 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 80024a4:	bf00      	nop
 80024a6:	3768      	adds	r7, #104	@ 0x68
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000084c 	.word	0x2000084c
 80024b0:	40010000 	.word	0x40010000

080024b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	@ 0x38
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d4:	463b      	mov	r3, r7
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	611a      	str	r2, [r3, #16]
 80024e2:	615a      	str	r2, [r3, #20]
 80024e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024e6:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <MX_TIM2_Init+0xe8>)
 80024e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024ee:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <MX_TIM2_Init+0xe8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b29      	ldr	r3, [pc, #164]	@ (800259c <MX_TIM2_Init+0xe8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024fa:	4b28      	ldr	r3, [pc, #160]	@ (800259c <MX_TIM2_Init+0xe8>)
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b26      	ldr	r3, [pc, #152]	@ (800259c <MX_TIM2_Init+0xe8>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <MX_TIM2_Init+0xe8>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800250e:	4823      	ldr	r0, [pc, #140]	@ (800259c <MX_TIM2_Init+0xe8>)
 8002510:	f008 fa3d 	bl	800a98e <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800251a:	f7ff f979 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002528:	4619      	mov	r1, r3
 800252a:	481c      	ldr	r0, [pc, #112]	@ (800259c <MX_TIM2_Init+0xe8>)
 800252c:	f008 fd70 	bl	800b010 <HAL_TIM_ConfigClockSource>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002536:	f7ff f96b 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800253a:	4818      	ldr	r0, [pc, #96]	@ (800259c <MX_TIM2_Init+0xe8>)
 800253c:	f008 faf6 	bl	800ab2c <HAL_TIM_PWM_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002546:	f7ff f963 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	4810      	ldr	r0, [pc, #64]	@ (800259c <MX_TIM2_Init+0xe8>)
 800255a:	f009 f9e9 	bl	800b930 <HAL_TIMEx_MasterConfigSynchronization>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002564:	f7ff f954 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002568:	2360      	movs	r3, #96	@ 0x60
 800256a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002578:	463b      	mov	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	@ (800259c <MX_TIM2_Init+0xe8>)
 8002580:	f008 fc32 	bl	800ade8 <HAL_TIM_PWM_ConfigChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800258a:	f7ff f941 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800258e:	4803      	ldr	r0, [pc, #12]	@ (800259c <MX_TIM2_Init+0xe8>)
 8002590:	f000 fa1e 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 8002594:	bf00      	nop
 8002596:	3738      	adds	r7, #56	@ 0x38
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000898 	.word	0x20000898

080025a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	@ 0x38
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025d4:	4a2d      	ldr	r2, [pc, #180]	@ (800268c <MX_TIM3_Init+0xec>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025e4:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025f8:	4823      	ldr	r0, [pc, #140]	@ (8002688 <MX_TIM3_Init+0xe8>)
 80025fa:	f008 f9c8 	bl	800a98e <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002604:	f7ff f904 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800260e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002612:	4619      	mov	r1, r3
 8002614:	481c      	ldr	r0, [pc, #112]	@ (8002688 <MX_TIM3_Init+0xe8>)
 8002616:	f008 fcfb 	bl	800b010 <HAL_TIM_ConfigClockSource>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002620:	f7ff f8f6 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002624:	4818      	ldr	r0, [pc, #96]	@ (8002688 <MX_TIM3_Init+0xe8>)
 8002626:	f008 fa81 	bl	800ab2c <HAL_TIM_PWM_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002630:	f7ff f8ee 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4811      	ldr	r0, [pc, #68]	@ (8002688 <MX_TIM3_Init+0xe8>)
 8002644:	f009 f974 	bl	800b930 <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800264e:	f7ff f8df 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002652:	2360      	movs	r3, #96	@ 0x60
 8002654:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002662:	463b      	mov	r3, r7
 8002664:	2200      	movs	r2, #0
 8002666:	4619      	mov	r1, r3
 8002668:	4807      	ldr	r0, [pc, #28]	@ (8002688 <MX_TIM3_Init+0xe8>)
 800266a:	f008 fbbd 	bl	800ade8 <HAL_TIM_PWM_ConfigChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002674:	f7ff f8cc 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002678:	4803      	ldr	r0, [pc, #12]	@ (8002688 <MX_TIM3_Init+0xe8>)
 800267a:	f000 f9a9 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 800267e:	bf00      	nop
 8002680:	3738      	adds	r7, #56	@ 0x38
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200008e4 	.word	0x200008e4
 800268c:	40000400 	.word	0x40000400

08002690 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	@ 0x38
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b0:	463b      	mov	r3, r7
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026c4:	4a2d      	ldr	r2, [pc, #180]	@ (800277c <MX_TIM5_Init+0xec>)
 80026c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80026c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80026d4:	4b28      	ldr	r3, [pc, #160]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026d6:	f04f 32ff 	mov.w	r2, #4294967295
 80026da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026dc:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e2:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026e8:	4823      	ldr	r0, [pc, #140]	@ (8002778 <MX_TIM5_Init+0xe8>)
 80026ea:	f008 f950 	bl	800a98e <HAL_TIM_Base_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80026f4:	f7ff f88c 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002702:	4619      	mov	r1, r3
 8002704:	481c      	ldr	r0, [pc, #112]	@ (8002778 <MX_TIM5_Init+0xe8>)
 8002706:	f008 fc83 	bl	800b010 <HAL_TIM_ConfigClockSource>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002710:	f7ff f87e 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002714:	4818      	ldr	r0, [pc, #96]	@ (8002778 <MX_TIM5_Init+0xe8>)
 8002716:	f008 fa09 	bl	800ab2c <HAL_TIM_PWM_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002720:	f7ff f876 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	4619      	mov	r1, r3
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <MX_TIM5_Init+0xe8>)
 8002734:	f009 f8fc 	bl	800b930 <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800273e:	f7ff f867 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002742:	2360      	movs	r3, #96	@ 0x60
 8002744:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002752:	463b      	mov	r3, r7
 8002754:	220c      	movs	r2, #12
 8002756:	4619      	mov	r1, r3
 8002758:	4807      	ldr	r0, [pc, #28]	@ (8002778 <MX_TIM5_Init+0xe8>)
 800275a:	f008 fb45 	bl	800ade8 <HAL_TIM_PWM_ConfigChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002764:	f7ff f854 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002768:	4803      	ldr	r0, [pc, #12]	@ (8002778 <MX_TIM5_Init+0xe8>)
 800276a:	f000 f931 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 800276e:	bf00      	nop
 8002770:	3738      	adds	r7, #56	@ 0x38
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000930 	.word	0x20000930
 800277c:	40000c00 	.word	0x40000c00

08002780 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800279e:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027a0:	4a20      	ldr	r2, [pc, #128]	@ (8002824 <MX_TIM8_Init+0xa4>)
 80027a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80027a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027be:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80027ca:	4815      	ldr	r0, [pc, #84]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027cc:	f008 f8df 	bl	800a98e <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80027d6:	f7ff f81b 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4619      	mov	r1, r3
 80027e6:	480e      	ldr	r0, [pc, #56]	@ (8002820 <MX_TIM8_Init+0xa0>)
 80027e8:	f008 fc12 	bl	800b010 <HAL_TIM_ConfigClockSource>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80027f2:	f7ff f80d 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4806      	ldr	r0, [pc, #24]	@ (8002820 <MX_TIM8_Init+0xa0>)
 8002808:	f009 f892 	bl	800b930 <HAL_TIMEx_MasterConfigSynchronization>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002812:	f7fe fffd 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000097c 	.word	0x2000097c
 8002824:	40010400 	.word	0x40010400

08002828 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <MX_TIM12_Init+0x84>)
 8002842:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <MX_TIM12_Init+0x88>)
 8002844:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002846:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <MX_TIM12_Init+0x84>)
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284c:	4b17      	ldr	r3, [pc, #92]	@ (80028ac <MX_TIM12_Init+0x84>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002852:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <MX_TIM12_Init+0x84>)
 8002854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002858:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285a:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <MX_TIM12_Init+0x84>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002860:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <MX_TIM12_Init+0x84>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002866:	4811      	ldr	r0, [pc, #68]	@ (80028ac <MX_TIM12_Init+0x84>)
 8002868:	f008 f960 	bl	800ab2c <HAL_TIM_PWM_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002872:	f7fe ffcd 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002876:	2360      	movs	r3, #96	@ 0x60
 8002878:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2200      	movs	r2, #0
 800288a:	4619      	mov	r1, r3
 800288c:	4807      	ldr	r0, [pc, #28]	@ (80028ac <MX_TIM12_Init+0x84>)
 800288e:	f008 faab 	bl	800ade8 <HAL_TIM_PWM_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002898:	f7fe ffba 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800289c:	4803      	ldr	r0, [pc, #12]	@ (80028ac <MX_TIM12_Init+0x84>)
 800289e:	f000 f897 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200009c8 	.word	0x200009c8
 80028b0:	40001800 	.word	0x40001800

080028b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2e      	ldr	r2, [pc, #184]	@ (800297c <HAL_TIM_Base_MspInit+0xc8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10c      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80028de:	e046      	b.n	800296e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e8:	d10c      	bne.n	8002904 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ea:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f6:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]
}
 8002902:	e034      	b.n	800296e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <HAL_TIM_Base_MspInit+0xd0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10c      	bne.n	8002928 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800290e:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a1b      	ldr	r2, [pc, #108]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697b      	ldr	r3, [r7, #20]
}
 8002926:	e022      	b.n	800296e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a16      	ldr	r2, [pc, #88]	@ (8002988 <HAL_TIM_Base_MspInit+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10c      	bne.n	800294c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a12      	ldr	r2, [pc, #72]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	e010      	b.n	800296e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <HAL_TIM_Base_MspInit+0xd8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10b      	bne.n	800296e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4a09      	ldr	r2, [pc, #36]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	6453      	str	r3, [r2, #68]	@ 0x44
 8002962:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <HAL_TIM_Base_MspInit+0xcc>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
}
 800296e:	bf00      	nop
 8002970:	3724      	adds	r7, #36	@ 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40010000 	.word	0x40010000
 8002980:	40023800 	.word	0x40023800
 8002984:	40000400 	.word	0x40000400
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_TIM_PWM_MspInit+0x38>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10b      	bne.n	80029ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029a2:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <HAL_TIM_PWM_MspInit+0x3c>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <HAL_TIM_PWM_MspInit+0x3c>)
 80029a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b07      	ldr	r3, [pc, #28]	@ (80029cc <HAL_TIM_PWM_MspInit+0x3c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40001800 	.word	0x40001800
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	@ 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a56      	ldr	r2, [pc, #344]	@ (8002b48 <HAL_TIM_MspPostInit+0x178>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d11d      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a55      	ldr	r2, [pc, #340]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b53      	ldr	r3, [pc, #332]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	484a      	ldr	r0, [pc, #296]	@ (8002b50 <HAL_TIM_MspPostInit+0x180>)
 8002a28:	f001 fcfc 	bl	8004424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a2c:	e087      	b.n	8002b3e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a36:	d11d      	bne.n	8002a74 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4a43      	ldr	r2, [pc, #268]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a44:	4b41      	ldr	r3, [pc, #260]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002a50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a62:	2301      	movs	r3, #1
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4838      	ldr	r0, [pc, #224]	@ (8002b50 <HAL_TIM_MspPostInit+0x180>)
 8002a6e:	f001 fcd9 	bl	8004424 <HAL_GPIO_Init>
}
 8002a72:	e064      	b.n	8002b3e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a36      	ldr	r2, [pc, #216]	@ (8002b54 <HAL_TIM_MspPostInit+0x184>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	4b33      	ldr	r3, [pc, #204]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a32      	ldr	r2, [pc, #200]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b30      	ldr	r3, [pc, #192]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002a96:	2310      	movs	r3, #16
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4829      	ldr	r0, [pc, #164]	@ (8002b58 <HAL_TIM_MspPostInit+0x188>)
 8002ab2:	f001 fcb7 	bl	8004424 <HAL_GPIO_Init>
}
 8002ab6:	e042      	b.n	8002b3e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a27      	ldr	r2, [pc, #156]	@ (8002b5c <HAL_TIM_MspPostInit+0x18c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d11c      	bne.n	8002afc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ac2:	4b22      	ldr	r3, [pc, #136]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a21      	ldr	r2, [pc, #132]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	481a      	ldr	r0, [pc, #104]	@ (8002b60 <HAL_TIM_MspPostInit+0x190>)
 8002af6:	f001 fc95 	bl	8004424 <HAL_GPIO_Init>
}
 8002afa:	e020      	b.n	8002b3e <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a18      	ldr	r2, [pc, #96]	@ (8002b64 <HAL_TIM_MspPostInit+0x194>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d11b      	bne.n	8002b3e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_TIM_MspPostInit+0x17c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002b1e:	2340      	movs	r3, #64	@ 0x40
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002b2e:	2309      	movs	r3, #9
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	480b      	ldr	r0, [pc, #44]	@ (8002b68 <HAL_TIM_MspPostInit+0x198>)
 8002b3a:	f001 fc73 	bl	8004424 <HAL_GPIO_Init>
}
 8002b3e:	bf00      	nop
 8002b40:	3730      	adds	r7, #48	@ 0x30
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40001800 	.word	0x40001800
 8002b68:	40021c00 	.word	0x40021c00

08002b6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b72:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <MX_USART1_UART_Init+0x5c>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	@ (8002bc4 <MX_USART1_UART_Init+0x58>)
 8002bb0:	f008 ffe8 	bl	800bb84 <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002bba:	f7fe fe29 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000a14 	.word	0x20000a14
 8002bc8:	40011000 	.word	0x40011000

08002bcc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002bd2:	4a15      	ldr	r2, [pc, #84]	@ (8002c28 <MX_USART6_UART_Init+0x5c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002bd6:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002bd8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002bdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c0e:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <MX_USART6_UART_Init+0x58>)
 8002c10:	f008 ffb8 	bl	800bb84 <HAL_UART_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002c1a:	f7fe fdf9 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000a9c 	.word	0x20000a9c
 8002c28:	40011400 	.word	0x40011400

08002c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0ae      	sub	sp, #184	@ 0xb8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	2284      	movs	r2, #132	@ 0x84
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f00f f86f 	bl	8011d30 <memset>
  if(uartHandle->Instance==USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a57      	ldr	r2, [pc, #348]	@ (8002db4 <HAL_UART_MspInit+0x188>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d15d      	bne.n	8002d18 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c5c:	2340      	movs	r3, #64	@ 0x40
 8002c5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c60:	2300      	movs	r3, #0
 8002c62:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f107 0320 	add.w	r3, r7, #32
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f005 f911 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c74:	f7fe fdcc 	bl	8001810 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c78:	4b4f      	ldr	r3, [pc, #316]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002c7e:	f043 0310 	orr.w	r3, r3, #16
 8002c82:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c84:	4b4c      	ldr	r3, [pc, #304]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	4a48      	ldr	r2, [pc, #288]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9c:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	4b43      	ldr	r3, [pc, #268]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	4a42      	ldr	r2, [pc, #264]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb4:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd8:	2307      	movs	r3, #7
 8002cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4835      	ldr	r0, [pc, #212]	@ (8002dbc <HAL_UART_MspInit+0x190>)
 8002ce6:	f001 fb9d 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d04:	2307      	movs	r3, #7
 8002d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	482b      	ldr	r0, [pc, #172]	@ (8002dc0 <HAL_UART_MspInit+0x194>)
 8002d12:	f001 fb87 	bl	8004424 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d16:	e048      	b.n	8002daa <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <HAL_UART_MspInit+0x198>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d143      	bne.n	8002daa <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002d22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2c:	f107 0320 	add.w	r3, r7, #32
 8002d30:	4618      	mov	r0, r3
 8002d32:	f005 f8ad 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002d3c:	f7fe fd68 	bl	8001810 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d40:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002d46:	f043 0320 	orr.w	r3, r3, #32
 8002d4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d58:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5c:	4a16      	ldr	r2, [pc, #88]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <HAL_UART_MspInit+0x18c>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d70:	23c0      	movs	r3, #192	@ 0xc0
 8002d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d92:	4619      	mov	r1, r3
 8002d94:	480c      	ldr	r0, [pc, #48]	@ (8002dc8 <HAL_UART_MspInit+0x19c>)
 8002d96:	f001 fb45 	bl	8004424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2047      	movs	r0, #71	@ 0x47
 8002da0:	f000 fbde 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002da4:	2047      	movs	r0, #71	@ 0x47
 8002da6:	f000 fbf7 	bl	8003598 <HAL_NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	37b8      	adds	r7, #184	@ 0xb8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40011000 	.word	0x40011000
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	40020800 	.word	0x40020800

08002dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd0:	f7ff fab2 	bl	8002338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dd4:	480c      	ldr	r0, [pc, #48]	@ (8002e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dd6:	490d      	ldr	r1, [pc, #52]	@ (8002e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ddc:	e002      	b.n	8002de4 <LoopCopyDataInit>

08002dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002de2:	3304      	adds	r3, #4

08002de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de8:	d3f9      	bcc.n	8002dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dec:	4c0a      	ldr	r4, [pc, #40]	@ (8002e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df0:	e001      	b.n	8002df6 <LoopFillZerobss>

08002df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df4:	3204      	adds	r2, #4

08002df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df8:	d3fb      	bcc.n	8002df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dfa:	f00e ffb7 	bl	8011d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfe:	f7fe fbd9 	bl	80015b4 <main>
  bx  lr    
 8002e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e0c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002e10:	08011eb0 	.word	0x08011eb0
  ldr r2, =_sbss
 8002e14:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8002e18:	20001440 	.word	0x20001440

08002e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e1c:	e7fe      	b.n	8002e1c <ADC_IRQHandler>

08002e1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e22:	2003      	movs	r0, #3
 8002e24:	f000 fb91 	bl	800354a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e28:	200f      	movs	r0, #15
 8002e2a:	f7ff f973 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2e:	f7ff f94d 	bl	80020cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	20000b24 	.word	0x20000b24

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000b24 	.word	0x20000b24

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e031      	b.n	8002f3a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fb82 	bl	80005e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <HAL_ADC_Init+0x84>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f974 	bl	80031fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f2a:	e001      	b.n	8002f30 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	ffffeefd 	.word	0xffffeefd

08002f48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e13a      	b.n	80031da <HAL_ADC_ConfigChannel+0x292>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d93a      	bls.n	8002fea <HAL_ADC_ConfigChannel+0xa2>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f7c:	d035      	beq.n	8002fea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68d9      	ldr	r1, [r3, #12]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	2207      	movs	r2, #7
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8f      	ldr	r2, [pc, #572]	@ (80031e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68d9      	ldr	r1, [r3, #12]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	061a      	lsls	r2, r3, #24
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc2:	e039      	b.n	8003038 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4403      	add	r3, r0
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe8:	e026      	b.n	8003038 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6919      	ldr	r1, [r3, #16]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2207      	movs	r2, #7
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6919      	ldr	r1, [r3, #16]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	4603      	mov	r3, r0
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4403      	add	r3, r0
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	409a      	lsls	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d824      	bhi.n	800308a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b05      	subs	r3, #5
 8003052:	221f      	movs	r2, #31
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43da      	mvns	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	400a      	ands	r2, r1
 8003060:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4618      	mov	r0, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b05      	subs	r3, #5
 800307c:	fa00 f203 	lsl.w	r2, r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	635a      	str	r2, [r3, #52]	@ 0x34
 8003088:	e04c      	b.n	8003124 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d824      	bhi.n	80030dc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	3b23      	subs	r3, #35	@ 0x23
 80030a4:	221f      	movs	r2, #31
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	400a      	ands	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	3b23      	subs	r3, #35	@ 0x23
 80030ce:	fa00 f203 	lsl.w	r2, r0, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80030da:	e023      	b.n	8003124 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	3b41      	subs	r3, #65	@ 0x41
 80030ee:	221f      	movs	r2, #31
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43da      	mvns	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	400a      	ands	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4618      	mov	r0, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	3b41      	subs	r3, #65	@ 0x41
 8003118:	fa00 f203 	lsl.w	r2, r0, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a30      	ldr	r2, [pc, #192]	@ (80031ec <HAL_ADC_ConfigChannel+0x2a4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10a      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x1fc>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003136:	d105      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003138:	4b2d      	ldr	r3, [pc, #180]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a2c      	ldr	r2, [pc, #176]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800313e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003142:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a28      	ldr	r2, [pc, #160]	@ (80031ec <HAL_ADC_ConfigChannel+0x2a4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10f      	bne.n	800316e <HAL_ADC_ConfigChannel+0x226>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b12      	cmp	r3, #18
 8003154:	d10b      	bne.n	800316e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003156:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4a25      	ldr	r2, [pc, #148]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800315c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003160:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003162:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003168:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800316c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_ADC_ConfigChannel+0x2a4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d12b      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x288>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1a      	ldr	r2, [pc, #104]	@ (80031e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <HAL_ADC_ConfigChannel+0x242>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b11      	cmp	r3, #17
 8003188:	d122      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800318a:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003190:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003194:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003196:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4a15      	ldr	r2, [pc, #84]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800319c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031a0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a10      	ldr	r2, [pc, #64]	@ (80031e8 <HAL_ADC_ConfigChannel+0x2a0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_ADC_ConfigChannel+0x2ac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a11      	ldr	r2, [pc, #68]	@ (80031f8 <HAL_ADC_ConfigChannel+0x2b0>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9a      	lsrs	r2, r3, #18
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031c2:	e002      	b.n	80031ca <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	10000012 	.word	0x10000012
 80031ec:	40012000 	.word	0x40012000
 80031f0:	40012300 	.word	0x40012300
 80031f4:	20000000 	.word	0x20000000
 80031f8:	431bde83 	.word	0x431bde83

080031fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003204:	4b78      	ldr	r3, [pc, #480]	@ (80033e8 <ADC_Init+0x1ec>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a77      	ldr	r2, [pc, #476]	@ (80033e8 <ADC_Init+0x1ec>)
 800320a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800320e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003210:	4b75      	ldr	r3, [pc, #468]	@ (80033e8 <ADC_Init+0x1ec>)
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4973      	ldr	r1, [pc, #460]	@ (80033e8 <ADC_Init+0x1ec>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800322c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	021a      	lsls	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6899      	ldr	r1, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	4a58      	ldr	r2, [pc, #352]	@ (80033ec <ADC_Init+0x1f0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d022      	beq.n	80032d6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800329e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	e00f      	b.n	80032f6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0202 	bic.w	r2, r2, #2
 8003304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003332:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003342:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	3b01      	subs	r3, #1
 8003350:	035a      	lsls	r2, r3, #13
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e007      	b.n	800336c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800336a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800337a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	3b01      	subs	r3, #1
 8003388:	051a      	lsls	r2, r3, #20
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6899      	ldr	r1, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033ae:	025a      	lsls	r2, r3, #9
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6899      	ldr	r1, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	029a      	lsls	r2, r3, #10
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40012300 	.word	0x40012300
 80033ec:	0f000001 	.word	0x0f000001

080033f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003400:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <__NVIC_SetPriorityGrouping+0x40>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003418:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	4313      	orrs	r3, r2
 800341c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341e:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <__NVIC_SetPriorityGrouping+0x40>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60d3      	str	r3, [r2, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00
 8003434:	05fa0000 	.word	0x05fa0000

08003438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <__NVIC_GetPriorityGrouping+0x18>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	f003 0307 	and.w	r3, r3, #7
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	db0b      	blt.n	800347e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	4907      	ldr	r1, [pc, #28]	@ (800348c <__NVIC_EnableIRQ+0x38>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2001      	movs	r0, #1
 8003476:	fa00 f202 	lsl.w	r2, r0, r2
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	@ (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	@ (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	@ 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff4c 	bl	80033f0 <__NVIC_SetPriorityGrouping>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003572:	f7ff ff61 	bl	8003438 <__NVIC_GetPriorityGrouping>
 8003576:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f7ff ffb1 	bl	80034e4 <NVIC_EncodePriority>
 8003582:	4602      	mov	r2, r0
 8003584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff80 	bl	8003490 <__NVIC_SetPriority>
}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff54 	bl	8003454 <__NVIC_EnableIRQ>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e054      	b.n	8003670 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	7f5b      	ldrb	r3, [r3, #29]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd f882 	bl	80006e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_CRC_Init+0xc4>)
 80035f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0218 	bic.w	r2, r2, #24
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	e00c      	b.n	800361e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f834 	bl	800367c <HAL_CRCEx_Polynomial_Set>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e028      	b.n	8003670 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	795b      	ldrb	r3, [r3, #5]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f04f 32ff 	mov.w	r2, #4294967295
 800362e:	611a      	str	r2, [r3, #16]
 8003630:	e004      	b.n	800363c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6912      	ldr	r2, [r2, #16]
 800363a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	04c11db7 	.word	0x04c11db7

0800367c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800368c:	231f      	movs	r3, #31
 800368e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
 800369e:	e063      	b.n	8003768 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80036a0:	bf00      	nop
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	613a      	str	r2, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_CRCEx_Polynomial_Set+0x44>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b18      	cmp	r3, #24
 80036c4:	d846      	bhi.n	8003754 <HAL_CRCEx_Polynomial_Set+0xd8>
 80036c6:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <HAL_CRCEx_Polynomial_Set+0x50>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	0800375b 	.word	0x0800375b
 80036d0:	08003755 	.word	0x08003755
 80036d4:	08003755 	.word	0x08003755
 80036d8:	08003755 	.word	0x08003755
 80036dc:	08003755 	.word	0x08003755
 80036e0:	08003755 	.word	0x08003755
 80036e4:	08003755 	.word	0x08003755
 80036e8:	08003755 	.word	0x08003755
 80036ec:	08003749 	.word	0x08003749
 80036f0:	08003755 	.word	0x08003755
 80036f4:	08003755 	.word	0x08003755
 80036f8:	08003755 	.word	0x08003755
 80036fc:	08003755 	.word	0x08003755
 8003700:	08003755 	.word	0x08003755
 8003704:	08003755 	.word	0x08003755
 8003708:	08003755 	.word	0x08003755
 800370c:	0800373d 	.word	0x0800373d
 8003710:	08003755 	.word	0x08003755
 8003714:	08003755 	.word	0x08003755
 8003718:	08003755 	.word	0x08003755
 800371c:	08003755 	.word	0x08003755
 8003720:	08003755 	.word	0x08003755
 8003724:	08003755 	.word	0x08003755
 8003728:	08003755 	.word	0x08003755
 800372c:	08003731 	.word	0x08003731
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d913      	bls.n	800375e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800373a:	e010      	b.n	800375e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b07      	cmp	r3, #7
 8003740:	d90f      	bls.n	8003762 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003746:	e00c      	b.n	8003762 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0f      	cmp	r3, #15
 800374c:	d90b      	bls.n	8003766 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003752:	e008      	b.n	8003766 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75fb      	strb	r3, [r7, #23]
        break;
 8003758:	e006      	b.n	8003768 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800375a:	bf00      	nop
 800375c:	e004      	b.n	8003768 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003766:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 0118 	bic.w	r1, r3, #24
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e069      	b.n	800387e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc ffe6 	bl	8000788 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_DCMI_Init+0xf0>)
 80037de:	400b      	ands	r3, r1
 80037e0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80037f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003802:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800380e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800381a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003826:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b10      	cmp	r3, #16
 8003836:	d112      	bne.n	800385e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7f1b      	ldrb	r3, [r3, #28]
 800383c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7f5b      	ldrb	r3, [r3, #29]
 8003842:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003844:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7f9b      	ldrb	r3, [r3, #30]
 800384a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800384c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7fdb      	ldrb	r3, [r3, #31]
 8003854:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800385a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800385c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 021e 	orr.w	r2, r2, #30
 800386c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	ffe0f007 	.word	0xffe0f007

0800388c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800389a:	f7ff fae1 	bl	8002e60 <HAL_GetTick>
 800389e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d008      	beq.n	80038be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e052      	b.n	8003964 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0216 	bic.w	r2, r2, #22
 80038cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_DMA_Abort+0x62>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0208 	bic.w	r2, r2, #8
 80038fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390e:	e013      	b.n	8003938 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003910:	f7ff faa6 	bl	8002e60 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b05      	cmp	r3, #5
 800391c:	d90c      	bls.n	8003938 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e015      	b.n	8003964 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e4      	bne.n	8003910 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	223f      	movs	r2, #63	@ 0x3f
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d004      	beq.n	800398a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	@ 0x80
 8003984:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e00c      	b.n	80039a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2205      	movs	r2, #5
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e039      	b.n	8003a36 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fc ffc6 	bl	8000968 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	f023 0107 	bic.w	r1, r3, #7
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a16:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <HAL_DMA2D_Init+0x90>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68d1      	ldr	r1, [r2, #12]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	430b      	orrs	r3, r1
 8003a24:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	ffffc000 	.word	0xffffc000

08003a44 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d026      	beq.n	8003ab4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d021      	beq.n	8003ab4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d026      	beq.n	8003b0c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d021      	beq.n	8003b0c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2220      	movs	r2, #32
 8003ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	f043 0202 	orr.w	r2, r3, #2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d026      	beq.n	8003b64 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d021      	beq.n	8003b64 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2204      	movs	r2, #4
 8003b48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d013      	beq.n	8003b96 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f853 	bl	8003c3c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d024      	beq.n	8003bea <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01f      	beq.n	8003bea <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01f      	beq.n	8003c34 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01a      	beq.n	8003c34 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f80e 	bl	8003c50 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_DMA2D_ConfigLayer+0x20>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e079      	b.n	8003d78 <HAL_DMA2D_ConfigLayer+0x114>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	3318      	adds	r3, #24
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cae:	4b35      	ldr	r3, [pc, #212]	@ (8003d84 <HAL_DMA2D_ConfigLayer+0x120>)
 8003cb0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b0a      	cmp	r3, #10
 8003cb8:	d003      	beq.n	8003cc2 <HAL_DMA2D_ConfigLayer+0x5e>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b09      	cmp	r3, #9
 8003cc0:	d107      	bne.n	8003cd2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e005      	b.n	8003cde <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d120      	bne.n	8003d26 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	ea02 0103 	and.w	r1, r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d003      	beq.n	8003d16 <HAL_DMA2D_ConfigLayer+0xb2>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d127      	bne.n	8003d66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d24:	e01f      	b.n	8003d66 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	ea02 0103 	and.w	r1, r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b0a      	cmp	r3, #10
 8003d4e:	d003      	beq.n	8003d58 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b09      	cmp	r3, #9
 8003d56:	d106      	bne.n	8003d66 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d64:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	ff03000f 	.word	0xff03000f

08003d88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e086      	b.n	8003ea8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fc fe4f 	bl	8000a50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db2:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb0 <HAL_ETH_Init+0x128>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb0 <HAL_ETH_Init+0x128>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8003eb0 <HAL_ETH_Init+0x128>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003dca:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb4 <HAL_ETH_Init+0x12c>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a39      	ldr	r2, [pc, #228]	@ (8003eb4 <HAL_ETH_Init+0x12c>)
 8003dd0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003dd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003dd6:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_ETH_Init+0x12c>)
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4935      	ldr	r1, [pc, #212]	@ (8003eb4 <HAL_ETH_Init+0x12c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003de4:	4b33      	ldr	r3, [pc, #204]	@ (8003eb4 <HAL_ETH_Init+0x12c>)
 8003de6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e00:	f7ff f82e 	bl	8002e60 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e06:	e011      	b.n	8003e2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e08:	f7ff f82a 	bl	8002e60 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e16:	d909      	bls.n	8003e2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	22e0      	movs	r2, #224	@ 0xe0
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e03d      	b.n	8003ea8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e4      	bne.n	8003e08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f97a 	bl	8004138 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fa25 	bl	8004294 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa7b 	bl	8004346 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	461a      	mov	r2, r3
 8003e56:	2100      	movs	r1, #0
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9e3 	bl	8004224 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb8 <HAL_ETH_Init+0x130>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003e92:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	00020060 	.word	0x00020060

08003ebc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4b53      	ldr	r3, [pc, #332]	@ (8004020 <ETH_SetMACConfig+0x164>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	7b9b      	ldrb	r3, [r3, #14]
 8003eda:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	7c12      	ldrb	r2, [r2, #16]
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d102      	bne.n	8003eea <ETH_SetMACConfig+0x2e>
 8003ee4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ee8:	e000      	b.n	8003eec <ETH_SetMACConfig+0x30>
 8003eea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003eec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	7c52      	ldrb	r2, [r2, #17]
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	d102      	bne.n	8003efc <ETH_SetMACConfig+0x40>
 8003ef6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003efa:	e000      	b.n	8003efe <ETH_SetMACConfig+0x42>
 8003efc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003efe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	7fdb      	ldrb	r3, [r3, #31]
 8003f0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	7f92      	ldrb	r2, [r2, #30]
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	d102      	bne.n	8003f22 <ETH_SetMACConfig+0x66>
 8003f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f20:	e000      	b.n	8003f24 <ETH_SetMACConfig+0x68>
 8003f22:	2200      	movs	r2, #0
                        macconf->Speed |
 8003f24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	7f1b      	ldrb	r3, [r3, #28]
 8003f2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003f32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003f3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d102      	bne.n	8003f4c <ETH_SetMACConfig+0x90>
 8003f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4a:	e000      	b.n	8003f4e <ETH_SetMACConfig+0x92>
 8003f4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003f4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	7bdb      	ldrb	r3, [r3, #15]
 8003f54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003f56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003f5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f66:	4313      	orrs	r3, r2
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7fe ff7a 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003faa:	2a00      	cmp	r2, #0
 8003fac:	d101      	bne.n	8003fb2 <ETH_SetMACConfig+0xf6>
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	e000      	b.n	8003fb4 <ETH_SetMACConfig+0xf8>
 8003fb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003fb4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003fba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003fc2:	2a01      	cmp	r2, #1
 8003fc4:	d101      	bne.n	8003fca <ETH_SetMACConfig+0x10e>
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	e000      	b.n	8003fcc <ETH_SetMACConfig+0x110>
 8003fca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003fcc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003fd4:	2a01      	cmp	r2, #1
 8003fd6:	d101      	bne.n	8003fdc <ETH_SetMACConfig+0x120>
 8003fd8:	2204      	movs	r2, #4
 8003fda:	e000      	b.n	8003fde <ETH_SetMACConfig+0x122>
 8003fdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003fde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003fe6:	2a01      	cmp	r2, #1
 8003fe8:	d101      	bne.n	8003fee <ETH_SetMACConfig+0x132>
 8003fea:	2202      	movs	r2, #2
 8003fec:	e000      	b.n	8003ff0 <ETH_SetMACConfig+0x134>
 8003fee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004008:	2001      	movs	r0, #1
 800400a:	f7fe ff35 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	fd20810f 	.word	0xfd20810f

08004024 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4b3d      	ldr	r3, [pc, #244]	@ (8004134 <ETH_SetDMAConfig+0x110>)
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	7b1b      	ldrb	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <ETH_SetDMAConfig+0x2c>
 800404a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800404e:	e000      	b.n	8004052 <ETH_SetDMAConfig+0x2e>
 8004050:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	7b5b      	ldrb	r3, [r3, #13]
 8004056:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004058:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	7f52      	ldrb	r2, [r2, #29]
 800405e:	2a00      	cmp	r2, #0
 8004060:	d102      	bne.n	8004068 <ETH_SetDMAConfig+0x44>
 8004062:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004066:	e000      	b.n	800406a <ETH_SetDMAConfig+0x46>
 8004068:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800406a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7b9b      	ldrb	r3, [r3, #14]
 8004070:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004072:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004078:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	7f1b      	ldrb	r3, [r3, #28]
 800407e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004080:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	7f9b      	ldrb	r3, [r3, #30]
 8004086:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004088:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800408e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004096:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004098:	4313      	orrs	r3, r2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7fe fedc 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c8:	461a      	mov	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	791b      	ldrb	r3, [r3, #4]
 80040d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80040de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80040e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80040ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80040f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80040fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004106:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800410a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004118:	2001      	movs	r0, #1
 800411a:	f7fe fead 	bl	8002e78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	f8de3f23 	.word	0xf8de3f23

08004138 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b0a6      	sub	sp, #152	@ 0x98
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800414c:	2300      	movs	r3, #0
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800417a:	2300      	movs	r3, #0
 800417c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004184:	2300      	movs	r3, #0
 8004186:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800418e:	2300      	movs	r3, #0
 8004190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80041a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80041b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fe7f 	bl	8003ebc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80041be:	2301      	movs	r3, #1
 80041c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80041ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041f8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041fe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004206:	2300      	movs	r3, #0
 8004208:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff05 	bl	8004024 <ETH_SetDMAConfig>
}
 800421a:	bf00      	nop
 800421c:	3798      	adds	r7, #152	@ 0x98
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3305      	adds	r3, #5
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	3204      	adds	r2, #4
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	4b11      	ldr	r3, [pc, #68]	@ (800428c <ETH_MACAddressConfig+0x68>)
 8004246:	4413      	add	r3, r2
 8004248:	461a      	mov	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3303      	adds	r3, #3
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	061a      	lsls	r2, r3, #24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3302      	adds	r3, #2
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3301      	adds	r3, #1
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	4313      	orrs	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <ETH_MACAddressConfig+0x6c>)
 8004276:	4413      	add	r3, r2
 8004278:	461a      	mov	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40028040 	.word	0x40028040
 8004290:	40028044 	.word	0x40028044

08004294 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e03e      	b.n	8004320 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68d9      	ldr	r1, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	440b      	add	r3, r1
 80042b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	3206      	adds	r2, #6
 80042d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d80c      	bhi.n	8004304 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	440b      	add	r3, r1
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	e004      	b.n	800430e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d9bd      	bls.n	80042a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004338:	611a      	str	r2, [r3, #16]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e048      	b.n	80043e6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6919      	ldr	r1, [r3, #16]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2200      	movs	r2, #0
 8004382:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004390:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	3212      	adds	r2, #18
 80043b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d80c      	bhi.n	80043d6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6919      	ldr	r1, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	440b      	add	r3, r1
 80043ce:	461a      	mov	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	e004      	b.n	80043e0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	461a      	mov	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d9b3      	bls.n	8004354 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004416:	60da      	str	r2, [r3, #12]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	@ 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	e175      	b.n	8004730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004444:	2201      	movs	r2, #1
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	f040 8164 	bne.w	800472a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d005      	beq.n	800447a <HAL_GPIO_Init+0x56>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d130      	bne.n	80044dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b0:	2201      	movs	r2, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 0201 	and.w	r2, r3, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d017      	beq.n	8004518 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	2203      	movs	r2, #3
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d123      	bne.n	800456c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	08da      	lsrs	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3208      	adds	r2, #8
 800452c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	220f      	movs	r2, #15
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	08da      	lsrs	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3208      	adds	r2, #8
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0203 	and.w	r2, r3, #3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80be 	beq.w	800472a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ae:	4b66      	ldr	r3, [pc, #408]	@ (8004748 <HAL_GPIO_Init+0x324>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b2:	4a65      	ldr	r2, [pc, #404]	@ (8004748 <HAL_GPIO_Init+0x324>)
 80045b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ba:	4b63      	ldr	r3, [pc, #396]	@ (8004748 <HAL_GPIO_Init+0x324>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045c6:	4a61      	ldr	r2, [pc, #388]	@ (800474c <HAL_GPIO_Init+0x328>)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	220f      	movs	r2, #15
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a58      	ldr	r2, [pc, #352]	@ (8004750 <HAL_GPIO_Init+0x32c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d037      	beq.n	8004662 <HAL_GPIO_Init+0x23e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a57      	ldr	r2, [pc, #348]	@ (8004754 <HAL_GPIO_Init+0x330>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_GPIO_Init+0x23a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <HAL_GPIO_Init+0x334>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d02b      	beq.n	800465a <HAL_GPIO_Init+0x236>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a55      	ldr	r2, [pc, #340]	@ (800475c <HAL_GPIO_Init+0x338>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d025      	beq.n	8004656 <HAL_GPIO_Init+0x232>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a54      	ldr	r2, [pc, #336]	@ (8004760 <HAL_GPIO_Init+0x33c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01f      	beq.n	8004652 <HAL_GPIO_Init+0x22e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a53      	ldr	r2, [pc, #332]	@ (8004764 <HAL_GPIO_Init+0x340>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d019      	beq.n	800464e <HAL_GPIO_Init+0x22a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a52      	ldr	r2, [pc, #328]	@ (8004768 <HAL_GPIO_Init+0x344>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_GPIO_Init+0x226>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a51      	ldr	r2, [pc, #324]	@ (800476c <HAL_GPIO_Init+0x348>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00d      	beq.n	8004646 <HAL_GPIO_Init+0x222>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a50      	ldr	r2, [pc, #320]	@ (8004770 <HAL_GPIO_Init+0x34c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <HAL_GPIO_Init+0x21e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4f      	ldr	r2, [pc, #316]	@ (8004774 <HAL_GPIO_Init+0x350>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <HAL_GPIO_Init+0x21a>
 800463a:	2309      	movs	r3, #9
 800463c:	e012      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800463e:	230a      	movs	r3, #10
 8004640:	e010      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004642:	2308      	movs	r3, #8
 8004644:	e00e      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004646:	2307      	movs	r3, #7
 8004648:	e00c      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800464a:	2306      	movs	r3, #6
 800464c:	e00a      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800464e:	2305      	movs	r3, #5
 8004650:	e008      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004652:	2304      	movs	r3, #4
 8004654:	e006      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004656:	2303      	movs	r3, #3
 8004658:	e004      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800465a:	2302      	movs	r3, #2
 800465c:	e002      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004662:	2300      	movs	r3, #0
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	f002 0203 	and.w	r2, r2, #3
 800466a:	0092      	lsls	r2, r2, #2
 800466c:	4093      	lsls	r3, r2
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004674:	4935      	ldr	r1, [pc, #212]	@ (800474c <HAL_GPIO_Init+0x328>)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	3302      	adds	r3, #2
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004682:	4b3d      	ldr	r3, [pc, #244]	@ (8004778 <HAL_GPIO_Init+0x354>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	43db      	mvns	r3, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4013      	ands	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046a6:	4a34      	ldr	r2, [pc, #208]	@ (8004778 <HAL_GPIO_Init+0x354>)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046ac:	4b32      	ldr	r3, [pc, #200]	@ (8004778 <HAL_GPIO_Init+0x354>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d0:	4a29      	ldr	r2, [pc, #164]	@ (8004778 <HAL_GPIO_Init+0x354>)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046d6:	4b28      	ldr	r3, [pc, #160]	@ (8004778 <HAL_GPIO_Init+0x354>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <HAL_GPIO_Init+0x354>)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004700:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <HAL_GPIO_Init+0x354>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004724:	4a14      	ldr	r2, [pc, #80]	@ (8004778 <HAL_GPIO_Init+0x354>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b0f      	cmp	r3, #15
 8004734:	f67f ae86 	bls.w	8004444 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3724      	adds	r7, #36	@ 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40023800 	.word	0x40023800
 800474c:	40013800 	.word	0x40013800
 8004750:	40020000 	.word	0x40020000
 8004754:	40020400 	.word	0x40020400
 8004758:	40020800 	.word	0x40020800
 800475c:	40020c00 	.word	0x40020c00
 8004760:	40021000 	.word	0x40021000
 8004764:	40021400 	.word	0x40021400
 8004768:	40021800 	.word	0x40021800
 800476c:	40021c00 	.word	0x40021c00
 8004770:	40022000 	.word	0x40022000
 8004774:	40022400 	.word	0x40022400
 8004778:	40013c00 	.word	0x40013c00

0800477c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e001      	b.n	800479e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047c8:	e003      	b.n	80047d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	041a      	lsls	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	af02      	add	r7, sp, #8
 80047e4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e059      	b.n	80048a4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f00c ff32 	bl	8011674 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2203      	movs	r2, #3
 8004814:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800481e:	d102      	bne.n	8004826 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f009 fb51 	bl	800ded2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7c1a      	ldrb	r2, [r3, #16]
 8004838:	f88d 2000 	strb.w	r2, [sp]
 800483c:	3304      	adds	r3, #4
 800483e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004840:	f009 fadc 	bl	800ddfc <USB_CoreInit>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e026      	b.n	80048a4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f009 fb49 	bl	800def4 <USB_SetCurrentMode>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e017      	b.n	80048a4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7c1a      	ldrb	r2, [r3, #16]
 800487c:	f88d 2000 	strb.w	r2, [sp]
 8004880:	3304      	adds	r3, #4
 8004882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004884:	f009 fcf2 	bl	800e26c <USB_HostInit>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e004      	b.n	80048a4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b08b      	sub	sp, #44	@ 0x2c
 80048b0:	af04      	add	r7, sp, #16
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	70fb      	strb	r3, [r7, #3]
 80048be:	460b      	mov	r3, r1
 80048c0:	70bb      	strb	r3, [r7, #2]
 80048c2:	4613      	mov	r3, r2
 80048c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80048c6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048c8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_HCD_HC_Init+0x2c>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e09d      	b.n	8004a14 <HAL_HCD_HC_Init+0x168>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	3319      	adds	r3, #25
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	3314      	adds	r3, #20
 8004904:	787a      	ldrb	r2, [r7, #1]
 8004906:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	3315      	adds	r3, #21
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	3326      	adds	r3, #38	@ 0x26
 800492c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004930:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	78bb      	ldrb	r3, [r7, #2]
 8004936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800493a:	b2d8      	uxtb	r0, r3
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3316      	adds	r3, #22
 800494a:	4602      	mov	r2, r0
 800494c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fbc8 	bl	80050e8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004958:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da0a      	bge.n	8004976 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	3317      	adds	r3, #23
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e009      	b.n	800498a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3317      	adds	r3, #23
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f009 fdc4 	bl	800e51c <USB_GetHostSpeed>
 8004994:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004996:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10b      	bne.n	80049b6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800499e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_HCD_HC_Init+0x10a>
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2bbc      	cmp	r3, #188	@ 0xbc
 80049b0:	d901      	bls.n	80049b6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80049b2:	23bc      	movs	r3, #188	@ 0xbc
 80049b4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3318      	adds	r3, #24
 80049c6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80049ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	b298      	uxth	r0, r3
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3328      	adds	r3, #40	@ 0x28
 80049e0:	4602      	mov	r2, r0
 80049e2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	787c      	ldrb	r4, [r7, #1]
 80049ee:	78ba      	ldrb	r2, [r7, #2]
 80049f0:	78f9      	ldrb	r1, [r7, #3]
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4623      	mov	r3, r4
 8004a02:	f009 fdb3 	bl	800e56c <USB_HC_Init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}

08004a1c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_HCD_HC_Halt+0x1e>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e00f      	b.n	8004a5a <HAL_HCD_HC_Halt+0x3e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00a f945 	bl	800ecda <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	70fb      	strb	r3, [r7, #3]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70bb      	strb	r3, [r7, #2]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3317      	adds	r3, #23
 8004a8e:	78ba      	ldrb	r2, [r7, #2]
 8004a90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3326      	adds	r3, #38	@ 0x26
 8004aa2:	787a      	ldrb	r2, [r7, #1]
 8004aa4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004aa6:	7c3b      	ldrb	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d114      	bne.n	8004ad6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	332a      	adds	r3, #42	@ 0x2a
 8004abc:	2203      	movs	r2, #3
 8004abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3319      	adds	r3, #25
 8004ad0:	7f3a      	ldrb	r2, [r7, #28]
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e009      	b.n	8004aea <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	332a      	adds	r3, #42	@ 0x2a
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004aea:	787b      	ldrb	r3, [r7, #1]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	f200 8102 	bhi.w	8004cf6 <HAL_HCD_HC_SubmitRequest+0x292>
 8004af2:	a201      	add	r2, pc, #4	@ (adr r2, 8004af8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b09 	.word	0x08004b09
 8004afc:	08004ce1 	.word	0x08004ce1
 8004b00:	08004bcd 	.word	0x08004bcd
 8004b04:	08004c57 	.word	0x08004c57
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004b08:	7c3b      	ldrb	r3, [r7, #16]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f040 80f5 	bne.w	8004cfa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004b10:	78bb      	ldrb	r3, [r7, #2]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d12d      	bne.n	8004b72 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004b16:	8b3b      	ldrh	r3, [r7, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	333d      	adds	r3, #61	@ 0x3d
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	333d      	adds	r3, #61	@ 0x3d
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	332a      	adds	r3, #42	@ 0x2a
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004b5a:	e0ce      	b.n	8004cfa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	332a      	adds	r3, #42	@ 0x2a
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	701a      	strb	r2, [r3, #0]
      break;
 8004b70:	e0c3      	b.n	8004cfa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	331a      	adds	r3, #26
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f040 80b8 	bne.w	8004cfa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	333c      	adds	r3, #60	@ 0x3c
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	332a      	adds	r3, #42	@ 0x2a
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
      break;
 8004bb4:	e0a1      	b.n	8004cfa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	332a      	adds	r3, #42	@ 0x2a
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e096      	b.n	8004cfa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004bcc:	78bb      	ldrb	r3, [r7, #2]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d120      	bne.n	8004c14 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	333d      	adds	r3, #61	@ 0x3d
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	332a      	adds	r3, #42	@ 0x2a
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004bfc:	e07e      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	332a      	adds	r3, #42	@ 0x2a
 8004c0e:	2202      	movs	r2, #2
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	e073      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	333c      	adds	r3, #60	@ 0x3c
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	332a      	adds	r3, #42	@ 0x2a
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e05d      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	332a      	adds	r3, #42	@ 0x2a
 8004c50:	2202      	movs	r2, #2
 8004c52:	701a      	strb	r2, [r3, #0]
      break;
 8004c54:	e052      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c56:	78bb      	ldrb	r3, [r7, #2]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d120      	bne.n	8004c9e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	333d      	adds	r3, #61	@ 0x3d
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c72:	78fa      	ldrb	r2, [r7, #3]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	332a      	adds	r3, #42	@ 0x2a
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c86:	e039      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	332a      	adds	r3, #42	@ 0x2a
 8004c98:	2202      	movs	r2, #2
 8004c9a:	701a      	strb	r2, [r3, #0]
      break;
 8004c9c:	e02e      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	333c      	adds	r3, #60	@ 0x3c
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	332a      	adds	r3, #42	@ 0x2a
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
      break;
 8004cc8:	e018      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	332a      	adds	r3, #42	@ 0x2a
 8004cda:	2202      	movs	r2, #2
 8004cdc:	701a      	strb	r2, [r3, #0]
      break;
 8004cde:	e00d      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	332a      	adds	r3, #42	@ 0x2a
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004cfa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	332c      	adds	r3, #44	@ 0x2c
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	8b39      	ldrh	r1, [r7, #24]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4403      	add	r3, r0
 8004d20:	3334      	adds	r3, #52	@ 0x34
 8004d22:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	334c      	adds	r3, #76	@ 0x4c
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3338      	adds	r3, #56	@ 0x38
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3315      	adds	r3, #21
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	334d      	adds	r3, #77	@ 0x4d
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	3310      	adds	r3, #16
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	799b      	ldrb	r3, [r3, #6]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f009 fd18 	bl	800e7c4 <USB_HC_StartXfer>
 8004d94:	4603      	mov	r3, r0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop

08004da0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f009 fa12 	bl	800e1e0 <USB_GetMode>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	f040 80fb 	bne.w	8004fba <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f009 f9d5 	bl	800e178 <USB_ReadInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80f1 	beq.w	8004fb8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f009 f9cc 	bl	800e178 <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004de6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dea:	d104      	bne.n	8004df6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f009 f9bc 	bl	800e178 <USB_ReadInterrupts>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e0a:	d104      	bne.n	8004e16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f009 f9ac 	bl	800e178 <USB_ReadInterrupts>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e2a:	d104      	bne.n	8004e36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004e34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f009 f99c 	bl	800e178 <USB_ReadInterrupts>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d103      	bne.n	8004e52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f009 f98e 	bl	800e178 <USB_ReadInterrupts>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e66:	d120      	bne.n	8004eaa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d113      	bne.n	8004eaa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e82:	2110      	movs	r1, #16
 8004e84:	6938      	ldr	r0, [r7, #16]
 8004e86:	f009 f881 	bl	800df8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e8a:	6938      	ldr	r0, [r7, #16]
 8004e8c:	f009 f8b0 	bl	800dff0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7a5b      	ldrb	r3, [r3, #9]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d105      	bne.n	8004ea4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f009 fa9c 	bl	800e3dc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f00c fc57 	bl	8011758 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f009 f962 	bl	800e178 <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ebe:	d102      	bne.n	8004ec6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 fd4d 	bl	8006960 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f009 f954 	bl	800e178 <USB_ReadInterrupts>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d106      	bne.n	8004ee8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f00c fc20 	bl	8011720 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f009 f943 	bl	800e178 <USB_ReadInterrupts>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efc:	d139      	bne.n	8004f72 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f009 fed8 	bl	800ecb8 <USB_HC_ReadInterrupt>
 8004f08:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e025      	b.n	8004f5c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d018      	beq.n	8004f56 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3a:	d106      	bne.n	8004f4a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f905 	bl	8005152 <HCD_HC_IN_IRQHandler>
 8004f48:	e005      	b.n	8004f56 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 ff67 	bl	8005e24 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	795b      	ldrb	r3, [r3, #5]
 8004f60:	461a      	mov	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d3d3      	bcc.n	8004f10 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f009 f8fe 	bl	800e178 <USB_ReadInterrupts>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d101      	bne.n	8004f8a <HAL_HCD_IRQHandler+0x1ea>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_HCD_IRQHandler+0x1ec>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d014      	beq.n	8004fba <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0210 	bic.w	r2, r2, #16
 8004f9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 fbfe 	bl	80067a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0210 	orr.w	r2, r2, #16
 8004fb4:	619a      	str	r2, [r3, #24]
 8004fb6:	e000      	b.n	8004fba <HAL_HCD_IRQHandler+0x21a>
      return;
 8004fb8:	bf00      	nop
    }
  }
}
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_HCD_Start+0x16>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e013      	b.n	8004ffe <HAL_HCD_Start+0x3e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f009 fa60 	bl	800e4aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f008 ff5e 	bl	800deb0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_HCD_Stop+0x16>
 8005018:	2302      	movs	r3, #2
 800501a:	e00d      	b.n	8005038 <HAL_HCD_Stop+0x32>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f009 ffb3 	bl	800ef94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f009 fa02 	bl	800e456 <USB_ResetPort>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	334c      	adds	r3, #76	@ 0x4c
 8005078:	781b      	ldrb	r3, [r3, #0]
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3338      	adds	r3, #56	@ 0x38
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f009 fa44 	bl	800e54a <USB_GetCurrentFrame>
 80050c2:	4603      	mov	r3, r0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f009 fa1f 	bl	800e51c <USB_GetHostSpeed>
 80050de:	4603      	mov	r3, r0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	331a      	adds	r3, #26
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	331b      	adds	r3, #27
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	3325      	adds	r3, #37	@ 0x25
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3324      	adds	r3, #36	@ 0x24
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	78fa      	ldrb	r2, [r7, #3]
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f009 f814 	bl	800e19e <USB_ReadChInterrupts>
 8005176:	4603      	mov	r3, r0
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11a      	bne.n	80051b6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2304      	movs	r3, #4
 8005190:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	334d      	adds	r3, #77	@ 0x4d
 80051a2:	2207      	movs	r2, #7
 80051a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f009 fd93 	bl	800ecda <USB_HC_Halt>
 80051b4:	e09e      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f008 ffed 	bl	800e19e <USB_ReadChInterrupts>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ce:	d11b      	bne.n	8005208 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051dc:	461a      	mov	r2, r3
 80051de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	1a9b      	subs	r3, r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	334d      	adds	r3, #77	@ 0x4d
 80051f4:	2208      	movs	r2, #8
 80051f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f009 fd6a 	bl	800ecda <USB_HC_Halt>
 8005206:	e075      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f008 ffc4 	bl	800e19e <USB_ReadChInterrupts>
 8005216:	4603      	mov	r3, r0
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b08      	cmp	r3, #8
 800521e:	d11a      	bne.n	8005256 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522c:	461a      	mov	r2, r3
 800522e:	2308      	movs	r3, #8
 8005230:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	334d      	adds	r3, #77	@ 0x4d
 8005242:	2206      	movs	r2, #6
 8005244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f009 fd43 	bl	800ecda <USB_HC_Halt>
 8005254:	e04e      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	4611      	mov	r1, r2
 800525e:	4618      	mov	r0, r3
 8005260:	f008 ff9d 	bl	800e19e <USB_ReadChInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526e:	d11b      	bne.n	80052a8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527c:	461a      	mov	r2, r3
 800527e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005282:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	334d      	adds	r3, #77	@ 0x4d
 8005294:	2209      	movs	r2, #9
 8005296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	4611      	mov	r1, r2
 80052a0:	4618      	mov	r0, r3
 80052a2:	f009 fd1a 	bl	800ecda <USB_HC_Halt>
 80052a6:	e025      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f008 ff74 	bl	800e19e <USB_ReadChInterrupts>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052bc:	2b80      	cmp	r3, #128	@ 0x80
 80052be:	d119      	bne.n	80052f4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	2380      	movs	r3, #128	@ 0x80
 80052d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	334d      	adds	r3, #77	@ 0x4d
 80052e2:	2207      	movs	r2, #7
 80052e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f009 fcf3 	bl	800ecda <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f008 ff4e 	bl	800e19e <USB_ReadChInterrupts>
 8005302:	4603      	mov	r3, r0
 8005304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800530c:	d112      	bne.n	8005334 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f009 fcdf 	bl	800ecda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005328:	461a      	mov	r2, r3
 800532a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	f000 bd75 	b.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f008 ff2e 	bl	800e19e <USB_ReadChInterrupts>
 8005342:	4603      	mov	r3, r0
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	f040 8128 	bne.w	800559e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535a:	461a      	mov	r2, r3
 800535c:	2320      	movs	r3, #32
 800535e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	331b      	adds	r3, #27
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d119      	bne.n	80053aa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	331b      	adds	r3, #27
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4413      	add	r3, r2
 8005392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	799b      	ldrb	r3, [r3, #6]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01b      	beq.n	80053ea <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3330      	adds	r3, #48	@ 0x30
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	1ac9      	subs	r1, r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4403      	add	r3, r0
 80053e6:	3338      	adds	r3, #56	@ 0x38
 80053e8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	334d      	adds	r3, #77	@ 0x4d
 80053fa:	2201      	movs	r2, #1
 80053fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3344      	adds	r3, #68	@ 0x44
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800541e:	461a      	mov	r2, r3
 8005420:	2301      	movs	r3, #1
 8005422:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	3326      	adds	r3, #38	@ 0x26
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3326      	adds	r3, #38	@ 0x26
 800544a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800544c:	2b02      	cmp	r3, #2
 800544e:	d110      	bne.n	8005472 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f009 fc3e 	bl	800ecda <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800546a:	461a      	mov	r2, r3
 800546c:	2310      	movs	r3, #16
 800546e:	6093      	str	r3, [r2, #8]
 8005470:	e03d      	b.n	80054ee <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	3326      	adds	r3, #38	@ 0x26
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d00a      	beq.n	800549e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	3326      	adds	r3, #38	@ 0x26
 8005498:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800549a:	2b01      	cmp	r3, #1
 800549c:	d127      	bne.n	80054ee <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	334c      	adds	r3, #76	@ 0x4c
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	334c      	adds	r3, #76	@ 0x4c
 80054e2:	781a      	ldrb	r2, [r3, #0]
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f00c f943 	bl	8011774 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	799b      	ldrb	r3, [r3, #6]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d13b      	bne.n	800556e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	3338      	adds	r3, #56	@ 0x38
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4613      	mov	r3, r2
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4403      	add	r3, r0
 8005516:	3328      	adds	r3, #40	@ 0x28
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	440b      	add	r3, r1
 800551c:	1e59      	subs	r1, r3, #1
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4403      	add	r3, r0
 800552c:	3328      	adds	r3, #40	@ 0x28
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	fbb1 f3f3 	udiv	r3, r1, r3
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8470 	beq.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	333c      	adds	r3, #60	@ 0x3c
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	f083 0301 	eor.w	r3, r3, #1
 8005556:	b2d8      	uxtb	r0, r3
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	333c      	adds	r3, #60	@ 0x3c
 8005566:	4602      	mov	r2, r0
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	f000 bc58 	b.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	333c      	adds	r3, #60	@ 0x3c
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	f083 0301 	eor.w	r3, r3, #1
 8005586:	b2d8      	uxtb	r0, r3
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	333c      	adds	r3, #60	@ 0x3c
 8005596:	4602      	mov	r2, r0
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	f000 bc40 	b.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f008 fdf9 	bl	800e19e <USB_ReadChInterrupts>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d131      	bne.n	800561a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c2:	461a      	mov	r2, r3
 80055c4:	2320      	movs	r3, #32
 80055c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	331a      	adds	r3, #26
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	f040 841f 	bne.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	331b      	adds	r3, #27
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	334d      	adds	r3, #77	@ 0x4d
 8005604:	2203      	movs	r2, #3
 8005606:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f009 fb62 	bl	800ecda <USB_HC_Halt>
 8005616:	f000 bc02 	b.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f008 fdbb 	bl	800e19e <USB_ReadChInterrupts>
 8005628:	4603      	mov	r3, r0
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	f040 8305 	bne.w	8005c3e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005640:	461a      	mov	r2, r3
 8005642:	2302      	movs	r3, #2
 8005644:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	334d      	adds	r3, #77	@ 0x4d
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d114      	bne.n	8005686 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	334d      	adds	r3, #77	@ 0x4d
 800566c:	2202      	movs	r2, #2
 800566e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	334c      	adds	r3, #76	@ 0x4c
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e2cc      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	334d      	adds	r3, #77	@ 0x4d
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b06      	cmp	r3, #6
 800569a:	d114      	bne.n	80056c6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	334d      	adds	r3, #77	@ 0x4d
 80056ac:	2202      	movs	r2, #2
 80056ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334c      	adds	r3, #76	@ 0x4c
 80056c0:	2205      	movs	r2, #5
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e2ac      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	334d      	adds	r3, #77	@ 0x4d
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b07      	cmp	r3, #7
 80056da:	d00b      	beq.n	80056f4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	334d      	adds	r3, #77	@ 0x4d
 80056ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056ee:	2b09      	cmp	r3, #9
 80056f0:	f040 80a6 	bne.w	8005840 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056f4:	78fa      	ldrb	r2, [r7, #3]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	334d      	adds	r3, #77	@ 0x4d
 8005704:	2202      	movs	r2, #2
 8005706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3344      	adds	r3, #68	@ 0x44
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4403      	add	r3, r0
 8005728:	3344      	adds	r3, #68	@ 0x44
 800572a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3344      	adds	r3, #68	@ 0x44
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d943      	bls.n	80057ca <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005742:	78fa      	ldrb	r2, [r7, #3]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	3344      	adds	r3, #68	@ 0x44
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	331a      	adds	r3, #26
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d123      	bne.n	80057b4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	331b      	adds	r3, #27
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	331c      	adds	r3, #28
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4413      	add	r3, r2
 800579c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	334c      	adds	r3, #76	@ 0x4c
 80057c4:	2204      	movs	r2, #4
 80057c6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057c8:	e229      	b.n	8005c1e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	334c      	adds	r3, #76	@ 0x4c
 80057da:	2202      	movs	r2, #2
 80057dc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	3326      	adds	r3, #38	@ 0x26
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	3326      	adds	r3, #38	@ 0x26
 8005804:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005806:	2b02      	cmp	r3, #2
 8005808:	f040 8209 	bne.w	8005c1e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005822:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800582a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005838:	461a      	mov	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800583e:	e1ee      	b.n	8005c1e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	334d      	adds	r3, #77	@ 0x4d
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b05      	cmp	r3, #5
 8005854:	f040 80c8 	bne.w	80059e8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	1a9b      	subs	r3, r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	334d      	adds	r3, #77	@ 0x4d
 8005868:	2202      	movs	r2, #2
 800586a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	331b      	adds	r3, #27
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	f040 81ce 	bne.w	8005c20 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005884:	78fa      	ldrb	r2, [r7, #3]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3326      	adds	r3, #38	@ 0x26
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b03      	cmp	r3, #3
 8005898:	d16b      	bne.n	8005972 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3348      	adds	r3, #72	@ 0x48
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4403      	add	r3, r0
 80058ba:	3348      	adds	r3, #72	@ 0x48
 80058bc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80058be:	78fa      	ldrb	r2, [r7, #3]
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3348      	adds	r3, #72	@ 0x48
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d943      	bls.n	800595c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	3348      	adds	r3, #72	@ 0x48
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	331b      	adds	r3, #27
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80058fc:	78fa      	ldrb	r2, [r7, #3]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	3344      	adds	r3, #68	@ 0x44
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d809      	bhi.n	8005926 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	331c      	adds	r3, #28
 8005922:	2201      	movs	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	440a      	add	r2, r1
 800593c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005944:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	334c      	adds	r3, #76	@ 0x4c
 8005956:	2204      	movs	r2, #4
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e014      	b.n	8005986 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	334c      	adds	r3, #76	@ 0x4c
 800596c:	2202      	movs	r2, #2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e009      	b.n	8005986 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	334c      	adds	r3, #76	@ 0x4c
 8005982:	2202      	movs	r2, #2
 8005984:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3326      	adds	r3, #38	@ 0x26
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	3326      	adds	r3, #38	@ 0x26
 80059ac:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	f040 8136 	bne.w	8005c20 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059ca:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059d2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e0:	461a      	mov	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	e11b      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	334d      	adds	r3, #77	@ 0x4d
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	f040 8081 	bne.w	8005b02 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	334d      	adds	r3, #77	@ 0x4d
 8005a10:	2202      	movs	r2, #2
 8005a12:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	331b      	adds	r3, #27
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	f040 80fa 	bne.w	8005c20 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	4613      	mov	r3, r2
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	334c      	adds	r3, #76	@ 0x4c
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a7e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3326      	adds	r3, #38	@ 0x26
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	3326      	adds	r3, #38	@ 0x26
 8005ac6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f040 80a9 	bne.w	8005c20 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ae4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005aec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	e08e      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	334d      	adds	r3, #77	@ 0x4d
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d143      	bne.n	8005ba0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	334d      	adds	r3, #77	@ 0x4d
 8005b28:	2202      	movs	r2, #2
 8005b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	334c      	adds	r3, #76	@ 0x4c
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3326      	adds	r3, #38	@ 0x26
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3326      	adds	r3, #38	@ 0x26
 8005b66:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d159      	bne.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b82:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b8a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e03f      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	334d      	adds	r3, #77	@ 0x4d
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d126      	bne.n	8005c04 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	334d      	adds	r3, #77	@ 0x4d
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3344      	adds	r3, #68	@ 0x44
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1c59      	adds	r1, r3, #1
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4403      	add	r3, r0
 8005bea:	3344      	adds	r3, #68	@ 0x44
 8005bec:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	1a9b      	subs	r3, r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	334c      	adds	r3, #76	@ 0x4c
 8005bfe:	2204      	movs	r2, #4
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e00d      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	334d      	adds	r3, #77	@ 0x4d
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	f000 8100 	beq.w	8005e1c <HCD_HC_IN_IRQHandler+0xcca>
 8005c1c:	e000      	b.n	8005c20 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c1e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c20:	78fa      	ldrb	r2, [r7, #3]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	334c      	adds	r3, #76	@ 0x4c
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f00b fd9c 	bl	8011774 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c3c:	e0ef      	b.n	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f008 faa9 	bl	800e19e <USB_ReadChInterrupts>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b40      	cmp	r3, #64	@ 0x40
 8005c54:	d12f      	bne.n	8005cb6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c62:	461a      	mov	r2, r3
 8005c64:	2340      	movs	r3, #64	@ 0x40
 8005c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005c68:	78fa      	ldrb	r2, [r7, #3]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	334d      	adds	r3, #77	@ 0x4d
 8005c78:	2205      	movs	r2, #5
 8005c7a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	331a      	adds	r3, #26
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3344      	adds	r3, #68	@ 0x44
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	4611      	mov	r1, r2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f009 f813 	bl	800ecda <USB_HC_Halt>
 8005cb4:	e0b3      	b.n	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f008 fa6d 	bl	800e19e <USB_ReadChInterrupts>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	f040 80a7 	bne.w	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	3326      	adds	r3, #38	@ 0x26
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d11b      	bne.n	8005d1e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3344      	adds	r3, #68	@ 0x44
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	334d      	adds	r3, #77	@ 0x4d
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f008 ffdf 	bl	800ecda <USB_HC_Halt>
 8005d1c:	e03f      	b.n	8005d9e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d1e:	78fa      	ldrb	r2, [r7, #3]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	3326      	adds	r3, #38	@ 0x26
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	3326      	adds	r3, #38	@ 0x26
 8005d44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d129      	bne.n	8005d9e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	3344      	adds	r3, #68	@ 0x44
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	799b      	ldrb	r3, [r3, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HCD_HC_IN_IRQHandler+0xc2a>
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	331b      	adds	r3, #27
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d110      	bne.n	8005d9e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	334d      	adds	r3, #77	@ 0x4d
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	78fa      	ldrb	r2, [r7, #3]
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f008 ff9e 	bl	800ecda <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	331b      	adds	r3, #27
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d129      	bne.n	8005e08 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	331b      	adds	r3, #27
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e02:	f043 0320 	orr.w	r3, r3, #32
 8005e06:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e14:	461a      	mov	r2, r3
 8005e16:	2310      	movs	r3, #16
 8005e18:	6093      	str	r3, [r2, #8]
 8005e1a:	e000      	b.n	8005e1e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005e1c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f008 f9ab 	bl	800e19e <USB_ReadChInterrupts>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d11b      	bne.n	8005e8a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2304      	movs	r3, #4
 8005e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	334d      	adds	r3, #77	@ 0x4d
 8005e74:	2207      	movs	r2, #7
 8005e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4618      	mov	r0, r3
 8005e82:	f008 ff2a 	bl	800ecda <USB_HC_Halt>
 8005e86:	f000 bc89 	b.w	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f008 f983 	bl	800e19e <USB_ReadChInterrupts>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	f040 8082 	bne.w	8005fa8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3319      	adds	r3, #25
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d124      	bne.n	8005f16 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	3319      	adds	r3, #25
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	334c      	adds	r3, #76	@ 0x4c
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005ef4:	78fa      	ldrb	r2, [r7, #3]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	334d      	adds	r3, #77	@ 0x4d
 8005f04:	2203      	movs	r2, #3
 8005f06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f008 fee2 	bl	800ecda <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	331a      	adds	r3, #26
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 8437 	bne.w	800679c <HCD_HC_OUT_IRQHandler+0x978>
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	331b      	adds	r3, #27
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 842b 	bne.w	800679c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3326      	adds	r3, #38	@ 0x26
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d009      	beq.n	8005f70 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	331b      	adds	r3, #27
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	334d      	adds	r3, #77	@ 0x4d
 8005f80:	2203      	movs	r2, #3
 8005f82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f008 fea4 	bl	800ecda <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3344      	adds	r3, #68	@ 0x44
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e3f9      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f008 f8f4 	bl	800e19e <USB_ReadChInterrupts>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fc0:	d111      	bne.n	8005fe6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f008 fe7b 	bl	800ecda <USB_HC_Halt>
 8005fe4:	e3da      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f008 f8d5 	bl	800e19e <USB_ReadChInterrupts>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d168      	bne.n	80060d0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	3344      	adds	r3, #68	@ 0x44
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f008 f8bf 	bl	800e19e <USB_ReadChInterrupts>
 8006020:	4603      	mov	r3, r0
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b40      	cmp	r3, #64	@ 0x40
 8006028:	d112      	bne.n	8006050 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800602a:	78fa      	ldrb	r2, [r7, #3]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	3319      	adds	r3, #25
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604a:	461a      	mov	r2, r3
 800604c:	2340      	movs	r3, #64	@ 0x40
 800604e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	331b      	adds	r3, #27
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d019      	beq.n	800609a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	331b      	adds	r3, #27
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	78fa      	ldrb	r2, [r7, #3]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	440a      	add	r2, r1
 8006090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006098:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a6:	461a      	mov	r2, r3
 80060a8:	2301      	movs	r3, #1
 80060aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	334d      	adds	r3, #77	@ 0x4d
 80060bc:	2201      	movs	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f008 fe06 	bl	800ecda <USB_HC_Halt>
 80060ce:	e365      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f008 f860 	bl	800e19e <USB_ReadChInterrupts>
 80060de:	4603      	mov	r3, r0
 80060e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e4:	2b40      	cmp	r3, #64	@ 0x40
 80060e6:	d139      	bne.n	800615c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	334d      	adds	r3, #77	@ 0x4d
 80060f8:	2205      	movs	r2, #5
 80060fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	331a      	adds	r3, #26
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006112:	78fa      	ldrb	r2, [r7, #3]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3319      	adds	r3, #25
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3344      	adds	r3, #68	@ 0x44
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f008 fdc9 	bl	800ecda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006154:	461a      	mov	r2, r3
 8006156:	2340      	movs	r3, #64	@ 0x40
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	e31f      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	4611      	mov	r1, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f008 f81a 	bl	800e19e <USB_ReadChInterrupts>
 800616a:	4603      	mov	r3, r0
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d11a      	bne.n	80061aa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006180:	461a      	mov	r2, r3
 8006182:	2308      	movs	r3, #8
 8006184:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	334d      	adds	r3, #77	@ 0x4d
 8006196:	2206      	movs	r2, #6
 8006198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f008 fd99 	bl	800ecda <USB_HC_Halt>
 80061a8:	e2f8      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	4611      	mov	r1, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f007 fff3 	bl	800e19e <USB_ReadChInterrupts>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b10      	cmp	r3, #16
 80061c0:	d144      	bne.n	800624c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3344      	adds	r3, #68	@ 0x44
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	334d      	adds	r3, #77	@ 0x4d
 80061e6:	2204      	movs	r2, #4
 80061e8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	3319      	adds	r3, #25
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d114      	bne.n	800622a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4613      	mov	r3, r2
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	3318      	adds	r3, #24
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	3319      	adds	r3, #25
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	4611      	mov	r1, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f008 fd51 	bl	800ecda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006244:	461a      	mov	r2, r3
 8006246:	2310      	movs	r3, #16
 8006248:	6093      	str	r3, [r2, #8]
 800624a:	e2a7      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f007 ffa2 	bl	800e19e <USB_ReadChInterrupts>
 800625a:	4603      	mov	r3, r0
 800625c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006260:	2b80      	cmp	r3, #128	@ 0x80
 8006262:	f040 8083 	bne.w	800636c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	799b      	ldrb	r3, [r3, #6]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d111      	bne.n	8006292 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	334d      	adds	r3, #77	@ 0x4d
 800627e:	2207      	movs	r2, #7
 8006280:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f008 fd25 	bl	800ecda <USB_HC_Halt>
 8006290:	e062      	b.n	8006358 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	3344      	adds	r3, #68	@ 0x44
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4403      	add	r3, r0
 80062b2:	3344      	adds	r3, #68	@ 0x44
 80062b4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	3344      	adds	r3, #68	@ 0x44
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d922      	bls.n	8006312 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80062cc:	78fa      	ldrb	r2, [r7, #3]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	3344      	adds	r3, #68	@ 0x44
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	334c      	adds	r3, #76	@ 0x4c
 80062f0:	2204      	movs	r2, #4
 80062f2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	334c      	adds	r3, #76	@ 0x4c
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f00b fa32 	bl	8011774 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006310:	e022      	b.n	8006358 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	334c      	adds	r3, #76	@ 0x4c
 8006322:	2202      	movs	r2, #2
 8006324:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800633c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006344:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006352:	461a      	mov	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006364:	461a      	mov	r2, r3
 8006366:	2380      	movs	r3, #128	@ 0x80
 8006368:	6093      	str	r3, [r2, #8]
 800636a:	e217      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f007 ff12 	bl	800e19e <USB_ReadChInterrupts>
 800637a:	4603      	mov	r3, r0
 800637c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006384:	d11b      	bne.n	80063be <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	334d      	adds	r3, #77	@ 0x4d
 8006396:	2209      	movs	r2, #9
 8006398:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f008 fc99 	bl	800ecda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b4:	461a      	mov	r2, r3
 80063b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063ba:	6093      	str	r3, [r2, #8]
 80063bc:	e1ee      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f007 fee9 	bl	800e19e <USB_ReadChInterrupts>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f040 81df 	bne.w	8006796 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e4:	461a      	mov	r2, r3
 80063e6:	2302      	movs	r3, #2
 80063e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	4613      	mov	r3, r2
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	334d      	adds	r3, #77	@ 0x4d
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f040 8093 	bne.w	8006528 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	334d      	adds	r3, #77	@ 0x4d
 8006412:	2202      	movs	r2, #2
 8006414:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	334c      	adds	r3, #76	@ 0x4c
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	3326      	adds	r3, #38	@ 0x26
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d00b      	beq.n	8006458 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	1a9b      	subs	r3, r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	3326      	adds	r3, #38	@ 0x26
 8006450:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006452:	2b03      	cmp	r3, #3
 8006454:	f040 8190 	bne.w	8006778 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	799b      	ldrb	r3, [r3, #6]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d115      	bne.n	800648c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	333d      	adds	r3, #61	@ 0x3d
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	78fa      	ldrb	r2, [r7, #3]
 8006474:	f083 0301 	eor.w	r3, r3, #1
 8006478:	b2d8      	uxtb	r0, r3
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	333d      	adds	r3, #61	@ 0x3d
 8006488:	4602      	mov	r2, r0
 800648a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	799b      	ldrb	r3, [r3, #6]
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 8171 	bne.w	8006778 <HCD_HC_OUT_IRQHandler+0x954>
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3334      	adds	r3, #52	@ 0x34
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8165 	beq.w	8006778 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	3334      	adds	r3, #52	@ 0x34
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4403      	add	r3, r0
 80064ce:	3328      	adds	r3, #40	@ 0x28
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	440b      	add	r3, r1
 80064d4:	1e59      	subs	r1, r3, #1
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4403      	add	r3, r0
 80064e4:	3328      	adds	r3, #40	@ 0x28
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80064ec:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 813f 	beq.w	8006778 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80064fa:	78fa      	ldrb	r2, [r7, #3]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	333d      	adds	r3, #61	@ 0x3d
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	78fa      	ldrb	r2, [r7, #3]
 800650e:	f083 0301 	eor.w	r3, r3, #1
 8006512:	b2d8      	uxtb	r0, r3
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	333d      	adds	r3, #61	@ 0x3d
 8006522:	4602      	mov	r2, r0
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e127      	b.n	8006778 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	334d      	adds	r3, #77	@ 0x4d
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d120      	bne.n	8006580 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	334d      	adds	r3, #77	@ 0x4d
 800654e:	2202      	movs	r2, #2
 8006550:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	331b      	adds	r3, #27
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	f040 8107 	bne.w	8006778 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	334c      	adds	r3, #76	@ 0x4c
 800657a:	2202      	movs	r2, #2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e0fb      	b.n	8006778 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	334d      	adds	r3, #77	@ 0x4d
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d13a      	bne.n	800660c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	334d      	adds	r3, #77	@ 0x4d
 80065a6:	2202      	movs	r2, #2
 80065a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	334c      	adds	r3, #76	@ 0x4c
 80065ba:	2202      	movs	r2, #2
 80065bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	331b      	adds	r3, #27
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	f040 80d1 	bne.w	8006778 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	331b      	adds	r3, #27
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006608:	6053      	str	r3, [r2, #4]
 800660a:	e0b5      	b.n	8006778 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	334d      	adds	r3, #77	@ 0x4d
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b05      	cmp	r3, #5
 8006620:	d114      	bne.n	800664c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	334d      	adds	r3, #77	@ 0x4d
 8006632:	2202      	movs	r2, #2
 8006634:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006636:	78fa      	ldrb	r2, [r7, #3]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	334c      	adds	r3, #76	@ 0x4c
 8006646:	2202      	movs	r2, #2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	e095      	b.n	8006778 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800664c:	78fa      	ldrb	r2, [r7, #3]
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	334d      	adds	r3, #77	@ 0x4d
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b06      	cmp	r3, #6
 8006660:	d114      	bne.n	800668c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	334d      	adds	r3, #77	@ 0x4d
 8006672:	2202      	movs	r2, #2
 8006674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	334c      	adds	r3, #76	@ 0x4c
 8006686:	2205      	movs	r2, #5
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e075      	b.n	8006778 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	334d      	adds	r3, #77	@ 0x4d
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b07      	cmp	r3, #7
 80066a0:	d00a      	beq.n	80066b8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	334d      	adds	r3, #77	@ 0x4d
 80066b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d170      	bne.n	800679a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	334d      	adds	r3, #77	@ 0x4d
 80066c8:	2202      	movs	r2, #2
 80066ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	3344      	adds	r3, #68	@ 0x44
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	1c59      	adds	r1, r3, #1
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4403      	add	r3, r0
 80066ec:	3344      	adds	r3, #68	@ 0x44
 80066ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3344      	adds	r3, #68	@ 0x44
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d914      	bls.n	8006730 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3344      	adds	r3, #68	@ 0x44
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800671a:	78fa      	ldrb	r2, [r7, #3]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	334c      	adds	r3, #76	@ 0x4c
 800672a:	2204      	movs	r2, #4
 800672c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800672e:	e022      	b.n	8006776 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	1a9b      	subs	r3, r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	334c      	adds	r3, #76	@ 0x4c
 8006740:	2202      	movs	r2, #2
 8006742:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800675a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006762:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006770:	461a      	mov	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006776:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	334c      	adds	r3, #76	@ 0x4c
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f00a fff0 	bl	8011774 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006794:	e002      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006796:	bf00      	nop
 8006798:	e000      	b.n	800679c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800679a:	bf00      	nop
  }
}
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b08a      	sub	sp, #40	@ 0x28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	0c5b      	lsrs	r3, r3, #17
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d004      	beq.n	80067e8 <HCD_RXQLVL_IRQHandler+0x46>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	f000 80b6 	beq.w	8006952 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80067e6:	e0b7      	b.n	8006958 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 80b3 	beq.w	8006956 <HCD_RXQLVL_IRQHandler+0x1b4>
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4613      	mov	r3, r2
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	332c      	adds	r3, #44	@ 0x2c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80a7 	beq.w	8006956 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	3338      	adds	r3, #56	@ 0x38
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	18d1      	adds	r1, r2, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4613      	mov	r3, r2
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4403      	add	r3, r0
 800682c:	3334      	adds	r3, #52	@ 0x34
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4299      	cmp	r1, r3
 8006832:	f200 8083 	bhi.w	800693c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4613      	mov	r3, r2
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	332c      	adds	r3, #44	@ 0x2c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	b292      	uxth	r2, r2
 8006850:	4619      	mov	r1, r3
 8006852:	f007 fc39 	bl	800e0c8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	4613      	mov	r3, r2
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	332c      	adds	r3, #44	@ 0x2c
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	18d1      	adds	r1, r2, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	4613      	mov	r3, r2
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4403      	add	r3, r0
 800687a:	332c      	adds	r3, #44	@ 0x2c
 800687c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4613      	mov	r3, r2
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	3338      	adds	r3, #56	@ 0x38
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	18d1      	adds	r1, r2, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4613      	mov	r3, r2
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4403      	add	r3, r0
 80068a2:	3338      	adds	r3, #56	@ 0x38
 80068a4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	0cdb      	lsrs	r3, r3, #19
 80068b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4613      	mov	r3, r2
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	3328      	adds	r3, #40	@ 0x28
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d13f      	bne.n	8006956 <HCD_RXQLVL_IRQHandler+0x1b4>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d03c      	beq.n	8006956 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006908:	461a      	mov	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4613      	mov	r3, r2
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	333c      	adds	r3, #60	@ 0x3c
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f083 0301 	eor.w	r3, r3, #1
 8006924:	b2d8      	uxtb	r0, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4613      	mov	r3, r2
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	333c      	adds	r3, #60	@ 0x3c
 8006936:	4602      	mov	r2, r0
 8006938:	701a      	strb	r2, [r3, #0]
      break;
 800693a:	e00c      	b.n	8006956 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4613      	mov	r3, r2
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	334c      	adds	r3, #76	@ 0x4c
 800694c:	2204      	movs	r2, #4
 800694e:	701a      	strb	r2, [r3, #0]
      break;
 8006950:	e001      	b.n	8006956 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006956:	bf00      	nop
  }
}
 8006958:	bf00      	nop
 800695a:	3728      	adds	r7, #40	@ 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800698c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b02      	cmp	r3, #2
 8006996:	d10b      	bne.n	80069b0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d102      	bne.n	80069a8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f00a feca 	bl	801173c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f043 0302 	orr.w	r3, r3, #2
 80069ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d132      	bne.n	8006a20 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f043 0308 	orr.w	r3, r3, #8
 80069c0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d126      	bne.n	8006a1a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7a5b      	ldrb	r3, [r3, #9]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d113      	bne.n	80069fc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80069da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069de:	d106      	bne.n	80069ee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2102      	movs	r1, #2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f007 fcf8 	bl	800e3dc <USB_InitFSLSPClkSel>
 80069ec:	e011      	b.n	8006a12 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2101      	movs	r1, #1
 80069f4:	4618      	mov	r0, r3
 80069f6:	f007 fcf1 	bl	800e3dc <USB_InitFSLSPClkSel>
 80069fa:	e00a      	b.n	8006a12 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	79db      	ldrb	r3, [r3, #7]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d106      	bne.n	8006a12 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006a10:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f00a febc 	bl	8011790 <HAL_HCD_PortEnabled_Callback>
 8006a18:	e002      	b.n	8006a20 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f00a fec6 	bl	80117ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d103      	bne.n	8006a32 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6013      	str	r3, [r2, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e08b      	b.n	8006b72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fa fbae 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2224      	movs	r2, #36	@ 0x24
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006aa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d107      	bne.n	8006ac2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006abe:	609a      	str	r2, [r3, #8]
 8006ac0:	e006      	b.n	8006ad0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d108      	bne.n	8006aea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ae6:	605a      	str	r2, [r3, #4]
 8006ae8:	e007      	b.n	8006afa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006af8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6859      	ldr	r1, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <HAL_I2C_Init+0x134>)
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691a      	ldr	r2, [r3, #16]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69d9      	ldr	r1, [r3, #28]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	02008000 	.word	0x02008000

08006b80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d138      	bne.n	8006c08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e032      	b.n	8006c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2224      	movs	r2, #36	@ 0x24
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6819      	ldr	r1, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d139      	bne.n	8006ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c36:	2302      	movs	r3, #2
 8006c38:	e033      	b.n	8006ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2224      	movs	r2, #36	@ 0x24
 8006c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0201 	bic.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e000      	b.n	8006ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
  }
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e08f      	b.n	8006de0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fa fba5 	bl	8001424 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006cf0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6999      	ldr	r1, [r3, #24]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6999      	ldr	r1, [r3, #24]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a19      	ldr	r1, [r3, #32]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0206 	orr.w	r2, r2, #6
 8006dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0201 	orr.w	r2, r2, #1
 8006dcc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d023      	beq.n	8006e52 <HAL_LTDC_IRQHandler+0x6a>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01e      	beq.n	8006e52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0204 	bic.w	r2, r2, #4
 8006e22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e32:	f043 0201 	orr.w	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2204      	movs	r2, #4
 8006e40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f86f 	bl	8006f30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d023      	beq.n	8006ea4 <HAL_LTDC_IRQHandler+0xbc>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01e      	beq.n	8006ea4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0202 	bic.w	r2, r2, #2
 8006e74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2204      	movs	r2, #4
 8006e92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f846 	bl	8006f30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01b      	beq.n	8006ee6 <HAL_LTDC_IRQHandler+0xfe>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d016      	beq.n	8006ee6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f82f 	bl	8006f44 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01b      	beq.n	8006f28 <HAL_LTDC_IRQHandler+0x140>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0208 	bic.w	r2, r2, #8
 8006f08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2208      	movs	r2, #8
 8006f10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f818 	bl	8006f58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f6c:	b5b0      	push	{r4, r5, r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_LTDC_ConfigLayer+0x1a>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e02c      	b.n	8006fe0 <HAL_LTDC_ConfigLayer+0x74>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2134      	movs	r1, #52	@ 0x34
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f811 	bl	8006fe8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bdb0      	pop	{r4, r5, r7, pc}

08006fe8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b089      	sub	sp, #36	@ 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007004:	4413      	add	r3, r2
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	01db      	lsls	r3, r3, #7
 8007014:	4413      	add	r3, r2
 8007016:	3384      	adds	r3, #132	@ 0x84
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	4611      	mov	r1, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	01d2      	lsls	r2, r2, #7
 8007024:	440a      	add	r2, r1
 8007026:	3284      	adds	r2, #132	@ 0x84
 8007028:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800702c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800703e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007040:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4619      	mov	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	01db      	lsls	r3, r3, #7
 800704c:	440b      	add	r3, r1
 800704e:	3384      	adds	r3, #132	@ 0x84
 8007050:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007056:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007066:	4413      	add	r3, r2
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	01db      	lsls	r3, r3, #7
 8007076:	4413      	add	r3, r2
 8007078:	3384      	adds	r3, #132	@ 0x84
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	4611      	mov	r1, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	01d2      	lsls	r2, r2, #7
 8007086:	440a      	add	r2, r1
 8007088:	3284      	adds	r2, #132	@ 0x84
 800708a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800708e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800709e:	4413      	add	r3, r2
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4619      	mov	r1, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	01db      	lsls	r3, r3, #7
 80070ac:	440b      	add	r3, r1
 80070ae:	3384      	adds	r3, #132	@ 0x84
 80070b0:	4619      	mov	r1, r3
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	01db      	lsls	r3, r3, #7
 80070c2:	4413      	add	r3, r2
 80070c4:	3384      	adds	r3, #132	@ 0x84
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	4611      	mov	r1, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	01d2      	lsls	r2, r2, #7
 80070d2:	440a      	add	r2, r1
 80070d4:	3284      	adds	r2, #132	@ 0x84
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	01db      	lsls	r3, r3, #7
 80070e6:	4413      	add	r3, r2
 80070e8:	3384      	adds	r3, #132	@ 0x84
 80070ea:	461a      	mov	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007114:	461a      	mov	r2, r3
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	431a      	orrs	r2, r3
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	431a      	orrs	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4619      	mov	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	01db      	lsls	r3, r3, #7
 8007128:	440b      	add	r3, r1
 800712a:	3384      	adds	r3, #132	@ 0x84
 800712c:	4619      	mov	r1, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	01db      	lsls	r3, r3, #7
 800713e:	4413      	add	r3, r2
 8007140:	3384      	adds	r3, #132	@ 0x84
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	4611      	mov	r1, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	01d2      	lsls	r2, r2, #7
 800714e:	440a      	add	r2, r1
 8007150:	3284      	adds	r2, #132	@ 0x84
 8007152:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007156:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	01db      	lsls	r3, r3, #7
 8007162:	4413      	add	r3, r2
 8007164:	3384      	adds	r3, #132	@ 0x84
 8007166:	461a      	mov	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	01db      	lsls	r3, r3, #7
 8007178:	4413      	add	r3, r2
 800717a:	3384      	adds	r3, #132	@ 0x84
 800717c:	69da      	ldr	r2, [r3, #28]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	01db      	lsls	r3, r3, #7
 8007188:	440b      	add	r3, r1
 800718a:	3384      	adds	r3, #132	@ 0x84
 800718c:	4619      	mov	r1, r3
 800718e:	4b4f      	ldr	r3, [pc, #316]	@ (80072cc <LTDC_SetConfig+0x2e4>)
 8007190:	4013      	ands	r3, r2
 8007192:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	68f9      	ldr	r1, [r7, #12]
 800719e:	6809      	ldr	r1, [r1, #0]
 80071a0:	4608      	mov	r0, r1
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	01c9      	lsls	r1, r1, #7
 80071a6:	4401      	add	r1, r0
 80071a8:	3184      	adds	r1, #132	@ 0x84
 80071aa:	4313      	orrs	r3, r2
 80071ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	01db      	lsls	r3, r3, #7
 80071b8:	4413      	add	r3, r2
 80071ba:	3384      	adds	r3, #132	@ 0x84
 80071bc:	461a      	mov	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80071cc:	2304      	movs	r3, #4
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	e01b      	b.n	800720a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d102      	bne.n	80071e0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 80071da:	2303      	movs	r3, #3
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	e014      	b.n	800720a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d00b      	beq.n	8007200 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d007      	beq.n	8007200 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d003      	beq.n	8007200 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80071fc:	2b07      	cmp	r3, #7
 80071fe:	d102      	bne.n	8007206 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8007200:	2302      	movs	r3, #2
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e001      	b.n	800720a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8007206:	2301      	movs	r3, #1
 8007208:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	4413      	add	r3, r2
 8007216:	3384      	adds	r3, #132	@ 0x84
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	4611      	mov	r1, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	01d2      	lsls	r2, r2, #7
 8007224:	440a      	add	r2, r1
 8007226:	3284      	adds	r2, #132	@ 0x84
 8007228:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800722c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	fb02 f303 	mul.w	r3, r2, r3
 8007238:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6859      	ldr	r1, [r3, #4]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	1acb      	subs	r3, r1, r3
 8007244:	69f9      	ldr	r1, [r7, #28]
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800724c:	68f9      	ldr	r1, [r7, #12]
 800724e:	6809      	ldr	r1, [r1, #0]
 8007250:	4608      	mov	r0, r1
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	01c9      	lsls	r1, r1, #7
 8007256:	4401      	add	r1, r0
 8007258:	3184      	adds	r1, #132	@ 0x84
 800725a:	4313      	orrs	r3, r2
 800725c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	01db      	lsls	r3, r3, #7
 8007268:	4413      	add	r3, r2
 800726a:	3384      	adds	r3, #132	@ 0x84
 800726c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4619      	mov	r1, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	01db      	lsls	r3, r3, #7
 8007278:	440b      	add	r3, r1
 800727a:	3384      	adds	r3, #132	@ 0x84
 800727c:	4619      	mov	r1, r3
 800727e:	4b14      	ldr	r3, [pc, #80]	@ (80072d0 <LTDC_SetConfig+0x2e8>)
 8007280:	4013      	ands	r3, r2
 8007282:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	01db      	lsls	r3, r3, #7
 800728e:	4413      	add	r3, r2
 8007290:	3384      	adds	r3, #132	@ 0x84
 8007292:	461a      	mov	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	01db      	lsls	r3, r3, #7
 80072a4:	4413      	add	r3, r2
 80072a6:	3384      	adds	r3, #132	@ 0x84
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	4611      	mov	r1, r2
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	01d2      	lsls	r2, r2, #7
 80072b4:	440a      	add	r2, r1
 80072b6:	3284      	adds	r2, #132	@ 0x84
 80072b8:	f043 0301 	orr.w	r3, r3, #1
 80072bc:	6013      	str	r3, [r2, #0]
}
 80072be:	bf00      	nop
 80072c0:	3724      	adds	r7, #36	@ 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	fffff8f8 	.word	0xfffff8f8
 80072d0:	fffff800 	.word	0xfffff800

080072d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a04      	ldr	r2, [pc, #16]	@ (80072f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80072de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e2:	6013      	str	r3, [r2, #0]
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40007000 	.word	0x40007000

080072f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80072fe:	4b23      	ldr	r3, [pc, #140]	@ (800738c <HAL_PWREx_EnableOverDrive+0x98>)
 8007300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007302:	4a22      	ldr	r2, [pc, #136]	@ (800738c <HAL_PWREx_EnableOverDrive+0x98>)
 8007304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007308:	6413      	str	r3, [r2, #64]	@ 0x40
 800730a:	4b20      	ldr	r3, [pc, #128]	@ (800738c <HAL_PWREx_EnableOverDrive+0x98>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007316:	4b1e      	ldr	r3, [pc, #120]	@ (8007390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1d      	ldr	r2, [pc, #116]	@ (8007390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007320:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007322:	f7fb fd9d 	bl	8002e60 <HAL_GetTick>
 8007326:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007328:	e009      	b.n	800733e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800732a:	f7fb fd99 	bl	8002e60 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007338:	d901      	bls.n	800733e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e022      	b.n	8007384 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800733e:	4b14      	ldr	r3, [pc, #80]	@ (8007390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800734a:	d1ee      	bne.n	800732a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800734c:	4b10      	ldr	r3, [pc, #64]	@ (8007390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0f      	ldr	r2, [pc, #60]	@ (8007390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007356:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007358:	f7fb fd82 	bl	8002e60 <HAL_GetTick>
 800735c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800735e:	e009      	b.n	8007374 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007360:	f7fb fd7e 	bl	8002e60 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800736e:	d901      	bls.n	8007374 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e007      	b.n	8007384 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007380:	d1ee      	bne.n	8007360 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40023800 	.word	0x40023800
 8007390:	40007000 	.word	0x40007000

08007394 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800739c:	f7fb fd60 	bl	8002e60 <HAL_GetTick>
 80073a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e067      	b.n	800747c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fa fa57 	bl	8001874 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80073c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f85e 	bl	800748c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	3b01      	subs	r3, #1
 80073e0:	021a      	lsls	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	2120      	movs	r1, #32
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f856 	bl	80074a8 <QSPI_WaitFlagStateUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d135      	bne.n	8007472 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b1d      	ldr	r3, [pc, #116]	@ (8007484 <HAL_QSPI_Init+0xf0>)
 800740e:	4013      	ands	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6852      	ldr	r2, [r2, #4]
 8007414:	0611      	lsls	r1, r2, #24
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68d2      	ldr	r2, [r2, #12]
 800741a:	4311      	orrs	r1, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	69d2      	ldr	r2, [r2, #28]
 8007420:	4311      	orrs	r1, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6a12      	ldr	r2, [r2, #32]
 8007426:	4311      	orrs	r1, r2
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6812      	ldr	r2, [r2, #0]
 800742c:	430b      	orrs	r3, r1
 800742e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	4b14      	ldr	r3, [pc, #80]	@ (8007488 <HAL_QSPI_Init+0xf4>)
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6912      	ldr	r2, [r2, #16]
 800743e:	0411      	lsls	r1, r2, #16
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6952      	ldr	r2, [r2, #20]
 8007444:	4311      	orrs	r1, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6992      	ldr	r2, [r2, #24]
 800744a:	4311      	orrs	r1, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	430b      	orrs	r3, r1
 8007452:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800747a:	7afb      	ldrb	r3, [r7, #11]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	00ffff2f 	.word	0x00ffff2f
 8007488:	ffe0f8fe 	.word	0xffe0f8fe

0800748c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	4613      	mov	r3, r2
 80074b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80074b8:	e01a      	b.n	80074f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d016      	beq.n	80074f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c2:	f7fb fccd 	bl	8002e60 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2204      	movs	r2, #4
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e4:	f043 0201 	orr.w	r2, r3, #1
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e00e      	b.n	800750e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	2300      	moveq	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	429a      	cmp	r2, r3
 800750a:	d1d6      	bne.n	80074ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e291      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8087 	beq.w	800764a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800753c:	4b96      	ldr	r3, [pc, #600]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 030c 	and.w	r3, r3, #12
 8007544:	2b04      	cmp	r3, #4
 8007546:	d00c      	beq.n	8007562 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007548:	4b93      	ldr	r3, [pc, #588]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 030c 	and.w	r3, r3, #12
 8007550:	2b08      	cmp	r3, #8
 8007552:	d112      	bne.n	800757a <HAL_RCC_OscConfig+0x62>
 8007554:	4b90      	ldr	r3, [pc, #576]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800755c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007560:	d10b      	bne.n	800757a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007562:	4b8d      	ldr	r3, [pc, #564]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d06c      	beq.n	8007648 <HAL_RCC_OscConfig+0x130>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d168      	bne.n	8007648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e26b      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007582:	d106      	bne.n	8007592 <HAL_RCC_OscConfig+0x7a>
 8007584:	4b84      	ldr	r3, [pc, #528]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a83      	ldr	r2, [pc, #524]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 800758a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e02e      	b.n	80075f0 <HAL_RCC_OscConfig+0xd8>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x9c>
 800759a:	4b7f      	ldr	r3, [pc, #508]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a7e      	ldr	r2, [pc, #504]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e01d      	b.n	80075f0 <HAL_RCC_OscConfig+0xd8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075bc:	d10c      	bne.n	80075d8 <HAL_RCC_OscConfig+0xc0>
 80075be:	4b76      	ldr	r3, [pc, #472]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a75      	ldr	r2, [pc, #468]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	4b73      	ldr	r3, [pc, #460]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a72      	ldr	r2, [pc, #456]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e00b      	b.n	80075f0 <HAL_RCC_OscConfig+0xd8>
 80075d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80075ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fb fc32 	bl	8002e60 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007600:	f7fb fc2e 	bl	8002e60 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b64      	cmp	r3, #100	@ 0x64
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e21f      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	4b61      	ldr	r3, [pc, #388]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0xe8>
 800761e:	e014      	b.n	800764a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fb fc1e 	bl	8002e60 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007628:	f7fb fc1a 	bl	8002e60 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b64      	cmp	r3, #100	@ 0x64
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e20b      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	4b57      	ldr	r3, [pc, #348]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x110>
 8007646:	e000      	b.n	800764a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d069      	beq.n	800772a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007656:	4b50      	ldr	r3, [pc, #320]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007662:	4b4d      	ldr	r3, [pc, #308]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b08      	cmp	r3, #8
 800766c:	d11c      	bne.n	80076a8 <HAL_RCC_OscConfig+0x190>
 800766e:	4b4a      	ldr	r3, [pc, #296]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d116      	bne.n	80076a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800767a:	4b47      	ldr	r3, [pc, #284]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d005      	beq.n	8007692 <HAL_RCC_OscConfig+0x17a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d001      	beq.n	8007692 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e1df      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007692:	4b41      	ldr	r3, [pc, #260]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	493d      	ldr	r1, [pc, #244]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a6:	e040      	b.n	800772a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d023      	beq.n	80076f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076b0:	4b39      	ldr	r3, [pc, #228]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a38      	ldr	r2, [pc, #224]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076bc:	f7fb fbd0 	bl	8002e60 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076c4:	f7fb fbcc 	bl	8002e60 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e1bd      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d6:	4b30      	ldr	r3, [pc, #192]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4929      	ldr	r1, [pc, #164]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	600b      	str	r3, [r1, #0]
 80076f6:	e018      	b.n	800772a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076f8:	4b27      	ldr	r3, [pc, #156]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a26      	ldr	r2, [pc, #152]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 80076fe:	f023 0301 	bic.w	r3, r3, #1
 8007702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007704:	f7fb fbac 	bl	8002e60 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800770c:	f7fb fba8 	bl	8002e60 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e199      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800771e:	4b1e      	ldr	r3, [pc, #120]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d038      	beq.n	80077a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d019      	beq.n	8007772 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800773e:	4b16      	ldr	r3, [pc, #88]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007742:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774a:	f7fb fb89 	bl	8002e60 <HAL_GetTick>
 800774e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007750:	e008      	b.n	8007764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007752:	f7fb fb85 	bl	8002e60 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e176      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007764:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0f0      	beq.n	8007752 <HAL_RCC_OscConfig+0x23a>
 8007770:	e01a      	b.n	80077a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007772:	4b09      	ldr	r3, [pc, #36]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007776:	4a08      	ldr	r2, [pc, #32]	@ (8007798 <HAL_RCC_OscConfig+0x280>)
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777e:	f7fb fb6f 	bl	8002e60 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007784:	e00a      	b.n	800779c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007786:	f7fb fb6b 	bl	8002e60 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d903      	bls.n	800779c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e15c      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
 8007798:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800779c:	4b91      	ldr	r3, [pc, #580]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800779e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1ee      	bne.n	8007786 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80a4 	beq.w	80078fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077b6:	4b8b      	ldr	r3, [pc, #556]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077c2:	4b88      	ldr	r3, [pc, #544]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c6:	4a87      	ldr	r2, [pc, #540]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80077c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80077ce:	4b85      	ldr	r3, [pc, #532]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077da:	2301      	movs	r3, #1
 80077dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077de:	4b82      	ldr	r3, [pc, #520]	@ (80079e8 <HAL_RCC_OscConfig+0x4d0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d118      	bne.n	800781c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077ea:	4b7f      	ldr	r3, [pc, #508]	@ (80079e8 <HAL_RCC_OscConfig+0x4d0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a7e      	ldr	r2, [pc, #504]	@ (80079e8 <HAL_RCC_OscConfig+0x4d0>)
 80077f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077f6:	f7fb fb33 	bl	8002e60 <HAL_GetTick>
 80077fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077fe:	f7fb fb2f 	bl	8002e60 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b64      	cmp	r3, #100	@ 0x64
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e120      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007810:	4b75      	ldr	r3, [pc, #468]	@ (80079e8 <HAL_RCC_OscConfig+0x4d0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0f0      	beq.n	80077fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d106      	bne.n	8007832 <HAL_RCC_OscConfig+0x31a>
 8007824:	4b6f      	ldr	r3, [pc, #444]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007828:	4a6e      	ldr	r2, [pc, #440]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007830:	e02d      	b.n	800788e <HAL_RCC_OscConfig+0x376>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10c      	bne.n	8007854 <HAL_RCC_OscConfig+0x33c>
 800783a:	4b6a      	ldr	r3, [pc, #424]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783e:	4a69      	ldr	r2, [pc, #420]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	6713      	str	r3, [r2, #112]	@ 0x70
 8007846:	4b67      	ldr	r3, [pc, #412]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784a:	4a66      	ldr	r2, [pc, #408]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800784c:	f023 0304 	bic.w	r3, r3, #4
 8007850:	6713      	str	r3, [r2, #112]	@ 0x70
 8007852:	e01c      	b.n	800788e <HAL_RCC_OscConfig+0x376>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b05      	cmp	r3, #5
 800785a:	d10c      	bne.n	8007876 <HAL_RCC_OscConfig+0x35e>
 800785c:	4b61      	ldr	r3, [pc, #388]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007860:	4a60      	ldr	r2, [pc, #384]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007862:	f043 0304 	orr.w	r3, r3, #4
 8007866:	6713      	str	r3, [r2, #112]	@ 0x70
 8007868:	4b5e      	ldr	r3, [pc, #376]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800786a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800786c:	4a5d      	ldr	r2, [pc, #372]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	6713      	str	r3, [r2, #112]	@ 0x70
 8007874:	e00b      	b.n	800788e <HAL_RCC_OscConfig+0x376>
 8007876:	4b5b      	ldr	r3, [pc, #364]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787a:	4a5a      	ldr	r2, [pc, #360]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	6713      	str	r3, [r2, #112]	@ 0x70
 8007882:	4b58      	ldr	r3, [pc, #352]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007886:	4a57      	ldr	r2, [pc, #348]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d015      	beq.n	80078c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007896:	f7fb fae3 	bl	8002e60 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fb fadf 	bl	8002e60 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0ce      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b4:	4b4b      	ldr	r3, [pc, #300]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0ee      	beq.n	800789e <HAL_RCC_OscConfig+0x386>
 80078c0:	e014      	b.n	80078ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c2:	f7fb facd 	bl	8002e60 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ca:	f7fb fac9 	bl	8002e60 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078d8:	4293      	cmp	r3, r2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e0b8      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e0:	4b40      	ldr	r3, [pc, #256]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1ee      	bne.n	80078ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d105      	bne.n	80078fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f2:	4b3c      	ldr	r3, [pc, #240]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	4a3b      	ldr	r2, [pc, #236]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80078f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a4 	beq.w	8007a50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007908:	4b36      	ldr	r3, [pc, #216]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 030c 	and.w	r3, r3, #12
 8007910:	2b08      	cmp	r3, #8
 8007912:	d06b      	beq.n	80079ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d149      	bne.n	80079b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791c:	4b31      	ldr	r3, [pc, #196]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a30      	ldr	r2, [pc, #192]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fb fa9a 	bl	8002e60 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007930:	f7fb fa96 	bl	8002e60 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e087      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	4b28      	ldr	r3, [pc, #160]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795c:	019b      	lsls	r3, r3, #6
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	3b01      	subs	r3, #1
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	061b      	lsls	r3, r3, #24
 8007972:	4313      	orrs	r3, r2
 8007974:	4a1b      	ldr	r2, [pc, #108]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007976:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800797a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800797c:	4b19      	ldr	r3, [pc, #100]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a18      	ldr	r2, [pc, #96]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 8007982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007988:	f7fb fa6a 	bl	8002e60 <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007990:	f7fb fa66 	bl	8002e60 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e057      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a2:	4b10      	ldr	r3, [pc, #64]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f0      	beq.n	8007990 <HAL_RCC_OscConfig+0x478>
 80079ae:	e04f      	b.n	8007a50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a0b      	ldr	r2, [pc, #44]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80079b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079bc:	f7fb fa50 	bl	8002e60 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c4:	f7fb fa4c 	bl	8002e60 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e03d      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d6:	4b03      	ldr	r3, [pc, #12]	@ (80079e4 <HAL_RCC_OscConfig+0x4cc>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f0      	bne.n	80079c4 <HAL_RCC_OscConfig+0x4ac>
 80079e2:	e035      	b.n	8007a50 <HAL_RCC_OscConfig+0x538>
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079ec:	4b1b      	ldr	r3, [pc, #108]	@ (8007a5c <HAL_RCC_OscConfig+0x544>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d028      	beq.n	8007a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d121      	bne.n	8007a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d11a      	bne.n	8007a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d111      	bne.n	8007a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	3b01      	subs	r3, #1
 8007a36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d107      	bne.n	8007a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d001      	beq.n	8007a50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40023800 	.word	0x40023800

08007a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e0d0      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a78:	4b6a      	ldr	r3, [pc, #424]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d910      	bls.n	8007aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	4b67      	ldr	r3, [pc, #412]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 020f 	bic.w	r2, r3, #15
 8007a8e:	4965      	ldr	r1, [pc, #404]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a96:	4b63      	ldr	r3, [pc, #396]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d001      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0b8      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ac0:	4b59      	ldr	r3, [pc, #356]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	4a58      	ldr	r2, [pc, #352]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ad8:	4b53      	ldr	r3, [pc, #332]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	4a52      	ldr	r2, [pc, #328]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ae4:	4b50      	ldr	r3, [pc, #320]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	494d      	ldr	r1, [pc, #308]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d040      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d107      	bne.n	8007b1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0a:	4b47      	ldr	r3, [pc, #284]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d115      	bne.n	8007b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e07f      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d107      	bne.n	8007b32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b22:	4b41      	ldr	r3, [pc, #260]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e073      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b32:	4b3d      	ldr	r3, [pc, #244]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e06b      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b42:	4b39      	ldr	r3, [pc, #228]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f023 0203 	bic.w	r2, r3, #3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	4936      	ldr	r1, [pc, #216]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b54:	f7fb f984 	bl	8002e60 <HAL_GetTick>
 8007b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5a:	e00a      	b.n	8007b72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b5c:	f7fb f980 	bl	8002e60 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e053      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b72:	4b2d      	ldr	r3, [pc, #180]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 020c 	and.w	r2, r3, #12
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d1eb      	bne.n	8007b5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b84:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d210      	bcs.n	8007bb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b92:	4b24      	ldr	r3, [pc, #144]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f023 020f 	bic.w	r2, r3, #15
 8007b9a:	4922      	ldr	r1, [pc, #136]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba2:	4b20      	ldr	r3, [pc, #128]	@ (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d001      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e032      	b.n	8007c1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bc0:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	4916      	ldr	r1, [pc, #88]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bde:	4b12      	ldr	r3, [pc, #72]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	490e      	ldr	r1, [pc, #56]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bf2:	f000 f821 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	091b      	lsrs	r3, r3, #4
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	490a      	ldr	r1, [pc, #40]	@ (8007c2c <HAL_RCC_ClockConfig+0x1cc>)
 8007c04:	5ccb      	ldrb	r3, [r1, r3]
 8007c06:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0a:	4a09      	ldr	r2, [pc, #36]	@ (8007c30 <HAL_RCC_ClockConfig+0x1d0>)
 8007c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c0e:	4b09      	ldr	r3, [pc, #36]	@ (8007c34 <HAL_RCC_ClockConfig+0x1d4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fa fa7e 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40023c00 	.word	0x40023c00
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	08011e74 	.word	0x08011e74
 8007c30:	20000000 	.word	0x20000000
 8007c34:	20000004 	.word	0x20000004

08007c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c3c:	b090      	sub	sp, #64	@ 0x40
 8007c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c48:	2300      	movs	r3, #0
 8007c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c50:	4b59      	ldr	r3, [pc, #356]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 030c 	and.w	r3, r3, #12
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	d00d      	beq.n	8007c78 <HAL_RCC_GetSysClockFreq+0x40>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	f200 80a1 	bhi.w	8007da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <HAL_RCC_GetSysClockFreq+0x34>
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d003      	beq.n	8007c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c6a:	e09b      	b.n	8007da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c6c:	4b53      	ldr	r3, [pc, #332]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8007c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c70:	e09b      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c72:	4b53      	ldr	r3, [pc, #332]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c76:	e098      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c78:	4b4f      	ldr	r3, [pc, #316]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c82:	4b4d      	ldr	r3, [pc, #308]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d028      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	099b      	lsrs	r3, r3, #6
 8007c94:	2200      	movs	r2, #0
 8007c96:	623b      	str	r3, [r7, #32]
 8007c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4b47      	ldr	r3, [pc, #284]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ca4:	fb03 f201 	mul.w	r2, r3, r1
 8007ca8:	2300      	movs	r3, #0
 8007caa:	fb00 f303 	mul.w	r3, r0, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	4a43      	ldr	r2, [pc, #268]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8007cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cb8:	460a      	mov	r2, r1
 8007cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cbe:	4413      	add	r3, r2
 8007cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	61fa      	str	r2, [r7, #28]
 8007cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007cd2:	f7f8 faa1 	bl	8000218 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4613      	mov	r3, r2
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cde:	e053      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce0:	4b35      	ldr	r3, [pc, #212]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	099b      	lsrs	r3, r3, #6
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	617a      	str	r2, [r7, #20]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cf2:	f04f 0b00 	mov.w	fp, #0
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	465b      	mov	r3, fp
 8007cfa:	f04f 0000 	mov.w	r0, #0
 8007cfe:	f04f 0100 	mov.w	r1, #0
 8007d02:	0159      	lsls	r1, r3, #5
 8007d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d08:	0150      	lsls	r0, r2, #5
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8007d12:	eb63 090b 	sbc.w	r9, r3, fp
 8007d16:	f04f 0200 	mov.w	r2, #0
 8007d1a:	f04f 0300 	mov.w	r3, #0
 8007d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8007d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	00eb      	lsls	r3, r5, #3
 8007d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d40:	00e2      	lsls	r2, r4, #3
 8007d42:	4614      	mov	r4, r2
 8007d44:	461d      	mov	r5, r3
 8007d46:	eb14 030a 	adds.w	r3, r4, sl
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	eb45 030b 	adc.w	r3, r5, fp
 8007d50:	607b      	str	r3, [r7, #4]
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	f04f 0300 	mov.w	r3, #0
 8007d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d5e:	4629      	mov	r1, r5
 8007d60:	028b      	lsls	r3, r1, #10
 8007d62:	4621      	mov	r1, r4
 8007d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d68:	4621      	mov	r1, r4
 8007d6a:	028a      	lsls	r2, r1, #10
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	2200      	movs	r2, #0
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	60fa      	str	r2, [r7, #12]
 8007d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d7c:	f7f8 fa4c 	bl	8000218 <__aeabi_uldivmod>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4613      	mov	r3, r2
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d88:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	0c1b      	lsrs	r3, r3, #16
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	3301      	adds	r3, #1
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007da2:	e002      	b.n	8007daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8007da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3740      	adds	r7, #64	@ 0x40
 8007db0:	46bd      	mov	sp, r7
 8007db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007db6:	bf00      	nop
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	00f42400 	.word	0x00f42400
 8007dc0:	017d7840 	.word	0x017d7840

08007dc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dc8:	4b03      	ldr	r3, [pc, #12]	@ (8007dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dca:	681b      	ldr	r3, [r3, #0]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	20000000 	.word	0x20000000

08007ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007de0:	f7ff fff0 	bl	8007dc4 <HAL_RCC_GetHCLKFreq>
 8007de4:	4602      	mov	r2, r0
 8007de6:	4b05      	ldr	r3, [pc, #20]	@ (8007dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	0a9b      	lsrs	r3, r3, #10
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	4903      	ldr	r1, [pc, #12]	@ (8007e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007df2:	5ccb      	ldrb	r3, [r1, r3]
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	08011e84 	.word	0x08011e84

08007e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e08:	f7ff ffdc 	bl	8007dc4 <HAL_RCC_GetHCLKFreq>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	0b5b      	lsrs	r3, r3, #13
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	4903      	ldr	r1, [pc, #12]	@ (8007e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e1a:	5ccb      	ldrb	r3, [r1, r3]
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40023800 	.word	0x40023800
 8007e28:	08011e84 	.word	0x08011e84

08007e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	220f      	movs	r2, #15
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e3c:	4b12      	ldr	r3, [pc, #72]	@ (8007e88 <HAL_RCC_GetClockConfig+0x5c>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0203 	and.w	r2, r3, #3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e48:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <HAL_RCC_GetClockConfig+0x5c>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e54:	4b0c      	ldr	r3, [pc, #48]	@ (8007e88 <HAL_RCC_GetClockConfig+0x5c>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e60:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <HAL_RCC_GetClockConfig+0x5c>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	08db      	lsrs	r3, r3, #3
 8007e66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e6e:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <HAL_RCC_GetClockConfig+0x60>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 020f 	and.w	r2, r3, #15
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	601a      	str	r2, [r3, #0]
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	40023c00 	.word	0x40023c00

08007e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d012      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007eb8:	4b69      	ldr	r3, [pc, #420]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	4a68      	ldr	r2, [pc, #416]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ebe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ec2:	6093      	str	r3, [r2, #8]
 8007ec4:	4b66      	ldr	r3, [pc, #408]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ecc:	4964      	ldr	r1, [pc, #400]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d017      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eea:	4b5d      	ldr	r3, [pc, #372]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ef0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef8:	4959      	ldr	r1, [pc, #356]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f08:	d101      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f26:	4b4e      	ldr	r3, [pc, #312]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f34:	494a      	ldr	r1, [pc, #296]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f44:	d101      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 808b 	beq.w	800808a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f74:	4b3a      	ldr	r3, [pc, #232]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f78:	4a39      	ldr	r2, [pc, #228]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f80:	4b37      	ldr	r3, [pc, #220]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f88:	60bb      	str	r3, [r7, #8]
 8007f8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f8c:	4b35      	ldr	r3, [pc, #212]	@ (8008064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a34      	ldr	r2, [pc, #208]	@ (8008064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f98:	f7fa ff62 	bl	8002e60 <HAL_GetTick>
 8007f9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fa0:	f7fa ff5e 	bl	8002e60 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b64      	cmp	r3, #100	@ 0x64
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e357      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8008064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fbe:	4b28      	ldr	r3, [pc, #160]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d035      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d02e      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fdc:	4b20      	ldr	r3, [pc, #128]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fea:	4a1d      	ldr	r2, [pc, #116]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ff0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ffc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007ffe:	4a18      	ldr	r2, [pc, #96]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008004:	4b16      	ldr	r3, [pc, #88]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b01      	cmp	r3, #1
 800800e:	d114      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008010:	f7fa ff26 	bl	8002e60 <HAL_GetTick>
 8008014:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008016:	e00a      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008018:	f7fa ff22 	bl	8002e60 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e319      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800802e:	4b0c      	ldr	r3, [pc, #48]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0ee      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008046:	d111      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008048:	4b05      	ldr	r3, [pc, #20]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008054:	4b04      	ldr	r3, [pc, #16]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008056:	400b      	ands	r3, r1
 8008058:	4901      	ldr	r1, [pc, #4]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805a:	4313      	orrs	r3, r2
 800805c:	608b      	str	r3, [r1, #8]
 800805e:	e00b      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008060:	40023800 	.word	0x40023800
 8008064:	40007000 	.word	0x40007000
 8008068:	0ffffcff 	.word	0x0ffffcff
 800806c:	4baa      	ldr	r3, [pc, #680]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	4aa9      	ldr	r2, [pc, #676]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008072:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008076:	6093      	str	r3, [r2, #8]
 8008078:	4ba7      	ldr	r3, [pc, #668]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800807a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008084:	49a4      	ldr	r1, [pc, #656]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008086:	4313      	orrs	r3, r2
 8008088:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b00      	cmp	r3, #0
 8008094:	d010      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008096:	4ba0      	ldr	r3, [pc, #640]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800809c:	4a9e      	ldr	r2, [pc, #632]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080a6:	4b9c      	ldr	r3, [pc, #624]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	4999      	ldr	r1, [pc, #612]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080c4:	4b94      	ldr	r3, [pc, #592]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080d2:	4991      	ldr	r1, [pc, #580]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080e6:	4b8c      	ldr	r3, [pc, #560]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080f4:	4988      	ldr	r1, [pc, #544]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00a      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008108:	4b83      	ldr	r3, [pc, #524]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008116:	4980      	ldr	r1, [pc, #512]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008118:	4313      	orrs	r3, r2
 800811a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800812a:	4b7b      	ldr	r3, [pc, #492]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008130:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008138:	4977      	ldr	r1, [pc, #476]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813a:	4313      	orrs	r3, r2
 800813c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800814c:	4b72      	ldr	r3, [pc, #456]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800814e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008152:	f023 0203 	bic.w	r2, r3, #3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815a:	496f      	ldr	r1, [pc, #444]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800815c:	4313      	orrs	r3, r2
 800815e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800816e:	4b6a      	ldr	r3, [pc, #424]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008174:	f023 020c 	bic.w	r2, r3, #12
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800817c:	4966      	ldr	r1, [pc, #408]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008190:	4b61      	ldr	r3, [pc, #388]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008196:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800819e:	495e      	ldr	r1, [pc, #376]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00a      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081b2:	4b59      	ldr	r3, [pc, #356]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c0:	4955      	ldr	r1, [pc, #340]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00a      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081d4:	4b50      	ldr	r3, [pc, #320]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e2:	494d      	ldr	r1, [pc, #308]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80081f6:	4b48      	ldr	r3, [pc, #288]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008204:	4944      	ldr	r1, [pc, #272]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00a      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008218:	4b3f      	ldr	r3, [pc, #252]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008226:	493c      	ldr	r1, [pc, #240]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008228:	4313      	orrs	r3, r2
 800822a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800823a:	4b37      	ldr	r3, [pc, #220]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008240:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008248:	4933      	ldr	r1, [pc, #204]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800825c:	4b2e      	ldr	r3, [pc, #184]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008262:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800826a:	492b      	ldr	r1, [pc, #172]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d011      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800827e:	4b26      	ldr	r3, [pc, #152]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008284:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800828c:	4922      	ldr	r1, [pc, #136]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800828e:	4313      	orrs	r3, r2
 8008290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800829c:	d101      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082be:	4b16      	ldr	r3, [pc, #88]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082cc:	4912      	ldr	r1, [pc, #72]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f0:	4909      	ldr	r1, [pc, #36]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d006      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80d9 	beq.w	80084be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800830c:	4b02      	ldr	r3, [pc, #8]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a01      	ldr	r2, [pc, #4]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008312:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008316:	e001      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008318:	40023800 	.word	0x40023800
 800831c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831e:	f7fa fd9f 	bl	8002e60 <HAL_GetTick>
 8008322:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008324:	e008      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008326:	f7fa fd9b 	bl	8002e60 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b64      	cmp	r3, #100	@ 0x64
 8008332:	d901      	bls.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e194      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008338:	4b6c      	ldr	r3, [pc, #432]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f0      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d021      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008354:	2b00      	cmp	r3, #0
 8008356:	d11d      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008358:	4b64      	ldr	r3, [pc, #400]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800835a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800835e:	0c1b      	lsrs	r3, r3, #16
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008366:	4b61      	ldr	r3, [pc, #388]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836c:	0e1b      	lsrs	r3, r3, #24
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	019a      	lsls	r2, r3, #6
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	041b      	lsls	r3, r3, #16
 800837e:	431a      	orrs	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	071b      	lsls	r3, r3, #28
 800838c:	4957      	ldr	r1, [pc, #348]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800838e:	4313      	orrs	r3, r2
 8008390:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083a8:	d00a      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02e      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083be:	d129      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083c0:	4b4a      	ldr	r3, [pc, #296]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083ce:	4b47      	ldr	r3, [pc, #284]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d4:	0f1b      	lsrs	r3, r3, #28
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	019a      	lsls	r2, r3, #6
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	431a      	orrs	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	061b      	lsls	r3, r3, #24
 80083ee:	431a      	orrs	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	071b      	lsls	r3, r3, #28
 80083f4:	493d      	ldr	r1, [pc, #244]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083fc:	4b3b      	ldr	r3, [pc, #236]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008402:	f023 021f 	bic.w	r2, r3, #31
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840a:	3b01      	subs	r3, #1
 800840c:	4937      	ldr	r1, [pc, #220]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01d      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008420:	4b32      	ldr	r3, [pc, #200]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008426:	0e1b      	lsrs	r3, r3, #24
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800842e:	4b2f      	ldr	r3, [pc, #188]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008434:	0f1b      	lsrs	r3, r3, #28
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	019a      	lsls	r2, r3, #6
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	431a      	orrs	r2, r3
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	061b      	lsls	r3, r3, #24
 800844e:	431a      	orrs	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	071b      	lsls	r3, r3, #28
 8008454:	4925      	ldr	r1, [pc, #148]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d011      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	019a      	lsls	r2, r3, #6
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	061b      	lsls	r3, r3, #24
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	071b      	lsls	r3, r3, #28
 8008484:	4919      	ldr	r1, [pc, #100]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008486:	4313      	orrs	r3, r2
 8008488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800848c:	4b17      	ldr	r3, [pc, #92]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008492:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008498:	f7fa fce2 	bl	8002e60 <HAL_GetTick>
 800849c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084a0:	f7fa fcde 	bl	8002e60 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b64      	cmp	r3, #100	@ 0x64
 80084ac:	d901      	bls.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e0d7      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084b2:	4b0e      	ldr	r3, [pc, #56]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	f040 80cd 	bne.w	8008660 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084c6:	4b09      	ldr	r3, [pc, #36]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a08      	ldr	r2, [pc, #32]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d2:	f7fa fcc5 	bl	8002e60 <HAL_GetTick>
 80084d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084d8:	e00a      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084da:	f7fa fcc1 	bl	8002e60 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b64      	cmp	r3, #100	@ 0x64
 80084e6:	d903      	bls.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e0ba      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80084ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084f0:	4b5e      	ldr	r3, [pc, #376]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084fc:	d0ed      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800851a:	2b00      	cmp	r3, #0
 800851c:	d02e      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d12a      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008526:	4b51      	ldr	r3, [pc, #324]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008534:	4b4d      	ldr	r3, [pc, #308]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800853a:	0f1b      	lsrs	r3, r3, #28
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	019a      	lsls	r2, r3, #6
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	061b      	lsls	r3, r3, #24
 8008554:	431a      	orrs	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	071b      	lsls	r3, r3, #28
 800855a:	4944      	ldr	r1, [pc, #272]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008562:	4b42      	ldr	r3, [pc, #264]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008568:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	3b01      	subs	r3, #1
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	493d      	ldr	r1, [pc, #244]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008576:	4313      	orrs	r3, r2
 8008578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d022      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800858c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008590:	d11d      	bne.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008592:	4b36      	ldr	r3, [pc, #216]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008598:	0e1b      	lsrs	r3, r3, #24
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085a0:	4b32      	ldr	r3, [pc, #200]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a6:	0f1b      	lsrs	r3, r3, #28
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	019a      	lsls	r2, r3, #6
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	041b      	lsls	r3, r3, #16
 80085ba:	431a      	orrs	r2, r3
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	061b      	lsls	r3, r3, #24
 80085c0:	431a      	orrs	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	071b      	lsls	r3, r3, #28
 80085c6:	4929      	ldr	r1, [pc, #164]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0308 	and.w	r3, r3, #8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d028      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085da:	4b24      	ldr	r3, [pc, #144]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e0:	0e1b      	lsrs	r3, r3, #24
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085e8:	4b20      	ldr	r3, [pc, #128]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	019a      	lsls	r2, r3, #6
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	041b      	lsls	r3, r3, #16
 8008600:	431a      	orrs	r2, r3
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	4917      	ldr	r1, [pc, #92]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008616:	4b15      	ldr	r3, [pc, #84]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800861c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	4911      	ldr	r1, [pc, #68]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800862c:	4b0f      	ldr	r3, [pc, #60]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0e      	ldr	r2, [pc, #56]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008638:	f7fa fc12 	bl	8002e60 <HAL_GetTick>
 800863c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008640:	f7fa fc0e 	bl	8002e60 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b64      	cmp	r3, #100	@ 0x64
 800864c:	d901      	bls.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e007      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008652:	4b06      	ldr	r3, [pc, #24]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800865a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800865e:	d1ef      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40023800 	.word	0x40023800

08008670 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800868e:	f040 808d 	bne.w	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008692:	4b93      	ldr	r3, [pc, #588]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008698:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80086a0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086a8:	d07c      	beq.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086b0:	d87b      	bhi.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086be:	d039      	beq.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80086c0:	e073      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80086c2:	4b87      	ldr	r3, [pc, #540]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d108      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80086ce:	4b84      	ldr	r3, [pc, #528]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086d6:	4a83      	ldr	r2, [pc, #524]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80086d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	e007      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80086e0:	4b7f      	ldr	r3, [pc, #508]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086e8:	4a7f      	ldr	r2, [pc, #508]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80086f0:	4b7b      	ldr	r3, [pc, #492]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80086f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086f6:	0e1b      	lsrs	r3, r3, #24
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80086fe:	4b78      	ldr	r3, [pc, #480]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008704:	099b      	lsrs	r3, r3, #6
 8008706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	fb03 f202 	mul.w	r2, r3, r2
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008718:	4b71      	ldr	r3, [pc, #452]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800871a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	3301      	adds	r3, #1
 8008726:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	617b      	str	r3, [r7, #20]
        break;
 8008732:	e03b      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008734:	4b6a      	ldr	r3, [pc, #424]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d108      	bne.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008740:	4b67      	ldr	r3, [pc, #412]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008748:	4a66      	ldr	r2, [pc, #408]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800874a:	fbb2 f3f3 	udiv	r3, r2, r3
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	e007      	b.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008752:	4b63      	ldr	r3, [pc, #396]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800875a:	4a63      	ldr	r2, [pc, #396]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008762:	4b5f      	ldr	r3, [pc, #380]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008768:	0e1b      	lsrs	r3, r3, #24
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008770:	4b5b      	ldr	r3, [pc, #364]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	fb03 f202 	mul.w	r2, r3, r2
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	fbb2 f3f3 	udiv	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800878a:	4b55      	ldr	r3, [pc, #340]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800878c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a0:	617b      	str	r3, [r7, #20]
        break;
 80087a2:	e003      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80087a4:	4b51      	ldr	r3, [pc, #324]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80087a6:	617b      	str	r3, [r7, #20]
        break;
 80087a8:	e000      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80087aa:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b2:	f040 808d 	bne.w	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80087b6:	4b4a      	ldr	r3, [pc, #296]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80087c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087cc:	d07c      	beq.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087d4:	d87b      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087e2:	d039      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80087e4:	e073      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80087e6:	4b3e      	ldr	r3, [pc, #248]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d108      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80087f2:	4b3b      	ldr	r3, [pc, #236]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087fa:	4a3a      	ldr	r2, [pc, #232]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	e007      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008804:	4b36      	ldr	r3, [pc, #216]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800880c:	4a36      	ldr	r2, [pc, #216]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800880e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008812:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008814:	4b32      	ldr	r3, [pc, #200]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800881a:	0e1b      	lsrs	r3, r3, #24
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008822:	4b2f      	ldr	r3, [pc, #188]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008828:	099b      	lsrs	r3, r3, #6
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	fb03 f202 	mul.w	r2, r3, r2
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	fbb2 f3f3 	udiv	r3, r2, r3
 800883a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800883c:	4b28      	ldr	r3, [pc, #160]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800883e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	3301      	adds	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	fbb2 f3f3 	udiv	r3, r2, r3
 8008854:	617b      	str	r3, [r7, #20]
        break;
 8008856:	e03b      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008858:	4b21      	ldr	r3, [pc, #132]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008864:	4b1e      	ldr	r3, [pc, #120]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800886c:	4a1d      	ldr	r2, [pc, #116]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800886e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008872:	613b      	str	r3, [r7, #16]
 8008874:	e007      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008876:	4b1a      	ldr	r3, [pc, #104]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800887e:	4a1a      	ldr	r2, [pc, #104]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008880:	fbb2 f3f3 	udiv	r3, r2, r3
 8008884:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008886:	4b16      	ldr	r3, [pc, #88]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800888c:	0e1b      	lsrs	r3, r3, #24
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008894:	4b12      	ldr	r3, [pc, #72]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800889a:	099b      	lsrs	r3, r3, #6
 800889c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	fb03 f202 	mul.w	r2, r3, r2
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80088ae:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088b4:	f003 031f 	and.w	r3, r3, #31
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	617b      	str	r3, [r7, #20]
        break;
 80088c6:	e003      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80088c8:	4b08      	ldr	r3, [pc, #32]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80088ca:	617b      	str	r3, [r7, #20]
        break;
 80088cc:	e000      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80088ce:	bf00      	nop
      }
    }
  }

  return frequency;
 80088d0:	697b      	ldr	r3, [r7, #20]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	40023800 	.word	0x40023800
 80088e4:	00f42400 	.word	0x00f42400
 80088e8:	017d7840 	.word	0x017d7840
 80088ec:	00bb8000 	.word	0x00bb8000

080088f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e071      	b.n	80089e6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	7f5b      	ldrb	r3, [r3, #29]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d105      	bne.n	8008918 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7f9 f8e2 	bl	8001adc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2202      	movs	r2, #2
 800891c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	2b10      	cmp	r3, #16
 800892a:	d053      	beq.n	80089d4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	22ca      	movs	r2, #202	@ 0xca
 8008932:	625a      	str	r2, [r3, #36]	@ 0x24
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2253      	movs	r2, #83	@ 0x53
 800893a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fac7 	bl	8008ed0 <RTC_EnterInitMode>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d12a      	bne.n	80089a2 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6899      	ldr	r1, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <HAL_RTC_Init+0x100>)
 8008958:	400b      	ands	r3, r1
 800895a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6899      	ldr	r1, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68d2      	ldr	r2, [r2, #12]
 8008982:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6919      	ldr	r1, [r3, #16]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	041a      	lsls	r2, r3, #16
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fad0 	bl	8008f3e <RTC_ExitInitMode>
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d110      	bne.n	80089ca <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0208 	bic.w	r2, r2, #8
 80089b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	22ff      	movs	r2, #255	@ 0xff
 80089d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80089d2:	e001      	b.n	80089d8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	ff8fffbf 	.word	0xff8fffbf

080089f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	7f1b      	ldrb	r3, [r3, #28]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_RTC_SetTime+0x1c>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e085      	b.n	8008b1c <HAL_RTC_SetTime+0x128>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d126      	bne.n	8008a70 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d102      	bne.n	8008a36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 faa4 	bl	8008f88 <RTC_ByteToBcd2>
 8008a40:	4603      	mov	r3, r0
 8008a42:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fa9d 	bl	8008f88 <RTC_ByteToBcd2>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a52:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	789b      	ldrb	r3, [r3, #2]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fa95 	bl	8008f88 <RTC_ByteToBcd2>
 8008a5e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008a60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	78db      	ldrb	r3, [r3, #3]
 8008a68:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	e018      	b.n	8008aa2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2200      	movs	r2, #0
 8008a82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a90:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008a96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	78db      	ldrb	r3, [r3, #3]
 8008a9c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	22ca      	movs	r2, #202	@ 0xca
 8008aa8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2253      	movs	r2, #83	@ 0x53
 8008ab0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 fa0c 	bl	8008ed0 <RTC_EnterInitMode>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008abc:	7cfb      	ldrb	r3, [r7, #19]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d11e      	bne.n	8008b00 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	6979      	ldr	r1, [r7, #20]
 8008ac8:	4b16      	ldr	r3, [pc, #88]	@ (8008b24 <HAL_RTC_SetTime+0x130>)
 8008aca:	400b      	ands	r3, r1
 8008acc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008adc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6899      	ldr	r1, [r3, #8]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fa21 	bl	8008f3e <RTC_ExitInitMode>
 8008afc:	4603      	mov	r3, r0
 8008afe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b00:	7cfb      	ldrb	r3, [r7, #19]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	22ff      	movs	r2, #255	@ 0xff
 8008b12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	771a      	strb	r2, [r3, #28]

  return status;
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd90      	pop	{r4, r7, pc}
 8008b24:	007f7f7f 	.word	0x007f7f7f

08008b28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b28:	b590      	push	{r4, r7, lr}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	7f1b      	ldrb	r3, [r3, #28]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <HAL_RTC_SetDate+0x1c>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e06f      	b.n	8008c24 <HAL_RTC_SetDate+0xfc>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10e      	bne.n	8008b74 <HAL_RTC_SetDate+0x4c>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	f003 0310 	and.w	r3, r3, #16
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	f023 0310 	bic.w	r3, r3, #16
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	330a      	adds	r3, #10
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d11c      	bne.n	8008bb4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	78db      	ldrb	r3, [r3, #3]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fa02 	bl	8008f88 <RTC_ByteToBcd2>
 8008b84:	4603      	mov	r3, r0
 8008b86:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f9fb 	bl	8008f88 <RTC_ByteToBcd2>
 8008b92:	4603      	mov	r3, r0
 8008b94:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b96:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	789b      	ldrb	r3, [r3, #2]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 f9f3 	bl	8008f88 <RTC_ByteToBcd2>
 8008ba2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ba4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e00e      	b.n	8008bd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	78db      	ldrb	r3, [r3, #3]
 8008bb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008bc0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008bc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	22ca      	movs	r2, #202	@ 0xca
 8008bd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2253      	movs	r2, #83	@ 0x53
 8008be0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f974 	bl	8008ed0 <RTC_EnterInitMode>
 8008be8:	4603      	mov	r3, r0
 8008bea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008bec:	7cfb      	ldrb	r3, [r7, #19]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	6979      	ldr	r1, [r7, #20]
 8008bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c2c <HAL_RTC_SetDate+0x104>)
 8008bfa:	400b      	ands	r3, r1
 8008bfc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f99d 	bl	8008f3e <RTC_ExitInitMode>
 8008c04:	4603      	mov	r3, r0
 8008c06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c08:	7cfb      	ldrb	r3, [r7, #19]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	22ff      	movs	r2, #255	@ 0xff
 8008c1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	771a      	strb	r2, [r3, #28]

  return status;
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	371c      	adds	r7, #28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd90      	pop	{r4, r7, pc}
 8008c2c:	00ffff3f 	.word	0x00ffff3f

08008c30 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b089      	sub	sp, #36	@ 0x24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	7f1b      	ldrb	r3, [r3, #28]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_RTC_SetAlarm+0x24>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e113      	b.n	8008e7c <HAL_RTC_SetAlarm+0x24c>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d137      	bne.n	8008cd6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f982 	bl	8008f88 <RTC_ByteToBcd2>
 8008c84:	4603      	mov	r3, r0
 8008c86:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f97b 	bl	8008f88 <RTC_ByteToBcd2>
 8008c92:	4603      	mov	r3, r0
 8008c94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008c96:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	789b      	ldrb	r3, [r3, #2]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f973 	bl	8008f88 <RTC_ByteToBcd2>
 8008ca2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ca4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	78db      	ldrb	r3, [r3, #3]
 8008cac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008cae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 f965 	bl	8008f88 <RTC_ByteToBcd2>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008cc2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008cca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	e023      	b.n	8008d1e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008cf6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008cfc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	78db      	ldrb	r3, [r3, #3]
 8008d02:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008d0e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d14:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	22ca      	movs	r2, #202	@ 0xca
 8008d30:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2253      	movs	r2, #83	@ 0x53
 8008d38:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d42:	d148      	bne.n	8008dd6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d52:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d62:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008d74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d76:	f7fa f873 	bl	8002e60 <HAL_GetTick>
 8008d7a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008d7c:	e013      	b.n	8008da6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d7e:	f7fa f86f 	bl	8002e60 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d8c:	d90b      	bls.n	8008da6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	22ff      	movs	r2, #255	@ 0xff
 8008d94:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2203      	movs	r2, #3
 8008d9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e06a      	b.n	8008e7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0e4      	beq.n	8008d7e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69fa      	ldr	r2, [r7, #28]
 8008dba:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dd2:	609a      	str	r2, [r3, #8]
 8008dd4:	e047      	b.n	8008e66 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008de4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008df4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008e06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e08:	f7fa f82a 	bl	8002e60 <HAL_GetTick>
 8008e0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e0e:	e013      	b.n	8008e38 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e10:	f7fa f826 	bl	8002e60 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e1e:	d90b      	bls.n	8008e38 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	22ff      	movs	r2, #255	@ 0xff
 8008e26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e021      	b.n	8008e7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0e4      	beq.n	8008e10 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e64:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	22ff      	movs	r2, #255	@ 0xff
 8008e6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2201      	movs	r2, #1
 8008e72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3724      	adds	r7, #36	@ 0x24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd90      	pop	{r4, r7, pc}

08008e84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a0d      	ldr	r2, [pc, #52]	@ (8008ecc <HAL_RTC_WaitForSynchro+0x48>)
 8008e96:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e98:	f7f9 ffe2 	bl	8002e60 <HAL_GetTick>
 8008e9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e9e:	e009      	b.n	8008eb4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ea0:	f7f9 ffde 	bl	8002e60 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008eae:	d901      	bls.n	8008eb4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e007      	b.n	8008ec4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0ee      	beq.n	8008ea0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	0001ff5f 	.word	0x0001ff5f

08008ed0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d122      	bne.n	8008f34 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008efc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008efe:	f7f9 ffaf 	bl	8002e60 <HAL_GetTick>
 8008f02:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f04:	e00c      	b.n	8008f20 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f06:	f7f9 ffab 	bl	8002e60 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f14:	d904      	bls.n	8008f20 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2204      	movs	r2, #4
 8008f1a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <RTC_EnterInitMode+0x64>
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d1e8      	bne.n	8008f06 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f58:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff8b 	bl	8008e84 <HAL_RTC_WaitForSynchro>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2204      	movs	r2, #4
 8008f78:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008f96:	e005      	b.n	8008fa4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	3b0a      	subs	r3, #10
 8008fa2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	2b09      	cmp	r3, #9
 8008fa8:	d8f6      	bhi.n	8008f98 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	7f1b      	ldrb	r3, [r3, #28]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e050      	b.n	8009082 <HAL_RTCEx_SetTimeStamp+0xbe>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0206 	bic.w	r2, r2, #6
 8008ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	430a      	orrs	r2, r1
 800900a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	4b1f      	ldr	r3, [pc, #124]	@ (8009090 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009014:	4013      	ands	r3, r2
 8009016:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	22ca      	movs	r2, #202	@ 0xca
 8009026:	625a      	str	r2, [r3, #36]	@ 0x24
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2253      	movs	r2, #83	@ 0x53
 800902e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	b2da      	uxtb	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009048:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	b2da      	uxtb	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800905a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800906a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	22ff      	movs	r2, #255	@ 0xff
 8009072:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	371c      	adds	r7, #28
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	fffff7f7 	.word	0xfffff7f7

08009094 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e156      	b.n	8009360 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7f8 fdde 	bl	8001c88 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f95b 	bl	8009390 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d00c      	beq.n	80090fc <HAL_SAI_Init+0x68>
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d80d      	bhi.n	8009102 <HAL_SAI_Init+0x6e>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <HAL_SAI_Init+0x5c>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d003      	beq.n	80090f6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80090ee:	e008      	b.n	8009102 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]
      break;
 80090f4:	e006      	b.n	8009104 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80090f6:	2310      	movs	r3, #16
 80090f8:	61fb      	str	r3, [r7, #28]
      break;
 80090fa:	e003      	b.n	8009104 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80090fc:	2320      	movs	r3, #32
 80090fe:	61fb      	str	r3, [r7, #28]
      break;
 8009100:	e000      	b.n	8009104 <HAL_SAI_Init+0x70>
      break;
 8009102:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d81e      	bhi.n	800914a <HAL_SAI_Init+0xb6>
 800910c:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <HAL_SAI_Init+0x80>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	08009125 	.word	0x08009125
 8009118:	0800912b 	.word	0x0800912b
 800911c:	08009133 	.word	0x08009133
 8009120:	0800913b 	.word	0x0800913b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
    }
    break;
 8009128:	e010      	b.n	800914c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800912a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800912e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009130:	e00c      	b.n	800914c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009132:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009136:	617b      	str	r3, [r7, #20]
    }
    break;
 8009138:	e008      	b.n	800914c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800913a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800913e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	f043 0301 	orr.w	r3, r3, #1
 8009146:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009148:	e000      	b.n	800914c <HAL_SAI_Init+0xb8>
    default:
      break;
 800914a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a85      	ldr	r2, [pc, #532]	@ (8009368 <HAL_SAI_Init+0x2d4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <HAL_SAI_Init+0xcc>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a84      	ldr	r2, [pc, #528]	@ (800936c <HAL_SAI_Init+0x2d8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d103      	bne.n	8009168 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009160:	4a83      	ldr	r2, [pc, #524]	@ (8009370 <HAL_SAI_Init+0x2dc>)
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	e002      	b.n	800916e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009168:	4a82      	ldr	r2, [pc, #520]	@ (8009374 <HAL_SAI_Init+0x2e0>)
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d04c      	beq.n	8009210 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a7a      	ldr	r2, [pc, #488]	@ (8009368 <HAL_SAI_Init+0x2d4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d004      	beq.n	800918e <HAL_SAI_Init+0xfa>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a78      	ldr	r2, [pc, #480]	@ (800936c <HAL_SAI_Init+0x2d8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d104      	bne.n	8009198 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800918e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009192:	f7ff fa6d 	bl	8008670 <HAL_RCCEx_GetPeriphCLKFreq>
 8009196:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a76      	ldr	r2, [pc, #472]	@ (8009378 <HAL_SAI_Init+0x2e4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d004      	beq.n	80091ac <HAL_SAI_Init+0x118>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a75      	ldr	r2, [pc, #468]	@ (800937c <HAL_SAI_Init+0x2e8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d104      	bne.n	80091b6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80091ac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80091b0:	f7ff fa5e 	bl	8008670 <HAL_RCCEx_GetPeriphCLKFreq>
 80091b4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	461a      	mov	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	025b      	lsls	r3, r3, #9
 80091c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091cc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a6b      	ldr	r2, [pc, #428]	@ (8009380 <HAL_SAI_Init+0x2ec>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	08da      	lsrs	r2, r3, #3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	4b68      	ldr	r3, [pc, #416]	@ (8009380 <HAL_SAI_Init+0x2ec>)
 80091e0:	fba3 2301 	umull	r2, r3, r3, r1
 80091e4:	08da      	lsrs	r2, r3, #3
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	1aca      	subs	r2, r1, r3
 80091f0:	2a08      	cmp	r2, #8
 80091f2:	d904      	bls.n	80091fe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009202:	2b04      	cmp	r3, #4
 8009204:	d104      	bne.n	8009210 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	085a      	lsrs	r2, r3, #1
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_SAI_Init+0x18c>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d109      	bne.n	8009234 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_SAI_Init+0x198>
 8009228:	2300      	movs	r3, #0
 800922a:	e001      	b.n	8009230 <HAL_SAI_Init+0x19c>
 800922c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	e008      	b.n	8009246 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d102      	bne.n	8009242 <HAL_SAI_Init+0x1ae>
 800923c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009240:	e000      	b.n	8009244 <HAL_SAI_Init+0x1b0>
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6819      	ldr	r1, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	4b4c      	ldr	r3, [pc, #304]	@ (8009384 <HAL_SAI_Init+0x2f0>)
 8009252:	400b      	ands	r3, r1
 8009254:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6819      	ldr	r1, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009264:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800926a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009270:	431a      	orrs	r2, r3
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800927e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800928a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	051b      	lsls	r3, r3, #20
 8009292:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6859      	ldr	r1, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b38      	ldr	r3, [pc, #224]	@ (8009388 <HAL_SAI_Init+0x2f4>)
 80092a8:	400b      	ands	r3, r1
 80092aa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6859      	ldr	r1, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6899      	ldr	r1, [r3, #8]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	4b2d      	ldr	r3, [pc, #180]	@ (800938c <HAL_SAI_Init+0x2f8>)
 80092d6:	400b      	ands	r3, r1
 80092d8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6899      	ldr	r1, [r3, #8]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80092ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80092f0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80092f6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fc:	3b01      	subs	r3, #1
 80092fe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009300:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68d9      	ldr	r1, [r3, #12]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009318:	400b      	ands	r3, r1
 800931a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68d9      	ldr	r1, [r3, #12]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800932a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009330:	041b      	lsls	r3, r3, #16
 8009332:	431a      	orrs	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009338:	3b01      	subs	r3, #1
 800933a:	021b      	lsls	r3, r3, #8
 800933c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	40015804 	.word	0x40015804
 800936c:	40015824 	.word	0x40015824
 8009370:	40015800 	.word	0x40015800
 8009374:	40015c00 	.word	0x40015c00
 8009378:	40015c04 	.word	0x40015c04
 800937c:	40015c24 	.word	0x40015c24
 8009380:	cccccccd 	.word	0xcccccccd
 8009384:	ff05c010 	.word	0xff05c010
 8009388:	ffff1ff0 	.word	0xffff1ff0
 800938c:	fff88000 	.word	0xfff88000

08009390 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009398:	4b17      	ldr	r3, [pc, #92]	@ (80093f8 <SAI_Disable+0x68>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a17      	ldr	r2, [pc, #92]	@ (80093fc <SAI_Disable+0x6c>)
 800939e:	fba2 2303 	umull	r2, r3, r2, r3
 80093a2:	0b1b      	lsrs	r3, r3, #12
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80093ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	1e5a      	subs	r2, r3, #1
 80093c0:	60fa      	str	r2, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10a      	bne.n	80093dc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	72fb      	strb	r3, [r7, #11]
      break;
 80093da:	e006      	b.n	80093ea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e8      	bne.n	80093bc <SAI_Disable+0x2c>

  return status;
 80093ea:	7afb      	ldrb	r3, [r7, #11]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000000 	.word	0x20000000
 80093fc:	95cbec1b 	.word	0x95cbec1b

08009400 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e022      	b.n	8009458 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d105      	bne.n	800942a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7f8 fcbb 	bl	8001da0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2203      	movs	r2, #3
 800942e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f814 	bl	8009460 <HAL_SD_InitCard>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e00a      	b.n	8009458 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b08e      	sub	sp, #56	@ 0x38
 8009464:	af04      	add	r7, sp, #16
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800946c:	2300      	movs	r3, #0
 800946e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009474:	2300      	movs	r3, #0
 8009476:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009478:	2300      	movs	r3, #0
 800947a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800947c:	2376      	movs	r3, #118	@ 0x76
 800947e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681d      	ldr	r5, [r3, #0]
 8009484:	466c      	mov	r4, sp
 8009486:	f107 0318 	add.w	r3, r7, #24
 800948a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800948e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009492:	f107 030c 	add.w	r3, r7, #12
 8009496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009498:	4628      	mov	r0, r5
 800949a:	f003 ff39 	bl	800d310 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094ac:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f003 ff76 	bl	800d3a4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094c6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80094c8:	2002      	movs	r0, #2
 80094ca:	f7f9 fcd5 	bl	8002e78 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ff02 	bl	800a2d8 <SD_PowerON>
 80094d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e02e      	b.n	8009552 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fe21 	bl	800a13c <SD_InitCard>
 80094fa:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80094fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e01b      	b.n	8009552 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009522:	4618      	mov	r0, r3
 8009524:	f003 ffd0 	bl	800d4c8 <SDMMC_CmdBlockLength>
 8009528:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00f      	beq.n	8009550 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a09      	ldr	r2, [pc, #36]	@ (800955c <HAL_SD_InitCard+0xfc>)
 8009536:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800953c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e000      	b.n	8009552 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3728      	adds	r7, #40	@ 0x28
 8009556:	46bd      	mov	sp, r7
 8009558:	bdb0      	pop	{r4, r5, r7, pc}
 800955a:	bf00      	nop
 800955c:	004005ff 	.word	0x004005ff

08009560 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b092      	sub	sp, #72	@ 0x48
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800956e:	f7f9 fc77 	bl	8002e60 <HAL_GetTick>
 8009572:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d107      	bne.n	8009592 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009586:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e1bd      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b01      	cmp	r3, #1
 800959c:	f040 81b0 	bne.w	8009900 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	441a      	add	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d907      	bls.n	80095c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e1a4      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d002      	beq.n	80095e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	025b      	lsls	r3, r3, #9
 80095e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095e2:	f04f 33ff 	mov.w	r3, #4294967295
 80095e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	025b      	lsls	r3, r3, #9
 80095ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095ee:	2390      	movs	r3, #144	@ 0x90
 80095f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095f2:	2302      	movs	r3, #2
 80095f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80095fa:	2301      	movs	r3, #1
 80095fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f107 0214 	add.w	r2, r7, #20
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f003 ff31 	bl	800d470 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d90a      	bls.n	800962a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2202      	movs	r2, #2
 8009618:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009620:	4618      	mov	r0, r3
 8009622:	f003 ff95 	bl	800d550 <SDMMC_CmdReadMultiBlock>
 8009626:	6478      	str	r0, [r7, #68]	@ 0x44
 8009628:	e009      	b.n	800963e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2201      	movs	r2, #1
 800962e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009636:	4618      	mov	r0, r3
 8009638:	f003 ff68 	bl	800d50c <SDMMC_CmdReadSingleBlock>
 800963c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800963e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009640:	2b00      	cmp	r3, #0
 8009642:	d012      	beq.n	800966a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a7a      	ldr	r2, [pc, #488]	@ (8009834 <HAL_SD_ReadBlocks+0x2d4>)
 800964a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009652:	431a      	orrs	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e151      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800966e:	e061      	b.n	8009734 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d03c      	beq.n	80096f8 <HAL_SD_ReadBlocks+0x198>
 800967e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d039      	beq.n	80096f8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009684:	2300      	movs	r3, #0
 8009686:	643b      	str	r3, [r7, #64]	@ 0x40
 8009688:	e033      	b.n	80096f2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f003 fe6a 	bl	800d368 <SDMMC_ReadFIFO>
 8009694:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009698:	b2da      	uxtb	r2, r3
 800969a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800969c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800969e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a0:	3301      	adds	r3, #1
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80096a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096a6:	3b01      	subs	r3, #1
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80096aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ac:	0a1b      	lsrs	r3, r3, #8
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b6:	3301      	adds	r3, #1
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80096ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096bc:	3b01      	subs	r3, #1
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80096c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c2:	0c1b      	lsrs	r3, r3, #16
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096cc:	3301      	adds	r3, #1
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80096d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d2:	3b01      	subs	r3, #1
 80096d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	0e1b      	lsrs	r3, r3, #24
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e2:	3301      	adds	r3, #1
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80096e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e8:	3b01      	subs	r3, #1
 80096ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80096ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ee:	3301      	adds	r3, #1
 80096f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096f4:	2b07      	cmp	r3, #7
 80096f6:	d9c8      	bls.n	800968a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80096f8:	f7f9 fbb2 	bl	8002e60 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009704:	429a      	cmp	r2, r3
 8009706:	d902      	bls.n	800970e <HAL_SD_ReadBlocks+0x1ae>
 8009708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800970a:	2b00      	cmp	r3, #0
 800970c:	d112      	bne.n	8009734 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a48      	ldr	r2, [pc, #288]	@ (8009834 <HAL_SD_ReadBlocks+0x2d4>)
 8009714:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e0ec      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800973a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800973e:	2b00      	cmp	r3, #0
 8009740:	d096      	beq.n	8009670 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d022      	beq.n	8009796 <HAL_SD_ReadBlocks+0x236>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d91f      	bls.n	8009796 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800975a:	2b03      	cmp	r3, #3
 800975c:	d01b      	beq.n	8009796 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f003 ff5a 	bl	800d61c <SDMMC_CmdStopTransfer>
 8009768:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800976a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800976c:	2b00      	cmp	r3, #0
 800976e:	d012      	beq.n	8009796 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a2f      	ldr	r2, [pc, #188]	@ (8009834 <HAL_SD_ReadBlocks+0x2d4>)
 8009776:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800977c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800977e:	431a      	orrs	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e0bb      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979c:	f003 0308 	and.w	r3, r3, #8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d012      	beq.n	80097ca <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a22      	ldr	r2, [pc, #136]	@ (8009834 <HAL_SD_ReadBlocks+0x2d4>)
 80097aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b0:	f043 0208 	orr.w	r2, r3, #8
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e0a1      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d012      	beq.n	80097fe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a15      	ldr	r2, [pc, #84]	@ (8009834 <HAL_SD_ReadBlocks+0x2d4>)
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e4:	f043 0202 	orr.w	r2, r3, #2
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e087      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d064      	beq.n	80098d6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a08      	ldr	r2, [pc, #32]	@ (8009834 <HAL_SD_ReadBlocks+0x2d4>)
 8009812:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009818:	f043 0220 	orr.w	r2, r3, #32
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e06d      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
 8009832:	bf00      	nop
 8009834:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4618      	mov	r0, r3
 800983e:	f003 fd93 	bl	800d368 <SDMMC_ReadFIFO>
 8009842:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	b2da      	uxtb	r2, r3
 8009848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800984a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800984c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800984e:	3301      	adds	r3, #1
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009854:	3b01      	subs	r3, #1
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985a:	0a1b      	lsrs	r3, r3, #8
 800985c:	b2da      	uxtb	r2, r3
 800985e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009860:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009864:	3301      	adds	r3, #1
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800986a:	3b01      	subs	r3, #1
 800986c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	b2da      	uxtb	r2, r3
 8009874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009876:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800987a:	3301      	adds	r3, #1
 800987c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800987e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009880:	3b01      	subs	r3, #1
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009886:	0e1b      	lsrs	r3, r3, #24
 8009888:	b2da      	uxtb	r2, r3
 800988a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800988e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009890:	3301      	adds	r3, #1
 8009892:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009896:	3b01      	subs	r3, #1
 8009898:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800989a:	f7f9 fae1 	bl	8002e60 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d902      	bls.n	80098b0 <HAL_SD_ReadBlocks+0x350>
 80098aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d112      	bne.n	80098d6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a18      	ldr	r2, [pc, #96]	@ (8009918 <HAL_SD_ReadBlocks+0x3b8>)
 80098b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e01b      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <HAL_SD_ReadBlocks+0x38a>
 80098e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1a6      	bne.n	8009838 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 80098f2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e006      	b.n	800990e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009904:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
  }
}
 800990e:	4618      	mov	r0, r3
 8009910:	3748      	adds	r7, #72	@ 0x48
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	004005ff 	.word	0x004005ff

0800991c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b092      	sub	sp, #72	@ 0x48
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800992a:	f7f9 fa99 	bl	8002e60 <HAL_GetTick>
 800992e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d107      	bne.n	800994e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009942:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e165      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b01      	cmp	r3, #1
 8009958:	f040 8158 	bne.w	8009c0c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009962:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	441a      	add	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800996c:	429a      	cmp	r2, r3
 800996e:	d907      	bls.n	8009980 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009974:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e14c      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2203      	movs	r2, #3
 8009984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2200      	movs	r2, #0
 800998e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009994:	2b01      	cmp	r3, #1
 8009996:	d002      	beq.n	800999e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	025b      	lsls	r3, r3, #9
 800999c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	025b      	lsls	r3, r3, #9
 80099a8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80099aa:	2390      	movs	r3, #144	@ 0x90
 80099ac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80099ae:	2300      	movs	r3, #0
 80099b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80099b6:	2301      	movs	r3, #1
 80099b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f107 0218 	add.w	r2, r7, #24
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f003 fd53 	bl	800d470 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d90a      	bls.n	80099e6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80099dc:	4618      	mov	r0, r3
 80099de:	f003 fdfb 	bl	800d5d8 <SDMMC_CmdWriteMultiBlock>
 80099e2:	6478      	str	r0, [r7, #68]	@ 0x44
 80099e4:	e009      	b.n	80099fa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2210      	movs	r2, #16
 80099ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80099f2:	4618      	mov	r0, r3
 80099f4:	f003 fdce 	bl	800d594 <SDMMC_CmdWriteSingleBlock>
 80099f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80099fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d012      	beq.n	8009a26 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a87      	ldr	r2, [pc, #540]	@ (8009c24 <HAL_SD_WriteBlocks+0x308>)
 8009a06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e0f9      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a2a:	e065      	b.n	8009af8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d040      	beq.n	8009abc <HAL_SD_WriteBlocks+0x1a0>
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d03d      	beq.n	8009abc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009a40:	2300      	movs	r3, #0
 8009a42:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a44:	e037      	b.n	8009ab6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4e:	3301      	adds	r3, #1
 8009a50:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a54:	3b01      	subs	r3, #1
 8009a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	021a      	lsls	r2, r3, #8
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a66:	3301      	adds	r3, #1
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	041a      	lsls	r2, r3, #16
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7e:	3301      	adds	r3, #1
 8009a80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a84:	3b01      	subs	r3, #1
 8009a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	061a      	lsls	r2, r3, #24
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a96:	3301      	adds	r3, #1
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f107 0214 	add.w	r2, r7, #20
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f003 fc69 	bl	800d382 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab8:	2b07      	cmp	r3, #7
 8009aba:	d9c4      	bls.n	8009a46 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009abc:	f7f9 f9d0 	bl	8002e60 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d902      	bls.n	8009ad2 <HAL_SD_WriteBlocks+0x1b6>
 8009acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d112      	bne.n	8009af8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a53      	ldr	r2, [pc, #332]	@ (8009c24 <HAL_SD_WriteBlocks+0x308>)
 8009ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e090      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afe:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d092      	beq.n	8009a2c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d022      	beq.n	8009b5a <HAL_SD_WriteBlocks+0x23e>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d91f      	bls.n	8009b5a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d01b      	beq.n	8009b5a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f003 fd78 	bl	800d61c <SDMMC_CmdStopTransfer>
 8009b2c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d012      	beq.n	8009b5a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a3a      	ldr	r2, [pc, #232]	@ (8009c24 <HAL_SD_WriteBlocks+0x308>)
 8009b3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b42:	431a      	orrs	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e05f      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b60:	f003 0308 	and.w	r3, r3, #8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d012      	beq.n	8009b8e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8009c24 <HAL_SD_WriteBlocks+0x308>)
 8009b6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b74:	f043 0208 	orr.w	r2, r3, #8
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e045      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d012      	beq.n	8009bc2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a20      	ldr	r2, [pc, #128]	@ (8009c24 <HAL_SD_WriteBlocks+0x308>)
 8009ba2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba8:	f043 0202 	orr.w	r2, r3, #2
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e02b      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d012      	beq.n	8009bf6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a13      	ldr	r2, [pc, #76]	@ (8009c24 <HAL_SD_WriteBlocks+0x308>)
 8009bd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bdc:	f043 0210 	orr.w	r2, r3, #16
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e011      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009bfe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e006      	b.n	8009c1a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
  }
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3748      	adds	r7, #72	@ 0x48
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	004005ff 	.word	0x004005ff

08009c28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c36:	0f9b      	lsrs	r3, r3, #30
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c42:	0e9b      	lsrs	r3, r3, #26
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c54:	0e1b      	lsrs	r3, r3, #24
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0303 	and.w	r3, r3, #3
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c66:	0c1b      	lsrs	r3, r3, #16
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c72:	0a1b      	lsrs	r3, r3, #8
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c88:	0d1b      	lsrs	r3, r3, #20
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c94:	0c1b      	lsrs	r3, r3, #16
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ca6:	0bdb      	lsrs	r3, r3, #15
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cb8:	0b9b      	lsrs	r3, r3, #14
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cca:	0b5b      	lsrs	r3, r3, #13
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cdc:	0b1b      	lsrs	r3, r3, #12
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2200      	movs	r2, #0
 8009cee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d163      	bne.n	8009dc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cfc:	009a      	lsls	r2, r3, #2
 8009cfe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d02:	4013      	ands	r3, r2
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009d08:	0f92      	lsrs	r2, r2, #30
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d14:	0edb      	lsrs	r3, r3, #27
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d26:	0e1b      	lsrs	r3, r3, #24
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d38:	0d5b      	lsrs	r3, r3, #21
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4a:	0c9b      	lsrs	r3, r3, #18
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d5c:	0bdb      	lsrs	r3, r3, #15
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	7e1b      	ldrb	r3, [r3, #24]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	3302      	adds	r3, #2
 8009d80:	2201      	movs	r2, #1
 8009d82:	fa02 f303 	lsl.w	r3, r2, r3
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009d8a:	fb03 f202 	mul.w	r2, r3, r2
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	7a1b      	ldrb	r3, [r3, #8]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 030f 	and.w	r3, r3, #15
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	409a      	lsls	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009dac:	0a52      	lsrs	r2, r2, #9
 8009dae:	fb03 f202 	mul.w	r2, r3, r2
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dbc:	661a      	str	r2, [r3, #96]	@ 0x60
 8009dbe:	e031      	b.n	8009e24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d11d      	bne.n	8009e04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dcc:	041b      	lsls	r3, r3, #16
 8009dce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd6:	0c1b      	lsrs	r3, r3, #16
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	3301      	adds	r3, #1
 8009de4:	029a      	lsls	r2, r3, #10
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009df8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e02:	e00f      	b.n	8009e24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a58      	ldr	r2, [pc, #352]	@ (8009f6c <HAL_SD_GetCardCSD+0x344>)
 8009e0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e09d      	b.n	8009f60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e28:	0b9b      	lsrs	r3, r3, #14
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e3a:	09db      	lsrs	r3, r3, #7
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e5c:	0fdb      	lsrs	r3, r3, #31
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e68:	0f5b      	lsrs	r3, r3, #29
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 0303 	and.w	r3, r3, #3
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e7a:	0e9b      	lsrs	r3, r3, #26
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0307 	and.w	r3, r3, #7
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e8c:	0d9b      	lsrs	r3, r3, #22
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e9e:	0d5b      	lsrs	r3, r3, #21
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eba:	0c1b      	lsrs	r3, r3, #16
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ece:	0bdb      	lsrs	r3, r3, #15
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ee2:	0b9b      	lsrs	r3, r3, #14
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ef6:	0b5b      	lsrs	r3, r3, #13
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f0a:	0b1b      	lsrs	r3, r3, #12
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1e:	0a9b      	lsrs	r3, r3, #10
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f32:	0a1b      	lsrs	r3, r3, #8
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	004005ff 	.word	0x004005ff

08009f70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009fc8:	b5b0      	push	{r4, r5, r7, lr}
 8009fca:	b08e      	sub	sp, #56	@ 0x38
 8009fcc:	af04      	add	r7, sp, #16
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2203      	movs	r2, #3
 8009fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d02e      	beq.n	800a046 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fee:	d106      	bne.n	8009ffe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	639a      	str	r2, [r3, #56]	@ 0x38
 8009ffc:	e029      	b.n	800a052 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a004:	d10a      	bne.n	800a01c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fa1c 	bl	800a444 <SD_WideBus_Enable>
 800a00c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	639a      	str	r2, [r3, #56]	@ 0x38
 800a01a:	e01a      	b.n	800a052 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa59 	bl	800a4da <SD_WideBus_Disable>
 800a028:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	431a      	orrs	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	639a      	str	r2, [r3, #56]	@ 0x38
 800a036:	e00c      	b.n	800a052 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	639a      	str	r2, [r3, #56]	@ 0x38
 800a044:	e005      	b.n	800a052 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00b      	beq.n	800a072 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a26      	ldr	r2, [pc, #152]	@ (800a0f8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a070:	e01f      	b.n	800a0b2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681d      	ldr	r5, [r3, #0]
 800a098:	466c      	mov	r4, sp
 800a09a:	f107 0314 	add.w	r3, r7, #20
 800a09e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f003 f92f 	bl	800d310 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f003 fa04 	bl	800d4c8 <SDMMC_CmdBlockLength>
 800a0c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00c      	beq.n	800a0e2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a0ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800a0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3728      	adds	r7, #40	@ 0x28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	004005ff 	.word	0x004005ff

0800a0fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a108:	f107 030c 	add.w	r3, r7, #12
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f970 	bl	800a3f4 <SD_SendStatus>
 800a114:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	0a5b      	lsrs	r3, r3, #9
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a132:	693b      	ldr	r3, [r7, #16]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a13c:	b5b0      	push	{r4, r5, r7, lr}
 800a13e:	b094      	sub	sp, #80	@ 0x50
 800a140:	af04      	add	r7, sp, #16
 800a142:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a144:	2301      	movs	r3, #1
 800a146:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f003 f937 	bl	800d3c0 <SDMMC_GetPowerState>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a158:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a15c:	e0b8      	b.n	800a2d0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a162:	2b03      	cmp	r3, #3
 800a164:	d02f      	beq.n	800a1c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f003 fb61 	bl	800d832 <SDMMC_CmdSendCID>
 800a170:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <SD_InitCard+0x40>
    {
      return errorstate;
 800a178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a17a:	e0a9      	b.n	800a2d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2100      	movs	r1, #0
 800a182:	4618      	mov	r0, r3
 800a184:	f003 f961 	bl	800d44a <SDMMC_GetResponse>
 800a188:	4602      	mov	r2, r0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2104      	movs	r1, #4
 800a194:	4618      	mov	r0, r3
 800a196:	f003 f958 	bl	800d44a <SDMMC_GetResponse>
 800a19a:	4602      	mov	r2, r0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2108      	movs	r1, #8
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 f94f 	bl	800d44a <SDMMC_GetResponse>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	210c      	movs	r1, #12
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f003 f946 	bl	800d44a <SDMMC_GetResponse>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d00d      	beq.n	800a1ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f107 020e 	add.w	r2, r7, #14
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f003 fb67 	bl	800d8ac <SDMMC_CmdSetRelAdd>
 800a1de:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <SD_InitCard+0xae>
    {
      return errorstate;
 800a1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e8:	e072      	b.n	800a2d0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d036      	beq.n	800a260 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a1f2:	89fb      	ldrh	r3, [r7, #14]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a202:	041b      	lsls	r3, r3, #16
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f003 fb31 	bl	800d86e <SDMMC_CmdSendCSD>
 800a20c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a20e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a216:	e05b      	b.n	800a2d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f003 f913 	bl	800d44a <SDMMC_GetResponse>
 800a224:	4602      	mov	r2, r0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2104      	movs	r1, #4
 800a230:	4618      	mov	r0, r3
 800a232:	f003 f90a 	bl	800d44a <SDMMC_GetResponse>
 800a236:	4602      	mov	r2, r0
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2108      	movs	r1, #8
 800a242:	4618      	mov	r0, r3
 800a244:	f003 f901 	bl	800d44a <SDMMC_GetResponse>
 800a248:	4602      	mov	r2, r0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	210c      	movs	r1, #12
 800a254:	4618      	mov	r0, r3
 800a256:	f003 f8f8 	bl	800d44a <SDMMC_GetResponse>
 800a25a:	4602      	mov	r2, r0
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2104      	movs	r1, #4
 800a266:	4618      	mov	r0, r3
 800a268:	f003 f8ef 	bl	800d44a <SDMMC_GetResponse>
 800a26c:	4603      	mov	r3, r0
 800a26e:	0d1a      	lsrs	r2, r3, #20
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a274:	f107 0310 	add.w	r3, r7, #16
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fcd4 	bl	8009c28 <HAL_SD_GetCardCSD>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a286:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a28a:	e021      	b.n	800a2d0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a294:	041b      	lsls	r3, r3, #16
 800a296:	2200      	movs	r2, #0
 800a298:	461c      	mov	r4, r3
 800a29a:	4615      	mov	r5, r2
 800a29c:	4622      	mov	r2, r4
 800a29e:	462b      	mov	r3, r5
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	f003 f9dd 	bl	800d660 <SDMMC_CmdSelDesel>
 800a2a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <SD_InitCard+0x176>
  {
    return errorstate;
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b0:	e00e      	b.n	800a2d0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681d      	ldr	r5, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	466c      	mov	r4, sp
 800a2ba:	f103 0210 	add.w	r2, r3, #16
 800a2be:	ca07      	ldmia	r2, {r0, r1, r2}
 800a2c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f003 f821 	bl	800d310 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3740      	adds	r7, #64	@ 0x40
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bdb0      	pop	{r4, r5, r7, pc}

0800a2d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f003 f9d8 	bl	800d6a6 <SDMMC_CmdGoIdleState>
 800a2f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	e072      	b.n	800a3e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4618      	mov	r0, r3
 800a308:	f003 f9eb 	bl	800d6e2 <SDMMC_CmdOperCond>
 800a30c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00d      	beq.n	800a330 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f003 f9c1 	bl	800d6a6 <SDMMC_CmdGoIdleState>
 800a324:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d004      	beq.n	800a336 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	e05b      	b.n	800a3e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d137      	bne.n	800a3ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2100      	movs	r1, #0
 800a344:	4618      	mov	r0, r3
 800a346:	f003 f9eb 	bl	800d720 <SDMMC_CmdAppCommand>
 800a34a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d02d      	beq.n	800a3ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a352:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a356:	e047      	b.n	800a3e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f003 f9de 	bl	800d720 <SDMMC_CmdAppCommand>
 800a364:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <SD_PowerON+0x98>
    {
      return errorstate;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	e03b      	b.n	800a3e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	491e      	ldr	r1, [pc, #120]	@ (800a3f0 <SD_PowerON+0x118>)
 800a376:	4618      	mov	r0, r3
 800a378:	f003 f9f4 	bl	800d764 <SDMMC_CmdAppOperCommand>
 800a37c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a384:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a388:	e02e      	b.n	800a3e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2100      	movs	r1, #0
 800a390:	4618      	mov	r0, r3
 800a392:	f003 f85a 	bl	800d44a <SDMMC_GetResponse>
 800a396:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	0fdb      	lsrs	r3, r3, #31
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d101      	bne.n	800a3a4 <SD_PowerON+0xcc>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <SD_PowerON+0xce>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	613b      	str	r3, [r7, #16]

    count++;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d802      	bhi.n	800a3be <SD_PowerON+0xe6>
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0cc      	beq.n	800a358 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d902      	bls.n	800a3ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a3c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a3cc:	e00c      	b.n	800a3e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	645a      	str	r2, [r3, #68]	@ 0x44
 800a3de:	e002      	b.n	800a3e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	c1100000 	.word	0xc1100000

0800a3f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a404:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a408:	e018      	b.n	800a43c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f003 fa69 	bl	800d8ee <SDMMC_CmdSendStatus>
 800a41c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	e009      	b.n	800a43c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2100      	movs	r1, #0
 800a42e:	4618      	mov	r0, r3
 800a430:	f003 f80b 	bl	800d44a <SDMMC_GetResponse>
 800a434:	4602      	mov	r2, r0
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	2300      	movs	r3, #0
 800a452:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f002 fff5 	bl	800d44a <SDMMC_GetResponse>
 800a460:	4603      	mov	r3, r0
 800a462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a46a:	d102      	bne.n	800a472 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a46c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a470:	e02f      	b.n	800a4d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a472:	f107 030c 	add.w	r3, r7, #12
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f879 	bl	800a570 <SD_FindSCR>
 800a47e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	e023      	b.n	800a4d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01c      	beq.n	800a4ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a49c:	041b      	lsls	r3, r3, #16
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f003 f93d 	bl	800d720 <SDMMC_CmdAppCommand>
 800a4a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	e00f      	b.n	800a4d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f003 f977 	bl	800d7ac <SDMMC_CmdBusWidth>
 800a4be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	e003      	b.n	800a4d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e001      	b.n	800a4d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a4ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b086      	sub	sp, #24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 ffaa 	bl	800d44a <SDMMC_GetResponse>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a500:	d102      	bne.n	800a508 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a502:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a506:	e02f      	b.n	800a568 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f82e 	bl	800a570 <SD_FindSCR>
 800a514:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	e023      	b.n	800a568 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d01c      	beq.n	800a564 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a532:	041b      	lsls	r3, r3, #16
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f003 f8f2 	bl	800d720 <SDMMC_CmdAppCommand>
 800a53c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	e00f      	b.n	800a568 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2100      	movs	r1, #0
 800a54e:	4618      	mov	r0, r3
 800a550:	f003 f92c 	bl	800d7ac <SDMMC_CmdBusWidth>
 800a554:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	e003      	b.n	800a568 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a560:	2300      	movs	r3, #0
 800a562:	e001      	b.n	800a568 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a564:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a570:	b590      	push	{r4, r7, lr}
 800a572:	b08f      	sub	sp, #60	@ 0x3c
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a57a:	f7f8 fc71 	bl	8002e60 <HAL_GetTick>
 800a57e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a584:	2300      	movs	r3, #0
 800a586:	60bb      	str	r3, [r7, #8]
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2108      	movs	r1, #8
 800a596:	4618      	mov	r0, r3
 800a598:	f002 ff96 	bl	800d4c8 <SDMMC_CmdBlockLength>
 800a59c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a6:	e0b2      	b.n	800a70e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b0:	041b      	lsls	r3, r3, #16
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f003 f8b3 	bl	800d720 <SDMMC_CmdAppCommand>
 800a5ba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	e0a3      	b.n	800a70e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a5d0:	2330      	movs	r3, #48	@ 0x30
 800a5d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f107 0210 	add.w	r2, r7, #16
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f002 ff40 	bl	800d470 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f003 f8fb 	bl	800d7f0 <SDMMC_CmdSendSCR>
 800a5fa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d02a      	beq.n	800a658 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	e083      	b.n	800a70e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a60c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00f      	beq.n	800a634 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6819      	ldr	r1, [r3, #0]
 800a618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	f107 0208 	add.w	r2, r7, #8
 800a620:	18d4      	adds	r4, r2, r3
 800a622:	4608      	mov	r0, r1
 800a624:	f002 fea0 	bl	800d368 <SDMMC_ReadFIFO>
 800a628:	4603      	mov	r3, r0
 800a62a:	6023      	str	r3, [r4, #0]
      index++;
 800a62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62e:	3301      	adds	r3, #1
 800a630:	637b      	str	r3, [r7, #52]	@ 0x34
 800a632:	e006      	b.n	800a642 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d012      	beq.n	800a668 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a642:	f7f8 fc0d 	bl	8002e60 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d102      	bne.n	800a658 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a652:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a656:	e05a      	b.n	800a70e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0cf      	beq.n	800a606 <SD_FindSCR+0x96>
 800a666:	e000      	b.n	800a66a <SD_FindSCR+0xfa>
      break;
 800a668:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d005      	beq.n	800a684 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2208      	movs	r2, #8
 800a67e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a680:	2308      	movs	r3, #8
 800a682:	e044      	b.n	800a70e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2202      	movs	r2, #2
 800a698:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	e037      	b.n	800a70e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a6b4:	2320      	movs	r3, #32
 800a6b6:	e02a      	b.n	800a70e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a6c0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	061a      	lsls	r2, r3, #24
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	021b      	lsls	r3, r3, #8
 800a6ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6ce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	0a1b      	lsrs	r3, r3, #8
 800a6d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a6d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	0e1b      	lsrs	r3, r3, #24
 800a6de:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e2:	601a      	str	r2, [r3, #0]
    scr++;
 800a6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	061a      	lsls	r2, r3, #24
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6f6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	0a1b      	lsrs	r3, r3, #8
 800a6fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a700:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	0e1b      	lsrs	r3, r3, #24
 800a706:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	373c      	adds	r7, #60	@ 0x3c
 800a712:	46bd      	mov	sp, r7
 800a714:	bd90      	pop	{r4, r7, pc}

0800a716 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e025      	b.n	800a776 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7f6 fafe 	bl	8000d40 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3304      	adds	r3, #4
 800a754:	4619      	mov	r1, r3
 800a756:	4610      	mov	r0, r2
 800a758:	f002 fd14 	bl	800d184 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	461a      	mov	r2, r3
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	f002 fd68 	bl	800d23c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e04c      	b.n	800a82c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7f7 fb8c 	bl	8001ec4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 0203 	bic.w	r2, r2, #3
 800a7c2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4b19      	ldr	r3, [pc, #100]	@ (800a834 <HAL_SPDIFRX_Init+0xb4>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a7dc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a7e2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a7e8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a7ee:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a7f4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a7fa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a800:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a806:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a80c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4313      	orrs	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	fff88407 	.word	0xfff88407

0800a838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e09d      	b.n	800a986 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d108      	bne.n	800a864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a85a:	d009      	beq.n	800a870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	61da      	str	r2, [r3, #28]
 800a862:	e005      	b.n	800a870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7f7 fbbc 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2202      	movs	r2, #2
 800a894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a8b0:	d902      	bls.n	800a8b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
 800a8b6:	e002      	b.n	800a8be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a8b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a8c6:	d007      	beq.n	800a8d8 <HAL_SPI_Init+0xa0>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a8d0:	d002      	beq.n	800a8d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a906:	431a      	orrs	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a910:	431a      	orrs	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a91a:	ea42 0103 	orr.w	r1, r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a922:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	f003 0204 	and.w	r2, r3, #4
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93c:	f003 0310 	and.w	r3, r3, #16
 800a940:	431a      	orrs	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a946:	f003 0308 	and.w	r3, r3, #8
 800a94a:	431a      	orrs	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a954:	ea42 0103 	orr.w	r1, r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	69da      	ldr	r2, [r3, #28]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e049      	b.n	800aa34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7f7 ff7d 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	f000 fc11 	bl	800b1f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d001      	beq.n	800aa54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e054      	b.n	800aafe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2202      	movs	r2, #2
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f042 0201 	orr.w	r2, r2, #1
 800aa6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a26      	ldr	r2, [pc, #152]	@ (800ab0c <HAL_TIM_Base_Start_IT+0xd0>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d022      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa7e:	d01d      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a22      	ldr	r2, [pc, #136]	@ (800ab10 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d018      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a21      	ldr	r2, [pc, #132]	@ (800ab14 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d013      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a1f      	ldr	r2, [pc, #124]	@ (800ab18 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d00e      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab1c <HAL_TIM_Base_Start_IT+0xe0>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d009      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a1c      	ldr	r2, [pc, #112]	@ (800ab20 <HAL_TIM_Base_Start_IT+0xe4>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d004      	beq.n	800aabc <HAL_TIM_Base_Start_IT+0x80>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a1b      	ldr	r2, [pc, #108]	@ (800ab24 <HAL_TIM_Base_Start_IT+0xe8>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d115      	bne.n	800aae8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	689a      	ldr	r2, [r3, #8]
 800aac2:	4b19      	ldr	r3, [pc, #100]	@ (800ab28 <HAL_TIM_Base_Start_IT+0xec>)
 800aac4:	4013      	ands	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b06      	cmp	r3, #6
 800aacc:	d015      	beq.n	800aafa <HAL_TIM_Base_Start_IT+0xbe>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad4:	d011      	beq.n	800aafa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f042 0201 	orr.w	r2, r2, #1
 800aae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae6:	e008      	b.n	800aafa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0201 	orr.w	r2, r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	e000      	b.n	800aafc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aafa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	40010000 	.word	0x40010000
 800ab10:	40000400 	.word	0x40000400
 800ab14:	40000800 	.word	0x40000800
 800ab18:	40000c00 	.word	0x40000c00
 800ab1c:	40010400 	.word	0x40010400
 800ab20:	40014000 	.word	0x40014000
 800ab24:	40001800 	.word	0x40001800
 800ab28:	00010007 	.word	0x00010007

0800ab2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e049      	b.n	800abd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7f7 ff1c 	bl	8002990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3304      	adds	r3, #4
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f000 fb42 	bl	800b1f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d020      	beq.n	800ac3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f003 0302 	and.w	r3, r3, #2
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d01b      	beq.n	800ac3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f06f 0202 	mvn.w	r2, #2
 800ac0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	f003 0303 	and.w	r3, r3, #3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fac7 	bl	800b1b8 <HAL_TIM_IC_CaptureCallback>
 800ac2a:	e005      	b.n	800ac38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fab9 	bl	800b1a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 faca 	bl	800b1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	f003 0304 	and.w	r3, r3, #4
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d020      	beq.n	800ac8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d01b      	beq.n	800ac8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f06f 0204 	mvn.w	r2, #4
 800ac5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 faa1 	bl	800b1b8 <HAL_TIM_IC_CaptureCallback>
 800ac76:	e005      	b.n	800ac84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fa93 	bl	800b1a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 faa4 	bl	800b1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	f003 0308 	and.w	r3, r3, #8
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d020      	beq.n	800acd6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01b      	beq.n	800acd6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f06f 0208 	mvn.w	r2, #8
 800aca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2204      	movs	r2, #4
 800acac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fa7b 	bl	800b1b8 <HAL_TIM_IC_CaptureCallback>
 800acc2:	e005      	b.n	800acd0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fa6d 	bl	800b1a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa7e 	bl	800b1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f003 0310 	and.w	r3, r3, #16
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d020      	beq.n	800ad22 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f003 0310 	and.w	r3, r3, #16
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01b      	beq.n	800ad22 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f06f 0210 	mvn.w	r2, #16
 800acf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2208      	movs	r2, #8
 800acf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa55 	bl	800b1b8 <HAL_TIM_IC_CaptureCallback>
 800ad0e:	e005      	b.n	800ad1c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa47 	bl	800b1a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa58 	bl	800b1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00c      	beq.n	800ad46 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d007      	beq.n	800ad46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f06f 0201 	mvn.w	r2, #1
 800ad3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7f6 fd53 	bl	80017ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00c      	beq.n	800ad74 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d007      	beq.n	800ad74 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fef4 	bl	800bb5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00c      	beq.n	800ad98 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d007      	beq.n	800ad98 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 feec 	bl	800bb70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00c      	beq.n	800adbc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d007      	beq.n	800adbc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800adb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa12 	bl	800b1e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	f003 0320 	and.w	r3, r3, #32
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00c      	beq.n	800ade0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f003 0320 	and.w	r3, r3, #32
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d007      	beq.n	800ade0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f06f 0220 	mvn.w	r2, #32
 800add8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 feb4 	bl	800bb48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ade0:	bf00      	nop
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d101      	bne.n	800ae06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e0ff      	b.n	800b006 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b14      	cmp	r3, #20
 800ae12:	f200 80f0 	bhi.w	800aff6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae16:	a201      	add	r2, pc, #4	@ (adr r2, 800ae1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1c:	0800ae71 	.word	0x0800ae71
 800ae20:	0800aff7 	.word	0x0800aff7
 800ae24:	0800aff7 	.word	0x0800aff7
 800ae28:	0800aff7 	.word	0x0800aff7
 800ae2c:	0800aeb1 	.word	0x0800aeb1
 800ae30:	0800aff7 	.word	0x0800aff7
 800ae34:	0800aff7 	.word	0x0800aff7
 800ae38:	0800aff7 	.word	0x0800aff7
 800ae3c:	0800aef3 	.word	0x0800aef3
 800ae40:	0800aff7 	.word	0x0800aff7
 800ae44:	0800aff7 	.word	0x0800aff7
 800ae48:	0800aff7 	.word	0x0800aff7
 800ae4c:	0800af33 	.word	0x0800af33
 800ae50:	0800aff7 	.word	0x0800aff7
 800ae54:	0800aff7 	.word	0x0800aff7
 800ae58:	0800aff7 	.word	0x0800aff7
 800ae5c:	0800af75 	.word	0x0800af75
 800ae60:	0800aff7 	.word	0x0800aff7
 800ae64:	0800aff7 	.word	0x0800aff7
 800ae68:	0800aff7 	.word	0x0800aff7
 800ae6c:	0800afb5 	.word	0x0800afb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fa62 	bl	800b340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0208 	orr.w	r2, r2, #8
 800ae8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699a      	ldr	r2, [r3, #24]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f022 0204 	bic.w	r2, r2, #4
 800ae9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6999      	ldr	r1, [r3, #24]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	691a      	ldr	r2, [r3, #16]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	619a      	str	r2, [r3, #24]
      break;
 800aeae:	e0a5      	b.n	800affc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fab4 	bl	800b424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	699a      	ldr	r2, [r3, #24]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aeca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aeda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6999      	ldr	r1, [r3, #24]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	021a      	lsls	r2, r3, #8
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	619a      	str	r2, [r3, #24]
      break;
 800aef0:	e084      	b.n	800affc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68b9      	ldr	r1, [r7, #8]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 fb0b 	bl	800b514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69da      	ldr	r2, [r3, #28]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f042 0208 	orr.w	r2, r2, #8
 800af0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69da      	ldr	r2, [r3, #28]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0204 	bic.w	r2, r2, #4
 800af1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	69d9      	ldr	r1, [r3, #28]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	691a      	ldr	r2, [r3, #16]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	61da      	str	r2, [r3, #28]
      break;
 800af30:	e064      	b.n	800affc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 fb61 	bl	800b600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69da      	ldr	r2, [r3, #28]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69d9      	ldr	r1, [r3, #28]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	021a      	lsls	r2, r3, #8
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	61da      	str	r2, [r3, #28]
      break;
 800af72:	e043      	b.n	800affc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fb98 	bl	800b6b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f042 0208 	orr.w	r2, r2, #8
 800af8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f022 0204 	bic.w	r2, r2, #4
 800af9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	691a      	ldr	r2, [r3, #16]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800afb2:	e023      	b.n	800affc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fbca 	bl	800b754 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	021a      	lsls	r2, r3, #8
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aff4:	e002      	b.n	800affc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
      break;
 800affa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop

0800b010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b024:	2b01      	cmp	r3, #1
 800b026:	d101      	bne.n	800b02c <HAL_TIM_ConfigClockSource+0x1c>
 800b028:	2302      	movs	r3, #2
 800b02a:	e0b4      	b.n	800b196 <HAL_TIM_ConfigClockSource+0x186>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2202      	movs	r2, #2
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	4b56      	ldr	r3, [pc, #344]	@ (800b1a0 <HAL_TIM_ConfigClockSource+0x190>)
 800b048:	4013      	ands	r3, r2
 800b04a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b064:	d03e      	beq.n	800b0e4 <HAL_TIM_ConfigClockSource+0xd4>
 800b066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b06a:	f200 8087 	bhi.w	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b072:	f000 8086 	beq.w	800b182 <HAL_TIM_ConfigClockSource+0x172>
 800b076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b07a:	d87f      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b07c:	2b70      	cmp	r3, #112	@ 0x70
 800b07e:	d01a      	beq.n	800b0b6 <HAL_TIM_ConfigClockSource+0xa6>
 800b080:	2b70      	cmp	r3, #112	@ 0x70
 800b082:	d87b      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b084:	2b60      	cmp	r3, #96	@ 0x60
 800b086:	d050      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0x11a>
 800b088:	2b60      	cmp	r3, #96	@ 0x60
 800b08a:	d877      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b08c:	2b50      	cmp	r3, #80	@ 0x50
 800b08e:	d03c      	beq.n	800b10a <HAL_TIM_ConfigClockSource+0xfa>
 800b090:	2b50      	cmp	r3, #80	@ 0x50
 800b092:	d873      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b094:	2b40      	cmp	r3, #64	@ 0x40
 800b096:	d058      	beq.n	800b14a <HAL_TIM_ConfigClockSource+0x13a>
 800b098:	2b40      	cmp	r3, #64	@ 0x40
 800b09a:	d86f      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b09c:	2b30      	cmp	r3, #48	@ 0x30
 800b09e:	d064      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x15a>
 800b0a0:	2b30      	cmp	r3, #48	@ 0x30
 800b0a2:	d86b      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	d060      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x15a>
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	d867      	bhi.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d05c      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x15a>
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d05a      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x15a>
 800b0b4:	e062      	b.n	800b17c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0c6:	f000 fc13 	bl	800b8f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b0d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	609a      	str	r2, [r3, #8]
      break;
 800b0e2:	e04f      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0f4:	f000 fbfc 	bl	800b8f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b106:	609a      	str	r2, [r3, #8]
      break;
 800b108:	e03c      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b116:	461a      	mov	r2, r3
 800b118:	f000 fb70 	bl	800b7fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2150      	movs	r1, #80	@ 0x50
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fbc9 	bl	800b8ba <TIM_ITRx_SetConfig>
      break;
 800b128:	e02c      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b136:	461a      	mov	r2, r3
 800b138:	f000 fb8f 	bl	800b85a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2160      	movs	r1, #96	@ 0x60
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fbb9 	bl	800b8ba <TIM_ITRx_SetConfig>
      break;
 800b148:	e01c      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b156:	461a      	mov	r2, r3
 800b158:	f000 fb50 	bl	800b7fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2140      	movs	r1, #64	@ 0x40
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fba9 	bl	800b8ba <TIM_ITRx_SetConfig>
      break;
 800b168:	e00c      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4619      	mov	r1, r3
 800b174:	4610      	mov	r0, r2
 800b176:	f000 fba0 	bl	800b8ba <TIM_ITRx_SetConfig>
      break;
 800b17a:	e003      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	73fb      	strb	r3, [r7, #15]
      break;
 800b180:	e000      	b.n	800b184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b194:	7bfb      	ldrb	r3, [r7, #15]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	fffeff88 	.word	0xfffeff88

0800b1a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a43      	ldr	r2, [pc, #268]	@ (800b314 <TIM_Base_SetConfig+0x120>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d013      	beq.n	800b234 <TIM_Base_SetConfig+0x40>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b212:	d00f      	beq.n	800b234 <TIM_Base_SetConfig+0x40>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a40      	ldr	r2, [pc, #256]	@ (800b318 <TIM_Base_SetConfig+0x124>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d00b      	beq.n	800b234 <TIM_Base_SetConfig+0x40>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a3f      	ldr	r2, [pc, #252]	@ (800b31c <TIM_Base_SetConfig+0x128>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d007      	beq.n	800b234 <TIM_Base_SetConfig+0x40>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a3e      	ldr	r2, [pc, #248]	@ (800b320 <TIM_Base_SetConfig+0x12c>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d003      	beq.n	800b234 <TIM_Base_SetConfig+0x40>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a3d      	ldr	r2, [pc, #244]	@ (800b324 <TIM_Base_SetConfig+0x130>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d108      	bne.n	800b246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b23a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a32      	ldr	r2, [pc, #200]	@ (800b314 <TIM_Base_SetConfig+0x120>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d02b      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b254:	d027      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a2f      	ldr	r2, [pc, #188]	@ (800b318 <TIM_Base_SetConfig+0x124>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d023      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a2e      	ldr	r2, [pc, #184]	@ (800b31c <TIM_Base_SetConfig+0x128>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d01f      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a2d      	ldr	r2, [pc, #180]	@ (800b320 <TIM_Base_SetConfig+0x12c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d01b      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a2c      	ldr	r2, [pc, #176]	@ (800b324 <TIM_Base_SetConfig+0x130>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d017      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a2b      	ldr	r2, [pc, #172]	@ (800b328 <TIM_Base_SetConfig+0x134>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d013      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a2a      	ldr	r2, [pc, #168]	@ (800b32c <TIM_Base_SetConfig+0x138>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00f      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a29      	ldr	r2, [pc, #164]	@ (800b330 <TIM_Base_SetConfig+0x13c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00b      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a28      	ldr	r2, [pc, #160]	@ (800b334 <TIM_Base_SetConfig+0x140>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d007      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a27      	ldr	r2, [pc, #156]	@ (800b338 <TIM_Base_SetConfig+0x144>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d003      	beq.n	800b2a6 <TIM_Base_SetConfig+0xb2>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a26      	ldr	r2, [pc, #152]	@ (800b33c <TIM_Base_SetConfig+0x148>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d108      	bne.n	800b2b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a0e      	ldr	r2, [pc, #56]	@ (800b314 <TIM_Base_SetConfig+0x120>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_Base_SetConfig+0xf2>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a10      	ldr	r2, [pc, #64]	@ (800b324 <TIM_Base_SetConfig+0x130>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d103      	bne.n	800b2ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	691a      	ldr	r2, [r3, #16]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f043 0204 	orr.w	r2, r3, #4
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	601a      	str	r2, [r3, #0]
}
 800b306:	bf00      	nop
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	40010000 	.word	0x40010000
 800b318:	40000400 	.word	0x40000400
 800b31c:	40000800 	.word	0x40000800
 800b320:	40000c00 	.word	0x40000c00
 800b324:	40010400 	.word	0x40010400
 800b328:	40014000 	.word	0x40014000
 800b32c:	40014400 	.word	0x40014400
 800b330:	40014800 	.word	0x40014800
 800b334:	40001800 	.word	0x40001800
 800b338:	40001c00 	.word	0x40001c00
 800b33c:	40002000 	.word	0x40002000

0800b340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	f023 0201 	bic.w	r2, r3, #1
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4b2b      	ldr	r3, [pc, #172]	@ (800b418 <TIM_OC1_SetConfig+0xd8>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f023 0303 	bic.w	r3, r3, #3
 800b376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4313      	orrs	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f023 0302 	bic.w	r3, r3, #2
 800b388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	4313      	orrs	r3, r2
 800b392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a21      	ldr	r2, [pc, #132]	@ (800b41c <TIM_OC1_SetConfig+0xdc>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d003      	beq.n	800b3a4 <TIM_OC1_SetConfig+0x64>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a20      	ldr	r2, [pc, #128]	@ (800b420 <TIM_OC1_SetConfig+0xe0>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d10c      	bne.n	800b3be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f023 0308 	bic.w	r3, r3, #8
 800b3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f023 0304 	bic.w	r3, r3, #4
 800b3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a16      	ldr	r2, [pc, #88]	@ (800b41c <TIM_OC1_SetConfig+0xdc>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d003      	beq.n	800b3ce <TIM_OC1_SetConfig+0x8e>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a15      	ldr	r2, [pc, #84]	@ (800b420 <TIM_OC1_SetConfig+0xe0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d111      	bne.n	800b3f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	621a      	str	r2, [r3, #32]
}
 800b40c:	bf00      	nop
 800b40e:	371c      	adds	r7, #28
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	fffeff8f 	.word	0xfffeff8f
 800b41c:	40010000 	.word	0x40010000
 800b420:	40010400 	.word	0x40010400

0800b424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a1b      	ldr	r3, [r3, #32]
 800b438:	f023 0210 	bic.w	r2, r3, #16
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4b2e      	ldr	r3, [pc, #184]	@ (800b508 <TIM_OC2_SetConfig+0xe4>)
 800b450:	4013      	ands	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4313      	orrs	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0320 	bic.w	r3, r3, #32
 800b46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	4313      	orrs	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a23      	ldr	r2, [pc, #140]	@ (800b50c <TIM_OC2_SetConfig+0xe8>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d003      	beq.n	800b48c <TIM_OC2_SetConfig+0x68>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a22      	ldr	r2, [pc, #136]	@ (800b510 <TIM_OC2_SetConfig+0xec>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d10d      	bne.n	800b4a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	011b      	lsls	r3, r3, #4
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a18      	ldr	r2, [pc, #96]	@ (800b50c <TIM_OC2_SetConfig+0xe8>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d003      	beq.n	800b4b8 <TIM_OC2_SetConfig+0x94>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a17      	ldr	r2, [pc, #92]	@ (800b510 <TIM_OC2_SetConfig+0xec>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d113      	bne.n	800b4e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	feff8fff 	.word	0xfeff8fff
 800b50c:	40010000 	.word	0x40010000
 800b510:	40010400 	.word	0x40010400

0800b514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b514:	b480      	push	{r7}
 800b516:	b087      	sub	sp, #28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f4 <TIM_OC3_SetConfig+0xe0>)
 800b540:	4013      	ands	r3, r2
 800b542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f023 0303 	bic.w	r3, r3, #3
 800b54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	021b      	lsls	r3, r3, #8
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	4313      	orrs	r3, r2
 800b568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a22      	ldr	r2, [pc, #136]	@ (800b5f8 <TIM_OC3_SetConfig+0xe4>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d003      	beq.n	800b57a <TIM_OC3_SetConfig+0x66>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a21      	ldr	r2, [pc, #132]	@ (800b5fc <TIM_OC3_SetConfig+0xe8>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d10d      	bne.n	800b596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a17      	ldr	r2, [pc, #92]	@ (800b5f8 <TIM_OC3_SetConfig+0xe4>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d003      	beq.n	800b5a6 <TIM_OC3_SetConfig+0x92>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a16      	ldr	r2, [pc, #88]	@ (800b5fc <TIM_OC3_SetConfig+0xe8>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d113      	bne.n	800b5ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	011b      	lsls	r3, r3, #4
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	621a      	str	r2, [r3, #32]
}
 800b5e8:	bf00      	nop
 800b5ea:	371c      	adds	r7, #28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr
 800b5f4:	fffeff8f 	.word	0xfffeff8f
 800b5f8:	40010000 	.word	0x40010000
 800b5fc:	40010400 	.word	0x40010400

0800b600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a4 <TIM_OC4_SetConfig+0xa4>)
 800b62c:	4013      	ands	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b64a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	031b      	lsls	r3, r3, #12
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	4313      	orrs	r3, r2
 800b656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a13      	ldr	r2, [pc, #76]	@ (800b6a8 <TIM_OC4_SetConfig+0xa8>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d003      	beq.n	800b668 <TIM_OC4_SetConfig+0x68>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a12      	ldr	r2, [pc, #72]	@ (800b6ac <TIM_OC4_SetConfig+0xac>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d109      	bne.n	800b67c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b66e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	695b      	ldr	r3, [r3, #20]
 800b674:	019b      	lsls	r3, r3, #6
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4313      	orrs	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	621a      	str	r2, [r3, #32]
}
 800b696:	bf00      	nop
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	feff8fff 	.word	0xfeff8fff
 800b6a8:	40010000 	.word	0x40010000
 800b6ac:	40010400 	.word	0x40010400

0800b6b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4b1b      	ldr	r3, [pc, #108]	@ (800b748 <TIM_OC5_SetConfig+0x98>)
 800b6dc:	4013      	ands	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b6f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	041b      	lsls	r3, r3, #16
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a12      	ldr	r2, [pc, #72]	@ (800b74c <TIM_OC5_SetConfig+0x9c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d003      	beq.n	800b70e <TIM_OC5_SetConfig+0x5e>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a11      	ldr	r2, [pc, #68]	@ (800b750 <TIM_OC5_SetConfig+0xa0>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d109      	bne.n	800b722 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b714:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	021b      	lsls	r3, r3, #8
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	4313      	orrs	r3, r2
 800b720:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	621a      	str	r2, [r3, #32]
}
 800b73c:	bf00      	nop
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	fffeff8f 	.word	0xfffeff8f
 800b74c:	40010000 	.word	0x40010000
 800b750:	40010400 	.word	0x40010400

0800b754 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a1b      	ldr	r3, [r3, #32]
 800b768:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7f0 <TIM_OC6_SetConfig+0x9c>)
 800b780:	4013      	ands	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	021b      	lsls	r3, r3, #8
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	051b      	lsls	r3, r3, #20
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a13      	ldr	r2, [pc, #76]	@ (800b7f4 <TIM_OC6_SetConfig+0xa0>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d003      	beq.n	800b7b4 <TIM_OC6_SetConfig+0x60>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a12      	ldr	r2, [pc, #72]	@ (800b7f8 <TIM_OC6_SetConfig+0xa4>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d109      	bne.n	800b7c8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	695b      	ldr	r3, [r3, #20]
 800b7c0:	029b      	lsls	r3, r3, #10
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	621a      	str	r2, [r3, #32]
}
 800b7e2:	bf00      	nop
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	feff8fff 	.word	0xfeff8fff
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40010400 	.word	0x40010400

0800b7fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6a1b      	ldr	r3, [r3, #32]
 800b80c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	f023 0201 	bic.w	r2, r3, #1
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	4313      	orrs	r3, r2
 800b830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f023 030a 	bic.w	r3, r3, #10
 800b838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	621a      	str	r2, [r3, #32]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b087      	sub	sp, #28
 800b85e:	af00      	add	r7, sp, #0
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	f023 0210 	bic.w	r2, r3, #16
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	031b      	lsls	r3, r3, #12
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	621a      	str	r2, [r3, #32]
}
 800b8ae:	bf00      	nop
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	f043 0307 	orr.w	r3, r3, #7
 800b8dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	609a      	str	r2, [r3, #8]
}
 800b8e4:	bf00      	nop
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b90a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	021a      	lsls	r2, r3, #8
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	431a      	orrs	r2, r3
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	4313      	orrs	r3, r2
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	609a      	str	r2, [r3, #8]
}
 800b924:	bf00      	nop
 800b926:	371c      	adds	r7, #28
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b940:	2b01      	cmp	r3, #1
 800b942:	d101      	bne.n	800b948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b944:	2302      	movs	r3, #2
 800b946:	e06d      	b.n	800ba24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2202      	movs	r2, #2
 800b954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a30      	ldr	r2, [pc, #192]	@ (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d004      	beq.n	800b97c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a2f      	ldr	r2, [pc, #188]	@ (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d108      	bne.n	800b98e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b994:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a20      	ldr	r2, [pc, #128]	@ (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d022      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ba:	d01d      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d018      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a1c      	ldr	r2, [pc, #112]	@ (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d013      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a1a      	ldr	r2, [pc, #104]	@ (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d00e      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a15      	ldr	r2, [pc, #84]	@ (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d009      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a16      	ldr	r2, [pc, #88]	@ (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d004      	beq.n	800b9f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a15      	ldr	r2, [pc, #84]	@ (800ba48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d10c      	bne.n	800ba12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	40010000 	.word	0x40010000
 800ba34:	40010400 	.word	0x40010400
 800ba38:	40000400 	.word	0x40000400
 800ba3c:	40000800 	.word	0x40000800
 800ba40:	40000c00 	.word	0x40000c00
 800ba44:	40014000 	.word	0x40014000
 800ba48:	40001800 	.word	0x40001800

0800ba4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d101      	bne.n	800ba68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba64:	2302      	movs	r3, #2
 800ba66:	e065      	b.n	800bb34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4313      	orrs	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	041b      	lsls	r3, r3, #16
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a16      	ldr	r2, [pc, #88]	@ (800bb40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d004      	beq.n	800baf6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a14      	ldr	r2, [pc, #80]	@ (800bb44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d115      	bne.n	800bb22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb00:	051b      	lsls	r3, r3, #20
 800bb02:	4313      	orrs	r3, r2
 800bb04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	69db      	ldr	r3, [r3, #28]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400

0800bb48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d101      	bne.n	800bb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e040      	b.n	800bc18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7f7 f840 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2224      	movs	r2, #36	@ 0x24
 800bbb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f022 0201 	bic.w	r2, r2, #1
 800bbc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d002      	beq.n	800bbd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fe66 	bl	800c89c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fbff 	bl	800c3d4 <UART_SetConfig>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d101      	bne.n	800bbe0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e01b      	b.n	800bc18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bbee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bbfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f042 0201 	orr.w	r2, r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fee5 	bl	800c9e0 <UART_CheckIdleState>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08a      	sub	sp, #40	@ 0x28
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc34:	2b20      	cmp	r3, #32
 800bc36:	d177      	bne.n	800bd28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d002      	beq.n	800bc44 <HAL_UART_Transmit+0x24>
 800bc3e:	88fb      	ldrh	r3, [r7, #6]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e070      	b.n	800bd2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2221      	movs	r2, #33	@ 0x21
 800bc54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc56:	f7f7 f903 	bl	8002e60 <HAL_GetTick>
 800bc5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	88fa      	ldrh	r2, [r7, #6]
 800bc60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	88fa      	ldrh	r2, [r7, #6]
 800bc68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc74:	d108      	bne.n	800bc88 <HAL_UART_Transmit+0x68>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d104      	bne.n	800bc88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	61bb      	str	r3, [r7, #24]
 800bc86:	e003      	b.n	800bc90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bc90:	e02f      	b.n	800bcf2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2180      	movs	r1, #128	@ 0x80
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f000 fef6 	bl	800ca8e <UART_WaitOnFlagUntilTimeout>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d004      	beq.n	800bcb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	e03b      	b.n	800bd2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10b      	bne.n	800bcd0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	3302      	adds	r3, #2
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	e007      	b.n	800bce0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	781a      	ldrb	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	3b01      	subs	r3, #1
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1c9      	bne.n	800bc92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2200      	movs	r2, #0
 800bd06:	2140      	movs	r1, #64	@ 0x40
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 fec0 	bl	800ca8e <UART_WaitOnFlagUntilTimeout>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2220      	movs	r2, #32
 800bd18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e005      	b.n	800bd2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2220      	movs	r2, #32
 800bd22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	e000      	b.n	800bd2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800bd28:	2302      	movs	r3, #2
  }
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b08a      	sub	sp, #40	@ 0x28
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd46:	2b20      	cmp	r3, #32
 800bd48:	d132      	bne.n	800bdb0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <HAL_UART_Receive_IT+0x24>
 800bd50:	88fb      	ldrh	r3, [r7, #6]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e02b      	b.n	800bdb2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d018      	beq.n	800bda0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bd82:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8c:	623b      	str	r3, [r7, #32]
 800bd8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	69f9      	ldr	r1, [r7, #28]
 800bd92:	6a3a      	ldr	r2, [r7, #32]
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e6      	bne.n	800bd6e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bda0:	88fb      	ldrh	r3, [r7, #6]
 800bda2:	461a      	mov	r2, r3
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f000 fede 	bl	800cb68 <UART_Start_Receive_IT>
 800bdac:	4603      	mov	r3, r0
 800bdae:	e000      	b.n	800bdb2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800bdb0:	2302      	movs	r3, #2
  }
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3728      	adds	r7, #40	@ 0x28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b0ba      	sub	sp, #232	@ 0xe8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bde2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bde6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bdea:	4013      	ands	r3, r2
 800bdec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bdf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d115      	bne.n	800be24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bdf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00f      	beq.n	800be24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800be04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d009      	beq.n	800be24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 82b1 	beq.w	800c37c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	4798      	blx	r3
      }
      return;
 800be22:	e2ab      	b.n	800c37c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 8117 	beq.w	800c05c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800be2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d106      	bne.n	800be48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800be3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800be3e:	4b85      	ldr	r3, [pc, #532]	@ (800c054 <HAL_UART_IRQHandler+0x298>)
 800be40:	4013      	ands	r3, r2
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 810a 	beq.w	800c05c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b00      	cmp	r3, #0
 800be52:	d011      	beq.n	800be78 <HAL_UART_IRQHandler+0xbc>
 800be54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2201      	movs	r2, #1
 800be66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be6e:	f043 0201 	orr.w	r2, r3, #1
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b00      	cmp	r3, #0
 800be82:	d011      	beq.n	800bea8 <HAL_UART_IRQHandler+0xec>
 800be84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2202      	movs	r2, #2
 800be96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be9e:	f043 0204 	orr.w	r2, r3, #4
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d011      	beq.n	800bed8 <HAL_UART_IRQHandler+0x11c>
 800beb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2204      	movs	r2, #4
 800bec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bece:	f043 0202 	orr.w	r2, r3, #2
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bedc:	f003 0308 	and.w	r3, r3, #8
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d017      	beq.n	800bf14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bee8:	f003 0320 	and.w	r3, r3, #32
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00b      	beq.n	800bf14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2208      	movs	r2, #8
 800bf02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf0a:	f043 0208 	orr.w	r2, r3, #8
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d012      	beq.n	800bf46 <HAL_UART_IRQHandler+0x18a>
 800bf20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00c      	beq.n	800bf46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf3c:	f043 0220 	orr.w	r2, r3, #32
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 8217 	beq.w	800c380 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bf52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf56:	f003 0320 	and.w	r3, r3, #32
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00d      	beq.n	800bf7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bf5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d007      	beq.n	800bf7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8e:	2b40      	cmp	r3, #64	@ 0x40
 800bf90:	d005      	beq.n	800bf9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d04f      	beq.n	800c03e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fea8 	bl	800ccf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfae:	2b40      	cmp	r3, #64	@ 0x40
 800bfb0:	d141      	bne.n	800c036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bfc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bfde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bfe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bfea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bfee:	e841 2300 	strex	r3, r2, [r1]
 800bff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1d9      	bne.n	800bfb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c002:	2b00      	cmp	r3, #0
 800c004:	d013      	beq.n	800c02e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c00a:	4a13      	ldr	r2, [pc, #76]	@ (800c058 <HAL_UART_IRQHandler+0x29c>)
 800c00c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c012:	4618      	mov	r0, r3
 800c014:	f7f7 fcaa 	bl	800396c <HAL_DMA_Abort_IT>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d017      	beq.n	800c04e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c028:	4610      	mov	r0, r2
 800c02a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c02c:	e00f      	b.n	800c04e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f9ba 	bl	800c3a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c034:	e00b      	b.n	800c04e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f9b6 	bl	800c3a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c03c:	e007      	b.n	800c04e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9b2 	bl	800c3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c04c:	e198      	b.n	800c380 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c04e:	bf00      	nop
    return;
 800c050:	e196      	b.n	800c380 <HAL_UART_IRQHandler+0x5c4>
 800c052:	bf00      	nop
 800c054:	04000120 	.word	0x04000120
 800c058:	0800cdbd 	.word	0x0800cdbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c060:	2b01      	cmp	r3, #1
 800c062:	f040 8166 	bne.w	800c332 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c06a:	f003 0310 	and.w	r3, r3, #16
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 815f 	beq.w	800c332 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c078:	f003 0310 	and.w	r3, r3, #16
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 8158 	beq.w	800c332 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2210      	movs	r2, #16
 800c088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c094:	2b40      	cmp	r3, #64	@ 0x40
 800c096:	f040 80d0 	bne.w	800c23a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 80ab 	beq.w	800c206 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c0b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	f080 80a3 	bcs.w	800c206 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c0c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0ce:	69db      	ldr	r3, [r3, #28]
 800c0d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0d4:	f000 8086 	beq.w	800c1e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c106:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c10e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c112:	e841 2300 	strex	r3, r2, [r1]
 800c116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c11a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1da      	bne.n	800c0d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c134:	f023 0301 	bic.w	r3, r3, #1
 800c138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3308      	adds	r3, #8
 800c142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c14a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c14e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e1      	bne.n	800c122 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c16e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3308      	adds	r3, #8
 800c17e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e3      	bne.n	800c15e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2220      	movs	r2, #32
 800c19a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ac:	e853 3f00 	ldrex	r3, [r3]
 800c1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1b4:	f023 0310 	bic.w	r3, r3, #16
 800c1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c1cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1e4      	bne.n	800c1a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7f7 fb54 	bl	800388c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f8dc 	bl	800c3bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c204:	e0be      	b.n	800c384 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c20c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c210:	429a      	cmp	r2, r3
 800c212:	f040 80b7 	bne.w	800c384 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c21a:	69db      	ldr	r3, [r3, #28]
 800c21c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c220:	f040 80b0 	bne.w	800c384 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f8c2 	bl	800c3bc <HAL_UARTEx_RxEventCallback>
      return;
 800c238:	e0a4      	b.n	800c384 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c246:	b29b      	uxth	r3, r3
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c254:	b29b      	uxth	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8096 	beq.w	800c388 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800c25c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 8091 	beq.w	800c388 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c276:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c27a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c288:	647b      	str	r3, [r7, #68]	@ 0x44
 800c28a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e4      	bne.n	800c266 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3308      	adds	r3, #8
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a6:	e853 3f00 	ldrex	r3, [r3]
 800c2aa:	623b      	str	r3, [r7, #32]
   return(result);
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	f023 0301 	bic.w	r3, r3, #1
 800c2b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c2c0:	633a      	str	r2, [r7, #48]	@ 0x30
 800c2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2c8:	e841 2300 	strex	r3, r2, [r1]
 800c2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e3      	bne.n	800c29c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	e853 3f00 	ldrex	r3, [r3]
 800c2f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f023 0310 	bic.w	r3, r3, #16
 800c2fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	461a      	mov	r2, r3
 800c306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c30a:	61fb      	str	r3, [r7, #28]
 800c30c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30e:	69b9      	ldr	r1, [r7, #24]
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	e841 2300 	strex	r3, r2, [r1]
 800c316:	617b      	str	r3, [r7, #20]
   return(result);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1e4      	bne.n	800c2e8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2202      	movs	r2, #2
 800c322:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f846 	bl	800c3bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c330:	e02a      	b.n	800c388 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00e      	beq.n	800c35c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c346:	2b00      	cmp	r3, #0
 800c348:	d008      	beq.n	800c35c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d01c      	beq.n	800c38c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
    }
    return;
 800c35a:	e017      	b.n	800c38c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c364:	2b00      	cmp	r3, #0
 800c366:	d012      	beq.n	800c38e <HAL_UART_IRQHandler+0x5d2>
 800c368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00c      	beq.n	800c38e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fd33 	bl	800cde0 <UART_EndTransmit_IT>
    return;
 800c37a:	e008      	b.n	800c38e <HAL_UART_IRQHandler+0x5d2>
      return;
 800c37c:	bf00      	nop
 800c37e:	e006      	b.n	800c38e <HAL_UART_IRQHandler+0x5d2>
    return;
 800c380:	bf00      	nop
 800c382:	e004      	b.n	800c38e <HAL_UART_IRQHandler+0x5d2>
      return;
 800c384:	bf00      	nop
 800c386:	e002      	b.n	800c38e <HAL_UART_IRQHandler+0x5d2>
      return;
 800c388:	bf00      	nop
 800c38a:	e000      	b.n	800c38e <HAL_UART_IRQHandler+0x5d2>
    return;
 800c38c:	bf00      	nop
  }

}
 800c38e:	37e8      	adds	r7, #232	@ 0xe8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	689a      	ldr	r2, [r3, #8]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	431a      	orrs	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	431a      	orrs	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	4ba6      	ldr	r3, [pc, #664]	@ (800c698 <UART_SetConfig+0x2c4>)
 800c400:	4013      	ands	r3, r2
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	6812      	ldr	r2, [r2, #0]
 800c406:	6979      	ldr	r1, [r7, #20]
 800c408:	430b      	orrs	r3, r1
 800c40a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	430a      	orrs	r2, r1
 800c420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	4313      	orrs	r3, r2
 800c430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	697a      	ldr	r2, [r7, #20]
 800c442:	430a      	orrs	r2, r1
 800c444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a94      	ldr	r2, [pc, #592]	@ (800c69c <UART_SetConfig+0x2c8>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d120      	bne.n	800c492 <UART_SetConfig+0xbe>
 800c450:	4b93      	ldr	r3, [pc, #588]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c456:	f003 0303 	and.w	r3, r3, #3
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d816      	bhi.n	800c48c <UART_SetConfig+0xb8>
 800c45e:	a201      	add	r2, pc, #4	@ (adr r2, 800c464 <UART_SetConfig+0x90>)
 800c460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c464:	0800c475 	.word	0x0800c475
 800c468:	0800c481 	.word	0x0800c481
 800c46c:	0800c47b 	.word	0x0800c47b
 800c470:	0800c487 	.word	0x0800c487
 800c474:	2301      	movs	r3, #1
 800c476:	77fb      	strb	r3, [r7, #31]
 800c478:	e150      	b.n	800c71c <UART_SetConfig+0x348>
 800c47a:	2302      	movs	r3, #2
 800c47c:	77fb      	strb	r3, [r7, #31]
 800c47e:	e14d      	b.n	800c71c <UART_SetConfig+0x348>
 800c480:	2304      	movs	r3, #4
 800c482:	77fb      	strb	r3, [r7, #31]
 800c484:	e14a      	b.n	800c71c <UART_SetConfig+0x348>
 800c486:	2308      	movs	r3, #8
 800c488:	77fb      	strb	r3, [r7, #31]
 800c48a:	e147      	b.n	800c71c <UART_SetConfig+0x348>
 800c48c:	2310      	movs	r3, #16
 800c48e:	77fb      	strb	r3, [r7, #31]
 800c490:	e144      	b.n	800c71c <UART_SetConfig+0x348>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a83      	ldr	r2, [pc, #524]	@ (800c6a4 <UART_SetConfig+0x2d0>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d132      	bne.n	800c502 <UART_SetConfig+0x12e>
 800c49c:	4b80      	ldr	r3, [pc, #512]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a2:	f003 030c 	and.w	r3, r3, #12
 800c4a6:	2b0c      	cmp	r3, #12
 800c4a8:	d828      	bhi.n	800c4fc <UART_SetConfig+0x128>
 800c4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b0 <UART_SetConfig+0xdc>)
 800c4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b0:	0800c4e5 	.word	0x0800c4e5
 800c4b4:	0800c4fd 	.word	0x0800c4fd
 800c4b8:	0800c4fd 	.word	0x0800c4fd
 800c4bc:	0800c4fd 	.word	0x0800c4fd
 800c4c0:	0800c4f1 	.word	0x0800c4f1
 800c4c4:	0800c4fd 	.word	0x0800c4fd
 800c4c8:	0800c4fd 	.word	0x0800c4fd
 800c4cc:	0800c4fd 	.word	0x0800c4fd
 800c4d0:	0800c4eb 	.word	0x0800c4eb
 800c4d4:	0800c4fd 	.word	0x0800c4fd
 800c4d8:	0800c4fd 	.word	0x0800c4fd
 800c4dc:	0800c4fd 	.word	0x0800c4fd
 800c4e0:	0800c4f7 	.word	0x0800c4f7
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	77fb      	strb	r3, [r7, #31]
 800c4e8:	e118      	b.n	800c71c <UART_SetConfig+0x348>
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	77fb      	strb	r3, [r7, #31]
 800c4ee:	e115      	b.n	800c71c <UART_SetConfig+0x348>
 800c4f0:	2304      	movs	r3, #4
 800c4f2:	77fb      	strb	r3, [r7, #31]
 800c4f4:	e112      	b.n	800c71c <UART_SetConfig+0x348>
 800c4f6:	2308      	movs	r3, #8
 800c4f8:	77fb      	strb	r3, [r7, #31]
 800c4fa:	e10f      	b.n	800c71c <UART_SetConfig+0x348>
 800c4fc:	2310      	movs	r3, #16
 800c4fe:	77fb      	strb	r3, [r7, #31]
 800c500:	e10c      	b.n	800c71c <UART_SetConfig+0x348>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a68      	ldr	r2, [pc, #416]	@ (800c6a8 <UART_SetConfig+0x2d4>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d120      	bne.n	800c54e <UART_SetConfig+0x17a>
 800c50c:	4b64      	ldr	r3, [pc, #400]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c512:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c516:	2b30      	cmp	r3, #48	@ 0x30
 800c518:	d013      	beq.n	800c542 <UART_SetConfig+0x16e>
 800c51a:	2b30      	cmp	r3, #48	@ 0x30
 800c51c:	d814      	bhi.n	800c548 <UART_SetConfig+0x174>
 800c51e:	2b20      	cmp	r3, #32
 800c520:	d009      	beq.n	800c536 <UART_SetConfig+0x162>
 800c522:	2b20      	cmp	r3, #32
 800c524:	d810      	bhi.n	800c548 <UART_SetConfig+0x174>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <UART_SetConfig+0x15c>
 800c52a:	2b10      	cmp	r3, #16
 800c52c:	d006      	beq.n	800c53c <UART_SetConfig+0x168>
 800c52e:	e00b      	b.n	800c548 <UART_SetConfig+0x174>
 800c530:	2300      	movs	r3, #0
 800c532:	77fb      	strb	r3, [r7, #31]
 800c534:	e0f2      	b.n	800c71c <UART_SetConfig+0x348>
 800c536:	2302      	movs	r3, #2
 800c538:	77fb      	strb	r3, [r7, #31]
 800c53a:	e0ef      	b.n	800c71c <UART_SetConfig+0x348>
 800c53c:	2304      	movs	r3, #4
 800c53e:	77fb      	strb	r3, [r7, #31]
 800c540:	e0ec      	b.n	800c71c <UART_SetConfig+0x348>
 800c542:	2308      	movs	r3, #8
 800c544:	77fb      	strb	r3, [r7, #31]
 800c546:	e0e9      	b.n	800c71c <UART_SetConfig+0x348>
 800c548:	2310      	movs	r3, #16
 800c54a:	77fb      	strb	r3, [r7, #31]
 800c54c:	e0e6      	b.n	800c71c <UART_SetConfig+0x348>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a56      	ldr	r2, [pc, #344]	@ (800c6ac <UART_SetConfig+0x2d8>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d120      	bne.n	800c59a <UART_SetConfig+0x1c6>
 800c558:	4b51      	ldr	r3, [pc, #324]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c55e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c562:	2bc0      	cmp	r3, #192	@ 0xc0
 800c564:	d013      	beq.n	800c58e <UART_SetConfig+0x1ba>
 800c566:	2bc0      	cmp	r3, #192	@ 0xc0
 800c568:	d814      	bhi.n	800c594 <UART_SetConfig+0x1c0>
 800c56a:	2b80      	cmp	r3, #128	@ 0x80
 800c56c:	d009      	beq.n	800c582 <UART_SetConfig+0x1ae>
 800c56e:	2b80      	cmp	r3, #128	@ 0x80
 800c570:	d810      	bhi.n	800c594 <UART_SetConfig+0x1c0>
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <UART_SetConfig+0x1a8>
 800c576:	2b40      	cmp	r3, #64	@ 0x40
 800c578:	d006      	beq.n	800c588 <UART_SetConfig+0x1b4>
 800c57a:	e00b      	b.n	800c594 <UART_SetConfig+0x1c0>
 800c57c:	2300      	movs	r3, #0
 800c57e:	77fb      	strb	r3, [r7, #31]
 800c580:	e0cc      	b.n	800c71c <UART_SetConfig+0x348>
 800c582:	2302      	movs	r3, #2
 800c584:	77fb      	strb	r3, [r7, #31]
 800c586:	e0c9      	b.n	800c71c <UART_SetConfig+0x348>
 800c588:	2304      	movs	r3, #4
 800c58a:	77fb      	strb	r3, [r7, #31]
 800c58c:	e0c6      	b.n	800c71c <UART_SetConfig+0x348>
 800c58e:	2308      	movs	r3, #8
 800c590:	77fb      	strb	r3, [r7, #31]
 800c592:	e0c3      	b.n	800c71c <UART_SetConfig+0x348>
 800c594:	2310      	movs	r3, #16
 800c596:	77fb      	strb	r3, [r7, #31]
 800c598:	e0c0      	b.n	800c71c <UART_SetConfig+0x348>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a44      	ldr	r2, [pc, #272]	@ (800c6b0 <UART_SetConfig+0x2dc>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d125      	bne.n	800c5f0 <UART_SetConfig+0x21c>
 800c5a4:	4b3e      	ldr	r3, [pc, #248]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5b2:	d017      	beq.n	800c5e4 <UART_SetConfig+0x210>
 800c5b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5b8:	d817      	bhi.n	800c5ea <UART_SetConfig+0x216>
 800c5ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5be:	d00b      	beq.n	800c5d8 <UART_SetConfig+0x204>
 800c5c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5c4:	d811      	bhi.n	800c5ea <UART_SetConfig+0x216>
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <UART_SetConfig+0x1fe>
 800c5ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5ce:	d006      	beq.n	800c5de <UART_SetConfig+0x20a>
 800c5d0:	e00b      	b.n	800c5ea <UART_SetConfig+0x216>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	77fb      	strb	r3, [r7, #31]
 800c5d6:	e0a1      	b.n	800c71c <UART_SetConfig+0x348>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	77fb      	strb	r3, [r7, #31]
 800c5dc:	e09e      	b.n	800c71c <UART_SetConfig+0x348>
 800c5de:	2304      	movs	r3, #4
 800c5e0:	77fb      	strb	r3, [r7, #31]
 800c5e2:	e09b      	b.n	800c71c <UART_SetConfig+0x348>
 800c5e4:	2308      	movs	r3, #8
 800c5e6:	77fb      	strb	r3, [r7, #31]
 800c5e8:	e098      	b.n	800c71c <UART_SetConfig+0x348>
 800c5ea:	2310      	movs	r3, #16
 800c5ec:	77fb      	strb	r3, [r7, #31]
 800c5ee:	e095      	b.n	800c71c <UART_SetConfig+0x348>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c6b4 <UART_SetConfig+0x2e0>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d125      	bne.n	800c646 <UART_SetConfig+0x272>
 800c5fa:	4b29      	ldr	r3, [pc, #164]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c600:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c608:	d017      	beq.n	800c63a <UART_SetConfig+0x266>
 800c60a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c60e:	d817      	bhi.n	800c640 <UART_SetConfig+0x26c>
 800c610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c614:	d00b      	beq.n	800c62e <UART_SetConfig+0x25a>
 800c616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c61a:	d811      	bhi.n	800c640 <UART_SetConfig+0x26c>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <UART_SetConfig+0x254>
 800c620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c624:	d006      	beq.n	800c634 <UART_SetConfig+0x260>
 800c626:	e00b      	b.n	800c640 <UART_SetConfig+0x26c>
 800c628:	2301      	movs	r3, #1
 800c62a:	77fb      	strb	r3, [r7, #31]
 800c62c:	e076      	b.n	800c71c <UART_SetConfig+0x348>
 800c62e:	2302      	movs	r3, #2
 800c630:	77fb      	strb	r3, [r7, #31]
 800c632:	e073      	b.n	800c71c <UART_SetConfig+0x348>
 800c634:	2304      	movs	r3, #4
 800c636:	77fb      	strb	r3, [r7, #31]
 800c638:	e070      	b.n	800c71c <UART_SetConfig+0x348>
 800c63a:	2308      	movs	r3, #8
 800c63c:	77fb      	strb	r3, [r7, #31]
 800c63e:	e06d      	b.n	800c71c <UART_SetConfig+0x348>
 800c640:	2310      	movs	r3, #16
 800c642:	77fb      	strb	r3, [r7, #31]
 800c644:	e06a      	b.n	800c71c <UART_SetConfig+0x348>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6b8 <UART_SetConfig+0x2e4>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d138      	bne.n	800c6c2 <UART_SetConfig+0x2ee>
 800c650:	4b13      	ldr	r3, [pc, #76]	@ (800c6a0 <UART_SetConfig+0x2cc>)
 800c652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c656:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c65a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c65e:	d017      	beq.n	800c690 <UART_SetConfig+0x2bc>
 800c660:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c664:	d82a      	bhi.n	800c6bc <UART_SetConfig+0x2e8>
 800c666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c66a:	d00b      	beq.n	800c684 <UART_SetConfig+0x2b0>
 800c66c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c670:	d824      	bhi.n	800c6bc <UART_SetConfig+0x2e8>
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <UART_SetConfig+0x2aa>
 800c676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c67a:	d006      	beq.n	800c68a <UART_SetConfig+0x2b6>
 800c67c:	e01e      	b.n	800c6bc <UART_SetConfig+0x2e8>
 800c67e:	2300      	movs	r3, #0
 800c680:	77fb      	strb	r3, [r7, #31]
 800c682:	e04b      	b.n	800c71c <UART_SetConfig+0x348>
 800c684:	2302      	movs	r3, #2
 800c686:	77fb      	strb	r3, [r7, #31]
 800c688:	e048      	b.n	800c71c <UART_SetConfig+0x348>
 800c68a:	2304      	movs	r3, #4
 800c68c:	77fb      	strb	r3, [r7, #31]
 800c68e:	e045      	b.n	800c71c <UART_SetConfig+0x348>
 800c690:	2308      	movs	r3, #8
 800c692:	77fb      	strb	r3, [r7, #31]
 800c694:	e042      	b.n	800c71c <UART_SetConfig+0x348>
 800c696:	bf00      	nop
 800c698:	efff69f3 	.word	0xefff69f3
 800c69c:	40011000 	.word	0x40011000
 800c6a0:	40023800 	.word	0x40023800
 800c6a4:	40004400 	.word	0x40004400
 800c6a8:	40004800 	.word	0x40004800
 800c6ac:	40004c00 	.word	0x40004c00
 800c6b0:	40005000 	.word	0x40005000
 800c6b4:	40011400 	.word	0x40011400
 800c6b8:	40007800 	.word	0x40007800
 800c6bc:	2310      	movs	r3, #16
 800c6be:	77fb      	strb	r3, [r7, #31]
 800c6c0:	e02c      	b.n	800c71c <UART_SetConfig+0x348>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a72      	ldr	r2, [pc, #456]	@ (800c890 <UART_SetConfig+0x4bc>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d125      	bne.n	800c718 <UART_SetConfig+0x344>
 800c6cc:	4b71      	ldr	r3, [pc, #452]	@ (800c894 <UART_SetConfig+0x4c0>)
 800c6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c6d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c6da:	d017      	beq.n	800c70c <UART_SetConfig+0x338>
 800c6dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c6e0:	d817      	bhi.n	800c712 <UART_SetConfig+0x33e>
 800c6e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6e6:	d00b      	beq.n	800c700 <UART_SetConfig+0x32c>
 800c6e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6ec:	d811      	bhi.n	800c712 <UART_SetConfig+0x33e>
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <UART_SetConfig+0x326>
 800c6f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6f6:	d006      	beq.n	800c706 <UART_SetConfig+0x332>
 800c6f8:	e00b      	b.n	800c712 <UART_SetConfig+0x33e>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	77fb      	strb	r3, [r7, #31]
 800c6fe:	e00d      	b.n	800c71c <UART_SetConfig+0x348>
 800c700:	2302      	movs	r3, #2
 800c702:	77fb      	strb	r3, [r7, #31]
 800c704:	e00a      	b.n	800c71c <UART_SetConfig+0x348>
 800c706:	2304      	movs	r3, #4
 800c708:	77fb      	strb	r3, [r7, #31]
 800c70a:	e007      	b.n	800c71c <UART_SetConfig+0x348>
 800c70c:	2308      	movs	r3, #8
 800c70e:	77fb      	strb	r3, [r7, #31]
 800c710:	e004      	b.n	800c71c <UART_SetConfig+0x348>
 800c712:	2310      	movs	r3, #16
 800c714:	77fb      	strb	r3, [r7, #31]
 800c716:	e001      	b.n	800c71c <UART_SetConfig+0x348>
 800c718:	2310      	movs	r3, #16
 800c71a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c724:	d15b      	bne.n	800c7de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c726:	7ffb      	ldrb	r3, [r7, #31]
 800c728:	2b08      	cmp	r3, #8
 800c72a:	d828      	bhi.n	800c77e <UART_SetConfig+0x3aa>
 800c72c:	a201      	add	r2, pc, #4	@ (adr r2, 800c734 <UART_SetConfig+0x360>)
 800c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c732:	bf00      	nop
 800c734:	0800c759 	.word	0x0800c759
 800c738:	0800c761 	.word	0x0800c761
 800c73c:	0800c769 	.word	0x0800c769
 800c740:	0800c77f 	.word	0x0800c77f
 800c744:	0800c76f 	.word	0x0800c76f
 800c748:	0800c77f 	.word	0x0800c77f
 800c74c:	0800c77f 	.word	0x0800c77f
 800c750:	0800c77f 	.word	0x0800c77f
 800c754:	0800c777 	.word	0x0800c777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c758:	f7fb fb40 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 800c75c:	61b8      	str	r0, [r7, #24]
        break;
 800c75e:	e013      	b.n	800c788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c760:	f7fb fb50 	bl	8007e04 <HAL_RCC_GetPCLK2Freq>
 800c764:	61b8      	str	r0, [r7, #24]
        break;
 800c766:	e00f      	b.n	800c788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c768:	4b4b      	ldr	r3, [pc, #300]	@ (800c898 <UART_SetConfig+0x4c4>)
 800c76a:	61bb      	str	r3, [r7, #24]
        break;
 800c76c:	e00c      	b.n	800c788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c76e:	f7fb fa63 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 800c772:	61b8      	str	r0, [r7, #24]
        break;
 800c774:	e008      	b.n	800c788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c77a:	61bb      	str	r3, [r7, #24]
        break;
 800c77c:	e004      	b.n	800c788 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c77e:	2300      	movs	r3, #0
 800c780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	77bb      	strb	r3, [r7, #30]
        break;
 800c786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d074      	beq.n	800c878 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	005a      	lsls	r2, r3, #1
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	085b      	lsrs	r3, r3, #1
 800c798:	441a      	add	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	2b0f      	cmp	r3, #15
 800c7a8:	d916      	bls.n	800c7d8 <UART_SetConfig+0x404>
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7b0:	d212      	bcs.n	800c7d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	f023 030f 	bic.w	r3, r3, #15
 800c7ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	085b      	lsrs	r3, r3, #1
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	f003 0307 	and.w	r3, r3, #7
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	89fa      	ldrh	r2, [r7, #14]
 800c7d4:	60da      	str	r2, [r3, #12]
 800c7d6:	e04f      	b.n	800c878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	77bb      	strb	r3, [r7, #30]
 800c7dc:	e04c      	b.n	800c878 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7de:	7ffb      	ldrb	r3, [r7, #31]
 800c7e0:	2b08      	cmp	r3, #8
 800c7e2:	d828      	bhi.n	800c836 <UART_SetConfig+0x462>
 800c7e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ec <UART_SetConfig+0x418>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c811 	.word	0x0800c811
 800c7f0:	0800c819 	.word	0x0800c819
 800c7f4:	0800c821 	.word	0x0800c821
 800c7f8:	0800c837 	.word	0x0800c837
 800c7fc:	0800c827 	.word	0x0800c827
 800c800:	0800c837 	.word	0x0800c837
 800c804:	0800c837 	.word	0x0800c837
 800c808:	0800c837 	.word	0x0800c837
 800c80c:	0800c82f 	.word	0x0800c82f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c810:	f7fb fae4 	bl	8007ddc <HAL_RCC_GetPCLK1Freq>
 800c814:	61b8      	str	r0, [r7, #24]
        break;
 800c816:	e013      	b.n	800c840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c818:	f7fb faf4 	bl	8007e04 <HAL_RCC_GetPCLK2Freq>
 800c81c:	61b8      	str	r0, [r7, #24]
        break;
 800c81e:	e00f      	b.n	800c840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c820:	4b1d      	ldr	r3, [pc, #116]	@ (800c898 <UART_SetConfig+0x4c4>)
 800c822:	61bb      	str	r3, [r7, #24]
        break;
 800c824:	e00c      	b.n	800c840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c826:	f7fb fa07 	bl	8007c38 <HAL_RCC_GetSysClockFreq>
 800c82a:	61b8      	str	r0, [r7, #24]
        break;
 800c82c:	e008      	b.n	800c840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c82e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c832:	61bb      	str	r3, [r7, #24]
        break;
 800c834:	e004      	b.n	800c840 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c836:	2300      	movs	r3, #0
 800c838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c83a:	2301      	movs	r3, #1
 800c83c:	77bb      	strb	r3, [r7, #30]
        break;
 800c83e:	bf00      	nop
    }

    if (pclk != 0U)
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d018      	beq.n	800c878 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	085a      	lsrs	r2, r3, #1
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	441a      	add	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	fbb2 f3f3 	udiv	r3, r2, r3
 800c858:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	2b0f      	cmp	r3, #15
 800c85e:	d909      	bls.n	800c874 <UART_SetConfig+0x4a0>
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c866:	d205      	bcs.n	800c874 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	60da      	str	r2, [r3, #12]
 800c872:	e001      	b.n	800c878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c884:	7fbb      	ldrb	r3, [r7, #30]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3720      	adds	r7, #32
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	40007c00 	.word	0x40007c00
 800c894:	40023800 	.word	0x40023800
 800c898:	00f42400 	.word	0x00f42400

0800c89c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a8:	f003 0308 	and.w	r3, r3, #8
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00a      	beq.n	800c8c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	430a      	orrs	r2, r1
 800c8e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00a      	beq.n	800c90a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	430a      	orrs	r2, r1
 800c908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90e:	f003 0304 	and.w	r3, r3, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	430a      	orrs	r2, r1
 800c92a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c930:	f003 0310 	and.w	r3, r3, #16
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c952:	f003 0320 	and.w	r3, r3, #32
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	430a      	orrs	r2, r1
 800c96e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01a      	beq.n	800c9b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c99a:	d10a      	bne.n	800c9b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00a      	beq.n	800c9d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	605a      	str	r2, [r3, #4]
  }
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b08c      	sub	sp, #48	@ 0x30
 800c9e4:	af02      	add	r7, sp, #8
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9f0:	f7f6 fa36 	bl	8002e60 <HAL_GetTick>
 800c9f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 0308 	and.w	r3, r3, #8
 800ca00:	2b08      	cmp	r3, #8
 800ca02:	d12e      	bne.n	800ca62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 f83b 	bl	800ca8e <UART_WaitOnFlagUntilTimeout>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d021      	beq.n	800ca62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	e853 3f00 	ldrex	r3, [r3]
 800ca2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca32:	623b      	str	r3, [r7, #32]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	61fb      	str	r3, [r7, #28]
 800ca3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca40:	69b9      	ldr	r1, [r7, #24]
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	e841 2300 	strex	r3, r2, [r1]
 800ca48:	617b      	str	r3, [r7, #20]
   return(result);
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1e6      	bne.n	800ca1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2220      	movs	r2, #32
 800ca54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e011      	b.n	800ca86 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2220      	movs	r2, #32
 800ca66:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3728      	adds	r7, #40	@ 0x28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b084      	sub	sp, #16
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	60f8      	str	r0, [r7, #12]
 800ca96:	60b9      	str	r1, [r7, #8]
 800ca98:	603b      	str	r3, [r7, #0]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca9e:	e04f      	b.n	800cb40 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d04b      	beq.n	800cb40 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800caa8:	f7f6 f9da 	bl	8002e60 <HAL_GetTick>
 800caac:	4602      	mov	r2, r0
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	69ba      	ldr	r2, [r7, #24]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d302      	bcc.n	800cabe <UART_WaitOnFlagUntilTimeout+0x30>
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e04e      	b.n	800cb60 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d037      	beq.n	800cb40 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	2b80      	cmp	r3, #128	@ 0x80
 800cad4:	d034      	beq.n	800cb40 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2b40      	cmp	r3, #64	@ 0x40
 800cada:	d031      	beq.n	800cb40 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	69db      	ldr	r3, [r3, #28]
 800cae2:	f003 0308 	and.w	r3, r3, #8
 800cae6:	2b08      	cmp	r3, #8
 800cae8:	d110      	bne.n	800cb0c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2208      	movs	r2, #8
 800caf0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 f8fe 	bl	800ccf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2208      	movs	r2, #8
 800cafc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e029      	b.n	800cb60 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb1a:	d111      	bne.n	800cb40 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 f8e4 	bl	800ccf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2220      	movs	r2, #32
 800cb30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	e00f      	b.n	800cb60 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	69da      	ldr	r2, [r3, #28]
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	4013      	ands	r3, r2
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	bf0c      	ite	eq
 800cb50:	2301      	moveq	r3, #1
 800cb52:	2300      	movne	r3, #0
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	461a      	mov	r2, r3
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d0a0      	beq.n	800caa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b097      	sub	sp, #92	@ 0x5c
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	4613      	mov	r3, r2
 800cb74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	88fa      	ldrh	r2, [r7, #6]
 800cb80:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	88fa      	ldrh	r2, [r7, #6]
 800cb88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb9a:	d10e      	bne.n	800cbba <UART_Start_Receive_IT+0x52>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <UART_Start_Receive_IT+0x48>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cbaa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cbae:	e02d      	b.n	800cc0c <UART_Start_Receive_IT+0xa4>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	22ff      	movs	r2, #255	@ 0xff
 800cbb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cbb8:	e028      	b.n	800cc0c <UART_Start_Receive_IT+0xa4>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10d      	bne.n	800cbde <UART_Start_Receive_IT+0x76>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d104      	bne.n	800cbd4 <UART_Start_Receive_IT+0x6c>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	22ff      	movs	r2, #255	@ 0xff
 800cbce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cbd2:	e01b      	b.n	800cc0c <UART_Start_Receive_IT+0xa4>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	227f      	movs	r2, #127	@ 0x7f
 800cbd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cbdc:	e016      	b.n	800cc0c <UART_Start_Receive_IT+0xa4>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbe6:	d10d      	bne.n	800cc04 <UART_Start_Receive_IT+0x9c>
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <UART_Start_Receive_IT+0x92>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	227f      	movs	r2, #127	@ 0x7f
 800cbf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cbf8:	e008      	b.n	800cc0c <UART_Start_Receive_IT+0xa4>
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	223f      	movs	r2, #63	@ 0x3f
 800cbfe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800cc02:	e003      	b.n	800cc0c <UART_Start_Receive_IT+0xa4>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2222      	movs	r2, #34	@ 0x22
 800cc18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc26:	e853 3f00 	ldrex	r3, [r3]
 800cc2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	f043 0301 	orr.w	r3, r3, #1
 800cc32:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3308      	adds	r3, #8
 800cc3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc3c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800cc3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc44:	e841 2300 	strex	r3, r2, [r1]
 800cc48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cc4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e5      	bne.n	800cc1c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc58:	d107      	bne.n	800cc6a <UART_Start_Receive_IT+0x102>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	4a21      	ldr	r2, [pc, #132]	@ (800ccec <UART_Start_Receive_IT+0x184>)
 800cc66:	669a      	str	r2, [r3, #104]	@ 0x68
 800cc68:	e002      	b.n	800cc70 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4a20      	ldr	r2, [pc, #128]	@ (800ccf0 <UART_Start_Receive_IT+0x188>)
 800cc6e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d019      	beq.n	800ccac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc80:	e853 3f00 	ldrex	r3, [r3]
 800cc84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800cc8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc98:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cc9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc9e:	e841 2300 	strex	r3, r2, [r1]
 800cca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e6      	bne.n	800cc78 <UART_Start_Receive_IT+0x110>
 800ccaa:	e018      	b.n	800ccde <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	e853 3f00 	ldrex	r3, [r3]
 800ccb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f043 0320 	orr.w	r3, r3, #32
 800ccc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccca:	623b      	str	r3, [r7, #32]
 800cccc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccce:	69f9      	ldr	r1, [r7, #28]
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	e841 2300 	strex	r3, r2, [r1]
 800ccd6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1e6      	bne.n	800ccac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	375c      	adds	r7, #92	@ 0x5c
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	0800cfdd 	.word	0x0800cfdd
 800ccf0:	0800ce35 	.word	0x0800ce35

0800ccf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b095      	sub	sp, #84	@ 0x54
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd04:	e853 3f00 	ldrex	r3, [r3]
 800cd08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e6      	bne.n	800ccfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3308      	adds	r3, #8
 800cd34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	e853 3f00 	ldrex	r3, [r3]
 800cd3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	f023 0301 	bic.w	r3, r3, #1
 800cd44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd56:	e841 2300 	strex	r3, r2, [r1]
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1e5      	bne.n	800cd2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d118      	bne.n	800cd9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	e853 3f00 	ldrex	r3, [r3]
 800cd76:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	f023 0310 	bic.w	r3, r3, #16
 800cd7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	461a      	mov	r2, r3
 800cd86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd88:	61bb      	str	r3, [r7, #24]
 800cd8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8c:	6979      	ldr	r1, [r7, #20]
 800cd8e:	69ba      	ldr	r2, [r7, #24]
 800cd90:	e841 2300 	strex	r3, r2, [r1]
 800cd94:	613b      	str	r3, [r7, #16]
   return(result);
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e6      	bne.n	800cd6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2220      	movs	r2, #32
 800cda0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cdb0:	bf00      	nop
 800cdb2:	3754      	adds	r7, #84	@ 0x54
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7ff fae8 	bl	800c3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdd8:	bf00      	nop
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	e853 3f00 	ldrex	r3, [r3]
 800cdf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdfc:	61fb      	str	r3, [r7, #28]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0a:	6979      	ldr	r1, [r7, #20]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	e841 2300 	strex	r3, r2, [r1]
 800ce12:	613b      	str	r3, [r7, #16]
   return(result);
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1e6      	bne.n	800cde8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2220      	movs	r2, #32
 800ce1e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff fab4 	bl	800c394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce2c:	bf00      	nop
 800ce2e:	3720      	adds	r7, #32
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b09c      	sub	sp, #112	@ 0x70
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce4c:	2b22      	cmp	r3, #34	@ 0x22
 800ce4e:	f040 80b9 	bne.w	800cfc4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ce5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ce60:	b2d9      	uxtb	r1, r3
 800ce62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ce66:	b2da      	uxtb	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce6c:	400a      	ands	r2, r1
 800ce6e:	b2d2      	uxtb	r2, r2
 800ce70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	3b01      	subs	r3, #1
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f040 809c 	bne.w	800cfd4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cea4:	e853 3f00 	ldrex	r3, [r3]
 800cea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ceaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ceb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ceba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cebc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cec0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cec2:	e841 2300 	strex	r3, r2, [r1]
 800cec6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1e6      	bne.n	800ce9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3308      	adds	r3, #8
 800ced4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced8:	e853 3f00 	ldrex	r3, [r3]
 800cedc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee0:	f023 0301 	bic.w	r3, r3, #1
 800cee4:	667b      	str	r3, [r7, #100]	@ 0x64
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3308      	adds	r3, #8
 800ceec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ceee:	647a      	str	r2, [r7, #68]	@ 0x44
 800cef0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cef6:	e841 2300 	strex	r3, r2, [r1]
 800cefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cefc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1e5      	bne.n	800cece <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2220      	movs	r2, #32
 800cf06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d018      	beq.n	800cf56 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2c:	e853 3f00 	ldrex	r3, [r3]
 800cf30:	623b      	str	r3, [r7, #32]
   return(result);
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf38:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf42:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf4a:	e841 2300 	strex	r3, r2, [r1]
 800cf4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e6      	bne.n	800cf24 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d12e      	bne.n	800cfbc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	e853 3f00 	ldrex	r3, [r3]
 800cf70:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f023 0310 	bic.w	r3, r3, #16
 800cf78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf82:	61fb      	str	r3, [r7, #28]
 800cf84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf86:	69b9      	ldr	r1, [r7, #24]
 800cf88:	69fa      	ldr	r2, [r7, #28]
 800cf8a:	e841 2300 	strex	r3, r2, [r1]
 800cf8e:	617b      	str	r3, [r7, #20]
   return(result);
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d1e6      	bne.n	800cf64 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69db      	ldr	r3, [r3, #28]
 800cf9c:	f003 0310 	and.w	r3, r3, #16
 800cfa0:	2b10      	cmp	r3, #16
 800cfa2:	d103      	bne.n	800cfac <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2210      	movs	r2, #16
 800cfaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff fa01 	bl	800c3bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cfba:	e00b      	b.n	800cfd4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7f4 fbf7 	bl	80017b0 <HAL_UART_RxCpltCallback>
}
 800cfc2:	e007      	b.n	800cfd4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	699a      	ldr	r2, [r3, #24]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f042 0208 	orr.w	r2, r2, #8
 800cfd2:	619a      	str	r2, [r3, #24]
}
 800cfd4:	bf00      	nop
 800cfd6:	3770      	adds	r7, #112	@ 0x70
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b09c      	sub	sp, #112	@ 0x70
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff4:	2b22      	cmp	r3, #34	@ 0x22
 800cff6:	f040 80b9 	bne.w	800d16c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d000:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d008:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d00a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d00e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d012:	4013      	ands	r3, r2
 800d014:	b29a      	uxth	r2, r3
 800d016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d018:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d01e:	1c9a      	adds	r2, r3, #2
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	3b01      	subs	r3, #1
 800d02e:	b29a      	uxth	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f040 809c 	bne.w	800d17c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d04c:	e853 3f00 	ldrex	r3, [r3]
 800d050:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d058:	667b      	str	r3, [r7, #100]	@ 0x64
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	461a      	mov	r2, r3
 800d060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d062:	657b      	str	r3, [r7, #84]	@ 0x54
 800d064:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d068:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d06a:	e841 2300 	strex	r3, r2, [r1]
 800d06e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1e6      	bne.n	800d044 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3308      	adds	r3, #8
 800d07c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d080:	e853 3f00 	ldrex	r3, [r3]
 800d084:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d088:	f023 0301 	bic.w	r3, r3, #1
 800d08c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3308      	adds	r3, #8
 800d094:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d096:	643a      	str	r2, [r7, #64]	@ 0x40
 800d098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d09c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d09e:	e841 2300 	strex	r3, r2, [r1]
 800d0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1e5      	bne.n	800d076 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2220      	movs	r2, #32
 800d0ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d018      	beq.n	800d0fe <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	e853 3f00 	ldrex	r3, [r3]
 800d0d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d0e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0f2:	e841 2300 	strex	r3, r2, [r1]
 800d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1e6      	bne.n	800d0cc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d102:	2b01      	cmp	r3, #1
 800d104:	d12e      	bne.n	800d164 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	e853 3f00 	ldrex	r3, [r3]
 800d118:	60bb      	str	r3, [r7, #8]
   return(result);
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f023 0310 	bic.w	r3, r3, #16
 800d120:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d12a:	61bb      	str	r3, [r7, #24]
 800d12c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12e:	6979      	ldr	r1, [r7, #20]
 800d130:	69ba      	ldr	r2, [r7, #24]
 800d132:	e841 2300 	strex	r3, r2, [r1]
 800d136:	613b      	str	r3, [r7, #16]
   return(result);
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1e6      	bne.n	800d10c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	f003 0310 	and.w	r3, r3, #16
 800d148:	2b10      	cmp	r3, #16
 800d14a:	d103      	bne.n	800d154 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2210      	movs	r2, #16
 800d152:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff f92d 	bl	800c3bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d162:	e00b      	b.n	800d17c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7f4 fb23 	bl	80017b0 <HAL_UART_RxCpltCallback>
}
 800d16a:	e007      	b.n	800d17c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	699a      	ldr	r2, [r3, #24]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f042 0208 	orr.w	r2, r2, #8
 800d17a:	619a      	str	r2, [r3, #24]
}
 800d17c:	bf00      	nop
 800d17e:	3770      	adds	r7, #112	@ 0x70
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d121      	bne.n	800d1da <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	4b27      	ldr	r3, [pc, #156]	@ (800d238 <FMC_SDRAM_Init+0xb4>)
 800d19c:	4013      	ands	r3, r2
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	6851      	ldr	r1, [r2, #4]
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	6892      	ldr	r2, [r2, #8]
 800d1a6:	4311      	orrs	r1, r2
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	68d2      	ldr	r2, [r2, #12]
 800d1ac:	4311      	orrs	r1, r2
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	6912      	ldr	r2, [r2, #16]
 800d1b2:	4311      	orrs	r1, r2
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	6952      	ldr	r2, [r2, #20]
 800d1b8:	4311      	orrs	r1, r2
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	6992      	ldr	r2, [r2, #24]
 800d1be:	4311      	orrs	r1, r2
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	69d2      	ldr	r2, [r2, #28]
 800d1c4:	4311      	orrs	r1, r2
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	6a12      	ldr	r2, [r2, #32]
 800d1ca:	4311      	orrs	r1, r2
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	601a      	str	r2, [r3, #0]
 800d1d8:	e026      	b.n	800d228 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	69d9      	ldr	r1, [r3, #28]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	4319      	orrs	r1, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f0:	430b      	orrs	r3, r1
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685a      	ldr	r2, [r3, #4]
 800d1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d238 <FMC_SDRAM_Init+0xb4>)
 800d1fe:	4013      	ands	r3, r2
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	6851      	ldr	r1, [r2, #4]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	6892      	ldr	r2, [r2, #8]
 800d208:	4311      	orrs	r1, r2
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	68d2      	ldr	r2, [r2, #12]
 800d20e:	4311      	orrs	r1, r2
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	6912      	ldr	r2, [r2, #16]
 800d214:	4311      	orrs	r1, r2
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	6952      	ldr	r2, [r2, #20]
 800d21a:	4311      	orrs	r1, r2
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	6992      	ldr	r2, [r2, #24]
 800d220:	430a      	orrs	r2, r1
 800d222:	431a      	orrs	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	ffff8000 	.word	0xffff8000

0800d23c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d128      	bne.n	800d2a0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	1e59      	subs	r1, r3, #1
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	3b01      	subs	r3, #1
 800d262:	011b      	lsls	r3, r3, #4
 800d264:	4319      	orrs	r1, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	021b      	lsls	r3, r3, #8
 800d26e:	4319      	orrs	r1, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	3b01      	subs	r3, #1
 800d276:	031b      	lsls	r3, r3, #12
 800d278:	4319      	orrs	r1, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	3b01      	subs	r3, #1
 800d280:	041b      	lsls	r3, r3, #16
 800d282:	4319      	orrs	r1, r3
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	3b01      	subs	r3, #1
 800d28a:	051b      	lsls	r3, r3, #20
 800d28c:	4319      	orrs	r1, r3
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	3b01      	subs	r3, #1
 800d294:	061b      	lsls	r3, r3, #24
 800d296:	430b      	orrs	r3, r1
 800d298:	431a      	orrs	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	609a      	str	r2, [r3, #8]
 800d29e:	e02d      	b.n	800d2fc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	689a      	ldr	r2, [r3, #8]
 800d2a4:	4b19      	ldr	r3, [pc, #100]	@ (800d30c <FMC_SDRAM_Timing_Init+0xd0>)
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	68d2      	ldr	r2, [r2, #12]
 800d2ac:	3a01      	subs	r2, #1
 800d2ae:	0311      	lsls	r1, r2, #12
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	6952      	ldr	r2, [r2, #20]
 800d2b4:	3a01      	subs	r2, #1
 800d2b6:	0512      	lsls	r2, r2, #20
 800d2b8:	430a      	orrs	r2, r1
 800d2ba:	431a      	orrs	r2, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	1e59      	subs	r1, r3, #1
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	4319      	orrs	r1, r3
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	021b      	lsls	r3, r3, #8
 800d2e0:	4319      	orrs	r1, r3
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	041b      	lsls	r3, r3, #16
 800d2ea:	4319      	orrs	r1, r3
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	061b      	lsls	r3, r3, #24
 800d2f4:	430b      	orrs	r3, r1
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	ff0f0fff 	.word	0xff0f0fff

0800d310 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d310:	b084      	sub	sp, #16
 800d312:	b480      	push	{r7}
 800d314:	b085      	sub	sp, #20
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	f107 001c 	add.w	r0, r7, #28
 800d31e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d326:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d328:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d32a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d32e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d332:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d336:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d33a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685a      	ldr	r2, [r3, #4]
 800d346:	4b07      	ldr	r3, [pc, #28]	@ (800d364 <SDMMC_Init+0x54>)
 800d348:	4013      	ands	r3, r2
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3714      	adds	r7, #20
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	b004      	add	sp, #16
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	ffff8100 	.word	0xffff8100

0800d368 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2203      	movs	r2, #3
 800d3b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f003 0303 	and.w	r3, r3, #3
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d400:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d406:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	4b06      	ldr	r3, [pc, #24]	@ (800d42c <SDMMC_SendCommand+0x50>)
 800d414:	4013      	ands	r3, r2
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	431a      	orrs	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	fffff000 	.word	0xfffff000

0800d430 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	691b      	ldr	r3, [r3, #16]
 800d43c:	b2db      	uxtb	r3, r3
}
 800d43e:	4618      	mov	r0, r3
 800d440:	370c      	adds	r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d44a:	b480      	push	{r7}
 800d44c:	b085      	sub	sp, #20
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3314      	adds	r3, #20
 800d458:	461a      	mov	r2, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	4413      	add	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
}  
 800d464:	4618      	mov	r0, r3
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	685a      	ldr	r2, [r3, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d496:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d49c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d4a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ae:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d4ba:	2300      	movs	r3, #0

}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d4d6:	2310      	movs	r3, #16
 800d4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4da:	2340      	movs	r3, #64	@ 0x40
 800d4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff ff74 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d4f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4f8:	2110      	movs	r1, #16
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fa1a 	bl	800d934 <SDMMC_GetCmdResp1>
 800d500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d502:	69fb      	ldr	r3, [r7, #28]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3720      	adds	r7, #32
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d51a:	2311      	movs	r3, #17
 800d51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d51e:	2340      	movs	r3, #64	@ 0x40
 800d520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d522:	2300      	movs	r3, #0
 800d524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d52a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d52c:	f107 0308 	add.w	r3, r7, #8
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff ff52 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d53c:	2111      	movs	r1, #17
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f9f8 	bl	800d934 <SDMMC_GetCmdResp1>
 800d544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d546:	69fb      	ldr	r3, [r7, #28]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d55e:	2312      	movs	r3, #18
 800d560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d562:	2340      	movs	r3, #64	@ 0x40
 800d564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d566:	2300      	movs	r3, #0
 800d568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d56e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d570:	f107 0308 	add.w	r3, r7, #8
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f7ff ff30 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d57c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d580:	2112      	movs	r1, #18
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f9d6 	bl	800d934 <SDMMC_GetCmdResp1>
 800d588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d58a:	69fb      	ldr	r3, [r7, #28]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3720      	adds	r7, #32
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d5a2:	2318      	movs	r3, #24
 800d5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5a6:	2340      	movs	r3, #64	@ 0x40
 800d5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b4:	f107 0308 	add.w	r3, r7, #8
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ff0e 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d5c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5c4:	2118      	movs	r1, #24
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f9b4 	bl	800d934 <SDMMC_GetCmdResp1>
 800d5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ce:	69fb      	ldr	r3, [r7, #28]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3720      	adds	r7, #32
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b088      	sub	sp, #32
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5e6:	2319      	movs	r3, #25
 800d5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5ea:	2340      	movs	r3, #64	@ 0x40
 800d5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f8:	f107 0308 	add.w	r3, r7, #8
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f7ff feec 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d604:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d608:	2119      	movs	r1, #25
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f992 	bl	800d934 <SDMMC_GetCmdResp1>
 800d610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d612:	69fb      	ldr	r3, [r7, #28]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3720      	adds	r7, #32
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d624:	2300      	movs	r3, #0
 800d626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d628:	230c      	movs	r3, #12
 800d62a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d62c:	2340      	movs	r3, #64	@ 0x40
 800d62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d63a:	f107 0308 	add.w	r3, r7, #8
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff fecb 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d646:	4a05      	ldr	r2, [pc, #20]	@ (800d65c <SDMMC_CmdStopTransfer+0x40>)
 800d648:	210c      	movs	r1, #12
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f972 	bl	800d934 <SDMMC_GetCmdResp1>
 800d650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d652:	69fb      	ldr	r3, [r7, #28]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3720      	adds	r7, #32
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	05f5e100 	.word	0x05f5e100

0800d660 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	@ 0x28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d670:	2307      	movs	r3, #7
 800d672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d674:	2340      	movs	r3, #64	@ 0x40
 800d676:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d678:	2300      	movs	r3, #0
 800d67a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d67c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d680:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d682:	f107 0310 	add.w	r3, r7, #16
 800d686:	4619      	mov	r1, r3
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f7ff fea7 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d68e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d692:	2107      	movs	r1, #7
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 f94d 	bl	800d934 <SDMMC_GetCmdResp1>
 800d69a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3728      	adds	r7, #40	@ 0x28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b088      	sub	sp, #32
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6c4:	f107 0308 	add.w	r3, r7, #8
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff fe86 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fb67 	bl	800dda4 <SDMMC_GetCmdError>
 800d6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3720      	adds	r7, #32
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b088      	sub	sp, #32
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6ea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6f0:	2308      	movs	r3, #8
 800d6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6f4:	2340      	movs	r3, #64	@ 0x40
 800d6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d702:	f107 0308 	add.w	r3, r7, #8
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff fe67 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 fafa 	bl	800dd08 <SDMMC_GetCmdResp7>
 800d714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d716:	69fb      	ldr	r3, [r7, #28]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3720      	adds	r7, #32
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b088      	sub	sp, #32
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d72e:	2337      	movs	r3, #55	@ 0x37
 800d730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d732:	2340      	movs	r3, #64	@ 0x40
 800d734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d736:	2300      	movs	r3, #0
 800d738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d73a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff fe48 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d74c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d750:	2137      	movs	r1, #55	@ 0x37
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f8ee 	bl	800d934 <SDMMC_GetCmdResp1>
 800d758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d75a:	69fb      	ldr	r3, [r7, #28]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	4b0d      	ldr	r3, [pc, #52]	@ (800d7a8 <SDMMC_CmdAppOperCommand+0x44>)
 800d772:	4313      	orrs	r3, r2
 800d774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d776:	2329      	movs	r3, #41	@ 0x29
 800d778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d77a:	2340      	movs	r3, #64	@ 0x40
 800d77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d786:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d788:	f107 0308 	add.w	r3, r7, #8
 800d78c:	4619      	mov	r1, r3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fe24 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fa03 	bl	800dba0 <SDMMC_GetCmdResp3>
 800d79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d79c:	69fb      	ldr	r3, [r7, #28]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3720      	adds	r7, #32
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	80100000 	.word	0x80100000

0800d7ac <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d7ba:	2306      	movs	r3, #6
 800d7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7be:	2340      	movs	r3, #64	@ 0x40
 800d7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fe02 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d7d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7dc:	2106      	movs	r1, #6
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f8a8 	bl	800d934 <SDMMC_GetCmdResp1>
 800d7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e6:	69fb      	ldr	r3, [r7, #28]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3720      	adds	r7, #32
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d7fc:	2333      	movs	r3, #51	@ 0x33
 800d7fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d800:	2340      	movs	r3, #64	@ 0x40
 800d802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d804:	2300      	movs	r3, #0
 800d806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d80c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d80e:	f107 0308 	add.w	r3, r7, #8
 800d812:	4619      	mov	r1, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff fde1 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d81a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d81e:	2133      	movs	r1, #51	@ 0x33
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f887 	bl	800d934 <SDMMC_GetCmdResp1>
 800d826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d828:	69fb      	ldr	r3, [r7, #28]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3720      	adds	r7, #32
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b088      	sub	sp, #32
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d83a:	2300      	movs	r3, #0
 800d83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d83e:	2302      	movs	r3, #2
 800d840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d842:	23c0      	movs	r3, #192	@ 0xc0
 800d844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d846:	2300      	movs	r3, #0
 800d848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d84a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d84e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d850:	f107 0308 	add.w	r3, r7, #8
 800d854:	4619      	mov	r1, r3
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7ff fdc0 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f957 	bl	800db10 <SDMMC_GetCmdResp2>
 800d862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d864:	69fb      	ldr	r3, [r7, #28]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3720      	adds	r7, #32
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b088      	sub	sp, #32
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d87c:	2309      	movs	r3, #9
 800d87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d880:	23c0      	movs	r3, #192	@ 0xc0
 800d882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d884:	2300      	movs	r3, #0
 800d886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d88c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d88e:	f107 0308 	add.w	r3, r7, #8
 800d892:	4619      	mov	r1, r3
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff fda1 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f000 f938 	bl	800db10 <SDMMC_GetCmdResp2>
 800d8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8a2:	69fb      	ldr	r3, [r7, #28]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3720      	adds	r7, #32
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8be:	2340      	movs	r3, #64	@ 0x40
 800d8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8cc:	f107 0308 	add.w	r3, r7, #8
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff fd82 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	2103      	movs	r1, #3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f99d 	bl	800dc1c <SDMMC_GetCmdResp6>
 800d8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8e4:	69fb      	ldr	r3, [r7, #28]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3720      	adds	r7, #32
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b088      	sub	sp, #32
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
 800d8f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d8fc:	230d      	movs	r3, #13
 800d8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d900:	2340      	movs	r3, #64	@ 0x40
 800d902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d904:	2300      	movs	r3, #0
 800d906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d90c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d90e:	f107 0308 	add.w	r3, r7, #8
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fd61 	bl	800d3dc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d91e:	210d      	movs	r1, #13
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f807 	bl	800d934 <SDMMC_GetCmdResp1>
 800d926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d928:	69fb      	ldr	r3, [r7, #28]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
	...

0800d934 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	460b      	mov	r3, r1
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d942:	4b70      	ldr	r3, [pc, #448]	@ (800db04 <SDMMC_GetCmdResp1+0x1d0>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a70      	ldr	r2, [pc, #448]	@ (800db08 <SDMMC_GetCmdResp1+0x1d4>)
 800d948:	fba2 2303 	umull	r2, r3, r2, r3
 800d94c:	0a5a      	lsrs	r2, r3, #9
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	fb02 f303 	mul.w	r3, r2, r3
 800d954:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	1e5a      	subs	r2, r3, #1
 800d95a:	61fa      	str	r2, [r7, #28]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d960:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d964:	e0c9      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d96a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d972:	2b00      	cmp	r3, #0
 800d974:	d0ef      	beq.n	800d956 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1ea      	bne.n	800d956 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d984:	f003 0304 	and.w	r3, r3, #4
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2204      	movs	r2, #4
 800d990:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d992:	2304      	movs	r3, #4
 800d994:	e0b1      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d004      	beq.n	800d9ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e0a6      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	22c5      	movs	r2, #197	@ 0xc5
 800d9b0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff fd3c 	bl	800d430 <SDMMC_GetCommandResponse>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	7afb      	ldrb	r3, [r7, #11]
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d001      	beq.n	800d9c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e099      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7ff fd3e 	bl	800d44a <SDMMC_GetResponse>
 800d9ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	4b4e      	ldr	r3, [pc, #312]	@ (800db0c <SDMMC_GetCmdResp1+0x1d8>)
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e08d      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	da02      	bge.n	800d9ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d9e8:	e087      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d9f4:	2340      	movs	r3, #64	@ 0x40
 800d9f6:	e080      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da02:	2380      	movs	r3, #128	@ 0x80
 800da04:	e079      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d002      	beq.n	800da16 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da14:	e071      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d002      	beq.n	800da26 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da24:	e069      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da34:	e061      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d002      	beq.n	800da46 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da44:	e059      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da54:	e051      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da64:	e049      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da74:	e041      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800da80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da84:	e039      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800da94:	e031      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800daa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800daa4:	e029      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dab0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dab4:	e021      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dac0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800dac4:	e019      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dad0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800dad4:	e011      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dae0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800dae4:	e009      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f003 0308 	and.w	r3, r3, #8
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800daf0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800daf4:	e001      	b.n	800dafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800daf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3720      	adds	r7, #32
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	20000000 	.word	0x20000000
 800db08:	10624dd3 	.word	0x10624dd3
 800db0c:	fdffe008 	.word	0xfdffe008

0800db10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db18:	4b1f      	ldr	r3, [pc, #124]	@ (800db98 <SDMMC_GetCmdResp2+0x88>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a1f      	ldr	r2, [pc, #124]	@ (800db9c <SDMMC_GetCmdResp2+0x8c>)
 800db1e:	fba2 2303 	umull	r2, r3, r2, r3
 800db22:	0a5b      	lsrs	r3, r3, #9
 800db24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db28:	fb02 f303 	mul.w	r3, r2, r3
 800db2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	1e5a      	subs	r2, r3, #1
 800db32:	60fa      	str	r2, [r7, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db3c:	e026      	b.n	800db8c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d0ef      	beq.n	800db2e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db54:	2b00      	cmp	r3, #0
 800db56:	d1ea      	bne.n	800db2e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db5c:	f003 0304 	and.w	r3, r3, #4
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2204      	movs	r2, #4
 800db68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db6a:	2304      	movs	r3, #4
 800db6c:	e00e      	b.n	800db8c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	2b00      	cmp	r3, #0
 800db78:	d004      	beq.n	800db84 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db80:	2301      	movs	r3, #1
 800db82:	e003      	b.n	800db8c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	22c5      	movs	r2, #197	@ 0xc5
 800db88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3714      	adds	r7, #20
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr
 800db98:	20000000 	.word	0x20000000
 800db9c:	10624dd3 	.word	0x10624dd3

0800dba0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dba8:	4b1a      	ldr	r3, [pc, #104]	@ (800dc14 <SDMMC_GetCmdResp3+0x74>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a1a      	ldr	r2, [pc, #104]	@ (800dc18 <SDMMC_GetCmdResp3+0x78>)
 800dbae:	fba2 2303 	umull	r2, r3, r2, r3
 800dbb2:	0a5b      	lsrs	r3, r3, #9
 800dbb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbb8:	fb02 f303 	mul.w	r3, r2, r3
 800dbbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1e5a      	subs	r2, r3, #1
 800dbc2:	60fa      	str	r2, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbcc:	e01b      	b.n	800dc06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0ef      	beq.n	800dbbe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1ea      	bne.n	800dbbe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbec:	f003 0304 	and.w	r3, r3, #4
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d004      	beq.n	800dbfe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2204      	movs	r2, #4
 800dbf8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbfa:	2304      	movs	r3, #4
 800dbfc:	e003      	b.n	800dc06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	22c5      	movs	r2, #197	@ 0xc5
 800dc02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	20000000 	.word	0x20000000
 800dc18:	10624dd3 	.word	0x10624dd3

0800dc1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b088      	sub	sp, #32
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	460b      	mov	r3, r1
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc2a:	4b35      	ldr	r3, [pc, #212]	@ (800dd00 <SDMMC_GetCmdResp6+0xe4>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a35      	ldr	r2, [pc, #212]	@ (800dd04 <SDMMC_GetCmdResp6+0xe8>)
 800dc30:	fba2 2303 	umull	r2, r3, r2, r3
 800dc34:	0a5b      	lsrs	r3, r3, #9
 800dc36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc3a:	fb02 f303 	mul.w	r3, r2, r3
 800dc3e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	1e5a      	subs	r2, r3, #1
 800dc44:	61fa      	str	r2, [r7, #28]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d102      	bne.n	800dc50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc4e:	e052      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc54:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d0ef      	beq.n	800dc40 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1ea      	bne.n	800dc40 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc6e:	f003 0304 	and.w	r3, r3, #4
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2204      	movs	r2, #4
 800dc7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc7c:	2304      	movs	r3, #4
 800dc7e:	e03a      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d004      	beq.n	800dc96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e02f      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7ff fbca 	bl	800d430 <SDMMC_GetCommandResponse>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	7afb      	ldrb	r3, [r7, #11]
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d001      	beq.n	800dcaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e025      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	22c5      	movs	r2, #197	@ 0xc5
 800dcae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f7ff fbc9 	bl	800d44a <SDMMC_GetResponse>
 800dcb8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d106      	bne.n	800dcd2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	0c1b      	lsrs	r3, r3, #16
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e011      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dce0:	e009      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d002      	beq.n	800dcf2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dcec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcf0:	e001      	b.n	800dcf6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3720      	adds	r7, #32
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	20000000 	.word	0x20000000
 800dd04:	10624dd3 	.word	0x10624dd3

0800dd08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd10:	4b22      	ldr	r3, [pc, #136]	@ (800dd9c <SDMMC_GetCmdResp7+0x94>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a22      	ldr	r2, [pc, #136]	@ (800dda0 <SDMMC_GetCmdResp7+0x98>)
 800dd16:	fba2 2303 	umull	r2, r3, r2, r3
 800dd1a:	0a5b      	lsrs	r3, r3, #9
 800dd1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd20:	fb02 f303 	mul.w	r3, r2, r3
 800dd24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	1e5a      	subs	r2, r3, #1
 800dd2a:	60fa      	str	r2, [r7, #12]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd34:	e02c      	b.n	800dd90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d0ef      	beq.n	800dd26 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1ea      	bne.n	800dd26 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d004      	beq.n	800dd66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2204      	movs	r2, #4
 800dd60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd62:	2304      	movs	r3, #4
 800dd64:	e014      	b.n	800dd90 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd6a:	f003 0301 	and.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d004      	beq.n	800dd7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e009      	b.n	800dd90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2240      	movs	r2, #64	@ 0x40
 800dd8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dd8e:	2300      	movs	r3, #0
  
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3714      	adds	r7, #20
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr
 800dd9c:	20000000 	.word	0x20000000
 800dda0:	10624dd3 	.word	0x10624dd3

0800dda4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ddac:	4b11      	ldr	r3, [pc, #68]	@ (800ddf4 <SDMMC_GetCmdError+0x50>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a11      	ldr	r2, [pc, #68]	@ (800ddf8 <SDMMC_GetCmdError+0x54>)
 800ddb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb6:	0a5b      	lsrs	r3, r3, #9
 800ddb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddbc:	fb02 f303 	mul.w	r3, r2, r3
 800ddc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	1e5a      	subs	r2, r3, #1
 800ddc6:	60fa      	str	r2, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d102      	bne.n	800ddd2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ddd0:	e009      	b.n	800dde6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0f1      	beq.n	800ddc2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	22c5      	movs	r2, #197	@ 0xc5
 800dde2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20000000 	.word	0x20000000
 800ddf8:	10624dd3 	.word	0x10624dd3

0800ddfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ddfc:	b084      	sub	sp, #16
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	f107 001c 	add.w	r0, r7, #28
 800de0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800de12:	2b01      	cmp	r3, #1
 800de14:	d121      	bne.n	800de5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68da      	ldr	r2, [r3, #12]
 800de26:	4b21      	ldr	r3, [pc, #132]	@ (800deac <USB_CoreInit+0xb0>)
 800de28:	4013      	ands	r3, r2
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800de3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d105      	bne.n	800de4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f9d4 	bl	800e1fc <USB_CoreReset>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]
 800de58:	e010      	b.n	800de7c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 f9c8 	bl	800e1fc <USB_CoreReset>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800de7c:	7fbb      	ldrb	r3, [r7, #30]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d10b      	bne.n	800de9a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	f043 0206 	orr.w	r2, r3, #6
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f043 0220 	orr.w	r2, r3, #32
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dea6:	b004      	add	sp, #16
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	ffbdffbf 	.word	0xffbdffbf

0800deb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	f043 0201 	orr.w	r2, r3, #1
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	370c      	adds	r7, #12
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ded2:	b480      	push	{r7}
 800ded4:	b083      	sub	sp, #12
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	f023 0201 	bic.w	r2, r3, #1
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	460b      	mov	r3, r1
 800defe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800df10:	78fb      	ldrb	r3, [r7, #3]
 800df12:	2b01      	cmp	r3, #1
 800df14:	d115      	bne.n	800df42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df22:	200a      	movs	r0, #10
 800df24:	f7f4 ffa8 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	330a      	adds	r3, #10
 800df2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f956 	bl	800e1e0 <USB_GetMode>
 800df34:	4603      	mov	r3, r0
 800df36:	2b01      	cmp	r3, #1
 800df38:	d01e      	beq.n	800df78 <USB_SetCurrentMode+0x84>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2bc7      	cmp	r3, #199	@ 0xc7
 800df3e:	d9f0      	bls.n	800df22 <USB_SetCurrentMode+0x2e>
 800df40:	e01a      	b.n	800df78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800df42:	78fb      	ldrb	r3, [r7, #3]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d115      	bne.n	800df74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df54:	200a      	movs	r0, #10
 800df56:	f7f4 ff8f 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	330a      	adds	r3, #10
 800df5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 f93d 	bl	800e1e0 <USB_GetMode>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <USB_SetCurrentMode+0x84>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2bc7      	cmp	r3, #199	@ 0xc7
 800df70:	d9f0      	bls.n	800df54 <USB_SetCurrentMode+0x60>
 800df72:	e001      	b.n	800df78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e005      	b.n	800df84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2bc8      	cmp	r3, #200	@ 0xc8
 800df7c:	d101      	bne.n	800df82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e000      	b.n	800df84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b085      	sub	sp, #20
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df96:	2300      	movs	r3, #0
 800df98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3301      	adds	r3, #1
 800df9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dfa6:	d901      	bls.n	800dfac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	e01b      	b.n	800dfe4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	daf2      	bge.n	800df9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	019b      	lsls	r3, r3, #6
 800dfbc:	f043 0220 	orr.w	r2, r3, #32
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dfd0:	d901      	bls.n	800dfd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dfd2:	2303      	movs	r3, #3
 800dfd4:	e006      	b.n	800dfe4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	f003 0320 	and.w	r3, r3, #32
 800dfde:	2b20      	cmp	r3, #32
 800dfe0:	d0f0      	beq.n	800dfc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3301      	adds	r3, #1
 800e000:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e008:	d901      	bls.n	800e00e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e00a:	2303      	movs	r3, #3
 800e00c:	e018      	b.n	800e040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	2b00      	cmp	r3, #0
 800e014:	daf2      	bge.n	800dffc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2210      	movs	r2, #16
 800e01e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	3301      	adds	r3, #1
 800e024:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e02c:	d901      	bls.n	800e032 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e02e:	2303      	movs	r3, #3
 800e030:	e006      	b.n	800e040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f003 0310 	and.w	r3, r3, #16
 800e03a:	2b10      	cmp	r3, #16
 800e03c:	d0f0      	beq.n	800e020 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b089      	sub	sp, #36	@ 0x24
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4611      	mov	r1, r2
 800e058:	461a      	mov	r2, r3
 800e05a:	460b      	mov	r3, r1
 800e05c:	71fb      	strb	r3, [r7, #7]
 800e05e:	4613      	mov	r3, r2
 800e060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e06a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d123      	bne.n	800e0ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e072:	88bb      	ldrh	r3, [r7, #4]
 800e074:	3303      	adds	r3, #3
 800e076:	089b      	lsrs	r3, r3, #2
 800e078:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e07a:	2300      	movs	r3, #0
 800e07c:	61bb      	str	r3, [r7, #24]
 800e07e:	e018      	b.n	800e0b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	031a      	lsls	r2, r3, #12
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	4413      	add	r3, r2
 800e088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e08c:	461a      	mov	r2, r3
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	3301      	adds	r3, #1
 800e098:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	3301      	adds	r3, #1
 800e09e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	61bb      	str	r3, [r7, #24]
 800e0b2:	69ba      	ldr	r2, [r7, #24]
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d3e2      	bcc.n	800e080 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3724      	adds	r7, #36	@ 0x24
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b08b      	sub	sp, #44	@ 0x2c
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e0de:	88fb      	ldrh	r3, [r7, #6]
 800e0e0:	089b      	lsrs	r3, r3, #2
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e0e6:	88fb      	ldrh	r3, [r7, #6]
 800e0e8:	f003 0303 	and.w	r3, r3, #3
 800e0ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	623b      	str	r3, [r7, #32]
 800e0f2:	e014      	b.n	800e11e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fe:	601a      	str	r2, [r3, #0]
    pDest++;
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	3301      	adds	r3, #1
 800e104:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e108:	3301      	adds	r3, #1
 800e10a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10e:	3301      	adds	r3, #1
 800e110:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e114:	3301      	adds	r3, #1
 800e116:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	3301      	adds	r3, #1
 800e11c:	623b      	str	r3, [r7, #32]
 800e11e:	6a3a      	ldr	r2, [r7, #32]
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	429a      	cmp	r2, r3
 800e124:	d3e6      	bcc.n	800e0f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e126:	8bfb      	ldrh	r3, [r7, #30]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d01e      	beq.n	800e16a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e12c:	2300      	movs	r3, #0
 800e12e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e136:	461a      	mov	r2, r3
 800e138:	f107 0310 	add.w	r3, r7, #16
 800e13c:	6812      	ldr	r2, [r2, #0]
 800e13e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	b2db      	uxtb	r3, r3
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	fa22 f303 	lsr.w	r3, r2, r3
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e150:	701a      	strb	r2, [r3, #0]
      i++;
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	3301      	adds	r3, #1
 800e156:	623b      	str	r3, [r7, #32]
      pDest++;
 800e158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15a:	3301      	adds	r3, #1
 800e15c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e15e:	8bfb      	ldrh	r3, [r7, #30]
 800e160:	3b01      	subs	r3, #1
 800e162:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e164:	8bfb      	ldrh	r3, [r7, #30]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1ea      	bne.n	800e140 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	372c      	adds	r7, #44	@ 0x2c
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	4013      	ands	r3, r2
 800e18e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e190:	68fb      	ldr	r3, [r7, #12]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr

0800e19e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b085      	sub	sp, #20
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e1ae:	78fb      	ldrb	r3, [r7, #3]
 800e1b0:	015a      	lsls	r2, r3, #5
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e1be:	78fb      	ldrb	r3, [r7, #3]
 800e1c0:	015a      	lsls	r2, r3, #5
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e1d2:	68bb      	ldr	r3, [r7, #8]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	f003 0301 	and.w	r3, r3, #1
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e204:	2300      	movs	r3, #0
 800e206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	3301      	adds	r3, #1
 800e20c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e214:	d901      	bls.n	800e21a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e216:	2303      	movs	r3, #3
 800e218:	e022      	b.n	800e260 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	daf2      	bge.n	800e208 <USB_CoreReset+0xc>

  count = 10U;
 800e222:	230a      	movs	r3, #10
 800e224:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800e226:	e002      	b.n	800e22e <USB_CoreReset+0x32>
  {
    count--;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1f9      	bne.n	800e228 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	f043 0201 	orr.w	r2, r3, #1
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3301      	adds	r3, #1
 800e244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e24c:	d901      	bls.n	800e252 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800e24e:	2303      	movs	r3, #3
 800e250:	e006      	b.n	800e260 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	f003 0301 	and.w	r3, r3, #1
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d0f0      	beq.n	800e240 <USB_CoreReset+0x44>

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e26c:	b084      	sub	sp, #16
 800e26e:	b580      	push	{r7, lr}
 800e270:	b086      	sub	sp, #24
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e27a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e28c:	461a      	mov	r2, r3
 800e28e:	2300      	movs	r3, #0
 800e290:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e296:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d119      	bne.n	800e2de <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e2aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d10a      	bne.n	800e2c8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e2c0:	f043 0304 	orr.w	r3, r3, #4
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	e014      	b.n	800e2f2 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e2d6:	f023 0304 	bic.w	r3, r3, #4
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	e009      	b.n	800e2f2 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e2ec:	f023 0304 	bic.w	r3, r3, #4
 800e2f0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e2f2:	2110      	movs	r1, #16
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7ff fe49 	bl	800df8c <USB_FlushTxFifo>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800e300:	2301      	movs	r3, #1
 800e302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff fe73 	bl	800dff0 <USB_FlushRxFifo>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e314:	2300      	movs	r3, #0
 800e316:	613b      	str	r3, [r7, #16]
 800e318:	e015      	b.n	800e346 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	4413      	add	r3, r2
 800e322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e326:	461a      	mov	r2, r3
 800e328:	f04f 33ff 	mov.w	r3, #4294967295
 800e32c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	4413      	add	r3, r2
 800e336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e33a:	461a      	mov	r2, r3
 800e33c:	2300      	movs	r3, #0
 800e33e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	3301      	adds	r3, #1
 800e344:	613b      	str	r3, [r7, #16]
 800e346:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e34a:	461a      	mov	r2, r3
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	4293      	cmp	r3, r2
 800e350:	d3e3      	bcc.n	800e31a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f04f 32ff 	mov.w	r2, #4294967295
 800e35e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a18      	ldr	r2, [pc, #96]	@ (800e3c4 <USB_HostInit+0x158>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d10b      	bne.n	800e380 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e36e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a15      	ldr	r2, [pc, #84]	@ (800e3c8 <USB_HostInit+0x15c>)
 800e374:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a14      	ldr	r2, [pc, #80]	@ (800e3cc <USB_HostInit+0x160>)
 800e37a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e37e:	e009      	b.n	800e394 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2280      	movs	r2, #128	@ 0x80
 800e384:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a11      	ldr	r2, [pc, #68]	@ (800e3d0 <USB_HostInit+0x164>)
 800e38a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	4a11      	ldr	r2, [pc, #68]	@ (800e3d4 <USB_HostInit+0x168>)
 800e390:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d105      	bne.n	800e3a8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	f043 0210 	orr.w	r2, r3, #16
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	699a      	ldr	r2, [r3, #24]
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d8 <USB_HostInit+0x16c>)
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3c0:	b004      	add	sp, #16
 800e3c2:	4770      	bx	lr
 800e3c4:	40040000 	.word	0x40040000
 800e3c8:	01000200 	.word	0x01000200
 800e3cc:	00e00300 	.word	0x00e00300
 800e3d0:	00600080 	.word	0x00600080
 800e3d4:	004000e0 	.word	0x004000e0
 800e3d8:	a3200008 	.word	0xa3200008

0800e3dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e3fa:	f023 0303 	bic.w	r3, r3, #3
 800e3fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	78fb      	ldrb	r3, [r7, #3]
 800e40a:	f003 0303 	and.w	r3, r3, #3
 800e40e:	68f9      	ldr	r1, [r7, #12]
 800e410:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e414:	4313      	orrs	r3, r2
 800e416:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e418:	78fb      	ldrb	r3, [r7, #3]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d107      	bne.n	800e42e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e424:	461a      	mov	r2, r3
 800e426:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e42a:	6053      	str	r3, [r2, #4]
 800e42c:	e00c      	b.n	800e448 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e42e:	78fb      	ldrb	r3, [r7, #3]
 800e430:	2b02      	cmp	r3, #2
 800e432:	d107      	bne.n	800e444 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e43a:	461a      	mov	r2, r3
 800e43c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e440:	6053      	str	r3, [r2, #4]
 800e442:	e001      	b.n	800e448 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	e000      	b.n	800e44a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e462:	2300      	movs	r3, #0
 800e464:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e476:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e484:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e486:	2064      	movs	r0, #100	@ 0x64
 800e488:	f7f4 fcf6 	bl	8002e78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e498:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e49a:	200a      	movs	r0, #10
 800e49c:	f7f4 fcec 	bl	8002e78 <HAL_Delay>

  return HAL_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b085      	sub	sp, #20
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e4ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d109      	bne.n	800e4ee <USB_DriveVbus+0x44>
 800e4da:	78fb      	ldrb	r3, [r7, #3]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d106      	bne.n	800e4ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e4e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e4ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e4f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4f8:	d109      	bne.n	800e50e <USB_DriveVbus+0x64>
 800e4fa:	78fb      	ldrb	r3, [r7, #3]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d106      	bne.n	800e50e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e508:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e50c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e528:	2300      	movs	r3, #0
 800e52a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	0c5b      	lsrs	r3, r3, #17
 800e53a:	f003 0303 	and.w	r3, r3, #3
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3714      	adds	r7, #20
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr

0800e54a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b085      	sub	sp, #20
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	b29b      	uxth	r3, r3
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b088      	sub	sp, #32
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	4608      	mov	r0, r1
 800e576:	4611      	mov	r1, r2
 800e578:	461a      	mov	r2, r3
 800e57a:	4603      	mov	r3, r0
 800e57c:	70fb      	strb	r3, [r7, #3]
 800e57e:	460b      	mov	r3, r1
 800e580:	70bb      	strb	r3, [r7, #2]
 800e582:	4613      	mov	r3, r2
 800e584:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800e58e:	78fb      	ldrb	r3, [r7, #3]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	4413      	add	r3, r2
 800e596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e59a:	461a      	mov	r2, r3
 800e59c:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e5a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d87c      	bhi.n	800e6a4 <USB_HC_Init+0x138>
 800e5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e5b0 <USB_HC_Init+0x44>)
 800e5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b0:	0800e5c1 	.word	0x0800e5c1
 800e5b4:	0800e667 	.word	0x0800e667
 800e5b8:	0800e5c1 	.word	0x0800e5c1
 800e5bc:	0800e629 	.word	0x0800e629
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e5c0:	78fb      	ldrb	r3, [r7, #3]
 800e5c2:	015a      	lsls	r2, r3, #5
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e5d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e5d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	da10      	bge.n	800e5fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e5dc:	78fb      	ldrb	r3, [r7, #3]
 800e5de:	015a      	lsls	r2, r3, #5
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	78fa      	ldrb	r2, [r7, #3]
 800e5ec:	0151      	lsls	r1, r2, #5
 800e5ee:	693a      	ldr	r2, [r7, #16]
 800e5f0:	440a      	add	r2, r1
 800e5f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e5fa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e5fc:	e055      	b.n	800e6aa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4a6f      	ldr	r2, [pc, #444]	@ (800e7c0 <USB_HC_Init+0x254>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d151      	bne.n	800e6aa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e606:	78fb      	ldrb	r3, [r7, #3]
 800e608:	015a      	lsls	r2, r3, #5
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	4413      	add	r3, r2
 800e60e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	78fa      	ldrb	r2, [r7, #3]
 800e616:	0151      	lsls	r1, r2, #5
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	440a      	add	r2, r1
 800e61c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e620:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e624:	60d3      	str	r3, [r2, #12]
      break;
 800e626:	e040      	b.n	800e6aa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e628:	78fb      	ldrb	r3, [r7, #3]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e634:	461a      	mov	r2, r3
 800e636:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e63a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e63c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e640:	2b00      	cmp	r3, #0
 800e642:	da34      	bge.n	800e6ae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e644:	78fb      	ldrb	r3, [r7, #3]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	78fa      	ldrb	r2, [r7, #3]
 800e654:	0151      	lsls	r1, r2, #5
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	440a      	add	r2, r1
 800e65a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e65e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e662:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e664:	e023      	b.n	800e6ae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e666:	78fb      	ldrb	r3, [r7, #3]
 800e668:	015a      	lsls	r2, r3, #5
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	4413      	add	r3, r2
 800e66e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e672:	461a      	mov	r2, r3
 800e674:	f240 2325 	movw	r3, #549	@ 0x225
 800e678:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e67a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	da17      	bge.n	800e6b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e682:	78fb      	ldrb	r3, [r7, #3]
 800e684:	015a      	lsls	r2, r3, #5
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	4413      	add	r3, r2
 800e68a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	78fa      	ldrb	r2, [r7, #3]
 800e692:	0151      	lsls	r1, r2, #5
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	440a      	add	r2, r1
 800e698:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e69c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e6a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e6a2:	e006      	b.n	800e6b2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	77fb      	strb	r3, [r7, #31]
      break;
 800e6a8:	e004      	b.n	800e6b4 <USB_HC_Init+0x148>
      break;
 800e6aa:	bf00      	nop
 800e6ac:	e002      	b.n	800e6b4 <USB_HC_Init+0x148>
      break;
 800e6ae:	bf00      	nop
 800e6b0:	e000      	b.n	800e6b4 <USB_HC_Init+0x148>
      break;
 800e6b2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e6b4:	78fb      	ldrb	r3, [r7, #3]
 800e6b6:	015a      	lsls	r2, r3, #5
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e6c6:	78fb      	ldrb	r3, [r7, #3]
 800e6c8:	015a      	lsls	r2, r3, #5
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	78fa      	ldrb	r2, [r7, #3]
 800e6d6:	0151      	lsls	r1, r2, #5
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	440a      	add	r2, r1
 800e6dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e6e0:	f043 0302 	orr.w	r3, r3, #2
 800e6e4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6ec:	699a      	ldr	r2, [r3, #24]
 800e6ee:	78fb      	ldrb	r3, [r7, #3]
 800e6f0:	f003 030f 	and.w	r3, r3, #15
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e6fa:	6939      	ldr	r1, [r7, #16]
 800e6fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e700:	4313      	orrs	r3, r2
 800e702:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	699b      	ldr	r3, [r3, #24]
 800e708:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e710:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e714:	2b00      	cmp	r3, #0
 800e716:	da03      	bge.n	800e720 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e71c:	61bb      	str	r3, [r7, #24]
 800e71e:	e001      	b.n	800e724 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800e720:	2300      	movs	r3, #0
 800e722:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff fef9 	bl	800e51c <USB_GetHostSpeed>
 800e72a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e72c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e730:	2b02      	cmp	r3, #2
 800e732:	d106      	bne.n	800e742 <USB_HC_Init+0x1d6>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b02      	cmp	r3, #2
 800e738:	d003      	beq.n	800e742 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e73a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	e001      	b.n	800e746 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e742:	2300      	movs	r3, #0
 800e744:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e746:	787b      	ldrb	r3, [r7, #1]
 800e748:	059b      	lsls	r3, r3, #22
 800e74a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e74e:	78bb      	ldrb	r3, [r7, #2]
 800e750:	02db      	lsls	r3, r3, #11
 800e752:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e756:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e758:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e75c:	049b      	lsls	r3, r3, #18
 800e75e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e762:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e764:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e766:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e76a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	431a      	orrs	r2, r3
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e774:	78fa      	ldrb	r2, [r7, #3]
 800e776:	0151      	lsls	r1, r2, #5
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	440a      	add	r2, r1
 800e77c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e780:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e784:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e786:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d003      	beq.n	800e796 <USB_HC_Init+0x22a>
 800e78e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e792:	2b01      	cmp	r3, #1
 800e794:	d10f      	bne.n	800e7b6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	78fa      	ldrb	r2, [r7, #3]
 800e7a6:	0151      	lsls	r1, r2, #5
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	440a      	add	r2, r1
 800e7ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e7b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e7b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e7b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3720      	adds	r7, #32
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	40040000 	.word	0x40040000

0800e7c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08c      	sub	sp, #48	@ 0x30
 800e7c8:	af02      	add	r7, sp, #8
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	785b      	ldrb	r3, [r3, #1]
 800e7da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e7dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7e0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	4a5d      	ldr	r2, [pc, #372]	@ (800e95c <USB_HC_StartXfer+0x198>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d12f      	bne.n	800e84a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e7ea:	79fb      	ldrb	r3, [r7, #7]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d11c      	bne.n	800e82a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	7c9b      	ldrb	r3, [r3, #18]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <USB_HC_StartXfer+0x3c>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	7c9b      	ldrb	r3, [r3, #18]
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	d124      	bne.n	800e84a <USB_HC_StartXfer+0x86>
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	799b      	ldrb	r3, [r3, #6]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d120      	bne.n	800e84a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	69fa      	ldr	r2, [r7, #28]
 800e818:	0151      	lsls	r1, r2, #5
 800e81a:	6a3a      	ldr	r2, [r7, #32]
 800e81c:	440a      	add	r2, r1
 800e81e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e826:	60d3      	str	r3, [r2, #12]
 800e828:	e00f      	b.n	800e84a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	791b      	ldrb	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10b      	bne.n	800e84a <USB_HC_StartXfer+0x86>
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	795b      	ldrb	r3, [r3, #5]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d107      	bne.n	800e84a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	785b      	ldrb	r3, [r3, #1]
 800e83e:	4619      	mov	r1, r3
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 fb6b 	bl	800ef1c <USB_DoPing>
        return HAL_OK;
 800e846:	2300      	movs	r3, #0
 800e848:	e232      	b.n	800ecb0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	799b      	ldrb	r3, [r3, #6]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d158      	bne.n	800e904 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e852:	2301      	movs	r3, #1
 800e854:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	78db      	ldrb	r3, [r3, #3]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d007      	beq.n	800e86e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e85e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	8a92      	ldrh	r2, [r2, #20]
 800e864:	fb03 f202 	mul.w	r2, r3, r2
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	61da      	str	r2, [r3, #28]
 800e86c:	e07c      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	7c9b      	ldrb	r3, [r3, #18]
 800e872:	2b01      	cmp	r3, #1
 800e874:	d130      	bne.n	800e8d8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	6a1b      	ldr	r3, [r3, #32]
 800e87a:	2bbc      	cmp	r3, #188	@ 0xbc
 800e87c:	d918      	bls.n	800e8b0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	8a9b      	ldrh	r3, [r3, #20]
 800e882:	461a      	mov	r2, r3
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	69da      	ldr	r2, [r3, #28]
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d003      	beq.n	800e8a0 <USB_HC_StartXfer+0xdc>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d103      	bne.n	800e8a8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	60da      	str	r2, [r3, #12]
 800e8a6:	e05f      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	60da      	str	r2, [r3, #12]
 800e8ae:	e05b      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	6a1a      	ldr	r2, [r3, #32]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d007      	beq.n	800e8d0 <USB_HC_StartXfer+0x10c>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d003      	beq.n	800e8d0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	2204      	movs	r2, #4
 800e8cc:	60da      	str	r2, [r3, #12]
 800e8ce:	e04b      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	2203      	movs	r2, #3
 800e8d4:	60da      	str	r2, [r3, #12]
 800e8d6:	e047      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e8d8:	79fb      	ldrb	r3, [r7, #7]
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d10d      	bne.n	800e8fa <USB_HC_StartXfer+0x136>
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	8a92      	ldrh	r2, [r2, #20]
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d907      	bls.n	800e8fa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e8ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	8a92      	ldrh	r2, [r2, #20]
 800e8f0:	fb03 f202 	mul.w	r2, r3, r2
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	61da      	str	r2, [r3, #28]
 800e8f8:	e036      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	6a1a      	ldr	r2, [r3, #32]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	61da      	str	r2, [r3, #28]
 800e902:	e031      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d018      	beq.n	800e93e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	6a1b      	ldr	r3, [r3, #32]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	8a92      	ldrh	r2, [r2, #20]
 800e914:	4413      	add	r3, r2
 800e916:	3b01      	subs	r3, #1
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	8a92      	ldrh	r2, [r2, #20]
 800e91c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e920:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e922:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e924:	8b7b      	ldrh	r3, [r7, #26]
 800e926:	429a      	cmp	r2, r3
 800e928:	d90b      	bls.n	800e942 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e92a:	8b7b      	ldrh	r3, [r7, #26]
 800e92c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e92e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	8a92      	ldrh	r2, [r2, #20]
 800e934:	fb03 f202 	mul.w	r2, r3, r2
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	61da      	str	r2, [r3, #28]
 800e93c:	e001      	b.n	800e942 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e93e:	2301      	movs	r3, #1
 800e940:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	78db      	ldrb	r3, [r3, #3]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e94a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	8a92      	ldrh	r2, [r2, #20]
 800e950:	fb03 f202 	mul.w	r2, r3, r2
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	61da      	str	r2, [r3, #28]
 800e958:	e006      	b.n	800e968 <USB_HC_StartXfer+0x1a4>
 800e95a:	bf00      	nop
 800e95c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	6a1a      	ldr	r2, [r3, #32]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e970:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e972:	04d9      	lsls	r1, r3, #19
 800e974:	4ba3      	ldr	r3, [pc, #652]	@ (800ec04 <USB_HC_StartXfer+0x440>)
 800e976:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e978:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	7d9b      	ldrb	r3, [r3, #22]
 800e97e:	075b      	lsls	r3, r3, #29
 800e980:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e984:	69f9      	ldr	r1, [r7, #28]
 800e986:	0148      	lsls	r0, r1, #5
 800e988:	6a39      	ldr	r1, [r7, #32]
 800e98a:	4401      	add	r1, r0
 800e98c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e990:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e992:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d009      	beq.n	800e9ae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	6999      	ldr	r1, [r3, #24]
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	015a      	lsls	r2, r3, #5
 800e9a2:	6a3b      	ldr	r3, [r7, #32]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9aa:	460a      	mov	r2, r1
 800e9ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e9ae:	6a3b      	ldr	r3, [r7, #32]
 800e9b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	f003 0301 	and.w	r3, r3, #1
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	bf0c      	ite	eq
 800e9be:	2301      	moveq	r3, #1
 800e9c0:	2300      	movne	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	69fa      	ldr	r2, [r7, #28]
 800e9d6:	0151      	lsls	r1, r2, #5
 800e9d8:	6a3a      	ldr	r2, [r7, #32]
 800e9da:	440a      	add	r2, r1
 800e9dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e9e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	015a      	lsls	r2, r3, #5
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	7e7b      	ldrb	r3, [r7, #25]
 800e9f6:	075b      	lsls	r3, r3, #29
 800e9f8:	69f9      	ldr	r1, [r7, #28]
 800e9fa:	0148      	lsls	r0, r1, #5
 800e9fc:	6a39      	ldr	r1, [r7, #32]
 800e9fe:	4401      	add	r1, r0
 800ea00:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ea04:	4313      	orrs	r3, r2
 800ea06:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	799b      	ldrb	r3, [r3, #6]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	f040 80c3 	bne.w	800eb98 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	7c5b      	ldrb	r3, [r3, #17]
 800ea16:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	69fa      	ldr	r2, [r7, #28]
 800ea20:	0151      	lsls	r1, r2, #5
 800ea22:	6a3a      	ldr	r2, [r7, #32]
 800ea24:	440a      	add	r2, r1
 800ea26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ea2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ea2e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	015a      	lsls	r2, r3, #5
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	4413      	add	r3, r2
 800ea38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	69fa      	ldr	r2, [r7, #28]
 800ea40:	0151      	lsls	r1, r2, #5
 800ea42:	6a3a      	ldr	r2, [r7, #32]
 800ea44:	440a      	add	r2, r1
 800ea46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea4a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ea4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	79db      	ldrb	r3, [r3, #7]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d123      	bne.n	800eaa0 <USB_HC_StartXfer+0x2dc>
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	78db      	ldrb	r3, [r3, #3]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d11f      	bne.n	800eaa0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	015a      	lsls	r2, r3, #5
 800ea64:	6a3b      	ldr	r3, [r7, #32]
 800ea66:	4413      	add	r3, r2
 800ea68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	69fa      	ldr	r2, [r7, #28]
 800ea70:	0151      	lsls	r1, r2, #5
 800ea72:	6a3a      	ldr	r2, [r7, #32]
 800ea74:	440a      	add	r2, r1
 800ea76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea7e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	015a      	lsls	r2, r3, #5
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	4413      	add	r3, r2
 800ea88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	0151      	lsls	r1, r2, #5
 800ea92:	6a3a      	ldr	r2, [r7, #32]
 800ea94:	440a      	add	r2, r1
 800ea96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea9e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	7c9b      	ldrb	r3, [r3, #18]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d003      	beq.n	800eab0 <USB_HC_StartXfer+0x2ec>
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	7c9b      	ldrb	r3, [r3, #18]
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	d117      	bne.n	800eae0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d113      	bne.n	800eae0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	78db      	ldrb	r3, [r3, #3]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d10f      	bne.n	800eae0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	015a      	lsls	r2, r3, #5
 800eac4:	6a3b      	ldr	r3, [r7, #32]
 800eac6:	4413      	add	r3, r2
 800eac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	0151      	lsls	r1, r2, #5
 800ead2:	6a3a      	ldr	r2, [r7, #32]
 800ead4:	440a      	add	r2, r1
 800ead6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eade:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	7c9b      	ldrb	r3, [r3, #18]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d162      	bne.n	800ebae <USB_HC_StartXfer+0x3ea>
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	78db      	ldrb	r3, [r3, #3]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d15e      	bne.n	800ebae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	2b03      	cmp	r3, #3
 800eaf8:	d858      	bhi.n	800ebac <USB_HC_StartXfer+0x3e8>
 800eafa:	a201      	add	r2, pc, #4	@ (adr r2, 800eb00 <USB_HC_StartXfer+0x33c>)
 800eafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb00:	0800eb11 	.word	0x0800eb11
 800eb04:	0800eb33 	.word	0x0800eb33
 800eb08:	0800eb55 	.word	0x0800eb55
 800eb0c:	0800eb77 	.word	0x0800eb77
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	69fa      	ldr	r2, [r7, #28]
 800eb20:	0151      	lsls	r1, r2, #5
 800eb22:	6a3a      	ldr	r2, [r7, #32]
 800eb24:	440a      	add	r2, r1
 800eb26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb2e:	6053      	str	r3, [r2, #4]
          break;
 800eb30:	e03d      	b.n	800ebae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	015a      	lsls	r2, r3, #5
 800eb36:	6a3b      	ldr	r3, [r7, #32]
 800eb38:	4413      	add	r3, r2
 800eb3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	69fa      	ldr	r2, [r7, #28]
 800eb42:	0151      	lsls	r1, r2, #5
 800eb44:	6a3a      	ldr	r2, [r7, #32]
 800eb46:	440a      	add	r2, r1
 800eb48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb4c:	f043 030e 	orr.w	r3, r3, #14
 800eb50:	6053      	str	r3, [r2, #4]
          break;
 800eb52:	e02c      	b.n	800ebae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	015a      	lsls	r2, r3, #5
 800eb58:	6a3b      	ldr	r3, [r7, #32]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	69fa      	ldr	r2, [r7, #28]
 800eb64:	0151      	lsls	r1, r2, #5
 800eb66:	6a3a      	ldr	r2, [r7, #32]
 800eb68:	440a      	add	r2, r1
 800eb6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eb72:	6053      	str	r3, [r2, #4]
          break;
 800eb74:	e01b      	b.n	800ebae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	015a      	lsls	r2, r3, #5
 800eb7a:	6a3b      	ldr	r3, [r7, #32]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	69fa      	ldr	r2, [r7, #28]
 800eb86:	0151      	lsls	r1, r2, #5
 800eb88:	6a3a      	ldr	r2, [r7, #32]
 800eb8a:	440a      	add	r2, r1
 800eb8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eb94:	6053      	str	r3, [r2, #4]
          break;
 800eb96:	e00a      	b.n	800ebae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eba4:	461a      	mov	r2, r3
 800eba6:	2300      	movs	r3, #0
 800eba8:	6053      	str	r3, [r2, #4]
 800ebaa:	e000      	b.n	800ebae <USB_HC_StartXfer+0x3ea>
          break;
 800ebac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	6a3b      	ldr	r3, [r7, #32]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ebc4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	78db      	ldrb	r3, [r3, #3]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d004      	beq.n	800ebd8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	e003      	b.n	800ebe0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ebde:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ebe6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	6a3b      	ldr	r3, [r7, #32]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ebfa:	79fb      	ldrb	r3, [r7, #7]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d003      	beq.n	800ec08 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	e055      	b.n	800ecb0 <USB_HC_StartXfer+0x4ec>
 800ec04:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	78db      	ldrb	r3, [r3, #3]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d14e      	bne.n	800ecae <USB_HC_StartXfer+0x4ea>
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	6a1b      	ldr	r3, [r3, #32]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d04a      	beq.n	800ecae <USB_HC_StartXfer+0x4ea>
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	79db      	ldrb	r3, [r3, #7]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d146      	bne.n	800ecae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	7c9b      	ldrb	r3, [r3, #18]
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d831      	bhi.n	800ec8c <USB_HC_StartXfer+0x4c8>
 800ec28:	a201      	add	r2, pc, #4	@ (adr r2, 800ec30 <USB_HC_StartXfer+0x46c>)
 800ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2e:	bf00      	nop
 800ec30:	0800ec41 	.word	0x0800ec41
 800ec34:	0800ec65 	.word	0x0800ec65
 800ec38:	0800ec41 	.word	0x0800ec41
 800ec3c:	0800ec65 	.word	0x0800ec65
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	6a1b      	ldr	r3, [r3, #32]
 800ec44:	3303      	adds	r3, #3
 800ec46:	089b      	lsrs	r3, r3, #2
 800ec48:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ec4a:	8afa      	ldrh	r2, [r7, #22]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d91c      	bls.n	800ec90 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	699b      	ldr	r3, [r3, #24]
 800ec5a:	f043 0220 	orr.w	r2, r3, #32
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	619a      	str	r2, [r3, #24]
        }
        break;
 800ec62:	e015      	b.n	800ec90 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	6a1b      	ldr	r3, [r3, #32]
 800ec68:	3303      	adds	r3, #3
 800ec6a:	089b      	lsrs	r3, r3, #2
 800ec6c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ec6e:	8afa      	ldrh	r2, [r7, #22]
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d90a      	bls.n	800ec94 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	619a      	str	r2, [r3, #24]
        }
        break;
 800ec8a:	e003      	b.n	800ec94 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ec8c:	bf00      	nop
 800ec8e:	e002      	b.n	800ec96 <USB_HC_StartXfer+0x4d2>
        break;
 800ec90:	bf00      	nop
 800ec92:	e000      	b.n	800ec96 <USB_HC_StartXfer+0x4d2>
        break;
 800ec94:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	6999      	ldr	r1, [r3, #24]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	785a      	ldrb	r2, [r3, #1]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	6a1b      	ldr	r3, [r3, #32]
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	2000      	movs	r0, #0
 800eca6:	9000      	str	r0, [sp, #0]
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f7ff f9cf 	bl	800e04c <USB_WritePacket>
  }

  return HAL_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3728      	adds	r7, #40	@ 0x28
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	b29b      	uxth	r3, r3
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3714      	adds	r7, #20
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b089      	sub	sp, #36	@ 0x24
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	460b      	mov	r3, r1
 800ece4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ecea:	78fb      	ldrb	r3, [r7, #3]
 800ecec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	015a      	lsls	r2, r3, #5
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	0c9b      	lsrs	r3, r3, #18
 800ed02:	f003 0303 	and.w	r3, r3, #3
 800ed06:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	015a      	lsls	r2, r3, #5
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	4413      	add	r3, r2
 800ed10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	0fdb      	lsrs	r3, r3, #31
 800ed18:	f003 0301 	and.w	r3, r3, #1
 800ed1c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	015a      	lsls	r2, r3, #5
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	4413      	add	r3, r2
 800ed26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	0fdb      	lsrs	r3, r3, #31
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	f003 0320 	and.w	r3, r3, #32
 800ed3c:	2b20      	cmp	r3, #32
 800ed3e:	d10d      	bne.n	800ed5c <USB_HC_Halt+0x82>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10a      	bne.n	800ed5c <USB_HC_Halt+0x82>
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d005      	beq.n	800ed58 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d002      	beq.n	800ed58 <USB_HC_Halt+0x7e>
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d101      	bne.n	800ed5c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	e0d8      	b.n	800ef0e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d002      	beq.n	800ed68 <USB_HC_Halt+0x8e>
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	d173      	bne.n	800ee50 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	015a      	lsls	r2, r3, #5
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	4413      	add	r3, r2
 800ed70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	0151      	lsls	r1, r2, #5
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	440a      	add	r2, r1
 800ed7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed86:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	f003 0320 	and.w	r3, r3, #32
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d14a      	bne.n	800ee2a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d133      	bne.n	800ee08 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	015a      	lsls	r2, r3, #5
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	4413      	add	r3, r2
 800eda8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	69ba      	ldr	r2, [r7, #24]
 800edb0:	0151      	lsls	r1, r2, #5
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	440a      	add	r2, r1
 800edb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edbe:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	015a      	lsls	r2, r3, #5
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	4413      	add	r3, r2
 800edc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	0151      	lsls	r1, r2, #5
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	440a      	add	r2, r1
 800edd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800edde:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	3301      	adds	r3, #1
 800ede4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800edec:	d82e      	bhi.n	800ee4c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee04:	d0ec      	beq.n	800ede0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ee06:	e081      	b.n	800ef0c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	015a      	lsls	r2, r3, #5
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	4413      	add	r3, r2
 800ee10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	0151      	lsls	r1, r2, #5
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	440a      	add	r2, r1
 800ee1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ee26:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ee28:	e070      	b.n	800ef0c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	015a      	lsls	r2, r3, #5
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	4413      	add	r3, r2
 800ee32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	69ba      	ldr	r2, [r7, #24]
 800ee3a:	0151      	lsls	r1, r2, #5
 800ee3c:	69fa      	ldr	r2, [r7, #28]
 800ee3e:	440a      	add	r2, r1
 800ee40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ee48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ee4a:	e05f      	b.n	800ef0c <USB_HC_Halt+0x232>
            break;
 800ee4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ee4e:	e05d      	b.n	800ef0c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	015a      	lsls	r2, r3, #5
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	4413      	add	r3, r2
 800ee58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	69ba      	ldr	r2, [r7, #24]
 800ee60:	0151      	lsls	r1, r2, #5
 800ee62:	69fa      	ldr	r2, [r7, #28]
 800ee64:	440a      	add	r2, r1
 800ee66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ee76:	691b      	ldr	r3, [r3, #16]
 800ee78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d133      	bne.n	800eee8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	015a      	lsls	r2, r3, #5
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	4413      	add	r3, r2
 800ee88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	0151      	lsls	r1, r2, #5
 800ee92:	69fa      	ldr	r2, [r7, #28]
 800ee94:	440a      	add	r2, r1
 800ee96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	015a      	lsls	r2, r3, #5
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	4413      	add	r3, r2
 800eea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	69ba      	ldr	r2, [r7, #24]
 800eeb0:	0151      	lsls	r1, r2, #5
 800eeb2:	69fa      	ldr	r2, [r7, #28]
 800eeb4:	440a      	add	r2, r1
 800eeb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eeba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eebe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3301      	adds	r3, #1
 800eec4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eecc:	d81d      	bhi.n	800ef0a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	015a      	lsls	r2, r3, #5
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eee4:	d0ec      	beq.n	800eec0 <USB_HC_Halt+0x1e6>
 800eee6:	e011      	b.n	800ef0c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	015a      	lsls	r2, r3, #5
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	4413      	add	r3, r2
 800eef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	0151      	lsls	r1, r2, #5
 800eefa:	69fa      	ldr	r2, [r7, #28]
 800eefc:	440a      	add	r2, r1
 800eefe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e000      	b.n	800ef0c <USB_HC_Halt+0x232>
          break;
 800ef0a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3724      	adds	r7, #36	@ 0x24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
	...

0800ef1c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b087      	sub	sp, #28
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	460b      	mov	r3, r1
 800ef26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ef2c:	78fb      	ldrb	r3, [r7, #3]
 800ef2e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ef30:	2301      	movs	r3, #1
 800ef32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	04da      	lsls	r2, r3, #19
 800ef38:	4b15      	ldr	r3, [pc, #84]	@ (800ef90 <USB_DoPing+0x74>)
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	0151      	lsls	r1, r2, #5
 800ef40:	697a      	ldr	r2, [r7, #20]
 800ef42:	440a      	add	r2, r1
 800ef44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ef4c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	015a      	lsls	r2, r3, #5
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	4413      	add	r3, r2
 800ef56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef64:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ef6c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	015a      	lsls	r2, r3, #5
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	4413      	add	r3, r2
 800ef76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	371c      	adds	r7, #28
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	1ff80000 	.word	0x1ff80000

0800ef94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800efa4:	2300      	movs	r3, #0
 800efa6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7fe ff92 	bl	800ded2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800efae:	2110      	movs	r1, #16
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7fe ffeb 	bl	800df8c <USB_FlushTxFifo>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d001      	beq.n	800efc0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800efbc:	2301      	movs	r3, #1
 800efbe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff f815 	bl	800dff0 <USB_FlushRxFifo>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d001      	beq.n	800efd0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800efcc:	2301      	movs	r3, #1
 800efce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800efd0:	2300      	movs	r3, #0
 800efd2:	61bb      	str	r3, [r7, #24]
 800efd4:	e01f      	b.n	800f016 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800efec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eff4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800effc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	015a      	lsls	r2, r3, #5
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	4413      	add	r3, r2
 800f006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f00a:	461a      	mov	r2, r3
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	3301      	adds	r3, #1
 800f014:	61bb      	str	r3, [r7, #24]
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	2b0f      	cmp	r3, #15
 800f01a:	d9dc      	bls.n	800efd6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f01c:	2300      	movs	r3, #0
 800f01e:	61bb      	str	r3, [r7, #24]
 800f020:	e034      	b.n	800f08c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	015a      	lsls	r2, r3, #5
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	4413      	add	r3, r2
 800f02a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f038:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f040:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f048:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	015a      	lsls	r2, r3, #5
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	4413      	add	r3, r2
 800f052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f056:	461a      	mov	r2, r3
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	3301      	adds	r3, #1
 800f060:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f068:	d80c      	bhi.n	800f084 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	015a      	lsls	r2, r3, #5
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	4413      	add	r3, r2
 800f072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f07c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f080:	d0ec      	beq.n	800f05c <USB_StopHost+0xc8>
 800f082:	e000      	b.n	800f086 <USB_StopHost+0xf2>
        break;
 800f084:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	3301      	adds	r3, #1
 800f08a:	61bb      	str	r3, [r7, #24]
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	2b0f      	cmp	r3, #15
 800f090:	d9c7      	bls.n	800f022 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f098:	461a      	mov	r2, r3
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295
 800f09e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7fe ff01 	bl	800deb0 <USB_EnableGlobalInt>

  return ret;
 800f0ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3720      	adds	r7, #32
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f0bc:	4904      	ldr	r1, [pc, #16]	@ (800f0d0 <MX_FATFS_Init+0x18>)
 800f0be:	4805      	ldr	r0, [pc, #20]	@ (800f0d4 <MX_FATFS_Init+0x1c>)
 800f0c0:	f002 fa6a 	bl	8011598 <FATFS_LinkDriver>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4b03      	ldr	r3, [pc, #12]	@ (800f0d8 <MX_FATFS_Init+0x20>)
 800f0ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f0cc:	bf00      	nop
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	20000b2c 	.word	0x20000b2c
 800f0d4:	08011e8c 	.word	0x08011e8c
 800f0d8:	20000b28 	.word	0x20000b28

0800f0dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f0e6:	f000 f879 	bl	800f1dc <BSP_SD_IsDetected>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d001      	beq.n	800f0f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f0f0:	2302      	movs	r3, #2
 800f0f2:	e012      	b.n	800f11a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f0f4:	480b      	ldr	r0, [pc, #44]	@ (800f124 <BSP_SD_Init+0x48>)
 800f0f6:	f7fa f983 	bl	8009400 <HAL_SD_Init>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f0fe:	79fb      	ldrb	r3, [r7, #7]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d109      	bne.n	800f118 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f104:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f108:	4806      	ldr	r0, [pc, #24]	@ (800f124 <BSP_SD_Init+0x48>)
 800f10a:	f7fa ff5d 	bl	8009fc8 <HAL_SD_ConfigWideBusOperation>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d001      	beq.n	800f118 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f118:	79fb      	ldrb	r3, [r7, #7]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	200006c8 	.word	0x200006c8

0800f128 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b088      	sub	sp, #32
 800f12c:	af02      	add	r7, sp, #8
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	68f9      	ldr	r1, [r7, #12]
 800f144:	4806      	ldr	r0, [pc, #24]	@ (800f160 <BSP_SD_ReadBlocks+0x38>)
 800f146:	f7fa fa0b 	bl	8009560 <HAL_SD_ReadBlocks>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f154:	7dfb      	ldrb	r3, [r7, #23]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	200006c8 	.word	0x200006c8

0800f164 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af02      	add	r7, sp, #8
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	607a      	str	r2, [r7, #4]
 800f170:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	9300      	str	r3, [sp, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	68f9      	ldr	r1, [r7, #12]
 800f180:	4806      	ldr	r0, [pc, #24]	@ (800f19c <BSP_SD_WriteBlocks+0x38>)
 800f182:	f7fa fbcb 	bl	800991c <HAL_SD_WriteBlocks>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f190:	7dfb      	ldrb	r3, [r7, #23]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	200006c8 	.word	0x200006c8

0800f1a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f1a4:	4805      	ldr	r0, [pc, #20]	@ (800f1bc <BSP_SD_GetCardState+0x1c>)
 800f1a6:	f7fa ffa9 	bl	800a0fc <HAL_SD_GetCardState>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b04      	cmp	r3, #4
 800f1ae:	bf14      	ite	ne
 800f1b0:	2301      	movne	r3, #1
 800f1b2:	2300      	moveq	r3, #0
 800f1b4:	b2db      	uxtb	r3, r3
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	200006c8 	.word	0x200006c8

0800f1c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	4803      	ldr	r0, [pc, #12]	@ (800f1d8 <BSP_SD_GetCardInfo+0x18>)
 800f1cc:	f7fa fed0 	bl	8009f70 <HAL_SD_GetCardInfo>
}
 800f1d0:	bf00      	nop
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	200006c8 	.word	0x200006c8

0800f1dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f1e6:	f000 f80b 	bl	800f200 <BSP_PlatformIsDetected>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d101      	bne.n	800f1f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	b2db      	uxtb	r3, r3
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f206:	2301      	movs	r3, #1
 800f208:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f20a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f20e:	4806      	ldr	r0, [pc, #24]	@ (800f228 <BSP_PlatformIsDetected+0x28>)
 800f210:	f7f5 fab4 	bl	800477c <HAL_GPIO_ReadPin>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f21a:	2300      	movs	r3, #0
 800f21c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f21e:	79fb      	ldrb	r3, [r7, #7]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	40020800 	.word	0x40020800

0800f22c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	4603      	mov	r3, r0
 800f234:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f236:	4b0b      	ldr	r3, [pc, #44]	@ (800f264 <SD_CheckStatus+0x38>)
 800f238:	2201      	movs	r2, #1
 800f23a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f23c:	f7ff ffb0 	bl	800f1a0 <BSP_SD_GetCardState>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d107      	bne.n	800f256 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f246:	4b07      	ldr	r3, [pc, #28]	@ (800f264 <SD_CheckStatus+0x38>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	f023 0301 	bic.w	r3, r3, #1
 800f250:	b2da      	uxtb	r2, r3
 800f252:	4b04      	ldr	r3, [pc, #16]	@ (800f264 <SD_CheckStatus+0x38>)
 800f254:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f256:	4b03      	ldr	r3, [pc, #12]	@ (800f264 <SD_CheckStatus+0x38>)
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	b2db      	uxtb	r3, r3
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	20000009 	.word	0x20000009

0800f268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	4603      	mov	r3, r0
 800f270:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f272:	4b0b      	ldr	r3, [pc, #44]	@ (800f2a0 <SD_initialize+0x38>)
 800f274:	2201      	movs	r2, #1
 800f276:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f278:	f7ff ff30 	bl	800f0dc <BSP_SD_Init>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d107      	bne.n	800f292 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f282:	79fb      	ldrb	r3, [r7, #7]
 800f284:	4618      	mov	r0, r3
 800f286:	f7ff ffd1 	bl	800f22c <SD_CheckStatus>
 800f28a:	4603      	mov	r3, r0
 800f28c:	461a      	mov	r2, r3
 800f28e:	4b04      	ldr	r3, [pc, #16]	@ (800f2a0 <SD_initialize+0x38>)
 800f290:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f292:	4b03      	ldr	r3, [pc, #12]	@ (800f2a0 <SD_initialize+0x38>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	b2db      	uxtb	r3, r3
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	20000009 	.word	0x20000009

0800f2a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff ffbb 	bl	800f22c <SD_CheckStatus>
 800f2b6:	4603      	mov	r3, r0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60b9      	str	r1, [r7, #8]
 800f2c8:	607a      	str	r2, [r7, #4]
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	68b8      	ldr	r0, [r7, #8]
 800f2de:	f7ff ff23 	bl	800f128 <BSP_SD_ReadBlocks>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d107      	bne.n	800f2f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f2e8:	bf00      	nop
 800f2ea:	f7ff ff59 	bl	800f1a0 <BSP_SD_GetCardState>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1fa      	bne.n	800f2ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b086      	sub	sp, #24
 800f306:	af00      	add	r7, sp, #0
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]
 800f30e:	4603      	mov	r3, r0
 800f310:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f316:	f04f 33ff 	mov.w	r3, #4294967295
 800f31a:	683a      	ldr	r2, [r7, #0]
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	68b8      	ldr	r0, [r7, #8]
 800f320:	f7ff ff20 	bl	800f164 <BSP_SD_WriteBlocks>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d107      	bne.n	800f33a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f32a:	bf00      	nop
 800f32c:	f7ff ff38 	bl	800f1a0 <BSP_SD_GetCardState>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1fa      	bne.n	800f32c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f336:	2300      	movs	r3, #0
 800f338:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08c      	sub	sp, #48	@ 0x30
 800f348:	af00      	add	r7, sp, #0
 800f34a:	4603      	mov	r3, r0
 800f34c:	603a      	str	r2, [r7, #0]
 800f34e:	71fb      	strb	r3, [r7, #7]
 800f350:	460b      	mov	r3, r1
 800f352:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f35a:	4b25      	ldr	r3, [pc, #148]	@ (800f3f0 <SD_ioctl+0xac>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <SD_ioctl+0x28>
 800f368:	2303      	movs	r3, #3
 800f36a:	e03c      	b.n	800f3e6 <SD_ioctl+0xa2>

  switch (cmd)
 800f36c:	79bb      	ldrb	r3, [r7, #6]
 800f36e:	2b03      	cmp	r3, #3
 800f370:	d834      	bhi.n	800f3dc <SD_ioctl+0x98>
 800f372:	a201      	add	r2, pc, #4	@ (adr r2, 800f378 <SD_ioctl+0x34>)
 800f374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f378:	0800f389 	.word	0x0800f389
 800f37c:	0800f391 	.word	0x0800f391
 800f380:	0800f3a9 	.word	0x0800f3a9
 800f384:	0800f3c3 	.word	0x0800f3c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f388:	2300      	movs	r3, #0
 800f38a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f38e:	e028      	b.n	800f3e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f390:	f107 030c 	add.w	r3, r7, #12
 800f394:	4618      	mov	r0, r3
 800f396:	f7ff ff13 	bl	800f1c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3a6:	e01c      	b.n	800f3e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7ff ff07 	bl	800f1c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3c0:	e00f      	b.n	800f3e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f3c2:	f107 030c 	add.w	r3, r7, #12
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7ff fefa 	bl	800f1c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ce:	0a5a      	lsrs	r2, r3, #9
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3da:	e002      	b.n	800f3e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f3dc:	2304      	movs	r3, #4
 800f3de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3730      	adds	r7, #48	@ 0x30
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20000009 	.word	0x20000009

0800f3f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f3f4:	b590      	push	{r4, r7, lr}
 800f3f6:	b089      	sub	sp, #36	@ 0x24
 800f3f8:	af04      	add	r7, sp, #16
 800f3fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	2202      	movs	r2, #2
 800f400:	2102      	movs	r1, #2
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fc83 	bl	800fd0e <USBH_FindInterface>
 800f408:	4603      	mov	r3, r0
 800f40a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
 800f40e:	2bff      	cmp	r3, #255	@ 0xff
 800f410:	d002      	beq.n	800f418 <USBH_CDC_InterfaceInit+0x24>
 800f412:	7bfb      	ldrb	r3, [r7, #15]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d901      	bls.n	800f41c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f418:	2302      	movs	r3, #2
 800f41a:	e13d      	b.n	800f698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f41c:	7bfb      	ldrb	r3, [r7, #15]
 800f41e:	4619      	mov	r1, r3
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 fc58 	bl	800fcd6 <USBH_SelectInterface>
 800f426:	4603      	mov	r3, r0
 800f428:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f42a:	7bbb      	ldrb	r3, [r7, #14]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d001      	beq.n	800f434 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f430:	2302      	movs	r3, #2
 800f432:	e131      	b.n	800f698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800f43a:	2050      	movs	r0, #80	@ 0x50
 800f43c:	f002 fbba 	bl	8011bb4 <malloc>
 800f440:	4603      	mov	r3, r0
 800f442:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f44a:	69db      	ldr	r3, [r3, #28]
 800f44c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d101      	bne.n	800f458 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f454:	2302      	movs	r3, #2
 800f456:	e11f      	b.n	800f698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f458:	2250      	movs	r2, #80	@ 0x50
 800f45a:	2100      	movs	r1, #0
 800f45c:	68b8      	ldr	r0, [r7, #8]
 800f45e:	f002 fc67 	bl	8011d30 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	211a      	movs	r1, #26
 800f468:	fb01 f303 	mul.w	r3, r1, r3
 800f46c:	4413      	add	r3, r2
 800f46e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	b25b      	sxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	da15      	bge.n	800f4a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	211a      	movs	r1, #26
 800f480:	fb01 f303 	mul.w	r3, r1, r3
 800f484:	4413      	add	r3, r2
 800f486:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f48a:	781a      	ldrb	r2, [r3, #0]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	211a      	movs	r1, #26
 800f496:	fb01 f303 	mul.w	r3, r1, r3
 800f49a:	4413      	add	r3, r2
 800f49c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f4a0:	881a      	ldrh	r2, [r3, #0]
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	785b      	ldrb	r3, [r3, #1]
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f001 ffc4 	bl	801143a <USBH_AllocPipe>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	7819      	ldrb	r1, [r3, #0]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	7858      	ldrb	r0, [r3, #1]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f4ce:	68ba      	ldr	r2, [r7, #8]
 800f4d0:	8952      	ldrh	r2, [r2, #10]
 800f4d2:	9202      	str	r2, [sp, #8]
 800f4d4:	2203      	movs	r2, #3
 800f4d6:	9201      	str	r2, [sp, #4]
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	4623      	mov	r3, r4
 800f4dc:	4602      	mov	r2, r0
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f001 ff7c 	bl	80113dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f002 fadb 	bl	8011aa8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	210a      	movs	r1, #10
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 fc08 	bl	800fd0e <USBH_FindInterface>
 800f4fe:	4603      	mov	r3, r0
 800f500:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	2bff      	cmp	r3, #255	@ 0xff
 800f506:	d002      	beq.n	800f50e <USBH_CDC_InterfaceInit+0x11a>
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d901      	bls.n	800f512 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f50e:	2302      	movs	r3, #2
 800f510:	e0c2      	b.n	800f698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f512:	7bfb      	ldrb	r3, [r7, #15]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	211a      	movs	r1, #26
 800f518:	fb01 f303 	mul.w	r3, r1, r3
 800f51c:	4413      	add	r3, r2
 800f51e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	b25b      	sxtb	r3, r3
 800f526:	2b00      	cmp	r3, #0
 800f528:	da16      	bge.n	800f558 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f52a:	7bfb      	ldrb	r3, [r7, #15]
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	211a      	movs	r1, #26
 800f530:	fb01 f303 	mul.w	r3, r1, r3
 800f534:	4413      	add	r3, r2
 800f536:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f53a:	781a      	ldrb	r2, [r3, #0]
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f540:	7bfb      	ldrb	r3, [r7, #15]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	211a      	movs	r1, #26
 800f546:	fb01 f303 	mul.w	r3, r1, r3
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f550:	881a      	ldrh	r2, [r3, #0]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	835a      	strh	r2, [r3, #26]
 800f556:	e015      	b.n	800f584 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	211a      	movs	r1, #26
 800f55e:	fb01 f303 	mul.w	r3, r1, r3
 800f562:	4413      	add	r3, r2
 800f564:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f568:	781a      	ldrb	r2, [r3, #0]
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f56e:	7bfb      	ldrb	r3, [r7, #15]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	211a      	movs	r1, #26
 800f574:	fb01 f303 	mul.w	r3, r1, r3
 800f578:	4413      	add	r3, r2
 800f57a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f57e:	881a      	ldrh	r2, [r3, #0]
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	211a      	movs	r1, #26
 800f58a:	fb01 f303 	mul.w	r3, r1, r3
 800f58e:	4413      	add	r3, r2
 800f590:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	b25b      	sxtb	r3, r3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	da16      	bge.n	800f5ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	211a      	movs	r1, #26
 800f5a2:	fb01 f303 	mul.w	r3, r1, r3
 800f5a6:	4413      	add	r3, r2
 800f5a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5ac:	781a      	ldrb	r2, [r3, #0]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f5b2:	7bfb      	ldrb	r3, [r7, #15]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	211a      	movs	r1, #26
 800f5b8:	fb01 f303 	mul.w	r3, r1, r3
 800f5bc:	4413      	add	r3, r2
 800f5be:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f5c2:	881a      	ldrh	r2, [r3, #0]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	835a      	strh	r2, [r3, #26]
 800f5c8:	e015      	b.n	800f5f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	211a      	movs	r1, #26
 800f5d0:	fb01 f303 	mul.w	r3, r1, r3
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	211a      	movs	r1, #26
 800f5e6:	fb01 f303 	mul.w	r3, r1, r3
 800f5ea:	4413      	add	r3, r2
 800f5ec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f5f0:	881a      	ldrh	r2, [r3, #0]
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	7b9b      	ldrb	r3, [r3, #14]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f001 ff1c 	bl	801143a <USBH_AllocPipe>
 800f602:	4603      	mov	r3, r0
 800f604:	461a      	mov	r2, r3
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	7bdb      	ldrb	r3, [r3, #15]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f001 ff12 	bl	801143a <USBH_AllocPipe>
 800f616:	4603      	mov	r3, r0
 800f618:	461a      	mov	r2, r3
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	7b59      	ldrb	r1, [r3, #13]
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	7b98      	ldrb	r0, [r3, #14]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	8b12      	ldrh	r2, [r2, #24]
 800f636:	9202      	str	r2, [sp, #8]
 800f638:	2202      	movs	r2, #2
 800f63a:	9201      	str	r2, [sp, #4]
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	4623      	mov	r3, r4
 800f640:	4602      	mov	r2, r0
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f001 feca 	bl	80113dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	7b19      	ldrb	r1, [r3, #12]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	7bd8      	ldrb	r0, [r3, #15]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	8b52      	ldrh	r2, [r2, #26]
 800f660:	9202      	str	r2, [sp, #8]
 800f662:	2202      	movs	r2, #2
 800f664:	9201      	str	r2, [sp, #4]
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	4623      	mov	r3, r4
 800f66a:	4602      	mov	r2, r0
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f001 feb5 	bl	80113dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2200      	movs	r2, #0
 800f676:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	7b5b      	ldrb	r3, [r3, #13]
 800f67e:	2200      	movs	r2, #0
 800f680:	4619      	mov	r1, r3
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f002 fa10 	bl	8011aa8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	7b1b      	ldrb	r3, [r3, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	4619      	mov	r1, r3
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f002 fa09 	bl	8011aa8 <USBH_LL_SetToggle>

  return USBH_OK;
 800f696:	2300      	movs	r3, #0
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3714      	adds	r7, #20
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd90      	pop	{r4, r7, pc}

0800f6a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f6ae:	69db      	ldr	r3, [r3, #28]
 800f6b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00e      	beq.n	800f6d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	4619      	mov	r1, r3
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f001 feaa 	bl	801141a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f001 fed5 	bl	801147c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	7b1b      	ldrb	r3, [r3, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00e      	beq.n	800f6fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	7b1b      	ldrb	r3, [r3, #12]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f001 fe97 	bl	801141a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	7b1b      	ldrb	r3, [r3, #12]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f001 fec2 	bl	801147c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	7b5b      	ldrb	r3, [r3, #13]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00e      	beq.n	800f724 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	7b5b      	ldrb	r3, [r3, #13]
 800f70a:	4619      	mov	r1, r3
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f001 fe84 	bl	801141a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	7b5b      	ldrb	r3, [r3, #13]
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f001 feaf 	bl	801147c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2200      	movs	r2, #0
 800f722:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00b      	beq.n	800f748 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f736:	69db      	ldr	r3, [r3, #28]
 800f738:	4618      	mov	r0, r3
 800f73a:	f002 fa43 	bl	8011bc4 <free>
    phost->pActiveClass->pData = 0U;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f744:	2200      	movs	r2, #0
 800f746:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b084      	sub	sp, #16
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3340      	adds	r3, #64	@ 0x40
 800f768:	4619      	mov	r1, r3
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 f8b1 	bl	800f8d2 <GetLineCoding>
 800f770:	4603      	mov	r3, r0
 800f772:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f774:	7afb      	ldrb	r3, [r7, #11]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d105      	bne.n	800f786 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f780:	2102      	movs	r1, #2
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f786:	7afb      	ldrb	r3, [r7, #11]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3710      	adds	r7, #16
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f798:	2301      	movs	r3, #1
 800f79a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f7a6:	69db      	ldr	r3, [r3, #28]
 800f7a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f7b0:	2b04      	cmp	r3, #4
 800f7b2:	d877      	bhi.n	800f8a4 <USBH_CDC_Process+0x114>
 800f7b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7bc <USBH_CDC_Process+0x2c>)
 800f7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ba:	bf00      	nop
 800f7bc:	0800f7d1 	.word	0x0800f7d1
 800f7c0:	0800f7d7 	.word	0x0800f7d7
 800f7c4:	0800f807 	.word	0x0800f807
 800f7c8:	0800f87b 	.word	0x0800f87b
 800f7cc:	0800f889 	.word	0x0800f889
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f7d4:	e06d      	b.n	800f8b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 f897 	bl	800f910 <SetLineCoding>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f7e6:	7bbb      	ldrb	r3, [r7, #14]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d104      	bne.n	800f7f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	2202      	movs	r2, #2
 800f7f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f7f4:	e058      	b.n	800f8a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f7f6:	7bbb      	ldrb	r3, [r7, #14]
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d055      	beq.n	800f8a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2204      	movs	r2, #4
 800f800:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f804:	e050      	b.n	800f8a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	3340      	adds	r3, #64	@ 0x40
 800f80a:	4619      	mov	r1, r3
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f860 	bl	800f8d2 <GetLineCoding>
 800f812:	4603      	mov	r3, r0
 800f814:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f816:	7bbb      	ldrb	r3, [r7, #14]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d126      	bne.n	800f86a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f82e:	791b      	ldrb	r3, [r3, #4]
 800f830:	429a      	cmp	r2, r3
 800f832:	d13b      	bne.n	800f8ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f83e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f840:	429a      	cmp	r2, r3
 800f842:	d133      	bne.n	800f8ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f84e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f850:	429a      	cmp	r2, r3
 800f852:	d12b      	bne.n	800f8ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f85c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f85e:	429a      	cmp	r2, r3
 800f860:	d124      	bne.n	800f8ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f958 	bl	800fb18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f868:	e020      	b.n	800f8ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f86a:	7bbb      	ldrb	r3, [r7, #14]
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d01d      	beq.n	800f8ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	2204      	movs	r2, #4
 800f874:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f878:	e018      	b.n	800f8ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 f867 	bl	800f94e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 f8da 	bl	800fa3a <CDC_ProcessReception>
      break;
 800f886:	e014      	b.n	800f8b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f888:	2100      	movs	r1, #0
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f001 f81e 	bl	80108cc <USBH_ClrFeature>
 800f890:	4603      	mov	r3, r0
 800f892:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10a      	bne.n	800f8b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f8a2:	e005      	b.n	800f8b0 <USBH_CDC_Process+0x120>

    default:
      break;
 800f8a4:	bf00      	nop
 800f8a6:	e004      	b.n	800f8b2 <USBH_CDC_Process+0x122>
      break;
 800f8a8:	bf00      	nop
 800f8aa:	e002      	b.n	800f8b2 <USBH_CDC_Process+0x122>
      break;
 800f8ac:	bf00      	nop
 800f8ae:	e000      	b.n	800f8b2 <USBH_CDC_Process+0x122>
      break;
 800f8b0:	bf00      	nop

  }

  return status;
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3710      	adds	r7, #16
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	370c      	adds	r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr

0800f8d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b082      	sub	sp, #8
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
 800f8da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	22a1      	movs	r2, #161	@ 0xa1
 800f8e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2221      	movs	r2, #33	@ 0x21
 800f8e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2207      	movs	r2, #7
 800f8f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	2207      	movs	r2, #7
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f001 fb17 	bl	8010f34 <USBH_CtlReq>
 800f906:	4603      	mov	r3, r0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2221      	movs	r2, #33	@ 0x21
 800f91e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2220      	movs	r2, #32
 800f924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2207      	movs	r2, #7
 800f936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2207      	movs	r2, #7
 800f93c:	4619      	mov	r1, r3
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f001 faf8 	bl	8010f34 <USBH_CtlReq>
 800f944:	4603      	mov	r3, r0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3708      	adds	r7, #8
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b086      	sub	sp, #24
 800f952:	af02      	add	r7, sp, #8
 800f954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f95c:	69db      	ldr	r3, [r3, #28]
 800f95e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f960:	2300      	movs	r3, #0
 800f962:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d002      	beq.n	800f974 <CDC_ProcessTransmission+0x26>
 800f96e:	2b02      	cmp	r3, #2
 800f970:	d023      	beq.n	800f9ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f972:	e05e      	b.n	800fa32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	8b12      	ldrh	r2, [r2, #24]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d90b      	bls.n	800f998 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	69d9      	ldr	r1, [r3, #28]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	8b1a      	ldrh	r2, [r3, #24]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	7b5b      	ldrb	r3, [r3, #13]
 800f98c:	2001      	movs	r0, #1
 800f98e:	9000      	str	r0, [sp, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f001 fce0 	bl	8011356 <USBH_BulkSendData>
 800f996:	e00b      	b.n	800f9b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	7b5b      	ldrb	r3, [r3, #13]
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	9000      	str	r0, [sp, #0]
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f001 fcd3 	bl	8011356 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f9b8:	e03b      	b.n	800fa32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	7b5b      	ldrb	r3, [r3, #13]
 800f9be:	4619      	mov	r1, r3
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f002 f847 	bl	8011a54 <USBH_LL_GetURBState>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f9ca:	7afb      	ldrb	r3, [r7, #11]
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d128      	bne.n	800fa22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	8b12      	ldrh	r2, [r2, #24]
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d90e      	bls.n	800f9fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	8b12      	ldrh	r2, [r2, #24]
 800f9e4:	1a9a      	subs	r2, r3, r2
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	69db      	ldr	r3, [r3, #28]
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	8b12      	ldrh	r2, [r2, #24]
 800f9f2:	441a      	add	r2, r3
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	61da      	str	r2, [r3, #28]
 800f9f8:	e002      	b.n	800fa00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d004      	beq.n	800fa12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800fa10:	e00e      	b.n	800fa30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 f868 	bl	800faf0 <USBH_CDC_TransmitCallback>
      break;
 800fa20:	e006      	b.n	800fa30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800fa22:	7afb      	ldrb	r3, [r7, #11]
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d103      	bne.n	800fa30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800fa30:	bf00      	nop
  }
}
 800fa32:	bf00      	nop
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b086      	sub	sp, #24
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa48:	69db      	ldr	r3, [r3, #28]
 800fa4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800fa56:	2b03      	cmp	r3, #3
 800fa58:	d002      	beq.n	800fa60 <CDC_ProcessReception+0x26>
 800fa5a:	2b04      	cmp	r3, #4
 800fa5c:	d00e      	beq.n	800fa7c <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800fa5e:	e043      	b.n	800fae8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	6a19      	ldr	r1, [r3, #32]
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	8b5a      	ldrh	r2, [r3, #26]
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	7b1b      	ldrb	r3, [r3, #12]
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f001 fc97 	bl	80113a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	2204      	movs	r2, #4
 800fa76:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800fa7a:	e035      	b.n	800fae8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	7b1b      	ldrb	r3, [r3, #12]
 800fa80:	4619      	mov	r1, r3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f001 ffe6 	bl	8011a54 <USBH_LL_GetURBState>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fa8c:	7cfb      	ldrb	r3, [r7, #19]
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d129      	bne.n	800fae6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	7b1b      	ldrb	r3, [r3, #12]
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f001 ff49 	bl	8011930 <USBH_LL_GetLastXferSize>
 800fa9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d016      	beq.n	800fad8 <CDC_ProcessReception+0x9e>
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	8b5b      	ldrh	r3, [r3, #26]
 800faae:	461a      	mov	r2, r3
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d110      	bne.n	800fad8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	1ad2      	subs	r2, r2, r3
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	6a1a      	ldr	r2, [r3, #32]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	441a      	add	r2, r3
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2203      	movs	r2, #3
 800fad2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800fad6:	e006      	b.n	800fae6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f80f 	bl	800fb04 <USBH_CDC_ReceiveCallback>
      break;
 800fae6:	bf00      	nop
  }
}
 800fae8:	bf00      	nop
 800faea:	3718      	adds	r7, #24
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800faf8:	bf00      	nop
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb0c:	bf00      	nop
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	4613      	mov	r3, r2
 800fb38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fb40:	2302      	movs	r3, #2
 800fb42:	e029      	b.n	800fb98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	79fa      	ldrb	r2, [r7, #7]
 800fb48:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f000 f81f 	bl	800fba0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d003      	beq.n	800fb90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f001 fe19 	bl	80117c8 <USBH_LL_Init>

  return USBH_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fba8:	2300      	movs	r3, #0
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	e009      	b.n	800fbc2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	33e0      	adds	r3, #224	@ 0xe0
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	4413      	add	r3, r2
 800fbb8:	2200      	movs	r2, #0
 800fbba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2b0f      	cmp	r3, #15
 800fbc6:	d9f2      	bls.n	800fbae <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fbc8:	2300      	movs	r3, #0
 800fbca:	60fb      	str	r3, [r7, #12]
 800fbcc:	e009      	b.n	800fbe2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fbd8:	2200      	movs	r2, #0
 800fbda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	60fb      	str	r3, [r7, #12]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbe8:	d3f1      	bcc.n	800fbce <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2201      	movs	r2, #1
 800fc08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2240      	movs	r2, #64	@ 0x40
 800fc0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	331c      	adds	r3, #28
 800fc3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fc3e:	2100      	movs	r1, #0
 800fc40:	4618      	mov	r0, r3
 800fc42:	f002 f875 	bl	8011d30 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fc4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc50:	2100      	movs	r1, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	f002 f86c 	bl	8011d30 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fc5e:	2212      	movs	r2, #18
 800fc60:	2100      	movs	r1, #0
 800fc62:	4618      	mov	r0, r3
 800fc64:	f002 f864 	bl	8011d30 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fc6e:	223e      	movs	r2, #62	@ 0x3e
 800fc70:	2100      	movs	r1, #0
 800fc72:	4618      	mov	r0, r3
 800fc74:	f002 f85c 	bl	8011d30 <memset>

  return USBH_OK;
 800fc78:	2300      	movs	r3, #0
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800fc82:	b480      	push	{r7}
 800fc84:	b085      	sub	sp, #20
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d016      	beq.n	800fcc4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d10e      	bne.n	800fcbe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fca6:	1c59      	adds	r1, r3, #1
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	33de      	adds	r3, #222	@ 0xde
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	73fb      	strb	r3, [r7, #15]
 800fcbc:	e004      	b.n	800fcc8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	73fb      	strb	r3, [r7, #15]
 800fcc2:	e001      	b.n	800fcc8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3714      	adds	r7, #20
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800fcd6:	b480      	push	{r7}
 800fcd8:	b085      	sub	sp, #20
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	460b      	mov	r3, r1
 800fce0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800fce2:	2300      	movs	r3, #0
 800fce4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800fcec:	78fa      	ldrb	r2, [r7, #3]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d204      	bcs.n	800fcfc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	78fa      	ldrb	r2, [r7, #3]
 800fcf6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800fcfa:	e001      	b.n	800fd00 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800fcfc:	2302      	movs	r3, #2
 800fcfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr

0800fd0e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800fd0e:	b480      	push	{r7}
 800fd10:	b087      	sub	sp, #28
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	4608      	mov	r0, r1
 800fd18:	4611      	mov	r1, r2
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	70fb      	strb	r3, [r7, #3]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70bb      	strb	r3, [r7, #2]
 800fd24:	4613      	mov	r3, r2
 800fd26:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fd36:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fd38:	e025      	b.n	800fd86 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800fd3a:	7dfb      	ldrb	r3, [r7, #23]
 800fd3c:	221a      	movs	r2, #26
 800fd3e:	fb02 f303 	mul.w	r3, r2, r3
 800fd42:	3308      	adds	r3, #8
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	4413      	add	r3, r2
 800fd48:	3302      	adds	r3, #2
 800fd4a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	795b      	ldrb	r3, [r3, #5]
 800fd50:	78fa      	ldrb	r2, [r7, #3]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d002      	beq.n	800fd5c <USBH_FindInterface+0x4e>
 800fd56:	78fb      	ldrb	r3, [r7, #3]
 800fd58:	2bff      	cmp	r3, #255	@ 0xff
 800fd5a:	d111      	bne.n	800fd80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fd60:	78ba      	ldrb	r2, [r7, #2]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d002      	beq.n	800fd6c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fd66:	78bb      	ldrb	r3, [r7, #2]
 800fd68:	2bff      	cmp	r3, #255	@ 0xff
 800fd6a:	d109      	bne.n	800fd80 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fd70:	787a      	ldrb	r2, [r7, #1]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d002      	beq.n	800fd7c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fd76:	787b      	ldrb	r3, [r7, #1]
 800fd78:	2bff      	cmp	r3, #255	@ 0xff
 800fd7a:	d101      	bne.n	800fd80 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	e006      	b.n	800fd8e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800fd80:	7dfb      	ldrb	r3, [r7, #23]
 800fd82:	3301      	adds	r3, #1
 800fd84:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fd86:	7dfb      	ldrb	r3, [r7, #23]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d9d6      	bls.n	800fd3a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800fd8c:	23ff      	movs	r3, #255	@ 0xff
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	371c      	adds	r7, #28
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b082      	sub	sp, #8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f001 fd4c 	bl	8011840 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800fda8:	2101      	movs	r1, #1
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f001 fe65 	bl	8011a7a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800fdb0:	2300      	movs	r3, #0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af04      	add	r7, sp, #16
 800fdc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d102      	bne.n	800fdde <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2203      	movs	r2, #3
 800fddc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	2b0b      	cmp	r3, #11
 800fde6:	f200 81bc 	bhi.w	8010162 <USBH_Process+0x3a6>
 800fdea:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf0 <USBH_Process+0x34>)
 800fdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf0:	0800fe21 	.word	0x0800fe21
 800fdf4:	0800fe53 	.word	0x0800fe53
 800fdf8:	0800febd 	.word	0x0800febd
 800fdfc:	080100fd 	.word	0x080100fd
 800fe00:	08010163 	.word	0x08010163
 800fe04:	0800ff5d 	.word	0x0800ff5d
 800fe08:	080100a3 	.word	0x080100a3
 800fe0c:	0800ff93 	.word	0x0800ff93
 800fe10:	0800ffb3 	.word	0x0800ffb3
 800fe14:	0800ffd1 	.word	0x0800ffd1
 800fe18:	08010015 	.word	0x08010015
 800fe1c:	080100e5 	.word	0x080100e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f000 819c 	beq.w	8010166 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800fe34:	20c8      	movs	r0, #200	@ 0xc8
 800fe36:	f001 fe6a 	bl	8011b0e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f001 fd5d 	bl	80118fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800fe50:	e189      	b.n	8010166 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d107      	bne.n	800fe6e <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2202      	movs	r2, #2
 800fe6a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800fe6c:	e18a      	b.n	8010184 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800fe74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fe78:	d914      	bls.n	800fea4 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fe80:	3301      	adds	r3, #1
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800fe90:	2b03      	cmp	r3, #3
 800fe92:	d903      	bls.n	800fe9c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	220d      	movs	r2, #13
 800fe98:	701a      	strb	r2, [r3, #0]
      break;
 800fe9a:	e173      	b.n	8010184 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	701a      	strb	r2, [r3, #0]
      break;
 800fea2:	e16f      	b.n	8010184 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800feaa:	f103 020a 	add.w	r2, r3, #10
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800feb4:	200a      	movs	r0, #10
 800feb6:	f001 fe2a 	bl	8011b0e <USBH_Delay>
      break;
 800feba:	e163      	b.n	8010184 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d005      	beq.n	800fed2 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fecc:	2104      	movs	r1, #4
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fed2:	2064      	movs	r0, #100	@ 0x64
 800fed4:	f001 fe1b 	bl	8011b0e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f001 fce7 	bl	80118ac <USBH_LL_GetSpeed>
 800fede:	4603      	mov	r3, r0
 800fee0:	461a      	mov	r2, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2205      	movs	r2, #5
 800feec:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800feee:	2100      	movs	r1, #0
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f001 faa2 	bl	801143a <USBH_AllocPipe>
 800fef6:	4603      	mov	r3, r0
 800fef8:	461a      	mov	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800fefe:	2180      	movs	r1, #128	@ 0x80
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f001 fa9a 	bl	801143a <USBH_AllocPipe>
 800ff06:	4603      	mov	r3, r0
 800ff08:	461a      	mov	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	7919      	ldrb	r1, [r3, #4]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ff22:	9202      	str	r2, [sp, #8]
 800ff24:	2200      	movs	r2, #0
 800ff26:	9201      	str	r2, [sp, #4]
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2280      	movs	r2, #128	@ 0x80
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f001 fa54 	bl	80113dc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	7959      	ldrb	r1, [r3, #5]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ff48:	9202      	str	r2, [sp, #8]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	9201      	str	r2, [sp, #4]
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	4603      	mov	r3, r0
 800ff52:	2200      	movs	r2, #0
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f001 fa41 	bl	80113dc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ff5a:	e113      	b.n	8010184 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 f917 	bl	8010190 <USBH_HandleEnum>
 800ff62:	4603      	mov	r3, r0
 800ff64:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ff66:	7bbb      	ldrb	r3, [r7, #14]
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	f040 80fd 	bne.w	801016a <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d103      	bne.n	800ff8a <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2208      	movs	r2, #8
 800ff86:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ff88:	e0ef      	b.n	801016a <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2207      	movs	r2, #7
 800ff8e:	701a      	strb	r2, [r3, #0]
      break;
 800ff90:	e0eb      	b.n	801016a <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	f000 80e8 	beq.w	801016e <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2208      	movs	r2, #8
 800ffae:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800ffb0:	e0dd      	b.n	801016e <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ffb8:	4619      	mov	r1, r3
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fc3f 	bl	801083e <USBH_SetCfg>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f040 80d5 	bne.w	8010172 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2209      	movs	r2, #9
 800ffcc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800ffce:	e0d0      	b.n	8010172 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ffd6:	f003 0320 	and.w	r3, r3, #32
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d016      	beq.n	801000c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ffde:	2101      	movs	r1, #1
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fc4f 	bl	8010884 <USBH_SetFeature>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d103      	bne.n	800fffa <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	220a      	movs	r2, #10
 800fff6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800fff8:	e0bd      	b.n	8010176 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800fffa:	7bbb      	ldrb	r3, [r7, #14]
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	2b03      	cmp	r3, #3
 8010000:	f040 80b9 	bne.w	8010176 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	220a      	movs	r2, #10
 8010008:	701a      	strb	r2, [r3, #0]
      break;
 801000a:	e0b4      	b.n	8010176 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	220a      	movs	r2, #10
 8010010:	701a      	strb	r2, [r3, #0]
      break;
 8010012:	e0b0      	b.n	8010176 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 80ad 	beq.w	801017a <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010028:	2300      	movs	r3, #0
 801002a:	73fb      	strb	r3, [r7, #15]
 801002c:	e016      	b.n	801005c <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801002e:	7bfa      	ldrb	r2, [r7, #15]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	32de      	adds	r2, #222	@ 0xde
 8010034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010038:	791a      	ldrb	r2, [r3, #4]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8010040:	429a      	cmp	r2, r3
 8010042:	d108      	bne.n	8010056 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010044:	7bfa      	ldrb	r2, [r7, #15]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	32de      	adds	r2, #222	@ 0xde
 801004a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8010054:	e005      	b.n	8010062 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010056:	7bfb      	ldrb	r3, [r7, #15]
 8010058:	3301      	adds	r3, #1
 801005a:	73fb      	strb	r3, [r7, #15]
 801005c:	7bfb      	ldrb	r3, [r7, #15]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d0e5      	beq.n	801002e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010068:	2b00      	cmp	r3, #0
 801006a:	d016      	beq.n	801009a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	4798      	blx	r3
 8010078:	4603      	mov	r3, r0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d109      	bne.n	8010092 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2206      	movs	r2, #6
 8010082:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801008a:	2103      	movs	r1, #3
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010090:	e073      	b.n	801017a <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	220d      	movs	r2, #13
 8010096:	701a      	strb	r2, [r3, #0]
      break;
 8010098:	e06f      	b.n	801017a <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	220d      	movs	r2, #13
 801009e:	701a      	strb	r2, [r3, #0]
      break;
 80100a0:	e06b      	b.n	801017a <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d017      	beq.n	80100dc <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	4798      	blx	r3
 80100b8:	4603      	mov	r3, r0
 80100ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80100bc:	7bbb      	ldrb	r3, [r7, #14]
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d103      	bne.n	80100cc <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	220b      	movs	r2, #11
 80100c8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80100ca:	e058      	b.n	801017e <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 80100cc:	7bbb      	ldrb	r3, [r7, #14]
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d154      	bne.n	801017e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	220d      	movs	r2, #13
 80100d8:	701a      	strb	r2, [r3, #0]
      break;
 80100da:	e050      	b.n	801017e <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	220d      	movs	r2, #13
 80100e0:	701a      	strb	r2, [r3, #0]
      break;
 80100e2:	e04c      	b.n	801017e <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d049      	beq.n	8010182 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	4798      	blx	r3
      }
      break;
 80100fa:	e042      	b.n	8010182 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff fd4b 	bl	800fba0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010110:	2b00      	cmp	r3, #0
 8010112:	d009      	beq.n	8010128 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801012e:	2b00      	cmp	r3, #0
 8010130:	d005      	beq.n	801013e <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010138:	2105      	movs	r1, #5
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b01      	cmp	r3, #1
 8010148:	d107      	bne.n	801015a <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff fe21 	bl	800fd9a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010158:	e014      	b.n	8010184 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f001 fb70 	bl	8011840 <USBH_LL_Start>
      break;
 8010160:	e010      	b.n	8010184 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8010162:	bf00      	nop
 8010164:	e00e      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 8010166:	bf00      	nop
 8010168:	e00c      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 801016a:	bf00      	nop
 801016c:	e00a      	b.n	8010184 <USBH_Process+0x3c8>
    break;
 801016e:	bf00      	nop
 8010170:	e008      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 8010172:	bf00      	nop
 8010174:	e006      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 8010176:	bf00      	nop
 8010178:	e004      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 801017a:	bf00      	nop
 801017c:	e002      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 801017e:	bf00      	nop
 8010180:	e000      	b.n	8010184 <USBH_Process+0x3c8>
      break;
 8010182:	bf00      	nop
  }
  return USBH_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop

08010190 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b088      	sub	sp, #32
 8010194:	af04      	add	r7, sp, #16
 8010196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010198:	2301      	movs	r3, #1
 801019a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 801019c:	2301      	movs	r3, #1
 801019e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	785b      	ldrb	r3, [r3, #1]
 80101a4:	2b07      	cmp	r3, #7
 80101a6:	f200 81bd 	bhi.w	8010524 <USBH_HandleEnum+0x394>
 80101aa:	a201      	add	r2, pc, #4	@ (adr r2, 80101b0 <USBH_HandleEnum+0x20>)
 80101ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b0:	080101d1 	.word	0x080101d1
 80101b4:	0801028b 	.word	0x0801028b
 80101b8:	080102f5 	.word	0x080102f5
 80101bc:	0801037f 	.word	0x0801037f
 80101c0:	080103e9 	.word	0x080103e9
 80101c4:	08010459 	.word	0x08010459
 80101c8:	0801049f 	.word	0x0801049f
 80101cc:	080104e5 	.word	0x080104e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80101d0:	2108      	movs	r1, #8
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fa50 	bl	8010678 <USBH_Get_DevDesc>
 80101d8:	4603      	mov	r3, r0
 80101da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80101dc:	7bbb      	ldrb	r3, [r7, #14]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d12e      	bne.n	8010240 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7919      	ldrb	r1, [r3, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010206:	9202      	str	r2, [sp, #8]
 8010208:	2200      	movs	r2, #0
 801020a:	9201      	str	r2, [sp, #4]
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	4603      	mov	r3, r0
 8010210:	2280      	movs	r2, #128	@ 0x80
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f001 f8e2 	bl	80113dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	7959      	ldrb	r1, [r3, #5]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801022c:	9202      	str	r2, [sp, #8]
 801022e:	2200      	movs	r2, #0
 8010230:	9201      	str	r2, [sp, #4]
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	4603      	mov	r3, r0
 8010236:	2200      	movs	r2, #0
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f001 f8cf 	bl	80113dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801023e:	e173      	b.n	8010528 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010240:	7bbb      	ldrb	r3, [r7, #14]
 8010242:	2b03      	cmp	r3, #3
 8010244:	f040 8170 	bne.w	8010528 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801024e:	3301      	adds	r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801025e:	2b03      	cmp	r3, #3
 8010260:	d903      	bls.n	801026a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	220d      	movs	r2, #13
 8010266:	701a      	strb	r2, [r3, #0]
      break;
 8010268:	e15e      	b.n	8010528 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	795b      	ldrb	r3, [r3, #5]
 801026e:	4619      	mov	r1, r3
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f001 f903 	bl	801147c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	791b      	ldrb	r3, [r3, #4]
 801027a:	4619      	mov	r1, r3
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f001 f8fd 	bl	801147c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	701a      	strb	r2, [r3, #0]
      break;
 8010288:	e14e      	b.n	8010528 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801028a:	2112      	movs	r1, #18
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 f9f3 	bl	8010678 <USBH_Get_DevDesc>
 8010292:	4603      	mov	r3, r0
 8010294:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010296:	7bbb      	ldrb	r3, [r7, #14]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d103      	bne.n	80102a4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2202      	movs	r2, #2
 80102a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80102a2:	e143      	b.n	801052c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80102a4:	7bbb      	ldrb	r3, [r7, #14]
 80102a6:	2b03      	cmp	r3, #3
 80102a8:	f040 8140 	bne.w	801052c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80102b2:	3301      	adds	r3, #1
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d903      	bls.n	80102ce <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	220d      	movs	r2, #13
 80102ca:	701a      	strb	r2, [r3, #0]
      break;
 80102cc:	e12e      	b.n	801052c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	795b      	ldrb	r3, [r3, #5]
 80102d2:	4619      	mov	r1, r3
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f001 f8d1 	bl	801147c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	791b      	ldrb	r3, [r3, #4]
 80102de:	4619      	mov	r1, r3
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f001 f8cb 	bl	801147c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	701a      	strb	r2, [r3, #0]
      break;
 80102f2:	e11b      	b.n	801052c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80102f4:	2101      	movs	r1, #1
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 fa7d 	bl	80107f6 <USBH_SetAddress>
 80102fc:	4603      	mov	r3, r0
 80102fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010300:	7bbb      	ldrb	r3, [r7, #14]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d130      	bne.n	8010368 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8010306:	2002      	movs	r0, #2
 8010308:	f001 fc01 	bl	8011b0e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2203      	movs	r2, #3
 8010318:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	7919      	ldrb	r1, [r3, #4]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801032e:	9202      	str	r2, [sp, #8]
 8010330:	2200      	movs	r2, #0
 8010332:	9201      	str	r2, [sp, #4]
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	4603      	mov	r3, r0
 8010338:	2280      	movs	r2, #128	@ 0x80
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f001 f84e 	bl	80113dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	7959      	ldrb	r1, [r3, #5]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010354:	9202      	str	r2, [sp, #8]
 8010356:	2200      	movs	r2, #0
 8010358:	9201      	str	r2, [sp, #4]
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4603      	mov	r3, r0
 801035e:	2200      	movs	r2, #0
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f001 f83b 	bl	80113dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010366:	e0e3      	b.n	8010530 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010368:	7bbb      	ldrb	r3, [r7, #14]
 801036a:	2b03      	cmp	r3, #3
 801036c:	f040 80e0 	bne.w	8010530 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	220d      	movs	r2, #13
 8010374:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	705a      	strb	r2, [r3, #1]
      break;
 801037c:	e0d8      	b.n	8010530 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801037e:	2109      	movs	r1, #9
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f9a5 	bl	80106d0 <USBH_Get_CfgDesc>
 8010386:	4603      	mov	r3, r0
 8010388:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801038a:	7bbb      	ldrb	r3, [r7, #14]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d103      	bne.n	8010398 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2204      	movs	r2, #4
 8010394:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010396:	e0cd      	b.n	8010534 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010398:	7bbb      	ldrb	r3, [r7, #14]
 801039a:	2b03      	cmp	r3, #3
 801039c:	f040 80ca 	bne.w	8010534 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80103a6:	3301      	adds	r3, #1
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80103b6:	2b03      	cmp	r3, #3
 80103b8:	d903      	bls.n	80103c2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	220d      	movs	r2, #13
 80103be:	701a      	strb	r2, [r3, #0]
      break;
 80103c0:	e0b8      	b.n	8010534 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	795b      	ldrb	r3, [r3, #5]
 80103c6:	4619      	mov	r1, r3
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f001 f857 	bl	801147c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	791b      	ldrb	r3, [r3, #4]
 80103d2:	4619      	mov	r1, r3
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f001 f851 	bl	801147c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	701a      	strb	r2, [r3, #0]
      break;
 80103e6:	e0a5      	b.n	8010534 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 f96d 	bl	80106d0 <USBH_Get_CfgDesc>
 80103f6:	4603      	mov	r3, r0
 80103f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80103fa:	7bbb      	ldrb	r3, [r7, #14]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d103      	bne.n	8010408 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2205      	movs	r2, #5
 8010404:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010406:	e097      	b.n	8010538 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010408:	7bbb      	ldrb	r3, [r7, #14]
 801040a:	2b03      	cmp	r3, #3
 801040c:	f040 8094 	bne.w	8010538 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010416:	3301      	adds	r3, #1
 8010418:	b2da      	uxtb	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010426:	2b03      	cmp	r3, #3
 8010428:	d903      	bls.n	8010432 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	220d      	movs	r2, #13
 801042e:	701a      	strb	r2, [r3, #0]
      break;
 8010430:	e082      	b.n	8010538 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	795b      	ldrb	r3, [r3, #5]
 8010436:	4619      	mov	r1, r3
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f001 f81f 	bl	801147c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	791b      	ldrb	r3, [r3, #4]
 8010442:	4619      	mov	r1, r3
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f001 f819 	bl	801147c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	701a      	strb	r2, [r3, #0]
      break;
 8010456:	e06f      	b.n	8010538 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 801045e:	2b00      	cmp	r3, #0
 8010460:	d019      	beq.n	8010496 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801046e:	23ff      	movs	r3, #255	@ 0xff
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 f957 	bl	8010724 <USBH_Get_StringDesc>
 8010476:	4603      	mov	r3, r0
 8010478:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801047a:	7bbb      	ldrb	r3, [r7, #14]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d103      	bne.n	8010488 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2206      	movs	r2, #6
 8010484:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010486:	e059      	b.n	801053c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010488:	7bbb      	ldrb	r3, [r7, #14]
 801048a:	2b03      	cmp	r3, #3
 801048c:	d156      	bne.n	801053c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2206      	movs	r2, #6
 8010492:	705a      	strb	r2, [r3, #1]
      break;
 8010494:	e052      	b.n	801053c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2206      	movs	r2, #6
 801049a:	705a      	strb	r2, [r3, #1]
      break;
 801049c:	e04e      	b.n	801053c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d019      	beq.n	80104dc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80104b4:	23ff      	movs	r3, #255	@ 0xff
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 f934 	bl	8010724 <USBH_Get_StringDesc>
 80104bc:	4603      	mov	r3, r0
 80104be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d103      	bne.n	80104ce <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2207      	movs	r2, #7
 80104ca:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80104cc:	e038      	b.n	8010540 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80104ce:	7bbb      	ldrb	r3, [r7, #14]
 80104d0:	2b03      	cmp	r3, #3
 80104d2:	d135      	bne.n	8010540 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2207      	movs	r2, #7
 80104d8:	705a      	strb	r2, [r3, #1]
      break;
 80104da:	e031      	b.n	8010540 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2207      	movs	r2, #7
 80104e0:	705a      	strb	r2, [r3, #1]
      break;
 80104e2:	e02d      	b.n	8010540 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d017      	beq.n	801051e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80104fa:	23ff      	movs	r3, #255	@ 0xff
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 f911 	bl	8010724 <USBH_Get_StringDesc>
 8010502:	4603      	mov	r3, r0
 8010504:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010506:	7bbb      	ldrb	r3, [r7, #14]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d102      	bne.n	8010512 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801050c:	2300      	movs	r3, #0
 801050e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010510:	e018      	b.n	8010544 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010512:	7bbb      	ldrb	r3, [r7, #14]
 8010514:	2b03      	cmp	r3, #3
 8010516:	d115      	bne.n	8010544 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	73fb      	strb	r3, [r7, #15]
      break;
 801051c:	e012      	b.n	8010544 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 801051e:	2300      	movs	r3, #0
 8010520:	73fb      	strb	r3, [r7, #15]
      break;
 8010522:	e00f      	b.n	8010544 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8010524:	bf00      	nop
 8010526:	e00e      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 8010528:	bf00      	nop
 801052a:	e00c      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 801052c:	bf00      	nop
 801052e:	e00a      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 8010530:	bf00      	nop
 8010532:	e008      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 8010534:	bf00      	nop
 8010536:	e006      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 8010538:	bf00      	nop
 801053a:	e004      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 801053c:	bf00      	nop
 801053e:	e002      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 8010540:	bf00      	nop
 8010542:	e000      	b.n	8010546 <USBH_HandleEnum+0x3b6>
      break;
 8010544:	bf00      	nop
  }
  return Status;
 8010546:	7bfb      	ldrb	r3, [r7, #15]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3710      	adds	r7, #16
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8010562:	bf00      	nop
 8010564:	370c      	adds	r7, #12
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b082      	sub	sp, #8
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801057c:	1c5a      	adds	r2, r3, #1
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f000 f804 	bl	8010592 <USBH_HandleSof>
}
 801058a:	bf00      	nop
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b082      	sub	sp, #8
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b0b      	cmp	r3, #11
 80105a2:	d10a      	bne.n	80105ba <USBH_HandleSof+0x28>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d005      	beq.n	80105ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	4798      	blx	r3
  }
}
 80105ba:	bf00      	nop
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80105c2:	b480      	push	{r7}
 80105c4:	b083      	sub	sp, #12
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2201      	movs	r2, #1
 80105ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80105d2:	bf00      	nop
}
 80105d4:	370c      	adds	r7, #12
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80105de:	b480      	push	{r7}
 80105e0:	b083      	sub	sp, #12
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80105f6:	bf00      	nop
}
 80105f8:	370c      	adds	r7, #12
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr

08010602 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010602:	b480      	push	{r7}
 8010604:	b083      	sub	sp, #12
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2201      	movs	r2, #1
 801060e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2200      	movs	r2, #0
 8010616:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010622:	2300      	movs	r3, #0
}
 8010624:	4618      	mov	r0, r3
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr

08010630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f001 f910 	bl	8011876 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	791b      	ldrb	r3, [r3, #4]
 801065a:	4619      	mov	r1, r3
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 ff0d 	bl	801147c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	795b      	ldrb	r3, [r3, #5]
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 ff07 	bl	801147c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af02      	add	r7, sp, #8
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	460b      	mov	r3, r1
 8010682:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8010684:	887b      	ldrh	r3, [r7, #2]
 8010686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801068a:	d901      	bls.n	8010690 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801068c:	2303      	movs	r3, #3
 801068e:	e01b      	b.n	80106c8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010696:	887b      	ldrh	r3, [r7, #2]
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	4613      	mov	r3, r2
 801069c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106a0:	2100      	movs	r1, #0
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 f872 	bl	801078c <USBH_GetDescriptor>
 80106a8:	4603      	mov	r3, r0
 80106aa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d109      	bne.n	80106c6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80106b8:	887a      	ldrh	r2, [r7, #2]
 80106ba:	4619      	mov	r1, r3
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f929 	bl	8010914 <USBH_ParseDevDesc>
 80106c2:	4603      	mov	r3, r0
 80106c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3710      	adds	r7, #16
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b086      	sub	sp, #24
 80106d4:	af02      	add	r7, sp, #8
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	331c      	adds	r3, #28
 80106e0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80106e2:	887b      	ldrh	r3, [r7, #2]
 80106e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106e8:	d901      	bls.n	80106ee <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80106ea:	2303      	movs	r3, #3
 80106ec:	e016      	b.n	801071c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80106ee:	887b      	ldrh	r3, [r7, #2]
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106f8:	2100      	movs	r1, #0
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 f846 	bl	801078c <USBH_GetDescriptor>
 8010700:	4603      	mov	r3, r0
 8010702:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d107      	bne.n	801071a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 801070a:	887b      	ldrh	r3, [r7, #2]
 801070c:	461a      	mov	r2, r3
 801070e:	68b9      	ldr	r1, [r7, #8]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 f9af 	bl	8010a74 <USBH_ParseCfgDesc>
 8010716:	4603      	mov	r3, r0
 8010718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801071a:	7bfb      	ldrb	r3, [r7, #15]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af02      	add	r7, sp, #8
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	607a      	str	r2, [r7, #4]
 801072e:	461a      	mov	r2, r3
 8010730:	460b      	mov	r3, r1
 8010732:	72fb      	strb	r3, [r7, #11]
 8010734:	4613      	mov	r3, r2
 8010736:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010738:	893b      	ldrh	r3, [r7, #8]
 801073a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801073e:	d802      	bhi.n	8010746 <USBH_Get_StringDesc+0x22>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010746:	2303      	movs	r3, #3
 8010748:	e01c      	b.n	8010784 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 801074a:	7afb      	ldrb	r3, [r7, #11]
 801074c:	b29b      	uxth	r3, r3
 801074e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8010752:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801075a:	893b      	ldrh	r3, [r7, #8]
 801075c:	9300      	str	r3, [sp, #0]
 801075e:	460b      	mov	r3, r1
 8010760:	2100      	movs	r1, #0
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	f000 f812 	bl	801078c <USBH_GetDescriptor>
 8010768:	4603      	mov	r3, r0
 801076a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801076c:	7dfb      	ldrb	r3, [r7, #23]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d107      	bne.n	8010782 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010778:	893a      	ldrh	r2, [r7, #8]
 801077a:	6879      	ldr	r1, [r7, #4]
 801077c:	4618      	mov	r0, r3
 801077e:	f000 fb8c 	bl	8010e9a <USBH_ParseStringDesc>
  }

  return status;
 8010782:	7dfb      	ldrb	r3, [r7, #23]
}
 8010784:	4618      	mov	r0, r3
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	607b      	str	r3, [r7, #4]
 8010796:	460b      	mov	r3, r1
 8010798:	72fb      	strb	r3, [r7, #11]
 801079a:	4613      	mov	r3, r2
 801079c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	789b      	ldrb	r3, [r3, #2]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d11c      	bne.n	80107e0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80107a6:	7afb      	ldrb	r3, [r7, #11]
 80107a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2206      	movs	r2, #6
 80107b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	893a      	ldrh	r2, [r7, #8]
 80107bc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80107be:	893b      	ldrh	r3, [r7, #8]
 80107c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80107c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80107c8:	d104      	bne.n	80107d4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f240 4209 	movw	r2, #1033	@ 0x409
 80107d0:	829a      	strh	r2, [r3, #20]
 80107d2:	e002      	b.n	80107da <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2200      	movs	r2, #0
 80107d8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	8b3a      	ldrh	r2, [r7, #24]
 80107de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80107e0:	8b3b      	ldrh	r3, [r7, #24]
 80107e2:	461a      	mov	r2, r3
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f000 fba4 	bl	8010f34 <USBH_CtlReq>
 80107ec:	4603      	mov	r3, r0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b082      	sub	sp, #8
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	789b      	ldrb	r3, [r3, #2]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d10f      	bne.n	801082a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2205      	movs	r2, #5
 8010814:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010816:	78fb      	ldrb	r3, [r7, #3]
 8010818:	b29a      	uxth	r2, r3
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801082a:	2200      	movs	r2, #0
 801082c:	2100      	movs	r1, #0
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fb80 	bl	8010f34 <USBH_CtlReq>
 8010834:	4603      	mov	r3, r0
}
 8010836:	4618      	mov	r0, r3
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b082      	sub	sp, #8
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
 8010846:	460b      	mov	r3, r1
 8010848:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	789b      	ldrb	r3, [r3, #2]
 801084e:	2b01      	cmp	r3, #1
 8010850:	d10e      	bne.n	8010870 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2209      	movs	r2, #9
 801085c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	887a      	ldrh	r2, [r7, #2]
 8010862:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010870:	2200      	movs	r2, #0
 8010872:	2100      	movs	r1, #0
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fb5d 	bl	8010f34 <USBH_CtlReq>
 801087a:	4603      	mov	r3, r0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	460b      	mov	r3, r1
 801088e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	789b      	ldrb	r3, [r3, #2]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d10f      	bne.n	80108b8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2203      	movs	r2, #3
 80108a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80108a4:	78fb      	ldrb	r3, [r7, #3]
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80108b8:	2200      	movs	r2, #0
 80108ba:	2100      	movs	r1, #0
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 fb39 	bl	8010f34 <USBH_CtlReq>
 80108c2:	4603      	mov	r3, r0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	460b      	mov	r3, r1
 80108d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	789b      	ldrb	r3, [r3, #2]
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d10f      	bne.n	8010900 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2202      	movs	r2, #2
 80108e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2201      	movs	r2, #1
 80108ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80108f2:	78fb      	ldrb	r3, [r7, #3]
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2200      	movs	r2, #0
 80108fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010900:	2200      	movs	r2, #0
 8010902:	2100      	movs	r1, #0
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f000 fb15 	bl	8010f34 <USBH_CtlReq>
 801090a:	4603      	mov	r3, r0
}
 801090c:	4618      	mov	r0, r3
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010914:	b480      	push	{r7}
 8010916:	b087      	sub	sp, #28
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	4613      	mov	r3, r2
 8010920:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010928:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801092a:	2300      	movs	r3, #0
 801092c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d101      	bne.n	8010938 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010934:	2302      	movs	r3, #2
 8010936:	e094      	b.n	8010a62 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	781a      	ldrb	r2, [r3, #0]
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	785a      	ldrb	r2, [r3, #1]
 8010944:	693b      	ldr	r3, [r7, #16]
 8010946:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3302      	adds	r3, #2
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	461a      	mov	r2, r3
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	3303      	adds	r3, #3
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	021b      	lsls	r3, r3, #8
 8010958:	b29b      	uxth	r3, r3
 801095a:	4313      	orrs	r3, r2
 801095c:	b29a      	uxth	r2, r3
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	791a      	ldrb	r2, [r3, #4]
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	795a      	ldrb	r2, [r3, #5]
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	799a      	ldrb	r2, [r3, #6]
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	79da      	ldrb	r2, [r3, #7]
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010988:	2b00      	cmp	r3, #0
 801098a:	d004      	beq.n	8010996 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010992:	2b01      	cmp	r3, #1
 8010994:	d11b      	bne.n	80109ce <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	79db      	ldrb	r3, [r3, #7]
 801099a:	2b20      	cmp	r3, #32
 801099c:	dc0f      	bgt.n	80109be <USBH_ParseDevDesc+0xaa>
 801099e:	2b08      	cmp	r3, #8
 80109a0:	db0f      	blt.n	80109c2 <USBH_ParseDevDesc+0xae>
 80109a2:	3b08      	subs	r3, #8
 80109a4:	4a32      	ldr	r2, [pc, #200]	@ (8010a70 <USBH_ParseDevDesc+0x15c>)
 80109a6:	fa22 f303 	lsr.w	r3, r2, r3
 80109aa:	f003 0301 	and.w	r3, r3, #1
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	bf14      	ite	ne
 80109b2:	2301      	movne	r3, #1
 80109b4:	2300      	moveq	r3, #0
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d106      	bne.n	80109ca <USBH_ParseDevDesc+0xb6>
 80109bc:	e001      	b.n	80109c2 <USBH_ParseDevDesc+0xae>
 80109be:	2b40      	cmp	r3, #64	@ 0x40
 80109c0:	d003      	beq.n	80109ca <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	2208      	movs	r2, #8
 80109c6:	71da      	strb	r2, [r3, #7]
        break;
 80109c8:	e000      	b.n	80109cc <USBH_ParseDevDesc+0xb8>
        break;
 80109ca:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80109cc:	e00e      	b.n	80109ec <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80109d4:	2b02      	cmp	r3, #2
 80109d6:	d107      	bne.n	80109e8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	79db      	ldrb	r3, [r3, #7]
 80109dc:	2b08      	cmp	r3, #8
 80109de:	d005      	beq.n	80109ec <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	2208      	movs	r2, #8
 80109e4:	71da      	strb	r2, [r3, #7]
 80109e6:	e001      	b.n	80109ec <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80109e8:	2303      	movs	r3, #3
 80109ea:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80109ec:	88fb      	ldrh	r3, [r7, #6]
 80109ee:	2b08      	cmp	r3, #8
 80109f0:	d936      	bls.n	8010a60 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	3308      	adds	r3, #8
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	461a      	mov	r2, r3
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	3309      	adds	r3, #9
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	021b      	lsls	r3, r3, #8
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	4313      	orrs	r3, r2
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	330a      	adds	r3, #10
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	461a      	mov	r2, r3
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	330b      	adds	r3, #11
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	021b      	lsls	r3, r3, #8
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	330c      	adds	r3, #12
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	330d      	adds	r3, #13
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	021b      	lsls	r3, r3, #8
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	7b9a      	ldrb	r2, [r3, #14]
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	7bda      	ldrb	r2, [r3, #15]
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	7c1a      	ldrb	r2, [r3, #16]
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	7c5a      	ldrb	r2, [r3, #17]
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	371c      	adds	r7, #28
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	01000101 	.word	0x01000101

08010a74 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b08c      	sub	sp, #48	@ 0x30
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010a88:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010a90:	2300      	movs	r3, #0
 8010a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8010a96:	2300      	movs	r3, #0
 8010a98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d101      	bne.n	8010aa6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	e0de      	b.n	8010c64 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	2b09      	cmp	r3, #9
 8010ab0:	d002      	beq.n	8010ab8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ab4:	2209      	movs	r2, #9
 8010ab6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	781a      	ldrb	r2, [r3, #0]
 8010abc:	6a3b      	ldr	r3, [r7, #32]
 8010abe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	785a      	ldrb	r2, [r3, #1]
 8010ac4:	6a3b      	ldr	r3, [r7, #32]
 8010ac6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	3302      	adds	r3, #2
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	3303      	adds	r3, #3
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	021b      	lsls	r3, r3, #8
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	4313      	orrs	r3, r2
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ae2:	bf28      	it	cs
 8010ae4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	791a      	ldrb	r2, [r3, #4]
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	795a      	ldrb	r2, [r3, #5]
 8010afa:	6a3b      	ldr	r3, [r7, #32]
 8010afc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	799a      	ldrb	r2, [r3, #6]
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	79da      	ldrb	r2, [r3, #7]
 8010b0a:	6a3b      	ldr	r3, [r7, #32]
 8010b0c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	7a1a      	ldrb	r2, [r3, #8]
 8010b12:	6a3b      	ldr	r3, [r7, #32]
 8010b14:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010b16:	88fb      	ldrh	r3, [r7, #6]
 8010b18:	2b09      	cmp	r3, #9
 8010b1a:	f240 80a1 	bls.w	8010c60 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8010b1e:	2309      	movs	r3, #9
 8010b20:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010b22:	2300      	movs	r3, #0
 8010b24:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010b26:	e085      	b.n	8010c34 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010b28:	f107 0316 	add.w	r3, r7, #22
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b30:	f000 f9e6 	bl	8010f00 <USBH_GetNextDesc>
 8010b34:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b38:	785b      	ldrb	r3, [r3, #1]
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	d17a      	bne.n	8010c34 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	2b09      	cmp	r3, #9
 8010b44:	d002      	beq.n	8010b4c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b48:	2209      	movs	r2, #9
 8010b4a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b50:	221a      	movs	r2, #26
 8010b52:	fb02 f303 	mul.w	r3, r2, r3
 8010b56:	3308      	adds	r3, #8
 8010b58:	6a3a      	ldr	r2, [r7, #32]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	3302      	adds	r3, #2
 8010b5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b62:	69f8      	ldr	r0, [r7, #28]
 8010b64:	f000 f882 	bl	8010c6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010b72:	e043      	b.n	8010bfc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010b74:	f107 0316 	add.w	r3, r7, #22
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010b7c:	f000 f9c0 	bl	8010f00 <USBH_GetNextDesc>
 8010b80:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b84:	785b      	ldrb	r3, [r3, #1]
 8010b86:	2b05      	cmp	r3, #5
 8010b88:	d138      	bne.n	8010bfc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	795b      	ldrb	r3, [r3, #5]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d113      	bne.n	8010bba <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	d003      	beq.n	8010ba2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	799b      	ldrb	r3, [r3, #6]
 8010b9e:	2b03      	cmp	r3, #3
 8010ba0:	d10b      	bne.n	8010bba <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	79db      	ldrb	r3, [r3, #7]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10b      	bne.n	8010bc2 <USBH_ParseCfgDesc+0x14e>
 8010baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	2b09      	cmp	r3, #9
 8010bb0:	d007      	beq.n	8010bc2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bb4:	2209      	movs	r2, #9
 8010bb6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010bb8:	e003      	b.n	8010bc2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bbc:	2207      	movs	r2, #7
 8010bbe:	701a      	strb	r2, [r3, #0]
 8010bc0:	e000      	b.n	8010bc4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010bc2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bc8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010bcc:	3201      	adds	r2, #1
 8010bce:	00d2      	lsls	r2, r2, #3
 8010bd0:	211a      	movs	r1, #26
 8010bd2:	fb01 f303 	mul.w	r3, r1, r3
 8010bd6:	4413      	add	r3, r2
 8010bd8:	3308      	adds	r3, #8
 8010bda:	6a3a      	ldr	r2, [r7, #32]
 8010bdc:	4413      	add	r3, r2
 8010bde:	3304      	adds	r3, #4
 8010be0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010be4:	69b9      	ldr	r1, [r7, #24]
 8010be6:	68f8      	ldr	r0, [r7, #12]
 8010be8:	f000 f86f 	bl	8010cca <USBH_ParseEPDesc>
 8010bec:	4603      	mov	r3, r0
 8010bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010bf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d80a      	bhi.n	8010c1a <USBH_ParseCfgDesc+0x1a6>
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	791b      	ldrb	r3, [r3, #4]
 8010c08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d204      	bcs.n	8010c1a <USBH_ParseCfgDesc+0x1a6>
 8010c10:	6a3b      	ldr	r3, [r7, #32]
 8010c12:	885a      	ldrh	r2, [r3, #2]
 8010c14:	8afb      	ldrh	r3, [r7, #22]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d8ac      	bhi.n	8010b74 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	791b      	ldrb	r3, [r3, #4]
 8010c1e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d201      	bcs.n	8010c2a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8010c26:	2303      	movs	r3, #3
 8010c28:	e01c      	b.n	8010c64 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8010c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c2e:	3301      	adds	r3, #1
 8010c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d805      	bhi.n	8010c48 <USBH_ParseCfgDesc+0x1d4>
 8010c3c:	6a3b      	ldr	r3, [r7, #32]
 8010c3e:	885a      	ldrh	r2, [r3, #2]
 8010c40:	8afb      	ldrh	r3, [r7, #22]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	f63f af70 	bhi.w	8010b28 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	791b      	ldrb	r3, [r3, #4]
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	bf28      	it	cs
 8010c50:	2302      	movcs	r3, #2
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d201      	bcs.n	8010c60 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8010c5c:	2303      	movs	r3, #3
 8010c5e:	e001      	b.n	8010c64 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8010c60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3730      	adds	r7, #48	@ 0x30
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	781a      	ldrb	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	785a      	ldrb	r2, [r3, #1]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	789a      	ldrb	r2, [r3, #2]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	78da      	ldrb	r2, [r3, #3]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	791a      	ldrb	r2, [r3, #4]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	795a      	ldrb	r2, [r3, #5]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	799a      	ldrb	r2, [r3, #6]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	79da      	ldrb	r2, [r3, #7]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	7a1a      	ldrb	r2, [r3, #8]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	721a      	strb	r2, [r3, #8]
}
 8010cbe:	bf00      	nop
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b087      	sub	sp, #28
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	60f8      	str	r0, [r7, #12]
 8010cd2:	60b9      	str	r1, [r7, #8]
 8010cd4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	781a      	ldrb	r2, [r3, #0]
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	785a      	ldrb	r2, [r3, #1]
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	789a      	ldrb	r2, [r3, #2]
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	78da      	ldrb	r2, [r3, #3]
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	3305      	adds	r3, #5
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	021b      	lsls	r3, r3, #8
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	4313      	orrs	r3, r2
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	799a      	ldrb	r2, [r3, #6]
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	889b      	ldrh	r3, [r3, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010d2c:	d804      	bhi.n	8010d38 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d36:	d901      	bls.n	8010d3c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010d38:	2303      	movs	r3, #3
 8010d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d136      	bne.n	8010db4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	78db      	ldrb	r3, [r3, #3]
 8010d4a:	f003 0303 	and.w	r3, r3, #3
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d108      	bne.n	8010d64 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	889b      	ldrh	r3, [r3, #4]
 8010d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d5a:	f240 8097 	bls.w	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010d5e:	2303      	movs	r3, #3
 8010d60:	75fb      	strb	r3, [r7, #23]
 8010d62:	e093      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	78db      	ldrb	r3, [r3, #3]
 8010d68:	f003 0303 	and.w	r3, r3, #3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d107      	bne.n	8010d80 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	889b      	ldrh	r3, [r3, #4]
 8010d74:	2b40      	cmp	r3, #64	@ 0x40
 8010d76:	f240 8089 	bls.w	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	75fb      	strb	r3, [r7, #23]
 8010d7e:	e085      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	78db      	ldrb	r3, [r3, #3]
 8010d84:	f003 0303 	and.w	r3, r3, #3
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d005      	beq.n	8010d98 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	78db      	ldrb	r3, [r3, #3]
 8010d90:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010d94:	2b03      	cmp	r3, #3
 8010d96:	d10a      	bne.n	8010dae <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	799b      	ldrb	r3, [r3, #6]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d003      	beq.n	8010da8 <USBH_ParseEPDesc+0xde>
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	799b      	ldrb	r3, [r3, #6]
 8010da4:	2b10      	cmp	r3, #16
 8010da6:	d970      	bls.n	8010e8a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8010da8:	2303      	movs	r3, #3
 8010daa:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010dac:	e06d      	b.n	8010e8a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010dae:	2303      	movs	r3, #3
 8010db0:	75fb      	strb	r3, [r7, #23]
 8010db2:	e06b      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d13c      	bne.n	8010e38 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	78db      	ldrb	r3, [r3, #3]
 8010dc2:	f003 0303 	and.w	r3, r3, #3
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d005      	beq.n	8010dd6 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	78db      	ldrb	r3, [r3, #3]
 8010dce:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d106      	bne.n	8010de4 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	889b      	ldrh	r3, [r3, #4]
 8010dda:	2b40      	cmp	r3, #64	@ 0x40
 8010ddc:	d956      	bls.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010dde:	2303      	movs	r3, #3
 8010de0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010de2:	e053      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	78db      	ldrb	r3, [r3, #3]
 8010de8:	f003 0303 	and.w	r3, r3, #3
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d10e      	bne.n	8010e0e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	799b      	ldrb	r3, [r3, #6]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d007      	beq.n	8010e08 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010dfc:	2b10      	cmp	r3, #16
 8010dfe:	d803      	bhi.n	8010e08 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010e04:	2b40      	cmp	r3, #64	@ 0x40
 8010e06:	d941      	bls.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010e08:	2303      	movs	r3, #3
 8010e0a:	75fb      	strb	r3, [r7, #23]
 8010e0c:	e03e      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	78db      	ldrb	r3, [r3, #3]
 8010e12:	f003 0303 	and.w	r3, r3, #3
 8010e16:	2b03      	cmp	r3, #3
 8010e18:	d10b      	bne.n	8010e32 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	799b      	ldrb	r3, [r3, #6]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d004      	beq.n	8010e2c <USBH_ParseEPDesc+0x162>
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	889b      	ldrh	r3, [r3, #4]
 8010e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010e2a:	d32f      	bcc.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	75fb      	strb	r3, [r7, #23]
 8010e30:	e02c      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010e32:	2303      	movs	r3, #3
 8010e34:	75fb      	strb	r3, [r7, #23]
 8010e36:	e029      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	d120      	bne.n	8010e84 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	78db      	ldrb	r3, [r3, #3]
 8010e46:	f003 0303 	and.w	r3, r3, #3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d106      	bne.n	8010e5c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	889b      	ldrh	r3, [r3, #4]
 8010e52:	2b08      	cmp	r3, #8
 8010e54:	d01a      	beq.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010e56:	2303      	movs	r3, #3
 8010e58:	75fb      	strb	r3, [r7, #23]
 8010e5a:	e017      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	78db      	ldrb	r3, [r3, #3]
 8010e60:	f003 0303 	and.w	r3, r3, #3
 8010e64:	2b03      	cmp	r3, #3
 8010e66:	d10a      	bne.n	8010e7e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	799b      	ldrb	r3, [r3, #6]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d003      	beq.n	8010e78 <USBH_ParseEPDesc+0x1ae>
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	889b      	ldrh	r3, [r3, #4]
 8010e74:	2b08      	cmp	r3, #8
 8010e76:	d909      	bls.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010e78:	2303      	movs	r3, #3
 8010e7a:	75fb      	strb	r3, [r7, #23]
 8010e7c:	e006      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010e7e:	2303      	movs	r3, #3
 8010e80:	75fb      	strb	r3, [r7, #23]
 8010e82:	e003      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010e84:	2303      	movs	r3, #3
 8010e86:	75fb      	strb	r3, [r7, #23]
 8010e88:	e000      	b.n	8010e8c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010e8a:	bf00      	nop
  }

  return status;
 8010e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	371c      	adds	r7, #28
 8010e92:	46bd      	mov	sp, r7
 8010e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e98:	4770      	bx	lr

08010e9a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010e9a:	b480      	push	{r7}
 8010e9c:	b087      	sub	sp, #28
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	60f8      	str	r0, [r7, #12]
 8010ea2:	60b9      	str	r1, [r7, #8]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	2b03      	cmp	r3, #3
 8010eb0:	d120      	bne.n	8010ef4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	1e9a      	subs	r2, r3, #2
 8010eb8:	88fb      	ldrh	r3, [r7, #6]
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	bf28      	it	cs
 8010ebe:	4613      	movcs	r3, r2
 8010ec0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3302      	adds	r3, #2
 8010ec6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010ec8:	2300      	movs	r3, #0
 8010eca:	82fb      	strh	r3, [r7, #22]
 8010ecc:	e00b      	b.n	8010ee6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010ece:	8afb      	ldrh	r3, [r7, #22]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	781a      	ldrb	r2, [r3, #0]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	3301      	adds	r3, #1
 8010ede:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010ee0:	8afb      	ldrh	r3, [r7, #22]
 8010ee2:	3302      	adds	r3, #2
 8010ee4:	82fb      	strh	r3, [r7, #22]
 8010ee6:	8afa      	ldrh	r2, [r7, #22]
 8010ee8:	8abb      	ldrh	r3, [r7, #20]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d3ef      	bcc.n	8010ece <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	701a      	strb	r2, [r3, #0]
  }
}
 8010ef4:	bf00      	nop
 8010ef6:	371c      	adds	r7, #28
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr

08010f00 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	881b      	ldrh	r3, [r3, #0]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	7812      	ldrb	r2, [r2, #0]
 8010f12:	4413      	add	r3, r2
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4413      	add	r3, r2
 8010f24:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010f26:	68fb      	ldr	r3, [r7, #12]
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3714      	adds	r7, #20
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	4613      	mov	r3, r2
 8010f40:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010f42:	2301      	movs	r3, #1
 8010f44:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	789b      	ldrb	r3, [r3, #2]
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d002      	beq.n	8010f54 <USBH_CtlReq+0x20>
 8010f4e:	2b02      	cmp	r3, #2
 8010f50:	d00f      	beq.n	8010f72 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8010f52:	e027      	b.n	8010fa4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	88fa      	ldrh	r2, [r7, #6]
 8010f5e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2201      	movs	r2, #1
 8010f64:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2202      	movs	r2, #2
 8010f6a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8010f70:	e018      	b.n	8010fa4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f000 f81c 	bl	8010fb0 <USBH_HandleControl>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010f7c:	7dfb      	ldrb	r3, [r7, #23]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d002      	beq.n	8010f88 <USBH_CtlReq+0x54>
 8010f82:	7dfb      	ldrb	r3, [r7, #23]
 8010f84:	2b03      	cmp	r3, #3
 8010f86:	d106      	bne.n	8010f96 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2200      	movs	r2, #0
 8010f92:	761a      	strb	r2, [r3, #24]
      break;
 8010f94:	e005      	b.n	8010fa2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010f96:	7dfb      	ldrb	r3, [r7, #23]
 8010f98:	2b02      	cmp	r3, #2
 8010f9a:	d102      	bne.n	8010fa2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	709a      	strb	r2, [r3, #2]
      break;
 8010fa2:	bf00      	nop
  }
  return status;
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
	...

08010fb0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	af02      	add	r7, sp, #8
 8010fb6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	7e1b      	ldrb	r3, [r3, #24]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	2b0a      	cmp	r3, #10
 8010fc8:	f200 8157 	bhi.w	801127a <USBH_HandleControl+0x2ca>
 8010fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8010fd4 <USBH_HandleControl+0x24>)
 8010fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd2:	bf00      	nop
 8010fd4:	08011001 	.word	0x08011001
 8010fd8:	0801101b 	.word	0x0801101b
 8010fdc:	08011085 	.word	0x08011085
 8010fe0:	080110ab 	.word	0x080110ab
 8010fe4:	080110e5 	.word	0x080110e5
 8010fe8:	0801110f 	.word	0x0801110f
 8010fec:	08011161 	.word	0x08011161
 8010ff0:	08011183 	.word	0x08011183
 8010ff4:	080111bf 	.word	0x080111bf
 8010ff8:	080111e5 	.word	0x080111e5
 8010ffc:	08011223 	.word	0x08011223
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f103 0110 	add.w	r1, r3, #16
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	795b      	ldrb	r3, [r3, #5]
 801100a:	461a      	mov	r2, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 f945 	bl	801129c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2202      	movs	r2, #2
 8011016:	761a      	strb	r2, [r3, #24]
      break;
 8011018:	e13a      	b.n	8011290 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	795b      	ldrb	r3, [r3, #5]
 801101e:	4619      	mov	r1, r3
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 fd17 	bl	8011a54 <USBH_LL_GetURBState>
 8011026:	4603      	mov	r3, r0
 8011028:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801102a:	7bbb      	ldrb	r3, [r7, #14]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d11e      	bne.n	801106e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	7c1b      	ldrb	r3, [r3, #16]
 8011034:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011038:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	8adb      	ldrh	r3, [r3, #22]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00a      	beq.n	8011058 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011042:	7b7b      	ldrb	r3, [r7, #13]
 8011044:	2b80      	cmp	r3, #128	@ 0x80
 8011046:	d103      	bne.n	8011050 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2203      	movs	r2, #3
 801104c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801104e:	e116      	b.n	801127e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2205      	movs	r2, #5
 8011054:	761a      	strb	r2, [r3, #24]
      break;
 8011056:	e112      	b.n	801127e <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8011058:	7b7b      	ldrb	r3, [r7, #13]
 801105a:	2b80      	cmp	r3, #128	@ 0x80
 801105c:	d103      	bne.n	8011066 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2209      	movs	r2, #9
 8011062:	761a      	strb	r2, [r3, #24]
      break;
 8011064:	e10b      	b.n	801127e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2207      	movs	r2, #7
 801106a:	761a      	strb	r2, [r3, #24]
      break;
 801106c:	e107      	b.n	801127e <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801106e:	7bbb      	ldrb	r3, [r7, #14]
 8011070:	2b04      	cmp	r3, #4
 8011072:	d003      	beq.n	801107c <USBH_HandleControl+0xcc>
 8011074:	7bbb      	ldrb	r3, [r7, #14]
 8011076:	2b02      	cmp	r3, #2
 8011078:	f040 8101 	bne.w	801127e <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	220b      	movs	r2, #11
 8011080:	761a      	strb	r2, [r3, #24]
      break;
 8011082:	e0fc      	b.n	801127e <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801108a:	b29a      	uxth	r2, r3
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6899      	ldr	r1, [r3, #8]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	899a      	ldrh	r2, [r3, #12]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	791b      	ldrb	r3, [r3, #4]
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 f93c 	bl	801131a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2204      	movs	r2, #4
 80110a6:	761a      	strb	r2, [r3, #24]
      break;
 80110a8:	e0f2      	b.n	8011290 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	791b      	ldrb	r3, [r3, #4]
 80110ae:	4619      	mov	r1, r3
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fccf 	bl	8011a54 <USBH_LL_GetURBState>
 80110b6:	4603      	mov	r3, r0
 80110b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80110ba:	7bbb      	ldrb	r3, [r7, #14]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d103      	bne.n	80110c8 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2209      	movs	r2, #9
 80110c4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80110c6:	e0dc      	b.n	8011282 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 80110c8:	7bbb      	ldrb	r3, [r7, #14]
 80110ca:	2b05      	cmp	r3, #5
 80110cc:	d102      	bne.n	80110d4 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 80110ce:	2303      	movs	r3, #3
 80110d0:	73fb      	strb	r3, [r7, #15]
      break;
 80110d2:	e0d6      	b.n	8011282 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 80110d4:	7bbb      	ldrb	r3, [r7, #14]
 80110d6:	2b04      	cmp	r3, #4
 80110d8:	f040 80d3 	bne.w	8011282 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	220b      	movs	r2, #11
 80110e0:	761a      	strb	r2, [r3, #24]
      break;
 80110e2:	e0ce      	b.n	8011282 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6899      	ldr	r1, [r3, #8]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	899a      	ldrh	r2, [r3, #12]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	795b      	ldrb	r3, [r3, #5]
 80110f0:	2001      	movs	r0, #1
 80110f2:	9000      	str	r0, [sp, #0]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 f8eb 	bl	80112d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011100:	b29a      	uxth	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2206      	movs	r2, #6
 801110a:	761a      	strb	r2, [r3, #24]
      break;
 801110c:	e0c0      	b.n	8011290 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	795b      	ldrb	r3, [r3, #5]
 8011112:	4619      	mov	r1, r3
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 fc9d 	bl	8011a54 <USBH_LL_GetURBState>
 801111a:	4603      	mov	r3, r0
 801111c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801111e:	7bbb      	ldrb	r3, [r7, #14]
 8011120:	2b01      	cmp	r3, #1
 8011122:	d103      	bne.n	801112c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2207      	movs	r2, #7
 8011128:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801112a:	e0ac      	b.n	8011286 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 801112c:	7bbb      	ldrb	r3, [r7, #14]
 801112e:	2b05      	cmp	r3, #5
 8011130:	d105      	bne.n	801113e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	220c      	movs	r2, #12
 8011136:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011138:	2303      	movs	r3, #3
 801113a:	73fb      	strb	r3, [r7, #15]
      break;
 801113c:	e0a3      	b.n	8011286 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 801113e:	7bbb      	ldrb	r3, [r7, #14]
 8011140:	2b02      	cmp	r3, #2
 8011142:	d103      	bne.n	801114c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2205      	movs	r2, #5
 8011148:	761a      	strb	r2, [r3, #24]
      break;
 801114a:	e09c      	b.n	8011286 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 801114c:	7bbb      	ldrb	r3, [r7, #14]
 801114e:	2b04      	cmp	r3, #4
 8011150:	f040 8099 	bne.w	8011286 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	220b      	movs	r2, #11
 8011158:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801115a:	2302      	movs	r3, #2
 801115c:	73fb      	strb	r3, [r7, #15]
      break;
 801115e:	e092      	b.n	8011286 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	791b      	ldrb	r3, [r3, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	2100      	movs	r1, #0
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 f8d6 	bl	801131a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011174:	b29a      	uxth	r2, r3
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2208      	movs	r2, #8
 801117e:	761a      	strb	r2, [r3, #24]

      break;
 8011180:	e086      	b.n	8011290 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	791b      	ldrb	r3, [r3, #4]
 8011186:	4619      	mov	r1, r3
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 fc63 	bl	8011a54 <USBH_LL_GetURBState>
 801118e:	4603      	mov	r3, r0
 8011190:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011192:	7bbb      	ldrb	r3, [r7, #14]
 8011194:	2b01      	cmp	r3, #1
 8011196:	d105      	bne.n	80111a4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	220d      	movs	r2, #13
 801119c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801119e:	2300      	movs	r3, #0
 80111a0:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80111a2:	e072      	b.n	801128a <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80111a4:	7bbb      	ldrb	r3, [r7, #14]
 80111a6:	2b04      	cmp	r3, #4
 80111a8:	d103      	bne.n	80111b2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	220b      	movs	r2, #11
 80111ae:	761a      	strb	r2, [r3, #24]
      break;
 80111b0:	e06b      	b.n	801128a <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	2b05      	cmp	r3, #5
 80111b6:	d168      	bne.n	801128a <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 80111b8:	2303      	movs	r3, #3
 80111ba:	73fb      	strb	r3, [r7, #15]
      break;
 80111bc:	e065      	b.n	801128a <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	795b      	ldrb	r3, [r3, #5]
 80111c2:	2201      	movs	r2, #1
 80111c4:	9200      	str	r2, [sp, #0]
 80111c6:	2200      	movs	r2, #0
 80111c8:	2100      	movs	r1, #0
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f880 	bl	80112d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	220a      	movs	r2, #10
 80111e0:	761a      	strb	r2, [r3, #24]
      break;
 80111e2:	e055      	b.n	8011290 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	795b      	ldrb	r3, [r3, #5]
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fc32 	bl	8011a54 <USBH_LL_GetURBState>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d105      	bne.n	8011206 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	220d      	movs	r2, #13
 8011202:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8011204:	e043      	b.n	801128e <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011206:	7bbb      	ldrb	r3, [r7, #14]
 8011208:	2b02      	cmp	r3, #2
 801120a:	d103      	bne.n	8011214 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2209      	movs	r2, #9
 8011210:	761a      	strb	r2, [r3, #24]
      break;
 8011212:	e03c      	b.n	801128e <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8011214:	7bbb      	ldrb	r3, [r7, #14]
 8011216:	2b04      	cmp	r3, #4
 8011218:	d139      	bne.n	801128e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	220b      	movs	r2, #11
 801121e:	761a      	strb	r2, [r3, #24]
      break;
 8011220:	e035      	b.n	801128e <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7e5b      	ldrb	r3, [r3, #25]
 8011226:	3301      	adds	r3, #1
 8011228:	b2da      	uxtb	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	765a      	strb	r2, [r3, #25]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	7e5b      	ldrb	r3, [r3, #25]
 8011232:	2b02      	cmp	r3, #2
 8011234:	d806      	bhi.n	8011244 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2201      	movs	r2, #1
 801123a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2201      	movs	r2, #1
 8011240:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011242:	e025      	b.n	8011290 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801124a:	2106      	movs	r1, #6
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	795b      	ldrb	r3, [r3, #5]
 801125a:	4619      	mov	r1, r3
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 f90d 	bl	801147c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	791b      	ldrb	r3, [r3, #4]
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f000 f907 	bl	801147c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011274:	2302      	movs	r3, #2
 8011276:	73fb      	strb	r3, [r7, #15]
      break;
 8011278:	e00a      	b.n	8011290 <USBH_HandleControl+0x2e0>

    default:
      break;
 801127a:	bf00      	nop
 801127c:	e008      	b.n	8011290 <USBH_HandleControl+0x2e0>
      break;
 801127e:	bf00      	nop
 8011280:	e006      	b.n	8011290 <USBH_HandleControl+0x2e0>
      break;
 8011282:	bf00      	nop
 8011284:	e004      	b.n	8011290 <USBH_HandleControl+0x2e0>
      break;
 8011286:	bf00      	nop
 8011288:	e002      	b.n	8011290 <USBH_HandleControl+0x2e0>
      break;
 801128a:	bf00      	nop
 801128c:	e000      	b.n	8011290 <USBH_HandleControl+0x2e0>
      break;
 801128e:	bf00      	nop
  }

  return status;
 8011290:	7bfb      	ldrb	r3, [r7, #15]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop

0801129c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af04      	add	r7, sp, #16
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	4613      	mov	r3, r2
 80112a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80112aa:	79f9      	ldrb	r1, [r7, #7]
 80112ac:	2300      	movs	r3, #0
 80112ae:	9303      	str	r3, [sp, #12]
 80112b0:	2308      	movs	r3, #8
 80112b2:	9302      	str	r3, [sp, #8]
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	9301      	str	r3, [sp, #4]
 80112b8:	2300      	movs	r3, #0
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	2300      	movs	r3, #0
 80112be:	2200      	movs	r2, #0
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f000 fb96 	bl	80119f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80112c6:	2300      	movs	r3, #0
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3710      	adds	r7, #16
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b088      	sub	sp, #32
 80112d4:	af04      	add	r7, sp, #16
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	4611      	mov	r1, r2
 80112dc:	461a      	mov	r2, r3
 80112de:	460b      	mov	r3, r1
 80112e0:	80fb      	strh	r3, [r7, #6]
 80112e2:	4613      	mov	r3, r2
 80112e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d001      	beq.n	80112f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80112f0:	2300      	movs	r3, #0
 80112f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80112f4:	7979      	ldrb	r1, [r7, #5]
 80112f6:	7e3b      	ldrb	r3, [r7, #24]
 80112f8:	9303      	str	r3, [sp, #12]
 80112fa:	88fb      	ldrh	r3, [r7, #6]
 80112fc:	9302      	str	r3, [sp, #8]
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	9301      	str	r3, [sp, #4]
 8011302:	2301      	movs	r3, #1
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	2300      	movs	r3, #0
 8011308:	2200      	movs	r2, #0
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f000 fb71 	bl	80119f2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3710      	adds	r7, #16
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b088      	sub	sp, #32
 801131e:	af04      	add	r7, sp, #16
 8011320:	60f8      	str	r0, [r7, #12]
 8011322:	60b9      	str	r1, [r7, #8]
 8011324:	4611      	mov	r1, r2
 8011326:	461a      	mov	r2, r3
 8011328:	460b      	mov	r3, r1
 801132a:	80fb      	strh	r3, [r7, #6]
 801132c:	4613      	mov	r3, r2
 801132e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011330:	7979      	ldrb	r1, [r7, #5]
 8011332:	2300      	movs	r3, #0
 8011334:	9303      	str	r3, [sp, #12]
 8011336:	88fb      	ldrh	r3, [r7, #6]
 8011338:	9302      	str	r3, [sp, #8]
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	2301      	movs	r3, #1
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	2300      	movs	r3, #0
 8011344:	2201      	movs	r2, #1
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f000 fb53 	bl	80119f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801134c:	2300      	movs	r3, #0

}
 801134e:	4618      	mov	r0, r3
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b088      	sub	sp, #32
 801135a:	af04      	add	r7, sp, #16
 801135c:	60f8      	str	r0, [r7, #12]
 801135e:	60b9      	str	r1, [r7, #8]
 8011360:	4611      	mov	r1, r2
 8011362:	461a      	mov	r2, r3
 8011364:	460b      	mov	r3, r1
 8011366:	80fb      	strh	r3, [r7, #6]
 8011368:	4613      	mov	r3, r2
 801136a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011376:	2300      	movs	r3, #0
 8011378:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801137a:	7979      	ldrb	r1, [r7, #5]
 801137c:	7e3b      	ldrb	r3, [r7, #24]
 801137e:	9303      	str	r3, [sp, #12]
 8011380:	88fb      	ldrh	r3, [r7, #6]
 8011382:	9302      	str	r3, [sp, #8]
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	9301      	str	r3, [sp, #4]
 8011388:	2301      	movs	r3, #1
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	2302      	movs	r3, #2
 801138e:	2200      	movs	r2, #0
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f000 fb2e 	bl	80119f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011396:	2300      	movs	r3, #0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b088      	sub	sp, #32
 80113a4:	af04      	add	r7, sp, #16
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	4611      	mov	r1, r2
 80113ac:	461a      	mov	r2, r3
 80113ae:	460b      	mov	r3, r1
 80113b0:	80fb      	strh	r3, [r7, #6]
 80113b2:	4613      	mov	r3, r2
 80113b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80113b6:	7979      	ldrb	r1, [r7, #5]
 80113b8:	2300      	movs	r3, #0
 80113ba:	9303      	str	r3, [sp, #12]
 80113bc:	88fb      	ldrh	r3, [r7, #6]
 80113be:	9302      	str	r3, [sp, #8]
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	2301      	movs	r3, #1
 80113c6:	9300      	str	r3, [sp, #0]
 80113c8:	2302      	movs	r3, #2
 80113ca:	2201      	movs	r2, #1
 80113cc:	68f8      	ldr	r0, [r7, #12]
 80113ce:	f000 fb10 	bl	80119f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3710      	adds	r7, #16
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b086      	sub	sp, #24
 80113e0:	af04      	add	r7, sp, #16
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	4608      	mov	r0, r1
 80113e6:	4611      	mov	r1, r2
 80113e8:	461a      	mov	r2, r3
 80113ea:	4603      	mov	r3, r0
 80113ec:	70fb      	strb	r3, [r7, #3]
 80113ee:	460b      	mov	r3, r1
 80113f0:	70bb      	strb	r3, [r7, #2]
 80113f2:	4613      	mov	r3, r2
 80113f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80113f6:	7878      	ldrb	r0, [r7, #1]
 80113f8:	78ba      	ldrb	r2, [r7, #2]
 80113fa:	78f9      	ldrb	r1, [r7, #3]
 80113fc:	8b3b      	ldrh	r3, [r7, #24]
 80113fe:	9302      	str	r3, [sp, #8]
 8011400:	7d3b      	ldrb	r3, [r7, #20]
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	7c3b      	ldrb	r3, [r7, #16]
 8011406:	9300      	str	r3, [sp, #0]
 8011408:	4603      	mov	r3, r0
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 faa3 	bl	8011956 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	460b      	mov	r3, r1
 8011424:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011426:	78fb      	ldrb	r3, [r7, #3]
 8011428:	4619      	mov	r1, r3
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 fac2 	bl	80119b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3708      	adds	r7, #8
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}

0801143a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801143a:	b580      	push	{r7, lr}
 801143c:	b084      	sub	sp, #16
 801143e:	af00      	add	r7, sp, #0
 8011440:	6078      	str	r0, [r7, #4]
 8011442:	460b      	mov	r3, r1
 8011444:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 f836 	bl	80114b8 <USBH_GetFreePipe>
 801144c:	4603      	mov	r3, r0
 801144e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011450:	89fb      	ldrh	r3, [r7, #14]
 8011452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011456:	4293      	cmp	r3, r2
 8011458:	d00a      	beq.n	8011470 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801145a:	78fa      	ldrb	r2, [r7, #3]
 801145c:	89fb      	ldrh	r3, [r7, #14]
 801145e:	f003 030f 	and.w	r3, r3, #15
 8011462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011466:	6879      	ldr	r1, [r7, #4]
 8011468:	33e0      	adds	r3, #224	@ 0xe0
 801146a:	009b      	lsls	r3, r3, #2
 801146c:	440b      	add	r3, r1
 801146e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011470:	89fb      	ldrh	r3, [r7, #14]
 8011472:	b2db      	uxtb	r3, r3
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011488:	78fb      	ldrb	r3, [r7, #3]
 801148a:	2b0f      	cmp	r3, #15
 801148c:	d80d      	bhi.n	80114aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801148e:	78fb      	ldrb	r3, [r7, #3]
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	33e0      	adds	r3, #224	@ 0xe0
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	4413      	add	r3, r2
 8011498:	685a      	ldr	r2, [r3, #4]
 801149a:	78fb      	ldrb	r3, [r7, #3]
 801149c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	33e0      	adds	r3, #224	@ 0xe0
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	440b      	add	r3, r1
 80114a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80114c0:	2300      	movs	r3, #0
 80114c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80114c4:	2300      	movs	r3, #0
 80114c6:	73fb      	strb	r3, [r7, #15]
 80114c8:	e00f      	b.n	80114ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	33e0      	adds	r3, #224	@ 0xe0
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4413      	add	r3, r2
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d102      	bne.n	80114e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80114de:	7bfb      	ldrb	r3, [r7, #15]
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	e007      	b.n	80114f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80114e4:	7bfb      	ldrb	r3, [r7, #15]
 80114e6:	3301      	adds	r3, #1
 80114e8:	73fb      	strb	r3, [r7, #15]
 80114ea:	7bfb      	ldrb	r3, [r7, #15]
 80114ec:	2b0f      	cmp	r3, #15
 80114ee:	d9ec      	bls.n	80114ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80114f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3714      	adds	r7, #20
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr

08011500 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011500:	b480      	push	{r7}
 8011502:	b087      	sub	sp, #28
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	4613      	mov	r3, r2
 801150c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801150e:	2301      	movs	r3, #1
 8011510:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011512:	2300      	movs	r3, #0
 8011514:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011516:	4b1f      	ldr	r3, [pc, #124]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011518:	7a5b      	ldrb	r3, [r3, #9]
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d131      	bne.n	8011584 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011520:	4b1c      	ldr	r3, [pc, #112]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011522:	7a5b      	ldrb	r3, [r3, #9]
 8011524:	b2db      	uxtb	r3, r3
 8011526:	461a      	mov	r2, r3
 8011528:	4b1a      	ldr	r3, [pc, #104]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 801152a:	2100      	movs	r1, #0
 801152c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801152e:	4b19      	ldr	r3, [pc, #100]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011530:	7a5b      	ldrb	r3, [r3, #9]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	4a17      	ldr	r2, [pc, #92]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	68fa      	ldr	r2, [r7, #12]
 801153c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801153e:	4b15      	ldr	r3, [pc, #84]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011540:	7a5b      	ldrb	r3, [r3, #9]
 8011542:	b2db      	uxtb	r3, r3
 8011544:	461a      	mov	r2, r3
 8011546:	4b13      	ldr	r3, [pc, #76]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011548:	4413      	add	r3, r2
 801154a:	79fa      	ldrb	r2, [r7, #7]
 801154c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801154e:	4b11      	ldr	r3, [pc, #68]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 8011550:	7a5b      	ldrb	r3, [r3, #9]
 8011552:	b2db      	uxtb	r3, r3
 8011554:	1c5a      	adds	r2, r3, #1
 8011556:	b2d1      	uxtb	r1, r2
 8011558:	4a0e      	ldr	r2, [pc, #56]	@ (8011594 <FATFS_LinkDriverEx+0x94>)
 801155a:	7251      	strb	r1, [r2, #9]
 801155c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801155e:	7dbb      	ldrb	r3, [r7, #22]
 8011560:	3330      	adds	r3, #48	@ 0x30
 8011562:	b2da      	uxtb	r2, r3
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	3301      	adds	r3, #1
 801156c:	223a      	movs	r2, #58	@ 0x3a
 801156e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	3302      	adds	r3, #2
 8011574:	222f      	movs	r2, #47	@ 0x2f
 8011576:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	3303      	adds	r3, #3
 801157c:	2200      	movs	r2, #0
 801157e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011580:	2300      	movs	r3, #0
 8011582:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011584:	7dfb      	ldrb	r3, [r7, #23]
}
 8011586:	4618      	mov	r0, r3
 8011588:	371c      	adds	r7, #28
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	20000b30 	.word	0x20000b30

08011598 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80115a2:	2200      	movs	r2, #0
 80115a4:	6839      	ldr	r1, [r7, #0]
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f7ff ffaa 	bl	8011500 <FATFS_LinkDriverEx>
 80115ac:	4603      	mov	r3, r0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
	...

080115b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80115bc:	2201      	movs	r2, #1
 80115be:	490e      	ldr	r1, [pc, #56]	@ (80115f8 <MX_USB_HOST_Init+0x40>)
 80115c0:	480e      	ldr	r0, [pc, #56]	@ (80115fc <MX_USB_HOST_Init+0x44>)
 80115c2:	f7fe fab3 	bl	800fb2c <USBH_Init>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80115cc:	f7f0 f920 	bl	8001810 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80115d0:	490b      	ldr	r1, [pc, #44]	@ (8011600 <MX_USB_HOST_Init+0x48>)
 80115d2:	480a      	ldr	r0, [pc, #40]	@ (80115fc <MX_USB_HOST_Init+0x44>)
 80115d4:	f7fe fb55 	bl	800fc82 <USBH_RegisterClass>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d001      	beq.n	80115e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80115de:	f7f0 f917 	bl	8001810 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80115e2:	4806      	ldr	r0, [pc, #24]	@ (80115fc <MX_USB_HOST_Init+0x44>)
 80115e4:	f7fe fbd9 	bl	800fd9a <USBH_Start>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d001      	beq.n	80115f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80115ee:	f7f0 f90f 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80115f2:	bf00      	nop
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	08011619 	.word	0x08011619
 80115fc:	20000b3c 	.word	0x20000b3c
 8011600:	2000000c 	.word	0x2000000c

08011604 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011608:	4802      	ldr	r0, [pc, #8]	@ (8011614 <MX_USB_HOST_Process+0x10>)
 801160a:	f7fe fbd7 	bl	800fdbc <USBH_Process>
}
 801160e:	bf00      	nop
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	20000b3c 	.word	0x20000b3c

08011618 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011624:	78fb      	ldrb	r3, [r7, #3]
 8011626:	3b01      	subs	r3, #1
 8011628:	2b04      	cmp	r3, #4
 801162a:	d819      	bhi.n	8011660 <USBH_UserProcess+0x48>
 801162c:	a201      	add	r2, pc, #4	@ (adr r2, 8011634 <USBH_UserProcess+0x1c>)
 801162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011632:	bf00      	nop
 8011634:	08011661 	.word	0x08011661
 8011638:	08011651 	.word	0x08011651
 801163c:	08011661 	.word	0x08011661
 8011640:	08011659 	.word	0x08011659
 8011644:	08011649 	.word	0x08011649
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011648:	4b09      	ldr	r3, [pc, #36]	@ (8011670 <USBH_UserProcess+0x58>)
 801164a:	2203      	movs	r2, #3
 801164c:	701a      	strb	r2, [r3, #0]
  break;
 801164e:	e008      	b.n	8011662 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011650:	4b07      	ldr	r3, [pc, #28]	@ (8011670 <USBH_UserProcess+0x58>)
 8011652:	2202      	movs	r2, #2
 8011654:	701a      	strb	r2, [r3, #0]
  break;
 8011656:	e004      	b.n	8011662 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011658:	4b05      	ldr	r3, [pc, #20]	@ (8011670 <USBH_UserProcess+0x58>)
 801165a:	2201      	movs	r2, #1
 801165c:	701a      	strb	r2, [r3, #0]
  break;
 801165e:	e000      	b.n	8011662 <USBH_UserProcess+0x4a>

  default:
  break;
 8011660:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011662:	bf00      	nop
 8011664:	370c      	adds	r7, #12
 8011666:	46bd      	mov	sp, r7
 8011668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166c:	4770      	bx	lr
 801166e:	bf00      	nop
 8011670:	20000f14 	.word	0x20000f14

08011674 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b08a      	sub	sp, #40	@ 0x28
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801167c:	f107 0314 	add.w	r3, r7, #20
 8011680:	2200      	movs	r2, #0
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	605a      	str	r2, [r3, #4]
 8011686:	609a      	str	r2, [r3, #8]
 8011688:	60da      	str	r2, [r3, #12]
 801168a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011694:	d13c      	bne.n	8011710 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011696:	4b20      	ldr	r3, [pc, #128]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 8011698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801169a:	4a1f      	ldr	r2, [pc, #124]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 801169c:	f043 0301 	orr.w	r3, r3, #1
 80116a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80116a2:	4b1d      	ldr	r3, [pc, #116]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116a6:	f003 0301 	and.w	r3, r3, #1
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80116ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80116b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116b4:	2302      	movs	r3, #2
 80116b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116b8:	2300      	movs	r3, #0
 80116ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116bc:	2303      	movs	r3, #3
 80116be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80116c0:	230a      	movs	r3, #10
 80116c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80116c4:	f107 0314 	add.w	r3, r7, #20
 80116c8:	4619      	mov	r1, r3
 80116ca:	4814      	ldr	r0, [pc, #80]	@ (801171c <HAL_HCD_MspInit+0xa8>)
 80116cc:	f7f2 feaa 	bl	8004424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80116d0:	4b11      	ldr	r3, [pc, #68]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116d4:	4a10      	ldr	r2, [pc, #64]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116da:	6353      	str	r3, [r2, #52]	@ 0x34
 80116dc:	4b0e      	ldr	r3, [pc, #56]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116e4:	60fb      	str	r3, [r7, #12]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116ec:	4a0a      	ldr	r2, [pc, #40]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80116f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80116f4:	4b08      	ldr	r3, [pc, #32]	@ (8011718 <HAL_HCD_MspInit+0xa4>)
 80116f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116fc:	60bb      	str	r3, [r7, #8]
 80116fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011700:	2200      	movs	r2, #0
 8011702:	2100      	movs	r1, #0
 8011704:	2043      	movs	r0, #67	@ 0x43
 8011706:	f7f1 ff2b 	bl	8003560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801170a:	2043      	movs	r0, #67	@ 0x43
 801170c:	f7f1 ff44 	bl	8003598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011710:	bf00      	nop
 8011712:	3728      	adds	r7, #40	@ 0x28
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	40023800 	.word	0x40023800
 801171c:	40020000 	.word	0x40020000

08011720 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801172e:	4618      	mov	r0, r3
 8011730:	f7fe ff1d 	bl	801056e <USBH_LL_IncTimer>
}
 8011734:	bf00      	nop
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801174a:	4618      	mov	r0, r3
 801174c:	f7fe ff59 	bl	8010602 <USBH_LL_Connect>
}
 8011750:	bf00      	nop
 8011752:	3708      	adds	r7, #8
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011766:	4618      	mov	r0, r3
 8011768:	f7fe ff62 	bl	8010630 <USBH_LL_Disconnect>
}
 801176c:	bf00      	nop
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	460b      	mov	r3, r1
 801177e:	70fb      	strb	r3, [r7, #3]
 8011780:	4613      	mov	r3, r2
 8011782:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011784:	bf00      	nop
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fe ff0f 	bl	80105c2 <USBH_LL_PortEnabled>
}
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fe ff0f 	bl	80105de <USBH_LL_PortDisabled>
}
 80117c0:	bf00      	nop
 80117c2:	3708      	adds	r7, #8
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d12a      	bne.n	8011830 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80117da:	4a18      	ldr	r2, [pc, #96]	@ (801183c <USBH_LL_Init+0x74>)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4a15      	ldr	r2, [pc, #84]	@ (801183c <USBH_LL_Init+0x74>)
 80117e6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80117ea:	4b14      	ldr	r3, [pc, #80]	@ (801183c <USBH_LL_Init+0x74>)
 80117ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80117f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80117f2:	4b12      	ldr	r3, [pc, #72]	@ (801183c <USBH_LL_Init+0x74>)
 80117f4:	2208      	movs	r2, #8
 80117f6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80117f8:	4b10      	ldr	r3, [pc, #64]	@ (801183c <USBH_LL_Init+0x74>)
 80117fa:	2201      	movs	r2, #1
 80117fc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80117fe:	4b0f      	ldr	r3, [pc, #60]	@ (801183c <USBH_LL_Init+0x74>)
 8011800:	2200      	movs	r2, #0
 8011802:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011804:	4b0d      	ldr	r3, [pc, #52]	@ (801183c <USBH_LL_Init+0x74>)
 8011806:	2202      	movs	r2, #2
 8011808:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801180a:	4b0c      	ldr	r3, [pc, #48]	@ (801183c <USBH_LL_Init+0x74>)
 801180c:	2200      	movs	r2, #0
 801180e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011810:	480a      	ldr	r0, [pc, #40]	@ (801183c <USBH_LL_Init+0x74>)
 8011812:	f7f2 ffe4 	bl	80047de <HAL_HCD_Init>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d001      	beq.n	8011820 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801181c:	f7ef fff8 	bl	8001810 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011820:	4806      	ldr	r0, [pc, #24]	@ (801183c <USBH_LL_Init+0x74>)
 8011822:	f7f3 fc45 	bl	80050b0 <HAL_HCD_GetCurrentFrame>
 8011826:	4603      	mov	r3, r0
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7fe fe90 	bl	8010550 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	20000f18 	.word	0x20000f18

08011840 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b084      	sub	sp, #16
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011848:	2300      	movs	r3, #0
 801184a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801184c:	2300      	movs	r3, #0
 801184e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011856:	4618      	mov	r0, r3
 8011858:	f7f3 fbb2 	bl	8004fc0 <HAL_HCD_Start>
 801185c:	4603      	mov	r3, r0
 801185e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011860:	7bfb      	ldrb	r3, [r7, #15]
 8011862:	4618      	mov	r0, r3
 8011864:	f000 f95e 	bl	8011b24 <USBH_Get_USB_Status>
 8011868:	4603      	mov	r3, r0
 801186a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801186c:	7bbb      	ldrb	r3, [r7, #14]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b084      	sub	sp, #16
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801187e:	2300      	movs	r3, #0
 8011880:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011882:	2300      	movs	r3, #0
 8011884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801188c:	4618      	mov	r0, r3
 801188e:	f7f3 fbba 	bl	8005006 <HAL_HCD_Stop>
 8011892:	4603      	mov	r3, r0
 8011894:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	4618      	mov	r0, r3
 801189a:	f000 f943 	bl	8011b24 <USBH_Get_USB_Status>
 801189e:	4603      	mov	r3, r0
 80118a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80118b4:	2301      	movs	r3, #1
 80118b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80118be:	4618      	mov	r0, r3
 80118c0:	f7f3 fc04 	bl	80050cc <HAL_HCD_GetCurrentSpeed>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d00c      	beq.n	80118e4 <USBH_LL_GetSpeed+0x38>
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d80d      	bhi.n	80118ea <USBH_LL_GetSpeed+0x3e>
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d002      	beq.n	80118d8 <USBH_LL_GetSpeed+0x2c>
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d003      	beq.n	80118de <USBH_LL_GetSpeed+0x32>
 80118d6:	e008      	b.n	80118ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80118d8:	2300      	movs	r3, #0
 80118da:	73fb      	strb	r3, [r7, #15]
    break;
 80118dc:	e008      	b.n	80118f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80118de:	2301      	movs	r3, #1
 80118e0:	73fb      	strb	r3, [r7, #15]
    break;
 80118e2:	e005      	b.n	80118f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80118e4:	2302      	movs	r3, #2
 80118e6:	73fb      	strb	r3, [r7, #15]
    break;
 80118e8:	e002      	b.n	80118f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80118ea:	2301      	movs	r3, #1
 80118ec:	73fb      	strb	r3, [r7, #15]
    break;
 80118ee:	bf00      	nop
  }
  return  speed;
 80118f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b084      	sub	sp, #16
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011902:	2300      	movs	r3, #0
 8011904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011906:	2300      	movs	r3, #0
 8011908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011910:	4618      	mov	r0, r3
 8011912:	f7f3 fb95 	bl	8005040 <HAL_HCD_ResetPort>
 8011916:	4603      	mov	r3, r0
 8011918:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801191a:	7bfb      	ldrb	r3, [r7, #15]
 801191c:	4618      	mov	r0, r3
 801191e:	f000 f901 	bl	8011b24 <USBH_Get_USB_Status>
 8011922:	4603      	mov	r3, r0
 8011924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011926:	7bbb      	ldrb	r3, [r7, #14]
}
 8011928:	4618      	mov	r0, r3
 801192a:	3710      	adds	r7, #16
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	460b      	mov	r3, r1
 801193a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011942:	78fa      	ldrb	r2, [r7, #3]
 8011944:	4611      	mov	r1, r2
 8011946:	4618      	mov	r0, r3
 8011948:	f7f3 fb9d 	bl	8005086 <HAL_HCD_HC_GetXferCount>
 801194c:	4603      	mov	r3, r0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}

08011956 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011956:	b590      	push	{r4, r7, lr}
 8011958:	b089      	sub	sp, #36	@ 0x24
 801195a:	af04      	add	r7, sp, #16
 801195c:	6078      	str	r0, [r7, #4]
 801195e:	4608      	mov	r0, r1
 8011960:	4611      	mov	r1, r2
 8011962:	461a      	mov	r2, r3
 8011964:	4603      	mov	r3, r0
 8011966:	70fb      	strb	r3, [r7, #3]
 8011968:	460b      	mov	r3, r1
 801196a:	70bb      	strb	r3, [r7, #2]
 801196c:	4613      	mov	r3, r2
 801196e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011974:	2300      	movs	r3, #0
 8011976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801197e:	787c      	ldrb	r4, [r7, #1]
 8011980:	78ba      	ldrb	r2, [r7, #2]
 8011982:	78f9      	ldrb	r1, [r7, #3]
 8011984:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011986:	9302      	str	r3, [sp, #8]
 8011988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801198c:	9301      	str	r3, [sp, #4]
 801198e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011992:	9300      	str	r3, [sp, #0]
 8011994:	4623      	mov	r3, r4
 8011996:	f7f2 ff89 	bl	80048ac <HAL_HCD_HC_Init>
 801199a:	4603      	mov	r3, r0
 801199c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801199e:	7bfb      	ldrb	r3, [r7, #15]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f000 f8bf 	bl	8011b24 <USBH_Get_USB_Status>
 80119a6:	4603      	mov	r3, r0
 80119a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3714      	adds	r7, #20
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd90      	pop	{r4, r7, pc}

080119b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	460b      	mov	r3, r1
 80119be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119c0:	2300      	movs	r3, #0
 80119c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119c4:	2300      	movs	r3, #0
 80119c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80119ce:	78fa      	ldrb	r2, [r7, #3]
 80119d0:	4611      	mov	r1, r2
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7f3 f822 	bl	8004a1c <HAL_HCD_HC_Halt>
 80119d8:	4603      	mov	r3, r0
 80119da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119dc:	7bfb      	ldrb	r3, [r7, #15]
 80119de:	4618      	mov	r0, r3
 80119e0:	f000 f8a0 	bl	8011b24 <USBH_Get_USB_Status>
 80119e4:	4603      	mov	r3, r0
 80119e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80119f2:	b590      	push	{r4, r7, lr}
 80119f4:	b089      	sub	sp, #36	@ 0x24
 80119f6:	af04      	add	r7, sp, #16
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	4608      	mov	r0, r1
 80119fc:	4611      	mov	r1, r2
 80119fe:	461a      	mov	r2, r3
 8011a00:	4603      	mov	r3, r0
 8011a02:	70fb      	strb	r3, [r7, #3]
 8011a04:	460b      	mov	r3, r1
 8011a06:	70bb      	strb	r3, [r7, #2]
 8011a08:	4613      	mov	r3, r2
 8011a0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a10:	2300      	movs	r3, #0
 8011a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011a1a:	787c      	ldrb	r4, [r7, #1]
 8011a1c:	78ba      	ldrb	r2, [r7, #2]
 8011a1e:	78f9      	ldrb	r1, [r7, #3]
 8011a20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011a24:	9303      	str	r3, [sp, #12]
 8011a26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a28:	9302      	str	r3, [sp, #8]
 8011a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a2c:	9301      	str	r3, [sp, #4]
 8011a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	4623      	mov	r3, r4
 8011a36:	f7f3 f815 	bl	8004a64 <HAL_HCD_HC_SubmitRequest>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011a3e:	7bfb      	ldrb	r3, [r7, #15]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f000 f86f 	bl	8011b24 <USBH_Get_USB_Status>
 8011a46:	4603      	mov	r3, r0
 8011a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3714      	adds	r7, #20
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd90      	pop	{r4, r7, pc}

08011a54 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011a66:	78fa      	ldrb	r2, [r7, #3]
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7f3 faf6 	bl	800505c <HAL_HCD_HC_GetURBState>
 8011a70:	4603      	mov	r3, r0
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b082      	sub	sp, #8
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
 8011a82:	460b      	mov	r3, r1
 8011a84:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d103      	bne.n	8011a98 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011a90:	78fb      	ldrb	r3, [r7, #3]
 8011a92:	4618      	mov	r0, r3
 8011a94:	f000 f872 	bl	8011b7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011a98:	20c8      	movs	r0, #200	@ 0xc8
 8011a9a:	f7f1 f9ed 	bl	8002e78 <HAL_Delay>
  return USBH_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	70fb      	strb	r3, [r7, #3]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011abe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011ac0:	78fa      	ldrb	r2, [r7, #3]
 8011ac2:	68f9      	ldr	r1, [r7, #12]
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	011b      	lsls	r3, r3, #4
 8011ac8:	1a9b      	subs	r3, r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	440b      	add	r3, r1
 8011ace:	3317      	adds	r3, #23
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00a      	beq.n	8011aec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011ad6:	78fa      	ldrb	r2, [r7, #3]
 8011ad8:	68f9      	ldr	r1, [r7, #12]
 8011ada:	4613      	mov	r3, r2
 8011adc:	011b      	lsls	r3, r3, #4
 8011ade:	1a9b      	subs	r3, r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	440b      	add	r3, r1
 8011ae4:	333c      	adds	r3, #60	@ 0x3c
 8011ae6:	78ba      	ldrb	r2, [r7, #2]
 8011ae8:	701a      	strb	r2, [r3, #0]
 8011aea:	e009      	b.n	8011b00 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011aec:	78fa      	ldrb	r2, [r7, #3]
 8011aee:	68f9      	ldr	r1, [r7, #12]
 8011af0:	4613      	mov	r3, r2
 8011af2:	011b      	lsls	r3, r3, #4
 8011af4:	1a9b      	subs	r3, r3, r2
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	440b      	add	r3, r1
 8011afa:	333d      	adds	r3, #61	@ 0x3d
 8011afc:	78ba      	ldrb	r2, [r7, #2]
 8011afe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011b00:	2300      	movs	r3, #0
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3714      	adds	r7, #20
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr

08011b0e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7f1 f9ae 	bl	8002e78 <HAL_Delay>
}
 8011b1c:	bf00      	nop
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b085      	sub	sp, #20
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b32:	79fb      	ldrb	r3, [r7, #7]
 8011b34:	2b03      	cmp	r3, #3
 8011b36:	d817      	bhi.n	8011b68 <USBH_Get_USB_Status+0x44>
 8011b38:	a201      	add	r2, pc, #4	@ (adr r2, 8011b40 <USBH_Get_USB_Status+0x1c>)
 8011b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b3e:	bf00      	nop
 8011b40:	08011b51 	.word	0x08011b51
 8011b44:	08011b57 	.word	0x08011b57
 8011b48:	08011b5d 	.word	0x08011b5d
 8011b4c:	08011b63 	.word	0x08011b63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011b50:	2300      	movs	r3, #0
 8011b52:	73fb      	strb	r3, [r7, #15]
    break;
 8011b54:	e00b      	b.n	8011b6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011b56:	2302      	movs	r3, #2
 8011b58:	73fb      	strb	r3, [r7, #15]
    break;
 8011b5a:	e008      	b.n	8011b6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b60:	e005      	b.n	8011b6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011b62:	2302      	movs	r3, #2
 8011b64:	73fb      	strb	r3, [r7, #15]
    break;
 8011b66:	e002      	b.n	8011b6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011b68:	2302      	movs	r3, #2
 8011b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011b6c:	bf00      	nop
  }
  return usb_status;
 8011b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3714      	adds	r7, #20
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	4603      	mov	r3, r0
 8011b84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011b86:	79fb      	ldrb	r3, [r7, #7]
 8011b88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d102      	bne.n	8011b96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011b90:	2300      	movs	r3, #0
 8011b92:	73fb      	strb	r3, [r7, #15]
 8011b94:	e001      	b.n	8011b9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011b96:	2301      	movs	r3, #1
 8011b98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8011b9a:	7bfb      	ldrb	r3, [r7, #15]
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	2120      	movs	r1, #32
 8011ba0:	4803      	ldr	r0, [pc, #12]	@ (8011bb0 <MX_DriverVbusFS+0x34>)
 8011ba2:	f7f2 fe03 	bl	80047ac <HAL_GPIO_WritePin>
}
 8011ba6:	bf00      	nop
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	40020c00 	.word	0x40020c00

08011bb4 <malloc>:
 8011bb4:	4b02      	ldr	r3, [pc, #8]	@ (8011bc0 <malloc+0xc>)
 8011bb6:	4601      	mov	r1, r0
 8011bb8:	6818      	ldr	r0, [r3, #0]
 8011bba:	f000 b82d 	b.w	8011c18 <_malloc_r>
 8011bbe:	bf00      	nop
 8011bc0:	2000002c 	.word	0x2000002c

08011bc4 <free>:
 8011bc4:	4b02      	ldr	r3, [pc, #8]	@ (8011bd0 <free+0xc>)
 8011bc6:	4601      	mov	r1, r0
 8011bc8:	6818      	ldr	r0, [r3, #0]
 8011bca:	f000 b8f5 	b.w	8011db8 <_free_r>
 8011bce:	bf00      	nop
 8011bd0:	2000002c 	.word	0x2000002c

08011bd4 <sbrk_aligned>:
 8011bd4:	b570      	push	{r4, r5, r6, lr}
 8011bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8011c14 <sbrk_aligned+0x40>)
 8011bd8:	460c      	mov	r4, r1
 8011bda:	6831      	ldr	r1, [r6, #0]
 8011bdc:	4605      	mov	r5, r0
 8011bde:	b911      	cbnz	r1, 8011be6 <sbrk_aligned+0x12>
 8011be0:	f000 f8ae 	bl	8011d40 <_sbrk_r>
 8011be4:	6030      	str	r0, [r6, #0]
 8011be6:	4621      	mov	r1, r4
 8011be8:	4628      	mov	r0, r5
 8011bea:	f000 f8a9 	bl	8011d40 <_sbrk_r>
 8011bee:	1c43      	adds	r3, r0, #1
 8011bf0:	d103      	bne.n	8011bfa <sbrk_aligned+0x26>
 8011bf2:	f04f 34ff 	mov.w	r4, #4294967295
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	bd70      	pop	{r4, r5, r6, pc}
 8011bfa:	1cc4      	adds	r4, r0, #3
 8011bfc:	f024 0403 	bic.w	r4, r4, #3
 8011c00:	42a0      	cmp	r0, r4
 8011c02:	d0f8      	beq.n	8011bf6 <sbrk_aligned+0x22>
 8011c04:	1a21      	subs	r1, r4, r0
 8011c06:	4628      	mov	r0, r5
 8011c08:	f000 f89a 	bl	8011d40 <_sbrk_r>
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	d1f2      	bne.n	8011bf6 <sbrk_aligned+0x22>
 8011c10:	e7ef      	b.n	8011bf2 <sbrk_aligned+0x1e>
 8011c12:	bf00      	nop
 8011c14:	200012f8 	.word	0x200012f8

08011c18 <_malloc_r>:
 8011c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c1c:	1ccd      	adds	r5, r1, #3
 8011c1e:	f025 0503 	bic.w	r5, r5, #3
 8011c22:	3508      	adds	r5, #8
 8011c24:	2d0c      	cmp	r5, #12
 8011c26:	bf38      	it	cc
 8011c28:	250c      	movcc	r5, #12
 8011c2a:	2d00      	cmp	r5, #0
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	db01      	blt.n	8011c34 <_malloc_r+0x1c>
 8011c30:	42a9      	cmp	r1, r5
 8011c32:	d904      	bls.n	8011c3e <_malloc_r+0x26>
 8011c34:	230c      	movs	r3, #12
 8011c36:	6033      	str	r3, [r6, #0]
 8011c38:	2000      	movs	r0, #0
 8011c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011d14 <_malloc_r+0xfc>
 8011c42:	f000 f869 	bl	8011d18 <__malloc_lock>
 8011c46:	f8d8 3000 	ldr.w	r3, [r8]
 8011c4a:	461c      	mov	r4, r3
 8011c4c:	bb44      	cbnz	r4, 8011ca0 <_malloc_r+0x88>
 8011c4e:	4629      	mov	r1, r5
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7ff ffbf 	bl	8011bd4 <sbrk_aligned>
 8011c56:	1c43      	adds	r3, r0, #1
 8011c58:	4604      	mov	r4, r0
 8011c5a:	d158      	bne.n	8011d0e <_malloc_r+0xf6>
 8011c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8011c60:	4627      	mov	r7, r4
 8011c62:	2f00      	cmp	r7, #0
 8011c64:	d143      	bne.n	8011cee <_malloc_r+0xd6>
 8011c66:	2c00      	cmp	r4, #0
 8011c68:	d04b      	beq.n	8011d02 <_malloc_r+0xea>
 8011c6a:	6823      	ldr	r3, [r4, #0]
 8011c6c:	4639      	mov	r1, r7
 8011c6e:	4630      	mov	r0, r6
 8011c70:	eb04 0903 	add.w	r9, r4, r3
 8011c74:	f000 f864 	bl	8011d40 <_sbrk_r>
 8011c78:	4581      	cmp	r9, r0
 8011c7a:	d142      	bne.n	8011d02 <_malloc_r+0xea>
 8011c7c:	6821      	ldr	r1, [r4, #0]
 8011c7e:	1a6d      	subs	r5, r5, r1
 8011c80:	4629      	mov	r1, r5
 8011c82:	4630      	mov	r0, r6
 8011c84:	f7ff ffa6 	bl	8011bd4 <sbrk_aligned>
 8011c88:	3001      	adds	r0, #1
 8011c8a:	d03a      	beq.n	8011d02 <_malloc_r+0xea>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	442b      	add	r3, r5
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	f8d8 3000 	ldr.w	r3, [r8]
 8011c96:	685a      	ldr	r2, [r3, #4]
 8011c98:	bb62      	cbnz	r2, 8011cf4 <_malloc_r+0xdc>
 8011c9a:	f8c8 7000 	str.w	r7, [r8]
 8011c9e:	e00f      	b.n	8011cc0 <_malloc_r+0xa8>
 8011ca0:	6822      	ldr	r2, [r4, #0]
 8011ca2:	1b52      	subs	r2, r2, r5
 8011ca4:	d420      	bmi.n	8011ce8 <_malloc_r+0xd0>
 8011ca6:	2a0b      	cmp	r2, #11
 8011ca8:	d917      	bls.n	8011cda <_malloc_r+0xc2>
 8011caa:	1961      	adds	r1, r4, r5
 8011cac:	42a3      	cmp	r3, r4
 8011cae:	6025      	str	r5, [r4, #0]
 8011cb0:	bf18      	it	ne
 8011cb2:	6059      	strne	r1, [r3, #4]
 8011cb4:	6863      	ldr	r3, [r4, #4]
 8011cb6:	bf08      	it	eq
 8011cb8:	f8c8 1000 	streq.w	r1, [r8]
 8011cbc:	5162      	str	r2, [r4, r5]
 8011cbe:	604b      	str	r3, [r1, #4]
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f000 f82f 	bl	8011d24 <__malloc_unlock>
 8011cc6:	f104 000b 	add.w	r0, r4, #11
 8011cca:	1d23      	adds	r3, r4, #4
 8011ccc:	f020 0007 	bic.w	r0, r0, #7
 8011cd0:	1ac2      	subs	r2, r0, r3
 8011cd2:	bf1c      	itt	ne
 8011cd4:	1a1b      	subne	r3, r3, r0
 8011cd6:	50a3      	strne	r3, [r4, r2]
 8011cd8:	e7af      	b.n	8011c3a <_malloc_r+0x22>
 8011cda:	6862      	ldr	r2, [r4, #4]
 8011cdc:	42a3      	cmp	r3, r4
 8011cde:	bf0c      	ite	eq
 8011ce0:	f8c8 2000 	streq.w	r2, [r8]
 8011ce4:	605a      	strne	r2, [r3, #4]
 8011ce6:	e7eb      	b.n	8011cc0 <_malloc_r+0xa8>
 8011ce8:	4623      	mov	r3, r4
 8011cea:	6864      	ldr	r4, [r4, #4]
 8011cec:	e7ae      	b.n	8011c4c <_malloc_r+0x34>
 8011cee:	463c      	mov	r4, r7
 8011cf0:	687f      	ldr	r7, [r7, #4]
 8011cf2:	e7b6      	b.n	8011c62 <_malloc_r+0x4a>
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	42a3      	cmp	r3, r4
 8011cfa:	d1fb      	bne.n	8011cf4 <_malloc_r+0xdc>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	6053      	str	r3, [r2, #4]
 8011d00:	e7de      	b.n	8011cc0 <_malloc_r+0xa8>
 8011d02:	230c      	movs	r3, #12
 8011d04:	6033      	str	r3, [r6, #0]
 8011d06:	4630      	mov	r0, r6
 8011d08:	f000 f80c 	bl	8011d24 <__malloc_unlock>
 8011d0c:	e794      	b.n	8011c38 <_malloc_r+0x20>
 8011d0e:	6005      	str	r5, [r0, #0]
 8011d10:	e7d6      	b.n	8011cc0 <_malloc_r+0xa8>
 8011d12:	bf00      	nop
 8011d14:	200012fc 	.word	0x200012fc

08011d18 <__malloc_lock>:
 8011d18:	4801      	ldr	r0, [pc, #4]	@ (8011d20 <__malloc_lock+0x8>)
 8011d1a:	f000 b84b 	b.w	8011db4 <__retarget_lock_acquire_recursive>
 8011d1e:	bf00      	nop
 8011d20:	2000143c 	.word	0x2000143c

08011d24 <__malloc_unlock>:
 8011d24:	4801      	ldr	r0, [pc, #4]	@ (8011d2c <__malloc_unlock+0x8>)
 8011d26:	f000 b846 	b.w	8011db6 <__retarget_lock_release_recursive>
 8011d2a:	bf00      	nop
 8011d2c:	2000143c 	.word	0x2000143c

08011d30 <memset>:
 8011d30:	4402      	add	r2, r0
 8011d32:	4603      	mov	r3, r0
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d100      	bne.n	8011d3a <memset+0xa>
 8011d38:	4770      	bx	lr
 8011d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d3e:	e7f9      	b.n	8011d34 <memset+0x4>

08011d40 <_sbrk_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d06      	ldr	r5, [pc, #24]	@ (8011d5c <_sbrk_r+0x1c>)
 8011d44:	2300      	movs	r3, #0
 8011d46:	4604      	mov	r4, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	602b      	str	r3, [r5, #0]
 8011d4c:	f7f0 fabe 	bl	80022cc <_sbrk>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	d102      	bne.n	8011d5a <_sbrk_r+0x1a>
 8011d54:	682b      	ldr	r3, [r5, #0]
 8011d56:	b103      	cbz	r3, 8011d5a <_sbrk_r+0x1a>
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	20001438 	.word	0x20001438

08011d60 <__errno>:
 8011d60:	4b01      	ldr	r3, [pc, #4]	@ (8011d68 <__errno+0x8>)
 8011d62:	6818      	ldr	r0, [r3, #0]
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	2000002c 	.word	0x2000002c

08011d6c <__libc_init_array>:
 8011d6c:	b570      	push	{r4, r5, r6, lr}
 8011d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8011da4 <__libc_init_array+0x38>)
 8011d70:	4c0d      	ldr	r4, [pc, #52]	@ (8011da8 <__libc_init_array+0x3c>)
 8011d72:	1b64      	subs	r4, r4, r5
 8011d74:	10a4      	asrs	r4, r4, #2
 8011d76:	2600      	movs	r6, #0
 8011d78:	42a6      	cmp	r6, r4
 8011d7a:	d109      	bne.n	8011d90 <__libc_init_array+0x24>
 8011d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8011dac <__libc_init_array+0x40>)
 8011d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8011db0 <__libc_init_array+0x44>)
 8011d80:	f000 f864 	bl	8011e4c <_init>
 8011d84:	1b64      	subs	r4, r4, r5
 8011d86:	10a4      	asrs	r4, r4, #2
 8011d88:	2600      	movs	r6, #0
 8011d8a:	42a6      	cmp	r6, r4
 8011d8c:	d105      	bne.n	8011d9a <__libc_init_array+0x2e>
 8011d8e:	bd70      	pop	{r4, r5, r6, pc}
 8011d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d94:	4798      	blx	r3
 8011d96:	3601      	adds	r6, #1
 8011d98:	e7ee      	b.n	8011d78 <__libc_init_array+0xc>
 8011d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d9e:	4798      	blx	r3
 8011da0:	3601      	adds	r6, #1
 8011da2:	e7f2      	b.n	8011d8a <__libc_init_array+0x1e>
 8011da4:	08011ea8 	.word	0x08011ea8
 8011da8:	08011ea8 	.word	0x08011ea8
 8011dac:	08011ea8 	.word	0x08011ea8
 8011db0:	08011eac 	.word	0x08011eac

08011db4 <__retarget_lock_acquire_recursive>:
 8011db4:	4770      	bx	lr

08011db6 <__retarget_lock_release_recursive>:
 8011db6:	4770      	bx	lr

08011db8 <_free_r>:
 8011db8:	b538      	push	{r3, r4, r5, lr}
 8011dba:	4605      	mov	r5, r0
 8011dbc:	2900      	cmp	r1, #0
 8011dbe:	d041      	beq.n	8011e44 <_free_r+0x8c>
 8011dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dc4:	1f0c      	subs	r4, r1, #4
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	bfb8      	it	lt
 8011dca:	18e4      	addlt	r4, r4, r3
 8011dcc:	f7ff ffa4 	bl	8011d18 <__malloc_lock>
 8011dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8011e48 <_free_r+0x90>)
 8011dd2:	6813      	ldr	r3, [r2, #0]
 8011dd4:	b933      	cbnz	r3, 8011de4 <_free_r+0x2c>
 8011dd6:	6063      	str	r3, [r4, #4]
 8011dd8:	6014      	str	r4, [r2, #0]
 8011dda:	4628      	mov	r0, r5
 8011ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011de0:	f7ff bfa0 	b.w	8011d24 <__malloc_unlock>
 8011de4:	42a3      	cmp	r3, r4
 8011de6:	d908      	bls.n	8011dfa <_free_r+0x42>
 8011de8:	6820      	ldr	r0, [r4, #0]
 8011dea:	1821      	adds	r1, r4, r0
 8011dec:	428b      	cmp	r3, r1
 8011dee:	bf01      	itttt	eq
 8011df0:	6819      	ldreq	r1, [r3, #0]
 8011df2:	685b      	ldreq	r3, [r3, #4]
 8011df4:	1809      	addeq	r1, r1, r0
 8011df6:	6021      	streq	r1, [r4, #0]
 8011df8:	e7ed      	b.n	8011dd6 <_free_r+0x1e>
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	b10b      	cbz	r3, 8011e04 <_free_r+0x4c>
 8011e00:	42a3      	cmp	r3, r4
 8011e02:	d9fa      	bls.n	8011dfa <_free_r+0x42>
 8011e04:	6811      	ldr	r1, [r2, #0]
 8011e06:	1850      	adds	r0, r2, r1
 8011e08:	42a0      	cmp	r0, r4
 8011e0a:	d10b      	bne.n	8011e24 <_free_r+0x6c>
 8011e0c:	6820      	ldr	r0, [r4, #0]
 8011e0e:	4401      	add	r1, r0
 8011e10:	1850      	adds	r0, r2, r1
 8011e12:	4283      	cmp	r3, r0
 8011e14:	6011      	str	r1, [r2, #0]
 8011e16:	d1e0      	bne.n	8011dda <_free_r+0x22>
 8011e18:	6818      	ldr	r0, [r3, #0]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	6053      	str	r3, [r2, #4]
 8011e1e:	4408      	add	r0, r1
 8011e20:	6010      	str	r0, [r2, #0]
 8011e22:	e7da      	b.n	8011dda <_free_r+0x22>
 8011e24:	d902      	bls.n	8011e2c <_free_r+0x74>
 8011e26:	230c      	movs	r3, #12
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	e7d6      	b.n	8011dda <_free_r+0x22>
 8011e2c:	6820      	ldr	r0, [r4, #0]
 8011e2e:	1821      	adds	r1, r4, r0
 8011e30:	428b      	cmp	r3, r1
 8011e32:	bf04      	itt	eq
 8011e34:	6819      	ldreq	r1, [r3, #0]
 8011e36:	685b      	ldreq	r3, [r3, #4]
 8011e38:	6063      	str	r3, [r4, #4]
 8011e3a:	bf04      	itt	eq
 8011e3c:	1809      	addeq	r1, r1, r0
 8011e3e:	6021      	streq	r1, [r4, #0]
 8011e40:	6054      	str	r4, [r2, #4]
 8011e42:	e7ca      	b.n	8011dda <_free_r+0x22>
 8011e44:	bd38      	pop	{r3, r4, r5, pc}
 8011e46:	bf00      	nop
 8011e48:	200012fc 	.word	0x200012fc

08011e4c <_init>:
 8011e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4e:	bf00      	nop
 8011e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e52:	bc08      	pop	{r3}
 8011e54:	469e      	mov	lr, r3
 8011e56:	4770      	bx	lr

08011e58 <_fini>:
 8011e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e5a:	bf00      	nop
 8011e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e5e:	bc08      	pop	{r3}
 8011e60:	469e      	mov	lr, r3
 8011e62:	4770      	bx	lr
