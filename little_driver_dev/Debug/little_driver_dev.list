
little_driver_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014894  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08014a68  08014a68  00015a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015118  08015118  0001731c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015118  08015118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015120  08015120  0001731c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015120  08015120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015124  08015124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08015128  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  08015304  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  080153a4  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004bfc  20000320  08015444  00017320  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20004f1c  08015444  00017f1c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001731c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039b06  00000000  00000000  0001734c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008ee3  00000000  00000000  00050e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002fc8  00000000  00000000  00059d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000024c3  00000000  00000000  0005cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036cc7  00000000  00000000  0005f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044f76  00000000  00000000  00095e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127dd0  00000000  00000000  000dae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00202bd0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dc7c  00000000  00000000  00202c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000074  00000000  00000000  00210890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014a4c 	.word	0x08014a4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	08014a4c 	.word	0x08014a4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC3_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC3_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC3_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC3_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC3_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010c2:	f003 fabd 	bl	8004640 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80010cc:	f001 feea 	bl	8002ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010e2:	f003 faf1 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010ec:	f001 feda 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000033c 	.word	0x2000033c
 80010fc:	40012200 	.word	0x40012200
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <HAL_ADC_MspInit+0xa4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d13c      	bne.n	80011a0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a20      	ldr	r2, [pc, #128]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001144:	f043 0320 	orr.w	r3, r3, #32
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800116e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001172:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001174:	2303      	movs	r3, #3
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <HAL_ADC_MspInit+0xac>)
 8001184:	f004 fda8 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <HAL_ADC_MspInit+0xb0>)
 800119c:	f004 fd9c 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40012200 	.word	0x40012200
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40020000 	.word	0x40020000

080011b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <MX_CRC_Init+0x40>)
 80011c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011e2:	f003 fda7 	bl	8004d34 <HAL_CRC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80011ec:	f001 fe5a 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000384 	.word	0x20000384
 80011f8:	40023000 	.word	0x40023000

080011fc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_CRC_MspInit+0x38>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10b      	bne.n	8001226 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_CRC_MspInit+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <HAL_CRC_MspInit+0x3c>)
 8001214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <HAL_CRC_MspInit+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023000 	.word	0x40023000
 8001238:	40023800 	.word	0x40023800

0800123c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_DCMI_Init+0x60>)
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <MX_DCMI_Init+0x64>)
 8001244:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_DCMI_Init+0x60>)
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <MX_DCMI_Init+0x60>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_DCMI_Init+0x60>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_DCMI_Init+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_DCMI_Init+0x60>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <MX_DCMI_Init+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_DCMI_Init+0x60>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_DCMI_Init+0x60>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_DCMI_Init+0x60>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_DCMI_Init+0x60>)
 800127e:	2200      	movs	r2, #0
 8001280:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_DCMI_Init+0x60>)
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_DCMI_Init+0x60>)
 800128a:	f003 fe45 	bl	8004f18 <HAL_DCMI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001294:	f001 fe06 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200003a8 	.word	0x200003a8
 80012a0:	50050000 	.word	0x50050000

080012a4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a50      	ldr	r2, [pc, #320]	@ (8001404 <HAL_DCMI_MspInit+0x160>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f040 809a 	bne.w	80013fc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80012c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80012d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e0:	4b49      	ldr	r3, [pc, #292]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4a48      	ldr	r2, [pc, #288]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ec:	4b46      	ldr	r3, [pc, #280]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	4a42      	ldr	r2, [pc, #264]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6313      	str	r3, [r2, #48]	@ 0x30
 8001304:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001310:	4b3d      	ldr	r3, [pc, #244]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a3c      	ldr	r2, [pc, #240]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800132e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001332:	6313      	str	r3, [r2, #48]	@ 0x30
 8001334:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b31      	ldr	r3, [pc, #196]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	4a30      	ldr	r2, [pc, #192]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6313      	str	r3, [r2, #48]	@ 0x30
 800134c:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001358:	2360      	movs	r3, #96	@ 0x60
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001368:	230d      	movs	r3, #13
 800136a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	4826      	ldr	r0, [pc, #152]	@ (800140c <HAL_DCMI_MspInit+0x168>)
 8001374:	f004 fcb0 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001378:	2308      	movs	r3, #8
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001388:	230d      	movs	r3, #13
 800138a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <HAL_DCMI_MspInit+0x16c>)
 8001394:	f004 fca0 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013aa:	230d      	movs	r3, #13
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4817      	ldr	r0, [pc, #92]	@ (8001414 <HAL_DCMI_MspInit+0x170>)
 80013b6:	f004 fc8f 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80013ba:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013cc:	230d      	movs	r3, #13
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	@ (8001418 <HAL_DCMI_MspInit+0x174>)
 80013d8:	f004 fc7e 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80013dc:	2350      	movs	r3, #80	@ 0x50
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013ec:	230d      	movs	r3, #13
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <HAL_DCMI_MspInit+0x178>)
 80013f8:	f004 fc6e 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	@ 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	50050000 	.word	0x50050000
 8001408:	40023800 	.word	0x40023800
 800140c:	40021000 	.word	0x40021000
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40020000 	.word	0x40020000

08001420 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001426:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <MX_DMA2D_Init+0x60>)
 8001428:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_DMA2D_Init+0x5c>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_DMA2D_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA2D_Init+0x5c>)
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001456:	f003 ff05 	bl	8005264 <HAL_DMA2D_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001460:	f001 fd20 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001464:	2101      	movs	r1, #1
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001468:	f004 f856 	bl	8005518 <HAL_DMA2D_ConfigLayer>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001472:	f001 fd17 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003f8 	.word	0x200003f8
 8001480:	4002b000 	.word	0x4002b000

08001484 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_DMA2D_MspInit+0x44>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d113      	bne.n	80014be <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_DMA2D_MspInit+0x48>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <HAL_DMA2D_MspInit+0x48>)
 800149c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_DMA2D_MspInit+0x48>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	205a      	movs	r0, #90	@ 0x5a
 80014b4:	f003 fc14 	bl	8004ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014b8:	205a      	movs	r0, #90	@ 0x5a
 80014ba:	f003 fc2d 	bl	8004d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	4002b000 	.word	0x4002b000
 80014cc:	40023800 	.word	0x40023800

080014d0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_ETH_Init+0x84>)
 80014d6:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <MX_ETH_Init+0x88>)
 80014d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_ETH_Init+0x8c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <MX_ETH_Init+0x8c>)
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <MX_ETH_Init+0x8c>)
 80014e8:	22e1      	movs	r2, #225	@ 0xe1
 80014ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <MX_ETH_Init+0x8c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <MX_ETH_Init+0x8c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_ETH_Init+0x8c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_ETH_Init+0x84>)
 8001500:	4a16      	ldr	r2, [pc, #88]	@ (800155c <MX_ETH_Init+0x8c>)
 8001502:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <MX_ETH_Init+0x84>)
 8001506:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800150a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_ETH_Init+0x84>)
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <MX_ETH_Init+0x90>)
 8001510:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <MX_ETH_Init+0x84>)
 8001514:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <MX_ETH_Init+0x94>)
 8001516:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_ETH_Init+0x84>)
 800151a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800151e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_ETH_Init+0x84>)
 8001522:	f004 f88b 	bl	800563c <HAL_ETH_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800152c:	f001 fcba 	bl	8002ea4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001530:	2238      	movs	r2, #56	@ 0x38
 8001532:	2100      	movs	r1, #0
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <MX_ETH_Init+0x98>)
 8001536:	f010 fcfd 	bl	8011f34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_ETH_Init+0x98>)
 800153c:	2221      	movs	r2, #33	@ 0x21
 800153e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_ETH_Init+0x98>)
 8001542:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001546:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <MX_ETH_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000470 	.word	0x20000470
 8001558:	40028000 	.word	0x40028000
 800155c:	20000520 	.word	0x20000520
 8001560:	2000027c 	.word	0x2000027c
 8001564:	200001dc 	.word	0x200001dc
 8001568:	20000438 	.word	0x20000438

0800156c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08e      	sub	sp, #56	@ 0x38
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a3f      	ldr	r2, [pc, #252]	@ (8001688 <HAL_ETH_MspInit+0x11c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d178      	bne.n	8001680 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a3e      	ldr	r2, [pc, #248]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <HAL_ETH_MspInit+0x120>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a38      	ldr	r2, [pc, #224]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b36      	ldr	r3, [pc, #216]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a32      	ldr	r2, [pc, #200]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b30      	ldr	r3, [pc, #192]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a2c      	ldr	r2, [pc, #176]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a26      	ldr	r2, [pc, #152]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_ETH_MspInit+0x120>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800161e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001630:	230b      	movs	r3, #11
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4815      	ldr	r0, [pc, #84]	@ (8001690 <HAL_ETH_MspInit+0x124>)
 800163c:	f004 fb4c 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001640:	2332      	movs	r3, #50	@ 0x32
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001650:	230b      	movs	r3, #11
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <HAL_ETH_MspInit+0x128>)
 800165c:	f004 fb3c 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001660:	2386      	movs	r3, #134	@ 0x86
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001670:	230b      	movs	r3, #11
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	@ (8001698 <HAL_ETH_MspInit+0x12c>)
 800167c:	f004 fb2c 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	@ 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40028000 	.word	0x40028000
 800168c:	40023800 	.word	0x40023800
 8001690:	40021800 	.word	0x40021800
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000

0800169c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <MX_FMC_Init+0x98>)
 80016b6:	4a20      	ldr	r2, [pc, #128]	@ (8001738 <MX_FMC_Init+0x9c>)
 80016b8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <MX_FMC_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <MX_FMC_Init+0x98>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_FMC_Init+0x98>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <MX_FMC_Init+0x98>)
 80016ce:	2210      	movs	r2, #16
 80016d0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_FMC_Init+0x98>)
 80016d4:	2240      	movs	r2, #64	@ 0x40
 80016d6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_FMC_Init+0x98>)
 80016da:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016de:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_FMC_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <MX_FMC_Init+0x98>)
 80016e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_FMC_Init+0x98>)
 80016f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_FMC_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001700:	2307      	movs	r3, #7
 8001702:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001708:	2307      	movs	r3, #7
 800170a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800170c:	2303      	movs	r3, #3
 800170e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_FMC_Init+0x98>)
 800171e:	f008 fa2e 	bl	8009b7e <HAL_SDRAM_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001728:	f001 fbbc 	bl	8002ea4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000528 	.word	0x20000528
 8001738:	a0000140 	.word	0xa0000140

0800173c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001750:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_FMC_MspInit+0x100>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d16d      	bne.n	8001834 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001758:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_FMC_MspInit+0x100>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800175e:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <HAL_FMC_MspInit+0x104>)
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	4a37      	ldr	r2, [pc, #220]	@ (8001840 <HAL_FMC_MspInit+0x104>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6393      	str	r3, [r2, #56]	@ 0x38
 800176a:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_FMC_MspInit+0x104>)
 800176c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001776:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800177a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001788:	230c      	movs	r3, #12
 800178a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	482c      	ldr	r0, [pc, #176]	@ (8001844 <HAL_FMC_MspInit+0x108>)
 8001792:	f004 faa1 	bl	8005cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001796:	f248 1333 	movw	r3, #33075	@ 0x8133
 800179a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a8:	230c      	movs	r3, #12
 80017aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4825      	ldr	r0, [pc, #148]	@ (8001848 <HAL_FMC_MspInit+0x10c>)
 80017b2:	f004 fa91 	bl	8005cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80017b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80017ba:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c8:	230c      	movs	r3, #12
 80017ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	481e      	ldr	r0, [pc, #120]	@ (800184c <HAL_FMC_MspInit+0x110>)
 80017d2:	f004 fa81 	bl	8005cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80017d6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80017da:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e8:	230c      	movs	r3, #12
 80017ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4817      	ldr	r0, [pc, #92]	@ (8001850 <HAL_FMC_MspInit+0x114>)
 80017f2:	f004 fa71 	bl	8005cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80017f6:	2328      	movs	r3, #40	@ 0x28
 80017f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001806:	230c      	movs	r3, #12
 8001808:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4811      	ldr	r0, [pc, #68]	@ (8001854 <HAL_FMC_MspInit+0x118>)
 8001810:	f004 fa62 	bl	8005cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001814:	2308      	movs	r3, #8
 8001816:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001824:	230c      	movs	r3, #12
 8001826:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	480a      	ldr	r0, [pc, #40]	@ (8001858 <HAL_FMC_MspInit+0x11c>)
 800182e:	f004 fa53 	bl	8005cd8 <HAL_GPIO_Init>
 8001832:	e000      	b.n	8001836 <HAL_FMC_MspInit+0xfa>
    return;
 8001834:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000055c 	.word	0x2000055c
 8001840:	40023800 	.word	0x40023800
 8001844:	40021000 	.word	0x40021000
 8001848:	40021800 	.word	0x40021800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021400 	.word	0x40021400
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40020800 	.word	0x40020800

0800185c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001864:	f7ff ff6a 	bl	800173c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a07      	ldr	r2, [pc, #28]	@ (800189c <vApplicationGetIdleTaskMemory+0x2c>)
 8001880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2280      	movs	r2, #128	@ 0x80
 800188c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000564 	.word	0x20000564
 80018a0:	20000604 	.word	0x20000604

080018a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b08e      	sub	sp, #56	@ 0x38
 80018a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <MX_FREERTOS_Init+0x50>)
 80018ac:	f107 041c 	add.w	r4, r7, #28
 80018b0:	461d      	mov	r5, r3
 80018b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00b ffb5 	bl	800d834 <osThreadCreate>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <MX_FREERTOS_Init+0x54>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(gpsTaskHandle, L76_Task, osPriorityAboveNormal, 0, 2048);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <MX_FREERTOS_Init+0x58>)
 80018d2:	463c      	mov	r4, r7
 80018d4:	461d      	mov	r5, r3
 80018d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(gpsTaskHandle), &huart6);  // on passe huart6 en argument
 80018e2:	463b      	mov	r3, r7
 80018e4:	4906      	ldr	r1, [pc, #24]	@ (8001900 <MX_FREERTOS_Init+0x5c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00b ffa4 	bl	800d834 <osThreadCreate>

  /* USER CODE END RTOS_THREADS */

}
 80018ec:	bf00      	nop
 80018ee:	3738      	adds	r7, #56	@ 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bdb0      	pop	{r4, r5, r7, pc}
 80018f4:	08014a74 	.word	0x08014a74
 80018f8:	20000560 	.word	0x20000560
 80018fc:	08014aa0 	.word	0x08014aa0
 8001900:	20000fe0 	.word	0x20000fe0

08001904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	L76_PrintExample();
 800190c:	f000 fa62 	bl	8001dd4 <L76_PrintExample>
    osDelay(2000);
 8001910:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001914:	f00b ffda 	bl	800d8cc <osDelay>
	L76_PrintExample();
 8001918:	bf00      	nop
 800191a:	e7f7      	b.n	800190c <StartDefaultTask+0x8>

0800191c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b090      	sub	sp, #64	@ 0x40
 8001920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	4bb0      	ldr	r3, [pc, #704]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4aaf      	ldr	r2, [pc, #700]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4bad      	ldr	r3, [pc, #692]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194a:	4baa      	ldr	r3, [pc, #680]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4aa9      	ldr	r2, [pc, #676]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4ba7      	ldr	r3, [pc, #668]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4ba4      	ldr	r3, [pc, #656]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4aa3      	ldr	r2, [pc, #652]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4ba1      	ldr	r3, [pc, #644]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197a:	4b9e      	ldr	r3, [pc, #632]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a9d      	ldr	r2, [pc, #628]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b9b      	ldr	r3, [pc, #620]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b98      	ldr	r3, [pc, #608]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	4a97      	ldr	r2, [pc, #604]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	@ 0x30
 800199e:	4b95      	ldr	r3, [pc, #596]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a91      	ldr	r2, [pc, #580]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b8f      	ldr	r3, [pc, #572]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019c2:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a8b      	ldr	r2, [pc, #556]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b89      	ldr	r3, [pc, #548]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019da:	4b86      	ldr	r3, [pc, #536]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a85      	ldr	r2, [pc, #532]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b83      	ldr	r3, [pc, #524]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019f2:	4b80      	ldr	r3, [pc, #512]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a7f      	ldr	r2, [pc, #508]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 80019f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a79      	ldr	r2, [pc, #484]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b77      	ldr	r3, [pc, #476]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	4b74      	ldr	r3, [pc, #464]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a73      	ldr	r2, [pc, #460]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b71      	ldr	r3, [pc, #452]	@ (8001bf4 <MX_GPIO_Init+0x2d8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	486e      	ldr	r0, [pc, #440]	@ (8001bf8 <MX_GPIO_Init+0x2dc>)
 8001a40:	f004 fb0e 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	210c      	movs	r1, #12
 8001a48:	486c      	ldr	r0, [pc, #432]	@ (8001bfc <MX_GPIO_Init+0x2e0>)
 8001a4a:	f004 fb09 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2108      	movs	r1, #8
 8001a52:	486b      	ldr	r0, [pc, #428]	@ (8001c00 <MX_GPIO_Init+0x2e4>)
 8001a54:	f004 fb04 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a5e:	4867      	ldr	r0, [pc, #412]	@ (8001bfc <MX_GPIO_Init+0x2e0>)
 8001a60:	f004 fafe 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a6a:	4866      	ldr	r0, [pc, #408]	@ (8001c04 <MX_GPIO_Init+0x2e8>)
 8001a6c:	f004 faf8 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	21c8      	movs	r1, #200	@ 0xc8
 8001a74:	4864      	ldr	r0, [pc, #400]	@ (8001c08 <MX_GPIO_Init+0x2ec>)
 8001a76:	f004 faf3 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	485f      	ldr	r0, [pc, #380]	@ (8001c0c <MX_GPIO_Init+0x2f0>)
 8001a8e:	f004 f923 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001a92:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4858      	ldr	r0, [pc, #352]	@ (8001c10 <MX_GPIO_Init+0x2f4>)
 8001ab0:	f004 f912 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4852      	ldr	r0, [pc, #328]	@ (8001c14 <MX_GPIO_Init+0x2f8>)
 8001aca:	f004 f905 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ad2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4845      	ldr	r0, [pc, #276]	@ (8001bf8 <MX_GPIO_Init+0x2dc>)
 8001ae4:	f004 f8f8 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001ae8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001afa:	230a      	movs	r3, #10
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4844      	ldr	r0, [pc, #272]	@ (8001c18 <MX_GPIO_Init+0x2fc>)
 8001b06:	f004 f8e7 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4835      	ldr	r0, [pc, #212]	@ (8001bf8 <MX_GPIO_Init+0x2dc>)
 8001b22:	f004 f8d9 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001b26:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	482f      	ldr	r0, [pc, #188]	@ (8001bfc <MX_GPIO_Init+0x2e0>)
 8001b40:	f004 f8ca 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b56:	4619      	mov	r1, r3
 8001b58:	4830      	ldr	r0, [pc, #192]	@ (8001c1c <MX_GPIO_Init+0x300>)
 8001b5a:	f004 f8bd 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b72:	4619      	mov	r1, r3
 8001b74:	4822      	ldr	r0, [pc, #136]	@ (8001c00 <MX_GPIO_Init+0x2e4>)
 8001b76:	f004 f8af 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	481a      	ldr	r0, [pc, #104]	@ (8001bf8 <MX_GPIO_Init+0x2dc>)
 8001b8e:	f004 f8a3 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b92:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4817      	ldr	r0, [pc, #92]	@ (8001c04 <MX_GPIO_Init+0x2e8>)
 8001ba8:	f004 f896 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480f      	ldr	r0, [pc, #60]	@ (8001c04 <MX_GPIO_Init+0x2e8>)
 8001bc6:	f004 f887 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bd0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <MX_GPIO_Init+0x2e0>)
 8001be2:	f004 f879 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001be6:	2310      	movs	r3, #16
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e016      	b.n	8001c20 <MX_GPIO_Init+0x304>
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40022800 	.word	0x40022800
 8001c04:	40021c00 	.word	0x40021c00
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40022400 	.word	0x40022400
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c26:	230a      	movs	r3, #10
 8001c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4820      	ldr	r0, [pc, #128]	@ (8001cb4 <MX_GPIO_Init+0x398>)
 8001c32:	f004 f851 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c36:	23c8      	movs	r3, #200	@ 0xc8
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481a      	ldr	r0, [pc, #104]	@ (8001cb8 <MX_GPIO_Init+0x39c>)
 8001c4e:	f004 f843 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c52:	2305      	movs	r3, #5
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c62:	230a      	movs	r3, #10
 8001c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4813      	ldr	r0, [pc, #76]	@ (8001cbc <MX_GPIO_Init+0x3a0>)
 8001c6e:	f004 f833 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c72:	2304      	movs	r3, #4
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <MX_GPIO_Init+0x39c>)
 8001c86:	f004 f827 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001c8a:	2328      	movs	r3, #40	@ 0x28
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <MX_GPIO_Init+0x3a4>)
 8001ca6:	f004 f817 	bl	8005cd8 <HAL_GPIO_Init>

}
 8001caa:	bf00      	nop
 8001cac:	3740      	adds	r7, #64	@ 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021c00 	.word	0x40021c00
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <L76_Init>:
static void L76_ParseTime(const char *timestr, uint8_t *hour, uint8_t *min, float *sec);
static void L76_ParseDate(const char *datestr, uint8_t *day, uint8_t *month, uint16_t *year);

/* ========= Public API Functions ========= */

void L76_Init(UART_HandleTypeDef *huart) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    /* Save the UART handle for use in ISR and other functions */
    l76_huart = huart;
 8001ccc:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <L76_Init+0x68>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]

    /* Configure the standby pin: ensure the GPS is powered on (STDBY pin high) */
    HAL_GPIO_WritePin(L76_STDBY_GPIO_Port, L76_STDBY_Pin, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2140      	movs	r1, #64	@ 0x40
 8001cd6:	4816      	ldr	r0, [pc, #88]	@ (8001d30 <L76_Init+0x6c>)
 8001cd8:	f004 f9c2 	bl	8006060 <HAL_GPIO_WritePin>
    /* Small delay to ensure the pin state is registered (if needed) */
    HAL_Delay(10);
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f002 fc8b 	bl	80045f8 <HAL_Delay>

    /* Create a binary semaphore for line synchronization */
    l76_sem = xSemaphoreCreateBinary();
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f00c f887 	bl	800ddfa <xQueueGenericCreate>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <L76_Init+0x70>)
 8001cf0:	6013      	str	r3, [r2, #0]
        // Semaphore creation failed (should not happen under normal conditions)
        // In production, you might handle this with an error indicator.
    }

    /* Initialize the GPS data structure to all zeros */
    memset(&l76_data, 0, sizeof(L76_GPS_Data_t));
 8001cf2:	2230      	movs	r2, #48	@ 0x30
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4810      	ldr	r0, [pc, #64]	@ (8001d38 <L76_Init+0x74>)
 8001cf8:	f010 f91c 	bl	8011f34 <memset>
    l76_data.fix_quality = 0;
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <L76_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	751a      	strb	r2, [r3, #20]
    l76_readyBuf = -1;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <L76_Init+0x78>)
 8001d04:	22ff      	movs	r2, #255	@ 0xff
 8001d06:	701a      	strb	r2, [r3, #0]
    l76_rxIndex = 0;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <L76_Init+0x7c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
    l76_currentBuf = 0;
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <L76_Init+0x80>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

    /* Start UART reception in interrupt mode for one byte at a time */
    HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <L76_Init+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	490b      	ldr	r1, [pc, #44]	@ (8001d48 <L76_Init+0x84>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f009 fa3c 	bl	800b19a <HAL_UART_Receive_IT>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000804 	.word	0x20000804
 8001d30:	40021800 	.word	0x40021800
 8001d34:	20000808 	.word	0x20000808
 8001d38:	20000910 	.word	0x20000910
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	2000090c 	.word	0x2000090c
 8001d44:	2000090e 	.word	0x2000090e
 8001d48:	2000090f 	.word	0x2000090f

08001d4c <L76_Task>:

void L76_Task(void const *argument) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    /* Initialize the GPS module (UART, pins, etc.) */
    L76_Init((UART_HandleTypeDef *)argument);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffb5 	bl	8001cc4 <L76_Init>
    // Alternatively, one can call L76_Init before creating the task and ignore this parameter.

    /* Continuously wait for and process NMEA sentences */
    for (;;) {
        /* Wait indefinitely for a NMEA sentence to be received (signaled by ISR) */
        if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE) {
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <L76_Task+0x48>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00c fbda 	bl	800e51c <xQueueSemaphoreTake>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d1f5      	bne.n	8001d5a <L76_Task+0xe>
            // A full NMEA sentence has been captured and is ready in one of the buffers.
            if (l76_readyBuf >= 0) {
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <L76_Task+0x4c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dbf0      	blt.n	8001d5a <L76_Task+0xe>
                /* Process the NMEA sentence in the ready buffer */
                L76_ProcessNMEA(l76_rxBuffer[l76_readyBuf]);
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <L76_Task+0x4c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	01db      	lsls	r3, r3, #7
 8001d80:	4a06      	ldr	r2, [pc, #24]	@ (8001d9c <L76_Task+0x50>)
 8001d82:	4413      	add	r3, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f9ed 	bl	8002164 <L76_ProcessNMEA>
                /* Mark buffer as processed (readyBuf will be set by ISR for next line) */
                l76_readyBuf = -1;
 8001d8a:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <L76_Task+0x4c>)
 8001d8c:	22ff      	movs	r2, #255	@ 0xff
 8001d8e:	701a      	strb	r2, [r3, #0]
        if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE) {
 8001d90:	e7e3      	b.n	8001d5a <L76_Task+0xe>
 8001d92:	bf00      	nop
 8001d94:	20000808 	.word	0x20000808
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	2000080c 	.word	0x2000080c

08001da0 <L76_GetData>:
        }
        // Loop back to wait for the next sentence
    }
}

void L76_GetData(L76_GPS_Data_t *data) {
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    /* Copy the latest GPS data in a critical section to ensure consistency */
    taskENTER_CRITICAL();
 8001da8:	f00e f818 	bl	800fddc <vPortEnterCritical>
    *data = l76_data;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a08      	ldr	r2, [pc, #32]	@ (8001dd0 <L76_GetData+0x30>)
 8001db0:	461c      	mov	r4, r3
 8001db2:	4615      	mov	r5, r2
 8001db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    taskEXIT_CRITICAL();
 8001dc4:	f00e f840 	bl	800fe48 <vPortExitCritical>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	20000910 	.word	0x20000910

08001dd4 <L76_PrintExample>:
        l76_currentBuf = 0;
        HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
    }
}

void L76_PrintExample(void) {
 8001dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd8:	ed2d 8b02 	vpush	{d8}
 8001ddc:	b0e9      	sub	sp, #420	@ 0x1a4
 8001dde:	af14      	add	r7, sp, #80	@ 0x50
    L76_GPS_Data_t data;
    L76_GetData(&data);
 8001de0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ffdb 	bl	8001da0 <L76_GetData>

    char buf[256];

    if (data.fix_quality == 0) {
 8001dea:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 8097 	bne.w	8001f22 <L76_PrintExample+0x14e>
        snprintf(buf, sizeof(buf),
            "[GPS] Pas de fix : %d satellites visibles, "
            "UTC %02d:%02d:%05.2f, date %02d/%02d/%04d\r\n",
            data.satellites,
 8001df4:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
        snprintf(buf, sizeof(buf),
 8001df8:	4698      	mov	r8, r3
            data.hours, data.minutes, data.seconds,
 8001dfa:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
        snprintf(buf, sizeof(buf),
 8001dfe:	461c      	mov	r4, r3
            data.hours, data.minutes, data.seconds,
 8001e00:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
        snprintf(buf, sizeof(buf),
 8001e04:	461d      	mov	r5, r3
            data.hours, data.minutes, data.seconds,
 8001e06:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
        snprintf(buf, sizeof(buf),
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fbbc 	bl	8000588 <__aeabi_f2d>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
            data.day, data.month, data.year
 8001e14:	f897 1148 	ldrb.w	r1, [r7, #328]	@ 0x148
 8001e18:	f897 0149 	ldrb.w	r0, [r7, #329]	@ 0x149
        snprintf(buf, sizeof(buf),
 8001e1c:	4606      	mov	r6, r0
            data.day, data.month, data.year
 8001e1e:	f8b7 014a 	ldrh.w	r0, [r7, #330]	@ 0x14a
        snprintf(buf, sizeof(buf),
 8001e22:	f107 0c20 	add.w	ip, r7, #32
 8001e26:	9006      	str	r0, [sp, #24]
 8001e28:	9605      	str	r6, [sp, #20]
 8001e2a:	9104      	str	r1, [sp, #16]
 8001e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e30:	9501      	str	r5, [sp, #4]
 8001e32:	9400      	str	r4, [sp, #0]
 8001e34:	4643      	mov	r3, r8
 8001e36:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe0 <L76_PrintExample+0x20c>)
 8001e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3c:	4660      	mov	r0, ip
 8001e3e:	f00f ff6b 	bl	8011d18 <sniprintf>
        );

        if (data.satellites == 0 && data.hours == 0 && data.minutes == 0) {
 8001e42:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d123      	bne.n	8001e92 <L76_PrintExample+0xbe>
 8001e4a:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d11f      	bne.n	8001e92 <L76_PrintExample+0xbe>
 8001e52:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11b      	bne.n	8001e92 <L76_PrintExample+0xbe>
            strcat(buf, "[GPS] Cold start probable (aucun signal GNSS)\r\n");
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fa26 	bl	80002b0 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe4 <L76_PrintExample+0x210>)
 8001e70:	4614      	mov	r4, r2
 8001e72:	469c      	mov	ip, r3
 8001e74:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001e78:	4665      	mov	r5, ip
 8001e7a:	4626      	mov	r6, r4
 8001e7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e7e:	6028      	str	r0, [r5, #0]
 8001e80:	6069      	str	r1, [r5, #4]
 8001e82:	60aa      	str	r2, [r5, #8]
 8001e84:	60eb      	str	r3, [r5, #12]
 8001e86:	3410      	adds	r4, #16
 8001e88:	f10c 0c10 	add.w	ip, ip, #16
 8001e8c:	4574      	cmp	r4, lr
 8001e8e:	d1f3      	bne.n	8001e78 <L76_PrintExample+0xa4>
 8001e90:	e097      	b.n	8001fc2 <L76_PrintExample+0x1ee>
        } else if (data.satellites < 4) {
 8001e92:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d823      	bhi.n	8001ee2 <L76_PrintExample+0x10e>
            strcat(buf, "[GPS] Recherche de satellites (acquisition en cours)\r\n");
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fa06 	bl	80002b0 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	4413      	add	r3, r2
 8001eae:	4a4e      	ldr	r2, [pc, #312]	@ (8001fe8 <L76_PrintExample+0x214>)
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	469c      	mov	ip, r3
 8001eb4:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001eb8:	4665      	mov	r5, ip
 8001eba:	4626      	mov	r6, r4
 8001ebc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ebe:	6028      	str	r0, [r5, #0]
 8001ec0:	6069      	str	r1, [r5, #4]
 8001ec2:	60aa      	str	r2, [r5, #8]
 8001ec4:	60eb      	str	r3, [r5, #12]
 8001ec6:	3410      	adds	r4, #16
 8001ec8:	f10c 0c10 	add.w	ip, ip, #16
 8001ecc:	4574      	cmp	r4, lr
 8001ece:	d1f3      	bne.n	8001eb8 <L76_PrintExample+0xe4>
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	6810      	ldr	r0, [r2, #0]
 8001ed6:	6018      	str	r0, [r3, #0]
 8001ed8:	8891      	ldrh	r1, [r2, #4]
 8001eda:	7992      	ldrb	r2, [r2, #6]
 8001edc:	8099      	strh	r1, [r3, #4]
 8001ede:	719a      	strb	r2, [r3, #6]
 8001ee0:	e06f      	b.n	8001fc2 <L76_PrintExample+0x1ee>
        } else {
            strcat(buf, "[GPS] Satellites visibles mais pas encore fixé\r\n");
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe f9e2 	bl	80002b0 <strlen>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f107 0320 	add.w	r3, r7, #32
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8001fec <L76_PrintExample+0x218>)
 8001ef8:	4614      	mov	r4, r2
 8001efa:	469c      	mov	ip, r3
 8001efc:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001f00:	4665      	mov	r5, ip
 8001f02:	4626      	mov	r6, r4
 8001f04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f06:	6028      	str	r0, [r5, #0]
 8001f08:	6069      	str	r1, [r5, #4]
 8001f0a:	60aa      	str	r2, [r5, #8]
 8001f0c:	60eb      	str	r3, [r5, #12]
 8001f0e:	3410      	adds	r4, #16
 8001f10:	f10c 0c10 	add.w	ip, ip, #16
 8001f14:	4574      	cmp	r4, lr
 8001f16:	d1f3      	bne.n	8001f00 <L76_PrintExample+0x12c>
 8001f18:	4662      	mov	r2, ip
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	8013      	strh	r3, [r2, #0]
 8001f20:	e04f      	b.n	8001fc2 <L76_PrintExample+0x1ee>
        }
    } else {
        snprintf(buf, sizeof(buf),
 8001f22:	e9d7 ab48 	ldrd	sl, fp, [r7, #288]	@ 0x120
 8001f26:	ed97 8b4a 	vldr	d8, [r7, #296]	@ 0x128
            "[GPS] FIX OK : Lat=%.5f, Lon=%.5f, Alt=%.1fm\r\n"
            "UTC=%02d:%02d:%05.2f, Date=%02d/%02d/%04d\r\n"
            "Speed=%.1fkt, Course=%.1f°, Satellites=%d\r\n",
            data.latitude, data.longitude, data.altitude,
 8001f2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        snprintf(buf, sizeof(buf),
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb2a 	bl	8000588 <__aeabi_f2d>
 8001f34:	4605      	mov	r5, r0
 8001f36:	460e      	mov	r6, r1
            data.hours, data.minutes, data.seconds,
 8001f38:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
        snprintf(buf, sizeof(buf),
 8001f3c:	61fb      	str	r3, [r7, #28]
            data.hours, data.minutes, data.seconds,
 8001f3e:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
        snprintf(buf, sizeof(buf),
 8001f42:	61bb      	str	r3, [r7, #24]
            data.hours, data.minutes, data.seconds,
 8001f44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
        snprintf(buf, sizeof(buf),
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb1d 	bl	8000588 <__aeabi_f2d>
 8001f4e:	e9c7 0104 	strd	r0, r1, [r7, #16]
            data.day, data.month, data.year,
 8001f52:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
        snprintf(buf, sizeof(buf),
 8001f56:	60fb      	str	r3, [r7, #12]
            data.day, data.month, data.year,
 8001f58:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
        snprintf(buf, sizeof(buf),
 8001f5c:	60bb      	str	r3, [r7, #8]
            data.day, data.month, data.year,
 8001f5e:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
        snprintf(buf, sizeof(buf),
 8001f62:	607b      	str	r3, [r7, #4]
            data.speed, data.course, data.satellites
 8001f64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
        snprintf(buf, sizeof(buf),
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fb0d 	bl	8000588 <__aeabi_f2d>
 8001f6e:	4680      	mov	r8, r0
 8001f70:	4689      	mov	r9, r1
            data.speed, data.course, data.satellites
 8001f72:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
        snprintf(buf, sizeof(buf),
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fb06 	bl	8000588 <__aeabi_f2d>
            data.speed, data.course, data.satellites
 8001f7c:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
        snprintf(buf, sizeof(buf),
 8001f80:	f107 0420 	add.w	r4, r7, #32
 8001f84:	9312      	str	r3, [sp, #72]	@ 0x48
 8001f86:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8001f8a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	920c      	str	r2, [sp, #48]	@ 0x30
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	920a      	str	r2, [sp, #40]	@ 0x28
 8001f9a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	9207      	str	r2, [sp, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	9306      	str	r3, [sp, #24]
 8001faa:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001fae:	ed8d 8b02 	vstr	d8, [sp, #8]
 8001fb2:	e9cd ab00 	strd	sl, fp, [sp]
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff0 <L76_PrintExample+0x21c>)
 8001fb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f00f feab 	bl	8011d18 <sniprintf>
        );
    }

    printf("%s", buf);
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480a      	ldr	r0, [pc, #40]	@ (8001ff4 <L76_PrintExample+0x220>)
 8001fca:	f00f fe35 	bl	8011c38 <iprintf>
}
 8001fce:	bf00      	nop
 8001fd0:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	ecbd 8b02 	vpop	{d8}
 8001fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fde:	bf00      	nop
 8001fe0:	08014abc 	.word	0x08014abc
 8001fe4:	08014b14 	.word	0x08014b14
 8001fe8:	08014b44 	.word	0x08014b44
 8001fec:	08014b7c 	.word	0x08014b7c
 8001ff0:	08014bb0 	.word	0x08014bb0
 8001ff4:	08014c38 	.word	0x08014c38

08001ff8 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART RX Complete Callback (called from HAL IRQ handler when a byte is received).
 * @note This ISR appends incoming characters to a buffer and signals when a full line is received.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
    if (huart == l76_huart) {
 8002004:	4b4f      	ldr	r3, [pc, #316]	@ (8002144 <HAL_UART_RxCpltCallback+0x14c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	f040 8095 	bne.w	800213a <HAL_UART_RxCpltCallback+0x142>
        char c = (char)l76_rxChar;
 8002010:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <HAL_UART_RxCpltCallback+0x150>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	73fb      	strb	r3, [r7, #15]
        if (c == '$') {
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b24      	cmp	r3, #36	@ 0x24
 800201a:	d11a      	bne.n	8002052 <HAL_UART_RxCpltCallback+0x5a>
            /* Start of a new NMEA sentence */
            l76_rxIndex = 0;
 800201c:	4b4b      	ldr	r3, [pc, #300]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 800201e:	2200      	movs	r2, #0
 8002020:	801a      	strh	r2, [r3, #0]
            l76_currentBuf ^= 1;  // switch to the other buffer for new sentence
 8002022:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f083 0301 	eor.w	r3, r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b48      	ldr	r3, [pc, #288]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 800202e:	701a      	strb	r2, [r3, #0]
            l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 8002030:	4b47      	ldr	r3, [pc, #284]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	4b45      	ldr	r3, [pc, #276]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	b291      	uxth	r1, r2
 800203e:	4a43      	ldr	r2, [pc, #268]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 8002040:	8011      	strh	r1, [r2, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	4a43      	ldr	r2, [pc, #268]	@ (8002154 <HAL_UART_RxCpltCallback+0x15c>)
 8002046:	01c3      	lsls	r3, r0, #7
 8002048:	4413      	add	r3, r2
 800204a:	440b      	add	r3, r1
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e06c      	b.n	800212c <HAL_UART_RxCpltCallback+0x134>
        } else if (c == '\n') {
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	2b0a      	cmp	r3, #10
 8002056:	d14e      	bne.n	80020f6 <HAL_UART_RxCpltCallback+0xfe>
            /* End of NMEA sentence (LF detected). Terminate the string. */
            if (l76_rxIndex < L76_NMEA_MAX_LEN) {
 8002058:	4b3c      	ldr	r3, [pc, #240]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2b7f      	cmp	r3, #127	@ 0x7f
 800205e:	d80c      	bhi.n	800207a <HAL_UART_RxCpltCallback+0x82>
                l76_rxBuffer[l76_currentBuf][l76_rxIndex] = '\0'; // null-terminate line
 8002060:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	4b39      	ldr	r3, [pc, #228]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	4a39      	ldr	r2, [pc, #228]	@ (8002154 <HAL_UART_RxCpltCallback+0x15c>)
 800206e:	01c3      	lsls	r3, r0, #7
 8002070:	4413      	add	r3, r2
 8002072:	440b      	add	r3, r1
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e007      	b.n	800208a <HAL_UART_RxCpltCallback+0x92>
            } else {
                l76_rxBuffer[l76_currentBuf][L76_NMEA_MAX_LEN - 1] = '\0';
 800207a:	4b35      	ldr	r3, [pc, #212]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4a35      	ldr	r2, [pc, #212]	@ (8002154 <HAL_UART_RxCpltCallback+0x15c>)
 8002080:	01db      	lsls	r3, r3, #7
 8002082:	4413      	add	r3, r2
 8002084:	337f      	adds	r3, #127	@ 0x7f
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
            }
            // Remove any trailing CR if present (overwrite with null terminator)
            if (l76_rxIndex > 0 && l76_rxBuffer[l76_currentBuf][l76_rxIndex-1] == '\r') {
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d018      	beq.n	80020c4 <HAL_UART_RxCpltCallback+0xcc>
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	3b01      	subs	r3, #1
 800209e:	492d      	ldr	r1, [pc, #180]	@ (8002154 <HAL_UART_RxCpltCallback+0x15c>)
 80020a0:	01d2      	lsls	r2, r2, #7
 80020a2:	440a      	add	r2, r1
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b0d      	cmp	r3, #13
 80020aa:	d10b      	bne.n	80020c4 <HAL_UART_RxCpltCallback+0xcc>
                l76_rxBuffer[l76_currentBuf][l76_rxIndex-1] = '\0';
 80020ac:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	4926      	ldr	r1, [pc, #152]	@ (8002154 <HAL_UART_RxCpltCallback+0x15c>)
 80020ba:	01d2      	lsls	r2, r2, #7
 80020bc:	440a      	add	r2, r1
 80020be:	4413      	add	r3, r2
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
            }
            /* The buffer l76_currentBuf now holds a complete sentence.
               Signal the task that a line is ready in the OTHER buffer (the one just filled). */
            l76_readyBuf = l76_currentBuf;
 80020c4:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b25a      	sxtb	r2, r3
 80020ca:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <HAL_UART_RxCpltCallback+0x160>)
 80020cc:	701a      	strb	r2, [r3, #0]
            // Actually, we've toggled at '$', so at this point l76_currentBuf is the buffer just filled.
            // We will toggle it next time a new '$' comes.
            // So here l76_readyBuf is set to currentBuf, which is the filled buffer.

            /* Give semaphore to unblock the task waiting for a new line */
            xSemaphoreGiveFromISR(l76_sem, &xHigherPriorityTaskWoken);
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_UART_RxCpltCallback+0x164>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f107 0208 	add.w	r2, r7, #8
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f00c f89e 	bl	800e21a <xQueueGiveFromISR>
            /* Optionally, yield to the GPS task immediately if it has higher priority */
            portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d023      	beq.n	800212c <HAL_UART_RxCpltCallback+0x134>
 80020e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <HAL_UART_RxCpltCallback+0x168>)
 80020e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	e01a      	b.n	800212c <HAL_UART_RxCpltCallback+0x134>
        } else if (c == '\r') {
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b0d      	cmp	r3, #13
 80020fa:	d017      	beq.n	800212c <HAL_UART_RxCpltCallback+0x134>
            /* Carriage return: skip it (will handle on '\n') */
            // Do nothing, just ignore the CR
        } else {
            /* Regular character, add to current buffer if space */
            if (l76_rxIndex < (L76_NMEA_MAX_LEN - 1)) {
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b7e      	cmp	r3, #126	@ 0x7e
 8002102:	d810      	bhi.n	8002126 <HAL_UART_RxCpltCallback+0x12e>
                l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_UART_RxCpltCallback+0x158>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	b291      	uxth	r1, r2
 8002112:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 8002114:	8011      	strh	r1, [r2, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	4a0e      	ldr	r2, [pc, #56]	@ (8002154 <HAL_UART_RxCpltCallback+0x15c>)
 800211a:	01c3      	lsls	r3, r0, #7
 800211c:	4413      	add	r3, r2
 800211e:	440b      	add	r3, r1
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e002      	b.n	800212c <HAL_UART_RxCpltCallback+0x134>
            } else {
                /* Buffer overflow - sentence too long, reset index to avoid overflow.
                   (In practice, NMEA sentences should not exceed buffer length.) */
                l76_rxIndex = 0;
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_UART_RxCpltCallback+0x154>)
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]
            }
        }
        /* Re-arm the UART receive interrupt for the next character */
        HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_UART_RxCpltCallback+0x14c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	4905      	ldr	r1, [pc, #20]	@ (8002148 <HAL_UART_RxCpltCallback+0x150>)
 8002134:	4618      	mov	r0, r3
 8002136:	f009 f830 	bl	800b19a <HAL_UART_Receive_IT>
    }
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000804 	.word	0x20000804
 8002148:	2000090f 	.word	0x2000090f
 800214c:	2000090c 	.word	0x2000090c
 8002150:	2000090e 	.word	0x2000090e
 8002154:	2000080c 	.word	0x2000080c
 8002158:	20000000 	.word	0x20000000
 800215c:	20000808 	.word	0x20000808
 8002160:	e000ed04 	.word	0xe000ed04

08002164 <L76_ProcessNMEA>:

/**
 * @brief Determine the type of NMEA sentence and parse accordingly.
 * @param nmea Pointer to the NMEA sentence string (null-terminated, starting with '$').
 */
static void L76_ProcessNMEA(char *nmea) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    if (nmea == NULL || nmea[0] != '$') {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02c      	beq.n	80021cc <L76_ProcessNMEA+0x68>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b24      	cmp	r3, #36	@ 0x24
 8002178:	d128      	bne.n	80021cc <L76_ProcessNMEA+0x68>
        return; // invalid sentence
    }
    /* Remove any checksum if present by cutting off at '*' */
    char *checksum_start = strchr(nmea, '*');
 800217a:	212a      	movs	r1, #42	@ 0x2a
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f00f fee1 	bl	8011f44 <strchr>
 8002182:	60f8      	str	r0, [r7, #12]
    if (checksum_start) {
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <L76_ProcessNMEA+0x2c>
        *checksum_start = '\0';  // terminate string at '*' (discard checksum part)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
    }
    /* Identify sentence type by the 3-letter identifier after '$xx' (talker ID) */
    if (strncmp(nmea + 3, "GGA", 3) == 0) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3303      	adds	r3, #3
 8002194:	2203      	movs	r2, #3
 8002196:	490f      	ldr	r1, [pc, #60]	@ (80021d4 <L76_ProcessNMEA+0x70>)
 8002198:	4618      	mov	r0, r3
 800219a:	f00f fee0 	bl	8011f5e <strncmp>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <L76_ProcessNMEA+0x4a>
        L76_ParseGGA(nmea, &l76_data);
 80021a4:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <L76_ProcessNMEA+0x74>)
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f81a 	bl	80021e0 <L76_ParseGGA>
 80021ac:	e00f      	b.n	80021ce <L76_ProcessNMEA+0x6a>
    } else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3303      	adds	r3, #3
 80021b2:	2203      	movs	r2, #3
 80021b4:	4909      	ldr	r1, [pc, #36]	@ (80021dc <L76_ProcessNMEA+0x78>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00f fed1 	bl	8011f5e <strncmp>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <L76_ProcessNMEA+0x6a>
        L76_ParseRMC(nmea, &l76_data);
 80021c2:	4905      	ldr	r1, [pc, #20]	@ (80021d8 <L76_ProcessNMEA+0x74>)
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8cb 	bl	8002360 <L76_ParseRMC>
 80021ca:	e000      	b.n	80021ce <L76_ProcessNMEA+0x6a>
        return; // invalid sentence
 80021cc:	bf00      	nop
    } else {
        // Other sentence types (GSA, GSV, VTG, etc.) can be handled if needed.
        // For now, we ignore unhandled sentence types.
    }
}
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	08014c3c 	.word	0x08014c3c
 80021d8:	20000910 	.word	0x20000910
 80021dc:	08014c40 	.word	0x08014c40

080021e0 <L76_ParseGGA>:
/**
 * @brief Parse a $GPGGA or $GNGGA NMEA sentence and update GPS data.
 * @param nmea The NMEA sentence string (null-terminated, without the checksum part).
 * @param data Pointer to GPS data structure to update.
 */
static void L76_ParseGGA(char *nmea, L76_GPS_Data_t *data) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
    // Example GGA: $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,
    char *token;
    token = strtok(nmea, ",");       // token0: "$GPGGA" (with talker)
 80021ea:	495b      	ldr	r1, [pc, #364]	@ (8002358 <L76_ParseGGA+0x178>)
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f00f fec9 	bl	8011f84 <strtok>
 80021f2:	61f8      	str	r0, [r7, #28]
    token = strtok(NULL, ",");       // token1: UTC time (hhmmss.sss)
 80021f4:	4958      	ldr	r1, [pc, #352]	@ (8002358 <L76_ParseGGA+0x178>)
 80021f6:	2000      	movs	r0, #0
 80021f8:	f00f fec4 	bl	8011f84 <strtok>
 80021fc:	61f8      	str	r0, [r7, #28]
    if (token != NULL) {
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <L76_ParseGGA+0x3a>
        L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f103 0120 	add.w	r1, r3, #32
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	3324      	adds	r3, #36	@ 0x24
 8002214:	69f8      	ldr	r0, [r7, #28]
 8002216:	f000 f9cd 	bl	80025b4 <L76_ParseTime>
    }
    token = strtok(NULL, ",");       // token2: latitude (ddmm.mmmm)
 800221a:	494f      	ldr	r1, [pc, #316]	@ (8002358 <L76_ParseGGA+0x178>)
 800221c:	2000      	movs	r0, #0
 800221e:	f00f feb1 	bl	8011f84 <strtok>
 8002222:	61f8      	str	r0, [r7, #28]
    const char *lat_str = token;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	61bb      	str	r3, [r7, #24]
    token = strtok(NULL, ",");       // token3: N/S
 8002228:	494b      	ldr	r1, [pc, #300]	@ (8002358 <L76_ParseGGA+0x178>)
 800222a:	2000      	movs	r0, #0
 800222c:	f00f feaa 	bl	8011f84 <strtok>
 8002230:	61f8      	str	r0, [r7, #28]
    char lat_dir = (token != NULL ? token[0] : 0);
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <L76_ParseGGA+0x5e>
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	e000      	b.n	8002240 <L76_ParseGGA+0x60>
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
    token = strtok(NULL, ",");       // token4: longitude (dddmm.mmmm)
 8002242:	4945      	ldr	r1, [pc, #276]	@ (8002358 <L76_ParseGGA+0x178>)
 8002244:	2000      	movs	r0, #0
 8002246:	f00f fe9d 	bl	8011f84 <strtok>
 800224a:	61f8      	str	r0, [r7, #28]
    const char *lon_str = token;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	613b      	str	r3, [r7, #16]
    token = strtok(NULL, ",");       // token5: E/W
 8002250:	4941      	ldr	r1, [pc, #260]	@ (8002358 <L76_ParseGGA+0x178>)
 8002252:	2000      	movs	r0, #0
 8002254:	f00f fe96 	bl	8011f84 <strtok>
 8002258:	61f8      	str	r0, [r7, #28]
    char lon_dir = (token != NULL ? token[0] : 0);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <L76_ParseGGA+0x86>
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	e000      	b.n	8002268 <L76_ParseGGA+0x88>
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
    token = strtok(NULL, ",");       // token6: Fix quality (0 = invalid, 1 = GPS fix, 2 = DGPS fix, ...)
 800226a:	493b      	ldr	r1, [pc, #236]	@ (8002358 <L76_ParseGGA+0x178>)
 800226c:	2000      	movs	r0, #0
 800226e:	f00f fe89 	bl	8011f84 <strtok>
 8002272:	61f8      	str	r0, [r7, #28]
    data->fix_quality = (token != NULL ? (uint8_t)atoi(token) : 0);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <L76_ParseGGA+0xa6>
 800227a:	69f8      	ldr	r0, [r7, #28]
 800227c:	f00e f8c9 	bl	8010412 <atoi>
 8002280:	4603      	mov	r3, r0
 8002282:	b2da      	uxtb	r2, r3
 8002284:	e000      	b.n	8002288 <L76_ParseGGA+0xa8>
 8002286:	2200      	movs	r2, #0
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	751a      	strb	r2, [r3, #20]
    token = strtok(NULL, ",");       // token7: Number of satellites
 800228c:	4932      	ldr	r1, [pc, #200]	@ (8002358 <L76_ParseGGA+0x178>)
 800228e:	2000      	movs	r0, #0
 8002290:	f00f fe78 	bl	8011f84 <strtok>
 8002294:	61f8      	str	r0, [r7, #28]
    data->satellites = (token != NULL ? (uint8_t)atoi(token) : 0);
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <L76_ParseGGA+0xc8>
 800229c:	69f8      	ldr	r0, [r7, #28]
 800229e:	f00e f8b8 	bl	8010412 <atoi>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	e000      	b.n	80022aa <L76_ParseGGA+0xca>
 80022a8:	2200      	movs	r2, #0
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	755a      	strb	r2, [r3, #21]
    token = strtok(NULL, ",");       // token8: HDOP
 80022ae:	492a      	ldr	r1, [pc, #168]	@ (8002358 <L76_ParseGGA+0x178>)
 80022b0:	2000      	movs	r0, #0
 80022b2:	f00f fe67 	bl	8011f84 <strtok>
 80022b6:	61f8      	str	r0, [r7, #28]
    // We can parse HDOP if needed: float hdop = token ? strtof(token, NULL) : 0.0f;
    token = strtok(NULL, ",");       // token9: Altitude
 80022b8:	4927      	ldr	r1, [pc, #156]	@ (8002358 <L76_ParseGGA+0x178>)
 80022ba:	2000      	movs	r0, #0
 80022bc:	f00f fe62 	bl	8011f84 <strtok>
 80022c0:	61f8      	str	r0, [r7, #28]
    data->altitude = (token != NULL ? strtof(token, NULL) : 0.0f);
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <L76_ParseGGA+0xf6>
 80022c8:	2100      	movs	r1, #0
 80022ca:	69f8      	ldr	r0, [r7, #28]
 80022cc:	f00e feb4 	bl	8011038 <strtof>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	e001      	b.n	80022da <L76_ParseGGA+0xfa>
 80022d6:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800235c <L76_ParseGGA+0x17c>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	edc3 7a04 	vstr	s15, [r3, #16]
    // token10: Altitude unit (usually "M")
    token = strtok(NULL, ",");
 80022e0:	491d      	ldr	r1, [pc, #116]	@ (8002358 <L76_ParseGGA+0x178>)
 80022e2:	2000      	movs	r0, #0
 80022e4:	f00f fe4e 	bl	8011f84 <strtok>
 80022e8:	61f8      	str	r0, [r7, #28]
    // token11: Geoidal separation (not used)
    token = strtok(NULL, ",");
 80022ea:	491b      	ldr	r1, [pc, #108]	@ (8002358 <L76_ParseGGA+0x178>)
 80022ec:	2000      	movs	r0, #0
 80022ee:	f00f fe49 	bl	8011f84 <strtok>
 80022f2:	61f8      	str	r0, [r7, #28]
    // token12: Geoidal separation unit (usually "M")
    token = strtok(NULL, ",");
 80022f4:	4918      	ldr	r1, [pc, #96]	@ (8002358 <L76_ParseGGA+0x178>)
 80022f6:	2000      	movs	r0, #0
 80022f8:	f00f fe44 	bl	8011f84 <strtok>
 80022fc:	61f8      	str	r0, [r7, #28]
    // token13: DGPS age (if any, not used)
    token = strtok(NULL, ",");
 80022fe:	4916      	ldr	r1, [pc, #88]	@ (8002358 <L76_ParseGGA+0x178>)
 8002300:	2000      	movs	r0, #0
 8002302:	f00f fe3f 	bl	8011f84 <strtok>
 8002306:	61f8      	str	r0, [r7, #28]
    // token14: DGPS reference station ID (if any, not used)
    // (Note: strtok already stopped at '*' if there was a checksum, since we cut it in ProcessNMEA)

    // Convert latitude and longitude to decimal degrees
    if (lat_str && lat_dir) {
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00e      	beq.n	800232c <L76_ParseGGA+0x14c>
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <L76_ParseGGA+0x14c>
        data->latitude = L76_ConvertNMEADegrees(lat_str, lat_dir);
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	4619      	mov	r1, r3
 8002318:	69b8      	ldr	r0, [r7, #24]
 800231a:	f000 f8ed 	bl	80024f8 <L76_ConvertNMEADegrees>
 800231e:	eeb0 7a40 	vmov.f32	s14, s0
 8002322:	eef0 7a60 	vmov.f32	s15, s1
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	ed83 7b00 	vstr	d7, [r3]
    }
    if (lon_str && lon_dir) {
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00e      	beq.n	8002350 <L76_ParseGGA+0x170>
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <L76_ParseGGA+0x170>
        data->longitude = L76_ConvertNMEADegrees(lon_str, lon_dir);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	4619      	mov	r1, r3
 800233c:	6938      	ldr	r0, [r7, #16]
 800233e:	f000 f8db 	bl	80024f8 <L76_ConvertNMEADegrees>
 8002342:	eeb0 7a40 	vmov.f32	s14, s0
 8002346:	eef0 7a60 	vmov.f32	s15, s1
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	ed83 7b02 	vstr	d7, [r3, #8]
    }
    // No return value; data is updated in the provided structure
}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	08014c44 	.word	0x08014c44
 800235c:	00000000 	.word	0x00000000

08002360 <L76_ParseRMC>:
/**
 * @brief Parse a $GPRMC or $GNRMC NMEA sentence and update GPS data.
 * @param nmea The NMEA sentence string (null-terminated, without the checksum).
 * @param data Pointer to GPS data structure to update.
 */
static void L76_ParseRMC(char *nmea, L76_GPS_Data_t *data) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
    // Example RMC: $GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,,,A
    char *token;
    token = strtok(nmea, ",");      // token0: "$GPRMC"
 800236a:	4961      	ldr	r1, [pc, #388]	@ (80024f0 <L76_ParseRMC+0x190>)
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f00f fe09 	bl	8011f84 <strtok>
 8002372:	61f8      	str	r0, [r7, #28]
    token = strtok(NULL, ",");      // token1: UTC time
 8002374:	495e      	ldr	r1, [pc, #376]	@ (80024f0 <L76_ParseRMC+0x190>)
 8002376:	2000      	movs	r0, #0
 8002378:	f00f fe04 	bl	8011f84 <strtok>
 800237c:	61f8      	str	r0, [r7, #28]
    if (token != NULL) {
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <L76_ParseRMC+0x3a>
        L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f103 0120 	add.w	r1, r3, #32
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3324      	adds	r3, #36	@ 0x24
 8002394:	69f8      	ldr	r0, [r7, #28]
 8002396:	f000 f90d 	bl	80025b4 <L76_ParseTime>
    }
    token = strtok(NULL, ",");      // token2: Status (A=active, V=void)
 800239a:	4955      	ldr	r1, [pc, #340]	@ (80024f0 <L76_ParseRMC+0x190>)
 800239c:	2000      	movs	r0, #0
 800239e:	f00f fdf1 	bl	8011f84 <strtok>
 80023a2:	61f8      	str	r0, [r7, #28]
    char status = (token != NULL ? token[0] : 'V');
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <L76_ParseRMC+0x50>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	e000      	b.n	80023b2 <L76_ParseRMC+0x52>
 80023b0:	2356      	movs	r3, #86	@ 0x56
 80023b2:	76fb      	strb	r3, [r7, #27]
    token = strtok(NULL, ",");      // token3: Latitude
 80023b4:	494e      	ldr	r1, [pc, #312]	@ (80024f0 <L76_ParseRMC+0x190>)
 80023b6:	2000      	movs	r0, #0
 80023b8:	f00f fde4 	bl	8011f84 <strtok>
 80023bc:	61f8      	str	r0, [r7, #28]
    const char *lat_str = token;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	617b      	str	r3, [r7, #20]
    token = strtok(NULL, ",");      // token4: N/S
 80023c2:	494b      	ldr	r1, [pc, #300]	@ (80024f0 <L76_ParseRMC+0x190>)
 80023c4:	2000      	movs	r0, #0
 80023c6:	f00f fddd 	bl	8011f84 <strtok>
 80023ca:	61f8      	str	r0, [r7, #28]
    char lat_dir = (token != NULL ? token[0] : 0);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <L76_ParseRMC+0x78>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	e000      	b.n	80023da <L76_ParseRMC+0x7a>
 80023d8:	2300      	movs	r3, #0
 80023da:	74fb      	strb	r3, [r7, #19]
    token = strtok(NULL, ",");      // token5: Longitude
 80023dc:	4944      	ldr	r1, [pc, #272]	@ (80024f0 <L76_ParseRMC+0x190>)
 80023de:	2000      	movs	r0, #0
 80023e0:	f00f fdd0 	bl	8011f84 <strtok>
 80023e4:	61f8      	str	r0, [r7, #28]
    const char *lon_str = token;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	60fb      	str	r3, [r7, #12]
    token = strtok(NULL, ",");      // token6: E/W
 80023ea:	4941      	ldr	r1, [pc, #260]	@ (80024f0 <L76_ParseRMC+0x190>)
 80023ec:	2000      	movs	r0, #0
 80023ee:	f00f fdc9 	bl	8011f84 <strtok>
 80023f2:	61f8      	str	r0, [r7, #28]
    char lon_dir = (token != NULL ? token[0] : 0);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <L76_ParseRMC+0xa0>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	e000      	b.n	8002402 <L76_ParseRMC+0xa2>
 8002400:	2300      	movs	r3, #0
 8002402:	72fb      	strb	r3, [r7, #11]
    token = strtok(NULL, ",");      // token7: Speed in knots
 8002404:	493a      	ldr	r1, [pc, #232]	@ (80024f0 <L76_ParseRMC+0x190>)
 8002406:	2000      	movs	r0, #0
 8002408:	f00f fdbc 	bl	8011f84 <strtok>
 800240c:	61f8      	str	r0, [r7, #28]
    data->speed = (token != NULL ? strtof(token, NULL) : 0.0f);
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <L76_ParseRMC+0xc2>
 8002414:	2100      	movs	r1, #0
 8002416:	69f8      	ldr	r0, [r7, #28]
 8002418:	f00e fe0e 	bl	8011038 <strtof>
 800241c:	eef0 7a40 	vmov.f32	s15, s0
 8002420:	e001      	b.n	8002426 <L76_ParseRMC+0xc6>
 8002422:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80024f4 <L76_ParseRMC+0x194>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	edc3 7a06 	vstr	s15, [r3, #24]
    token = strtok(NULL, ",");      // token8: Course (track angle in degrees)
 800242c:	4930      	ldr	r1, [pc, #192]	@ (80024f0 <L76_ParseRMC+0x190>)
 800242e:	2000      	movs	r0, #0
 8002430:	f00f fda8 	bl	8011f84 <strtok>
 8002434:	61f8      	str	r0, [r7, #28]
    data->course = (token != NULL ? strtof(token, NULL) : 0.0f);
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <L76_ParseRMC+0xea>
 800243c:	2100      	movs	r1, #0
 800243e:	69f8      	ldr	r0, [r7, #28]
 8002440:	f00e fdfa 	bl	8011038 <strtof>
 8002444:	eef0 7a40 	vmov.f32	s15, s0
 8002448:	e001      	b.n	800244e <L76_ParseRMC+0xee>
 800244a:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80024f4 <L76_ParseRMC+0x194>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	edc3 7a07 	vstr	s15, [r3, #28]
    token = strtok(NULL, ",");      // token9: Date (ddmmyy)
 8002454:	4926      	ldr	r1, [pc, #152]	@ (80024f0 <L76_ParseRMC+0x190>)
 8002456:	2000      	movs	r0, #0
 8002458:	f00f fd94 	bl	8011f84 <strtok>
 800245c:	61f8      	str	r0, [r7, #28]
    if (token != NULL) {
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <L76_ParseRMC+0x11a>
        L76_ParseDate(token, &data->day, &data->month, &data->year);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	332a      	adds	r3, #42	@ 0x2a
 8002474:	69f8      	ldr	r0, [r7, #28]
 8002476:	f000 f929 	bl	80026cc <L76_ParseDate>
    }
    // token10: Magnetic variation (optional, may be empty)
    token = strtok(NULL, ",");
 800247a:	491d      	ldr	r1, [pc, #116]	@ (80024f0 <L76_ParseRMC+0x190>)
 800247c:	2000      	movs	r0, #0
 800247e:	f00f fd81 	bl	8011f84 <strtok>
 8002482:	61f8      	str	r0, [r7, #28]
    // token11: Mag var direction (E/W, optional)
    token = strtok(NULL, ",");
 8002484:	491a      	ldr	r1, [pc, #104]	@ (80024f0 <L76_ParseRMC+0x190>)
 8002486:	2000      	movs	r0, #0
 8002488:	f00f fd7c 	bl	8011f84 <strtok>
 800248c:	61f8      	str	r0, [r7, #28]

    // Update latitude/longitude if available
    if (lat_str && lat_dir) {
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <L76_ParseRMC+0x152>
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <L76_ParseRMC+0x152>
        data->latitude = L76_ConvertNMEADegrees(lat_str, lat_dir);
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	4619      	mov	r1, r3
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f000 f82a 	bl	80024f8 <L76_ConvertNMEADegrees>
 80024a4:	eeb0 7a40 	vmov.f32	s14, s0
 80024a8:	eef0 7a60 	vmov.f32	s15, s1
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	ed83 7b00 	vstr	d7, [r3]
    }
    if (lon_str && lon_dir) {
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <L76_ParseRMC+0x176>
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <L76_ParseRMC+0x176>
        data->longitude = L76_ConvertNMEADegrees(lon_str, lon_dir);
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	4619      	mov	r1, r3
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f818 	bl	80024f8 <L76_ConvertNMEADegrees>
 80024c8:	eeb0 7a40 	vmov.f32	s14, s0
 80024cc:	eef0 7a60 	vmov.f32	s15, s1
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	ed83 7b02 	vstr	d7, [r3, #8]
    }
    // Update fix status based on Status field
    if (status == 'V') {
 80024d6:	7efb      	ldrb	r3, [r7, #27]
 80024d8:	2b56      	cmp	r3, #86	@ 0x56
 80024da:	d105      	bne.n	80024e8 <L76_ParseRMC+0x188>
        // 'V' = navigation receiver warning (no valid fix)
        data->fix_quality = 0;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	751a      	strb	r2, [r3, #20]
        data->satellites  = 0;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	755a      	strb	r2, [r3, #21]
    }
}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	08014c44 	.word	0x08014c44
 80024f4:	00000000 	.word	0x00000000

080024f8 <L76_ConvertNMEADegrees>:
 * @brief Convert an NMEA coordinate string (degrees and minutes) into decimal degrees.
 * @param raw The coordinate string in NMEA format (ddmm.mmmm or dddmm.mmmm).
 * @param dir The direction character ('N','S','E','W').
 * @return The coordinate in decimal degrees, with sign indicating hemisphere.
 */
static double L76_ConvertNMEADegrees(const char *raw, char dir) {
 80024f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024fc:	b08a      	sub	sp, #40	@ 0x28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	70fb      	strb	r3, [r7, #3]
    // NMEA format: latitude: ddmm.mmmm, longitude: dddmm.mmmm
    // Convert to decimal degrees.
    double val = atof(raw);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f00d ff80 	bl	801040c <atof>
 800250c:	ed87 0b06 	vstr	d0, [r7, #24]
    int degrees = (int)(val / 100);         // extract whole degrees
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <L76_ConvertNMEADegrees+0xb4>)
 8002516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251a:	f7fe f9b7 	bl	800088c <__aeabi_ddiv>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fb37 	bl	8000b98 <__aeabi_d2iz>
 800252a:	4603      	mov	r3, r0
 800252c:	617b      	str	r3, [r7, #20]
    double minutes = val - (degrees * 100); // extract minutes (including fractional part)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2264      	movs	r2, #100	@ 0x64
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f814 	bl	8000564 <__aeabi_i2d>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002544:	f7fd fec0 	bl	80002c8 <__aeabi_dsub>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double dec_deg = (double)degrees + minutes / 60.0;
 8002550:	6978      	ldr	r0, [r7, #20]
 8002552:	f7fe f807 	bl	8000564 <__aeabi_i2d>
 8002556:	4680      	mov	r8, r0
 8002558:	4689      	mov	r9, r1
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <L76_ConvertNMEADegrees+0xb8>)
 8002560:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002564:	f7fe f992 	bl	800088c <__aeabi_ddiv>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4640      	mov	r0, r8
 800256e:	4649      	mov	r1, r9
 8002570:	f7fd feac 	bl	80002cc <__adddf3>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if (dir == 'S' || dir == 'W') {
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b53      	cmp	r3, #83	@ 0x53
 8002580:	d002      	beq.n	8002588 <L76_ConvertNMEADegrees+0x90>
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b57      	cmp	r3, #87	@ 0x57
 8002586:	d105      	bne.n	8002594 <L76_ConvertNMEADegrees+0x9c>
        dec_deg = -dec_deg;
 8002588:	6a3c      	ldr	r4, [r7, #32]
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002590:	e9c7 4508 	strd	r4, r5, [r7, #32]
    }
    return dec_deg;
 8002594:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002598:	ec43 2b17 	vmov	d7, r2, r3
}
 800259c:	eeb0 0a47 	vmov.f32	s0, s14
 80025a0:	eef0 0a67 	vmov.f32	s1, s15
 80025a4:	3728      	adds	r7, #40	@ 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025ac:	40590000 	.word	0x40590000
 80025b0:	404e0000 	.word	0x404e0000

080025b4 <L76_ParseTime>:
 * @param timestr Time string (e.g., "123519" or "123519.00").
 * @param hour [out] Parsed hour.
 * @param min  [out] Parsed minute.
 * @param sec  [out] Parsed seconds (including fractional part).
 */
static void L76_ParseTime(const char *timestr, uint8_t *hour, uint8_t *min, float *sec) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
    if (strlen(timestr) < 6) {
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7fd fe74 	bl	80002b0 <strlen>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d80b      	bhi.n	80025e6 <L76_ParseTime+0x32>
        // Invalid time string
        *hour = *min = 0;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	701a      	strb	r2, [r3, #0]
        *sec = 0.0f;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e06f      	b.n	80026c6 <L76_ParseTime+0x112>
        return;
    }
    // Parse hour, minute, second
    char buf[3] = {0};
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2100      	movs	r1, #0
 80025ec:	460a      	mov	r2, r1
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	460a      	mov	r2, r1
 80025f2:	709a      	strb	r2, [r3, #2]
    buf[0] = timestr[0]; buf[1] = timestr[1]; // HH
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	743b      	strb	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	747b      	strb	r3, [r7, #17]
    *hour = (uint8_t)atoi(buf);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f00d ff03 	bl	8010412 <atoi>
 800260c:	4603      	mov	r3, r0
 800260e:	b2da      	uxtb	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	701a      	strb	r2, [r3, #0]
    buf[0] = timestr[2]; buf[1] = timestr[3]; // MM
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3302      	adds	r3, #2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	743b      	strb	r3, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3303      	adds	r3, #3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	747b      	strb	r3, [r7, #17]
    *min = (uint8_t)atoi(buf);
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4618      	mov	r0, r3
 800262a:	f00d fef2 	bl	8010412 <atoi>
 800262e:	4603      	mov	r3, r0
 8002630:	b2da      	uxtb	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	701a      	strb	r2, [r3, #0]
    buf[0] = timestr[4]; buf[1] = timestr[5]; // SS
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3304      	adds	r3, #4
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	743b      	strb	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3305      	adds	r3, #5
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	747b      	strb	r3, [r7, #17]
    uint8_t sec_int = (uint8_t)atoi(buf);
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4618      	mov	r0, r3
 800264c:	f00d fee1 	bl	8010412 <atoi>
 8002650:	4603      	mov	r3, r0
 8002652:	77fb      	strb	r3, [r7, #31]
    float sec_frac = 0.0f;
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
    if (timestr[6] == '.') {
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3306      	adds	r3, #6
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b2e      	cmp	r3, #46	@ 0x2e
 8002662:	d124      	bne.n	80026ae <L76_ParseTime+0xfa>
        // Fractional part present
        const char *frac_str = timestr + 7;  // part after the decimal point
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3307      	adds	r3, #7
 8002668:	61bb      	str	r3, [r7, #24]
        if (*frac_str) {
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01d      	beq.n	80026ae <L76_ParseTime+0xfa>
            int frac_int = atoi(frac_str);
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f00d fecd 	bl	8010412 <atoi>
 8002678:	6178      	str	r0, [r7, #20]
            int frac_len = strlen(frac_str);
 800267a:	69b8      	ldr	r0, [r7, #24]
 800267c:	f7fd fe18 	bl	80002b0 <strlen>
 8002680:	4603      	mov	r3, r0
 8002682:	623b      	str	r3, [r7, #32]
            sec_frac = (float)frac_int;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            // Divide by 10^frac_len to get the fractional seconds
            while (frac_len-- > 0) {
 8002692:	e007      	b.n	80026a4 <L76_ParseTime+0xf0>
                sec_frac /= 10.0f;
 8002694:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002698:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800269c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            while (frac_len-- > 0) {
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	623a      	str	r2, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	dcf2      	bgt.n	8002694 <L76_ParseTime+0xe0>
            }
        }
    }
    *sec = sec_int + sec_frac;
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	edc3 7a00 	vstr	s15, [r3]
}
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <L76_ParseDate>:
 * @param datestr Date string (e.g., "230394" for 23rd March 1994).
 * @param day   [out] Parsed day.
 * @param month [out] Parsed month.
 * @param year  [out] Parsed year (full year, e.g., 1994 or 2025).
 */
static void L76_ParseDate(const char *datestr, uint8_t *day, uint8_t *month, uint16_t *year) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
    if (strlen(datestr) != 6) {
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7fd fde8 	bl	80002b0 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d00a      	beq.n	80026fc <L76_ParseDate+0x30>
        *day = *month = 0;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	701a      	strb	r2, [r3, #0]
        *year = 0;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	e048      	b.n	800278e <L76_ParseDate+0xc2>
        return;
    }
    char buf[3] = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2100      	movs	r1, #0
 8002702:	460a      	mov	r2, r1
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	460a      	mov	r2, r1
 8002708:	709a      	strb	r2, [r3, #2]
    buf[0] = datestr[0]; buf[1] = datestr[1];
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	753b      	strb	r3, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3301      	adds	r3, #1
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	757b      	strb	r3, [r7, #21]
    *day = (uint8_t)atoi(buf);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4618      	mov	r0, r3
 800271e:	f00d fe78 	bl	8010412 <atoi>
 8002722:	4603      	mov	r3, r0
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	701a      	strb	r2, [r3, #0]
    buf[0] = datestr[2]; buf[1] = datestr[3];
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3302      	adds	r3, #2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	753b      	strb	r3, [r7, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3303      	adds	r3, #3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	757b      	strb	r3, [r7, #21]
    *month = (uint8_t)atoi(buf);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4618      	mov	r0, r3
 8002740:	f00d fe67 	bl	8010412 <atoi>
 8002744:	4603      	mov	r3, r0
 8002746:	b2da      	uxtb	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	701a      	strb	r2, [r3, #0]
    buf[0] = datestr[4]; buf[1] = datestr[5];
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	753b      	strb	r3, [r7, #20]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3305      	adds	r3, #5
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	757b      	strb	r3, [r7, #21]
    uint8_t yy = (uint8_t)atoi(buf);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4618      	mov	r0, r3
 8002762:	f00d fe56 	bl	8010412 <atoi>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]
    // NMEA year is two digits (00-99). Assume 2000-2099 for 00-99 up to 89, and 1900s for 90-99.
    if (yy < 90) {
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b59      	cmp	r3, #89	@ 0x59
 800276e:	d807      	bhi.n	8002780 <L76_ParseDate+0xb4>
        *year = 2000 + yy;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002778:	b29a      	uxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	e006      	b.n	800278e <L76_ParseDate+0xc2>
    } else {
        *year = 1900 + yy;
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8002788:	b29a      	uxth	r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	801a      	strh	r2, [r3, #0]
    }
}
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_I2C1_Init+0x74>)
 800279a:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <MX_I2C1_Init+0x78>)
 800279c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <MX_I2C1_Init+0x7c>)
 80027a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027aa:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b0:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027b6:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ce:	480e      	ldr	r0, [pc, #56]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027d0:	f003 fc60 	bl	8006094 <HAL_I2C_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027da:	f000 fb63 	bl	8002ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027de:	2100      	movs	r1, #0
 80027e0:	4809      	ldr	r0, [pc, #36]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027e2:	f003 fcf3 	bl	80061cc <HAL_I2CEx_ConfigAnalogFilter>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027ec:	f000 fb5a 	bl	8002ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027f0:	2100      	movs	r1, #0
 80027f2:	4805      	ldr	r0, [pc, #20]	@ (8002808 <MX_I2C1_Init+0x74>)
 80027f4:	f003 fd35 	bl	8006262 <HAL_I2CEx_ConfigDigitalFilter>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027fe:	f000 fb51 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000940 	.word	0x20000940
 800280c:	40005400 	.word	0x40005400
 8002810:	00c0eaff 	.word	0x00c0eaff

08002814 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <MX_I2C3_Init+0x74>)
 800281a:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <MX_I2C3_Init+0x78>)
 800281c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002820:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <MX_I2C3_Init+0x7c>)
 8002822:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <MX_I2C3_Init+0x74>)
 800282c:	2201      	movs	r2, #1
 800282e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <MX_I2C3_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <MX_I2C3_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800284e:	480e      	ldr	r0, [pc, #56]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002850:	f003 fc20 	bl	8006094 <HAL_I2C_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800285a:	f000 fb23 	bl	8002ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800285e:	2100      	movs	r1, #0
 8002860:	4809      	ldr	r0, [pc, #36]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002862:	f003 fcb3 	bl	80061cc <HAL_I2CEx_ConfigAnalogFilter>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800286c:	f000 fb1a 	bl	8002ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002870:	2100      	movs	r1, #0
 8002872:	4805      	ldr	r0, [pc, #20]	@ (8002888 <MX_I2C3_Init+0x74>)
 8002874:	f003 fcf5 	bl	8006262 <HAL_I2CEx_ConfigDigitalFilter>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800287e:	f000 fb11 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000994 	.word	0x20000994
 800288c:	40005c00 	.word	0x40005c00
 8002890:	00c0eaff 	.word	0x00c0eaff

08002894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0ac      	sub	sp, #176	@ 0xb0
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	2284      	movs	r2, #132	@ 0x84
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00f fb3d 	bl	8011f34 <memset>
  if(i2cHandle->Instance==I2C1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a44      	ldr	r2, [pc, #272]	@ (80029d0 <HAL_I2C_MspInit+0x13c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d13d      	bne.n	8002940 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ce:	f107 0318 	add.w	r3, r7, #24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 fe02 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028de:	f000 fae1 	bl	8002ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	4b3c      	ldr	r3, [pc, #240]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	4a3b      	ldr	r2, [pc, #236]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ee:	4b39      	ldr	r3, [pc, #228]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80028fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002902:	2312      	movs	r3, #18
 8002904:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002908:	2301      	movs	r3, #1
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002914:	2304      	movs	r3, #4
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800291e:	4619      	mov	r1, r3
 8002920:	482d      	ldr	r0, [pc, #180]	@ (80029d8 <HAL_I2C_MspInit+0x144>)
 8002922:	f003 f9d9 	bl	8005cd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002926:	4b2b      	ldr	r3, [pc, #172]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a2a      	ldr	r2, [pc, #168]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 800292c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800293e:	e042      	b.n	80029c6 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <HAL_I2C_MspInit+0x148>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d13d      	bne.n	80029c6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800294a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800294e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002956:	f107 0318 	add.w	r3, r7, #24
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fdbe 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002966:	f000 fa9d 	bl	8002ea4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800296a:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 8002970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b17      	ldr	r3, [pc, #92]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002982:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298a:	2312      	movs	r3, #18
 800298c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002990:	2301      	movs	r3, #1
 8002992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800299c:	2304      	movs	r3, #4
 800299e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029a6:	4619      	mov	r1, r3
 80029a8:	480d      	ldr	r0, [pc, #52]	@ (80029e0 <HAL_I2C_MspInit+0x14c>)
 80029aa:	f003 f995 	bl	8005cd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 80029b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_I2C_MspInit+0x140>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
}
 80029c6:	bf00      	nop
 80029c8:	37b0      	adds	r7, #176	@ 0xb0
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40005400 	.word	0x40005400
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40005c00 	.word	0x40005c00
 80029e0:	40021c00 	.word	0x40021c00

080029e4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	@ 0x38
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2234      	movs	r2, #52	@ 0x34
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00f fa9f 	bl	8011f34 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80029f6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 80029f8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae4 <MX_LTDC_Init+0x100>)
 80029fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029fc:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002a02:	4b37      	ldr	r3, [pc, #220]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002a08:	4b35      	ldr	r3, [pc, #212]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a0e:	4b34      	ldr	r3, [pc, #208]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002a14:	4b32      	ldr	r3, [pc, #200]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a16:	2228      	movs	r2, #40	@ 0x28
 8002a18:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002a1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a1c:	2209      	movs	r2, #9
 8002a1e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002a20:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a22:	2235      	movs	r2, #53	@ 0x35
 8002a24:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002a26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a28:	220b      	movs	r2, #11
 8002a2a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a2e:	f240 2215 	movw	r2, #533	@ 0x215
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002a34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a36:	f240 121b 	movw	r2, #283	@ 0x11b
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002a3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a3e:	f240 2235 	movw	r2, #565	@ 0x235
 8002a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002a44:	4b26      	ldr	r3, [pc, #152]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a46:	f240 121d 	movw	r2, #285	@ 0x11d
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002a4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002a54:	4b22      	ldr	r3, [pc, #136]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002a64:	481e      	ldr	r0, [pc, #120]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002a66:	f003 fc48 	bl	80062fa <HAL_LTDC_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002a70:	f000 fa18 	bl	8002ea4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002a78:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a7c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002a82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a86:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002a8c:	23ff      	movs	r3, #255	@ 0xff
 8002a8e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a98:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002a9e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002aa4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002aaa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002aae:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <MX_LTDC_Init+0xfc>)
 8002aca:	f003 fd75 	bl	80065b8 <HAL_LTDC_ConfigLayer>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002ad4:	f000 f9e6 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	3738      	adds	r7, #56	@ 0x38
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200009e8 	.word	0x200009e8
 8002ae4:	40016800 	.word	0x40016800

08002ae8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	@ 0x38
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a55      	ldr	r2, [pc, #340]	@ (8002c5c <HAL_LTDC_MspInit+0x174>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 80a3 	bne.w	8002c52 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b0c:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	4a53      	ldr	r2, [pc, #332]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b16:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b18:	4b51      	ldr	r3, [pc, #324]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b24:	4b4e      	ldr	r3, [pc, #312]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4a4d      	ldr	r2, [pc, #308]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b30:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b3c:	4b48      	ldr	r3, [pc, #288]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4a47      	ldr	r2, [pc, #284]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b48:	4b45      	ldr	r3, [pc, #276]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b54:	4b42      	ldr	r3, [pc, #264]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	4a41      	ldr	r2, [pc, #260]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b60:	4b3f      	ldr	r3, [pc, #252]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4a3b      	ldr	r2, [pc, #236]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b84:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4a35      	ldr	r2, [pc, #212]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b90:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <HAL_LTDC_MspInit+0x178>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bac:	230e      	movs	r3, #14
 8002bae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	482b      	ldr	r0, [pc, #172]	@ (8002c64 <HAL_LTDC_MspInit+0x17c>)
 8002bb8:	f003 f88e 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002bbc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bce:	230e      	movs	r3, #14
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4823      	ldr	r0, [pc, #140]	@ (8002c68 <HAL_LTDC_MspInit+0x180>)
 8002bda:	f003 f87d 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002bde:	23f7      	movs	r3, #247	@ 0xf7
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bee:	230e      	movs	r3, #14
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481c      	ldr	r0, [pc, #112]	@ (8002c6c <HAL_LTDC_MspInit+0x184>)
 8002bfa:	f003 f86d 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c10:	2309      	movs	r3, #9
 8002c12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4815      	ldr	r0, [pc, #84]	@ (8002c70 <HAL_LTDC_MspInit+0x188>)
 8002c1c:	f003 f85c 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002c20:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c32:	230e      	movs	r3, #14
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <HAL_LTDC_MspInit+0x18c>)
 8002c3e:	f003 f84b 	bl	8005cd8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2105      	movs	r1, #5
 8002c46:	2058      	movs	r0, #88	@ 0x58
 8002c48:	f002 f84a 	bl	8004ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c4c:	2058      	movs	r0, #88	@ 0x58
 8002c4e:	f002 f863 	bl	8004d18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3738      	adds	r7, #56	@ 0x38
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40016800 	.word	0x40016800
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40022400 	.word	0x40022400
 8002c6c:	40022800 	.word	0x40022800
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40022000 	.word	0x40022000

08002c78 <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002c80:	1d39      	adds	r1, r7, #4
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	2201      	movs	r2, #1
 8002c88:	4803      	ldr	r0, [pc, #12]	@ (8002c98 <__io_putchar+0x20>)
 8002c8a:	f008 f9fd 	bl	800b088 <HAL_UART_Transmit>
    return ch;
 8002c8e:	687b      	ldr	r3, [r7, #4]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000f58 	.word	0x20000f58

08002c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca0:	f001 fc7d 	bl	800459e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca4:	f000 f848 	bl	8002d38 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ca8:	f000 f8b8 	bl	8002e1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cac:	f7fe fe36 	bl	800191c <MX_GPIO_Init>
  MX_ADC3_Init();
 8002cb0:	f7fe f9d6 	bl	8001060 <MX_ADC3_Init>
  MX_CRC_Init();
 8002cb4:	f7fe fa80 	bl	80011b8 <MX_CRC_Init>
  MX_DCMI_Init();
 8002cb8:	f7fe fac0 	bl	800123c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8002cbc:	f7fe fbb0 	bl	8001420 <MX_DMA2D_Init>
  MX_ETH_Init();
 8002cc0:	f7fe fc06 	bl	80014d0 <MX_ETH_Init>
  MX_FMC_Init();
 8002cc4:	f7fe fcea 	bl	800169c <MX_FMC_Init>
  MX_I2C1_Init();
 8002cc8:	f7ff fd64 	bl	8002794 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002ccc:	f7ff fda2 	bl	8002814 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002cd0:	f7ff fe88 	bl	80029e4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8002cd4:	f000 f8ec 	bl	8002eb0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002cd8:	f000 f9a6 	bl	8003028 <MX_RTC_Init>
  MX_SAI2_Init();
 8002cdc:	f000 fa76 	bl	80031cc <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002ce0:	f000 fb86 	bl	80033f0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8002ce4:	f000 fc08 	bl	80034f8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002ce8:	f000 fc9a 	bl	8003620 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002cec:	f000 fef6 	bl	8003adc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002cf0:	f000 ffa0 	bl	8003c34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cf4:	f001 f814 	bl	8003d20 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002cf8:	f001 f88a 	bl	8003e10 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002cfc:	f001 f900 	bl	8003f00 <MX_TIM8_Init>
  MX_TIM12_Init();
 8002d00:	f001 f952 	bl	8003fa8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002d04:	f001 faf2 	bl	80042ec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002d08:	f001 fb20 	bl	800434c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002d0c:	f00a fa9a 	bl	800d244 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &rx, 1);
 8002d10:	2201      	movs	r2, #1
 8002d12:	4906      	ldr	r1, [pc, #24]	@ (8002d2c <main+0x90>)
 8002d14:	4806      	ldr	r0, [pc, #24]	@ (8002d30 <main+0x94>)
 8002d16:	f008 fa40 	bl	800b19a <HAL_UART_Receive_IT>
//  const char *msg = "STM32 OK\r\n";
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  printf("stm32 started.\r\n");
 8002d1a:	4806      	ldr	r0, [pc, #24]	@ (8002d34 <main+0x98>)
 8002d1c:	f00e fff4 	bl	8011d08 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002d20:	f7fe fdc0 	bl	80018a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d24:	f00a fd63 	bl	800d7ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <main+0x8c>
 8002d2c:	20000a90 	.word	0x20000a90
 8002d30:	20000fe0 	.word	0x20000fe0
 8002d34:	08014c48 	.word	0x08014c48

08002d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b094      	sub	sp, #80	@ 0x50
 8002d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3e:	f107 0320 	add.w	r3, r7, #32
 8002d42:	2230      	movs	r2, #48	@ 0x30
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f00f f8f4 	bl	8011f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d5c:	f003 fde0 	bl	8006920 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b2c      	ldr	r3, [pc, #176]	@ (8002e14 <SystemClock_Config+0xdc>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	4a2b      	ldr	r2, [pc, #172]	@ (8002e14 <SystemClock_Config+0xdc>)
 8002d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6c:	4b29      	ldr	r3, [pc, #164]	@ (8002e14 <SystemClock_Config+0xdc>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d78:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <SystemClock_Config+0xe0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	@ (8002e18 <SystemClock_Config+0xe0>)
 8002d7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <SystemClock_Config+0xe0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d90:	2309      	movs	r3, #9
 8002d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002da2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002da8:	2319      	movs	r3, #25
 8002daa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002dac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002db0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002db2:	2302      	movs	r3, #2
 8002db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002db6:	2309      	movs	r3, #9
 8002db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dba:	f107 0320 	add.w	r3, r7, #32
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fed0 	bl	8006b64 <HAL_RCC_OscConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002dca:	f000 f86b 	bl	8002ea4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002dce:	f003 fdb7 	bl	8006940 <HAL_PWREx_EnableOverDrive>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002dd8:	f000 f864 	bl	8002ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ddc:	230f      	movs	r3, #15
 8002dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de0:	2302      	movs	r3, #2
 8002de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002de8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002df2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2106      	movs	r1, #6
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f004 f956 	bl	80070ac <HAL_RCC_ClockConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002e06:	f000 f84d 	bl	8002ea4 <Error_Handler>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3750      	adds	r7, #80	@ 0x50
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000

08002e1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0a2      	sub	sp, #136	@ 0x88
 8002e20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2284      	movs	r2, #132	@ 0x84
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f00f f883 	bl	8011f34 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <PeriphCommonClock_Config+0x60>)
 8002e30:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002e32:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002e36:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002e38:	2305      	movs	r3, #5
 8002e3a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002e40:	2303      	movs	r3, #3
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002e52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 fb3a 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002e6e:	f000 f819 	bl	8002ea4 <Error_Handler>
  }
}
 8002e72:	bf00      	nop
 8002e74:	3788      	adds	r7, #136	@ 0x88
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	00b00008 	.word	0x00b00008

08002e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002e92:	f001 fb91 	bl	80045b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40001000 	.word	0x40001000

08002ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <Error_Handler+0x8>

08002eb0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002eb6:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <MX_QUADSPI_Init+0x54>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002eba:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ec8:	2210      	movs	r2, #16
 8002eca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ece:	2218      	movs	r2, #24
 8002ed0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ed4:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002ed8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002eec:	4804      	ldr	r0, [pc, #16]	@ (8002f00 <MX_QUADSPI_Init+0x50>)
 8002eee:	f003 fd77 	bl	80069e0 <HAL_QSPI_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002ef8:	f7ff ffd4 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000a94 	.word	0x20000a94
 8002f04:	a0001000 	.word	0xa0001000

08002f08 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	@ 0x30
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a3b      	ldr	r2, [pc, #236]	@ (8003014 <HAL_QSPI_MspInit+0x10c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d170      	bne.n	800300c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f36:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f42:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a34      	ldr	r2, [pc, #208]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b32      	ldr	r3, [pc, #200]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f72:	4b29      	ldr	r3, [pc, #164]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a28      	ldr	r2, [pc, #160]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_QSPI_MspInit+0x110>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f96:	2303      	movs	r3, #3
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f9a:	2309      	movs	r3, #9
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	481d      	ldr	r0, [pc, #116]	@ (800301c <HAL_QSPI_MspInit+0x114>)
 8002fa6:	f002 fe97 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002faa:	2340      	movs	r3, #64	@ 0x40
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002fba:	230a      	movs	r3, #10
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4816      	ldr	r0, [pc, #88]	@ (8003020 <HAL_QSPI_MspInit+0x118>)
 8002fc6:	f002 fe87 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fda:	2309      	movs	r3, #9
 8002fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480e      	ldr	r0, [pc, #56]	@ (8003020 <HAL_QSPI_MspInit+0x118>)
 8002fe6:	f002 fe77 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002fea:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ffc:	2309      	movs	r3, #9
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	4619      	mov	r1, r3
 8003006:	4807      	ldr	r0, [pc, #28]	@ (8003024 <HAL_QSPI_MspInit+0x11c>)
 8003008:	f002 fe66 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800300c:	bf00      	nop
 800300e:	3730      	adds	r7, #48	@ 0x30
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	a0001000 	.word	0xa0001000
 8003018:	40023800 	.word	0x40023800
 800301c:	40021000 	.word	0x40021000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020c00 	.word	0x40020c00

08003028 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b090      	sub	sp, #64	@ 0x40
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800302e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800303e:	2300      	movs	r3, #0
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003042:	463b      	mov	r3, r7
 8003044:	2228      	movs	r2, #40	@ 0x28
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f00e ff73 	bl	8011f34 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800304e:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <MX_RTC_Init+0x140>)
 8003050:	4a46      	ldr	r2, [pc, #280]	@ (800316c <MX_RTC_Init+0x144>)
 8003052:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003054:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <MX_RTC_Init+0x140>)
 8003056:	2200      	movs	r2, #0
 8003058:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <MX_RTC_Init+0x140>)
 800305c:	227f      	movs	r2, #127	@ 0x7f
 800305e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003060:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <MX_RTC_Init+0x140>)
 8003062:	22ff      	movs	r2, #255	@ 0xff
 8003064:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003066:	4b40      	ldr	r3, [pc, #256]	@ (8003168 <MX_RTC_Init+0x140>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800306c:	4b3e      	ldr	r3, [pc, #248]	@ (8003168 <MX_RTC_Init+0x140>)
 800306e:	2200      	movs	r2, #0
 8003070:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003072:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <MX_RTC_Init+0x140>)
 8003074:	2200      	movs	r2, #0
 8003076:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003078:	483b      	ldr	r0, [pc, #236]	@ (8003168 <MX_RTC_Init+0x140>)
 800307a:	f004 ff5f 	bl	8007f3c <HAL_RTC_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003084:	f7ff ff0e 	bl	8002ea4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800309a:	2300      	movs	r3, #0
 800309c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030a6:	2201      	movs	r2, #1
 80030a8:	4619      	mov	r1, r3
 80030aa:	482f      	ldr	r0, [pc, #188]	@ (8003168 <MX_RTC_Init+0x140>)
 80030ac:	f004 ffc8 	bl	8008040 <HAL_RTC_SetTime>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80030b6:	f7ff fef5 	bl	8002ea4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030d6:	2201      	movs	r2, #1
 80030d8:	4619      	mov	r1, r3
 80030da:	4823      	ldr	r0, [pc, #140]	@ (8003168 <MX_RTC_Init+0x140>)
 80030dc:	f005 f84a 	bl	8008174 <HAL_RTC_SetDate>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80030e6:	f7ff fedd 	bl	8002ea4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800311a:	463b      	mov	r3, r7
 800311c:	2201      	movs	r2, #1
 800311e:	4619      	mov	r1, r3
 8003120:	4811      	ldr	r0, [pc, #68]	@ (8003168 <MX_RTC_Init+0x140>)
 8003122:	f005 f8ab 	bl	800827c <HAL_RTC_SetAlarm>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800312c:	f7ff feba 	bl	8002ea4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8003130:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003136:	463b      	mov	r3, r7
 8003138:	2201      	movs	r2, #1
 800313a:	4619      	mov	r1, r3
 800313c:	480a      	ldr	r0, [pc, #40]	@ (8003168 <MX_RTC_Init+0x140>)
 800313e:	f005 f89d 	bl	800827c <HAL_RTC_SetAlarm>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8003148:	f7ff feac 	bl	8002ea4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800314c:	2202      	movs	r2, #2
 800314e:	2100      	movs	r1, #0
 8003150:	4805      	ldr	r0, [pc, #20]	@ (8003168 <MX_RTC_Init+0x140>)
 8003152:	f005 fa5d 	bl	8008610 <HAL_RTCEx_SetTimeStamp>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 800315c:	f7ff fea2 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003160:	bf00      	nop
 8003162:	3740      	adds	r7, #64	@ 0x40
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000ae0 	.word	0x20000ae0
 800316c:	40002800 	.word	0x40002800

08003170 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b0a4      	sub	sp, #144	@ 0x90
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	2284      	movs	r2, #132	@ 0x84
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f00e fed7 	bl	8011f34 <memset>
  if(rtcHandle->Instance==RTC)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a0e      	ldr	r2, [pc, #56]	@ (80031c4 <HAL_RTC_MspInit+0x54>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d114      	bne.n	80031ba <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003190:	2320      	movs	r3, #32
 8003192:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003198:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 f99c 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80031aa:	f7ff fe7b 	bl	8002ea4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RTC_MspInit+0x58>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b2:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <HAL_RTC_MspInit+0x58>)
 80031b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b8:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80031ba:	bf00      	nop
 80031bc:	3790      	adds	r7, #144	@ 0x90
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40002800 	.word	0x40002800
 80031c8:	40023800 	.word	0x40023800

080031cc <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80031d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031d2:	4a4e      	ldr	r2, [pc, #312]	@ (800330c <MX_SAI2_Init+0x140>)
 80031d4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80031dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80031e2:	4b49      	ldr	r3, [pc, #292]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031e4:	2240      	movs	r2, #64	@ 0x40
 80031e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80031e8:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80031ee:	4b46      	ldr	r3, [pc, #280]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80031f4:	4b44      	ldr	r3, [pc, #272]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <MX_SAI2_Init+0x13c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003200:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003206:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800320c:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <MX_SAI2_Init+0x13c>)
 800320e:	4a40      	ldr	r2, [pc, #256]	@ (8003310 <MX_SAI2_Init+0x144>)
 8003210:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003218:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <MX_SAI2_Init+0x13c>)
 800321a:	2200      	movs	r2, #0
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800321e:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003220:	2200      	movs	r2, #0
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003224:	4b38      	ldr	r3, [pc, #224]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003226:	2200      	movs	r2, #0
 8003228:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800322a:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <MX_SAI2_Init+0x13c>)
 800322c:	2208      	movs	r2, #8
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003230:	4b35      	ldr	r3, [pc, #212]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003232:	2201      	movs	r2, #1
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003236:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003238:	2200      	movs	r2, #0
 800323a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <MX_SAI2_Init+0x13c>)
 800323e:	2200      	movs	r2, #0
 8003240:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003242:	4b31      	ldr	r3, [pc, #196]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003244:	2200      	movs	r2, #0
 8003246:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8003248:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <MX_SAI2_Init+0x13c>)
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800324e:	4b2e      	ldr	r3, [pc, #184]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003250:	2200      	movs	r2, #0
 8003252:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8003254:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003256:	2201      	movs	r2, #1
 8003258:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800325a:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <MX_SAI2_Init+0x13c>)
 800325c:	2200      	movs	r2, #0
 800325e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003260:	4829      	ldr	r0, [pc, #164]	@ (8003308 <MX_SAI2_Init+0x13c>)
 8003262:	f005 fa3d 	bl	80086e0 <HAL_SAI_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800326c:	f7ff fe1a 	bl	8002ea4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <MX_SAI2_Init+0x148>)
 8003272:	4a29      	ldr	r2, [pc, #164]	@ (8003318 <MX_SAI2_Init+0x14c>)
 8003274:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003276:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <MX_SAI2_Init+0x148>)
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <MX_SAI2_Init+0x148>)
 800327e:	2203      	movs	r2, #3
 8003280:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8003282:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <MX_SAI2_Init+0x148>)
 8003284:	2240      	movs	r2, #64	@ 0x40
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003288:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <MX_SAI2_Init+0x148>)
 800328a:	2200      	movs	r2, #0
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800328e:	4b21      	ldr	r3, [pc, #132]	@ (8003314 <MX_SAI2_Init+0x148>)
 8003290:	2200      	movs	r2, #0
 8003292:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <MX_SAI2_Init+0x148>)
 8003296:	2201      	movs	r2, #1
 8003298:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800329a:	4b1e      	ldr	r3, [pc, #120]	@ (8003314 <MX_SAI2_Init+0x148>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80032a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80032ac:	4b19      	ldr	r3, [pc, #100]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80032b2:	4b18      	ldr	r3, [pc, #96]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80032b8:	4b16      	ldr	r3, [pc, #88]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032c0:	2208      	movs	r2, #8
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80032c4:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80032ca:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80032d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032d8:	2200      	movs	r2, #0
 80032da:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80032dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032de:	2200      	movs	r2, #0
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80032e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80032f4:	4807      	ldr	r0, [pc, #28]	@ (8003314 <MX_SAI2_Init+0x148>)
 80032f6:	f005 f9f3 	bl	80086e0 <HAL_SAI_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8003300:	f7ff fdd0 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000b00 	.word	0x20000b00
 800330c:	40015c04 	.word	0x40015c04
 8003310:	0002ee00 	.word	0x0002ee00
 8003314:	20000b84 	.word	0x20000b84
 8003318:	40015c24 	.word	0x40015c24

0800331c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2b      	ldr	r2, [pc, #172]	@ (80033d8 <HAL_SAI_MspInit+0xbc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d124      	bne.n	8003378 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800332e:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_SAI_MspInit+0xc0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003336:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <HAL_SAI_MspInit+0xc4>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <HAL_SAI_MspInit+0xc4>)
 800333c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003340:	6453      	str	r3, [r2, #68]	@ 0x44
 8003342:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <HAL_SAI_MspInit+0xc4>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800334e:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <HAL_SAI_MspInit+0xc0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <HAL_SAI_MspInit+0xc0>)
 8003356:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003358:	23f0      	movs	r3, #240	@ 0xf0
 800335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003368:	230a      	movs	r3, #10
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4619      	mov	r1, r3
 8003372:	481c      	ldr	r0, [pc, #112]	@ (80033e4 <HAL_SAI_MspInit+0xc8>)
 8003374:	f002 fcb0 	bl	8005cd8 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1a      	ldr	r2, [pc, #104]	@ (80033e8 <HAL_SAI_MspInit+0xcc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d125      	bne.n	80033ce <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003382:	4b16      	ldr	r3, [pc, #88]	@ (80033dc <HAL_SAI_MspInit+0xc0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_SAI_MspInit+0xc4>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <HAL_SAI_MspInit+0xc4>)
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003394:	6453      	str	r3, [r2, #68]	@ 0x44
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_SAI_MspInit+0xc4>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <HAL_SAI_MspInit+0xc0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4a0c      	ldr	r2, [pc, #48]	@ (80033dc <HAL_SAI_MspInit+0xc0>)
 80033aa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80033ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80033be:	230a      	movs	r3, #10
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	4808      	ldr	r0, [pc, #32]	@ (80033ec <HAL_SAI_MspInit+0xd0>)
 80033ca:	f002 fc85 	bl	8005cd8 <HAL_GPIO_Init>

    }
}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	@ 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40015c04 	.word	0x40015c04
 80033dc:	20000c08 	.word	0x20000c08
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40015c24 	.word	0x40015c24
 80033ec:	40021800 	.word	0x40021800

080033f0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 80033f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003430 <MX_SDMMC1_SD_Init+0x40>)
 80033f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003400:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 8003408:	2200      	movs	r2, #0
 800340a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800340c:	4b07      	ldr	r3, [pc, #28]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 800340e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003412:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 8003416:	2200      	movs	r2, #0
 8003418:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800341a:	4b04      	ldr	r3, [pc, #16]	@ (800342c <MX_SDMMC1_SD_Init+0x3c>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000c0c 	.word	0x20000c0c
 8003430:	40012c00 	.word	0x40012c00

08003434 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a25      	ldr	r2, [pc, #148]	@ (80034e8 <HAL_SD_MspInit+0xb4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d144      	bne.n	80034e0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003456:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 800345c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6313      	str	r3, [r2, #48]	@ 0x30
 800347a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	4a18      	ldr	r2, [pc, #96]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	4b16      	ldr	r3, [pc, #88]	@ (80034ec <HAL_SD_MspInit+0xb8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800349e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80034a2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80034b0:	230c      	movs	r3, #12
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4619      	mov	r1, r3
 80034ba:	480d      	ldr	r0, [pc, #52]	@ (80034f0 <HAL_SD_MspInit+0xbc>)
 80034bc:	f002 fc0c 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80034c0:	2304      	movs	r3, #4
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80034d0:	230c      	movs	r3, #12
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	4806      	ldr	r0, [pc, #24]	@ (80034f4 <HAL_SD_MspInit+0xc0>)
 80034dc:	f002 fbfc 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80034e0:	bf00      	nop
 80034e2:	3728      	adds	r7, #40	@ 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020c00 	.word	0x40020c00

080034f8 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80034fc:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 80034fe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003502:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003506:	2200      	movs	r2, #0
 8003508:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8003510:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8003516:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800351c:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 800351e:	2200      	movs	r2, #0
 8003520:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8003522:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8003528:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800352e:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8003534:	4b07      	ldr	r3, [pc, #28]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 800353c:	2200      	movs	r2, #0
 800353e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8003540:	4804      	ldr	r0, [pc, #16]	@ (8003554 <MX_SPDIFRX_Init+0x5c>)
 8003542:	f006 fb51 	bl	8009be8 <HAL_SPDIFRX_Init>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800354c:	f7ff fcaa 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000c90 	.word	0x20000c90

08003558 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0aa      	sub	sp, #168	@ 0xa8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	2284      	movs	r2, #132	@ 0x84
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f00e fcdb 	bl	8011f34 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003586:	d143      	bne.n	8003610 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800358c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800358e:	2364      	movs	r3, #100	@ 0x64
 8003590:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003592:	2302      	movs	r3, #2
 8003594:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003596:	2302      	movs	r3, #2
 8003598:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800359a:	2302      	movs	r3, #2
 800359c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035a2:	f107 0310 	add.w	r3, r7, #16
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 ff98 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80035b2:	f7ff fc77 	bl	8002ea4 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80035b6:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <HAL_SPDIFRX_MspInit+0xc0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_SPDIFRX_MspInit+0xc0>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_SPDIFRX_MspInit+0xc0>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ce:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <HAL_SPDIFRX_MspInit+0xc0>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a11      	ldr	r2, [pc, #68]	@ (8003618 <HAL_SPDIFRX_MspInit+0xc0>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_SPDIFRX_MspInit+0xc0>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80035fe:	2308      	movs	r3, #8
 8003600:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003604:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003608:	4619      	mov	r1, r3
 800360a:	4804      	ldr	r0, [pc, #16]	@ (800361c <HAL_SPDIFRX_MspInit+0xc4>)
 800360c:	f002 fb64 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8003610:	bf00      	nop
 8003612:	37a8      	adds	r7, #168	@ 0xa8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	40020c00 	.word	0x40020c00

08003620 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003626:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <MX_SPI2_Init+0x78>)
 8003628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800362a:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <MX_SPI2_Init+0x74>)
 800362c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003632:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003638:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <MX_SPI2_Init+0x74>)
 800363a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800363e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003646:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003648:	2200      	movs	r2, #0
 800364a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <MX_SPI2_Init+0x74>)
 800364e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003652:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003654:	4b0f      	ldr	r3, [pc, #60]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800365a:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <MX_SPI2_Init+0x74>)
 800365c:	2200      	movs	r2, #0
 800365e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003666:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003668:	2200      	movs	r2, #0
 800366a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800366c:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <MX_SPI2_Init+0x74>)
 800366e:	2207      	movs	r2, #7
 8003670:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003672:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <MX_SPI2_Init+0x74>)
 800367a:	2208      	movs	r2, #8
 800367c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800367e:	4805      	ldr	r0, [pc, #20]	@ (8003694 <MX_SPI2_Init+0x74>)
 8003680:	f006 fb0e 	bl	8009ca0 <HAL_SPI_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800368a:	f7ff fc0b 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000cdc 	.word	0x20000cdc
 8003698:	40003800 	.word	0x40003800

0800369c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <HAL_SPI_MspInit+0xb4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d144      	bne.n	8003748 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036be:	4b25      	ldr	r3, [pc, #148]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	4a24      	ldr	r2, [pc, #144]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ca:	4b22      	ldr	r3, [pc, #136]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80036d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ee:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	4a18      	ldr	r2, [pc, #96]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036fa:	4b16      	ldr	r3, [pc, #88]	@ (8003754 <HAL_SPI_MspInit+0xb8>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003706:	2302      	movs	r3, #2
 8003708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2302      	movs	r3, #2
 800370c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003716:	2305      	movs	r3, #5
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800371a:	f107 0314 	add.w	r3, r7, #20
 800371e:	4619      	mov	r1, r3
 8003720:	480d      	ldr	r0, [pc, #52]	@ (8003758 <HAL_SPI_MspInit+0xbc>)
 8003722:	f002 fad9 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003726:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800372a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2302      	movs	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003738:	2305      	movs	r3, #5
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4619      	mov	r1, r3
 8003742:	4806      	ldr	r0, [pc, #24]	@ (800375c <HAL_SPI_MspInit+0xc0>)
 8003744:	f002 fac8 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40003800 	.word	0x40003800
 8003754:	40023800 	.word	0x40023800
 8003758:	40022000 	.word	0x40022000
 800375c:	40020400 	.word	0x40020400

08003760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_MspInit+0x4c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a10      	ldr	r2, [pc, #64]	@ (80037ac <HAL_MspInit+0x4c>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <HAL_MspInit+0x4c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <HAL_MspInit+0x4c>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4a0a      	ldr	r2, [pc, #40]	@ (80037ac <HAL_MspInit+0x4c>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003788:	6453      	str	r3, [r2, #68]	@ 0x44
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <HAL_MspInit+0x4c>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	210f      	movs	r1, #15
 800379a:	f06f 0001 	mvn.w	r0, #1
 800379e:	f001 fa9f 	bl	8004ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	@ 0x38
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037c0:	4b33      	ldr	r3, [pc, #204]	@ (8003890 <HAL_InitTick+0xe0>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	4a32      	ldr	r2, [pc, #200]	@ (8003890 <HAL_InitTick+0xe0>)
 80037c6:	f043 0310 	orr.w	r3, r3, #16
 80037ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80037cc:	4b30      	ldr	r3, [pc, #192]	@ (8003890 <HAL_InitTick+0xe0>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037d8:	f107 0210 	add.w	r2, r7, #16
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fe48 	bl	8007478 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037f2:	f003 fe19 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 80037f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80037f8:	e004      	b.n	8003804 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037fa:	f003 fe15 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 80037fe:	4603      	mov	r3, r0
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003806:	4a23      	ldr	r2, [pc, #140]	@ (8003894 <HAL_InitTick+0xe4>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	0c9b      	lsrs	r3, r3, #18
 800380e:	3b01      	subs	r3, #1
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003812:	4b21      	ldr	r3, [pc, #132]	@ (8003898 <HAL_InitTick+0xe8>)
 8003814:	4a21      	ldr	r2, [pc, #132]	@ (800389c <HAL_InitTick+0xec>)
 8003816:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <HAL_InitTick+0xe8>)
 800381a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800381e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003820:	4a1d      	ldr	r2, [pc, #116]	@ (8003898 <HAL_InitTick+0xe8>)
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003826:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <HAL_InitTick+0xe8>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <HAL_InitTick+0xe8>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003832:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_InitTick+0xe8>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003838:	4817      	ldr	r0, [pc, #92]	@ (8003898 <HAL_InitTick+0xe8>)
 800383a:	f006 fadc 	bl	8009df6 <HAL_TIM_Base_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11b      	bne.n	8003884 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800384c:	4812      	ldr	r0, [pc, #72]	@ (8003898 <HAL_InitTick+0xe8>)
 800384e:	f006 fb29 	bl	8009ea4 <HAL_TIM_Base_Start_IT>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003860:	2036      	movs	r0, #54	@ 0x36
 8003862:	f001 fa59 	bl	8004d18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d808      	bhi.n	800387e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800386c:	2200      	movs	r2, #0
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	2036      	movs	r0, #54	@ 0x36
 8003872:	f001 fa35 	bl	8004ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <HAL_InitTick+0xf0>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e002      	b.n	8003884 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003888:	4618      	mov	r0, r3
 800388a:	3738      	adds	r7, #56	@ 0x38
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	431bde83 	.word	0x431bde83
 8003898:	20000d40 	.word	0x20000d40
 800389c:	40001000 	.word	0x40001000
 80038a0:	20000008 	.word	0x20000008

080038a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038a8:	bf00      	nop
 80038aa:	e7fd      	b.n	80038a8 <NMI_Handler+0x4>

080038ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b0:	bf00      	nop
 80038b2:	e7fd      	b.n	80038b0 <HardFault_Handler+0x4>

080038b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b8:	bf00      	nop
 80038ba:	e7fd      	b.n	80038b8 <MemManage_Handler+0x4>

080038bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <UsageFault_Handler+0x4>

080038cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038e0:	4802      	ldr	r0, [pc, #8]	@ (80038ec <TIM6_DAC_IRQHandler+0x10>)
 80038e2:	f006 fbae 	bl	800a042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000d40 	.word	0x20000d40

080038f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80038f4:	4802      	ldr	r0, [pc, #8]	@ (8003900 <USART6_IRQHandler+0x10>)
 80038f6:	f007 fc95 	bl	800b224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000fe0 	.word	0x20000fe0

08003904 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003908:	4802      	ldr	r0, [pc, #8]	@ (8003914 <LTDC_IRQHandler+0x10>)
 800390a:	f002 fd93 	bl	8006434 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200009e8 	.word	0x200009e8

08003918 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800391c:	4802      	ldr	r0, [pc, #8]	@ (8003928 <DMA2D_IRQHandler+0x10>)
 800391e:	f001 fceb 	bl	80052f8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200003f8 	.word	0x200003f8

0800392c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return 1;
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_kill>:

int _kill(int pid, int sig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003946:	f00e fc21 	bl	801218c <__errno>
 800394a:	4603      	mov	r3, r0
 800394c:	2216      	movs	r2, #22
 800394e:	601a      	str	r2, [r3, #0]
  return -1;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_exit>:

void _exit (int status)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ffe7 	bl	800393c <_kill>
  while (1) {}    /* Make sure we hang here */
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <_exit+0x12>

08003972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e00a      	b.n	800399a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003984:	f3af 8000 	nop.w
 8003988:	4601      	mov	r1, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	60ba      	str	r2, [r7, #8]
 8003990:	b2ca      	uxtb	r2, r1
 8003992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	dbf0      	blt.n	8003984 <_read+0x12>
  }

  return len;
 80039a2:	687b      	ldr	r3, [r7, #4]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e009      	b.n	80039d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	60ba      	str	r2, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f956 	bl	8002c78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	dbf1      	blt.n	80039be <_write+0x12>
  }
  return len;
 80039da:	687b      	ldr	r3, [r7, #4]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_close>:

int _close(int file)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_isatty>:

int _isatty(int file)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a24:	2301      	movs	r3, #1
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a54:	4a14      	ldr	r2, [pc, #80]	@ (8003aa8 <_sbrk+0x5c>)
 8003a56:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <_sbrk+0x60>)
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <_sbrk+0x64>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a68:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <_sbrk+0x64>)
 8003a6a:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <_sbrk+0x68>)
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d207      	bcs.n	8003a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a7c:	f00e fb86 	bl	801218c <__errno>
 8003a80:	4603      	mov	r3, r0
 8003a82:	220c      	movs	r2, #12
 8003a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	e009      	b.n	8003aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a8c:	4b08      	ldr	r3, [pc, #32]	@ (8003ab0 <_sbrk+0x64>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a92:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <_sbrk+0x64>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	4a05      	ldr	r2, [pc, #20]	@ (8003ab0 <_sbrk+0x64>)
 8003a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20050000 	.word	0x20050000
 8003aac:	00000400 	.word	0x00000400
 8003ab0:	20000d8c 	.word	0x20000d8c
 8003ab4:	20004f20 	.word	0x20004f20

08003ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <SystemInit+0x20>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <SystemInit+0x20>)
 8003ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b09a      	sub	sp, #104	@ 0x68
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ae2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003afc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
 8003b0c:	615a      	str	r2, [r3, #20]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	222c      	movs	r2, #44	@ 0x2c
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00e fa0c 	bl	8011f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b1c:	4b43      	ldr	r3, [pc, #268]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b1e:	4a44      	ldr	r2, [pc, #272]	@ (8003c30 <MX_TIM1_Init+0x154>)
 8003b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003b22:	4b42      	ldr	r3, [pc, #264]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b28:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b36:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b42:	4b3a      	ldr	r3, [pc, #232]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b48:	4838      	ldr	r0, [pc, #224]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b4a:	f006 f954 	bl	8009df6 <HAL_TIM_Base_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003b54:	f7ff f9a6 	bl	8002ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003b62:	4619      	mov	r1, r3
 8003b64:	4831      	ldr	r0, [pc, #196]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b66:	f006 fc87 	bl	800a478 <HAL_TIM_ConfigClockSource>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003b70:	f7ff f998 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b74:	482d      	ldr	r0, [pc, #180]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b76:	f006 fa0d 	bl	8009f94 <HAL_TIM_PWM_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003b80:	f7ff f990 	bl	8002ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003b94:	4619      	mov	r1, r3
 8003b96:	4825      	ldr	r0, [pc, #148]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003b98:	f007 f8fe 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003ba2:	f7ff f97f 	bl	8002ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ba6:	2360      	movs	r3, #96	@ 0x60
 8003ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4818      	ldr	r0, [pc, #96]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003bcc:	f006 fb40 	bl	800a250 <HAL_TIM_PWM_ConfigChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003bd6:	f7ff f965 	bl	8002ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4807      	ldr	r0, [pc, #28]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003c10:	f007 f950 	bl	800aeb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8003c1a:	f7ff f943 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c1e:	4803      	ldr	r0, [pc, #12]	@ (8003c2c <MX_TIM1_Init+0x150>)
 8003c20:	f000 fa96 	bl	8004150 <HAL_TIM_MspPostInit>

}
 8003c24:	bf00      	nop
 8003c26:	3768      	adds	r7, #104	@ 0x68
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000d90 	.word	0x20000d90
 8003c30:	40010000 	.word	0x40010000

08003c34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08e      	sub	sp, #56	@ 0x38
 8003c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c54:	463b      	mov	r3, r7
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	611a      	str	r2, [r3, #16]
 8003c62:	615a      	str	r2, [r3, #20]
 8003c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c66:	4b2d      	ldr	r3, [pc, #180]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c74:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003c7a:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c88:	4b24      	ldr	r3, [pc, #144]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c8e:	4823      	ldr	r0, [pc, #140]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003c90:	f006 f8b1 	bl	8009df6 <HAL_TIM_Base_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c9a:	f7ff f903 	bl	8002ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ca4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ca8:	4619      	mov	r1, r3
 8003caa:	481c      	ldr	r0, [pc, #112]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003cac:	f006 fbe4 	bl	800a478 <HAL_TIM_ConfigClockSource>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003cb6:	f7ff f8f5 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003cba:	4818      	ldr	r0, [pc, #96]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003cbc:	f006 f96a 	bl	8009f94 <HAL_TIM_PWM_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003cc6:	f7ff f8ed 	bl	8002ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cd2:	f107 031c 	add.w	r3, r7, #28
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4810      	ldr	r0, [pc, #64]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003cda:	f007 f85d 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003ce4:	f7ff f8de 	bl	8002ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ce8:	2360      	movs	r3, #96	@ 0x60
 8003cea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4807      	ldr	r0, [pc, #28]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003d00:	f006 faa6 	bl	800a250 <HAL_TIM_PWM_ConfigChannel>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003d0a:	f7ff f8cb 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d0e:	4803      	ldr	r0, [pc, #12]	@ (8003d1c <MX_TIM2_Init+0xe8>)
 8003d10:	f000 fa1e 	bl	8004150 <HAL_TIM_MspPostInit>

}
 8003d14:	bf00      	nop
 8003d16:	3738      	adds	r7, #56	@ 0x38
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000ddc 	.word	0x20000ddc

08003d20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	@ 0x38
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d40:	463b      	mov	r3, r7
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	615a      	str	r2, [r3, #20]
 8003d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d52:	4b2d      	ldr	r3, [pc, #180]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d54:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <MX_TIM3_Init+0xec>)
 8003d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003d58:	4b2b      	ldr	r3, [pc, #172]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003d64:	4b28      	ldr	r3, [pc, #160]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d6c:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d72:	4b25      	ldr	r3, [pc, #148]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d78:	4823      	ldr	r0, [pc, #140]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d7a:	f006 f83c 	bl	8009df6 <HAL_TIM_Base_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003d84:	f7ff f88e 	bl	8002ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d92:	4619      	mov	r1, r3
 8003d94:	481c      	ldr	r0, [pc, #112]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003d96:	f006 fb6f 	bl	800a478 <HAL_TIM_ConfigClockSource>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003da0:	f7ff f880 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003da4:	4818      	ldr	r0, [pc, #96]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003da6:	f006 f8f5 	bl	8009f94 <HAL_TIM_PWM_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003db0:	f7ff f878 	bl	8002ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003dbc:	f107 031c 	add.w	r3, r7, #28
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4811      	ldr	r0, [pc, #68]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003dc4:	f006 ffe8 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003dce:	f7ff f869 	bl	8002ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dd2:	2360      	movs	r3, #96	@ 0x60
 8003dd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003de2:	463b      	mov	r3, r7
 8003de4:	2200      	movs	r2, #0
 8003de6:	4619      	mov	r1, r3
 8003de8:	4807      	ldr	r0, [pc, #28]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003dea:	f006 fa31 	bl	800a250 <HAL_TIM_PWM_ConfigChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003df4:	f7ff f856 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003df8:	4803      	ldr	r0, [pc, #12]	@ (8003e08 <MX_TIM3_Init+0xe8>)
 8003dfa:	f000 f9a9 	bl	8004150 <HAL_TIM_MspPostInit>

}
 8003dfe:	bf00      	nop
 8003e00:	3738      	adds	r7, #56	@ 0x38
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000e28 	.word	0x20000e28
 8003e0c:	40000400 	.word	0x40000400

08003e10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	@ 0x38
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e30:	463b      	mov	r3, r7
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	609a      	str	r2, [r3, #8]
 8003e3a:	60da      	str	r2, [r3, #12]
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e44:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <MX_TIM5_Init+0xec>)
 8003e46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003e48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e62:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e68:	4823      	ldr	r0, [pc, #140]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e6a:	f005 ffc4 	bl	8009df6 <HAL_TIM_Base_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003e74:	f7ff f816 	bl	8002ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e82:	4619      	mov	r1, r3
 8003e84:	481c      	ldr	r0, [pc, #112]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e86:	f006 faf7 	bl	800a478 <HAL_TIM_ConfigClockSource>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003e90:	f7ff f808 	bl	8002ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003e94:	4818      	ldr	r0, [pc, #96]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003e96:	f006 f87d 	bl	8009f94 <HAL_TIM_PWM_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003ea0:	f7ff f800 	bl	8002ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4811      	ldr	r0, [pc, #68]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003eb4:	f006 ff70 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003ebe:	f7fe fff1 	bl	8002ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ec2:	2360      	movs	r3, #96	@ 0x60
 8003ec4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	220c      	movs	r2, #12
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4807      	ldr	r0, [pc, #28]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003eda:	f006 f9b9 	bl	800a250 <HAL_TIM_PWM_ConfigChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003ee4:	f7fe ffde 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003ee8:	4803      	ldr	r0, [pc, #12]	@ (8003ef8 <MX_TIM5_Init+0xe8>)
 8003eea:	f000 f931 	bl	8004150 <HAL_TIM_MspPostInit>

}
 8003eee:	bf00      	nop
 8003ef0:	3738      	adds	r7, #56	@ 0x38
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000e74 	.word	0x20000e74
 8003efc:	40000c00 	.word	0x40000c00

08003f00 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003f1e:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f20:	4a20      	ldr	r2, [pc, #128]	@ (8003fa4 <MX_TIM8_Init+0xa4>)
 8003f22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003f24:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f3e:	4b18      	ldr	r3, [pc, #96]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f44:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003f4a:	4815      	ldr	r0, [pc, #84]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f4c:	f005 ff53 	bl	8009df6 <HAL_TIM_Base_Init>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003f56:	f7fe ffa5 	bl	8002ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003f60:	f107 0310 	add.w	r3, r7, #16
 8003f64:	4619      	mov	r1, r3
 8003f66:	480e      	ldr	r0, [pc, #56]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f68:	f006 fa86 	bl	800a478 <HAL_TIM_ConfigClockSource>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003f72:	f7fe ff97 	bl	8002ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4806      	ldr	r0, [pc, #24]	@ (8003fa0 <MX_TIM8_Init+0xa0>)
 8003f88:	f006 ff06 	bl	800ad98 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003f92:	f7fe ff87 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000ec0 	.word	0x20000ec0
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
 8003fbc:	615a      	str	r2, [r3, #20]
 8003fbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8004030 <MX_TIM12_Init+0x88>)
 8003fc4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003fc6:	4b19      	ldr	r3, [pc, #100]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fcc:	4b17      	ldr	r3, [pc, #92]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003fd2:	4b16      	ldr	r3, [pc, #88]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fd8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003fe6:	4811      	ldr	r0, [pc, #68]	@ (800402c <MX_TIM12_Init+0x84>)
 8003fe8:	f005 ffd4 	bl	8009f94 <HAL_TIM_PWM_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003ff2:	f7fe ff57 	bl	8002ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ff6:	2360      	movs	r3, #96	@ 0x60
 8003ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	2200      	movs	r2, #0
 800400a:	4619      	mov	r1, r3
 800400c:	4807      	ldr	r0, [pc, #28]	@ (800402c <MX_TIM12_Init+0x84>)
 800400e:	f006 f91f 	bl	800a250 <HAL_TIM_PWM_ConfigChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004018:	f7fe ff44 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800401c:	4803      	ldr	r0, [pc, #12]	@ (800402c <MX_TIM12_Init+0x84>)
 800401e:	f000 f897 	bl	8004150 <HAL_TIM_MspPostInit>

}
 8004022:	bf00      	nop
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000f0c 	.word	0x20000f0c
 8004030:	40001800 	.word	0x40001800

08004034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	@ 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2e      	ldr	r2, [pc, #184]	@ (80040fc <HAL_TIM_Base_MspInit+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10c      	bne.n	8004060 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004046:	4b2e      	ldr	r3, [pc, #184]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	4a2d      	ldr	r2, [pc, #180]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6453      	str	r3, [r2, #68]	@ 0x44
 8004052:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800405e:	e046      	b.n	80040ee <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004068:	d10c      	bne.n	8004084 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800406a:	4b25      	ldr	r3, [pc, #148]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6413      	str	r3, [r2, #64]	@ 0x40
 8004076:	4b22      	ldr	r3, [pc, #136]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	69bb      	ldr	r3, [r7, #24]
}
 8004082:	e034      	b.n	80040ee <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <HAL_TIM_Base_MspInit+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d10c      	bne.n	80040a8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800408e:	4b1c      	ldr	r3, [pc, #112]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	4a1b      	ldr	r2, [pc, #108]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	6413      	str	r3, [r2, #64]	@ 0x40
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]
}
 80040a6:	e022      	b.n	80040ee <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <HAL_TIM_Base_MspInit+0xd4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10c      	bne.n	80040cc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 80040b8:	f043 0308 	orr.w	r3, r3, #8
 80040bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040be:	4b10      	ldr	r3, [pc, #64]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
}
 80040ca:	e010      	b.n	80040ee <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	@ (800410c <HAL_TIM_Base_MspInit+0xd8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10b      	bne.n	80040ee <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	4a09      	ldr	r2, [pc, #36]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040e2:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <HAL_TIM_Base_MspInit+0xcc>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	bf00      	nop
 80040f0:	3724      	adds	r7, #36	@ 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000
 8004100:	40023800 	.word	0x40023800
 8004104:	40000400 	.word	0x40000400
 8004108:	40000c00 	.word	0x40000c00
 800410c:	40010400 	.word	0x40010400

08004110 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0a      	ldr	r2, [pc, #40]	@ (8004148 <HAL_TIM_PWM_MspInit+0x38>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10b      	bne.n	800413a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004122:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_TIM_PWM_MspInit+0x3c>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <HAL_TIM_PWM_MspInit+0x3c>)
 8004128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800412c:	6413      	str	r3, [r2, #64]	@ 0x40
 800412e:	4b07      	ldr	r3, [pc, #28]	@ (800414c <HAL_TIM_PWM_MspInit+0x3c>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40001800 	.word	0x40001800
 800414c:	40023800 	.word	0x40023800

08004150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	@ 0x30
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 031c 	add.w	r3, r7, #28
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a56      	ldr	r2, [pc, #344]	@ (80042c8 <HAL_TIM_MspPostInit+0x178>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d11d      	bne.n	80041ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004172:	4b56      	ldr	r3, [pc, #344]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	4a55      	ldr	r2, [pc, #340]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6313      	str	r3, [r2, #48]	@ 0x30
 800417e:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800418a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800418e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004198:	2300      	movs	r3, #0
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800419c:	2301      	movs	r3, #1
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80041a0:	f107 031c 	add.w	r3, r7, #28
 80041a4:	4619      	mov	r1, r3
 80041a6:	484a      	ldr	r0, [pc, #296]	@ (80042d0 <HAL_TIM_MspPostInit+0x180>)
 80041a8:	f001 fd96 	bl	8005cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80041ac:	e087      	b.n	80042be <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d11d      	bne.n	80041f4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b8:	4b44      	ldr	r3, [pc, #272]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	4a43      	ldr	r2, [pc, #268]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041c4:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80041d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	2302      	movs	r3, #2
 80041d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041de:	2300      	movs	r3, #0
 80041e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041e2:	2301      	movs	r3, #1
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80041e6:	f107 031c 	add.w	r3, r7, #28
 80041ea:	4619      	mov	r1, r3
 80041ec:	4838      	ldr	r0, [pc, #224]	@ (80042d0 <HAL_TIM_MspPostInit+0x180>)
 80041ee:	f001 fd73 	bl	8005cd8 <HAL_GPIO_Init>
}
 80041f2:	e064      	b.n	80042be <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a36      	ldr	r2, [pc, #216]	@ (80042d4 <HAL_TIM_MspPostInit+0x184>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d11c      	bne.n	8004238 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fe:	4b33      	ldr	r3, [pc, #204]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	6313      	str	r3, [r2, #48]	@ 0x30
 800420a:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004216:	2310      	movs	r3, #16
 8004218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004222:	2300      	movs	r3, #0
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004226:	2302      	movs	r3, #2
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800422a:	f107 031c 	add.w	r3, r7, #28
 800422e:	4619      	mov	r1, r3
 8004230:	4829      	ldr	r0, [pc, #164]	@ (80042d8 <HAL_TIM_MspPostInit+0x188>)
 8004232:	f001 fd51 	bl	8005cd8 <HAL_GPIO_Init>
}
 8004236:	e042      	b.n	80042be <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <HAL_TIM_MspPostInit+0x18c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d11c      	bne.n	800427c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004242:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	4a21      	ldr	r2, [pc, #132]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424c:	6313      	str	r3, [r2, #48]	@ 0x30
 800424e:	4b1f      	ldr	r3, [pc, #124]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425e:	2302      	movs	r3, #2
 8004260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004266:	2300      	movs	r3, #0
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800426a:	2302      	movs	r3, #2
 800426c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800426e:	f107 031c 	add.w	r3, r7, #28
 8004272:	4619      	mov	r1, r3
 8004274:	481a      	ldr	r0, [pc, #104]	@ (80042e0 <HAL_TIM_MspPostInit+0x190>)
 8004276:	f001 fd2f 	bl	8005cd8 <HAL_GPIO_Init>
}
 800427a:	e020      	b.n	80042be <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <HAL_TIM_MspPostInit+0x194>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d11b      	bne.n	80042be <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004286:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	4a10      	ldr	r2, [pc, #64]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 800428c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004290:	6313      	str	r3, [r2, #48]	@ 0x30
 8004292:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <HAL_TIM_MspPostInit+0x17c>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800429e:	2340      	movs	r3, #64	@ 0x40
 80042a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	2300      	movs	r3, #0
 80042ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80042ae:	2309      	movs	r3, #9
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80042b2:	f107 031c 	add.w	r3, r7, #28
 80042b6:	4619      	mov	r1, r3
 80042b8:	480b      	ldr	r0, [pc, #44]	@ (80042e8 <HAL_TIM_MspPostInit+0x198>)
 80042ba:	f001 fd0d 	bl	8005cd8 <HAL_GPIO_Init>
}
 80042be:	bf00      	nop
 80042c0:	3730      	adds	r7, #48	@ 0x30
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40020400 	.word	0x40020400
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40001800 	.word	0x40001800
 80042e8:	40021c00 	.word	0x40021c00

080042ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042f0:	4b14      	ldr	r3, [pc, #80]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 80042f2:	4a15      	ldr	r2, [pc, #84]	@ (8004348 <MX_USART1_UART_Init+0x5c>)
 80042f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042f6:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 80042f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042fe:	4b11      	ldr	r3, [pc, #68]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800430a:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 8004312:	220c      	movs	r2, #12
 8004314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004316:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004322:	4b08      	ldr	r3, [pc, #32]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 8004324:	2200      	movs	r2, #0
 8004326:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 800432a:	2200      	movs	r2, #0
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432e:	4805      	ldr	r0, [pc, #20]	@ (8004344 <MX_USART1_UART_Init+0x58>)
 8004330:	f006 fe5c 	bl	800afec <HAL_UART_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800433a:	f7fe fdb3 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000f58 	.word	0x20000f58
 8004348:	40011000 	.word	0x40011000

0800434c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004350:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004352:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <MX_USART6_UART_Init+0x5c>)
 8004354:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004356:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004358:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800435c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800435e:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004366:	2200      	movs	r2, #0
 8004368:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800436a:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004372:	220c      	movs	r2, #12
 8004374:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800437c:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 800437e:	2200      	movs	r2, #0
 8004380:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004382:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004384:	2200      	movs	r2, #0
 8004386:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 800438a:	2200      	movs	r2, #0
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800438e:	4805      	ldr	r0, [pc, #20]	@ (80043a4 <MX_USART6_UART_Init+0x58>)
 8004390:	f006 fe2c 	bl	800afec <HAL_UART_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800439a:	f7fe fd83 	bl	8002ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000fe0 	.word	0x20000fe0
 80043a8:	40011400 	.word	0x40011400

080043ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0ae      	sub	sp, #184	@ 0xb8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043c4:	f107 0320 	add.w	r3, r7, #32
 80043c8:	2284      	movs	r2, #132	@ 0x84
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f00d fdb1 	bl	8011f34 <memset>
  if(uartHandle->Instance==USART1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a57      	ldr	r2, [pc, #348]	@ (8004534 <HAL_UART_MspInit+0x188>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d15d      	bne.n	8004498 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80043dc:	2340      	movs	r3, #64	@ 0x40
 80043de:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80043e0:	2300      	movs	r3, #0
 80043e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043e4:	f107 0320 	add.w	r3, r7, #32
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 f877 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043f4:	f7fe fd56 	bl	8002ea4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80043fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80043fe:	f043 0310 	orr.w	r3, r3, #16
 8004402:	6453      	str	r3, [r2, #68]	@ 0x44
 8004404:	4b4c      	ldr	r3, [pc, #304]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 8004406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004410:	4b49      	ldr	r3, [pc, #292]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	4a48      	ldr	r2, [pc, #288]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	6313      	str	r3, [r2, #48]	@ 0x30
 800441c:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004428:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	4a42      	ldr	r2, [pc, #264]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6313      	str	r3, [r2, #48]	@ 0x30
 8004434:	4b40      	ldr	r3, [pc, #256]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004440:	2380      	movs	r3, #128	@ 0x80
 8004442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	2302      	movs	r3, #2
 8004448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004458:	2307      	movs	r3, #7
 800445a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800445e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004462:	4619      	mov	r1, r3
 8004464:	4835      	ldr	r0, [pc, #212]	@ (800453c <HAL_UART_MspInit+0x190>)
 8004466:	f001 fc37 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800446a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800446e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	2302      	movs	r3, #2
 8004474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004484:	2307      	movs	r3, #7
 8004486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800448a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800448e:	4619      	mov	r1, r3
 8004490:	482b      	ldr	r0, [pc, #172]	@ (8004540 <HAL_UART_MspInit+0x194>)
 8004492:	f001 fc21 	bl	8005cd8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004496:	e048      	b.n	800452a <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <HAL_UART_MspInit+0x198>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d143      	bne.n	800452a <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80044a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044a6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80044a8:	2300      	movs	r3, #0
 80044aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044ac:	f107 0320 	add.w	r3, r7, #32
 80044b0:	4618      	mov	r0, r3
 80044b2:	f003 f813 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80044bc:	f7fe fcf2 	bl	8002ea4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80044c6:	f043 0320 	orr.w	r3, r3, #32
 80044ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80044cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d8:	4b17      	ldr	r3, [pc, #92]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	4a16      	ldr	r2, [pc, #88]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e4:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <HAL_UART_MspInit+0x18c>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80044f0:	23c0      	movs	r3, #192	@ 0xc0
 80044f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004502:	2303      	movs	r3, #3
 8004504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004508:	2308      	movs	r3, #8
 800450a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800450e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004512:	4619      	mov	r1, r3
 8004514:	480c      	ldr	r0, [pc, #48]	@ (8004548 <HAL_UART_MspInit+0x19c>)
 8004516:	f001 fbdf 	bl	8005cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800451a:	2200      	movs	r2, #0
 800451c:	2105      	movs	r1, #5
 800451e:	2047      	movs	r0, #71	@ 0x47
 8004520:	f000 fbde 	bl	8004ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004524:	2047      	movs	r0, #71	@ 0x47
 8004526:	f000 fbf7 	bl	8004d18 <HAL_NVIC_EnableIRQ>
}
 800452a:	bf00      	nop
 800452c:	37b8      	adds	r7, #184	@ 0xb8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40011000 	.word	0x40011000
 8004538:	40023800 	.word	0x40023800
 800453c:	40020400 	.word	0x40020400
 8004540:	40020000 	.word	0x40020000
 8004544:	40011400 	.word	0x40011400
 8004548:	40020800 	.word	0x40020800

0800454c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800454c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004584 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004550:	f7ff fab2 	bl	8003ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004554:	480c      	ldr	r0, [pc, #48]	@ (8004588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004556:	490d      	ldr	r1, [pc, #52]	@ (800458c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004558:	4a0d      	ldr	r2, [pc, #52]	@ (8004590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800455a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800455c:	e002      	b.n	8004564 <LoopCopyDataInit>

0800455e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800455e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004562:	3304      	adds	r3, #4

08004564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004568:	d3f9      	bcc.n	800455e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456a:	4a0a      	ldr	r2, [pc, #40]	@ (8004594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800456c:	4c0a      	ldr	r4, [pc, #40]	@ (8004598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800456e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004570:	e001      	b.n	8004576 <LoopFillZerobss>

08004572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004574:	3204      	adds	r2, #4

08004576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004578:	d3fb      	bcc.n	8004572 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800457a:	f00d fe0d 	bl	8012198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800457e:	f7fe fb8d 	bl	8002c9c <main>
  bx  lr    
 8004582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004584:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800458c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004590:	08015128 	.word	0x08015128
  ldr r2, =_sbss
 8004594:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8004598:	20004f1c 	.word	0x20004f1c

0800459c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800459c:	e7fe      	b.n	800459c <ADC_IRQHandler>

0800459e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a2:	2003      	movs	r0, #3
 80045a4:	f000 fb91 	bl	8004cca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045a8:	200f      	movs	r0, #15
 80045aa:	f7ff f901 	bl	80037b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045ae:	f7ff f8d7 	bl	8003760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045bc:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <HAL_IncTick+0x20>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <HAL_IncTick+0x24>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	4a04      	ldr	r2, [pc, #16]	@ (80045dc <HAL_IncTick+0x24>)
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	20001068 	.word	0x20001068

080045e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return uwTick;
 80045e4:	4b03      	ldr	r3, [pc, #12]	@ (80045f4 <HAL_GetTick+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20001068 	.word	0x20001068

080045f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004600:	f7ff ffee 	bl	80045e0 <HAL_GetTick>
 8004604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d005      	beq.n	800461e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004612:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <HAL_Delay+0x44>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800461e:	bf00      	nop
 8004620:	f7ff ffde 	bl	80045e0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	429a      	cmp	r2, r3
 800462e:	d8f7      	bhi.n	8004620 <HAL_Delay+0x28>
  {
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2000000c 	.word	0x2000000c

08004640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e031      	b.n	80046ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fd50 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004682:	4b10      	ldr	r3, [pc, #64]	@ (80046c4 <HAL_ADC_Init+0x84>)
 8004684:	4013      	ands	r3, r2
 8004686:	f043 0202 	orr.w	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f974 	bl	800497c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	f043 0201 	orr.w	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80046aa:	e001      	b.n	80046b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	ffffeefd 	.word	0xffffeefd

080046c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x1c>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e13a      	b.n	800495a <HAL_ADC_ConfigChannel+0x292>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b09      	cmp	r3, #9
 80046f2:	d93a      	bls.n	800476a <HAL_ADC_ConfigChannel+0xa2>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046fc:	d035      	beq.n	800476a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68d9      	ldr	r1, [r3, #12]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	3b1e      	subs	r3, #30
 8004714:	2207      	movs	r2, #7
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	400a      	ands	r2, r1
 8004722:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a8f      	ldr	r2, [pc, #572]	@ (8004968 <HAL_ADC_ConfigChannel+0x2a0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10a      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	061a      	lsls	r2, r3, #24
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004742:	e039      	b.n	80047b8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68d9      	ldr	r1, [r3, #12]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4618      	mov	r0, r3
 8004756:	4603      	mov	r3, r0
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4403      	add	r3, r0
 800475c:	3b1e      	subs	r3, #30
 800475e:	409a      	lsls	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004768:	e026      	b.n	80047b8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6919      	ldr	r1, [r3, #16]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2207      	movs	r2, #7
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43da      	mvns	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	400a      	ands	r2, r1
 8004790:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6919      	ldr	r1, [r3, #16]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	4603      	mov	r3, r0
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4403      	add	r3, r0
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	409a      	lsls	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d824      	bhi.n	800480a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	3b05      	subs	r3, #5
 80047d2:	221f      	movs	r2, #31
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43da      	mvns	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	400a      	ands	r2, r1
 80047e0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4618      	mov	r0, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	3b05      	subs	r3, #5
 80047fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34
 8004808:	e04c      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d824      	bhi.n	800485c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	3b23      	subs	r3, #35	@ 0x23
 8004824:	221f      	movs	r2, #31
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	400a      	ands	r2, r1
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	4618      	mov	r0, r3
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	3b23      	subs	r3, #35	@ 0x23
 800484e:	fa00 f203 	lsl.w	r2, r0, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
 800485a:	e023      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	3b41      	subs	r3, #65	@ 0x41
 800486e:	221f      	movs	r2, #31
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43da      	mvns	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	400a      	ands	r2, r1
 800487c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	4618      	mov	r0, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	3b41      	subs	r3, #65	@ 0x41
 8004898:	fa00 f203 	lsl.w	r2, r0, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a30      	ldr	r2, [pc, #192]	@ (800496c <HAL_ADC_ConfigChannel+0x2a4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10a      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1fc>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048b6:	d105      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80048b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 80048be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80048c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a28      	ldr	r2, [pc, #160]	@ (800496c <HAL_ADC_ConfigChannel+0x2a4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10f      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x226>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b12      	cmp	r3, #18
 80048d4:	d10b      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80048d6:	4b26      	ldr	r3, [pc, #152]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a25      	ldr	r2, [pc, #148]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 80048dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80048e0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80048e2:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 80048e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_ADC_ConfigChannel+0x2a4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d12b      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x288>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <HAL_ADC_ConfigChannel+0x2a0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <HAL_ADC_ConfigChannel+0x242>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b11      	cmp	r3, #17
 8004908:	d122      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800490a:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4a18      	ldr	r2, [pc, #96]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 8004910:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004914:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004916:	4b16      	ldr	r3, [pc, #88]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a15      	ldr	r2, [pc, #84]	@ (8004970 <HAL_ADC_ConfigChannel+0x2a8>)
 800491c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004920:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a10      	ldr	r2, [pc, #64]	@ (8004968 <HAL_ADC_ConfigChannel+0x2a0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800492c:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <HAL_ADC_ConfigChannel+0x2ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a11      	ldr	r2, [pc, #68]	@ (8004978 <HAL_ADC_ConfigChannel+0x2b0>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9a      	lsrs	r2, r3, #18
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004942:	e002      	b.n	800494a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3b01      	subs	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f9      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	10000012 	.word	0x10000012
 800496c:	40012000 	.word	0x40012000
 8004970:	40012300 	.word	0x40012300
 8004974:	20000004 	.word	0x20000004
 8004978:	431bde83 	.word	0x431bde83

0800497c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004984:	4b78      	ldr	r3, [pc, #480]	@ (8004b68 <ADC_Init+0x1ec>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a77      	ldr	r2, [pc, #476]	@ (8004b68 <ADC_Init+0x1ec>)
 800498a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800498e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004990:	4b75      	ldr	r3, [pc, #468]	@ (8004b68 <ADC_Init+0x1ec>)
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4973      	ldr	r1, [pc, #460]	@ (8004b68 <ADC_Init+0x1ec>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	021a      	lsls	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80049d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	4a58      	ldr	r2, [pc, #352]	@ (8004b6c <ADC_Init+0x1f0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	e00f      	b.n	8004a76 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0202 	bic.w	r2, r2, #2
 8004a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	005a      	lsls	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004ac2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	035a      	lsls	r2, r3, #13
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	e007      	b.n	8004aec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	051a      	lsls	r2, r3, #20
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b2e:	025a      	lsls	r2, r3, #9
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	029a      	lsls	r2, r3, #10
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40012300 	.word	0x40012300
 8004b6c:	0f000001 	.word	0x0f000001

08004b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b80:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b98:	4b06      	ldr	r3, [pc, #24]	@ (8004bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9e:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00
 8004bb4:	05fa0000 	.word	0x05fa0000

08004bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bbc:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	f003 0307 	and.w	r3, r3, #7
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	db0b      	blt.n	8004bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	f003 021f 	and.w	r2, r3, #31
 8004bec:	4907      	ldr	r1, [pc, #28]	@ (8004c0c <__NVIC_EnableIRQ+0x38>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000e100 	.word	0xe000e100

08004c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db0a      	blt.n	8004c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	490c      	ldr	r1, [pc, #48]	@ (8004c5c <__NVIC_SetPriority+0x4c>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	440b      	add	r3, r1
 8004c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c38:	e00a      	b.n	8004c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4908      	ldr	r1, [pc, #32]	@ (8004c60 <__NVIC_SetPriority+0x50>)
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	3b04      	subs	r3, #4
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	761a      	strb	r2, [r3, #24]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000e100 	.word	0xe000e100
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	@ 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f1c3 0307 	rsb	r3, r3, #7
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	bf28      	it	cs
 8004c82:	2304      	movcs	r3, #4
 8004c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d902      	bls.n	8004c94 <NVIC_EncodePriority+0x30>
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3b03      	subs	r3, #3
 8004c92:	e000      	b.n	8004c96 <NVIC_EncodePriority+0x32>
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cac:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43d9      	mvns	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	4313      	orrs	r3, r2
         );
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	@ 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff4c 	bl	8004b70 <__NVIC_SetPriorityGrouping>
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf2:	f7ff ff61 	bl	8004bb8 <__NVIC_GetPriorityGrouping>
 8004cf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	6978      	ldr	r0, [r7, #20]
 8004cfe:	f7ff ffb1 	bl	8004c64 <NVIC_EncodePriority>
 8004d02:	4602      	mov	r2, r0
 8004d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff80 	bl	8004c10 <__NVIC_SetPriority>
}
 8004d10:	bf00      	nop
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ff54 	bl	8004bd4 <__NVIC_EnableIRQ>
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e054      	b.n	8004df0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	7f5b      	ldrb	r3, [r3, #29]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fa50 	bl	80011fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	791b      	ldrb	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <HAL_CRC_Init+0xc4>)
 8004d70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0218 	bic.w	r2, r2, #24
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	e00c      	b.n	8004d9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6899      	ldr	r1, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f834 	bl	8004dfc <HAL_CRCEx_Polynomial_Set>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e028      	b.n	8004df0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	795b      	ldrb	r3, [r3, #5]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dae:	611a      	str	r2, [r3, #16]
 8004db0:	e004      	b.n	8004dbc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6912      	ldr	r2, [r2, #16]
 8004dba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	04c11db7 	.word	0x04c11db7

08004dfc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004e0c:	231f      	movs	r3, #31
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
 8004e1e:	e063      	b.n	8004ee8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004e20:	bf00      	nop
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	613a      	str	r2, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d009      	beq.n	8004e40 <HAL_CRCEx_Polynomial_Set+0x44>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b18      	cmp	r3, #24
 8004e44:	d846      	bhi.n	8004ed4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004edb 	.word	0x08004edb
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004ed5 	.word	0x08004ed5
 8004e58:	08004ed5 	.word	0x08004ed5
 8004e5c:	08004ed5 	.word	0x08004ed5
 8004e60:	08004ed5 	.word	0x08004ed5
 8004e64:	08004ed5 	.word	0x08004ed5
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	08004ec9 	.word	0x08004ec9
 8004e70:	08004ed5 	.word	0x08004ed5
 8004e74:	08004ed5 	.word	0x08004ed5
 8004e78:	08004ed5 	.word	0x08004ed5
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004ed5 	.word	0x08004ed5
 8004e88:	08004ed5 	.word	0x08004ed5
 8004e8c:	08004ebd 	.word	0x08004ebd
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ed5 	.word	0x08004ed5
 8004e98:	08004ed5 	.word	0x08004ed5
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004ed5 	.word	0x08004ed5
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004eb1 	.word	0x08004eb1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d913      	bls.n	8004ede <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004eba:	e010      	b.n	8004ede <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b07      	cmp	r3, #7
 8004ec0:	d90f      	bls.n	8004ee2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ec6:	e00c      	b.n	8004ee2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d90b      	bls.n	8004ee6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004ed2:	e008      	b.n	8004ee6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75fb      	strb	r3, [r7, #23]
        break;
 8004ed8:	e006      	b.n	8004ee8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004eda:	bf00      	nop
 8004edc:	e004      	b.n	8004ee8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004ee6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10d      	bne.n	8004f0a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 0118 	bic.w	r1, r3, #24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e069      	b.n	8004ffe <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc f9b4 	bl	80012a4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6819      	ldr	r1, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <HAL_DCMI_Init+0xf0>)
 8004f5e:	400b      	ands	r3, r1
 8004f60:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004f76:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004f82:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004f8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004f9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004fa6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d112      	bne.n	8004fde <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7f1b      	ldrb	r3, [r3, #28]
 8004fbc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7f5b      	ldrb	r3, [r3, #29]
 8004fc2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fc4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7f9b      	ldrb	r3, [r3, #30]
 8004fca:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004fcc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	7fdb      	ldrb	r3, [r3, #31]
 8004fd4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004fda:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004fdc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 021e 	orr.w	r2, r2, #30
 8004fec:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	ffe0f007 	.word	0xffe0f007

0800500c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_DMA_Start_IT+0x26>
 800502e:	2302      	movs	r3, #2
 8005030:	e048      	b.n	80050c4 <HAL_DMA_Start_IT+0xb8>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d137      	bne.n	80050b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f8d4 	bl	8005208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005064:	223f      	movs	r2, #63	@ 0x3f
 8005066:	409a      	lsls	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0216 	orr.w	r2, r2, #22
 800507a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800508a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0208 	orr.w	r2, r2, #8
 80050a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e005      	b.n	80050c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050be:	2302      	movs	r3, #2
 80050c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050da:	f7ff fa81 	bl	80045e0 <HAL_GetTick>
 80050de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d008      	beq.n	80050fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2280      	movs	r2, #128	@ 0x80
 80050f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e052      	b.n	80051a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0216 	bic.w	r2, r2, #22
 800510c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800511c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <HAL_DMA_Abort+0x62>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0208 	bic.w	r2, r2, #8
 800513c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800514e:	e013      	b.n	8005178 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005150:	f7ff fa46 	bl	80045e0 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b05      	cmp	r3, #5
 800515c:	d90c      	bls.n	8005178 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2203      	movs	r2, #3
 8005168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e015      	b.n	80051a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e4      	bne.n	8005150 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518a:	223f      	movs	r2, #63	@ 0x3f
 800518c:	409a      	lsls	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d004      	beq.n	80051ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2280      	movs	r2, #128	@ 0x80
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e00c      	b.n	80051e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2205      	movs	r2, #5
 80051ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b40      	cmp	r3, #64	@ 0x40
 8005234:	d108      	bne.n	8005248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005246:	e007      	b.n	8005258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e039      	b.n	80052ea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc f8fa 	bl	8001484 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b4:	f023 0107 	bic.w	r1, r3, #7
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ca:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <HAL_DMA2D_Init+0x90>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d1      	ldr	r1, [r2, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	ffffc000 	.word	0xffffc000

080052f8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d026      	beq.n	8005368 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d021      	beq.n	8005368 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005332:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2204      	movs	r2, #4
 800534c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d026      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d021      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800538a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2220      	movs	r2, #32
 8005392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	f043 0202 	orr.w	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2204      	movs	r2, #4
 80053a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d026      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d021      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053e2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2204      	movs	r2, #4
 80053fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2204      	movs	r2, #4
 8005442:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f853 	bl	80054f0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d024      	beq.n	800549e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01f      	beq.n	800549e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800546c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2202      	movs	r2, #2
 8005474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01f      	beq.n	80054e8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01a      	beq.n	80054e8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2210      	movs	r2, #16
 80054c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f80e 	bl	8005504 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_DMA2D_ConfigLayer+0x20>
 8005534:	2302      	movs	r3, #2
 8005536:	e079      	b.n	800562c <HAL_DMA2D_ConfigLayer+0x114>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	3318      	adds	r3, #24
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005562:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <HAL_DMA2D_ConfigLayer+0x120>)
 8005564:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b0a      	cmp	r3, #10
 800556c:	d003      	beq.n	8005576 <HAL_DMA2D_ConfigLayer+0x5e>
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b09      	cmp	r3, #9
 8005574:	d107      	bne.n	8005586 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e005      	b.n	8005592 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d120      	bne.n	80055da <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	ea02 0103 	and.w	r1, r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b0a      	cmp	r3, #10
 80055c0:	d003      	beq.n	80055ca <HAL_DMA2D_ConfigLayer+0xb2>
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b09      	cmp	r3, #9
 80055c8:	d127      	bne.n	800561a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80055d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80055d8:	e01f      	b.n	800561a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	43db      	mvns	r3, r3
 80055e4:	ea02 0103 	and.w	r1, r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b0a      	cmp	r3, #10
 8005602:	d003      	beq.n	800560c <HAL_DMA2D_ConfigLayer+0xf4>
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b09      	cmp	r3, #9
 800560a:	d106      	bne.n	800561a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005618:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	ff03000f 	.word	0xff03000f

0800563c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e086      	b.n	800575c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fb ff83 	bl	800156c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005666:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_ETH_Init+0x128>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566a:	4a3e      	ldr	r2, [pc, #248]	@ (8005764 <HAL_ETH_Init+0x128>)
 800566c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005670:	6453      	str	r3, [r2, #68]	@ 0x44
 8005672:	4b3c      	ldr	r3, [pc, #240]	@ (8005764 <HAL_ETH_Init+0x128>)
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800567a:	60bb      	str	r3, [r7, #8]
 800567c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800567e:	4b3a      	ldr	r3, [pc, #232]	@ (8005768 <HAL_ETH_Init+0x12c>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4a39      	ldr	r2, [pc, #228]	@ (8005768 <HAL_ETH_Init+0x12c>)
 8005684:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005688:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800568a:	4b37      	ldr	r3, [pc, #220]	@ (8005768 <HAL_ETH_Init+0x12c>)
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	4935      	ldr	r1, [pc, #212]	@ (8005768 <HAL_ETH_Init+0x12c>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005698:	4b33      	ldr	r3, [pc, #204]	@ (8005768 <HAL_ETH_Init+0x12c>)
 800569a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056b4:	f7fe ff94 	bl	80045e0 <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80056ba:	e011      	b.n	80056e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80056bc:	f7fe ff90 	bl	80045e0 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80056ca:	d909      	bls.n	80056e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2204      	movs	r2, #4
 80056d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	22e0      	movs	r2, #224	@ 0xe0
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e03d      	b.n	800575c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e4      	bne.n	80056bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f97a 	bl	80059ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa25 	bl	8005b48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa7b 	bl	8005bfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	461a      	mov	r2, r3
 800570a:	2100      	movs	r1, #0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f9e3 	bl	8005ad8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <HAL_ETH_Init+0x130>)
 8005730:	430b      	orrs	r3, r1
 8005732:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005746:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2210      	movs	r2, #16
 8005756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	40013800 	.word	0x40013800
 800576c:	00020060 	.word	0x00020060

08005770 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4b53      	ldr	r3, [pc, #332]	@ (80058d4 <ETH_SetMACConfig+0x164>)
 8005786:	4013      	ands	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	7b9b      	ldrb	r3, [r3, #14]
 800578e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	7c12      	ldrb	r2, [r2, #16]
 8005794:	2a00      	cmp	r2, #0
 8005796:	d102      	bne.n	800579e <ETH_SetMACConfig+0x2e>
 8005798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800579c:	e000      	b.n	80057a0 <ETH_SetMACConfig+0x30>
 800579e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80057a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	7c52      	ldrb	r2, [r2, #17]
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d102      	bne.n	80057b0 <ETH_SetMACConfig+0x40>
 80057aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80057ae:	e000      	b.n	80057b2 <ETH_SetMACConfig+0x42>
 80057b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80057b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80057b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	7fdb      	ldrb	r3, [r3, #31]
 80057be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80057c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80057c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	7f92      	ldrb	r2, [r2, #30]
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d102      	bne.n	80057d6 <ETH_SetMACConfig+0x66>
 80057d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80057d4:	e000      	b.n	80057d8 <ETH_SetMACConfig+0x68>
 80057d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80057d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	7f1b      	ldrb	r3, [r3, #28]
 80057de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80057e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80057e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	791b      	ldrb	r3, [r3, #4]
 80057ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80057ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	d102      	bne.n	8005800 <ETH_SetMACConfig+0x90>
 80057fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057fe:	e000      	b.n	8005802 <ETH_SetMACConfig+0x92>
 8005800:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005802:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	7bdb      	ldrb	r3, [r3, #15]
 8005808:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800580a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005818:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800581a:	4313      	orrs	r3, r2
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005832:	2001      	movs	r0, #1
 8005834:	f7fe fee0 	bl	80045f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800584e:	4013      	ands	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005856:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800585e:	2a00      	cmp	r2, #0
 8005860:	d101      	bne.n	8005866 <ETH_SetMACConfig+0xf6>
 8005862:	2280      	movs	r2, #128	@ 0x80
 8005864:	e000      	b.n	8005868 <ETH_SetMACConfig+0xf8>
 8005866:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005868:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800586e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005876:	2a01      	cmp	r2, #1
 8005878:	d101      	bne.n	800587e <ETH_SetMACConfig+0x10e>
 800587a:	2208      	movs	r2, #8
 800587c:	e000      	b.n	8005880 <ETH_SetMACConfig+0x110>
 800587e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005880:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005888:	2a01      	cmp	r2, #1
 800588a:	d101      	bne.n	8005890 <ETH_SetMACConfig+0x120>
 800588c:	2204      	movs	r2, #4
 800588e:	e000      	b.n	8005892 <ETH_SetMACConfig+0x122>
 8005890:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800589a:	2a01      	cmp	r2, #1
 800589c:	d101      	bne.n	80058a2 <ETH_SetMACConfig+0x132>
 800589e:	2202      	movs	r2, #2
 80058a0:	e000      	b.n	80058a4 <ETH_SetMACConfig+0x134>
 80058a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80058a4:	4313      	orrs	r3, r2
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058bc:	2001      	movs	r0, #1
 80058be:	f7fe fe9b 	bl	80045f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	619a      	str	r2, [r3, #24]
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	fd20810f 	.word	0xfd20810f

080058d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4b3d      	ldr	r3, [pc, #244]	@ (80059e8 <ETH_SetDMAConfig+0x110>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	7b1b      	ldrb	r3, [r3, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <ETH_SetDMAConfig+0x2c>
 80058fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005902:	e000      	b.n	8005906 <ETH_SetDMAConfig+0x2e>
 8005904:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	7b5b      	ldrb	r3, [r3, #13]
 800590a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800590c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	7f52      	ldrb	r2, [r2, #29]
 8005912:	2a00      	cmp	r2, #0
 8005914:	d102      	bne.n	800591c <ETH_SetDMAConfig+0x44>
 8005916:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800591a:	e000      	b.n	800591e <ETH_SetDMAConfig+0x46>
 800591c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800591e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	7b9b      	ldrb	r3, [r3, #14]
 8005924:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005926:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800592c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	7f1b      	ldrb	r3, [r3, #28]
 8005932:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005934:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	7f9b      	ldrb	r3, [r3, #30]
 800593a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800593c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005942:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800594a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800594c:	4313      	orrs	r3, r2
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800595c:	461a      	mov	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800596e:	2001      	movs	r0, #1
 8005970:	f7fe fe42 	bl	80045f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800597c:	461a      	mov	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	791b      	ldrb	r3, [r3, #4]
 8005986:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800598c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005992:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005998:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80059a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80059aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80059b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80059cc:	2001      	movs	r0, #1
 80059ce:	f7fe fe13 	bl	80045f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	f8de3f23 	.word	0xf8de3f23

080059ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b0a6      	sub	sp, #152	@ 0x98
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005a5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fe7f 	bl	8005770 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005a94:	2300      	movs	r3, #0
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005aa6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005aa8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005aac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ab2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005ac2:	f107 0308 	add.w	r3, r7, #8
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff05 	bl	80058d8 <ETH_SetDMAConfig>
}
 8005ace:	bf00      	nop
 8005ad0:	3798      	adds	r7, #152	@ 0x98
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3305      	adds	r3, #5
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	3204      	adds	r2, #4
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <ETH_MACAddressConfig+0x68>)
 8005afa:	4413      	add	r3, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3303      	adds	r3, #3
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	061a      	lsls	r2, r3, #24
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <ETH_MACAddressConfig+0x6c>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	6013      	str	r3, [r2, #0]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40028040 	.word	0x40028040
 8005b44:	40028044 	.word	0x40028044

08005b48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e03e      	b.n	8005bd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68d9      	ldr	r1, [r3, #12]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	440b      	add	r3, r1
 8005b66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	3206      	adds	r2, #6
 8005b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d80c      	bhi.n	8005bb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68d9      	ldr	r1, [r3, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	e004      	b.n	8005bc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d9bd      	bls.n	8005b56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bec:	611a      	str	r2, [r3, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e048      	b.n	8005c9a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6919      	ldr	r1, [r3, #16]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	3212      	adds	r2, #18
 8005c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d80c      	bhi.n	8005c8a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6919      	ldr	r1, [r3, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	440b      	add	r3, r1
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	e004      	b.n	8005c94 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d9b3      	bls.n	8005c08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cca:	60da      	str	r2, [r3, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	@ 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e175      	b.n	8005fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	f040 8164 	bne.w	8005fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d005      	beq.n	8005d2e <HAL_GPIO_Init+0x56>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d130      	bne.n	8005d90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	2203      	movs	r2, #3
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d64:	2201      	movs	r2, #1
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4013      	ands	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	091b      	lsrs	r3, r3, #4
 8005d7a:	f003 0201 	and.w	r2, r3, #1
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d017      	beq.n	8005dcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	2203      	movs	r2, #3
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d123      	bne.n	8005e20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	08da      	lsrs	r2, r3, #3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3208      	adds	r2, #8
 8005de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	220f      	movs	r2, #15
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	08da      	lsrs	r2, r3, #3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3208      	adds	r2, #8
 8005e1a:	69b9      	ldr	r1, [r7, #24]
 8005e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0203 	and.w	r2, r3, #3
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80be 	beq.w	8005fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e62:	4b66      	ldr	r3, [pc, #408]	@ (8005ffc <HAL_GPIO_Init+0x324>)
 8005e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e66:	4a65      	ldr	r2, [pc, #404]	@ (8005ffc <HAL_GPIO_Init+0x324>)
 8005e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e6e:	4b63      	ldr	r3, [pc, #396]	@ (8005ffc <HAL_GPIO_Init+0x324>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005e7a:	4a61      	ldr	r2, [pc, #388]	@ (8006000 <HAL_GPIO_Init+0x328>)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	3302      	adds	r3, #2
 8005e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	220f      	movs	r2, #15
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a58      	ldr	r2, [pc, #352]	@ (8006004 <HAL_GPIO_Init+0x32c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d037      	beq.n	8005f16 <HAL_GPIO_Init+0x23e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a57      	ldr	r2, [pc, #348]	@ (8006008 <HAL_GPIO_Init+0x330>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d031      	beq.n	8005f12 <HAL_GPIO_Init+0x23a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a56      	ldr	r2, [pc, #344]	@ (800600c <HAL_GPIO_Init+0x334>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d02b      	beq.n	8005f0e <HAL_GPIO_Init+0x236>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a55      	ldr	r2, [pc, #340]	@ (8006010 <HAL_GPIO_Init+0x338>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d025      	beq.n	8005f0a <HAL_GPIO_Init+0x232>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a54      	ldr	r2, [pc, #336]	@ (8006014 <HAL_GPIO_Init+0x33c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d01f      	beq.n	8005f06 <HAL_GPIO_Init+0x22e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a53      	ldr	r2, [pc, #332]	@ (8006018 <HAL_GPIO_Init+0x340>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d019      	beq.n	8005f02 <HAL_GPIO_Init+0x22a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a52      	ldr	r2, [pc, #328]	@ (800601c <HAL_GPIO_Init+0x344>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_GPIO_Init+0x226>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a51      	ldr	r2, [pc, #324]	@ (8006020 <HAL_GPIO_Init+0x348>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00d      	beq.n	8005efa <HAL_GPIO_Init+0x222>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a50      	ldr	r2, [pc, #320]	@ (8006024 <HAL_GPIO_Init+0x34c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <HAL_GPIO_Init+0x21e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8006028 <HAL_GPIO_Init+0x350>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d101      	bne.n	8005ef2 <HAL_GPIO_Init+0x21a>
 8005eee:	2309      	movs	r3, #9
 8005ef0:	e012      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	e010      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	e00e      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005efa:	2307      	movs	r3, #7
 8005efc:	e00c      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005efe:	2306      	movs	r3, #6
 8005f00:	e00a      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005f02:	2305      	movs	r3, #5
 8005f04:	e008      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005f06:	2304      	movs	r3, #4
 8005f08:	e006      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e004      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e002      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <HAL_GPIO_Init+0x240>
 8005f16:	2300      	movs	r3, #0
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	f002 0203 	and.w	r2, r2, #3
 8005f1e:	0092      	lsls	r2, r2, #2
 8005f20:	4093      	lsls	r3, r2
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f28:	4935      	ldr	r1, [pc, #212]	@ (8006000 <HAL_GPIO_Init+0x328>)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	089b      	lsrs	r3, r3, #2
 8005f2e:	3302      	adds	r3, #2
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f36:	4b3d      	ldr	r3, [pc, #244]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f5a:	4a34      	ldr	r2, [pc, #208]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f60:	4b32      	ldr	r3, [pc, #200]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f84:	4a29      	ldr	r2, [pc, #164]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f8a:	4b28      	ldr	r3, [pc, #160]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4013      	ands	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fae:	4a1f      	ldr	r2, [pc, #124]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fd8:	4a14      	ldr	r2, [pc, #80]	@ (800602c <HAL_GPIO_Init+0x354>)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b0f      	cmp	r3, #15
 8005fe8:	f67f ae86 	bls.w	8005cf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3724      	adds	r7, #36	@ 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800
 8006000:	40013800 	.word	0x40013800
 8006004:	40020000 	.word	0x40020000
 8006008:	40020400 	.word	0x40020400
 800600c:	40020800 	.word	0x40020800
 8006010:	40020c00 	.word	0x40020c00
 8006014:	40021000 	.word	0x40021000
 8006018:	40021400 	.word	0x40021400
 800601c:	40021800 	.word	0x40021800
 8006020:	40021c00 	.word	0x40021c00
 8006024:	40022000 	.word	0x40022000
 8006028:	40022400 	.word	0x40022400
 800602c:	40013c00 	.word	0x40013c00

08006030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e001      	b.n	8006052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
 800606c:	4613      	mov	r3, r2
 800606e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800607c:	e003      	b.n	8006086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e08b      	b.n	80061be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fc fbea 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	@ 0x24
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d107      	bne.n	800610e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	e006      	b.n	800611c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800611a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d108      	bne.n	8006136 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	e007      	b.n	8006146 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006144:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <HAL_I2C_Init+0x134>)
 8006152:	430b      	orrs	r3, r1
 8006154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69d9      	ldr	r1, [r3, #28]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	02008000 	.word	0x02008000

080061cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d138      	bne.n	8006254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e032      	b.n	8006256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2224      	movs	r2, #36	@ 0x24
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800621e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b20      	cmp	r3, #32
 8006276:	d139      	bne.n	80062ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006282:	2302      	movs	r3, #2
 8006284:	e033      	b.n	80062ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	@ 0x24
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80062b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e08f      	b.n	800642c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fc fbe1 	bl	8002ae8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800633c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6999      	ldr	r1, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006352:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	041b      	lsls	r3, r3, #16
 8006368:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6999      	ldr	r1, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	430a      	orrs	r2, r1
 8006376:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a19      	ldr	r1, [r3, #32]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	430a      	orrs	r2, r1
 800638c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80063dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0206 	orr.w	r2, r2, #6
 8006408:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d023      	beq.n	800649e <HAL_LTDC_IRQHandler+0x6a>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01e      	beq.n	800649e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0204 	bic.w	r2, r2, #4
 800646e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2204      	movs	r2, #4
 8006476:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800647e:	f043 0201 	orr.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2204      	movs	r2, #4
 800648c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f86f 	bl	800657c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d023      	beq.n	80064f0 <HAL_LTDC_IRQHandler+0xbc>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01e      	beq.n	80064f0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0202 	bic.w	r2, r2, #2
 80064c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2202      	movs	r2, #2
 80064c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064d0:	f043 0202 	orr.w	r2, r3, #2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2204      	movs	r2, #4
 80064de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f846 	bl	800657c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01b      	beq.n	8006532 <HAL_LTDC_IRQHandler+0xfe>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f82f 	bl	8006590 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01b      	beq.n	8006574 <HAL_LTDC_IRQHandler+0x140>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0208 	bic.w	r2, r2, #8
 8006554:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2208      	movs	r2, #8
 800655c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f818 	bl	80065a4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065b8:	b5b0      	push	{r4, r5, r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_LTDC_ConfigLayer+0x1a>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e02c      	b.n	800662c <HAL_LTDC_ConfigLayer+0x74>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2202      	movs	r2, #2
 80065de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2134      	movs	r1, #52	@ 0x34
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4614      	mov	r4, r2
 80065f6:	461d      	mov	r5, r3
 80065f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f811 	bl	8006634 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2201      	movs	r2, #1
 8006618:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bdb0      	pop	{r4, r5, r7, pc}

08006634 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006634:	b480      	push	{r7}
 8006636:	b089      	sub	sp, #36	@ 0x24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006650:	4413      	add	r3, r2
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	01db      	lsls	r3, r3, #7
 8006660:	4413      	add	r3, r2
 8006662:	3384      	adds	r3, #132	@ 0x84
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	4611      	mov	r1, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	01d2      	lsls	r2, r2, #7
 8006670:	440a      	add	r2, r1
 8006672:	3284      	adds	r2, #132	@ 0x84
 8006674:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006678:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800668a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800668c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4619      	mov	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	01db      	lsls	r3, r3, #7
 8006698:	440b      	add	r3, r1
 800669a:	3384      	adds	r3, #132	@ 0x84
 800669c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b2:	4413      	add	r3, r2
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	4413      	add	r3, r2
 80066c4:	3384      	adds	r3, #132	@ 0x84
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	4611      	mov	r1, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	01d2      	lsls	r2, r2, #7
 80066d2:	440a      	add	r2, r1
 80066d4:	3284      	adds	r2, #132	@ 0x84
 80066d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80066da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ea:	4413      	add	r3, r2
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	440b      	add	r3, r1
 80066fa:	3384      	adds	r3, #132	@ 0x84
 80066fc:	4619      	mov	r1, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4313      	orrs	r3, r2
 8006702:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	01db      	lsls	r3, r3, #7
 800670e:	4413      	add	r3, r2
 8006710:	3384      	adds	r3, #132	@ 0x84
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	4611      	mov	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	01d2      	lsls	r2, r2, #7
 800671e:	440a      	add	r2, r1
 8006720:	3284      	adds	r2, #132	@ 0x84
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	01db      	lsls	r3, r3, #7
 8006732:	4413      	add	r3, r2
 8006734:	3384      	adds	r3, #132	@ 0x84
 8006736:	461a      	mov	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006760:	461a      	mov	r2, r3
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	431a      	orrs	r2, r3
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	01db      	lsls	r3, r3, #7
 8006774:	440b      	add	r3, r1
 8006776:	3384      	adds	r3, #132	@ 0x84
 8006778:	4619      	mov	r1, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	01db      	lsls	r3, r3, #7
 800678a:	4413      	add	r3, r2
 800678c:	3384      	adds	r3, #132	@ 0x84
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	4611      	mov	r1, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	01d2      	lsls	r2, r2, #7
 800679a:	440a      	add	r2, r1
 800679c:	3284      	adds	r2, #132	@ 0x84
 800679e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80067a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	01db      	lsls	r3, r3, #7
 80067ae:	4413      	add	r3, r2
 80067b0:	3384      	adds	r3, #132	@ 0x84
 80067b2:	461a      	mov	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	01db      	lsls	r3, r3, #7
 80067c4:	4413      	add	r3, r2
 80067c6:	3384      	adds	r3, #132	@ 0x84
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	440b      	add	r3, r1
 80067d6:	3384      	adds	r3, #132	@ 0x84
 80067d8:	4619      	mov	r1, r3
 80067da:	4b4f      	ldr	r3, [pc, #316]	@ (8006918 <LTDC_SetConfig+0x2e4>)
 80067dc:	4013      	ands	r3, r2
 80067de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	6809      	ldr	r1, [r1, #0]
 80067ec:	4608      	mov	r0, r1
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	01c9      	lsls	r1, r1, #7
 80067f2:	4401      	add	r1, r0
 80067f4:	3184      	adds	r1, #132	@ 0x84
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	01db      	lsls	r3, r3, #7
 8006804:	4413      	add	r3, r2
 8006806:	3384      	adds	r3, #132	@ 0x84
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8006818:	2304      	movs	r3, #4
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	e01b      	b.n	8006856 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d102      	bne.n	800682c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8006826:	2303      	movs	r3, #3
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	e014      	b.n	8006856 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b04      	cmp	r3, #4
 8006832:	d00b      	beq.n	800684c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006838:	2b02      	cmp	r3, #2
 800683a:	d007      	beq.n	800684c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006840:	2b03      	cmp	r3, #3
 8006842:	d003      	beq.n	800684c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006848:	2b07      	cmp	r3, #7
 800684a:	d102      	bne.n	8006852 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800684c:	2302      	movs	r3, #2
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e001      	b.n	8006856 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8006852:	2301      	movs	r3, #1
 8006854:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	01db      	lsls	r3, r3, #7
 8006860:	4413      	add	r3, r2
 8006862:	3384      	adds	r3, #132	@ 0x84
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	4611      	mov	r1, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	01d2      	lsls	r2, r2, #7
 8006870:	440a      	add	r2, r1
 8006872:	3284      	adds	r2, #132	@ 0x84
 8006874:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006878:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6859      	ldr	r1, [r3, #4]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	1acb      	subs	r3, r1, r3
 8006890:	69f9      	ldr	r1, [r7, #28]
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	6809      	ldr	r1, [r1, #0]
 800689c:	4608      	mov	r0, r1
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	01c9      	lsls	r1, r1, #7
 80068a2:	4401      	add	r1, r0
 80068a4:	3184      	adds	r1, #132	@ 0x84
 80068a6:	4313      	orrs	r3, r2
 80068a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	01db      	lsls	r3, r3, #7
 80068b4:	4413      	add	r3, r2
 80068b6:	3384      	adds	r3, #132	@ 0x84
 80068b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4619      	mov	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	440b      	add	r3, r1
 80068c6:	3384      	adds	r3, #132	@ 0x84
 80068c8:	4619      	mov	r1, r3
 80068ca:	4b14      	ldr	r3, [pc, #80]	@ (800691c <LTDC_SetConfig+0x2e8>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	01db      	lsls	r3, r3, #7
 80068da:	4413      	add	r3, r2
 80068dc:	3384      	adds	r3, #132	@ 0x84
 80068de:	461a      	mov	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	01db      	lsls	r3, r3, #7
 80068f0:	4413      	add	r3, r2
 80068f2:	3384      	adds	r3, #132	@ 0x84
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	4611      	mov	r1, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	01d2      	lsls	r2, r2, #7
 8006900:	440a      	add	r2, r1
 8006902:	3284      	adds	r2, #132	@ 0x84
 8006904:	f043 0301 	orr.w	r3, r3, #1
 8006908:	6013      	str	r3, [r2, #0]
}
 800690a:	bf00      	nop
 800690c:	3724      	adds	r7, #36	@ 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	fffff8f8 	.word	0xfffff8f8
 800691c:	fffff800 	.word	0xfffff800

08006920 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006924:	4b05      	ldr	r3, [pc, #20]	@ (800693c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a04      	ldr	r2, [pc, #16]	@ (800693c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800692a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800692e:	6013      	str	r3, [r2, #0]
}
 8006930:	bf00      	nop
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40007000 	.word	0x40007000

08006940 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800694a:	4b23      	ldr	r3, [pc, #140]	@ (80069d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694e:	4a22      	ldr	r2, [pc, #136]	@ (80069d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006954:	6413      	str	r3, [r2, #64]	@ 0x40
 8006956:	4b20      	ldr	r3, [pc, #128]	@ (80069d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006962:	4b1e      	ldr	r3, [pc, #120]	@ (80069dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1d      	ldr	r2, [pc, #116]	@ (80069dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800696c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800696e:	f7fd fe37 	bl	80045e0 <HAL_GetTick>
 8006972:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006974:	e009      	b.n	800698a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006976:	f7fd fe33 	bl	80045e0 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006984:	d901      	bls.n	800698a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e022      	b.n	80069d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800698a:	4b14      	ldr	r3, [pc, #80]	@ (80069dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006996:	d1ee      	bne.n	8006976 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006998:	4b10      	ldr	r3, [pc, #64]	@ (80069dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0f      	ldr	r2, [pc, #60]	@ (80069dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800699e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069a4:	f7fd fe1c 	bl	80045e0 <HAL_GetTick>
 80069a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069aa:	e009      	b.n	80069c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069ac:	f7fd fe18 	bl	80045e0 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069ba:	d901      	bls.n	80069c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e007      	b.n	80069d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069c0:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069cc:	d1ee      	bne.n	80069ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40007000 	.word	0x40007000

080069e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069e8:	f7fd fdfa 	bl	80045e0 <HAL_GetTick>
 80069ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e067      	b.n	8006ac8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10b      	bne.n	8006a1c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7fc fa7b 	bl	8002f08 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006a12:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f85e 	bl	8006ad8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	021a      	lsls	r2, r3, #8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2120      	movs	r1, #32
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f856 	bl	8006af4 <QSPI_WaitFlagStateUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d135      	bne.n	8006abe <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad0 <HAL_QSPI_Init+0xf0>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	0611      	lsls	r1, r2, #24
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	68d2      	ldr	r2, [r2, #12]
 8006a66:	4311      	orrs	r1, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	69d2      	ldr	r2, [r2, #28]
 8006a6c:	4311      	orrs	r1, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6a12      	ldr	r2, [r2, #32]
 8006a72:	4311      	orrs	r1, r2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <HAL_QSPI_Init+0xf4>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6912      	ldr	r2, [r2, #16]
 8006a8a:	0411      	lsls	r1, r2, #16
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6952      	ldr	r2, [r2, #20]
 8006a90:	4311      	orrs	r1, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6992      	ldr	r2, [r2, #24]
 8006a96:	4311      	orrs	r1, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6812      	ldr	r2, [r2, #0]
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	00ffff2f 	.word	0x00ffff2f
 8006ad4:	ffe0f8fe 	.word	0xffe0f8fe

08006ad8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b04:	e01a      	b.n	8006b3c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d016      	beq.n	8006b3c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fd fd67 	bl	80045e0 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10b      	bne.n	8006b3c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2204      	movs	r2, #4
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b30:	f043 0201 	orr.w	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e00e      	b.n	8006b5a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf14      	ite	ne
 8006b4a:	2301      	movne	r3, #1
 8006b4c:	2300      	moveq	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d1d6      	bne.n	8006b06 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e291      	b.n	800709e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8087 	beq.w	8006c96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b88:	4b96      	ldr	r3, [pc, #600]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d00c      	beq.n	8006bae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b94:	4b93      	ldr	r3, [pc, #588]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 030c 	and.w	r3, r3, #12
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d112      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x62>
 8006ba0:	4b90      	ldr	r3, [pc, #576]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bae:	4b8d      	ldr	r3, [pc, #564]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d06c      	beq.n	8006c94 <HAL_RCC_OscConfig+0x130>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d168      	bne.n	8006c94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e26b      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0x7a>
 8006bd0:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a83      	ldr	r2, [pc, #524]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	e02e      	b.n	8006c3c <HAL_RCC_OscConfig+0xd8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x9c>
 8006be6:	4b7f      	ldr	r3, [pc, #508]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7e      	ldr	r2, [pc, #504]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a7b      	ldr	r2, [pc, #492]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006bf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e01d      	b.n	8006c3c <HAL_RCC_OscConfig+0xd8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCC_OscConfig+0xc0>
 8006c0a:	4b76      	ldr	r3, [pc, #472]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a75      	ldr	r2, [pc, #468]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a72      	ldr	r2, [pc, #456]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e00b      	b.n	8006c3c <HAL_RCC_OscConfig+0xd8>
 8006c24:	4b6f      	ldr	r3, [pc, #444]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6e      	ldr	r2, [pc, #440]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4b6c      	ldr	r3, [pc, #432]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6b      	ldr	r2, [pc, #428]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d013      	beq.n	8006c6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fd fccc 	bl	80045e0 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c4c:	f7fd fcc8 	bl	80045e0 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b64      	cmp	r3, #100	@ 0x64
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e21f      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	4b61      	ldr	r3, [pc, #388]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0xe8>
 8006c6a:	e014      	b.n	8006c96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fd fcb8 	bl	80045e0 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c74:	f7fd fcb4 	bl	80045e0 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b64      	cmp	r3, #100	@ 0x64
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e20b      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	4b57      	ldr	r3, [pc, #348]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x110>
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d069      	beq.n	8006d76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ca2:	4b50      	ldr	r3, [pc, #320]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 030c 	and.w	r3, r3, #12
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cae:	4b4d      	ldr	r3, [pc, #308]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 030c 	and.w	r3, r3, #12
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d11c      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x190>
 8006cba:	4b4a      	ldr	r3, [pc, #296]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d116      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc6:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_RCC_OscConfig+0x17a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e1df      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	493d      	ldr	r1, [pc, #244]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf2:	e040      	b.n	8006d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d023      	beq.n	8006d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cfc:	4b39      	ldr	r3, [pc, #228]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a38      	ldr	r2, [pc, #224]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d08:	f7fd fc6a 	bl	80045e0 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d10:	f7fd fc66 	bl	80045e0 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e1bd      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d22:	4b30      	ldr	r3, [pc, #192]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4929      	ldr	r1, [pc, #164]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	600b      	str	r3, [r1, #0]
 8006d42:	e018      	b.n	8006d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d44:	4b27      	ldr	r3, [pc, #156]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a26      	ldr	r2, [pc, #152]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fd fc46 	bl	80045e0 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d58:	f7fd fc42 	bl	80045e0 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e199      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d038      	beq.n	8006df4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d019      	beq.n	8006dbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d8a:	4b16      	ldr	r3, [pc, #88]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d8e:	4a15      	ldr	r2, [pc, #84]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006d90:	f043 0301 	orr.w	r3, r3, #1
 8006d94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7fd fc23 	bl	80045e0 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d9e:	f7fd fc1f 	bl	80045e0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e176      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db0:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f0      	beq.n	8006d9e <HAL_RCC_OscConfig+0x23a>
 8006dbc:	e01a      	b.n	8006df4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dbe:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dc2:	4a08      	ldr	r2, [pc, #32]	@ (8006de4 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dca:	f7fd fc09 	bl	80045e0 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	e00a      	b.n	8006de8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd2:	f7fd fc05 	bl	80045e0 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d903      	bls.n	8006de8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e15c      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
 8006de4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de8:	4b91      	ldr	r3, [pc, #580]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ee      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a4 	beq.w	8006f4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e02:	4b8b      	ldr	r3, [pc, #556]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10d      	bne.n	8006e2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	4b88      	ldr	r3, [pc, #544]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	4a87      	ldr	r2, [pc, #540]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e1a:	4b85      	ldr	r3, [pc, #532]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e2a:	4b82      	ldr	r3, [pc, #520]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d118      	bne.n	8006e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006e36:	4b7f      	ldr	r3, [pc, #508]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e42:	f7fd fbcd 	bl	80045e0 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4a:	f7fd fbc9 	bl	80045e0 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b64      	cmp	r3, #100	@ 0x64
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e120      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e5c:	4b75      	ldr	r3, [pc, #468]	@ (8007034 <HAL_RCC_OscConfig+0x4d0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d106      	bne.n	8006e7e <HAL_RCC_OscConfig+0x31a>
 8006e70:	4b6f      	ldr	r3, [pc, #444]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e74:	4a6e      	ldr	r2, [pc, #440]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e7c:	e02d      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x33c>
 8006e86:	4b6a      	ldr	r3, [pc, #424]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e8a:	4a69      	ldr	r2, [pc, #420]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e8c:	f023 0301 	bic.w	r3, r3, #1
 8006e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e92:	4b67      	ldr	r3, [pc, #412]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a66      	ldr	r2, [pc, #408]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	e01c      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b05      	cmp	r3, #5
 8006ea6:	d10c      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x35e>
 8006ea8:	4b61      	ldr	r3, [pc, #388]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eac:	4a60      	ldr	r2, [pc, #384]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eae:	f043 0304 	orr.w	r3, r3, #4
 8006eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ec0:	e00b      	b.n	8006eda <HAL_RCC_OscConfig+0x376>
 8006ec2:	4b5b      	ldr	r3, [pc, #364]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ece:	4b58      	ldr	r3, [pc, #352]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed2:	4a57      	ldr	r2, [pc, #348]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ed4:	f023 0304 	bic.w	r3, r3, #4
 8006ed8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d015      	beq.n	8006f0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee2:	f7fd fb7d 	bl	80045e0 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee8:	e00a      	b.n	8006f00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eea:	f7fd fb79 	bl	80045e0 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e0ce      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f00:	4b4b      	ldr	r3, [pc, #300]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0ee      	beq.n	8006eea <HAL_RCC_OscConfig+0x386>
 8006f0c:	e014      	b.n	8006f38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0e:	f7fd fb67 	bl	80045e0 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f14:	e00a      	b.n	8006f2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f16:	f7fd fb63 	bl	80045e0 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e0b8      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f2c:	4b40      	ldr	r3, [pc, #256]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ee      	bne.n	8006f16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d105      	bne.n	8006f4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f42:	4a3b      	ldr	r2, [pc, #236]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f48:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80a4 	beq.w	800709c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f54:	4b36      	ldr	r3, [pc, #216]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 030c 	and.w	r3, r3, #12
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d06b      	beq.n	8007038 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d149      	bne.n	8006ffc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f68:	4b31      	ldr	r3, [pc, #196]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a30      	ldr	r2, [pc, #192]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fd fb34 	bl	80045e0 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f7c:	f7fd fb30 	bl	80045e0 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e087      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8e:	4b28      	ldr	r3, [pc, #160]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69da      	ldr	r2, [r3, #28]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	019b      	lsls	r3, r3, #6
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	061b      	lsls	r3, r3, #24
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006fc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fc8:	4b19      	ldr	r3, [pc, #100]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a18      	ldr	r2, [pc, #96]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fd fb04 	bl	80045e0 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fdc:	f7fd fb00 	bl	80045e0 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e057      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fee:	4b10      	ldr	r3, [pc, #64]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0x478>
 8006ffa:	e04f      	b.n	800709c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0b      	ldr	r2, [pc, #44]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8007002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fd faea 	bl	80045e0 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007010:	f7fd fae6 	bl	80045e0 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e03d      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	4b03      	ldr	r3, [pc, #12]	@ (8007030 <HAL_RCC_OscConfig+0x4cc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <HAL_RCC_OscConfig+0x4ac>
 800702e:	e035      	b.n	800709c <HAL_RCC_OscConfig+0x538>
 8007030:	40023800 	.word	0x40023800
 8007034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007038:	4b1b      	ldr	r3, [pc, #108]	@ (80070a8 <HAL_RCC_OscConfig+0x544>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d028      	beq.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007050:	429a      	cmp	r2, r3
 8007052:	d121      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705e:	429a      	cmp	r2, r3
 8007060:	d11a      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007068:	4013      	ands	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800706e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007070:	4293      	cmp	r3, r2
 8007072:	d111      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	3b01      	subs	r3, #1
 8007082:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d107      	bne.n	8007098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40023800 	.word	0x40023800

080070ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0d0      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d910      	bls.n	80070f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d2:	4b67      	ldr	r3, [pc, #412]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f023 020f 	bic.w	r2, r3, #15
 80070da:	4965      	ldr	r1, [pc, #404]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b63      	ldr	r3, [pc, #396]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0b8      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d020      	beq.n	8007142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800710c:	4b59      	ldr	r3, [pc, #356]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4a58      	ldr	r2, [pc, #352]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4a52      	ldr	r2, [pc, #328]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800712a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800712e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007130:	4b50      	ldr	r3, [pc, #320]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	494d      	ldr	r1, [pc, #308]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d040      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d107      	bne.n	8007166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007156:	4b47      	ldr	r3, [pc, #284]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d115      	bne.n	800718e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e07f      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d107      	bne.n	800717e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800716e:	4b41      	ldr	r3, [pc, #260]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e073      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717e:	4b3d      	ldr	r3, [pc, #244]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e06b      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800718e:	4b39      	ldr	r3, [pc, #228]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f023 0203 	bic.w	r2, r3, #3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	4936      	ldr	r1, [pc, #216]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800719c:	4313      	orrs	r3, r2
 800719e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071a0:	f7fd fa1e 	bl	80045e0 <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a6:	e00a      	b.n	80071be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a8:	f7fd fa1a 	bl	80045e0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e053      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071be:	4b2d      	ldr	r3, [pc, #180]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 020c 	and.w	r2, r3, #12
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d1eb      	bne.n	80071a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071d0:	4b27      	ldr	r3, [pc, #156]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d210      	bcs.n	8007200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071de:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 020f 	bic.w	r2, r3, #15
 80071e6:	4922      	ldr	r1, [pc, #136]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ee:	4b20      	ldr	r3, [pc, #128]	@ (8007270 <HAL_RCC_ClockConfig+0x1c4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e032      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800720c:	4b19      	ldr	r3, [pc, #100]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4916      	ldr	r1, [pc, #88]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800721a:	4313      	orrs	r3, r2
 800721c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800722a:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	490e      	ldr	r1, [pc, #56]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 800723a:	4313      	orrs	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800723e:	f000 f821 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 8007242:	4602      	mov	r2, r0
 8007244:	4b0b      	ldr	r3, [pc, #44]	@ (8007274 <HAL_RCC_ClockConfig+0x1c8>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	091b      	lsrs	r3, r3, #4
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	490a      	ldr	r1, [pc, #40]	@ (8007278 <HAL_RCC_ClockConfig+0x1cc>)
 8007250:	5ccb      	ldrb	r3, [r1, r3]
 8007252:	fa22 f303 	lsr.w	r3, r2, r3
 8007256:	4a09      	ldr	r2, [pc, #36]	@ (800727c <HAL_RCC_ClockConfig+0x1d0>)
 8007258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800725a:	4b09      	ldr	r3, [pc, #36]	@ (8007280 <HAL_RCC_ClockConfig+0x1d4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f7fc faa6 	bl	80037b0 <HAL_InitTick>

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	40023c00 	.word	0x40023c00
 8007274:	40023800 	.word	0x40023800
 8007278:	08014c70 	.word	0x08014c70
 800727c:	20000004 	.word	0x20000004
 8007280:	20000008 	.word	0x20000008

08007284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007288:	b090      	sub	sp, #64	@ 0x40
 800728a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007290:	2300      	movs	r3, #0
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007294:	2300      	movs	r3, #0
 8007296:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800729c:	4b59      	ldr	r3, [pc, #356]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d00d      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0x40>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	f200 80a1 	bhi.w	80073f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x34>
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d003      	beq.n	80072be <HAL_RCC_GetSysClockFreq+0x3a>
 80072b6:	e09b      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072b8:	4b53      	ldr	r3, [pc, #332]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x184>)
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072bc:	e09b      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072be:	4b53      	ldr	r3, [pc, #332]	@ (800740c <HAL_RCC_GetSysClockFreq+0x188>)
 80072c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072c2:	e098      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80072ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d028      	beq.n	800732c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072da:	4b4a      	ldr	r3, [pc, #296]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	099b      	lsrs	r3, r3, #6
 80072e0:	2200      	movs	r2, #0
 80072e2:	623b      	str	r3, [r7, #32]
 80072e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072ec:	2100      	movs	r1, #0
 80072ee:	4b47      	ldr	r3, [pc, #284]	@ (800740c <HAL_RCC_GetSysClockFreq+0x188>)
 80072f0:	fb03 f201 	mul.w	r2, r3, r1
 80072f4:	2300      	movs	r3, #0
 80072f6:	fb00 f303 	mul.w	r3, r0, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	4a43      	ldr	r2, [pc, #268]	@ (800740c <HAL_RCC_GetSysClockFreq+0x188>)
 80072fe:	fba0 1202 	umull	r1, r2, r0, r2
 8007302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007304:	460a      	mov	r2, r1
 8007306:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800730a:	4413      	add	r3, r2
 800730c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	2200      	movs	r2, #0
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	61fa      	str	r2, [r7, #28]
 8007316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800731a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800731e:	f7f9 fcd3 	bl	8000cc8 <__aeabi_uldivmod>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4613      	mov	r3, r2
 8007328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800732a:	e053      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732c:	4b35      	ldr	r3, [pc, #212]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	099b      	lsrs	r3, r3, #6
 8007332:	2200      	movs	r2, #0
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	617a      	str	r2, [r7, #20]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800733e:	f04f 0b00 	mov.w	fp, #0
 8007342:	4652      	mov	r2, sl
 8007344:	465b      	mov	r3, fp
 8007346:	f04f 0000 	mov.w	r0, #0
 800734a:	f04f 0100 	mov.w	r1, #0
 800734e:	0159      	lsls	r1, r3, #5
 8007350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007354:	0150      	lsls	r0, r2, #5
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	ebb2 080a 	subs.w	r8, r2, sl
 800735e:	eb63 090b 	sbc.w	r9, r3, fp
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800736e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007372:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007376:	ebb2 0408 	subs.w	r4, r2, r8
 800737a:	eb63 0509 	sbc.w	r5, r3, r9
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	00eb      	lsls	r3, r5, #3
 8007388:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800738c:	00e2      	lsls	r2, r4, #3
 800738e:	4614      	mov	r4, r2
 8007390:	461d      	mov	r5, r3
 8007392:	eb14 030a 	adds.w	r3, r4, sl
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	eb45 030b 	adc.w	r3, r5, fp
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073aa:	4629      	mov	r1, r5
 80073ac:	028b      	lsls	r3, r1, #10
 80073ae:	4621      	mov	r1, r4
 80073b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073b4:	4621      	mov	r1, r4
 80073b6:	028a      	lsls	r2, r1, #10
 80073b8:	4610      	mov	r0, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073be:	2200      	movs	r2, #0
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	60fa      	str	r2, [r7, #12]
 80073c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073c8:	f7f9 fc7e 	bl	8000cc8 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4613      	mov	r3, r2
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	3301      	adds	r3, #1
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80073e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x184>)
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3740      	adds	r7, #64	@ 0x40
 80073fc:	46bd      	mov	sp, r7
 80073fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800
 8007408:	00f42400 	.word	0x00f42400
 800740c:	017d7840 	.word	0x017d7840

08007410 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007414:	4b03      	ldr	r3, [pc, #12]	@ (8007424 <HAL_RCC_GetHCLKFreq+0x14>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	4618      	mov	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000004 	.word	0x20000004

08007428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800742c:	f7ff fff0 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	0a9b      	lsrs	r3, r3, #10
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4903      	ldr	r1, [pc, #12]	@ (800744c <HAL_RCC_GetPCLK1Freq+0x24>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	08014c80 	.word	0x08014c80

08007450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007454:	f7ff ffdc 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007458:	4602      	mov	r2, r0
 800745a:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	0b5b      	lsrs	r3, r3, #13
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	4903      	ldr	r1, [pc, #12]	@ (8007474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007466:	5ccb      	ldrb	r3, [r1, r3]
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40023800 	.word	0x40023800
 8007474:	08014c80 	.word	0x08014c80

08007478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	220f      	movs	r2, #15
 8007486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007488:	4b12      	ldr	r3, [pc, #72]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0203 	and.w	r2, r3, #3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007494:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80074ac:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <HAL_RCC_GetClockConfig+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40023c00 	.word	0x40023c00

080074dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d012      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007504:	4b69      	ldr	r3, [pc, #420]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a68      	ldr	r2, [pc, #416]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800750e:	6093      	str	r3, [r2, #8]
 8007510:	4b66      	ldr	r3, [pc, #408]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007518:	4964      	ldr	r1, [pc, #400]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751a:	4313      	orrs	r3, r2
 800751c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d017      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007536:	4b5d      	ldr	r3, [pc, #372]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800753c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007544:	4959      	ldr	r1, [pc, #356]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007554:	d101      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007556:	2301      	movs	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007562:	2301      	movs	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d017      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007572:	4b4e      	ldr	r3, [pc, #312]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007578:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007580:	494a      	ldr	r1, [pc, #296]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007590:	d101      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800759e:	2301      	movs	r3, #1
 80075a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 808b 	beq.w	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075c0:	4b3a      	ldr	r3, [pc, #232]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	4a39      	ldr	r2, [pc, #228]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80075cc:	4b37      	ldr	r3, [pc, #220]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075d8:	4b35      	ldr	r3, [pc, #212]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a34      	ldr	r2, [pc, #208]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fc fffc 	bl	80045e0 <HAL_GetTick>
 80075e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ec:	f7fc fff8 	bl	80045e0 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b64      	cmp	r3, #100	@ 0x64
 80075f8:	d901      	bls.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e357      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075fe:	4b2c      	ldr	r3, [pc, #176]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800760a:	4b28      	ldr	r3, [pc, #160]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d035      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d02e      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007628:	4b20      	ldr	r3, [pc, #128]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800762a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007632:	4b1e      	ldr	r3, [pc, #120]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007636:	4a1d      	ldr	r2, [pc, #116]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	4a1a      	ldr	r2, [pc, #104]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007648:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d114      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765c:	f7fc ffc0 	bl	80045e0 <HAL_GetTick>
 8007660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007662:	e00a      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007664:	f7fc ffbc 	bl	80045e0 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e319      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800767a:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ee      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007692:	d111      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80076a0:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076a2:	400b      	ands	r3, r1
 80076a4:	4901      	ldr	r1, [pc, #4]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	608b      	str	r3, [r1, #8]
 80076aa:	e00b      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40007000 	.word	0x40007000
 80076b4:	0ffffcff 	.word	0x0ffffcff
 80076b8:	4baa      	ldr	r3, [pc, #680]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4aa9      	ldr	r2, [pc, #676]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076c2:	6093      	str	r3, [r2, #8]
 80076c4:	4ba7      	ldr	r3, [pc, #668]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d0:	49a4      	ldr	r1, [pc, #656]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d010      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076e2:	4ba0      	ldr	r3, [pc, #640]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e8:	4a9e      	ldr	r2, [pc, #632]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80076f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	4999      	ldr	r1, [pc, #612]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007710:	4b94      	ldr	r3, [pc, #592]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007716:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800771e:	4991      	ldr	r1, [pc, #580]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007732:	4b8c      	ldr	r3, [pc, #560]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007738:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007740:	4988      	ldr	r1, [pc, #544]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007754:	4b83      	ldr	r3, [pc, #524]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007762:	4980      	ldr	r1, [pc, #512]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007764:	4313      	orrs	r3, r2
 8007766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007776:	4b7b      	ldr	r3, [pc, #492]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007784:	4977      	ldr	r1, [pc, #476]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007786:	4313      	orrs	r3, r2
 8007788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007798:	4b72      	ldr	r3, [pc, #456]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779e:	f023 0203 	bic.w	r2, r3, #3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a6:	496f      	ldr	r1, [pc, #444]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c0:	f023 020c 	bic.w	r2, r3, #12
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c8:	4966      	ldr	r1, [pc, #408]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00a      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077dc:	4b61      	ldr	r3, [pc, #388]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ea:	495e      	ldr	r1, [pc, #376]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077fe:	4b59      	ldr	r3, [pc, #356]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007804:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780c:	4955      	ldr	r1, [pc, #340]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780e:	4313      	orrs	r3, r2
 8007810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007820:	4b50      	ldr	r3, [pc, #320]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007826:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	494d      	ldr	r1, [pc, #308]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007830:	4313      	orrs	r3, r2
 8007832:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007842:	4b48      	ldr	r3, [pc, #288]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007848:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007850:	4944      	ldr	r1, [pc, #272]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007852:	4313      	orrs	r3, r2
 8007854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007864:	4b3f      	ldr	r3, [pc, #252]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007872:	493c      	ldr	r1, [pc, #240]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007874:	4313      	orrs	r3, r2
 8007876:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007886:	4b37      	ldr	r3, [pc, #220]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007894:	4933      	ldr	r1, [pc, #204]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b6:	492b      	ldr	r1, [pc, #172]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d011      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078ca:	4b26      	ldr	r3, [pc, #152]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078d8:	4922      	ldr	r1, [pc, #136]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078e8:	d101      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800790a:	4b16      	ldr	r3, [pc, #88]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007910:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007918:	4912      	ldr	r1, [pc, #72]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800792c:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007932:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793c:	4909      	ldr	r1, [pc, #36]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d006      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80d9 	beq.w	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007958:	4b02      	ldr	r3, [pc, #8]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a01      	ldr	r2, [pc, #4]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800795e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007962:	e001      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007964:	40023800 	.word	0x40023800
 8007968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796a:	f7fc fe39 	bl	80045e0 <HAL_GetTick>
 800796e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007970:	e008      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007972:	f7fc fe35 	bl	80045e0 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b64      	cmp	r3, #100	@ 0x64
 800797e:	d901      	bls.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e194      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007984:	4b6c      	ldr	r3, [pc, #432]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f0      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d021      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d11d      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80079a4:	4b64      	ldr	r3, [pc, #400]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079aa:	0c1b      	lsrs	r3, r3, #16
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079b2:	4b61      	ldr	r3, [pc, #388]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b8:	0e1b      	lsrs	r3, r3, #24
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	019a      	lsls	r2, r3, #6
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	431a      	orrs	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	061b      	lsls	r3, r3, #24
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	071b      	lsls	r3, r3, #28
 80079d8:	4957      	ldr	r1, [pc, #348]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079f4:	d00a      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02e      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a0a:	d129      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a1a:	4b47      	ldr	r3, [pc, #284]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a20:	0f1b      	lsrs	r3, r3, #28
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	019a      	lsls	r2, r3, #6
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	041b      	lsls	r3, r3, #16
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	061b      	lsls	r3, r3, #24
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	071b      	lsls	r3, r3, #28
 8007a40:	493d      	ldr	r1, [pc, #244]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a48:	4b3b      	ldr	r3, [pc, #236]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a4e:	f023 021f 	bic.w	r2, r3, #31
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4937      	ldr	r1, [pc, #220]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01d      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a6c:	4b32      	ldr	r3, [pc, #200]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a72:	0e1b      	lsrs	r3, r3, #24
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a80:	0f1b      	lsrs	r3, r3, #28
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	019a      	lsls	r2, r3, #6
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	431a      	orrs	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	061b      	lsls	r3, r3, #24
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	071b      	lsls	r3, r3, #28
 8007aa0:	4925      	ldr	r1, [pc, #148]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d011      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	019a      	lsls	r2, r3, #6
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	041b      	lsls	r3, r3, #16
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	061b      	lsls	r3, r3, #24
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	071b      	lsls	r3, r3, #28
 8007ad0:	4919      	ldr	r1, [pc, #100]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ad8:	4b17      	ldr	r3, [pc, #92]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a16      	ldr	r2, [pc, #88]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ade:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae4:	f7fc fd7c 	bl	80045e0 <HAL_GetTick>
 8007ae8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007aea:	e008      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007aec:	f7fc fd78 	bl	80045e0 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b64      	cmp	r3, #100	@ 0x64
 8007af8:	d901      	bls.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e0d7      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007afe:	4b0e      	ldr	r3, [pc, #56]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f0      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	f040 80cd 	bne.w	8007cac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b12:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a08      	ldr	r2, [pc, #32]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1e:	f7fc fd5f 	bl	80045e0 <HAL_GetTick>
 8007b22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b24:	e00a      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b26:	f7fc fd5b 	bl	80045e0 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b64      	cmp	r3, #100	@ 0x64
 8007b32:	d903      	bls.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e0ba      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007b38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b48:	d0ed      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d02e      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d12a      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b72:	4b51      	ldr	r3, [pc, #324]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b80:	4b4d      	ldr	r3, [pc, #308]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b86:	0f1b      	lsrs	r3, r3, #28
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	019a      	lsls	r2, r3, #6
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	061b      	lsls	r3, r3, #24
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	071b      	lsls	r3, r3, #28
 8007ba6:	4944      	ldr	r1, [pc, #272]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007bae:	4b42      	ldr	r3, [pc, #264]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	493d      	ldr	r1, [pc, #244]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d022      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bdc:	d11d      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007bde:	4b36      	ldr	r3, [pc, #216]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be4:	0e1b      	lsrs	r3, r3, #24
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007bec:	4b32      	ldr	r3, [pc, #200]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	0f1b      	lsrs	r3, r3, #28
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	019a      	lsls	r2, r3, #6
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	431a      	orrs	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	061b      	lsls	r3, r3, #24
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	071b      	lsls	r3, r3, #28
 8007c12:	4929      	ldr	r1, [pc, #164]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d028      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c26:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2c:	0e1b      	lsrs	r3, r3, #24
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c34:	4b20      	ldr	r3, [pc, #128]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3a:	0c1b      	lsrs	r3, r3, #16
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	019a      	lsls	r2, r3, #6
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	061b      	lsls	r3, r3, #24
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	071b      	lsls	r3, r3, #28
 8007c5a:	4917      	ldr	r1, [pc, #92]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007c62:	4b15      	ldr	r3, [pc, #84]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	4911      	ldr	r1, [pc, #68]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c78:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c84:	f7fc fcac 	bl	80045e0 <HAL_GetTick>
 8007c88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c8c:	f7fc fca8 	bl	80045e0 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b64      	cmp	r3, #100	@ 0x64
 8007c98:	d901      	bls.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e007      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c9e:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007caa:	d1ef      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40023800 	.word	0x40023800

08007cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007cda:	f040 808d 	bne.w	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007cde:	4b93      	ldr	r3, [pc, #588]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007cec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cf4:	d07c      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cfc:	d87b      	bhi.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d0a:	d039      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007d0c:	e073      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d0e:	4b87      	ldr	r3, [pc, #540]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d108      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d1a:	4b84      	ldr	r3, [pc, #528]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d22:	4a83      	ldr	r2, [pc, #524]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	e007      	b.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d2c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d34:	4a7f      	ldr	r2, [pc, #508]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007d3c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d42:	0e1b      	lsrs	r3, r3, #24
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007d4a:	4b78      	ldr	r3, [pc, #480]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d50:	099b      	lsrs	r3, r3, #6
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	fb03 f202 	mul.w	r2, r3, r2
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d62:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007d64:	4b71      	ldr	r3, [pc, #452]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d6a:	0a1b      	lsrs	r3, r3, #8
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]
        break;
 8007d7e:	e03b      	b.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d80:	4b6a      	ldr	r3, [pc, #424]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d108      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d8c:	4b67      	ldr	r3, [pc, #412]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d94:	4a66      	ldr	r2, [pc, #408]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	e007      	b.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d9e:	4b63      	ldr	r3, [pc, #396]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007da6:	4a63      	ldr	r2, [pc, #396]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007dae:	4b5f      	ldr	r3, [pc, #380]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007db4:	0e1b      	lsrs	r3, r3, #24
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dc2:	099b      	lsrs	r3, r3, #6
 8007dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	fb03 f202 	mul.w	r2, r3, r2
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007dd6:	4b55      	ldr	r3, [pc, #340]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ddc:	f003 031f 	and.w	r3, r3, #31
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	617b      	str	r3, [r7, #20]
        break;
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007df0:	4b51      	ldr	r3, [pc, #324]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007df2:	617b      	str	r3, [r7, #20]
        break;
 8007df4:	e000      	b.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007df6:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dfe:	f040 808d 	bne.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007e02:	4b4a      	ldr	r3, [pc, #296]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e08:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007e10:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e18:	d07c      	beq.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e20:	d87b      	bhi.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e2e:	d039      	beq.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007e30:	e073      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e32:	4b3e      	ldr	r3, [pc, #248]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d108      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e46:	4a3a      	ldr	r2, [pc, #232]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	e007      	b.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e50:	4b36      	ldr	r3, [pc, #216]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e58:	4a36      	ldr	r2, [pc, #216]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007e60:	4b32      	ldr	r3, [pc, #200]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e74:	099b      	lsrs	r3, r3, #6
 8007e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	fb03 f202 	mul.w	r2, r3, r2
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007e88:	4b28      	ldr	r3, [pc, #160]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	617b      	str	r3, [r7, #20]
        break;
 8007ea2:	e03b      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007ea4:	4b21      	ldr	r3, [pc, #132]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d108      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	e007      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eca:	4a1a      	ldr	r2, [pc, #104]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007ed2:	4b16      	ldr	r3, [pc, #88]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ed8:	0e1b      	lsrs	r3, r3, #24
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007ee0:	4b12      	ldr	r3, [pc, #72]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	fb03 f202 	mul.w	r2, r3, r2
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007efa:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	3301      	adds	r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f10:	617b      	str	r3, [r7, #20]
        break;
 8007f12:	e003      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f14:	4b08      	ldr	r3, [pc, #32]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f16:	617b      	str	r3, [r7, #20]
        break;
 8007f18:	e000      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007f1a:	bf00      	nop
      }
    }
  }

  return frequency;
 8007f1c:	697b      	ldr	r3, [r7, #20]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	00f42400 	.word	0x00f42400
 8007f34:	017d7840 	.word	0x017d7840
 8007f38:	00bb8000 	.word	0x00bb8000

08007f3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e071      	b.n	8008032 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7f5b      	ldrb	r3, [r3, #29]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fb f906 	bl	8003170 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d053      	beq.n	8008020 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	22ca      	movs	r2, #202	@ 0xca
 8007f7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2253      	movs	r2, #83	@ 0x53
 8007f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fac7 	bl	800851c <RTC_EnterInitMode>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d12a      	bne.n	8007fee <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6899      	ldr	r1, [r3, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b26      	ldr	r3, [pc, #152]	@ (800803c <HAL_RTC_Init+0x100>)
 8007fa4:	400b      	ands	r3, r1
 8007fa6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6899      	ldr	r1, [r3, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68d2      	ldr	r2, [r2, #12]
 8007fce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6919      	ldr	r1, [r3, #16]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	041a      	lsls	r2, r3, #16
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fad0 	bl	800858a <RTC_ExitInitMode>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d110      	bne.n	8008016 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0208 	bic.w	r2, r2, #8
 8008002:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	699a      	ldr	r2, [r3, #24]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	22ff      	movs	r2, #255	@ 0xff
 800801c:	625a      	str	r2, [r3, #36]	@ 0x24
 800801e:	e001      	b.n	8008024 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	ff8fffbf 	.word	0xff8fffbf

08008040 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7f1b      	ldrb	r3, [r3, #28]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_RTC_SetTime+0x1c>
 8008058:	2302      	movs	r3, #2
 800805a:	e085      	b.n	8008168 <HAL_RTC_SetTime+0x128>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2202      	movs	r2, #2
 8008066:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d126      	bne.n	80080bc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 faa4 	bl	80085d4 <RTC_ByteToBcd2>
 800808c:	4603      	mov	r3, r0
 800808e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	785b      	ldrb	r3, [r3, #1]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fa9d 	bl	80085d4 <RTC_ByteToBcd2>
 800809a:	4603      	mov	r3, r0
 800809c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800809e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	789b      	ldrb	r3, [r3, #2]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fa95 	bl	80085d4 <RTC_ByteToBcd2>
 80080aa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80080ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	78db      	ldrb	r3, [r3, #3]
 80080b4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e018      	b.n	80080ee <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2200      	movs	r2, #0
 80080ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	785b      	ldrb	r3, [r3, #1]
 80080da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080dc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80080e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	78db      	ldrb	r3, [r3, #3]
 80080e8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80080ea:	4313      	orrs	r3, r2
 80080ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	22ca      	movs	r2, #202	@ 0xca
 80080f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2253      	movs	r2, #83	@ 0x53
 80080fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fa0c 	bl	800851c <RTC_EnterInitMode>
 8008104:	4603      	mov	r3, r0
 8008106:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008108:	7cfb      	ldrb	r3, [r7, #19]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11e      	bne.n	800814c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	6979      	ldr	r1, [r7, #20]
 8008114:	4b16      	ldr	r3, [pc, #88]	@ (8008170 <HAL_RTC_SetTime+0x130>)
 8008116:	400b      	ands	r3, r1
 8008118:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008128:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6899      	ldr	r1, [r3, #8]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	431a      	orrs	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fa21 	bl	800858a <RTC_ExitInitMode>
 8008148:	4603      	mov	r3, r0
 800814a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800814c:	7cfb      	ldrb	r3, [r7, #19]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d102      	bne.n	8008158 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	22ff      	movs	r2, #255	@ 0xff
 800815e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	771a      	strb	r2, [r3, #28]

  return status;
 8008166:	7cfb      	ldrb	r3, [r7, #19]
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd90      	pop	{r4, r7, pc}
 8008170:	007f7f7f 	.word	0x007f7f7f

08008174 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008174:	b590      	push	{r4, r7, lr}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	7f1b      	ldrb	r3, [r3, #28]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_RTC_SetDate+0x1c>
 800818c:	2302      	movs	r3, #2
 800818e:	e06f      	b.n	8008270 <HAL_RTC_SetDate+0xfc>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10e      	bne.n	80081c0 <HAL_RTC_SetDate+0x4c>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	f003 0310 	and.w	r3, r3, #16
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	f023 0310 	bic.w	r3, r3, #16
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	330a      	adds	r3, #10
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d11c      	bne.n	8008200 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	78db      	ldrb	r3, [r3, #3]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fa02 	bl	80085d4 <RTC_ByteToBcd2>
 80081d0:	4603      	mov	r3, r0
 80081d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f9fb 	bl	80085d4 <RTC_ByteToBcd2>
 80081de:	4603      	mov	r3, r0
 80081e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80081e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	789b      	ldrb	r3, [r3, #2]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f9f3 	bl	80085d4 <RTC_ByteToBcd2>
 80081ee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80081f0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e00e      	b.n	800821e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800820c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008212:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	22ca      	movs	r2, #202	@ 0xca
 8008224:	625a      	str	r2, [r3, #36]	@ 0x24
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2253      	movs	r2, #83	@ 0x53
 800822c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 f974 	bl	800851c <RTC_EnterInitMode>
 8008234:	4603      	mov	r3, r0
 8008236:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008238:	7cfb      	ldrb	r3, [r7, #19]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <HAL_RTC_SetDate+0x104>)
 8008246:	400b      	ands	r3, r1
 8008248:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 f99d 	bl	800858a <RTC_ExitInitMode>
 8008250:	4603      	mov	r3, r0
 8008252:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	22ff      	movs	r2, #255	@ 0xff
 8008266:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	771a      	strb	r2, [r3, #28]

  return status;
 800826e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}
 8008278:	00ffff3f 	.word	0x00ffff3f

0800827c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b089      	sub	sp, #36	@ 0x24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	7f1b      	ldrb	r3, [r3, #28]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_RTC_SetAlarm+0x24>
 800829c:	2302      	movs	r3, #2
 800829e:	e113      	b.n	80084c8 <HAL_RTC_SetAlarm+0x24c>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2202      	movs	r2, #2
 80082aa:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d137      	bne.n	8008322 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2200      	movs	r2, #0
 80082c4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f982 	bl	80085d4 <RTC_ByteToBcd2>
 80082d0:	4603      	mov	r3, r0
 80082d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f97b 	bl	80085d4 <RTC_ByteToBcd2>
 80082de:	4603      	mov	r3, r0
 80082e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80082e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	789b      	ldrb	r3, [r3, #2]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f973 	bl	80085d4 <RTC_ByteToBcd2>
 80082ee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80082f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	78db      	ldrb	r3, [r3, #3]
 80082f8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80082fa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f965 	bl	80085d4 <RTC_ByteToBcd2>
 800830a:	4603      	mov	r3, r0
 800830c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800830e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008316:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800831c:	4313      	orrs	r3, r2
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	e023      	b.n	800836a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008342:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008348:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	78db      	ldrb	r3, [r3, #3]
 800834e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008350:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008358:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800835a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008360:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008366:	4313      	orrs	r3, r2
 8008368:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	22ca      	movs	r2, #202	@ 0xca
 800837c:	625a      	str	r2, [r3, #36]	@ 0x24
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2253      	movs	r2, #83	@ 0x53
 8008384:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800838e:	d148      	bne.n	8008422 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800839e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083ae:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80083c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083c2:	f7fc f90d 	bl	80045e0 <HAL_GetTick>
 80083c6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80083c8:	e013      	b.n	80083f2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083ca:	f7fc f909 	bl	80045e0 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083d8:	d90b      	bls.n	80083f2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	22ff      	movs	r2, #255	@ 0xff
 80083e0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2203      	movs	r2, #3
 80083e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e06a      	b.n	80084c8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0e4      	beq.n	80083ca <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	e047      	b.n	80084b2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008430:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008440:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	b2da      	uxtb	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008452:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008454:	f7fc f8c4 	bl	80045e0 <HAL_GetTick>
 8008458:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800845a:	e013      	b.n	8008484 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800845c:	f7fc f8c0 	bl	80045e0 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800846a:	d90b      	bls.n	8008484 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	22ff      	movs	r2, #255	@ 0xff
 8008472:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2203      	movs	r2, #3
 8008478:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e021      	b.n	80084c8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0e4      	beq.n	800845c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	22ff      	movs	r2, #255	@ 0xff
 80084b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3724      	adds	r7, #36	@ 0x24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}

080084d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008518 <HAL_RTC_WaitForSynchro+0x48>)
 80084e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084e4:	f7fc f87c 	bl	80045e0 <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80084ea:	e009      	b.n	8008500 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80084ec:	f7fc f878 	bl	80045e0 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084fa:	d901      	bls.n	8008500 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e007      	b.n	8008510 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0ee      	beq.n	80084ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	0001ff5f 	.word	0x0001ff5f

0800851c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d122      	bne.n	8008580 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008548:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800854a:	f7fc f849 	bl	80045e0 <HAL_GetTick>
 800854e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008550:	e00c      	b.n	800856c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008552:	f7fc f845 	bl	80045e0 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008560:	d904      	bls.n	800856c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2204      	movs	r2, #4
 8008566:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <RTC_EnterInitMode+0x64>
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d1e8      	bne.n	8008552 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80085a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff ff8b 	bl	80084d0 <HAL_RTC_WaitForSynchro>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2204      	movs	r2, #4
 80085c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80085e2:	e005      	b.n	80085f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	3b0a      	subs	r3, #10
 80085ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	2b09      	cmp	r3, #9
 80085f4:	d8f6      	bhi.n	80085e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	4313      	orrs	r3, r2
 8008602:	b2db      	uxtb	r3, r3
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	7f1b      	ldrb	r3, [r3, #28]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008628:	2302      	movs	r3, #2
 800862a:	e050      	b.n	80086ce <HAL_RTCEx_SetTimeStamp+0xbe>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2202      	movs	r2, #2
 8008636:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0206 	bic.w	r2, r2, #6
 8008646:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	430a      	orrs	r2, r1
 8008656:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689a      	ldr	r2, [r3, #8]
 800865e:	4b1f      	ldr	r3, [pc, #124]	@ (80086dc <HAL_RTCEx_SetTimeStamp+0xcc>)
 8008660:	4013      	ands	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	22ca      	movs	r2, #202	@ 0xca
 8008672:	625a      	str	r2, [r3, #36]	@ 0x24
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2253      	movs	r2, #83	@ 0x53
 800867a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8008694:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	b2da      	uxtb	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80086a6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086b6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	22ff      	movs	r2, #255	@ 0xff
 80086be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	fffff7f7 	.word	0xfffff7f7

080086e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e156      	b.n	80089ac <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fa fe02 	bl	800331c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f95b 	bl	80089dc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d00c      	beq.n	8008748 <HAL_SAI_Init+0x68>
 800872e:	2b02      	cmp	r3, #2
 8008730:	d80d      	bhi.n	800874e <HAL_SAI_Init+0x6e>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <HAL_SAI_Init+0x5c>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d003      	beq.n	8008742 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800873a:	e008      	b.n	800874e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	61fb      	str	r3, [r7, #28]
      break;
 8008740:	e006      	b.n	8008750 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008742:	2310      	movs	r3, #16
 8008744:	61fb      	str	r3, [r7, #28]
      break;
 8008746:	e003      	b.n	8008750 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008748:	2320      	movs	r3, #32
 800874a:	61fb      	str	r3, [r7, #28]
      break;
 800874c:	e000      	b.n	8008750 <HAL_SAI_Init+0x70>
      break;
 800874e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	2b03      	cmp	r3, #3
 8008756:	d81e      	bhi.n	8008796 <HAL_SAI_Init+0xb6>
 8008758:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <HAL_SAI_Init+0x80>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008771 	.word	0x08008771
 8008764:	08008777 	.word	0x08008777
 8008768:	0800877f 	.word	0x0800877f
 800876c:	08008787 	.word	0x08008787
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
    }
    break;
 8008774:	e010      	b.n	8008798 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800877a:	617b      	str	r3, [r7, #20]
    }
    break;
 800877c:	e00c      	b.n	8008798 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800877e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008782:	617b      	str	r3, [r7, #20]
    }
    break;
 8008784:	e008      	b.n	8008798 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008786:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800878a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008794:	e000      	b.n	8008798 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008796:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a85      	ldr	r2, [pc, #532]	@ (80089b4 <HAL_SAI_Init+0x2d4>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d004      	beq.n	80087ac <HAL_SAI_Init+0xcc>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a84      	ldr	r2, [pc, #528]	@ (80089b8 <HAL_SAI_Init+0x2d8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d103      	bne.n	80087b4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80087ac:	4a83      	ldr	r2, [pc, #524]	@ (80089bc <HAL_SAI_Init+0x2dc>)
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e002      	b.n	80087ba <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80087b4:	4a82      	ldr	r2, [pc, #520]	@ (80089c0 <HAL_SAI_Init+0x2e0>)
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d04c      	beq.n	800885c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a7a      	ldr	r2, [pc, #488]	@ (80089b4 <HAL_SAI_Init+0x2d4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_SAI_Init+0xfa>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a78      	ldr	r2, [pc, #480]	@ (80089b8 <HAL_SAI_Init+0x2d8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d104      	bne.n	80087e4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80087da:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80087de:	f7ff fa6d 	bl	8007cbc <HAL_RCCEx_GetPeriphCLKFreq>
 80087e2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a76      	ldr	r2, [pc, #472]	@ (80089c4 <HAL_SAI_Init+0x2e4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <HAL_SAI_Init+0x118>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a75      	ldr	r2, [pc, #468]	@ (80089c8 <HAL_SAI_Init+0x2e8>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d104      	bne.n	8008802 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80087f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80087fc:	f7ff fa5e 	bl	8007cbc <HAL_RCCEx_GetPeriphCLKFreq>
 8008800:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	025b      	lsls	r3, r3, #9
 8008814:	fbb2 f3f3 	udiv	r3, r2, r3
 8008818:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4a6b      	ldr	r2, [pc, #428]	@ (80089cc <HAL_SAI_Init+0x2ec>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	08da      	lsrs	r2, r3, #3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008828:	68f9      	ldr	r1, [r7, #12]
 800882a:	4b68      	ldr	r3, [pc, #416]	@ (80089cc <HAL_SAI_Init+0x2ec>)
 800882c:	fba3 2301 	umull	r2, r3, r3, r1
 8008830:	08da      	lsrs	r2, r3, #3
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	1aca      	subs	r2, r1, r3
 800883c:	2a08      	cmp	r2, #8
 800883e:	d904      	bls.n	800884a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884e:	2b04      	cmp	r3, #4
 8008850:	d104      	bne.n	800885c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	085a      	lsrs	r2, r3, #1
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_SAI_Init+0x18c>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d109      	bne.n	8008880 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_SAI_Init+0x198>
 8008874:	2300      	movs	r3, #0
 8008876:	e001      	b.n	800887c <HAL_SAI_Init+0x19c>
 8008878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	e008      	b.n	8008892 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d102      	bne.n	800888e <HAL_SAI_Init+0x1ae>
 8008888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800888c:	e000      	b.n	8008890 <HAL_SAI_Init+0x1b0>
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6819      	ldr	r1, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	4b4c      	ldr	r3, [pc, #304]	@ (80089d0 <HAL_SAI_Init+0x2f0>)
 800889e:	400b      	ands	r3, r1
 80088a0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6819      	ldr	r1, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80088b6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088bc:	431a      	orrs	r2, r3
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80088ca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088d6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	051b      	lsls	r3, r3, #20
 80088de:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6859      	ldr	r1, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b38      	ldr	r3, [pc, #224]	@ (80089d4 <HAL_SAI_Init+0x2f4>)
 80088f4:	400b      	ands	r3, r1
 80088f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6859      	ldr	r1, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6899      	ldr	r1, [r3, #8]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b2d      	ldr	r3, [pc, #180]	@ (80089d8 <HAL_SAI_Init+0x2f8>)
 8008922:	400b      	ands	r3, r1
 8008924:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6899      	ldr	r1, [r3, #8]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008930:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008936:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800893c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8008942:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008948:	3b01      	subs	r3, #1
 800894a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800894c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68d9      	ldr	r1, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008964:	400b      	ands	r3, r1
 8008966:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68d9      	ldr	r1, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008976:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008984:	3b01      	subs	r3, #1
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40015804 	.word	0x40015804
 80089b8:	40015824 	.word	0x40015824
 80089bc:	40015800 	.word	0x40015800
 80089c0:	40015c00 	.word	0x40015c00
 80089c4:	40015c04 	.word	0x40015c04
 80089c8:	40015c24 	.word	0x40015c24
 80089cc:	cccccccd 	.word	0xcccccccd
 80089d0:	ff05c010 	.word	0xff05c010
 80089d4:	ffff1ff0 	.word	0xffff1ff0
 80089d8:	fff88000 	.word	0xfff88000

080089dc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80089e4:	4b17      	ldr	r3, [pc, #92]	@ (8008a44 <SAI_Disable+0x68>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a17      	ldr	r2, [pc, #92]	@ (8008a48 <SAI_Disable+0x6c>)
 80089ea:	fba2 2303 	umull	r2, r3, r2, r3
 80089ee:	0b1b      	lsrs	r3, r3, #12
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008a06:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1e5a      	subs	r2, r3, #1
 8008a0c:	60fa      	str	r2, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10a      	bne.n	8008a28 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	72fb      	strb	r3, [r7, #11]
      break;
 8008a26:	e006      	b.n	8008a36 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e8      	bne.n	8008a08 <SAI_Disable+0x2c>

  return status;
 8008a36:	7afb      	ldrb	r3, [r7, #11]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	20000004 	.word	0x20000004
 8008a48:	95cbec1b 	.word	0x95cbec1b

08008a4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e022      	b.n	8008aa4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d105      	bne.n	8008a76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7fa fcdf 	bl	8003434 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f814 	bl	8008aac <HAL_SD_InitCard>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e00a      	b.n	8008aa4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008aac:	b5b0      	push	{r4, r5, r7, lr}
 8008aae:	b08e      	sub	sp, #56	@ 0x38
 8008ab0:	af04      	add	r7, sp, #16
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008ac8:	2376      	movs	r3, #118	@ 0x76
 8008aca:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681d      	ldr	r5, [r3, #0]
 8008ad0:	466c      	mov	r4, sp
 8008ad2:	f107 0318 	add.w	r3, r7, #24
 8008ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ade:	f107 030c 	add.w	r3, r7, #12
 8008ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f003 fe47 	bl	800c778 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008af8:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f003 fe73 	bl	800c7ea <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b12:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008b14:	2002      	movs	r0, #2
 8008b16:	f7fb fd6f 	bl	80045f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fe10 	bl	8009740 <SD_PowerON>
 8008b20:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e02e      	b.n	8008b9e <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fd2f 	bl	80095a4 <SD_InitCard>
 8008b46:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e01b      	b.n	8008b9e <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f003 fece 	bl	800c910 <SDMMC_CmdBlockLength>
 8008b74:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00f      	beq.n	8008b9c <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a09      	ldr	r2, [pc, #36]	@ (8008ba8 <HAL_SD_InitCard+0xfc>)
 8008b82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3728      	adds	r7, #40	@ 0x28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	004005ff 	.word	0x004005ff

08008bac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08c      	sub	sp, #48	@ 0x30
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0c3      	b.n	8008d5c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	f040 80bc 	bne.w	8008d5a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d907      	bls.n	8008c06 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e0aa      	b.n	8008d5c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2203      	movs	r2, #3
 8008c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8008d64 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c32:	4a4d      	ldr	r2, [pc, #308]	@ (8008d68 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008c34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c42:	2200      	movs	r2, #0
 8008c44:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3380      	adds	r3, #128	@ 0x80
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	025b      	lsls	r3, r3, #9
 8008c74:	089b      	lsrs	r3, r3, #2
 8008c76:	f7fc f9c9 	bl	800500c <HAL_DMA_Start_IT>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d017      	beq.n	8008cb0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a35      	ldr	r2, [pc, #212]	@ (8008d6c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008c96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e055      	b.n	8008d5c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f042 0208 	orr.w	r2, r2, #8
 8008cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d002      	beq.n	8008cce <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	025b      	lsls	r3, r3, #9
 8008ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cce:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	025b      	lsls	r3, r3, #9
 8008cd8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cda:	2390      	movs	r3, #144	@ 0x90
 8008cdc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f107 0210 	add.w	r2, r7, #16
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f003 fddf 	bl	800c8b8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d90a      	bls.n	8008d16 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2282      	movs	r2, #130	@ 0x82
 8008d04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f003 fe43 	bl	800c998 <SDMMC_CmdReadMultiBlock>
 8008d12:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d14:	e009      	b.n	8008d2a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2281      	movs	r2, #129	@ 0x81
 8008d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d22:	4618      	mov	r0, r3
 8008d24:	f003 fe16 	bl	800c954 <SDMMC_CmdReadSingleBlock>
 8008d28:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	@ (8008d6c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e002      	b.n	8008d5c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
  }
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3730      	adds	r7, #48	@ 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	0800948f 	.word	0x0800948f
 8008d68:	08009501 	.word	0x08009501
 8008d6c:	004005ff 	.word	0x004005ff

08008d70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08c      	sub	sp, #48	@ 0x30
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d107      	bne.n	8008d98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e0c6      	b.n	8008f26 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	f040 80bf 	bne.w	8008f24 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	441a      	add	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d907      	bls.n	8008dca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dbe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e0ad      	b.n	8008f26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2203      	movs	r2, #3
 8008dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 021a 	orr.w	r2, r2, #26
 8008de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dee:	4a50      	ldr	r2, [pc, #320]	@ (8008f30 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df6:	4a4f      	ldr	r2, [pc, #316]	@ (8008f34 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008df8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dfe:	2200      	movs	r2, #0
 8008e00:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d002      	beq.n	8008e10 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	025b      	lsls	r3, r3, #9
 8008e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d90a      	bls.n	8008e2c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	22a0      	movs	r2, #160	@ 0xa0
 8008e1a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e22:	4618      	mov	r0, r3
 8008e24:	f003 fdfc 	bl	800ca20 <SDMMC_CmdWriteMultiBlock>
 8008e28:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e2a:	e009      	b.n	8008e40 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2290      	movs	r2, #144	@ 0x90
 8008e30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f003 fdcf 	bl	800c9dc <SDMMC_CmdWriteSingleBlock>
 8008e3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d012      	beq.n	8008e6c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8008f38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008e4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e54:	431a      	orrs	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e05c      	b.n	8008f26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0208 	orr.w	r2, r2, #8
 8008e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e80:	2240      	movs	r2, #64	@ 0x40
 8008e82:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3380      	adds	r3, #128	@ 0x80
 8008eac:	461a      	mov	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	025b      	lsls	r3, r3, #9
 8008eb2:	089b      	lsrs	r3, r3, #2
 8008eb4:	f7fc f8aa 	bl	800500c <HAL_DMA_Start_IT>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d01a      	beq.n	8008ef4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 021a 	bic.w	r2, r2, #26
 8008ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a19      	ldr	r2, [pc, #100]	@ (8008f38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008ed4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e018      	b.n	8008f26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	025b      	lsls	r3, r3, #9
 8008efe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f00:	2390      	movs	r3, #144	@ 0x90
 8008f02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f107 0210 	add.w	r2, r7, #16
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f003 fccc 	bl	800c8b8 <SDMMC_ConfigData>

      return HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e000      	b.n	8008f26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3730      	adds	r7, #48	@ 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	08009465 	.word	0x08009465
 8008f34:	08009501 	.word	0x08009501
 8008f38:	004005ff 	.word	0x004005ff

08008f3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f5e:	0f9b      	lsrs	r3, r3, #30
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f6a:	0e9b      	lsrs	r3, r3, #26
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f7c:	0e1b      	lsrs	r3, r3, #24
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f8e:	0c1b      	lsrs	r3, r3, #16
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb0:	0d1b      	lsrs	r3, r3, #20
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fbc:	0c1b      	lsrs	r3, r3, #16
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fce:	0bdb      	lsrs	r3, r3, #15
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fe0:	0b9b      	lsrs	r3, r3, #14
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ff2:	0b5b      	lsrs	r3, r3, #13
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009004:	0b1b      	lsrs	r3, r3, #12
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	b2da      	uxtb	r2, r3
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2200      	movs	r2, #0
 8009016:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800901c:	2b00      	cmp	r3, #0
 800901e:	d163      	bne.n	80090e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009024:	009a      	lsls	r2, r3, #2
 8009026:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800902a:	4013      	ands	r3, r2
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009030:	0f92      	lsrs	r2, r2, #30
 8009032:	431a      	orrs	r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800903c:	0edb      	lsrs	r3, r3, #27
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 0307 	and.w	r3, r3, #7
 8009044:	b2da      	uxtb	r2, r3
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800904e:	0e1b      	lsrs	r3, r3, #24
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	b2da      	uxtb	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009060:	0d5b      	lsrs	r3, r3, #21
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	b2da      	uxtb	r2, r3
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009072:	0c9b      	lsrs	r3, r3, #18
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	b2da      	uxtb	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009084:	0bdb      	lsrs	r3, r3, #15
 8009086:	b2db      	uxtb	r3, r3
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	b2da      	uxtb	r2, r3
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	7e1b      	ldrb	r3, [r3, #24]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	3302      	adds	r3, #2
 80090a8:	2201      	movs	r2, #1
 80090aa:	fa02 f303 	lsl.w	r3, r2, r3
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80090b2:	fb03 f202 	mul.w	r2, r3, r2
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	7a1b      	ldrb	r3, [r3, #8]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	2201      	movs	r2, #1
 80090c6:	409a      	lsls	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80090d4:	0a52      	lsrs	r2, r2, #9
 80090d6:	fb03 f202 	mul.w	r2, r3, r2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80090e6:	e031      	b.n	800914c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d11d      	bne.n	800912c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090f4:	041b      	lsls	r3, r3, #16
 80090f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090fe:	0c1b      	lsrs	r3, r3, #16
 8009100:	431a      	orrs	r2, r3
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	3301      	adds	r3, #1
 800910c:	029a      	lsls	r2, r3, #10
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009120:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	661a      	str	r2, [r3, #96]	@ 0x60
 800912a:	e00f      	b.n	800914c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a58      	ldr	r2, [pc, #352]	@ (8009294 <HAL_SD_GetCardCSD+0x344>)
 8009132:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009138:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e09d      	b.n	8009288 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009150:	0b9b      	lsrs	r3, r3, #14
 8009152:	b2db      	uxtb	r3, r3
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009162:	09db      	lsrs	r3, r3, #7
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800916a:	b2da      	uxtb	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009174:	b2db      	uxtb	r3, r3
 8009176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800917a:	b2da      	uxtb	r2, r3
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009184:	0fdb      	lsrs	r3, r3, #31
 8009186:	b2da      	uxtb	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009190:	0f5b      	lsrs	r3, r3, #29
 8009192:	b2db      	uxtb	r3, r3
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	b2da      	uxtb	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a2:	0e9b      	lsrs	r3, r3, #26
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091b4:	0d9b      	lsrs	r3, r3, #22
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c6:	0d5b      	lsrs	r3, r3, #21
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e2:	0c1b      	lsrs	r3, r3, #16
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091f6:	0bdb      	lsrs	r3, r3, #15
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800920a:	0b9b      	lsrs	r3, r3, #14
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800921e:	0b5b      	lsrs	r3, r3, #13
 8009220:	b2db      	uxtb	r3, r3
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009232:	0b1b      	lsrs	r3, r3, #12
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	b2da      	uxtb	r2, r3
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009246:	0a9b      	lsrs	r3, r3, #10
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	b2da      	uxtb	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925a:	0a1b      	lsrs	r3, r3, #8
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009276:	b2da      	uxtb	r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	004005ff 	.word	0x004005ff

08009298 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80092f0:	b5b0      	push	{r4, r5, r7, lr}
 80092f2:	b08e      	sub	sp, #56	@ 0x38
 80092f4:	af04      	add	r7, sp, #16
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2203      	movs	r2, #3
 8009304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930c:	2b03      	cmp	r3, #3
 800930e:	d02e      	beq.n	800936e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009316:	d106      	bne.n	8009326 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	639a      	str	r2, [r3, #56]	@ 0x38
 8009324:	e029      	b.n	800937a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800932c:	d10a      	bne.n	8009344 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fabc 	bl	80098ac <SD_WideBus_Enable>
 8009334:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	639a      	str	r2, [r3, #56]	@ 0x38
 8009342:	e01a      	b.n	800937a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 faf9 	bl	8009942 <SD_WideBus_Disable>
 8009350:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
 800935e:	e00c      	b.n	800937a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	639a      	str	r2, [r3, #56]	@ 0x38
 800936c:	e005      	b.n	800937a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00b      	beq.n	800939a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a26      	ldr	r2, [pc, #152]	@ (8009420 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009388:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009398:	e01f      	b.n	80093da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681d      	ldr	r5, [r3, #0]
 80093c0:	466c      	mov	r4, sp
 80093c2:	f107 0314 	add.w	r3, r7, #20
 80093c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093ce:	f107 0308 	add.w	r3, r7, #8
 80093d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093d4:	4628      	mov	r0, r5
 80093d6:	f003 f9cf 	bl	800c778 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80093e2:	4618      	mov	r0, r3
 80093e4:	f003 fa94 	bl	800c910 <SDMMC_CmdBlockLength>
 80093e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00c      	beq.n	800940a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009420 <HAL_SD_ConfigWideBusOperation+0x130>)
 80093f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009416:	4618      	mov	r0, r3
 8009418:	3728      	adds	r7, #40	@ 0x28
 800941a:	46bd      	mov	sp, r7
 800941c:	bdb0      	pop	{r4, r5, r7, pc}
 800941e:	bf00      	nop
 8009420:	004005ff 	.word	0x004005ff

08009424 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009430:	f107 030c 	add.w	r3, r7, #12
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa10 	bl	800985c <SD_SendStatus>
 800943c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	0a5b      	lsrs	r3, r3, #9
 8009454:	f003 030f 	and.w	r3, r3, #15
 8009458:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800945a:	693b      	ldr	r3, [r7, #16]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009480:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a0:	2b82      	cmp	r3, #130	@ 0x82
 80094a2:	d111      	bne.n	80094c8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f003 fadb 	bl	800ca64 <SDMMC_CmdStopTransfer>
 80094ae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d008      	beq.n	80094c8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	431a      	orrs	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff fd3a 	bl	8008f3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0208 	bic.w	r2, r2, #8
 80094d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80094e0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f003 ff31 	bl	800d358 <HAL_SD_RxCpltCallback>
#endif
}
 80094f6:	bf00      	nop
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7fb fe6e 	bl	80051f0 <HAL_DMA_GetError>
 8009514:	4603      	mov	r3, r0
 8009516:	2b02      	cmp	r3, #2
 8009518:	d03e      	beq.n	8009598 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009520:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009528:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d002      	beq.n	8009536 <SD_DMAError+0x36>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d12d      	bne.n	8009592 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a19      	ldr	r2, [pc, #100]	@ (80095a0 <SD_DMAError+0xa0>)
 800953c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800954c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009552:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800955a:	6978      	ldr	r0, [r7, #20]
 800955c:	f7ff ff62 	bl	8009424 <HAL_SD_GetCardState>
 8009560:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b06      	cmp	r3, #6
 8009566:	d002      	beq.n	800956e <SD_DMAError+0x6e>
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b05      	cmp	r3, #5
 800956c:	d10a      	bne.n	8009584 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f003 fa76 	bl	800ca64 <SDMMC_CmdStopTransfer>
 8009578:	4602      	mov	r2, r0
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957e:	431a      	orrs	r2, r3
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2200      	movs	r2, #0
 8009590:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f7ff fcd2 	bl	8008f3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8009598:	bf00      	nop
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	004005ff 	.word	0x004005ff

080095a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095a4:	b5b0      	push	{r4, r5, r7, lr}
 80095a6:	b094      	sub	sp, #80	@ 0x50
 80095a8:	af04      	add	r7, sp, #16
 80095aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80095ac:	2301      	movs	r3, #1
 80095ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f003 f926 	bl	800c806 <SDMMC_GetPowerState>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095c0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80095c4:	e0b8      	b.n	8009738 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d02f      	beq.n	800962e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f003 fb51 	bl	800cc7a <SDMMC_CmdSendCID>
 80095d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80095e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e2:	e0a9      	b.n	8009738 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f003 f951 	bl	800c892 <SDMMC_GetResponse>
 80095f0:	4602      	mov	r2, r0
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2104      	movs	r1, #4
 80095fc:	4618      	mov	r0, r3
 80095fe:	f003 f948 	bl	800c892 <SDMMC_GetResponse>
 8009602:	4602      	mov	r2, r0
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2108      	movs	r1, #8
 800960e:	4618      	mov	r0, r3
 8009610:	f003 f93f 	bl	800c892 <SDMMC_GetResponse>
 8009614:	4602      	mov	r2, r0
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	210c      	movs	r1, #12
 8009620:	4618      	mov	r0, r3
 8009622:	f003 f936 	bl	800c892 <SDMMC_GetResponse>
 8009626:	4602      	mov	r2, r0
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009632:	2b03      	cmp	r3, #3
 8009634:	d00d      	beq.n	8009652 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f107 020e 	add.w	r2, r7, #14
 800963e:	4611      	mov	r1, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f003 fb57 	bl	800ccf4 <SDMMC_CmdSetRelAdd>
 8009646:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <SD_InitCard+0xae>
    {
      return errorstate;
 800964e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009650:	e072      	b.n	8009738 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009656:	2b03      	cmp	r3, #3
 8009658:	d036      	beq.n	80096c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800965a:	89fb      	ldrh	r3, [r7, #14]
 800965c:	461a      	mov	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f003 fb21 	bl	800ccb6 <SDMMC_CmdSendCSD>
 8009674:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <SD_InitCard+0xdc>
    {
      return errorstate;
 800967c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800967e:	e05b      	b.n	8009738 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2100      	movs	r1, #0
 8009686:	4618      	mov	r0, r3
 8009688:	f003 f903 	bl	800c892 <SDMMC_GetResponse>
 800968c:	4602      	mov	r2, r0
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2104      	movs	r1, #4
 8009698:	4618      	mov	r0, r3
 800969a:	f003 f8fa 	bl	800c892 <SDMMC_GetResponse>
 800969e:	4602      	mov	r2, r0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2108      	movs	r1, #8
 80096aa:	4618      	mov	r0, r3
 80096ac:	f003 f8f1 	bl	800c892 <SDMMC_GetResponse>
 80096b0:	4602      	mov	r2, r0
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	210c      	movs	r1, #12
 80096bc:	4618      	mov	r0, r3
 80096be:	f003 f8e8 	bl	800c892 <SDMMC_GetResponse>
 80096c2:	4602      	mov	r2, r0
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2104      	movs	r1, #4
 80096ce:	4618      	mov	r0, r3
 80096d0:	f003 f8df 	bl	800c892 <SDMMC_GetResponse>
 80096d4:	4603      	mov	r3, r0
 80096d6:	0d1a      	lsrs	r2, r3, #20
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80096dc:	f107 0310 	add.w	r3, r7, #16
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff fc34 	bl	8008f50 <HAL_SD_GetCardCSD>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80096f2:	e021      	b.n	8009738 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6819      	ldr	r1, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fc:	041b      	lsls	r3, r3, #16
 80096fe:	2200      	movs	r2, #0
 8009700:	461c      	mov	r4, r3
 8009702:	4615      	mov	r5, r2
 8009704:	4622      	mov	r2, r4
 8009706:	462b      	mov	r3, r5
 8009708:	4608      	mov	r0, r1
 800970a:	f003 f9cd 	bl	800caa8 <SDMMC_CmdSelDesel>
 800970e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <SD_InitCard+0x176>
  {
    return errorstate;
 8009716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009718:	e00e      	b.n	8009738 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681d      	ldr	r5, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	466c      	mov	r4, sp
 8009722:	f103 0210 	add.w	r2, r3, #16
 8009726:	ca07      	ldmia	r2, {r0, r1, r2}
 8009728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800972c:	3304      	adds	r3, #4
 800972e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009730:	4628      	mov	r0, r5
 8009732:	f003 f821 	bl	800c778 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3740      	adds	r7, #64	@ 0x40
 800973c:	46bd      	mov	sp, r7
 800973e:	bdb0      	pop	{r4, r5, r7, pc}

08009740 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	2300      	movs	r3, #0
 8009752:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4618      	mov	r0, r3
 800975a:	f003 f9c8 	bl	800caee <SDMMC_CmdGoIdleState>
 800975e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	e072      	b.n	8009850 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f003 f9db 	bl	800cb2a <SDMMC_CmdOperCond>
 8009774:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00d      	beq.n	8009798 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f003 f9b1 	bl	800caee <SDMMC_CmdGoIdleState>
 800978c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	e05b      	b.n	8009850 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d137      	bne.n	8009816 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2100      	movs	r1, #0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f003 f9db 	bl	800cb68 <SDMMC_CmdAppCommand>
 80097b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d02d      	beq.n	8009816 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80097be:	e047      	b.n	8009850 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f003 f9ce 	bl	800cb68 <SDMMC_CmdAppCommand>
 80097cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	e03b      	b.n	8009850 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	491e      	ldr	r1, [pc, #120]	@ (8009858 <SD_PowerON+0x118>)
 80097de:	4618      	mov	r0, r3
 80097e0:	f003 f9e4 	bl	800cbac <SDMMC_CmdAppOperCommand>
 80097e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80097f0:	e02e      	b.n	8009850 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f003 f84a 	bl	800c892 <SDMMC_GetResponse>
 80097fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	0fdb      	lsrs	r3, r3, #31
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <SD_PowerON+0xcc>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <SD_PowerON+0xce>
 800980c:	2300      	movs	r3, #0
 800980e:	613b      	str	r3, [r7, #16]

    count++;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3301      	adds	r3, #1
 8009814:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800981c:	4293      	cmp	r3, r2
 800981e:	d802      	bhi.n	8009826 <SD_PowerON+0xe6>
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0cc      	beq.n	80097c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800982c:	4293      	cmp	r3, r2
 800982e:	d902      	bls.n	8009836 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009830:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009834:	e00c      	b.n	8009850 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	645a      	str	r2, [r3, #68]	@ 0x44
 8009846:	e002      	b.n	800984e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	c1100000 	.word	0xc1100000

0800985c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800986c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009870:	e018      	b.n	80098a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800987a:	041b      	lsls	r3, r3, #16
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f003 fa59 	bl	800cd36 <SDMMC_CmdSendStatus>
 8009884:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <SD_SendStatus+0x34>
  {
    return errorstate;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	e009      	b.n	80098a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f002 fffb 	bl	800c892 <SDMMC_GetResponse>
 800989c:	4602      	mov	r2, r0
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2100      	movs	r1, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 ffe5 	bl	800c892 <SDMMC_GetResponse>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098d2:	d102      	bne.n	80098da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098d8:	e02f      	b.n	800993a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80098da:	f107 030c 	add.w	r3, r7, #12
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f879 	bl	80099d8 <SD_FindSCR>
 80098e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	e023      	b.n	800993a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01c      	beq.n	8009936 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f003 f92d 	bl	800cb68 <SDMMC_CmdAppCommand>
 800990e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	e00f      	b.n	800993a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2102      	movs	r1, #2
 8009920:	4618      	mov	r0, r3
 8009922:	f003 f967 	bl	800cbf4 <SDMMC_CmdBusWidth>
 8009926:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	e003      	b.n	800993a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009932:	2300      	movs	r3, #0
 8009934:	e001      	b.n	800993a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009936:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	2300      	movs	r3, #0
 8009950:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f002 ff9a 	bl	800c892 <SDMMC_GetResponse>
 800995e:	4603      	mov	r3, r0
 8009960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009968:	d102      	bne.n	8009970 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800996a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800996e:	e02f      	b.n	80099d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009970:	f107 030c 	add.w	r3, r7, #12
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f82e 	bl	80099d8 <SD_FindSCR>
 800997c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	e023      	b.n	80099d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01c      	beq.n	80099cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800999a:	041b      	lsls	r3, r3, #16
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f003 f8e2 	bl	800cb68 <SDMMC_CmdAppCommand>
 80099a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	e00f      	b.n	80099d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f003 f91c 	bl	800cbf4 <SDMMC_CmdBusWidth>
 80099bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	e003      	b.n	80099d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099c8:	2300      	movs	r3, #0
 80099ca:	e001      	b.n	80099d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80099d8:	b590      	push	{r4, r7, lr}
 80099da:	b08f      	sub	sp, #60	@ 0x3c
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099e2:	f7fa fdfd 	bl	80045e0 <HAL_GetTick>
 80099e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80099ec:	2300      	movs	r3, #0
 80099ee:	60bb      	str	r3, [r7, #8]
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2108      	movs	r1, #8
 80099fe:	4618      	mov	r0, r3
 8009a00:	f002 ff86 	bl	800c910 <SDMMC_CmdBlockLength>
 8009a04:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0e:	e0b2      	b.n	8009b76 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a18:	041b      	lsls	r3, r3, #16
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f003 f8a3 	bl	800cb68 <SDMMC_CmdAppCommand>
 8009a22:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2c:	e0a3      	b.n	8009b76 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009a34:	2308      	movs	r3, #8
 8009a36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009a38:	2330      	movs	r3, #48	@ 0x30
 8009a3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f107 0210 	add.w	r2, r7, #16
 8009a50:	4611      	mov	r1, r2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f002 ff30 	bl	800c8b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f003 f8eb 	bl	800cc38 <SDMMC_CmdSendSCR>
 8009a62:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d02a      	beq.n	8009ac0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	e083      	b.n	8009b76 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00f      	beq.n	8009a9c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6819      	ldr	r1, [r3, #0]
 8009a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	f107 0208 	add.w	r2, r7, #8
 8009a88:	18d4      	adds	r4, r2, r3
 8009a8a:	4608      	mov	r0, r1
 8009a8c:	f002 fea0 	bl	800c7d0 <SDMMC_ReadFIFO>
 8009a90:	4603      	mov	r3, r0
 8009a92:	6023      	str	r3, [r4, #0]
      index++;
 8009a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a96:	3301      	adds	r3, #1
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a9a:	e006      	b.n	8009aaa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d012      	beq.n	8009ad0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009aaa:	f7fa fd99 	bl	80045e0 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d102      	bne.n	8009ac0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009aba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009abe:	e05a      	b.n	8009b76 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0cf      	beq.n	8009a6e <SD_FindSCR+0x96>
 8009ace:	e000      	b.n	8009ad2 <SD_FindSCR+0xfa>
      break;
 8009ad0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad8:	f003 0308 	and.w	r3, r3, #8
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ae8:	2308      	movs	r3, #8
 8009aea:	e044      	b.n	8009b76 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2202      	movs	r2, #2
 8009b00:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b02:	2302      	movs	r3, #2
 8009b04:	e037      	b.n	8009b76 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	e02a      	b.n	8009b76 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009b28:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	061a      	lsls	r2, r3, #24
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b36:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	0e1b      	lsrs	r3, r3, #24
 8009b46:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	601a      	str	r2, [r3, #0]
    scr++;
 8009b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4e:	3304      	adds	r3, #4
 8009b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	061a      	lsls	r2, r3, #24
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	021b      	lsls	r3, r3, #8
 8009b5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b5e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	0a1b      	lsrs	r3, r3, #8
 8009b64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	0e1b      	lsrs	r3, r3, #24
 8009b6e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b72:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	373c      	adds	r7, #60	@ 0x3c
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd90      	pop	{r4, r7, pc}

08009b7e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e025      	b.n	8009bde <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7f7 fe58 	bl	800185c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f002 fd14 	bl	800c5ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6818      	ldr	r0, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	f002 fd68 	bl	800c6a4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e04c      	b.n	8009c94 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d106      	bne.n	8009c14 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7f9 fca2 	bl	8003558 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0203 	bic.w	r2, r2, #3
 8009c2a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4b19      	ldr	r3, [pc, #100]	@ (8009c9c <HAL_SPDIFRX_Init+0xb4>)
 8009c38:	4013      	ands	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009c44:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009c4a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009c50:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009c56:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009c5c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009c62:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009c68:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8009c6e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8009c74:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	fff88407 	.word	0xfff88407

08009ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e09d      	b.n	8009dee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d108      	bne.n	8009ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cc2:	d009      	beq.n	8009cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	61da      	str	r2, [r3, #28]
 8009cca:	e005      	b.n	8009cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7f9 fcd2 	bl	800369c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d18:	d902      	bls.n	8009d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	e002      	b.n	8009d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009d2e:	d007      	beq.n	8009d40 <HAL_SPI_Init+0xa0>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d38:	d002      	beq.n	8009d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009d50:	431a      	orrs	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d78:	431a      	orrs	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d82:	ea42 0103 	orr.w	r1, r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	0c1b      	lsrs	r3, r3, #16
 8009d9c:	f003 0204 	and.w	r2, r3, #4
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009dbc:	ea42 0103 	orr.w	r1, r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	69da      	ldr	r2, [r3, #28]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e049      	b.n	8009e9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d106      	bne.n	8009e22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7fa f909 	bl	8004034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2202      	movs	r2, #2
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f000 fc11 	bl	800a65c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d001      	beq.n	8009ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e054      	b.n	8009f66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a26      	ldr	r2, [pc, #152]	@ (8009f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d022      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d01d      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a22      	ldr	r2, [pc, #136]	@ (8009f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d018      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a21      	ldr	r2, [pc, #132]	@ (8009f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d013      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a1f      	ldr	r2, [pc, #124]	@ (8009f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00e      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009f84 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d009      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1c      	ldr	r2, [pc, #112]	@ (8009f88 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d004      	beq.n	8009f24 <HAL_TIM_Base_Start_IT+0x80>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009f8c <HAL_TIM_Base_Start_IT+0xe8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d115      	bne.n	8009f50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	4b19      	ldr	r3, [pc, #100]	@ (8009f90 <HAL_TIM_Base_Start_IT+0xec>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b06      	cmp	r3, #6
 8009f34:	d015      	beq.n	8009f62 <HAL_TIM_Base_Start_IT+0xbe>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f3c:	d011      	beq.n	8009f62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 0201 	orr.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4e:	e008      	b.n	8009f62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e000      	b.n	8009f64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40010000 	.word	0x40010000
 8009f78:	40000400 	.word	0x40000400
 8009f7c:	40000800 	.word	0x40000800
 8009f80:	40000c00 	.word	0x40000c00
 8009f84:	40010400 	.word	0x40010400
 8009f88:	40014000 	.word	0x40014000
 8009f8c:	40001800 	.word	0x40001800
 8009f90:	00010007 	.word	0x00010007

08009f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e049      	b.n	800a03a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fa f8a8 	bl	8004110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	f000 fb42 	bl	800a65c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d020      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01b      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f06f 0202 	mvn.w	r2, #2
 800a076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	f003 0303 	and.w	r3, r3, #3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fac7 	bl	800a620 <HAL_TIM_IC_CaptureCallback>
 800a092:	e005      	b.n	800a0a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fab9 	bl	800a60c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 faca 	bl	800a634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d020      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d01b      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f06f 0204 	mvn.w	r2, #4
 800a0c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 faa1 	bl	800a620 <HAL_TIM_IC_CaptureCallback>
 800a0de:	e005      	b.n	800a0ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fa93 	bl	800a60c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 faa4 	bl	800a634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f003 0308 	and.w	r3, r3, #8
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d020      	beq.n	800a13e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f003 0308 	and.w	r3, r3, #8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d01b      	beq.n	800a13e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f06f 0208 	mvn.w	r2, #8
 800a10e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2204      	movs	r2, #4
 800a114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	f003 0303 	and.w	r3, r3, #3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fa7b 	bl	800a620 <HAL_TIM_IC_CaptureCallback>
 800a12a:	e005      	b.n	800a138 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fa6d 	bl	800a60c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa7e 	bl	800a634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	d020      	beq.n	800a18a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f003 0310 	and.w	r3, r3, #16
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d01b      	beq.n	800a18a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f06f 0210 	mvn.w	r2, #16
 800a15a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2208      	movs	r2, #8
 800a160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa55 	bl	800a620 <HAL_TIM_IC_CaptureCallback>
 800a176:	e005      	b.n	800a184 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa47 	bl	800a60c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa58 	bl	800a634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00c      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d007      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f06f 0201 	mvn.w	r2, #1
 800a1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7f8 fe69 	bl	8002e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00c      	beq.n	800a1dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fef4 	bl	800afc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00c      	beq.n	800a200 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d007      	beq.n	800a200 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 feec 	bl	800afd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00c      	beq.n	800a224 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d007      	beq.n	800a224 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa12 	bl	800a648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f003 0320 	and.w	r3, r3, #32
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f06f 0220 	mvn.w	r2, #32
 800a240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 feb4 	bl	800afb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a248:	bf00      	nop
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a266:	2b01      	cmp	r3, #1
 800a268:	d101      	bne.n	800a26e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a26a:	2302      	movs	r3, #2
 800a26c:	e0ff      	b.n	800a46e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b14      	cmp	r3, #20
 800a27a:	f200 80f0 	bhi.w	800a45e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a27e:	a201      	add	r2, pc, #4	@ (adr r2, 800a284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a284:	0800a2d9 	.word	0x0800a2d9
 800a288:	0800a45f 	.word	0x0800a45f
 800a28c:	0800a45f 	.word	0x0800a45f
 800a290:	0800a45f 	.word	0x0800a45f
 800a294:	0800a319 	.word	0x0800a319
 800a298:	0800a45f 	.word	0x0800a45f
 800a29c:	0800a45f 	.word	0x0800a45f
 800a2a0:	0800a45f 	.word	0x0800a45f
 800a2a4:	0800a35b 	.word	0x0800a35b
 800a2a8:	0800a45f 	.word	0x0800a45f
 800a2ac:	0800a45f 	.word	0x0800a45f
 800a2b0:	0800a45f 	.word	0x0800a45f
 800a2b4:	0800a39b 	.word	0x0800a39b
 800a2b8:	0800a45f 	.word	0x0800a45f
 800a2bc:	0800a45f 	.word	0x0800a45f
 800a2c0:	0800a45f 	.word	0x0800a45f
 800a2c4:	0800a3dd 	.word	0x0800a3dd
 800a2c8:	0800a45f 	.word	0x0800a45f
 800a2cc:	0800a45f 	.word	0x0800a45f
 800a2d0:	0800a45f 	.word	0x0800a45f
 800a2d4:	0800a41d 	.word	0x0800a41d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fa62 	bl	800a7a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	699a      	ldr	r2, [r3, #24]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0208 	orr.w	r2, r2, #8
 800a2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699a      	ldr	r2, [r3, #24]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f022 0204 	bic.w	r2, r2, #4
 800a302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6999      	ldr	r1, [r3, #24]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	691a      	ldr	r2, [r3, #16]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	619a      	str	r2, [r3, #24]
      break;
 800a316:	e0a5      	b.n	800a464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68b9      	ldr	r1, [r7, #8]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fab4 	bl	800a88c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699a      	ldr	r2, [r3, #24]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	699a      	ldr	r2, [r3, #24]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6999      	ldr	r1, [r3, #24]
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	021a      	lsls	r2, r3, #8
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	619a      	str	r2, [r3, #24]
      break;
 800a358:	e084      	b.n	800a464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fb0b 	bl	800a97c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69da      	ldr	r2, [r3, #28]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f042 0208 	orr.w	r2, r2, #8
 800a374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	69da      	ldr	r2, [r3, #28]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 0204 	bic.w	r2, r2, #4
 800a384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	69d9      	ldr	r1, [r3, #28]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	430a      	orrs	r2, r1
 800a396:	61da      	str	r2, [r3, #28]
      break;
 800a398:	e064      	b.n	800a464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 fb61 	bl	800aa68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	69da      	ldr	r2, [r3, #28]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	69da      	ldr	r2, [r3, #28]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69d9      	ldr	r1, [r3, #28]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	021a      	lsls	r2, r3, #8
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	61da      	str	r2, [r3, #28]
      break;
 800a3da:	e043      	b.n	800a464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fb98 	bl	800ab18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0208 	orr.w	r2, r2, #8
 800a3f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0204 	bic.w	r2, r2, #4
 800a406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a41a:	e023      	b.n	800a464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fbca 	bl	800abbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a436:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a446:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	021a      	lsls	r2, r3, #8
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a45c:	e002      	b.n	800a464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	75fb      	strb	r3, [r7, #23]
      break;
 800a462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop

0800a478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_TIM_ConfigClockSource+0x1c>
 800a490:	2302      	movs	r3, #2
 800a492:	e0b4      	b.n	800a5fe <HAL_TIM_ConfigClockSource+0x186>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	4b56      	ldr	r3, [pc, #344]	@ (800a608 <HAL_TIM_ConfigClockSource+0x190>)
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4cc:	d03e      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0xd4>
 800a4ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4d2:	f200 8087 	bhi.w	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4da:	f000 8086 	beq.w	800a5ea <HAL_TIM_ConfigClockSource+0x172>
 800a4de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4e2:	d87f      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4e4:	2b70      	cmp	r3, #112	@ 0x70
 800a4e6:	d01a      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0xa6>
 800a4e8:	2b70      	cmp	r3, #112	@ 0x70
 800a4ea:	d87b      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4ec:	2b60      	cmp	r3, #96	@ 0x60
 800a4ee:	d050      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x11a>
 800a4f0:	2b60      	cmp	r3, #96	@ 0x60
 800a4f2:	d877      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4f4:	2b50      	cmp	r3, #80	@ 0x50
 800a4f6:	d03c      	beq.n	800a572 <HAL_TIM_ConfigClockSource+0xfa>
 800a4f8:	2b50      	cmp	r3, #80	@ 0x50
 800a4fa:	d873      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4fc:	2b40      	cmp	r3, #64	@ 0x40
 800a4fe:	d058      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x13a>
 800a500:	2b40      	cmp	r3, #64	@ 0x40
 800a502:	d86f      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a504:	2b30      	cmp	r3, #48	@ 0x30
 800a506:	d064      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a508:	2b30      	cmp	r3, #48	@ 0x30
 800a50a:	d86b      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a50c:	2b20      	cmp	r3, #32
 800a50e:	d060      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a510:	2b20      	cmp	r3, #32
 800a512:	d867      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d05c      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d05a      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a51c:	e062      	b.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a52e:	f000 fc13 	bl	800ad58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	609a      	str	r2, [r3, #8]
      break;
 800a54a:	e04f      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a55c:	f000 fbfc 	bl	800ad58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a56e:	609a      	str	r2, [r3, #8]
      break;
 800a570:	e03c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57e:	461a      	mov	r2, r3
 800a580:	f000 fb70 	bl	800ac64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2150      	movs	r1, #80	@ 0x50
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fbc9 	bl	800ad22 <TIM_ITRx_SetConfig>
      break;
 800a590:	e02c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f000 fb8f 	bl	800acc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2160      	movs	r1, #96	@ 0x60
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fbb9 	bl	800ad22 <TIM_ITRx_SetConfig>
      break;
 800a5b0:	e01c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f000 fb50 	bl	800ac64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2140      	movs	r1, #64	@ 0x40
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fba9 	bl	800ad22 <TIM_ITRx_SetConfig>
      break;
 800a5d0:	e00c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4610      	mov	r0, r2
 800a5de:	f000 fba0 	bl	800ad22 <TIM_ITRx_SetConfig>
      break;
 800a5e2:	e003      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e8:	e000      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a5ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	fffeff88 	.word	0xfffeff88

0800a60c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a43      	ldr	r2, [pc, #268]	@ (800a77c <TIM_Base_SetConfig+0x120>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d013      	beq.n	800a69c <TIM_Base_SetConfig+0x40>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a67a:	d00f      	beq.n	800a69c <TIM_Base_SetConfig+0x40>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a40      	ldr	r2, [pc, #256]	@ (800a780 <TIM_Base_SetConfig+0x124>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d00b      	beq.n	800a69c <TIM_Base_SetConfig+0x40>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a3f      	ldr	r2, [pc, #252]	@ (800a784 <TIM_Base_SetConfig+0x128>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d007      	beq.n	800a69c <TIM_Base_SetConfig+0x40>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a3e      	ldr	r2, [pc, #248]	@ (800a788 <TIM_Base_SetConfig+0x12c>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_Base_SetConfig+0x40>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a3d      	ldr	r2, [pc, #244]	@ (800a78c <TIM_Base_SetConfig+0x130>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d108      	bne.n	800a6ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a32      	ldr	r2, [pc, #200]	@ (800a77c <TIM_Base_SetConfig+0x120>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d02b      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6bc:	d027      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a780 <TIM_Base_SetConfig+0x124>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d023      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a2e      	ldr	r2, [pc, #184]	@ (800a784 <TIM_Base_SetConfig+0x128>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d01f      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a788 <TIM_Base_SetConfig+0x12c>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d01b      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a78c <TIM_Base_SetConfig+0x130>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d017      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a2b      	ldr	r2, [pc, #172]	@ (800a790 <TIM_Base_SetConfig+0x134>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d013      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a794 <TIM_Base_SetConfig+0x138>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00f      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a29      	ldr	r2, [pc, #164]	@ (800a798 <TIM_Base_SetConfig+0x13c>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00b      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a28      	ldr	r2, [pc, #160]	@ (800a79c <TIM_Base_SetConfig+0x140>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d007      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a27      	ldr	r2, [pc, #156]	@ (800a7a0 <TIM_Base_SetConfig+0x144>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d003      	beq.n	800a70e <TIM_Base_SetConfig+0xb2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a26      	ldr	r2, [pc, #152]	@ (800a7a4 <TIM_Base_SetConfig+0x148>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d108      	bne.n	800a720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a0e      	ldr	r2, [pc, #56]	@ (800a77c <TIM_Base_SetConfig+0x120>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d003      	beq.n	800a74e <TIM_Base_SetConfig+0xf2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a10      	ldr	r2, [pc, #64]	@ (800a78c <TIM_Base_SetConfig+0x130>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d103      	bne.n	800a756 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	691a      	ldr	r2, [r3, #16]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f043 0204 	orr.w	r2, r3, #4
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]
}
 800a76e:	bf00      	nop
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	40010000 	.word	0x40010000
 800a780:	40000400 	.word	0x40000400
 800a784:	40000800 	.word	0x40000800
 800a788:	40000c00 	.word	0x40000c00
 800a78c:	40010400 	.word	0x40010400
 800a790:	40014000 	.word	0x40014000
 800a794:	40014400 	.word	0x40014400
 800a798:	40014800 	.word	0x40014800
 800a79c:	40001800 	.word	0x40001800
 800a7a0:	40001c00 	.word	0x40001c00
 800a7a4:	40002000 	.word	0x40002000

0800a7a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	f023 0201 	bic.w	r2, r3, #1
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4b2b      	ldr	r3, [pc, #172]	@ (800a880 <TIM_OC1_SetConfig+0xd8>)
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f023 0303 	bic.w	r3, r3, #3
 800a7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f023 0302 	bic.w	r3, r3, #2
 800a7f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a21      	ldr	r2, [pc, #132]	@ (800a884 <TIM_OC1_SetConfig+0xdc>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d003      	beq.n	800a80c <TIM_OC1_SetConfig+0x64>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a20      	ldr	r2, [pc, #128]	@ (800a888 <TIM_OC1_SetConfig+0xe0>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d10c      	bne.n	800a826 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f023 0308 	bic.w	r3, r3, #8
 800a812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f023 0304 	bic.w	r3, r3, #4
 800a824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a16      	ldr	r2, [pc, #88]	@ (800a884 <TIM_OC1_SetConfig+0xdc>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d003      	beq.n	800a836 <TIM_OC1_SetConfig+0x8e>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a15      	ldr	r2, [pc, #84]	@ (800a888 <TIM_OC1_SetConfig+0xe0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d111      	bne.n	800a85a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a83c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4313      	orrs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	621a      	str	r2, [r3, #32]
}
 800a874:	bf00      	nop
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	fffeff8f 	.word	0xfffeff8f
 800a884:	40010000 	.word	0x40010000
 800a888:	40010400 	.word	0x40010400

0800a88c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	f023 0210 	bic.w	r2, r3, #16
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4b2e      	ldr	r3, [pc, #184]	@ (800a970 <TIM_OC2_SetConfig+0xe4>)
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f023 0320 	bic.w	r3, r3, #32
 800a8d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a23      	ldr	r2, [pc, #140]	@ (800a974 <TIM_OC2_SetConfig+0xe8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d003      	beq.n	800a8f4 <TIM_OC2_SetConfig+0x68>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a22      	ldr	r2, [pc, #136]	@ (800a978 <TIM_OC2_SetConfig+0xec>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d10d      	bne.n	800a910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	4313      	orrs	r3, r2
 800a906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a90e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a18      	ldr	r2, [pc, #96]	@ (800a974 <TIM_OC2_SetConfig+0xe8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d003      	beq.n	800a920 <TIM_OC2_SetConfig+0x94>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a17      	ldr	r2, [pc, #92]	@ (800a978 <TIM_OC2_SetConfig+0xec>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d113      	bne.n	800a948 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a92e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	4313      	orrs	r3, r2
 800a93a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	621a      	str	r2, [r3, #32]
}
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	feff8fff 	.word	0xfeff8fff
 800a974:	40010000 	.word	0x40010000
 800a978:	40010400 	.word	0x40010400

0800a97c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa5c <TIM_OC3_SetConfig+0xe0>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0303 	bic.w	r3, r3, #3
 800a9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	021b      	lsls	r3, r3, #8
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a22      	ldr	r2, [pc, #136]	@ (800aa60 <TIM_OC3_SetConfig+0xe4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d003      	beq.n	800a9e2 <TIM_OC3_SetConfig+0x66>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a21      	ldr	r2, [pc, #132]	@ (800aa64 <TIM_OC3_SetConfig+0xe8>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d10d      	bne.n	800a9fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a17      	ldr	r2, [pc, #92]	@ (800aa60 <TIM_OC3_SetConfig+0xe4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d003      	beq.n	800aa0e <TIM_OC3_SetConfig+0x92>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a16      	ldr	r2, [pc, #88]	@ (800aa64 <TIM_OC3_SetConfig+0xe8>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d113      	bne.n	800aa36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	011b      	lsls	r3, r3, #4
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	621a      	str	r2, [r3, #32]
}
 800aa50:	bf00      	nop
 800aa52:	371c      	adds	r7, #28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	fffeff8f 	.word	0xfffeff8f
 800aa60:	40010000 	.word	0x40010000
 800aa64:	40010400 	.word	0x40010400

0800aa68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4b1e      	ldr	r3, [pc, #120]	@ (800ab0c <TIM_OC4_SetConfig+0xa4>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	031b      	lsls	r3, r3, #12
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a13      	ldr	r2, [pc, #76]	@ (800ab10 <TIM_OC4_SetConfig+0xa8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d003      	beq.n	800aad0 <TIM_OC4_SetConfig+0x68>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a12      	ldr	r2, [pc, #72]	@ (800ab14 <TIM_OC4_SetConfig+0xac>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d109      	bne.n	800aae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	019b      	lsls	r3, r3, #6
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	621a      	str	r2, [r3, #32]
}
 800aafe:	bf00      	nop
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	feff8fff 	.word	0xfeff8fff
 800ab10:	40010000 	.word	0x40010000
 800ab14:	40010400 	.word	0x40010400

0800ab18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4b1b      	ldr	r3, [pc, #108]	@ (800abb0 <TIM_OC5_SetConfig+0x98>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ab58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	041b      	lsls	r3, r3, #16
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a12      	ldr	r2, [pc, #72]	@ (800abb4 <TIM_OC5_SetConfig+0x9c>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d003      	beq.n	800ab76 <TIM_OC5_SetConfig+0x5e>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a11      	ldr	r2, [pc, #68]	@ (800abb8 <TIM_OC5_SetConfig+0xa0>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d109      	bne.n	800ab8a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	021b      	lsls	r3, r3, #8
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	621a      	str	r2, [r3, #32]
}
 800aba4:	bf00      	nop
 800aba6:	371c      	adds	r7, #28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	fffeff8f 	.word	0xfffeff8f
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40010400 	.word	0x40010400

0800abbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4b1c      	ldr	r3, [pc, #112]	@ (800ac58 <TIM_OC6_SetConfig+0x9c>)
 800abe8:	4013      	ands	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	021b      	lsls	r3, r3, #8
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	051b      	lsls	r3, r3, #20
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a13      	ldr	r2, [pc, #76]	@ (800ac5c <TIM_OC6_SetConfig+0xa0>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d003      	beq.n	800ac1c <TIM_OC6_SetConfig+0x60>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a12      	ldr	r2, [pc, #72]	@ (800ac60 <TIM_OC6_SetConfig+0xa4>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d109      	bne.n	800ac30 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	029b      	lsls	r3, r3, #10
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	621a      	str	r2, [r3, #32]
}
 800ac4a:	bf00      	nop
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	feff8fff 	.word	0xfeff8fff
 800ac5c:	40010000 	.word	0x40010000
 800ac60:	40010400 	.word	0x40010400

0800ac64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	f023 0201 	bic.w	r2, r3, #1
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f023 030a 	bic.w	r3, r3, #10
 800aca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	621a      	str	r2, [r3, #32]
}
 800acb6:	bf00      	nop
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b087      	sub	sp, #28
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	f023 0210 	bic.w	r2, r3, #16
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	031b      	lsls	r3, r3, #12
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800acfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	621a      	str	r2, [r3, #32]
}
 800ad16:	bf00      	nop
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	f043 0307 	orr.w	r3, r3, #7
 800ad44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	609a      	str	r2, [r3, #8]
}
 800ad4c:	bf00      	nop
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	021a      	lsls	r2, r3, #8
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	609a      	str	r2, [r3, #8]
}
 800ad8c:	bf00      	nop
 800ad8e:	371c      	adds	r7, #28
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adac:	2302      	movs	r3, #2
 800adae:	e06d      	b.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a30      	ldr	r2, [pc, #192]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d004      	beq.n	800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a2f      	ldr	r2, [pc, #188]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d108      	bne.n	800adf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800adea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a20      	ldr	r2, [pc, #128]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d022      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae22:	d01d      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1d      	ldr	r2, [pc, #116]	@ (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d018      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a1c      	ldr	r2, [pc, #112]	@ (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d013      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00e      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a15      	ldr	r2, [pc, #84]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d009      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a16      	ldr	r2, [pc, #88]	@ (800aeac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d004      	beq.n	800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10c      	bne.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40010400 	.word	0x40010400
 800aea0:	40000400 	.word	0x40000400
 800aea4:	40000800 	.word	0x40000800
 800aea8:	40000c00 	.word	0x40000c00
 800aeac:	40014000 	.word	0x40014000
 800aeb0:	40001800 	.word	0x40001800

0800aeb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aecc:	2302      	movs	r3, #2
 800aece:	e065      	b.n	800af9c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	041b      	lsls	r3, r3, #16
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a16      	ldr	r2, [pc, #88]	@ (800afa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d004      	beq.n	800af5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a14      	ldr	r2, [pc, #80]	@ (800afac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d115      	bne.n	800af8a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af68:	051b      	lsls	r3, r3, #20
 800af6a:	4313      	orrs	r3, r2
 800af6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	69db      	ldr	r3, [r3, #28]
 800af78:	4313      	orrs	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	6a1b      	ldr	r3, [r3, #32]
 800af86:	4313      	orrs	r3, r2
 800af88:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	40010000 	.word	0x40010000
 800afac:	40010400 	.word	0x40010400

0800afb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e040      	b.n	800b080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d106      	bne.n	800b014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7f9 f9cc 	bl	80043ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2224      	movs	r2, #36	@ 0x24
 800b018:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f022 0201 	bic.w	r2, r2, #1
 800b028:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fe66 	bl	800bd04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fbff 	bl	800b83c <UART_SetConfig>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b01      	cmp	r3, #1
 800b042:	d101      	bne.n	800b048 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	e01b      	b.n	800b080 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689a      	ldr	r2, [r3, #8]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fee5 	bl	800be48 <UART_CheckIdleState>
 800b07e:	4603      	mov	r3, r0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	@ 0x28
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4613      	mov	r3, r2
 800b096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	d177      	bne.n	800b190 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HAL_UART_Transmit+0x24>
 800b0a6:	88fb      	ldrh	r3, [r7, #6]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e070      	b.n	800b192 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2221      	movs	r2, #33	@ 0x21
 800b0bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0be:	f7f9 fa8f 	bl	80045e0 <HAL_GetTick>
 800b0c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	88fa      	ldrh	r2, [r7, #6]
 800b0c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	88fa      	ldrh	r2, [r7, #6]
 800b0d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0dc:	d108      	bne.n	800b0f0 <HAL_UART_Transmit+0x68>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d104      	bne.n	800b0f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	e003      	b.n	800b0f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0f8:	e02f      	b.n	800b15a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2200      	movs	r2, #0
 800b102:	2180      	movs	r1, #128	@ 0x80
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 fef6 	bl	800bef6 <UART_WaitOnFlagUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2220      	movs	r2, #32
 800b114:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e03b      	b.n	800b192 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b12e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	3302      	adds	r3, #2
 800b134:	61bb      	str	r3, [r7, #24]
 800b136:	e007      	b.n	800b148 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	3301      	adds	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b14e:	b29b      	uxth	r3, r3
 800b150:	3b01      	subs	r3, #1
 800b152:	b29a      	uxth	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1c9      	bne.n	800b0fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2200      	movs	r2, #0
 800b16e:	2140      	movs	r1, #64	@ 0x40
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 fec0 	bl	800bef6 <UART_WaitOnFlagUntilTimeout>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2220      	movs	r2, #32
 800b180:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e005      	b.n	800b192 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2220      	movs	r2, #32
 800b18a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	e000      	b.n	800b192 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b190:	2302      	movs	r3, #2
  }
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b08a      	sub	sp, #40	@ 0x28
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d132      	bne.n	800b218 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <HAL_UART_Receive_IT+0x24>
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e02b      	b.n	800b21a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d018      	beq.n	800b208 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	623b      	str	r3, [r7, #32]
 800b1f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	6a3a      	ldr	r2, [r7, #32]
 800b1fc:	e841 2300 	strex	r3, r2, [r1]
 800b200:	61bb      	str	r3, [r7, #24]
   return(result);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e6      	bne.n	800b1d6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	461a      	mov	r2, r3
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 fede 	bl	800bfd0 <UART_Start_Receive_IT>
 800b214:	4603      	mov	r3, r0
 800b216:	e000      	b.n	800b21a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b218:	2302      	movs	r3, #2
  }
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3728      	adds	r7, #40	@ 0x28
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b0ba      	sub	sp, #232	@ 0xe8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b24a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b24e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b252:	4013      	ands	r3, r2
 800b254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d115      	bne.n	800b28c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b264:	f003 0320 	and.w	r3, r3, #32
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00f      	beq.n	800b28c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b00      	cmp	r3, #0
 800b276:	d009      	beq.n	800b28c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 82b1 	beq.w	800b7e4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	4798      	blx	r3
      }
      return;
 800b28a:	e2ab      	b.n	800b7e4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b28c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 8117 	beq.w	800b4c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b2a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b2a6:	4b85      	ldr	r3, [pc, #532]	@ (800b4bc <HAL_UART_IRQHandler+0x298>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 810a 	beq.w	800b4c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d011      	beq.n	800b2e0 <HAL_UART_IRQHandler+0xbc>
 800b2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00b      	beq.n	800b2e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2d6:	f043 0201 	orr.w	r2, r3, #1
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d011      	beq.n	800b310 <HAL_UART_IRQHandler+0xec>
 800b2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b306:	f043 0204 	orr.w	r2, r3, #4
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d011      	beq.n	800b340 <HAL_UART_IRQHandler+0x11c>
 800b31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2204      	movs	r2, #4
 800b32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b336:	f043 0202 	orr.w	r2, r3, #2
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d017      	beq.n	800b37c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b350:	f003 0320 	and.w	r3, r3, #32
 800b354:	2b00      	cmp	r3, #0
 800b356:	d105      	bne.n	800b364 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b35c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00b      	beq.n	800b37c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2208      	movs	r2, #8
 800b36a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b372:	f043 0208 	orr.w	r2, r3, #8
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b384:	2b00      	cmp	r3, #0
 800b386:	d012      	beq.n	800b3ae <HAL_UART_IRQHandler+0x18a>
 800b388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b38c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00c      	beq.n	800b3ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b39c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3a4:	f043 0220 	orr.w	r2, r3, #32
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8217 	beq.w	800b7e8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00d      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f6:	2b40      	cmp	r3, #64	@ 0x40
 800b3f8:	d005      	beq.n	800b406 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b3fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b3fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b402:	2b00      	cmp	r3, #0
 800b404:	d04f      	beq.n	800b4a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fea8 	bl	800c15c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b416:	2b40      	cmp	r3, #64	@ 0x40
 800b418:	d141      	bne.n	800b49e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3308      	adds	r3, #8
 800b420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b424:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3308      	adds	r3, #8
 800b442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b446:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b44a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b456:	e841 2300 	strex	r3, r2, [r1]
 800b45a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b45e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1d9      	bne.n	800b41a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d013      	beq.n	800b496 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b472:	4a13      	ldr	r2, [pc, #76]	@ (800b4c0 <HAL_UART_IRQHandler+0x29c>)
 800b474:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f9 fe96 	bl	80051ac <HAL_DMA_Abort_IT>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d017      	beq.n	800b4b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b48a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b494:	e00f      	b.n	800b4b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f9ba 	bl	800b810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b49c:	e00b      	b.n	800b4b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f9b6 	bl	800b810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a4:	e007      	b.n	800b4b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f9b2 	bl	800b810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b4b4:	e198      	b.n	800b7e8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4b6:	bf00      	nop
    return;
 800b4b8:	e196      	b.n	800b7e8 <HAL_UART_IRQHandler+0x5c4>
 800b4ba:	bf00      	nop
 800b4bc:	04000120 	.word	0x04000120
 800b4c0:	0800c225 	.word	0x0800c225

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	f040 8166 	bne.w	800b79a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4d2:	f003 0310 	and.w	r3, r3, #16
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 815f 	beq.w	800b79a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4e0:	f003 0310 	and.w	r3, r3, #16
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 8158 	beq.w	800b79a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2210      	movs	r2, #16
 800b4f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4fc:	2b40      	cmp	r3, #64	@ 0x40
 800b4fe:	f040 80d0 	bne.w	800b6a2 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b50e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 80ab 	beq.w	800b66e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b51e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b522:	429a      	cmp	r2, r3
 800b524:	f080 80a3 	bcs.w	800b66e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b52e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b536:	69db      	ldr	r3, [r3, #28]
 800b538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b53c:	f000 8086 	beq.w	800b64c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b548:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b54c:	e853 3f00 	ldrex	r3, [r3]
 800b550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b55c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b56a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b56e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b572:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b576:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b57a:	e841 2300 	strex	r3, r2, [r1]
 800b57e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1da      	bne.n	800b540 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3308      	adds	r3, #8
 800b590:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b592:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b594:	e853 3f00 	ldrex	r3, [r3]
 800b598:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b59a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b59c:	f023 0301 	bic.w	r3, r3, #1
 800b5a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b5b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b5b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b5c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e1      	bne.n	800b58a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5d0:	e853 3f00 	ldrex	r3, [r3]
 800b5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b5d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b5ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b5ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b5f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e3      	bne.n	800b5c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2220      	movs	r2, #32
 800b602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b614:	e853 3f00 	ldrex	r3, [r3]
 800b618:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b61a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b61c:	f023 0310 	bic.w	r3, r3, #16
 800b620:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b62e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b630:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b63c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1e4      	bne.n	800b60c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b646:	4618      	mov	r0, r3
 800b648:	f7f9 fd40 	bl	80050cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b65e:	b29b      	uxth	r3, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	b29b      	uxth	r3, r3
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f8dc 	bl	800b824 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b66c:	e0be      	b.n	800b7ec <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b678:	429a      	cmp	r2, r3
 800b67a:	f040 80b7 	bne.w	800b7ec <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b688:	f040 80b0 	bne.w	800b7ec <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f8c2 	bl	800b824 <HAL_UARTEx_RxEventCallback>
      return;
 800b6a0:	e0a4      	b.n	800b7ec <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 8096 	beq.w	800b7f0 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800b6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8091 	beq.w	800b7f0 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b6f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e4      	bne.n	800b6ce <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3308      	adds	r3, #8
 800b70a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	e853 3f00 	ldrex	r3, [r3]
 800b712:	623b      	str	r3, [r7, #32]
   return(result);
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	f023 0301 	bic.w	r3, r3, #1
 800b71a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b728:	633a      	str	r2, [r7, #48]	@ 0x30
 800b72a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b72e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e3      	bne.n	800b704 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2220      	movs	r2, #32
 800b740:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f023 0310 	bic.w	r3, r3, #16
 800b764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b772:	61fb      	str	r3, [r7, #28]
 800b774:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	69b9      	ldr	r1, [r7, #24]
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	617b      	str	r3, [r7, #20]
   return(result);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e4      	bne.n	800b750 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2202      	movs	r2, #2
 800b78a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b78c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f846 	bl	800b824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b798:	e02a      	b.n	800b7f0 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00e      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d008      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d01c      	beq.n	800b7f4 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
    }
    return;
 800b7c2:	e017      	b.n	800b7f4 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d012      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
 800b7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00c      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fd33 	bl	800c248 <UART_EndTransmit_IT>
    return;
 800b7e2:	e008      	b.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b7e4:	bf00      	nop
 800b7e6:	e006      	b.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800b7e8:	bf00      	nop
 800b7ea:	e004      	b.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b7ec:	bf00      	nop
 800b7ee:	e002      	b.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b7f0:	bf00      	nop
 800b7f2:	e000      	b.n	800b7f6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800b7f4:	bf00      	nop
  }

}
 800b7f6:	37e8      	adds	r7, #232	@ 0xe8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b088      	sub	sp, #32
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	431a      	orrs	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	431a      	orrs	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	69db      	ldr	r3, [r3, #28]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	4ba6      	ldr	r3, [pc, #664]	@ (800bb00 <UART_SetConfig+0x2c4>)
 800b868:	4013      	ands	r3, r2
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	6812      	ldr	r2, [r2, #0]
 800b86e:	6979      	ldr	r1, [r7, #20]
 800b870:	430b      	orrs	r3, r1
 800b872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	4313      	orrs	r3, r2
 800b898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a94      	ldr	r2, [pc, #592]	@ (800bb04 <UART_SetConfig+0x2c8>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d120      	bne.n	800b8fa <UART_SetConfig+0xbe>
 800b8b8:	4b93      	ldr	r3, [pc, #588]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800b8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8be:	f003 0303 	and.w	r3, r3, #3
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d816      	bhi.n	800b8f4 <UART_SetConfig+0xb8>
 800b8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b8cc <UART_SetConfig+0x90>)
 800b8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8cc:	0800b8dd 	.word	0x0800b8dd
 800b8d0:	0800b8e9 	.word	0x0800b8e9
 800b8d4:	0800b8e3 	.word	0x0800b8e3
 800b8d8:	0800b8ef 	.word	0x0800b8ef
 800b8dc:	2301      	movs	r3, #1
 800b8de:	77fb      	strb	r3, [r7, #31]
 800b8e0:	e150      	b.n	800bb84 <UART_SetConfig+0x348>
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	77fb      	strb	r3, [r7, #31]
 800b8e6:	e14d      	b.n	800bb84 <UART_SetConfig+0x348>
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	77fb      	strb	r3, [r7, #31]
 800b8ec:	e14a      	b.n	800bb84 <UART_SetConfig+0x348>
 800b8ee:	2308      	movs	r3, #8
 800b8f0:	77fb      	strb	r3, [r7, #31]
 800b8f2:	e147      	b.n	800bb84 <UART_SetConfig+0x348>
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	77fb      	strb	r3, [r7, #31]
 800b8f8:	e144      	b.n	800bb84 <UART_SetConfig+0x348>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a83      	ldr	r2, [pc, #524]	@ (800bb0c <UART_SetConfig+0x2d0>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d132      	bne.n	800b96a <UART_SetConfig+0x12e>
 800b904:	4b80      	ldr	r3, [pc, #512]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800b906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b90a:	f003 030c 	and.w	r3, r3, #12
 800b90e:	2b0c      	cmp	r3, #12
 800b910:	d828      	bhi.n	800b964 <UART_SetConfig+0x128>
 800b912:	a201      	add	r2, pc, #4	@ (adr r2, 800b918 <UART_SetConfig+0xdc>)
 800b914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b918:	0800b94d 	.word	0x0800b94d
 800b91c:	0800b965 	.word	0x0800b965
 800b920:	0800b965 	.word	0x0800b965
 800b924:	0800b965 	.word	0x0800b965
 800b928:	0800b959 	.word	0x0800b959
 800b92c:	0800b965 	.word	0x0800b965
 800b930:	0800b965 	.word	0x0800b965
 800b934:	0800b965 	.word	0x0800b965
 800b938:	0800b953 	.word	0x0800b953
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b965 	.word	0x0800b965
 800b948:	0800b95f 	.word	0x0800b95f
 800b94c:	2300      	movs	r3, #0
 800b94e:	77fb      	strb	r3, [r7, #31]
 800b950:	e118      	b.n	800bb84 <UART_SetConfig+0x348>
 800b952:	2302      	movs	r3, #2
 800b954:	77fb      	strb	r3, [r7, #31]
 800b956:	e115      	b.n	800bb84 <UART_SetConfig+0x348>
 800b958:	2304      	movs	r3, #4
 800b95a:	77fb      	strb	r3, [r7, #31]
 800b95c:	e112      	b.n	800bb84 <UART_SetConfig+0x348>
 800b95e:	2308      	movs	r3, #8
 800b960:	77fb      	strb	r3, [r7, #31]
 800b962:	e10f      	b.n	800bb84 <UART_SetConfig+0x348>
 800b964:	2310      	movs	r3, #16
 800b966:	77fb      	strb	r3, [r7, #31]
 800b968:	e10c      	b.n	800bb84 <UART_SetConfig+0x348>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a68      	ldr	r2, [pc, #416]	@ (800bb10 <UART_SetConfig+0x2d4>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d120      	bne.n	800b9b6 <UART_SetConfig+0x17a>
 800b974:	4b64      	ldr	r3, [pc, #400]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800b976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b97a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b97e:	2b30      	cmp	r3, #48	@ 0x30
 800b980:	d013      	beq.n	800b9aa <UART_SetConfig+0x16e>
 800b982:	2b30      	cmp	r3, #48	@ 0x30
 800b984:	d814      	bhi.n	800b9b0 <UART_SetConfig+0x174>
 800b986:	2b20      	cmp	r3, #32
 800b988:	d009      	beq.n	800b99e <UART_SetConfig+0x162>
 800b98a:	2b20      	cmp	r3, #32
 800b98c:	d810      	bhi.n	800b9b0 <UART_SetConfig+0x174>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <UART_SetConfig+0x15c>
 800b992:	2b10      	cmp	r3, #16
 800b994:	d006      	beq.n	800b9a4 <UART_SetConfig+0x168>
 800b996:	e00b      	b.n	800b9b0 <UART_SetConfig+0x174>
 800b998:	2300      	movs	r3, #0
 800b99a:	77fb      	strb	r3, [r7, #31]
 800b99c:	e0f2      	b.n	800bb84 <UART_SetConfig+0x348>
 800b99e:	2302      	movs	r3, #2
 800b9a0:	77fb      	strb	r3, [r7, #31]
 800b9a2:	e0ef      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9a4:	2304      	movs	r3, #4
 800b9a6:	77fb      	strb	r3, [r7, #31]
 800b9a8:	e0ec      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9aa:	2308      	movs	r3, #8
 800b9ac:	77fb      	strb	r3, [r7, #31]
 800b9ae:	e0e9      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9b0:	2310      	movs	r3, #16
 800b9b2:	77fb      	strb	r3, [r7, #31]
 800b9b4:	e0e6      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a56      	ldr	r2, [pc, #344]	@ (800bb14 <UART_SetConfig+0x2d8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d120      	bne.n	800ba02 <UART_SetConfig+0x1c6>
 800b9c0:	4b51      	ldr	r3, [pc, #324]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800b9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b9ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9cc:	d013      	beq.n	800b9f6 <UART_SetConfig+0x1ba>
 800b9ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800b9d0:	d814      	bhi.n	800b9fc <UART_SetConfig+0x1c0>
 800b9d2:	2b80      	cmp	r3, #128	@ 0x80
 800b9d4:	d009      	beq.n	800b9ea <UART_SetConfig+0x1ae>
 800b9d6:	2b80      	cmp	r3, #128	@ 0x80
 800b9d8:	d810      	bhi.n	800b9fc <UART_SetConfig+0x1c0>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d002      	beq.n	800b9e4 <UART_SetConfig+0x1a8>
 800b9de:	2b40      	cmp	r3, #64	@ 0x40
 800b9e0:	d006      	beq.n	800b9f0 <UART_SetConfig+0x1b4>
 800b9e2:	e00b      	b.n	800b9fc <UART_SetConfig+0x1c0>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	77fb      	strb	r3, [r7, #31]
 800b9e8:	e0cc      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	77fb      	strb	r3, [r7, #31]
 800b9ee:	e0c9      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9f0:	2304      	movs	r3, #4
 800b9f2:	77fb      	strb	r3, [r7, #31]
 800b9f4:	e0c6      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9f6:	2308      	movs	r3, #8
 800b9f8:	77fb      	strb	r3, [r7, #31]
 800b9fa:	e0c3      	b.n	800bb84 <UART_SetConfig+0x348>
 800b9fc:	2310      	movs	r3, #16
 800b9fe:	77fb      	strb	r3, [r7, #31]
 800ba00:	e0c0      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a44      	ldr	r2, [pc, #272]	@ (800bb18 <UART_SetConfig+0x2dc>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d125      	bne.n	800ba58 <UART_SetConfig+0x21c>
 800ba0c:	4b3e      	ldr	r3, [pc, #248]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800ba0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba1a:	d017      	beq.n	800ba4c <UART_SetConfig+0x210>
 800ba1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba20:	d817      	bhi.n	800ba52 <UART_SetConfig+0x216>
 800ba22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba26:	d00b      	beq.n	800ba40 <UART_SetConfig+0x204>
 800ba28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba2c:	d811      	bhi.n	800ba52 <UART_SetConfig+0x216>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <UART_SetConfig+0x1fe>
 800ba32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba36:	d006      	beq.n	800ba46 <UART_SetConfig+0x20a>
 800ba38:	e00b      	b.n	800ba52 <UART_SetConfig+0x216>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	77fb      	strb	r3, [r7, #31]
 800ba3e:	e0a1      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba40:	2302      	movs	r3, #2
 800ba42:	77fb      	strb	r3, [r7, #31]
 800ba44:	e09e      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba46:	2304      	movs	r3, #4
 800ba48:	77fb      	strb	r3, [r7, #31]
 800ba4a:	e09b      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	77fb      	strb	r3, [r7, #31]
 800ba50:	e098      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba52:	2310      	movs	r3, #16
 800ba54:	77fb      	strb	r3, [r7, #31]
 800ba56:	e095      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a2f      	ldr	r2, [pc, #188]	@ (800bb1c <UART_SetConfig+0x2e0>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d125      	bne.n	800baae <UART_SetConfig+0x272>
 800ba62:	4b29      	ldr	r3, [pc, #164]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800ba64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ba6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba70:	d017      	beq.n	800baa2 <UART_SetConfig+0x266>
 800ba72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba76:	d817      	bhi.n	800baa8 <UART_SetConfig+0x26c>
 800ba78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba7c:	d00b      	beq.n	800ba96 <UART_SetConfig+0x25a>
 800ba7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba82:	d811      	bhi.n	800baa8 <UART_SetConfig+0x26c>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <UART_SetConfig+0x254>
 800ba88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba8c:	d006      	beq.n	800ba9c <UART_SetConfig+0x260>
 800ba8e:	e00b      	b.n	800baa8 <UART_SetConfig+0x26c>
 800ba90:	2301      	movs	r3, #1
 800ba92:	77fb      	strb	r3, [r7, #31]
 800ba94:	e076      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba96:	2302      	movs	r3, #2
 800ba98:	77fb      	strb	r3, [r7, #31]
 800ba9a:	e073      	b.n	800bb84 <UART_SetConfig+0x348>
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e070      	b.n	800bb84 <UART_SetConfig+0x348>
 800baa2:	2308      	movs	r3, #8
 800baa4:	77fb      	strb	r3, [r7, #31]
 800baa6:	e06d      	b.n	800bb84 <UART_SetConfig+0x348>
 800baa8:	2310      	movs	r3, #16
 800baaa:	77fb      	strb	r3, [r7, #31]
 800baac:	e06a      	b.n	800bb84 <UART_SetConfig+0x348>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a1b      	ldr	r2, [pc, #108]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d138      	bne.n	800bb2a <UART_SetConfig+0x2ee>
 800bab8:	4b13      	ldr	r3, [pc, #76]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800baba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800babe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bac6:	d017      	beq.n	800baf8 <UART_SetConfig+0x2bc>
 800bac8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bacc:	d82a      	bhi.n	800bb24 <UART_SetConfig+0x2e8>
 800bace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bad2:	d00b      	beq.n	800baec <UART_SetConfig+0x2b0>
 800bad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bad8:	d824      	bhi.n	800bb24 <UART_SetConfig+0x2e8>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <UART_SetConfig+0x2aa>
 800bade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bae2:	d006      	beq.n	800baf2 <UART_SetConfig+0x2b6>
 800bae4:	e01e      	b.n	800bb24 <UART_SetConfig+0x2e8>
 800bae6:	2300      	movs	r3, #0
 800bae8:	77fb      	strb	r3, [r7, #31]
 800baea:	e04b      	b.n	800bb84 <UART_SetConfig+0x348>
 800baec:	2302      	movs	r3, #2
 800baee:	77fb      	strb	r3, [r7, #31]
 800baf0:	e048      	b.n	800bb84 <UART_SetConfig+0x348>
 800baf2:	2304      	movs	r3, #4
 800baf4:	77fb      	strb	r3, [r7, #31]
 800baf6:	e045      	b.n	800bb84 <UART_SetConfig+0x348>
 800baf8:	2308      	movs	r3, #8
 800bafa:	77fb      	strb	r3, [r7, #31]
 800bafc:	e042      	b.n	800bb84 <UART_SetConfig+0x348>
 800bafe:	bf00      	nop
 800bb00:	efff69f3 	.word	0xefff69f3
 800bb04:	40011000 	.word	0x40011000
 800bb08:	40023800 	.word	0x40023800
 800bb0c:	40004400 	.word	0x40004400
 800bb10:	40004800 	.word	0x40004800
 800bb14:	40004c00 	.word	0x40004c00
 800bb18:	40005000 	.word	0x40005000
 800bb1c:	40011400 	.word	0x40011400
 800bb20:	40007800 	.word	0x40007800
 800bb24:	2310      	movs	r3, #16
 800bb26:	77fb      	strb	r3, [r7, #31]
 800bb28:	e02c      	b.n	800bb84 <UART_SetConfig+0x348>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a72      	ldr	r2, [pc, #456]	@ (800bcf8 <UART_SetConfig+0x4bc>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d125      	bne.n	800bb80 <UART_SetConfig+0x344>
 800bb34:	4b71      	ldr	r3, [pc, #452]	@ (800bcfc <UART_SetConfig+0x4c0>)
 800bb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bb3e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bb42:	d017      	beq.n	800bb74 <UART_SetConfig+0x338>
 800bb44:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bb48:	d817      	bhi.n	800bb7a <UART_SetConfig+0x33e>
 800bb4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb4e:	d00b      	beq.n	800bb68 <UART_SetConfig+0x32c>
 800bb50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb54:	d811      	bhi.n	800bb7a <UART_SetConfig+0x33e>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <UART_SetConfig+0x326>
 800bb5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb5e:	d006      	beq.n	800bb6e <UART_SetConfig+0x332>
 800bb60:	e00b      	b.n	800bb7a <UART_SetConfig+0x33e>
 800bb62:	2300      	movs	r3, #0
 800bb64:	77fb      	strb	r3, [r7, #31]
 800bb66:	e00d      	b.n	800bb84 <UART_SetConfig+0x348>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	77fb      	strb	r3, [r7, #31]
 800bb6c:	e00a      	b.n	800bb84 <UART_SetConfig+0x348>
 800bb6e:	2304      	movs	r3, #4
 800bb70:	77fb      	strb	r3, [r7, #31]
 800bb72:	e007      	b.n	800bb84 <UART_SetConfig+0x348>
 800bb74:	2308      	movs	r3, #8
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	e004      	b.n	800bb84 <UART_SetConfig+0x348>
 800bb7a:	2310      	movs	r3, #16
 800bb7c:	77fb      	strb	r3, [r7, #31]
 800bb7e:	e001      	b.n	800bb84 <UART_SetConfig+0x348>
 800bb80:	2310      	movs	r3, #16
 800bb82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	69db      	ldr	r3, [r3, #28]
 800bb88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb8c:	d15b      	bne.n	800bc46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
 800bb90:	2b08      	cmp	r3, #8
 800bb92:	d828      	bhi.n	800bbe6 <UART_SetConfig+0x3aa>
 800bb94:	a201      	add	r2, pc, #4	@ (adr r2, 800bb9c <UART_SetConfig+0x360>)
 800bb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9a:	bf00      	nop
 800bb9c:	0800bbc1 	.word	0x0800bbc1
 800bba0:	0800bbc9 	.word	0x0800bbc9
 800bba4:	0800bbd1 	.word	0x0800bbd1
 800bba8:	0800bbe7 	.word	0x0800bbe7
 800bbac:	0800bbd7 	.word	0x0800bbd7
 800bbb0:	0800bbe7 	.word	0x0800bbe7
 800bbb4:	0800bbe7 	.word	0x0800bbe7
 800bbb8:	0800bbe7 	.word	0x0800bbe7
 800bbbc:	0800bbdf 	.word	0x0800bbdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbc0:	f7fb fc32 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 800bbc4:	61b8      	str	r0, [r7, #24]
        break;
 800bbc6:	e013      	b.n	800bbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbc8:	f7fb fc42 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 800bbcc:	61b8      	str	r0, [r7, #24]
        break;
 800bbce:	e00f      	b.n	800bbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbd0:	4b4b      	ldr	r3, [pc, #300]	@ (800bd00 <UART_SetConfig+0x4c4>)
 800bbd2:	61bb      	str	r3, [r7, #24]
        break;
 800bbd4:	e00c      	b.n	800bbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbd6:	f7fb fb55 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 800bbda:	61b8      	str	r0, [r7, #24]
        break;
 800bbdc:	e008      	b.n	800bbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbe2:	61bb      	str	r3, [r7, #24]
        break;
 800bbe4:	e004      	b.n	800bbf0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	77bb      	strb	r3, [r7, #30]
        break;
 800bbee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d074      	beq.n	800bce0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	005a      	lsls	r2, r3, #1
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	085b      	lsrs	r3, r3, #1
 800bc00:	441a      	add	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b0f      	cmp	r3, #15
 800bc10:	d916      	bls.n	800bc40 <UART_SetConfig+0x404>
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc18:	d212      	bcs.n	800bc40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	f023 030f 	bic.w	r3, r3, #15
 800bc22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	085b      	lsrs	r3, r3, #1
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	f003 0307 	and.w	r3, r3, #7
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	89fb      	ldrh	r3, [r7, #14]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	89fa      	ldrh	r2, [r7, #14]
 800bc3c:	60da      	str	r2, [r3, #12]
 800bc3e:	e04f      	b.n	800bce0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	77bb      	strb	r3, [r7, #30]
 800bc44:	e04c      	b.n	800bce0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc46:	7ffb      	ldrb	r3, [r7, #31]
 800bc48:	2b08      	cmp	r3, #8
 800bc4a:	d828      	bhi.n	800bc9e <UART_SetConfig+0x462>
 800bc4c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc54 <UART_SetConfig+0x418>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bc79 	.word	0x0800bc79
 800bc58:	0800bc81 	.word	0x0800bc81
 800bc5c:	0800bc89 	.word	0x0800bc89
 800bc60:	0800bc9f 	.word	0x0800bc9f
 800bc64:	0800bc8f 	.word	0x0800bc8f
 800bc68:	0800bc9f 	.word	0x0800bc9f
 800bc6c:	0800bc9f 	.word	0x0800bc9f
 800bc70:	0800bc9f 	.word	0x0800bc9f
 800bc74:	0800bc97 	.word	0x0800bc97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc78:	f7fb fbd6 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 800bc7c:	61b8      	str	r0, [r7, #24]
        break;
 800bc7e:	e013      	b.n	800bca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc80:	f7fb fbe6 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 800bc84:	61b8      	str	r0, [r7, #24]
        break;
 800bc86:	e00f      	b.n	800bca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc88:	4b1d      	ldr	r3, [pc, #116]	@ (800bd00 <UART_SetConfig+0x4c4>)
 800bc8a:	61bb      	str	r3, [r7, #24]
        break;
 800bc8c:	e00c      	b.n	800bca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc8e:	f7fb faf9 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 800bc92:	61b8      	str	r0, [r7, #24]
        break;
 800bc94:	e008      	b.n	800bca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc9a:	61bb      	str	r3, [r7, #24]
        break;
 800bc9c:	e004      	b.n	800bca8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	77bb      	strb	r3, [r7, #30]
        break;
 800bca6:	bf00      	nop
    }

    if (pclk != 0U)
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d018      	beq.n	800bce0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	085a      	lsrs	r2, r3, #1
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	441a      	add	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b0f      	cmp	r3, #15
 800bcc6:	d909      	bls.n	800bcdc <UART_SetConfig+0x4a0>
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcce:	d205      	bcs.n	800bcdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	60da      	str	r2, [r3, #12]
 800bcda:	e001      	b.n	800bce0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bcec:	7fbb      	ldrb	r3, [r7, #30]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	40007c00 	.word	0x40007c00
 800bcfc:	40023800 	.word	0x40023800
 800bd00:	00f42400 	.word	0x00f42400

0800bd04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00a      	beq.n	800bd2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	430a      	orrs	r2, r1
 800bd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd76:	f003 0304 	and.w	r3, r3, #4
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd98:	f003 0310 	and.w	r3, r3, #16
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00a      	beq.n	800bdb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	f003 0320 	and.w	r3, r3, #32
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d01a      	beq.n	800be1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be02:	d10a      	bne.n	800be1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00a      	beq.n	800be3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	605a      	str	r2, [r3, #4]
  }
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08c      	sub	sp, #48	@ 0x30
 800be4c:	af02      	add	r7, sp, #8
 800be4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be58:	f7f8 fbc2 	bl	80045e0 <HAL_GetTick>
 800be5c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	2b08      	cmp	r3, #8
 800be6a:	d12e      	bne.n	800beca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	2200      	movs	r2, #0
 800be76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f83b 	bl	800bef6 <UART_WaitOnFlagUntilTimeout>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d021      	beq.n	800beca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	60fb      	str	r3, [r7, #12]
   return(result);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be9a:	623b      	str	r3, [r7, #32]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	61fb      	str	r3, [r7, #28]
 800bea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	69b9      	ldr	r1, [r7, #24]
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	617b      	str	r3, [r7, #20]
   return(result);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2220      	movs	r2, #32
 800bebc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	e011      	b.n	800beee <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2220      	movs	r2, #32
 800bece:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2220      	movs	r2, #32
 800bed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3728      	adds	r7, #40	@ 0x28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b084      	sub	sp, #16
 800befa:	af00      	add	r7, sp, #0
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	603b      	str	r3, [r7, #0]
 800bf02:	4613      	mov	r3, r2
 800bf04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf06:	e04f      	b.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d04b      	beq.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf10:	f7f8 fb66 	bl	80045e0 <HAL_GetTick>
 800bf14:	4602      	mov	r2, r0
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e04e      	b.n	800bfc8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d037      	beq.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b80      	cmp	r3, #128	@ 0x80
 800bf3c:	d034      	beq.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b40      	cmp	r3, #64	@ 0x40
 800bf42:	d031      	beq.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b08      	cmp	r3, #8
 800bf50:	d110      	bne.n	800bf74 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2208      	movs	r2, #8
 800bf58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 f8fe 	bl	800c15c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2208      	movs	r2, #8
 800bf64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e029      	b.n	800bfc8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf82:	d111      	bne.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 f8e4 	bl	800c15c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e00f      	b.n	800bfc8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	69da      	ldr	r2, [r3, #28]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	bf0c      	ite	eq
 800bfb8:	2301      	moveq	r3, #1
 800bfba:	2300      	movne	r3, #0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d0a0      	beq.n	800bf08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b097      	sub	sp, #92	@ 0x5c
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	88fa      	ldrh	r2, [r7, #6]
 800bfe8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	88fa      	ldrh	r2, [r7, #6]
 800bff0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c002:	d10e      	bne.n	800c022 <UART_Start_Receive_IT+0x52>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d105      	bne.n	800c018 <UART_Start_Receive_IT+0x48>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c012:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c016:	e02d      	b.n	800c074 <UART_Start_Receive_IT+0xa4>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	22ff      	movs	r2, #255	@ 0xff
 800c01c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c020:	e028      	b.n	800c074 <UART_Start_Receive_IT+0xa4>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10d      	bne.n	800c046 <UART_Start_Receive_IT+0x76>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d104      	bne.n	800c03c <UART_Start_Receive_IT+0x6c>
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	22ff      	movs	r2, #255	@ 0xff
 800c036:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c03a:	e01b      	b.n	800c074 <UART_Start_Receive_IT+0xa4>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	227f      	movs	r2, #127	@ 0x7f
 800c040:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c044:	e016      	b.n	800c074 <UART_Start_Receive_IT+0xa4>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c04e:	d10d      	bne.n	800c06c <UART_Start_Receive_IT+0x9c>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <UART_Start_Receive_IT+0x92>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	227f      	movs	r2, #127	@ 0x7f
 800c05c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c060:	e008      	b.n	800c074 <UART_Start_Receive_IT+0xa4>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	223f      	movs	r2, #63	@ 0x3f
 800c066:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c06a:	e003      	b.n	800c074 <UART_Start_Receive_IT+0xa4>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2222      	movs	r2, #34	@ 0x22
 800c080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3308      	adds	r3, #8
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c08e:	e853 3f00 	ldrex	r3, [r3]
 800c092:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c0a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c0a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c0aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ac:	e841 2300 	strex	r3, r2, [r1]
 800c0b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c0b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1e5      	bne.n	800c084 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0c0:	d107      	bne.n	800c0d2 <UART_Start_Receive_IT+0x102>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d103      	bne.n	800c0d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	4a21      	ldr	r2, [pc, #132]	@ (800c154 <UART_Start_Receive_IT+0x184>)
 800c0ce:	669a      	str	r2, [r3, #104]	@ 0x68
 800c0d0:	e002      	b.n	800c0d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	4a20      	ldr	r2, [pc, #128]	@ (800c158 <UART_Start_Receive_IT+0x188>)
 800c0d6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d019      	beq.n	800c114 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c0f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c100:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e6      	bne.n	800c0e0 <UART_Start_Receive_IT+0x110>
 800c112:	e018      	b.n	800c146 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	613b      	str	r3, [r7, #16]
   return(result);
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f043 0320 	orr.w	r3, r3, #32
 800c128:	653b      	str	r3, [r7, #80]	@ 0x50
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c132:	623b      	str	r3, [r7, #32]
 800c134:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c136:	69f9      	ldr	r1, [r7, #28]
 800c138:	6a3a      	ldr	r2, [r7, #32]
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e6      	bne.n	800c114 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	375c      	adds	r7, #92	@ 0x5c
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	0800c445 	.word	0x0800c445
 800c158:	0800c29d 	.word	0x0800c29d

0800c15c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b095      	sub	sp, #84	@ 0x54
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c182:	643b      	str	r3, [r7, #64]	@ 0x40
 800c184:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e6      	bne.n	800c164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3308      	adds	r3, #8
 800c19c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	6a3b      	ldr	r3, [r7, #32]
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	f023 0301 	bic.w	r3, r3, #1
 800c1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1be:	e841 2300 	strex	r3, r2, [r1]
 800c1c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1e5      	bne.n	800c196 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d118      	bne.n	800c204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	e853 3f00 	ldrex	r3, [r3]
 800c1de:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f023 0310 	bic.w	r3, r3, #16
 800c1e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1f0:	61bb      	str	r3, [r7, #24]
 800c1f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f4:	6979      	ldr	r1, [r7, #20]
 800c1f6:	69ba      	ldr	r2, [r7, #24]
 800c1f8:	e841 2300 	strex	r3, r2, [r1]
 800c1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1e6      	bne.n	800c1d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2220      	movs	r2, #32
 800c208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c218:	bf00      	nop
 800c21a:	3754      	adds	r7, #84	@ 0x54
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c230:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7ff fae8 	bl	800b810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c240:	bf00      	nop
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	e853 3f00 	ldrex	r3, [r3]
 800c25c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c264:	61fb      	str	r3, [r7, #28]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	61bb      	str	r3, [r7, #24]
 800c270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	6979      	ldr	r1, [r7, #20]
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	613b      	str	r3, [r7, #16]
   return(result);
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e6      	bne.n	800c250 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2220      	movs	r2, #32
 800c286:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff fab4 	bl	800b7fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c294:	bf00      	nop
 800c296:	3720      	adds	r7, #32
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b09c      	sub	sp, #112	@ 0x70
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c2aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2b4:	2b22      	cmp	r3, #34	@ 0x22
 800c2b6:	f040 80b9 	bne.w	800c42c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c2c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c2c8:	b2d9      	uxtb	r1, r3
 800c2ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c2ce:	b2da      	uxtb	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2d4:	400a      	ands	r2, r1
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f040 809c 	bne.w	800c43c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c30c:	e853 3f00 	ldrex	r3, [r3]
 800c310:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c322:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c324:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c32a:	e841 2300 	strex	r3, r2, [r1]
 800c32e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1e6      	bne.n	800c304 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3308      	adds	r3, #8
 800c33c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	e853 3f00 	ldrex	r3, [r3]
 800c344:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c348:	f023 0301 	bic.w	r3, r3, #1
 800c34c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c356:	647a      	str	r2, [r7, #68]	@ 0x44
 800c358:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c35c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e5      	bne.n	800c336 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2220      	movs	r2, #32
 800c36e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d018      	beq.n	800c3be <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	623b      	str	r3, [r7, #32]
   return(result);
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e6      	bne.n	800c38c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d12e      	bne.n	800c424 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f023 0310 	bic.w	r3, r3, #16
 800c3e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3ea:	61fb      	str	r3, [r7, #28]
 800c3ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	69b9      	ldr	r1, [r7, #24]
 800c3f0:	69fa      	ldr	r2, [r7, #28]
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e6      	bne.n	800c3cc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	f003 0310 	and.w	r3, r3, #16
 800c408:	2b10      	cmp	r3, #16
 800c40a:	d103      	bne.n	800c414 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2210      	movs	r2, #16
 800c412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff fa01 	bl	800b824 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c422:	e00b      	b.n	800c43c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7f5 fde7 	bl	8001ff8 <HAL_UART_RxCpltCallback>
}
 800c42a:	e007      	b.n	800c43c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f042 0208 	orr.w	r2, r2, #8
 800c43a:	619a      	str	r2, [r3, #24]
}
 800c43c:	bf00      	nop
 800c43e:	3770      	adds	r7, #112	@ 0x70
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b09c      	sub	sp, #112	@ 0x70
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c452:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c45c:	2b22      	cmp	r3, #34	@ 0x22
 800c45e:	f040 80b9 	bne.w	800c5d4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c468:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c470:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c472:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c476:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c47a:	4013      	ands	r3, r2
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c480:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c486:	1c9a      	adds	r2, r3, #2
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c492:	b29b      	uxth	r3, r3
 800c494:	3b01      	subs	r3, #1
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f040 809c 	bne.w	800c5e4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c4ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c4ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4d2:	e841 2300 	strex	r3, r2, [r1]
 800c4d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1e6      	bne.n	800c4ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f0:	f023 0301 	bic.w	r3, r3, #1
 800c4f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4fe:	643a      	str	r2, [r7, #64]	@ 0x40
 800c500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c502:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c506:	e841 2300 	strex	r3, r2, [r1]
 800c50a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e5      	bne.n	800c4de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2220      	movs	r2, #32
 800c516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d018      	beq.n	800c566 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	61fb      	str	r3, [r7, #28]
   return(result);
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c554:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e6      	bne.n	800c534 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d12e      	bne.n	800c5cc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	e853 3f00 	ldrex	r3, [r3]
 800c580:	60bb      	str	r3, [r7, #8]
   return(result);
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	f023 0310 	bic.w	r3, r3, #16
 800c588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	461a      	mov	r2, r3
 800c590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c592:	61bb      	str	r3, [r7, #24]
 800c594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c596:	6979      	ldr	r1, [r7, #20]
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	e841 2300 	strex	r3, r2, [r1]
 800c59e:	613b      	str	r3, [r7, #16]
   return(result);
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1e6      	bne.n	800c574 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	f003 0310 	and.w	r3, r3, #16
 800c5b0:	2b10      	cmp	r3, #16
 800c5b2:	d103      	bne.n	800c5bc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2210      	movs	r2, #16
 800c5ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff f92d 	bl	800b824 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5ca:	e00b      	b.n	800c5e4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7f5 fd13 	bl	8001ff8 <HAL_UART_RxCpltCallback>
}
 800c5d2:	e007      	b.n	800c5e4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	699a      	ldr	r2, [r3, #24]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f042 0208 	orr.w	r2, r2, #8
 800c5e2:	619a      	str	r2, [r3, #24]
}
 800c5e4:	bf00      	nop
 800c5e6:	3770      	adds	r7, #112	@ 0x70
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d121      	bne.n	800c642 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	4b27      	ldr	r3, [pc, #156]	@ (800c6a0 <FMC_SDRAM_Init+0xb4>)
 800c604:	4013      	ands	r3, r2
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	6851      	ldr	r1, [r2, #4]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	6892      	ldr	r2, [r2, #8]
 800c60e:	4311      	orrs	r1, r2
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	68d2      	ldr	r2, [r2, #12]
 800c614:	4311      	orrs	r1, r2
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	6912      	ldr	r2, [r2, #16]
 800c61a:	4311      	orrs	r1, r2
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	6952      	ldr	r2, [r2, #20]
 800c620:	4311      	orrs	r1, r2
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	6992      	ldr	r2, [r2, #24]
 800c626:	4311      	orrs	r1, r2
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	69d2      	ldr	r2, [r2, #28]
 800c62c:	4311      	orrs	r1, r2
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	6a12      	ldr	r2, [r2, #32]
 800c632:	4311      	orrs	r1, r2
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c638:	430a      	orrs	r2, r1
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	e026      	b.n	800c690 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	69d9      	ldr	r1, [r3, #28]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	4319      	orrs	r1, r3
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c658:	430b      	orrs	r3, r1
 800c65a:	431a      	orrs	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a0 <FMC_SDRAM_Init+0xb4>)
 800c666:	4013      	ands	r3, r2
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	6851      	ldr	r1, [r2, #4]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	6892      	ldr	r2, [r2, #8]
 800c670:	4311      	orrs	r1, r2
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	68d2      	ldr	r2, [r2, #12]
 800c676:	4311      	orrs	r1, r2
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	6912      	ldr	r2, [r2, #16]
 800c67c:	4311      	orrs	r1, r2
 800c67e:	683a      	ldr	r2, [r7, #0]
 800c680:	6952      	ldr	r2, [r2, #20]
 800c682:	4311      	orrs	r1, r2
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	6992      	ldr	r2, [r2, #24]
 800c688:	430a      	orrs	r2, r1
 800c68a:	431a      	orrs	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	ffff8000 	.word	0xffff8000

0800c6a4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d128      	bne.n	800c708 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	1e59      	subs	r1, r3, #1
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	011b      	lsls	r3, r3, #4
 800c6cc:	4319      	orrs	r1, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	021b      	lsls	r3, r3, #8
 800c6d6:	4319      	orrs	r1, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	031b      	lsls	r3, r3, #12
 800c6e0:	4319      	orrs	r1, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	041b      	lsls	r3, r3, #16
 800c6ea:	4319      	orrs	r1, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	051b      	lsls	r3, r3, #20
 800c6f4:	4319      	orrs	r1, r3
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	061b      	lsls	r3, r3, #24
 800c6fe:	430b      	orrs	r3, r1
 800c700:	431a      	orrs	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	609a      	str	r2, [r3, #8]
 800c706:	e02d      	b.n	800c764 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	4b19      	ldr	r3, [pc, #100]	@ (800c774 <FMC_SDRAM_Timing_Init+0xd0>)
 800c70e:	4013      	ands	r3, r2
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	68d2      	ldr	r2, [r2, #12]
 800c714:	3a01      	subs	r2, #1
 800c716:	0311      	lsls	r1, r2, #12
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	6952      	ldr	r2, [r2, #20]
 800c71c:	3a01      	subs	r2, #1
 800c71e:	0512      	lsls	r2, r2, #20
 800c720:	430a      	orrs	r2, r1
 800c722:	431a      	orrs	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	1e59      	subs	r1, r3, #1
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	4319      	orrs	r1, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	3b01      	subs	r3, #1
 800c746:	021b      	lsls	r3, r3, #8
 800c748:	4319      	orrs	r1, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	3b01      	subs	r3, #1
 800c750:	041b      	lsls	r3, r3, #16
 800c752:	4319      	orrs	r1, r3
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	3b01      	subs	r3, #1
 800c75a:	061b      	lsls	r3, r3, #24
 800c75c:	430b      	orrs	r3, r1
 800c75e:	431a      	orrs	r2, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3714      	adds	r7, #20
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	ff0f0fff 	.word	0xff0f0fff

0800c778 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c778:	b084      	sub	sp, #16
 800c77a:	b480      	push	{r7}
 800c77c:	b085      	sub	sp, #20
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	f107 001c 	add.w	r0, r7, #28
 800c786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c78e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c790:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c792:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c796:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c79a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c79e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c7a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	4b07      	ldr	r3, [pc, #28]	@ (800c7cc <SDMMC_Init+0x54>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	b004      	add	sp, #16
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	ffff8100 	.word	0xffff8100

0800c7d0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2203      	movs	r2, #3
 800c7f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c806:	b480      	push	{r7}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0303 	and.w	r3, r3, #3
}
 800c816:	4618      	mov	r0, r3
 800c818:	370c      	adds	r7, #12
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
	...

0800c824 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c842:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c848:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c84e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	4313      	orrs	r3, r2
 800c854:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	4b06      	ldr	r3, [pc, #24]	@ (800c874 <SDMMC_SendCommand+0x50>)
 800c85c:	4013      	ands	r3, r2
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	fffff000 	.word	0xfffff000

0800c878 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	b2db      	uxtb	r3, r3
}
 800c886:	4618      	mov	r0, r3
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
}  
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	685a      	ldr	r2, [r3, #4]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c8e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c8ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8f6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	431a      	orrs	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c902:	2300      	movs	r3, #0

}
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c91e:	2310      	movs	r3, #16
 800c920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c922:	2340      	movs	r3, #64	@ 0x40
 800c924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c926:	2300      	movs	r3, #0
 800c928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c92a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c92e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c930:	f107 0308 	add.w	r3, r7, #8
 800c934:	4619      	mov	r1, r3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7ff ff74 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c940:	2110      	movs	r1, #16
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fa1a 	bl	800cd7c <SDMMC_GetCmdResp1>
 800c948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c94a:	69fb      	ldr	r3, [r7, #28]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3720      	adds	r7, #32
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c962:	2311      	movs	r3, #17
 800c964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c966:	2340      	movs	r3, #64	@ 0x40
 800c968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c96e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c974:	f107 0308 	add.w	r3, r7, #8
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7ff ff52 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c980:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c984:	2111      	movs	r1, #17
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f9f8 	bl	800cd7c <SDMMC_GetCmdResp1>
 800c98c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c98e:	69fb      	ldr	r3, [r7, #28]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c9a6:	2312      	movs	r3, #18
 800c9a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9aa:	2340      	movs	r3, #64	@ 0x40
 800c9ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9b8:	f107 0308 	add.w	r3, r7, #8
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f7ff ff30 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c9c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9c8:	2112      	movs	r1, #18
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f9d6 	bl	800cd7c <SDMMC_GetCmdResp1>
 800c9d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c9ea:	2318      	movs	r3, #24
 800c9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ee:	2340      	movs	r3, #64	@ 0x40
 800c9f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9fc:	f107 0308 	add.w	r3, r7, #8
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff ff0e 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ca08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca0c:	2118      	movs	r1, #24
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f9b4 	bl	800cd7c <SDMMC_GetCmdResp1>
 800ca14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca16:	69fb      	ldr	r3, [r7, #28]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ca2e:	2319      	movs	r3, #25
 800ca30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca32:	2340      	movs	r3, #64	@ 0x40
 800ca34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff feec 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ca4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca50:	2119      	movs	r1, #25
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f992 	bl	800cd7c <SDMMC_GetCmdResp1>
 800ca58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca5a:	69fb      	ldr	r3, [r7, #28]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ca70:	230c      	movs	r3, #12
 800ca72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca74:	2340      	movs	r3, #64	@ 0x40
 800ca76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca82:	f107 0308 	add.w	r3, r7, #8
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fecb 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ca8e:	4a05      	ldr	r2, [pc, #20]	@ (800caa4 <SDMMC_CmdStopTransfer+0x40>)
 800ca90:	210c      	movs	r1, #12
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f972 	bl	800cd7c <SDMMC_GetCmdResp1>
 800ca98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca9a:	69fb      	ldr	r3, [r7, #28]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	05f5e100 	.word	0x05f5e100

0800caa8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	@ 0x28
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cab8:	2307      	movs	r3, #7
 800caba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cabc:	2340      	movs	r3, #64	@ 0x40
 800cabe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cac8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caca:	f107 0310 	add.w	r3, r7, #16
 800cace:	4619      	mov	r1, r3
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f7ff fea7 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cada:	2107      	movs	r1, #7
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 f94d 	bl	800cd7c <SDMMC_GetCmdResp1>
 800cae2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3728      	adds	r7, #40	@ 0x28
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b088      	sub	sp, #32
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cafe:	2300      	movs	r3, #0
 800cb00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb02:	2300      	movs	r3, #0
 800cb04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb0c:	f107 0308 	add.w	r3, r7, #8
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7ff fe86 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fb67 	bl	800d1ec <SDMMC_GetCmdError>
 800cb1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb20:	69fb      	ldr	r3, [r7, #28]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3720      	adds	r7, #32
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b088      	sub	sp, #32
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cb32:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cb36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cb38:	2308      	movs	r3, #8
 800cb3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb3c:	2340      	movs	r3, #64	@ 0x40
 800cb3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb40:	2300      	movs	r3, #0
 800cb42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb4a:	f107 0308 	add.w	r3, r7, #8
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7ff fe67 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fafa 	bl	800d150 <SDMMC_GetCmdResp7>
 800cb5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb5e:	69fb      	ldr	r3, [r7, #28]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3720      	adds	r7, #32
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cb76:	2337      	movs	r3, #55	@ 0x37
 800cb78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb7a:	2340      	movs	r3, #64	@ 0x40
 800cb7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7ff fe48 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cb94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb98:	2137      	movs	r1, #55	@ 0x37
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f8ee 	bl	800cd7c <SDMMC_GetCmdResp1>
 800cba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cba2:	69fb      	ldr	r3, [r7, #28]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3720      	adds	r7, #32
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cbb6:	683a      	ldr	r2, [r7, #0]
 800cbb8:	4b0d      	ldr	r3, [pc, #52]	@ (800cbf0 <SDMMC_CmdAppOperCommand+0x44>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cbbe:	2329      	movs	r3, #41	@ 0x29
 800cbc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbc2:	2340      	movs	r3, #64	@ 0x40
 800cbc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbd0:	f107 0308 	add.w	r3, r7, #8
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff fe24 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 fa03 	bl	800cfe8 <SDMMC_GetCmdResp3>
 800cbe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbe4:	69fb      	ldr	r3, [r7, #28]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3720      	adds	r7, #32
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	80100000 	.word	0x80100000

0800cbf4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cc02:	2306      	movs	r3, #6
 800cc04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc06:	2340      	movs	r3, #64	@ 0x40
 800cc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc14:	f107 0308 	add.w	r3, r7, #8
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fe02 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cc20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc24:	2106      	movs	r1, #6
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f8a8 	bl	800cd7c <SDMMC_GetCmdResp1>
 800cc2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc2e:	69fb      	ldr	r3, [r7, #28]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3720      	adds	r7, #32
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cc44:	2333      	movs	r3, #51	@ 0x33
 800cc46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc48:	2340      	movs	r3, #64	@ 0x40
 800cc4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc56:	f107 0308 	add.w	r3, r7, #8
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff fde1 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cc62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc66:	2133      	movs	r1, #51	@ 0x33
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 f887 	bl	800cd7c <SDMMC_GetCmdResp1>
 800cc6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc70:	69fb      	ldr	r3, [r7, #28]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3720      	adds	r7, #32
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b088      	sub	sp, #32
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cc86:	2302      	movs	r3, #2
 800cc88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cc8a:	23c0      	movs	r3, #192	@ 0xc0
 800cc8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc98:	f107 0308 	add.w	r3, r7, #8
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff fdc0 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f957 	bl	800cf58 <SDMMC_GetCmdResp2>
 800ccaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccac:	69fb      	ldr	r3, [r7, #28]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3720      	adds	r7, #32
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b088      	sub	sp, #32
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ccc4:	2309      	movs	r3, #9
 800ccc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ccc8:	23c0      	movs	r3, #192	@ 0xc0
 800ccca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cccc:	2300      	movs	r3, #0
 800ccce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd6:	f107 0308 	add.w	r3, r7, #8
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff fda1 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f938 	bl	800cf58 <SDMMC_GetCmdResp2>
 800cce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccea:	69fb      	ldr	r3, [r7, #28]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3720      	adds	r7, #32
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cd02:	2303      	movs	r3, #3
 800cd04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd06:	2340      	movs	r3, #64	@ 0x40
 800cd08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd14:	f107 0308 	add.w	r3, r7, #8
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fd82 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	2103      	movs	r1, #3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f99d 	bl	800d064 <SDMMC_GetCmdResp6>
 800cd2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd2c:	69fb      	ldr	r3, [r7, #28]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3720      	adds	r7, #32
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b088      	sub	sp, #32
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cd44:	230d      	movs	r3, #13
 800cd46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd48:	2340      	movs	r3, #64	@ 0x40
 800cd4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7ff fd61 	bl	800c824 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cd62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd66:	210d      	movs	r1, #13
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f807 	bl	800cd7c <SDMMC_GetCmdResp1>
 800cd6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd70:	69fb      	ldr	r3, [r7, #28]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3720      	adds	r7, #32
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	460b      	mov	r3, r1
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cd8a:	4b70      	ldr	r3, [pc, #448]	@ (800cf4c <SDMMC_GetCmdResp1+0x1d0>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a70      	ldr	r2, [pc, #448]	@ (800cf50 <SDMMC_GetCmdResp1+0x1d4>)
 800cd90:	fba2 2303 	umull	r2, r3, r2, r3
 800cd94:	0a5a      	lsrs	r2, r3, #9
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	fb02 f303 	mul.w	r3, r2, r3
 800cd9c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	1e5a      	subs	r2, r3, #1
 800cda2:	61fa      	str	r2, [r7, #28]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cda8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cdac:	e0c9      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0ef      	beq.n	800cd9e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1ea      	bne.n	800cd9e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdcc:	f003 0304 	and.w	r3, r3, #4
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d004      	beq.n	800cdde <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2204      	movs	r2, #4
 800cdd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdda:	2304      	movs	r3, #4
 800cddc:	e0b1      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e0a6      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	22c5      	movs	r2, #197	@ 0xc5
 800cdf8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f7ff fd3c 	bl	800c878 <SDMMC_GetCommandResponse>
 800ce00:	4603      	mov	r3, r0
 800ce02:	461a      	mov	r2, r3
 800ce04:	7afb      	ldrb	r3, [r7, #11]
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d001      	beq.n	800ce0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e099      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ce0e:	2100      	movs	r1, #0
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7ff fd3e 	bl	800c892 <SDMMC_GetResponse>
 800ce16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	4b4e      	ldr	r3, [pc, #312]	@ (800cf54 <SDMMC_GetCmdResp1+0x1d8>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d101      	bne.n	800ce26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e08d      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da02      	bge.n	800ce32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ce2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ce30:	e087      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ce3c:	2340      	movs	r3, #64	@ 0x40
 800ce3e:	e080      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ce4a:	2380      	movs	r3, #128	@ 0x80
 800ce4c:	e079      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ce58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce5c:	e071      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce6c:	e069      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ce78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce7c:	e061      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ce88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce8c:	e059      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce9c:	e051      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ceac:	e049      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ceb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cebc:	e041      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cecc:	e039      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ced8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cedc:	e031      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cee8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ceec:	e029      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cef8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cefc:	e021      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cf08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cf0c:	e019      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cf1c:	e011      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cf28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cf2c:	e009      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	f003 0308 	and.w	r3, r3, #8
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cf38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cf3c:	e001      	b.n	800cf42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cf3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3720      	adds	r7, #32
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20000004 	.word	0x20000004
 800cf50:	10624dd3 	.word	0x10624dd3
 800cf54:	fdffe008 	.word	0xfdffe008

0800cf58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf60:	4b1f      	ldr	r3, [pc, #124]	@ (800cfe0 <SDMMC_GetCmdResp2+0x88>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a1f      	ldr	r2, [pc, #124]	@ (800cfe4 <SDMMC_GetCmdResp2+0x8c>)
 800cf66:	fba2 2303 	umull	r2, r3, r2, r3
 800cf6a:	0a5b      	lsrs	r3, r3, #9
 800cf6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf70:	fb02 f303 	mul.w	r3, r2, r3
 800cf74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	1e5a      	subs	r2, r3, #1
 800cf7a:	60fa      	str	r2, [r7, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d102      	bne.n	800cf86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf84:	e026      	b.n	800cfd4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0ef      	beq.n	800cf76 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1ea      	bne.n	800cf76 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d004      	beq.n	800cfb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2204      	movs	r2, #4
 800cfb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfb2:	2304      	movs	r3, #4
 800cfb4:	e00e      	b.n	800cfd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d004      	beq.n	800cfcc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e003      	b.n	800cfd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	22c5      	movs	r2, #197	@ 0xc5
 800cfd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	20000004 	.word	0x20000004
 800cfe4:	10624dd3 	.word	0x10624dd3

0800cfe8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cff0:	4b1a      	ldr	r3, [pc, #104]	@ (800d05c <SDMMC_GetCmdResp3+0x74>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a1a      	ldr	r2, [pc, #104]	@ (800d060 <SDMMC_GetCmdResp3+0x78>)
 800cff6:	fba2 2303 	umull	r2, r3, r2, r3
 800cffa:	0a5b      	lsrs	r3, r3, #9
 800cffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d000:	fb02 f303 	mul.w	r3, r2, r3
 800d004:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	1e5a      	subs	r2, r3, #1
 800d00a:	60fa      	str	r2, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d010:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d014:	e01b      	b.n	800d04e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d01a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d022:	2b00      	cmp	r3, #0
 800d024:	d0ef      	beq.n	800d006 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1ea      	bne.n	800d006 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d034:	f003 0304 	and.w	r3, r3, #4
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2204      	movs	r2, #4
 800d040:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d042:	2304      	movs	r3, #4
 800d044:	e003      	b.n	800d04e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	22c5      	movs	r2, #197	@ 0xc5
 800d04a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	20000004 	.word	0x20000004
 800d060:	10624dd3 	.word	0x10624dd3

0800d064 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	460b      	mov	r3, r1
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d072:	4b35      	ldr	r3, [pc, #212]	@ (800d148 <SDMMC_GetCmdResp6+0xe4>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a35      	ldr	r2, [pc, #212]	@ (800d14c <SDMMC_GetCmdResp6+0xe8>)
 800d078:	fba2 2303 	umull	r2, r3, r2, r3
 800d07c:	0a5b      	lsrs	r3, r3, #9
 800d07e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d082:	fb02 f303 	mul.w	r3, r2, r3
 800d086:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	1e5a      	subs	r2, r3, #1
 800d08c:	61fa      	str	r2, [r7, #28]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d102      	bne.n	800d098 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d092:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d096:	e052      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d09c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0ef      	beq.n	800d088 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1ea      	bne.n	800d088 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0b6:	f003 0304 	and.w	r3, r3, #4
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2204      	movs	r2, #4
 800d0c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	e03a      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e02f      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7ff fbca 	bl	800c878 <SDMMC_GetCommandResponse>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	7afb      	ldrb	r3, [r7, #11]
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d001      	beq.n	800d0f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e025      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	22c5      	movs	r2, #197	@ 0xc5
 800d0f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff fbc9 	bl	800c892 <SDMMC_GetResponse>
 800d100:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d106      	bne.n	800d11a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	0c1b      	lsrs	r3, r3, #16
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d116:	2300      	movs	r3, #0
 800d118:	e011      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d128:	e009      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d138:	e001      	b.n	800d13e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d13a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3720      	adds	r7, #32
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20000004 	.word	0x20000004
 800d14c:	10624dd3 	.word	0x10624dd3

0800d150 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d158:	4b22      	ldr	r3, [pc, #136]	@ (800d1e4 <SDMMC_GetCmdResp7+0x94>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a22      	ldr	r2, [pc, #136]	@ (800d1e8 <SDMMC_GetCmdResp7+0x98>)
 800d15e:	fba2 2303 	umull	r2, r3, r2, r3
 800d162:	0a5b      	lsrs	r3, r3, #9
 800d164:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d168:	fb02 f303 	mul.w	r3, r2, r3
 800d16c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	1e5a      	subs	r2, r3, #1
 800d172:	60fa      	str	r2, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d178:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d17c:	e02c      	b.n	800d1d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d182:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d0ef      	beq.n	800d16e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1ea      	bne.n	800d16e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d19c:	f003 0304 	and.w	r3, r3, #4
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1aa:	2304      	movs	r3, #4
 800d1ac:	e014      	b.n	800d1d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d004      	beq.n	800d1c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e009      	b.n	800d1d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2240      	movs	r2, #64	@ 0x40
 800d1d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d1d6:	2300      	movs	r3, #0
  
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	20000004 	.word	0x20000004
 800d1e8:	10624dd3 	.word	0x10624dd3

0800d1ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1f4:	4b11      	ldr	r3, [pc, #68]	@ (800d23c <SDMMC_GetCmdError+0x50>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a11      	ldr	r2, [pc, #68]	@ (800d240 <SDMMC_GetCmdError+0x54>)
 800d1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d1fe:	0a5b      	lsrs	r3, r3, #9
 800d200:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d204:	fb02 f303 	mul.w	r3, r2, r3
 800d208:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	1e5a      	subs	r2, r3, #1
 800d20e:	60fa      	str	r2, [r7, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d214:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d218:	e009      	b.n	800d22e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0f1      	beq.n	800d20a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	22c5      	movs	r2, #197	@ 0xc5
 800d22a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	20000004 	.word	0x20000004
 800d240:	10624dd3 	.word	0x10624dd3

0800d244 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d248:	4904      	ldr	r1, [pc, #16]	@ (800d25c <MX_FATFS_Init+0x18>)
 800d24a:	4805      	ldr	r0, [pc, #20]	@ (800d260 <MX_FATFS_Init+0x1c>)
 800d24c:	f000 fa96 	bl	800d77c <FATFS_LinkDriver>
 800d250:	4603      	mov	r3, r0
 800d252:	461a      	mov	r2, r3
 800d254:	4b03      	ldr	r3, [pc, #12]	@ (800d264 <MX_FATFS_Init+0x20>)
 800d256:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d258:	bf00      	nop
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	20001070 	.word	0x20001070
 800d260:	08014c88 	.word	0x08014c88
 800d264:	2000106c 	.word	0x2000106c

0800d268 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d272:	f000 f87b 	bl	800d36c <BSP_SD_IsDetected>
 800d276:	4603      	mov	r3, r0
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d001      	beq.n	800d280 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d27c:	2302      	movs	r3, #2
 800d27e:	e012      	b.n	800d2a6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d280:	480b      	ldr	r0, [pc, #44]	@ (800d2b0 <BSP_SD_Init+0x48>)
 800d282:	f7fb fbe3 	bl	8008a4c <HAL_SD_Init>
 800d286:	4603      	mov	r3, r0
 800d288:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d28a:	79fb      	ldrb	r3, [r7, #7]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d109      	bne.n	800d2a4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d290:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d294:	4806      	ldr	r0, [pc, #24]	@ (800d2b0 <BSP_SD_Init+0x48>)
 800d296:	f7fc f82b 	bl	80092f0 <HAL_SD_ConfigWideBusOperation>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000c0c 	.word	0x20000c0c

0800d2b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	68ba      	ldr	r2, [r7, #8]
 800d2c8:	68f9      	ldr	r1, [r7, #12]
 800d2ca:	4806      	ldr	r0, [pc, #24]	@ (800d2e4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d2cc:	f7fb fc6e 	bl	8008bac <HAL_SD_ReadBlocks_DMA>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	20000c0c 	.word	0x20000c0c

0800d2e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	68f9      	ldr	r1, [r7, #12]
 800d2fe:	4806      	ldr	r0, [pc, #24]	@ (800d318 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d300:	f7fb fd36 	bl	8008d70 <HAL_SD_WriteBlocks_DMA>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20000c0c 	.word	0x20000c0c

0800d31c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d320:	4805      	ldr	r0, [pc, #20]	@ (800d338 <BSP_SD_GetCardState+0x1c>)
 800d322:	f7fc f87f 	bl	8009424 <HAL_SD_GetCardState>
 800d326:	4603      	mov	r3, r0
 800d328:	2b04      	cmp	r3, #4
 800d32a:	bf14      	ite	ne
 800d32c:	2301      	movne	r3, #1
 800d32e:	2300      	moveq	r3, #0
 800d330:	b2db      	uxtb	r3, r3
}
 800d332:	4618      	mov	r0, r3
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	20000c0c 	.word	0x20000c0c

0800d33c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	4803      	ldr	r0, [pc, #12]	@ (800d354 <BSP_SD_GetCardInfo+0x18>)
 800d348:	f7fb ffa6 	bl	8009298 <HAL_SD_GetCardInfo>
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20000c0c 	.word	0x20000c0c

0800d358 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d360:	f000 f9b2 	bl	800d6c8 <BSP_SD_ReadCpltCallback>
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d372:	2301      	movs	r3, #1
 800d374:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d376:	f000 f80b 	bl	800d390 <BSP_PlatformIsDetected>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d380:	2300      	movs	r3, #0
 800d382:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	b2db      	uxtb	r3, r3
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d396:	2301      	movs	r3, #1
 800d398:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d39a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d39e:	4806      	ldr	r0, [pc, #24]	@ (800d3b8 <BSP_PlatformIsDetected+0x28>)
 800d3a0:	f7f8 fe46 	bl	8006030 <HAL_GPIO_ReadPin>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	40020800 	.word	0x40020800

0800d3bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d3c4:	f000 fa26 	bl	800d814 <osKernelSysTick>
 800d3c8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d3ca:	e006      	b.n	800d3da <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3cc:	f7ff ffa6 	bl	800d31c <BSP_SD_GetCardState>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e009      	b.n	800d3ee <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d3da:	f000 fa1b 	bl	800d814 <osKernelSysTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d8f0      	bhi.n	800d3cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d402:	4b0b      	ldr	r3, [pc, #44]	@ (800d430 <SD_CheckStatus+0x38>)
 800d404:	2201      	movs	r2, #1
 800d406:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d408:	f7ff ff88 	bl	800d31c <BSP_SD_GetCardState>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d107      	bne.n	800d422 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d412:	4b07      	ldr	r3, [pc, #28]	@ (800d430 <SD_CheckStatus+0x38>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	f023 0301 	bic.w	r3, r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	4b04      	ldr	r3, [pc, #16]	@ (800d430 <SD_CheckStatus+0x38>)
 800d420:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d422:	4b03      	ldr	r3, [pc, #12]	@ (800d430 <SD_CheckStatus+0x38>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	b2db      	uxtb	r3, r3
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	2000000d 	.word	0x2000000d

0800d434 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d434:	b590      	push	{r4, r7, lr}
 800d436:	b087      	sub	sp, #28
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4603      	mov	r3, r0
 800d43c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d43e:	4b20      	ldr	r3, [pc, #128]	@ (800d4c0 <SD_initialize+0x8c>)
 800d440:	2201      	movs	r2, #1
 800d442:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d444:	f000 f9da 	bl	800d7fc <osKernelRunning>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d030      	beq.n	800d4b0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d44e:	f7ff ff0b 	bl	800d268 <BSP_SD_Init>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d107      	bne.n	800d468 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff ffcc 	bl	800d3f8 <SD_CheckStatus>
 800d460:	4603      	mov	r3, r0
 800d462:	461a      	mov	r2, r3
 800d464:	4b16      	ldr	r3, [pc, #88]	@ (800d4c0 <SD_initialize+0x8c>)
 800d466:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d468:	4b15      	ldr	r3, [pc, #84]	@ (800d4c0 <SD_initialize+0x8c>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d01e      	beq.n	800d4b0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d472:	4b14      	ldr	r3, [pc, #80]	@ (800d4c4 <SD_initialize+0x90>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d10e      	bne.n	800d498 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d47a:	4b13      	ldr	r3, [pc, #76]	@ (800d4c8 <SD_initialize+0x94>)
 800d47c:	f107 0408 	add.w	r4, r7, #8
 800d480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d486:	f107 0308 	add.w	r3, r7, #8
 800d48a:	2100      	movs	r1, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 fa31 	bl	800d8f4 <osMessageCreate>
 800d492:	4603      	mov	r3, r0
 800d494:	4a0b      	ldr	r2, [pc, #44]	@ (800d4c4 <SD_initialize+0x90>)
 800d496:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d498:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c4 <SD_initialize+0x90>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d107      	bne.n	800d4b0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d4a0:	4b07      	ldr	r3, [pc, #28]	@ (800d4c0 <SD_initialize+0x8c>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	4b04      	ldr	r3, [pc, #16]	@ (800d4c0 <SD_initialize+0x8c>)
 800d4ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d4b0:	4b03      	ldr	r3, [pc, #12]	@ (800d4c0 <SD_initialize+0x8c>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	b2db      	uxtb	r3, r3
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd90      	pop	{r4, r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	2000000d 	.word	0x2000000d
 800d4c4:	20001074 	.word	0x20001074
 800d4c8:	08014c58 	.word	0x08014c58

0800d4cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7ff ff8d 	bl	800d3f8 <SD_CheckStatus>
 800d4de:	4603      	mov	r3, r0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	@ 0x28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d4fe:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d502:	f7ff ff5b 	bl	800d3bc <SD_CheckStatusWithTimeout>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	da02      	bge.n	800d512 <SD_read+0x2a>
  {
    return res;
 800d50c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d510:	e032      	b.n	800d578 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	6879      	ldr	r1, [r7, #4]
 800d516:	68b8      	ldr	r0, [r7, #8]
 800d518:	f7ff fecc 	bl	800d2b4 <BSP_SD_ReadBlocks_DMA>
 800d51c:	4603      	mov	r3, r0
 800d51e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800d522:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d526:	2b00      	cmp	r3, #0
 800d528:	d124      	bne.n	800d574 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d52a:	4b15      	ldr	r3, [pc, #84]	@ (800d580 <SD_read+0x98>)
 800d52c:	6819      	ldr	r1, [r3, #0]
 800d52e:	f107 0314 	add.w	r3, r7, #20
 800d532:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d536:	4618      	mov	r0, r3
 800d538:	f000 fa44 	bl	800d9c4 <osMessageGet>

    if (event.status == osEventMessage)
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	2b10      	cmp	r3, #16
 800d540:	d118      	bne.n	800d574 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d115      	bne.n	800d574 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d548:	f000 f964 	bl	800d814 <osKernelSysTick>
 800d54c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d54e:	e008      	b.n	800d562 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d550:	f7ff fee4 	bl	800d31c <BSP_SD_GetCardState>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d103      	bne.n	800d562 <SD_read+0x7a>
              {
                res = RES_OK;
 800d55a:	2300      	movs	r3, #0
 800d55c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d560:	e008      	b.n	800d574 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d562:	f000 f957 	bl	800d814 <osKernelSysTick>
 800d566:	4602      	mov	r2, r0
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d570:	4293      	cmp	r3, r2
 800d572:	d9ed      	bls.n	800d550 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3728      	adds	r7, #40	@ 0x28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	20001074 	.word	0x20001074

0800d584 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08a      	sub	sp, #40	@ 0x28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	607a      	str	r2, [r7, #4]
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	4603      	mov	r3, r0
 800d592:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d594:	2301      	movs	r3, #1
 800d596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d59a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d59e:	f7ff ff0d 	bl	800d3bc <SD_CheckStatusWithTimeout>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	da02      	bge.n	800d5ae <SD_write+0x2a>
  {
    return res;
 800d5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5ac:	e02e      	b.n	800d60c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	6879      	ldr	r1, [r7, #4]
 800d5b2:	68b8      	ldr	r0, [r7, #8]
 800d5b4:	f7ff fe98 	bl	800d2e8 <BSP_SD_WriteBlocks_DMA>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d124      	bne.n	800d608 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d5be:	4b15      	ldr	r3, [pc, #84]	@ (800d614 <SD_write+0x90>)
 800d5c0:	6819      	ldr	r1, [r3, #0]
 800d5c2:	f107 0314 	add.w	r3, r7, #20
 800d5c6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 f9fa 	bl	800d9c4 <osMessageGet>

    if (event.status == osEventMessage)
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	2b10      	cmp	r3, #16
 800d5d4:	d118      	bne.n	800d608 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d115      	bne.n	800d608 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d5dc:	f000 f91a 	bl	800d814 <osKernelSysTick>
 800d5e0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d5e2:	e008      	b.n	800d5f6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5e4:	f7ff fe9a 	bl	800d31c <BSP_SD_GetCardState>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d103      	bne.n	800d5f6 <SD_write+0x72>
          {
            res = RES_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d5f4:	e008      	b.n	800d608 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d5f6:	f000 f90d 	bl	800d814 <osKernelSysTick>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d604:	4293      	cmp	r3, r2
 800d606:	d9ed      	bls.n	800d5e4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3728      	adds	r7, #40	@ 0x28
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20001074 	.word	0x20001074

0800d618 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08c      	sub	sp, #48	@ 0x30
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	603a      	str	r2, [r7, #0]
 800d622:	71fb      	strb	r3, [r7, #7]
 800d624:	460b      	mov	r3, r1
 800d626:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d62e:	4b25      	ldr	r3, [pc, #148]	@ (800d6c4 <SD_ioctl+0xac>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <SD_ioctl+0x28>
 800d63c:	2303      	movs	r3, #3
 800d63e:	e03c      	b.n	800d6ba <SD_ioctl+0xa2>

  switch (cmd)
 800d640:	79bb      	ldrb	r3, [r7, #6]
 800d642:	2b03      	cmp	r3, #3
 800d644:	d834      	bhi.n	800d6b0 <SD_ioctl+0x98>
 800d646:	a201      	add	r2, pc, #4	@ (adr r2, 800d64c <SD_ioctl+0x34>)
 800d648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64c:	0800d65d 	.word	0x0800d65d
 800d650:	0800d665 	.word	0x0800d665
 800d654:	0800d67d 	.word	0x0800d67d
 800d658:	0800d697 	.word	0x0800d697
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d662:	e028      	b.n	800d6b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d664:	f107 030c 	add.w	r3, r7, #12
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fe67 	bl	800d33c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d67a:	e01c      	b.n	800d6b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d67c:	f107 030c 	add.w	r3, r7, #12
 800d680:	4618      	mov	r0, r3
 800d682:	f7ff fe5b 	bl	800d33c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d688:	b29a      	uxth	r2, r3
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d694:	e00f      	b.n	800d6b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d696:	f107 030c 	add.w	r3, r7, #12
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7ff fe4e 	bl	800d33c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a2:	0a5a      	lsrs	r2, r3, #9
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d6ae:	e002      	b.n	800d6b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d6b0:	2304      	movs	r3, #4
 800d6b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3730      	adds	r7, #48	@ 0x30
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	2000000d 	.word	0x2000000d

0800d6c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d6cc:	4b04      	ldr	r3, [pc, #16]	@ (800d6e0 <BSP_SD_ReadCpltCallback+0x18>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 f935 	bl	800d944 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800d6da:	bf00      	nop
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20001074 	.word	0x20001074

0800d6e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b087      	sub	sp, #28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6fa:	4b1f      	ldr	r3, [pc, #124]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d6fc:	7a5b      	ldrb	r3, [r3, #9]
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b00      	cmp	r3, #0
 800d702:	d131      	bne.n	800d768 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d704:	4b1c      	ldr	r3, [pc, #112]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d706:	7a5b      	ldrb	r3, [r3, #9]
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	461a      	mov	r2, r3
 800d70c:	4b1a      	ldr	r3, [pc, #104]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d70e:	2100      	movs	r1, #0
 800d710:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d712:	4b19      	ldr	r3, [pc, #100]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d714:	7a5b      	ldrb	r3, [r3, #9]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	4a17      	ldr	r2, [pc, #92]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	4413      	add	r3, r2
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d722:	4b15      	ldr	r3, [pc, #84]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d724:	7a5b      	ldrb	r3, [r3, #9]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	461a      	mov	r2, r3
 800d72a:	4b13      	ldr	r3, [pc, #76]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d72c:	4413      	add	r3, r2
 800d72e:	79fa      	ldrb	r2, [r7, #7]
 800d730:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d732:	4b11      	ldr	r3, [pc, #68]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d734:	7a5b      	ldrb	r3, [r3, #9]
 800d736:	b2db      	uxtb	r3, r3
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	b2d1      	uxtb	r1, r2
 800d73c:	4a0e      	ldr	r2, [pc, #56]	@ (800d778 <FATFS_LinkDriverEx+0x94>)
 800d73e:	7251      	strb	r1, [r2, #9]
 800d740:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d742:	7dbb      	ldrb	r3, [r7, #22]
 800d744:	3330      	adds	r3, #48	@ 0x30
 800d746:	b2da      	uxtb	r2, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	3301      	adds	r3, #1
 800d750:	223a      	movs	r2, #58	@ 0x3a
 800d752:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	3302      	adds	r3, #2
 800d758:	222f      	movs	r2, #47	@ 0x2f
 800d75a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	3303      	adds	r3, #3
 800d760:	2200      	movs	r2, #0
 800d762:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d768:	7dfb      	ldrb	r3, [r7, #23]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	371c      	adds	r7, #28
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	20001078 	.word	0x20001078

0800d77c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d786:	2200      	movs	r2, #0
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7ff ffaa 	bl	800d6e4 <FATFS_LinkDriverEx>
 800d790:	4603      	mov	r3, r0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b085      	sub	sp, #20
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d7a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7ac:	2b84      	cmp	r3, #132	@ 0x84
 800d7ae:	d005      	beq.n	800d7bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d7b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	3303      	adds	r3, #3
 800d7ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7d0:	f3ef 8305 	mrs	r3, IPSR
 800d7d4:	607b      	str	r3, [r7, #4]
  return(result);
 800d7d6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	bf14      	ite	ne
 800d7dc:	2301      	movne	r3, #1
 800d7de:	2300      	moveq	r3, #0
 800d7e0:	b2db      	uxtb	r3, r3
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d7f2:	f001 fb4b 	bl	800ee8c <vTaskStartScheduler>
  
  return osOK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d800:	f001 ff9a 	bl	800f738 <xTaskGetSchedulerState>
 800d804:	4603      	mov	r3, r0
 800d806:	2b01      	cmp	r3, #1
 800d808:	d101      	bne.n	800d80e <osKernelRunning+0x12>
    return 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	e000      	b.n	800d810 <osKernelRunning+0x14>
  else
    return 1;
 800d80e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d810:	4618      	mov	r0, r3
 800d812:	bd80      	pop	{r7, pc}

0800d814 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d818:	f7ff ffd7 	bl	800d7ca <inHandlerMode>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d003      	beq.n	800d82a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d822:	f001 fc5f 	bl	800f0e4 <xTaskGetTickCountFromISR>
 800d826:	4603      	mov	r3, r0
 800d828:	e002      	b.n	800d830 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d82a:	f001 fc4b 	bl	800f0c4 <xTaskGetTickCount>
 800d82e:	4603      	mov	r3, r0
  }
}
 800d830:	4618      	mov	r0, r3
 800d832:	bd80      	pop	{r7, pc}

0800d834 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d836:	b089      	sub	sp, #36	@ 0x24
 800d838:	af04      	add	r7, sp, #16
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d020      	beq.n	800d888 <osThreadCreate+0x54>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d01c      	beq.n	800d888 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685c      	ldr	r4, [r3, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	691e      	ldr	r6, [r3, #16]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d860:	4618      	mov	r0, r3
 800d862:	f7ff ff9a 	bl	800d79a <makeFreeRtosPriority>
 800d866:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d870:	9202      	str	r2, [sp, #8]
 800d872:	9301      	str	r3, [sp, #4]
 800d874:	9100      	str	r1, [sp, #0]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	4632      	mov	r2, r6
 800d87a:	4629      	mov	r1, r5
 800d87c:	4620      	mov	r0, r4
 800d87e:	f001 f915 	bl	800eaac <xTaskCreateStatic>
 800d882:	4603      	mov	r3, r0
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	e01c      	b.n	800d8c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	685c      	ldr	r4, [r3, #4]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d894:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff ff7c 	bl	800d79a <makeFreeRtosPriority>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	f107 030c 	add.w	r3, r7, #12
 800d8a8:	9301      	str	r3, [sp, #4]
 800d8aa:	9200      	str	r2, [sp, #0]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	4632      	mov	r2, r6
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f001 f960 	bl	800eb78 <xTaskCreate>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d001      	beq.n	800d8c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e000      	b.n	800d8c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <osDelay+0x16>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	e000      	b.n	800d8e4 <osDelay+0x18>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f001 fa99 	bl	800ee1c <vTaskDelay>
  
  return osOK;
 800d8ea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d8f4:	b590      	push	{r4, r7, lr}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af02      	add	r7, sp, #8
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d011      	beq.n	800d92a <osMessageCreate+0x36>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00d      	beq.n	800d92a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6818      	ldr	r0, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6859      	ldr	r1, [r3, #4]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	689a      	ldr	r2, [r3, #8]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	2400      	movs	r4, #0
 800d920:	9400      	str	r4, [sp, #0]
 800d922:	f000 f9e3 	bl	800dcec <xQueueGenericCreateStatic>
 800d926:	4603      	mov	r3, r0
 800d928:	e008      	b.n	800d93c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6818      	ldr	r0, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	4619      	mov	r1, r3
 800d936:	f000 fa60 	bl	800ddfa <xQueueGenericCreate>
 800d93a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	bd90      	pop	{r4, r7, pc}

0800d944 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d950:	2300      	movs	r3, #0
 800d952:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d101      	bne.n	800d962 <osMessagePut+0x1e>
    ticks = 1;
 800d95e:	2301      	movs	r3, #1
 800d960:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d962:	f7ff ff32 	bl	800d7ca <inHandlerMode>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d018      	beq.n	800d99e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d96c:	f107 0210 	add.w	r2, r7, #16
 800d970:	f107 0108 	add.w	r1, r7, #8
 800d974:	2300      	movs	r3, #0
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f000 fbac 	bl	800e0d4 <xQueueGenericSendFromISR>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d001      	beq.n	800d986 <osMessagePut+0x42>
      return osErrorOS;
 800d982:	23ff      	movs	r3, #255	@ 0xff
 800d984:	e018      	b.n	800d9b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d014      	beq.n	800d9b6 <osMessagePut+0x72>
 800d98c:	4b0c      	ldr	r3, [pc, #48]	@ (800d9c0 <osMessagePut+0x7c>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	e00b      	b.n	800d9b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d99e:	f107 0108 	add.w	r1, r7, #8
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f000 fa8a 	bl	800dec0 <xQueueGenericSend>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d001      	beq.n	800d9b6 <osMessagePut+0x72>
      return osErrorOS;
 800d9b2:	23ff      	movs	r3, #255	@ 0xff
 800d9b4:	e000      	b.n	800d9b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3718      	adds	r7, #24
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	e000ed04 	.word	0xe000ed04

0800d9c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b08b      	sub	sp, #44	@ 0x2c
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10a      	bne.n	800d9f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d9de:	2380      	movs	r3, #128	@ 0x80
 800d9e0:	617b      	str	r3, [r7, #20]
    return event;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	461c      	mov	r4, r3
 800d9e6:	f107 0314 	add.w	r3, r7, #20
 800d9ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9f2:	e054      	b.n	800da9e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da02:	d103      	bne.n	800da0c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800da04:	f04f 33ff 	mov.w	r3, #4294967295
 800da08:	627b      	str	r3, [r7, #36]	@ 0x24
 800da0a:	e009      	b.n	800da20 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d006      	beq.n	800da20 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d101      	bne.n	800da20 <osMessageGet+0x5c>
      ticks = 1;
 800da1c:	2301      	movs	r3, #1
 800da1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800da20:	f7ff fed3 	bl	800d7ca <inHandlerMode>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d01c      	beq.n	800da64 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800da2a:	f107 0220 	add.w	r2, r7, #32
 800da2e:	f107 0314 	add.w	r3, r7, #20
 800da32:	3304      	adds	r3, #4
 800da34:	4619      	mov	r1, r3
 800da36:	68b8      	ldr	r0, [r7, #8]
 800da38:	f000 fe88 	bl	800e74c <xQueueReceiveFromISR>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d102      	bne.n	800da48 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800da42:	2310      	movs	r3, #16
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	e001      	b.n	800da4c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800da48:	2300      	movs	r3, #0
 800da4a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d01d      	beq.n	800da8e <osMessageGet+0xca>
 800da52:	4b15      	ldr	r3, [pc, #84]	@ (800daa8 <osMessageGet+0xe4>)
 800da54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da58:	601a      	str	r2, [r3, #0]
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	e014      	b.n	800da8e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800da64:	f107 0314 	add.w	r3, r7, #20
 800da68:	3304      	adds	r3, #4
 800da6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da6c:	4619      	mov	r1, r3
 800da6e:	68b8      	ldr	r0, [r7, #8]
 800da70:	f000 fc6c 	bl	800e34c <xQueueReceive>
 800da74:	4603      	mov	r3, r0
 800da76:	2b01      	cmp	r3, #1
 800da78:	d102      	bne.n	800da80 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800da7a:	2310      	movs	r3, #16
 800da7c:	617b      	str	r3, [r7, #20]
 800da7e:	e006      	b.n	800da8e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800da80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da82:	2b00      	cmp	r3, #0
 800da84:	d101      	bne.n	800da8a <osMessageGet+0xc6>
 800da86:	2300      	movs	r3, #0
 800da88:	e000      	b.n	800da8c <osMessageGet+0xc8>
 800da8a:	2340      	movs	r3, #64	@ 0x40
 800da8c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	461c      	mov	r4, r3
 800da92:	f107 0314 	add.w	r3, r7, #20
 800da96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	372c      	adds	r7, #44	@ 0x2c
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd90      	pop	{r4, r7, pc}
 800daa6:	bf00      	nop
 800daa8:	e000ed04 	.word	0xe000ed04

0800daac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f103 0208 	add.w	r2, r3, #8
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f04f 32ff 	mov.w	r2, #4294967295
 800dac4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f103 0208 	add.w	r2, r3, #8
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f103 0208 	add.w	r2, r3, #8
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dae0:	bf00      	nop
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dafa:	bf00      	nop
 800dafc:	370c      	adds	r7, #12
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db06:	b480      	push	{r7}
 800db08:	b085      	sub	sp, #20
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	689a      	ldr	r2, [r3, #8]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	1c5a      	adds	r2, r3, #1
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
}
 800db42:	bf00      	nop
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db4e:	b480      	push	{r7}
 800db50:	b085      	sub	sp, #20
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db64:	d103      	bne.n	800db6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	e00c      	b.n	800db88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	3308      	adds	r3, #8
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	e002      	b.n	800db7c <vListInsert+0x2e>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	429a      	cmp	r2, r3
 800db86:	d2f6      	bcs.n	800db76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	683a      	ldr	r2, [r7, #0]
 800db96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	601a      	str	r2, [r3, #0]
}
 800dbb4:	bf00      	nop
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	6892      	ldr	r2, [r2, #8]
 800dbd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	6852      	ldr	r2, [r2, #4]
 800dbe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d103      	bne.n	800dbf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	689a      	ldr	r2, [r3, #8]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	1e5a      	subs	r2, r3, #1
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10d      	bne.n	800dc44 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2c:	b672      	cpsid	i
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	b662      	cpsie	i
 800dc3c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dc3e:	bf00      	nop
 800dc40:	bf00      	nop
 800dc42:	e7fd      	b.n	800dc40 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dc44:	f002 f8ca 	bl	800fddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc50:	68f9      	ldr	r1, [r7, #12]
 800dc52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dc54:	fb01 f303 	mul.w	r3, r1, r3
 800dc58:	441a      	add	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc74:	3b01      	subs	r3, #1
 800dc76:	68f9      	ldr	r1, [r7, #12]
 800dc78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dc7a:	fb01 f303 	mul.w	r3, r1, r3
 800dc7e:	441a      	add	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	22ff      	movs	r2, #255	@ 0xff
 800dc88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	22ff      	movs	r2, #255	@ 0xff
 800dc90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d114      	bne.n	800dcc4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d01a      	beq.n	800dcd8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3310      	adds	r3, #16
 800dca6:	4618      	mov	r0, r3
 800dca8:	f001 fb78 	bl	800f39c <xTaskRemoveFromEventList>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d012      	beq.n	800dcd8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dce8 <xQueueGenericReset+0xd4>)
 800dcb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	e009      	b.n	800dcd8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3310      	adds	r3, #16
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff feef 	bl	800daac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3324      	adds	r3, #36	@ 0x24
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff feea 	bl	800daac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dcd8:	f002 f8b6 	bl	800fe48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dcdc:	2301      	movs	r3, #1
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	@ 0x38
 800dcf0:	af02      	add	r7, sp, #8
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10d      	bne.n	800dd1c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	b672      	cpsid	i
 800dd06:	f383 8811 	msr	BASEPRI, r3
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	b662      	cpsie	i
 800dd14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dd16:	bf00      	nop
 800dd18:	bf00      	nop
 800dd1a:	e7fd      	b.n	800dd18 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10d      	bne.n	800dd3e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd26:	b672      	cpsid	i
 800dd28:	f383 8811 	msr	BASEPRI, r3
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f3bf 8f4f 	dsb	sy
 800dd34:	b662      	cpsie	i
 800dd36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dd38:	bf00      	nop
 800dd3a:	bf00      	nop
 800dd3c:	e7fd      	b.n	800dd3a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <xQueueGenericCreateStatic+0x5e>
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <xQueueGenericCreateStatic+0x62>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e000      	b.n	800dd50 <xQueueGenericCreateStatic+0x64>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd58:	b672      	cpsid	i
 800dd5a:	f383 8811 	msr	BASEPRI, r3
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	f3bf 8f4f 	dsb	sy
 800dd66:	b662      	cpsie	i
 800dd68:	623b      	str	r3, [r7, #32]
}
 800dd6a:	bf00      	nop
 800dd6c:	bf00      	nop
 800dd6e:	e7fd      	b.n	800dd6c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <xQueueGenericCreateStatic+0x90>
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <xQueueGenericCreateStatic+0x94>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e000      	b.n	800dd82 <xQueueGenericCreateStatic+0x96>
 800dd80:	2300      	movs	r3, #0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10d      	bne.n	800dda2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	b672      	cpsid	i
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	b662      	cpsie	i
 800dd9a:	61fb      	str	r3, [r7, #28]
}
 800dd9c:	bf00      	nop
 800dd9e:	bf00      	nop
 800dda0:	e7fd      	b.n	800dd9e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dda2:	2348      	movs	r3, #72	@ 0x48
 800dda4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	2b48      	cmp	r3, #72	@ 0x48
 800ddaa:	d00d      	beq.n	800ddc8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb0:	b672      	cpsid	i
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	b662      	cpsie	i
 800ddc0:	61bb      	str	r3, [r7, #24]
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	e7fd      	b.n	800ddc4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ddc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ddce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00d      	beq.n	800ddf0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ddd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dddc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	4613      	mov	r3, r2
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 f848 	bl	800de80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ddf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3730      	adds	r7, #48	@ 0x30
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b08a      	sub	sp, #40	@ 0x28
 800ddfe:	af02      	add	r7, sp, #8
 800de00:	60f8      	str	r0, [r7, #12]
 800de02:	60b9      	str	r1, [r7, #8]
 800de04:	4613      	mov	r3, r2
 800de06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10d      	bne.n	800de2a <xQueueGenericCreate+0x30>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de12:	b672      	cpsid	i
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	b662      	cpsie	i
 800de22:	613b      	str	r3, [r7, #16]
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop
 800de28:	e7fd      	b.n	800de26 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d102      	bne.n	800de36 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800de30:	2300      	movs	r3, #0
 800de32:	61fb      	str	r3, [r7, #28]
 800de34:	e004      	b.n	800de40 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	fb02 f303 	mul.w	r3, r2, r3
 800de3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	3348      	adds	r3, #72	@ 0x48
 800de44:	4618      	mov	r0, r3
 800de46:	f002 f8f7 	bl	8010038 <pvPortMalloc>
 800de4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d011      	beq.n	800de76 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	3348      	adds	r3, #72	@ 0x48
 800de5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de64:	79fa      	ldrb	r2, [r7, #7]
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	4613      	mov	r3, r2
 800de6c:	697a      	ldr	r2, [r7, #20]
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f000 f805 	bl	800de80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de76:	69bb      	ldr	r3, [r7, #24]
	}
 800de78:	4618      	mov	r0, r3
 800de7a:	3720      	adds	r7, #32
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d103      	bne.n	800de9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	e002      	b.n	800dea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	68fa      	ldr	r2, [r7, #12]
 800dea6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800deae:	2101      	movs	r1, #1
 800deb0:	69b8      	ldr	r0, [r7, #24]
 800deb2:	f7ff feaf 	bl	800dc14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800deb6:	bf00      	nop
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08e      	sub	sp, #56	@ 0x38
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dece:	2300      	movs	r3, #0
 800ded0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ded6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10d      	bne.n	800def8 <xQueueGenericSend+0x38>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee0:	b672      	cpsid	i
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	b662      	cpsie	i
 800def0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800def2:	bf00      	nop
 800def4:	bf00      	nop
 800def6:	e7fd      	b.n	800def4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d103      	bne.n	800df06 <xQueueGenericSend+0x46>
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <xQueueGenericSend+0x4a>
 800df06:	2301      	movs	r3, #1
 800df08:	e000      	b.n	800df0c <xQueueGenericSend+0x4c>
 800df0a:	2300      	movs	r3, #0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10d      	bne.n	800df2c <xQueueGenericSend+0x6c>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df14:	b672      	cpsid	i
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	b662      	cpsie	i
 800df24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df26:	bf00      	nop
 800df28:	bf00      	nop
 800df2a:	e7fd      	b.n	800df28 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d103      	bne.n	800df3a <xQueueGenericSend+0x7a>
 800df32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df36:	2b01      	cmp	r3, #1
 800df38:	d101      	bne.n	800df3e <xQueueGenericSend+0x7e>
 800df3a:	2301      	movs	r3, #1
 800df3c:	e000      	b.n	800df40 <xQueueGenericSend+0x80>
 800df3e:	2300      	movs	r3, #0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10d      	bne.n	800df60 <xQueueGenericSend+0xa0>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df48:	b672      	cpsid	i
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	b662      	cpsie	i
 800df58:	623b      	str	r3, [r7, #32]
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	e7fd      	b.n	800df5c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df60:	f001 fbea 	bl	800f738 <xTaskGetSchedulerState>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <xQueueGenericSend+0xb0>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <xQueueGenericSend+0xb4>
 800df70:	2301      	movs	r3, #1
 800df72:	e000      	b.n	800df76 <xQueueGenericSend+0xb6>
 800df74:	2300      	movs	r3, #0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10d      	bne.n	800df96 <xQueueGenericSend+0xd6>
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df7e:	b672      	cpsid	i
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	b662      	cpsie	i
 800df8e:	61fb      	str	r3, [r7, #28]
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	e7fd      	b.n	800df92 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df96:	f001 ff21 	bl	800fddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d302      	bcc.n	800dfac <xQueueGenericSend+0xec>
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d129      	bne.n	800e000 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	68b9      	ldr	r1, [r7, #8]
 800dfb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfb2:	f000 fc6b 	bl	800e88c <prvCopyDataToQueue>
 800dfb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d010      	beq.n	800dfe2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	3324      	adds	r3, #36	@ 0x24
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f001 f9e9 	bl	800f39c <xTaskRemoveFromEventList>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d013      	beq.n	800dff8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dfd0:	4b3f      	ldr	r3, [pc, #252]	@ (800e0d0 <xQueueGenericSend+0x210>)
 800dfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	e00a      	b.n	800dff8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d007      	beq.n	800dff8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dfe8:	4b39      	ldr	r3, [pc, #228]	@ (800e0d0 <xQueueGenericSend+0x210>)
 800dfea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dff8:	f001 ff26 	bl	800fe48 <vPortExitCritical>
				return pdPASS;
 800dffc:	2301      	movs	r3, #1
 800dffe:	e063      	b.n	800e0c8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d103      	bne.n	800e00e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e006:	f001 ff1f 	bl	800fe48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	e05c      	b.n	800e0c8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e010:	2b00      	cmp	r3, #0
 800e012:	d106      	bne.n	800e022 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e014:	f107 0314 	add.w	r3, r7, #20
 800e018:	4618      	mov	r0, r3
 800e01a:	f001 fa25 	bl	800f468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e01e:	2301      	movs	r3, #1
 800e020:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e022:	f001 ff11 	bl	800fe48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e026:	f000 ff9f 	bl	800ef68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e02a:	f001 fed7 	bl	800fddc <vPortEnterCritical>
 800e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e034:	b25b      	sxtb	r3, r3
 800e036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e03a:	d103      	bne.n	800e044 <xQueueGenericSend+0x184>
 800e03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e04a:	b25b      	sxtb	r3, r3
 800e04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e050:	d103      	bne.n	800e05a <xQueueGenericSend+0x19a>
 800e052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e05a:	f001 fef5 	bl	800fe48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e05e:	1d3a      	adds	r2, r7, #4
 800e060:	f107 0314 	add.w	r3, r7, #20
 800e064:	4611      	mov	r1, r2
 800e066:	4618      	mov	r0, r3
 800e068:	f001 fa14 	bl	800f494 <xTaskCheckForTimeOut>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d124      	bne.n	800e0bc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e074:	f000 fd02 	bl	800ea7c <prvIsQueueFull>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d018      	beq.n	800e0b0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e080:	3310      	adds	r3, #16
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f001 f960 	bl	800f34c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e08c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e08e:	f000 fc8d 	bl	800e9ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e092:	f000 ff77 	bl	800ef84 <xTaskResumeAll>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f47f af7c 	bne.w	800df96 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e09e:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d0 <xQueueGenericSend+0x210>)
 800e0a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	e772      	b.n	800df96 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e0b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0b2:	f000 fc7b 	bl	800e9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0b6:	f000 ff65 	bl	800ef84 <xTaskResumeAll>
 800e0ba:	e76c      	b.n	800df96 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e0bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0be:	f000 fc75 	bl	800e9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0c2:	f000 ff5f 	bl	800ef84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e0c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3738      	adds	r7, #56	@ 0x38
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	e000ed04 	.word	0xe000ed04

0800e0d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b08e      	sub	sp, #56	@ 0x38
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
 800e0e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10d      	bne.n	800e108 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f0:	b672      	cpsid	i
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	b662      	cpsie	i
 800e100:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	e7fd      	b.n	800e104 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d103      	bne.n	800e116 <xQueueGenericSendFromISR+0x42>
 800e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <xQueueGenericSendFromISR+0x46>
 800e116:	2301      	movs	r3, #1
 800e118:	e000      	b.n	800e11c <xQueueGenericSendFromISR+0x48>
 800e11a:	2300      	movs	r3, #0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10d      	bne.n	800e13c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e124:	b672      	cpsid	i
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	b662      	cpsie	i
 800e134:	623b      	str	r3, [r7, #32]
}
 800e136:	bf00      	nop
 800e138:	bf00      	nop
 800e13a:	e7fd      	b.n	800e138 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d103      	bne.n	800e14a <xQueueGenericSendFromISR+0x76>
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e146:	2b01      	cmp	r3, #1
 800e148:	d101      	bne.n	800e14e <xQueueGenericSendFromISR+0x7a>
 800e14a:	2301      	movs	r3, #1
 800e14c:	e000      	b.n	800e150 <xQueueGenericSendFromISR+0x7c>
 800e14e:	2300      	movs	r3, #0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10d      	bne.n	800e170 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e158:	b672      	cpsid	i
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	b662      	cpsie	i
 800e168:	61fb      	str	r3, [r7, #28]
}
 800e16a:	bf00      	nop
 800e16c:	bf00      	nop
 800e16e:	e7fd      	b.n	800e16c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e170:	f001 ff1c 	bl	800ffac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e174:	f3ef 8211 	mrs	r2, BASEPRI
 800e178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17c:	b672      	cpsid	i
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	b662      	cpsie	i
 800e18c:	61ba      	str	r2, [r7, #24]
 800e18e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e190:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e192:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d302      	bcc.n	800e1a6 <xQueueGenericSendFromISR+0xd2>
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d12c      	bne.n	800e200 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1b6:	f000 fb69 	bl	800e88c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c2:	d112      	bne.n	800e1ea <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d016      	beq.n	800e1fa <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ce:	3324      	adds	r3, #36	@ 0x24
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f001 f8e3 	bl	800f39c <xTaskRemoveFromEventList>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00e      	beq.n	800e1fa <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00b      	beq.n	800e1fa <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	e007      	b.n	800e1fa <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e1ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	b25a      	sxtb	r2, r3
 800e1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e1fe:	e001      	b.n	800e204 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e200:	2300      	movs	r3, #0
 800e202:	637b      	str	r3, [r7, #52]	@ 0x34
 800e204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e206:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e20e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e212:	4618      	mov	r0, r3
 800e214:	3738      	adds	r7, #56	@ 0x38
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b08e      	sub	sp, #56	@ 0x38
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
 800e222:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10d      	bne.n	800e24a <xQueueGiveFromISR+0x30>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	b672      	cpsid	i
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	b662      	cpsie	i
 800e242:	623b      	str	r3, [r7, #32]
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	e7fd      	b.n	800e246 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00d      	beq.n	800e26e <xQueueGiveFromISR+0x54>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e256:	b672      	cpsid	i
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	b662      	cpsie	i
 800e266:	61fb      	str	r3, [r7, #28]
}
 800e268:	bf00      	nop
 800e26a:	bf00      	nop
 800e26c:	e7fd      	b.n	800e26a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <xQueueGiveFromISR+0x64>
 800e276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d101      	bne.n	800e282 <xQueueGiveFromISR+0x68>
 800e27e:	2301      	movs	r3, #1
 800e280:	e000      	b.n	800e284 <xQueueGiveFromISR+0x6a>
 800e282:	2300      	movs	r3, #0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10d      	bne.n	800e2a4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e28c:	b672      	cpsid	i
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	b662      	cpsie	i
 800e29c:	61bb      	str	r3, [r7, #24]
}
 800e29e:	bf00      	nop
 800e2a0:	bf00      	nop
 800e2a2:	e7fd      	b.n	800e2a0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2a4:	f001 fe82 	bl	800ffac <vPortValidateInterruptPriority>
	__asm volatile
 800e2a8:	f3ef 8211 	mrs	r2, BASEPRI
 800e2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b0:	b672      	cpsid	i
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	b662      	cpsie	i
 800e2c0:	617a      	str	r2, [r7, #20]
 800e2c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e2c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2cc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d22b      	bcs.n	800e330 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e4:	1c5a      	adds	r2, r3, #1
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f2:	d112      	bne.n	800e31a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d016      	beq.n	800e32a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fe:	3324      	adds	r3, #36	@ 0x24
 800e300:	4618      	mov	r0, r3
 800e302:	f001 f84b 	bl	800f39c <xTaskRemoveFromEventList>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00e      	beq.n	800e32a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00b      	beq.n	800e32a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2201      	movs	r2, #1
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	e007      	b.n	800e32a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e31a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e31e:	3301      	adds	r3, #1
 800e320:	b2db      	uxtb	r3, r3
 800e322:	b25a      	sxtb	r2, r3
 800e324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e32a:	2301      	movs	r3, #1
 800e32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e32e:	e001      	b.n	800e334 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e330:	2300      	movs	r3, #0
 800e332:	637b      	str	r3, [r7, #52]	@ 0x34
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f383 8811 	msr	BASEPRI, r3
}
 800e33e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e342:	4618      	mov	r0, r3
 800e344:	3738      	adds	r7, #56	@ 0x38
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08c      	sub	sp, #48	@ 0x30
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e358:	2300      	movs	r3, #0
 800e35a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10d      	bne.n	800e382 <xQueueReceive+0x36>
	__asm volatile
 800e366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36a:	b672      	cpsid	i
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	b662      	cpsie	i
 800e37a:	623b      	str	r3, [r7, #32]
}
 800e37c:	bf00      	nop
 800e37e:	bf00      	nop
 800e380:	e7fd      	b.n	800e37e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d103      	bne.n	800e390 <xQueueReceive+0x44>
 800e388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <xQueueReceive+0x48>
 800e390:	2301      	movs	r3, #1
 800e392:	e000      	b.n	800e396 <xQueueReceive+0x4a>
 800e394:	2300      	movs	r3, #0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10d      	bne.n	800e3b6 <xQueueReceive+0x6a>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39e:	b672      	cpsid	i
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	b662      	cpsie	i
 800e3ae:	61fb      	str	r3, [r7, #28]
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	e7fd      	b.n	800e3b2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3b6:	f001 f9bf 	bl	800f738 <xTaskGetSchedulerState>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d102      	bne.n	800e3c6 <xQueueReceive+0x7a>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <xQueueReceive+0x7e>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e000      	b.n	800e3cc <xQueueReceive+0x80>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10d      	bne.n	800e3ec <xQueueReceive+0xa0>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d4:	b672      	cpsid	i
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	b662      	cpsie	i
 800e3e4:	61bb      	str	r3, [r7, #24]
}
 800e3e6:	bf00      	nop
 800e3e8:	bf00      	nop
 800e3ea:	e7fd      	b.n	800e3e8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3ec:	f001 fcf6 	bl	800fddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d01f      	beq.n	800e43c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3fc:	68b9      	ldr	r1, [r7, #8]
 800e3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e400:	f000 faae 	bl	800e960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e406:	1e5a      	subs	r2, r3, #1
 800e408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40e:	691b      	ldr	r3, [r3, #16]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00f      	beq.n	800e434 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e416:	3310      	adds	r3, #16
 800e418:	4618      	mov	r0, r3
 800e41a:	f000 ffbf 	bl	800f39c <xTaskRemoveFromEventList>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d007      	beq.n	800e434 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e424:	4b3c      	ldr	r3, [pc, #240]	@ (800e518 <xQueueReceive+0x1cc>)
 800e426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e42a:	601a      	str	r2, [r3, #0]
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e434:	f001 fd08 	bl	800fe48 <vPortExitCritical>
				return pdPASS;
 800e438:	2301      	movs	r3, #1
 800e43a:	e069      	b.n	800e510 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d103      	bne.n	800e44a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e442:	f001 fd01 	bl	800fe48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e446:	2300      	movs	r3, #0
 800e448:	e062      	b.n	800e510 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d106      	bne.n	800e45e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e450:	f107 0310 	add.w	r3, r7, #16
 800e454:	4618      	mov	r0, r3
 800e456:	f001 f807 	bl	800f468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e45a:	2301      	movs	r3, #1
 800e45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e45e:	f001 fcf3 	bl	800fe48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e462:	f000 fd81 	bl	800ef68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e466:	f001 fcb9 	bl	800fddc <vPortEnterCritical>
 800e46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e46c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e470:	b25b      	sxtb	r3, r3
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e476:	d103      	bne.n	800e480 <xQueueReceive+0x134>
 800e478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47a:	2200      	movs	r2, #0
 800e47c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e482:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e486:	b25b      	sxtb	r3, r3
 800e488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e48c:	d103      	bne.n	800e496 <xQueueReceive+0x14a>
 800e48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e496:	f001 fcd7 	bl	800fe48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e49a:	1d3a      	adds	r2, r7, #4
 800e49c:	f107 0310 	add.w	r3, r7, #16
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 fff6 	bl	800f494 <xTaskCheckForTimeOut>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d123      	bne.n	800e4f6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4b0:	f000 face 	bl	800ea50 <prvIsQueueEmpty>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d017      	beq.n	800e4ea <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4bc:	3324      	adds	r3, #36	@ 0x24
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 ff42 	bl	800f34c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4ca:	f000 fa6f 	bl	800e9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4ce:	f000 fd59 	bl	800ef84 <xTaskResumeAll>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d189      	bne.n	800e3ec <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e4d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e518 <xQueueReceive+0x1cc>)
 800e4da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	e780      	b.n	800e3ec <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e4ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4ec:	f000 fa5e 	bl	800e9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4f0:	f000 fd48 	bl	800ef84 <xTaskResumeAll>
 800e4f4:	e77a      	b.n	800e3ec <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4f8:	f000 fa58 	bl	800e9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4fc:	f000 fd42 	bl	800ef84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e502:	f000 faa5 	bl	800ea50 <prvIsQueueEmpty>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f43f af6f 	beq.w	800e3ec <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e50e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e510:	4618      	mov	r0, r3
 800e512:	3730      	adds	r7, #48	@ 0x30
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	e000ed04 	.word	0xe000ed04

0800e51c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08e      	sub	sp, #56	@ 0x38
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e526:	2300      	movs	r3, #0
 800e528:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e52e:	2300      	movs	r3, #0
 800e530:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10d      	bne.n	800e554 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53c:	b672      	cpsid	i
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	b662      	cpsie	i
 800e54c:	623b      	str	r3, [r7, #32]
}
 800e54e:	bf00      	nop
 800e550:	bf00      	nop
 800e552:	e7fd      	b.n	800e550 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e560:	b672      	cpsid	i
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	b662      	cpsie	i
 800e570:	61fb      	str	r3, [r7, #28]
}
 800e572:	bf00      	nop
 800e574:	bf00      	nop
 800e576:	e7fd      	b.n	800e574 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e578:	f001 f8de 	bl	800f738 <xTaskGetSchedulerState>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d102      	bne.n	800e588 <xQueueSemaphoreTake+0x6c>
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <xQueueSemaphoreTake+0x70>
 800e588:	2301      	movs	r3, #1
 800e58a:	e000      	b.n	800e58e <xQueueSemaphoreTake+0x72>
 800e58c:	2300      	movs	r3, #0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10d      	bne.n	800e5ae <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e596:	b672      	cpsid	i
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	b662      	cpsie	i
 800e5a6:	61bb      	str	r3, [r7, #24]
}
 800e5a8:	bf00      	nop
 800e5aa:	bf00      	nop
 800e5ac:	e7fd      	b.n	800e5aa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5ae:	f001 fc15 	bl	800fddc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d024      	beq.n	800e608 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c0:	1e5a      	subs	r2, r3, #1
 800e5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d104      	bne.n	800e5d8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e5ce:	f001 fa7d 	bl	800facc <pvTaskIncrementMutexHeldCount>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00f      	beq.n	800e600 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e2:	3310      	adds	r3, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 fed9 	bl	800f39c <xTaskRemoveFromEventList>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d007      	beq.n	800e600 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e5f0:	4b55      	ldr	r3, [pc, #340]	@ (800e748 <xQueueSemaphoreTake+0x22c>)
 800e5f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5f6:	601a      	str	r2, [r3, #0]
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e600:	f001 fc22 	bl	800fe48 <vPortExitCritical>
				return pdPASS;
 800e604:	2301      	movs	r3, #1
 800e606:	e09a      	b.n	800e73e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d114      	bne.n	800e638 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00d      	beq.n	800e630 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e618:	b672      	cpsid	i
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	b662      	cpsie	i
 800e628:	617b      	str	r3, [r7, #20]
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	e7fd      	b.n	800e62c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e630:	f001 fc0a 	bl	800fe48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e634:	2300      	movs	r3, #0
 800e636:	e082      	b.n	800e73e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d106      	bne.n	800e64c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e63e:	f107 030c 	add.w	r3, r7, #12
 800e642:	4618      	mov	r0, r3
 800e644:	f000 ff10 	bl	800f468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e64c:	f001 fbfc 	bl	800fe48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e650:	f000 fc8a 	bl	800ef68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e654:	f001 fbc2 	bl	800fddc <vPortEnterCritical>
 800e658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e65e:	b25b      	sxtb	r3, r3
 800e660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e664:	d103      	bne.n	800e66e <xQueueSemaphoreTake+0x152>
 800e666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e668:	2200      	movs	r2, #0
 800e66a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e674:	b25b      	sxtb	r3, r3
 800e676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67a:	d103      	bne.n	800e684 <xQueueSemaphoreTake+0x168>
 800e67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67e:	2200      	movs	r2, #0
 800e680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e684:	f001 fbe0 	bl	800fe48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e688:	463a      	mov	r2, r7
 800e68a:	f107 030c 	add.w	r3, r7, #12
 800e68e:	4611      	mov	r1, r2
 800e690:	4618      	mov	r0, r3
 800e692:	f000 feff 	bl	800f494 <xTaskCheckForTimeOut>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d132      	bne.n	800e702 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e69c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e69e:	f000 f9d7 	bl	800ea50 <prvIsQueueEmpty>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d026      	beq.n	800e6f6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d109      	bne.n	800e6c4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e6b0:	f001 fb94 	bl	800fddc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f001 f85b 	bl	800f774 <xTaskPriorityInherit>
 800e6be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e6c0:	f001 fbc2 	bl	800fe48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c6:	3324      	adds	r3, #36	@ 0x24
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 fe3d 	bl	800f34c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6d4:	f000 f96a 	bl	800e9ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6d8:	f000 fc54 	bl	800ef84 <xTaskResumeAll>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f47f af65 	bne.w	800e5ae <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e6e4:	4b18      	ldr	r3, [pc, #96]	@ (800e748 <xQueueSemaphoreTake+0x22c>)
 800e6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6ea:	601a      	str	r2, [r3, #0]
 800e6ec:	f3bf 8f4f 	dsb	sy
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	e75b      	b.n	800e5ae <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e6f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6f8:	f000 f958 	bl	800e9ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6fc:	f000 fc42 	bl	800ef84 <xTaskResumeAll>
 800e700:	e755      	b.n	800e5ae <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e704:	f000 f952 	bl	800e9ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e708:	f000 fc3c 	bl	800ef84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e70c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e70e:	f000 f99f 	bl	800ea50 <prvIsQueueEmpty>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	f43f af4a 	beq.w	800e5ae <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00d      	beq.n	800e73c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e720:	f001 fb5c 	bl	800fddc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e724:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e726:	f000 f899 	bl	800e85c <prvGetDisinheritPriorityAfterTimeout>
 800e72a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e732:	4618      	mov	r0, r3
 800e734:	f001 f92a 	bl	800f98c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e738:	f001 fb86 	bl	800fe48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e73c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3738      	adds	r7, #56	@ 0x38
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	e000ed04 	.word	0xe000ed04

0800e74c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08e      	sub	sp, #56	@ 0x38
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10d      	bne.n	800e77e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e766:	b672      	cpsid	i
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	b662      	cpsie	i
 800e776:	623b      	str	r3, [r7, #32]
}
 800e778:	bf00      	nop
 800e77a:	bf00      	nop
 800e77c:	e7fd      	b.n	800e77a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d103      	bne.n	800e78c <xQueueReceiveFromISR+0x40>
 800e784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <xQueueReceiveFromISR+0x44>
 800e78c:	2301      	movs	r3, #1
 800e78e:	e000      	b.n	800e792 <xQueueReceiveFromISR+0x46>
 800e790:	2300      	movs	r3, #0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10d      	bne.n	800e7b2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79a:	b672      	cpsid	i
 800e79c:	f383 8811 	msr	BASEPRI, r3
 800e7a0:	f3bf 8f6f 	isb	sy
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	b662      	cpsie	i
 800e7aa:	61fb      	str	r3, [r7, #28]
}
 800e7ac:	bf00      	nop
 800e7ae:	bf00      	nop
 800e7b0:	e7fd      	b.n	800e7ae <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7b2:	f001 fbfb 	bl	800ffac <vPortValidateInterruptPriority>
	__asm volatile
 800e7b6:	f3ef 8211 	mrs	r2, BASEPRI
 800e7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7be:	b672      	cpsid	i
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	b662      	cpsie	i
 800e7ce:	61ba      	str	r2, [r7, #24]
 800e7d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e7d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d02f      	beq.n	800e842 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e7e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7f0:	f000 f8b6 	bl	800e960 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f6:	1e5a      	subs	r2, r3, #1
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e7fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e804:	d112      	bne.n	800e82c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d016      	beq.n	800e83c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e810:	3310      	adds	r3, #16
 800e812:	4618      	mov	r0, r3
 800e814:	f000 fdc2 	bl	800f39c <xTaskRemoveFromEventList>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00e      	beq.n	800e83c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00b      	beq.n	800e83c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	e007      	b.n	800e83c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e82c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e830:	3301      	adds	r3, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	b25a      	sxtb	r2, r3
 800e836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e83c:	2301      	movs	r3, #1
 800e83e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e840:	e001      	b.n	800e846 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e842:	2300      	movs	r3, #0
 800e844:	637b      	str	r3, [r7, #52]	@ 0x34
 800e846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e848:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	f383 8811 	msr	BASEPRI, r3
}
 800e850:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e854:	4618      	mov	r0, r3
 800e856:	3738      	adds	r7, #56	@ 0x38
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d006      	beq.n	800e87a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f1c3 0307 	rsb	r3, r3, #7
 800e876:	60fb      	str	r3, [r7, #12]
 800e878:	e001      	b.n	800e87e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e87a:	2300      	movs	r3, #0
 800e87c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e87e:	68fb      	ldr	r3, [r7, #12]
	}
 800e880:	4618      	mov	r0, r3
 800e882:	3714      	adds	r7, #20
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	60b9      	str	r1, [r7, #8]
 800e896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e898:	2300      	movs	r3, #0
 800e89a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10d      	bne.n	800e8c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d14d      	bne.n	800e94e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f000 ffdc 	bl	800f874 <xTaskPriorityDisinherit>
 800e8bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	609a      	str	r2, [r3, #8]
 800e8c4:	e043      	b.n	800e94e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d119      	bne.n	800e900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6858      	ldr	r0, [r3, #4]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	68b9      	ldr	r1, [r7, #8]
 800e8d8:	f003 fc85 	bl	80121e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e4:	441a      	add	r2, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	685a      	ldr	r2, [r3, #4]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d32b      	bcc.n	800e94e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	605a      	str	r2, [r3, #4]
 800e8fe:	e026      	b.n	800e94e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	68d8      	ldr	r0, [r3, #12]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e908:	461a      	mov	r2, r3
 800e90a:	68b9      	ldr	r1, [r7, #8]
 800e90c:	f003 fc6b 	bl	80121e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	68da      	ldr	r2, [r3, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e918:	425b      	negs	r3, r3
 800e91a:	441a      	add	r2, r3
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	68da      	ldr	r2, [r3, #12]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d207      	bcs.n	800e93c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	689a      	ldr	r2, [r3, #8]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e934:	425b      	negs	r3, r3
 800e936:	441a      	add	r2, r3
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b02      	cmp	r3, #2
 800e940:	d105      	bne.n	800e94e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	1c5a      	adds	r2, r3, #1
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e956:	697b      	ldr	r3, [r7, #20]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d018      	beq.n	800e9a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	68da      	ldr	r2, [r3, #12]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e97a:	441a      	add	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d303      	bcc.n	800e994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68d9      	ldr	r1, [r3, #12]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e99c:	461a      	mov	r2, r3
 800e99e:	6838      	ldr	r0, [r7, #0]
 800e9a0:	f003 fc21 	bl	80121e6 <memcpy>
	}
}
 800e9a4:	bf00      	nop
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9b4:	f001 fa12 	bl	800fddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9c0:	e011      	b.n	800e9e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d012      	beq.n	800e9f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	3324      	adds	r3, #36	@ 0x24
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f000 fce4 	bl	800f39c <xTaskRemoveFromEventList>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9da:	f000 fdc3 	bl	800f564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	dce9      	bgt.n	800e9c2 <prvUnlockQueue+0x16>
 800e9ee:	e000      	b.n	800e9f2 <prvUnlockQueue+0x46>
					break;
 800e9f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	22ff      	movs	r2, #255	@ 0xff
 800e9f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e9fa:	f001 fa25 	bl	800fe48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9fe:	f001 f9ed 	bl	800fddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea0a:	e011      	b.n	800ea30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d012      	beq.n	800ea3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3310      	adds	r3, #16
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 fcbf 	bl	800f39c <xTaskRemoveFromEventList>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d001      	beq.n	800ea28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea24:	f000 fd9e 	bl	800f564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea28:	7bbb      	ldrb	r3, [r7, #14]
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dce9      	bgt.n	800ea0c <prvUnlockQueue+0x60>
 800ea38:	e000      	b.n	800ea3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	22ff      	movs	r2, #255	@ 0xff
 800ea40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ea44:	f001 fa00 	bl	800fe48 <vPortExitCritical>
}
 800ea48:	bf00      	nop
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea58:	f001 f9c0 	bl	800fddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d102      	bne.n	800ea6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea64:	2301      	movs	r3, #1
 800ea66:	60fb      	str	r3, [r7, #12]
 800ea68:	e001      	b.n	800ea6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea6e:	f001 f9eb 	bl	800fe48 <vPortExitCritical>

	return xReturn;
 800ea72:	68fb      	ldr	r3, [r7, #12]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea84:	f001 f9aa 	bl	800fddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d102      	bne.n	800ea9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea94:	2301      	movs	r3, #1
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	e001      	b.n	800ea9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea9e:	f001 f9d3 	bl	800fe48 <vPortExitCritical>

	return xReturn;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b08e      	sub	sp, #56	@ 0x38
 800eab0:	af04      	add	r7, sp, #16
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
 800eab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d10d      	bne.n	800eadc <xTaskCreateStatic+0x30>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac4:	b672      	cpsid	i
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	b662      	cpsie	i
 800ead4:	623b      	str	r3, [r7, #32]
}
 800ead6:	bf00      	nop
 800ead8:	bf00      	nop
 800eada:	e7fd      	b.n	800ead8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800eadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10d      	bne.n	800eafe <xTaskCreateStatic+0x52>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae6:	b672      	cpsid	i
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	b662      	cpsie	i
 800eaf6:	61fb      	str	r3, [r7, #28]
}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	e7fd      	b.n	800eafa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eafe:	23a0      	movs	r3, #160	@ 0xa0
 800eb00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	2ba0      	cmp	r3, #160	@ 0xa0
 800eb06:	d00d      	beq.n	800eb24 <xTaskCreateStatic+0x78>
	__asm volatile
 800eb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb0c:	b672      	cpsid	i
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	b662      	cpsie	i
 800eb1c:	61bb      	str	r3, [r7, #24]
}
 800eb1e:	bf00      	nop
 800eb20:	bf00      	nop
 800eb22:	e7fd      	b.n	800eb20 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eb24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d01e      	beq.n	800eb6a <xTaskCreateStatic+0xbe>
 800eb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d01b      	beq.n	800eb6a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3e:	2202      	movs	r2, #2
 800eb40:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eb44:	2300      	movs	r3, #0
 800eb46:	9303      	str	r3, [sp, #12]
 800eb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4a:	9302      	str	r3, [sp, #8]
 800eb4c:	f107 0314 	add.w	r3, r7, #20
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	68b9      	ldr	r1, [r7, #8]
 800eb5c:	68f8      	ldr	r0, [r7, #12]
 800eb5e:	f000 f851 	bl	800ec04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb64:	f000 f8f0 	bl	800ed48 <prvAddNewTaskToReadyList>
 800eb68:	e001      	b.n	800eb6e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb6e:	697b      	ldr	r3, [r7, #20]
	}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3728      	adds	r7, #40	@ 0x28
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08c      	sub	sp, #48	@ 0x30
 800eb7c:	af04      	add	r7, sp, #16
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	603b      	str	r3, [r7, #0]
 800eb84:	4613      	mov	r3, r2
 800eb86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb88:	88fb      	ldrh	r3, [r7, #6]
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f001 fa53 	bl	8010038 <pvPortMalloc>
 800eb92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00e      	beq.n	800ebb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb9a:	20a0      	movs	r0, #160	@ 0xa0
 800eb9c:	f001 fa4c 	bl	8010038 <pvPortMalloc>
 800eba0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d003      	beq.n	800ebb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	697a      	ldr	r2, [r7, #20]
 800ebac:	631a      	str	r2, [r3, #48]	@ 0x30
 800ebae:	e005      	b.n	800ebbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ebb0:	6978      	ldr	r0, [r7, #20]
 800ebb2:	f001 fb0f 	bl	80101d4 <vPortFree>
 800ebb6:	e001      	b.n	800ebbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d017      	beq.n	800ebf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ebca:	88fa      	ldrh	r2, [r7, #6]
 800ebcc:	2300      	movs	r3, #0
 800ebce:	9303      	str	r3, [sp, #12]
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	9302      	str	r3, [sp, #8]
 800ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	68b9      	ldr	r1, [r7, #8]
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f000 f80f 	bl	800ec04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebe6:	69f8      	ldr	r0, [r7, #28]
 800ebe8:	f000 f8ae 	bl	800ed48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ebec:	2301      	movs	r3, #1
 800ebee:	61bb      	str	r3, [r7, #24]
 800ebf0:	e002      	b.n	800ebf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ebf2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ebf8:	69bb      	ldr	r3, [r7, #24]
	}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3720      	adds	r7, #32
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
	...

0800ec04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
 800ec10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ec12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec16:	6879      	ldr	r1, [r7, #4]
 800ec18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ec1c:	440b      	add	r3, r1
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	4413      	add	r3, r2
 800ec22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	f023 0307 	bic.w	r3, r3, #7
 800ec2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	f003 0307 	and.w	r3, r3, #7
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00d      	beq.n	800ec52 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec3a:	b672      	cpsid	i
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	b662      	cpsie	i
 800ec4a:	617b      	str	r3, [r7, #20]
}
 800ec4c:	bf00      	nop
 800ec4e:	bf00      	nop
 800ec50:	e7fd      	b.n	800ec4e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d01f      	beq.n	800ec98 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec58:	2300      	movs	r3, #0
 800ec5a:	61fb      	str	r3, [r7, #28]
 800ec5c:	e012      	b.n	800ec84 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	4413      	add	r3, r2
 800ec64:	7819      	ldrb	r1, [r3, #0]
 800ec66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	3334      	adds	r3, #52	@ 0x34
 800ec6e:	460a      	mov	r2, r1
 800ec70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	4413      	add	r3, r2
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d006      	beq.n	800ec8c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	3301      	adds	r3, #1
 800ec82:	61fb      	str	r3, [r7, #28]
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	2b0f      	cmp	r3, #15
 800ec88:	d9e9      	bls.n	800ec5e <prvInitialiseNewTask+0x5a>
 800ec8a:	e000      	b.n	800ec8e <prvInitialiseNewTask+0x8a>
			{
				break;
 800ec8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ec96:	e003      	b.n	800eca0 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca2:	2b06      	cmp	r3, #6
 800eca4:	d901      	bls.n	800ecaa <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eca6:	2306      	movs	r3, #6
 800eca8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecb4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb8:	2200      	movs	r2, #0
 800ecba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fe ff13 	bl	800daec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc8:	3318      	adds	r3, #24
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe ff0e 	bl	800daec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ecd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd8:	f1c3 0207 	rsb	r2, r3, #7
 800ecdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ece0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ece4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ece6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ecee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf8:	334c      	adds	r3, #76	@ 0x4c
 800ecfa:	224c      	movs	r2, #76	@ 0x4c
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f003 f918 	bl	8011f34 <memset>
 800ed04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed06:	4a0d      	ldr	r2, [pc, #52]	@ (800ed3c <prvInitialiseNewTask+0x138>)
 800ed08:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0c:	4a0c      	ldr	r2, [pc, #48]	@ (800ed40 <prvInitialiseNewTask+0x13c>)
 800ed0e:	655a      	str	r2, [r3, #84]	@ 0x54
 800ed10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed12:	4a0c      	ldr	r2, [pc, #48]	@ (800ed44 <prvInitialiseNewTask+0x140>)
 800ed14:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	68f9      	ldr	r1, [r7, #12]
 800ed1a:	69b8      	ldr	r0, [r7, #24]
 800ed1c:	f000 ff50 	bl	800fbc0 <pxPortInitialiseStack>
 800ed20:	4602      	mov	r2, r0
 800ed22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ed26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ed2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed32:	bf00      	nop
 800ed34:	3720      	adds	r7, #32
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20004dd0 	.word	0x20004dd0
 800ed40:	20004e38 	.word	0x20004e38
 800ed44:	20004ea0 	.word	0x20004ea0

0800ed48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ed50:	f001 f844 	bl	800fddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ed54:	4b2a      	ldr	r3, [pc, #168]	@ (800ee00 <prvAddNewTaskToReadyList+0xb8>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	4a29      	ldr	r2, [pc, #164]	@ (800ee00 <prvAddNewTaskToReadyList+0xb8>)
 800ed5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ed5e:	4b29      	ldr	r3, [pc, #164]	@ (800ee04 <prvAddNewTaskToReadyList+0xbc>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d109      	bne.n	800ed7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ed66:	4a27      	ldr	r2, [pc, #156]	@ (800ee04 <prvAddNewTaskToReadyList+0xbc>)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ed6c:	4b24      	ldr	r3, [pc, #144]	@ (800ee00 <prvAddNewTaskToReadyList+0xb8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d110      	bne.n	800ed96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ed74:	f000 fc1a 	bl	800f5ac <prvInitialiseTaskLists>
 800ed78:	e00d      	b.n	800ed96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ed7a:	4b23      	ldr	r3, [pc, #140]	@ (800ee08 <prvAddNewTaskToReadyList+0xc0>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d109      	bne.n	800ed96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ed82:	4b20      	ldr	r3, [pc, #128]	@ (800ee04 <prvAddNewTaskToReadyList+0xbc>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d802      	bhi.n	800ed96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed90:	4a1c      	ldr	r2, [pc, #112]	@ (800ee04 <prvAddNewTaskToReadyList+0xbc>)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed96:	4b1d      	ldr	r3, [pc, #116]	@ (800ee0c <prvAddNewTaskToReadyList+0xc4>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ee0c <prvAddNewTaskToReadyList+0xc4>)
 800ed9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda4:	2201      	movs	r2, #1
 800eda6:	409a      	lsls	r2, r3
 800eda8:	4b19      	ldr	r3, [pc, #100]	@ (800ee10 <prvAddNewTaskToReadyList+0xc8>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4313      	orrs	r3, r2
 800edae:	4a18      	ldr	r2, [pc, #96]	@ (800ee10 <prvAddNewTaskToReadyList+0xc8>)
 800edb0:	6013      	str	r3, [r2, #0]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb6:	4613      	mov	r3, r2
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	4413      	add	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4a15      	ldr	r2, [pc, #84]	@ (800ee14 <prvAddNewTaskToReadyList+0xcc>)
 800edc0:	441a      	add	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	3304      	adds	r3, #4
 800edc6:	4619      	mov	r1, r3
 800edc8:	4610      	mov	r0, r2
 800edca:	f7fe fe9c 	bl	800db06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800edce:	f001 f83b 	bl	800fe48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800edd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee08 <prvAddNewTaskToReadyList+0xc0>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00e      	beq.n	800edf8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800edda:	4b0a      	ldr	r3, [pc, #40]	@ (800ee04 <prvAddNewTaskToReadyList+0xbc>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d207      	bcs.n	800edf8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ede8:	4b0b      	ldr	r3, [pc, #44]	@ (800ee18 <prvAddNewTaskToReadyList+0xd0>)
 800edea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edee:	601a      	str	r2, [r3, #0]
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edf8:	bf00      	nop
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	20001184 	.word	0x20001184
 800ee04:	20001084 	.word	0x20001084
 800ee08:	20001190 	.word	0x20001190
 800ee0c:	200011a0 	.word	0x200011a0
 800ee10:	2000118c 	.word	0x2000118c
 800ee14:	20001088 	.word	0x20001088
 800ee18:	e000ed04 	.word	0xe000ed04

0800ee1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ee24:	2300      	movs	r3, #0
 800ee26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d01a      	beq.n	800ee64 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ee2e:	4b15      	ldr	r3, [pc, #84]	@ (800ee84 <vTaskDelay+0x68>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00d      	beq.n	800ee52 <vTaskDelay+0x36>
	__asm volatile
 800ee36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3a:	b672      	cpsid	i
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	b662      	cpsie	i
 800ee4a:	60bb      	str	r3, [r7, #8]
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	e7fd      	b.n	800ee4e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ee52:	f000 f889 	bl	800ef68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ee56:	2100      	movs	r1, #0
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f000 fe4b 	bl	800faf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ee5e:	f000 f891 	bl	800ef84 <xTaskResumeAll>
 800ee62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d107      	bne.n	800ee7a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800ee6a:	4b07      	ldr	r3, [pc, #28]	@ (800ee88 <vTaskDelay+0x6c>)
 800ee6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee7a:	bf00      	nop
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	200011ac 	.word	0x200011ac
 800ee88:	e000ed04 	.word	0xe000ed04

0800ee8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b08a      	sub	sp, #40	@ 0x28
 800ee90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee92:	2300      	movs	r3, #0
 800ee94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee9a:	463a      	mov	r2, r7
 800ee9c:	1d39      	adds	r1, r7, #4
 800ee9e:	f107 0308 	add.w	r3, r7, #8
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7f2 fce4 	bl	8001870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	9202      	str	r2, [sp, #8]
 800eeb0:	9301      	str	r3, [sp, #4]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	460a      	mov	r2, r1
 800eeba:	4923      	ldr	r1, [pc, #140]	@ (800ef48 <vTaskStartScheduler+0xbc>)
 800eebc:	4823      	ldr	r0, [pc, #140]	@ (800ef4c <vTaskStartScheduler+0xc0>)
 800eebe:	f7ff fdf5 	bl	800eaac <xTaskCreateStatic>
 800eec2:	4603      	mov	r3, r0
 800eec4:	4a22      	ldr	r2, [pc, #136]	@ (800ef50 <vTaskStartScheduler+0xc4>)
 800eec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eec8:	4b21      	ldr	r3, [pc, #132]	@ (800ef50 <vTaskStartScheduler+0xc4>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eed0:	2301      	movs	r3, #1
 800eed2:	617b      	str	r3, [r7, #20]
 800eed4:	e001      	b.n	800eeda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eed6:	2300      	movs	r3, #0
 800eed8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d11d      	bne.n	800ef1c <vTaskStartScheduler+0x90>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee4:	b672      	cpsid	i
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	b662      	cpsie	i
 800eef4:	613b      	str	r3, [r7, #16]
}
 800eef6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eef8:	4b16      	ldr	r3, [pc, #88]	@ (800ef54 <vTaskStartScheduler+0xc8>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	334c      	adds	r3, #76	@ 0x4c
 800eefe:	4a16      	ldr	r2, [pc, #88]	@ (800ef58 <vTaskStartScheduler+0xcc>)
 800ef00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef02:	4b16      	ldr	r3, [pc, #88]	@ (800ef5c <vTaskStartScheduler+0xd0>)
 800ef04:	f04f 32ff 	mov.w	r2, #4294967295
 800ef08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef0a:	4b15      	ldr	r3, [pc, #84]	@ (800ef60 <vTaskStartScheduler+0xd4>)
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef10:	4b14      	ldr	r3, [pc, #80]	@ (800ef64 <vTaskStartScheduler+0xd8>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef16:	f000 fee3 	bl	800fce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef1a:	e011      	b.n	800ef40 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef22:	d10d      	bne.n	800ef40 <vTaskStartScheduler+0xb4>
	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef28:	b672      	cpsid	i
 800ef2a:	f383 8811 	msr	BASEPRI, r3
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	b662      	cpsie	i
 800ef38:	60fb      	str	r3, [r7, #12]
}
 800ef3a:	bf00      	nop
 800ef3c:	bf00      	nop
 800ef3e:	e7fd      	b.n	800ef3c <vTaskStartScheduler+0xb0>
}
 800ef40:	bf00      	nop
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	08014c68 	.word	0x08014c68
 800ef4c:	0800f57d 	.word	0x0800f57d
 800ef50:	200011a8 	.word	0x200011a8
 800ef54:	20001084 	.word	0x20001084
 800ef58:	2000018c 	.word	0x2000018c
 800ef5c:	200011a4 	.word	0x200011a4
 800ef60:	20001190 	.word	0x20001190
 800ef64:	20001188 	.word	0x20001188

0800ef68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ef6c:	4b04      	ldr	r3, [pc, #16]	@ (800ef80 <vTaskSuspendAll+0x18>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3301      	adds	r3, #1
 800ef72:	4a03      	ldr	r2, [pc, #12]	@ (800ef80 <vTaskSuspendAll+0x18>)
 800ef74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ef76:	bf00      	nop
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr
 800ef80:	200011ac 	.word	0x200011ac

0800ef84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef92:	4b43      	ldr	r3, [pc, #268]	@ (800f0a0 <xTaskResumeAll+0x11c>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d10d      	bne.n	800efb6 <xTaskResumeAll+0x32>
	__asm volatile
 800ef9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef9e:	b672      	cpsid	i
 800efa0:	f383 8811 	msr	BASEPRI, r3
 800efa4:	f3bf 8f6f 	isb	sy
 800efa8:	f3bf 8f4f 	dsb	sy
 800efac:	b662      	cpsie	i
 800efae:	603b      	str	r3, [r7, #0]
}
 800efb0:	bf00      	nop
 800efb2:	bf00      	nop
 800efb4:	e7fd      	b.n	800efb2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800efb6:	f000 ff11 	bl	800fddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800efba:	4b39      	ldr	r3, [pc, #228]	@ (800f0a0 <xTaskResumeAll+0x11c>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	4a37      	ldr	r2, [pc, #220]	@ (800f0a0 <xTaskResumeAll+0x11c>)
 800efc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efc4:	4b36      	ldr	r3, [pc, #216]	@ (800f0a0 <xTaskResumeAll+0x11c>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d161      	bne.n	800f090 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800efcc:	4b35      	ldr	r3, [pc, #212]	@ (800f0a4 <xTaskResumeAll+0x120>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d05d      	beq.n	800f090 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efd4:	e02e      	b.n	800f034 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efd6:	4b34      	ldr	r3, [pc, #208]	@ (800f0a8 <xTaskResumeAll+0x124>)
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	3318      	adds	r3, #24
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe fdec 	bl	800dbc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	3304      	adds	r3, #4
 800efec:	4618      	mov	r0, r3
 800efee:	f7fe fde7 	bl	800dbc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff6:	2201      	movs	r2, #1
 800eff8:	409a      	lsls	r2, r3
 800effa:	4b2c      	ldr	r3, [pc, #176]	@ (800f0ac <xTaskResumeAll+0x128>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4313      	orrs	r3, r2
 800f000:	4a2a      	ldr	r2, [pc, #168]	@ (800f0ac <xTaskResumeAll+0x128>)
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f008:	4613      	mov	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	4413      	add	r3, r2
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	4a27      	ldr	r2, [pc, #156]	@ (800f0b0 <xTaskResumeAll+0x12c>)
 800f012:	441a      	add	r2, r3
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	3304      	adds	r3, #4
 800f018:	4619      	mov	r1, r3
 800f01a:	4610      	mov	r0, r2
 800f01c:	f7fe fd73 	bl	800db06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f024:	4b23      	ldr	r3, [pc, #140]	@ (800f0b4 <xTaskResumeAll+0x130>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d302      	bcc.n	800f034 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f02e:	4b22      	ldr	r3, [pc, #136]	@ (800f0b8 <xTaskResumeAll+0x134>)
 800f030:	2201      	movs	r2, #1
 800f032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f034:	4b1c      	ldr	r3, [pc, #112]	@ (800f0a8 <xTaskResumeAll+0x124>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1cc      	bne.n	800efd6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f042:	f000 fb59 	bl	800f6f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f046:	4b1d      	ldr	r3, [pc, #116]	@ (800f0bc <xTaskResumeAll+0x138>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d010      	beq.n	800f074 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f052:	f000 f859 	bl	800f108 <xTaskIncrementTick>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f05c:	4b16      	ldr	r3, [pc, #88]	@ (800f0b8 <xTaskResumeAll+0x134>)
 800f05e:	2201      	movs	r2, #1
 800f060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3b01      	subs	r3, #1
 800f066:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d1f1      	bne.n	800f052 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f06e:	4b13      	ldr	r3, [pc, #76]	@ (800f0bc <xTaskResumeAll+0x138>)
 800f070:	2200      	movs	r2, #0
 800f072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f074:	4b10      	ldr	r3, [pc, #64]	@ (800f0b8 <xTaskResumeAll+0x134>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d009      	beq.n	800f090 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f07c:	2301      	movs	r3, #1
 800f07e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f080:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c0 <xTaskResumeAll+0x13c>)
 800f082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f090:	f000 feda 	bl	800fe48 <vPortExitCritical>

	return xAlreadyYielded;
 800f094:	68bb      	ldr	r3, [r7, #8]
}
 800f096:	4618      	mov	r0, r3
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	200011ac 	.word	0x200011ac
 800f0a4:	20001184 	.word	0x20001184
 800f0a8:	20001144 	.word	0x20001144
 800f0ac:	2000118c 	.word	0x2000118c
 800f0b0:	20001088 	.word	0x20001088
 800f0b4:	20001084 	.word	0x20001084
 800f0b8:	20001198 	.word	0x20001198
 800f0bc:	20001194 	.word	0x20001194
 800f0c0:	e000ed04 	.word	0xe000ed04

0800f0c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f0ca:	4b05      	ldr	r3, [pc, #20]	@ (800f0e0 <xTaskGetTickCount+0x1c>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f0d0:	687b      	ldr	r3, [r7, #4]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	370c      	adds	r7, #12
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	20001188 	.word	0x20001188

0800f0e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0ea:	f000 ff5f 	bl	800ffac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f0f2:	4b04      	ldr	r3, [pc, #16]	@ (800f104 <xTaskGetTickCountFromISR+0x20>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f0f8:	683b      	ldr	r3, [r7, #0]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	20001188 	.word	0x20001188

0800f108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b086      	sub	sp, #24
 800f10c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f10e:	2300      	movs	r3, #0
 800f110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f112:	4b50      	ldr	r3, [pc, #320]	@ (800f254 <xTaskIncrementTick+0x14c>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 808b 	bne.w	800f232 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f11c:	4b4e      	ldr	r3, [pc, #312]	@ (800f258 <xTaskIncrementTick+0x150>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	3301      	adds	r3, #1
 800f122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f124:	4a4c      	ldr	r2, [pc, #304]	@ (800f258 <xTaskIncrementTick+0x150>)
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d123      	bne.n	800f178 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f130:	4b4a      	ldr	r3, [pc, #296]	@ (800f25c <xTaskIncrementTick+0x154>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d00d      	beq.n	800f156 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13e:	b672      	cpsid	i
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	b662      	cpsie	i
 800f14e:	603b      	str	r3, [r7, #0]
}
 800f150:	bf00      	nop
 800f152:	bf00      	nop
 800f154:	e7fd      	b.n	800f152 <xTaskIncrementTick+0x4a>
 800f156:	4b41      	ldr	r3, [pc, #260]	@ (800f25c <xTaskIncrementTick+0x154>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	4b40      	ldr	r3, [pc, #256]	@ (800f260 <xTaskIncrementTick+0x158>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a3e      	ldr	r2, [pc, #248]	@ (800f25c <xTaskIncrementTick+0x154>)
 800f162:	6013      	str	r3, [r2, #0]
 800f164:	4a3e      	ldr	r2, [pc, #248]	@ (800f260 <xTaskIncrementTick+0x158>)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6013      	str	r3, [r2, #0]
 800f16a:	4b3e      	ldr	r3, [pc, #248]	@ (800f264 <xTaskIncrementTick+0x15c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3301      	adds	r3, #1
 800f170:	4a3c      	ldr	r2, [pc, #240]	@ (800f264 <xTaskIncrementTick+0x15c>)
 800f172:	6013      	str	r3, [r2, #0]
 800f174:	f000 fac0 	bl	800f6f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f178:	4b3b      	ldr	r3, [pc, #236]	@ (800f268 <xTaskIncrementTick+0x160>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d348      	bcc.n	800f214 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f182:	4b36      	ldr	r3, [pc, #216]	@ (800f25c <xTaskIncrementTick+0x154>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d104      	bne.n	800f196 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f18c:	4b36      	ldr	r3, [pc, #216]	@ (800f268 <xTaskIncrementTick+0x160>)
 800f18e:	f04f 32ff 	mov.w	r2, #4294967295
 800f192:	601a      	str	r2, [r3, #0]
					break;
 800f194:	e03e      	b.n	800f214 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f196:	4b31      	ldr	r3, [pc, #196]	@ (800f25c <xTaskIncrementTick+0x154>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1a6:	693a      	ldr	r2, [r7, #16]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d203      	bcs.n	800f1b6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1ae:	4a2e      	ldr	r2, [pc, #184]	@ (800f268 <xTaskIncrementTick+0x160>)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1b4:	e02e      	b.n	800f214 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe fd00 	bl	800dbc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d004      	beq.n	800f1d2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	3318      	adds	r3, #24
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fe fcf7 	bl	800dbc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	409a      	lsls	r2, r3
 800f1da:	4b24      	ldr	r3, [pc, #144]	@ (800f26c <xTaskIncrementTick+0x164>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	4a22      	ldr	r2, [pc, #136]	@ (800f26c <xTaskIncrementTick+0x164>)
 800f1e2:	6013      	str	r3, [r2, #0]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4413      	add	r3, r2
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	4a1f      	ldr	r2, [pc, #124]	@ (800f270 <xTaskIncrementTick+0x168>)
 800f1f2:	441a      	add	r2, r3
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4610      	mov	r0, r2
 800f1fc:	f7fe fc83 	bl	800db06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f204:	4b1b      	ldr	r3, [pc, #108]	@ (800f274 <xTaskIncrementTick+0x16c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d3b9      	bcc.n	800f182 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f20e:	2301      	movs	r3, #1
 800f210:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f212:	e7b6      	b.n	800f182 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f214:	4b17      	ldr	r3, [pc, #92]	@ (800f274 <xTaskIncrementTick+0x16c>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f21a:	4915      	ldr	r1, [pc, #84]	@ (800f270 <xTaskIncrementTick+0x168>)
 800f21c:	4613      	mov	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	440b      	add	r3, r1
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d907      	bls.n	800f23c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f22c:	2301      	movs	r3, #1
 800f22e:	617b      	str	r3, [r7, #20]
 800f230:	e004      	b.n	800f23c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f232:	4b11      	ldr	r3, [pc, #68]	@ (800f278 <xTaskIncrementTick+0x170>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3301      	adds	r3, #1
 800f238:	4a0f      	ldr	r2, [pc, #60]	@ (800f278 <xTaskIncrementTick+0x170>)
 800f23a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f23c:	4b0f      	ldr	r3, [pc, #60]	@ (800f27c <xTaskIncrementTick+0x174>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f244:	2301      	movs	r3, #1
 800f246:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f248:	697b      	ldr	r3, [r7, #20]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	200011ac 	.word	0x200011ac
 800f258:	20001188 	.word	0x20001188
 800f25c:	2000113c 	.word	0x2000113c
 800f260:	20001140 	.word	0x20001140
 800f264:	2000119c 	.word	0x2000119c
 800f268:	200011a4 	.word	0x200011a4
 800f26c:	2000118c 	.word	0x2000118c
 800f270:	20001088 	.word	0x20001088
 800f274:	20001084 	.word	0x20001084
 800f278:	20001194 	.word	0x20001194
 800f27c:	20001198 	.word	0x20001198

0800f280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f286:	4b2b      	ldr	r3, [pc, #172]	@ (800f334 <vTaskSwitchContext+0xb4>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d003      	beq.n	800f296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f28e:	4b2a      	ldr	r3, [pc, #168]	@ (800f338 <vTaskSwitchContext+0xb8>)
 800f290:	2201      	movs	r2, #1
 800f292:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f294:	e047      	b.n	800f326 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f296:	4b28      	ldr	r3, [pc, #160]	@ (800f338 <vTaskSwitchContext+0xb8>)
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f29c:	4b27      	ldr	r3, [pc, #156]	@ (800f33c <vTaskSwitchContext+0xbc>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	fab3 f383 	clz	r3, r3
 800f2a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f2aa:	7afb      	ldrb	r3, [r7, #11]
 800f2ac:	f1c3 031f 	rsb	r3, r3, #31
 800f2b0:	617b      	str	r3, [r7, #20]
 800f2b2:	4923      	ldr	r1, [pc, #140]	@ (800f340 <vTaskSwitchContext+0xc0>)
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	4413      	add	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	440b      	add	r3, r1
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d10d      	bne.n	800f2e2 <vTaskSwitchContext+0x62>
	__asm volatile
 800f2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ca:	b672      	cpsid	i
 800f2cc:	f383 8811 	msr	BASEPRI, r3
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	b662      	cpsie	i
 800f2da:	607b      	str	r3, [r7, #4]
}
 800f2dc:	bf00      	nop
 800f2de:	bf00      	nop
 800f2e0:	e7fd      	b.n	800f2de <vTaskSwitchContext+0x5e>
 800f2e2:	697a      	ldr	r2, [r7, #20]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4a14      	ldr	r2, [pc, #80]	@ (800f340 <vTaskSwitchContext+0xc0>)
 800f2ee:	4413      	add	r3, r2
 800f2f0:	613b      	str	r3, [r7, #16]
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	685a      	ldr	r2, [r3, #4]
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	605a      	str	r2, [r3, #4]
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	3308      	adds	r3, #8
 800f304:	429a      	cmp	r2, r3
 800f306:	d104      	bne.n	800f312 <vTaskSwitchContext+0x92>
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	605a      	str	r2, [r3, #4]
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	4a0a      	ldr	r2, [pc, #40]	@ (800f344 <vTaskSwitchContext+0xc4>)
 800f31a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f31c:	4b09      	ldr	r3, [pc, #36]	@ (800f344 <vTaskSwitchContext+0xc4>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	334c      	adds	r3, #76	@ 0x4c
 800f322:	4a09      	ldr	r2, [pc, #36]	@ (800f348 <vTaskSwitchContext+0xc8>)
 800f324:	6013      	str	r3, [r2, #0]
}
 800f326:	bf00      	nop
 800f328:	371c      	adds	r7, #28
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	200011ac 	.word	0x200011ac
 800f338:	20001198 	.word	0x20001198
 800f33c:	2000118c 	.word	0x2000118c
 800f340:	20001088 	.word	0x20001088
 800f344:	20001084 	.word	0x20001084
 800f348:	2000018c 	.word	0x2000018c

0800f34c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10d      	bne.n	800f378 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f360:	b672      	cpsid	i
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	b662      	cpsie	i
 800f370:	60fb      	str	r3, [r7, #12]
}
 800f372:	bf00      	nop
 800f374:	bf00      	nop
 800f376:	e7fd      	b.n	800f374 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f378:	4b07      	ldr	r3, [pc, #28]	@ (800f398 <vTaskPlaceOnEventList+0x4c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	3318      	adds	r3, #24
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7fe fbe4 	bl	800db4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f386:	2101      	movs	r1, #1
 800f388:	6838      	ldr	r0, [r7, #0]
 800f38a:	f000 fbb3 	bl	800faf4 <prvAddCurrentTaskToDelayedList>
}
 800f38e:	bf00      	nop
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	20001084 	.word	0x20001084

0800f39c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d10d      	bne.n	800f3ce <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b6:	b672      	cpsid	i
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	b662      	cpsie	i
 800f3c6:	60fb      	str	r3, [r7, #12]
}
 800f3c8:	bf00      	nop
 800f3ca:	bf00      	nop
 800f3cc:	e7fd      	b.n	800f3ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	3318      	adds	r3, #24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fe fbf4 	bl	800dbc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3d8:	4b1d      	ldr	r3, [pc, #116]	@ (800f450 <xTaskRemoveFromEventList+0xb4>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d11c      	bne.n	800f41a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe fbeb 	bl	800dbc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	409a      	lsls	r2, r3
 800f3f2:	4b18      	ldr	r3, [pc, #96]	@ (800f454 <xTaskRemoveFromEventList+0xb8>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	4a16      	ldr	r2, [pc, #88]	@ (800f454 <xTaskRemoveFromEventList+0xb8>)
 800f3fa:	6013      	str	r3, [r2, #0]
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f400:	4613      	mov	r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4a13      	ldr	r2, [pc, #76]	@ (800f458 <xTaskRemoveFromEventList+0xbc>)
 800f40a:	441a      	add	r2, r3
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	3304      	adds	r3, #4
 800f410:	4619      	mov	r1, r3
 800f412:	4610      	mov	r0, r2
 800f414:	f7fe fb77 	bl	800db06 <vListInsertEnd>
 800f418:	e005      	b.n	800f426 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	3318      	adds	r3, #24
 800f41e:	4619      	mov	r1, r3
 800f420:	480e      	ldr	r0, [pc, #56]	@ (800f45c <xTaskRemoveFromEventList+0xc0>)
 800f422:	f7fe fb70 	bl	800db06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f42a:	4b0d      	ldr	r3, [pc, #52]	@ (800f460 <xTaskRemoveFromEventList+0xc4>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f430:	429a      	cmp	r2, r3
 800f432:	d905      	bls.n	800f440 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f434:	2301      	movs	r3, #1
 800f436:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f438:	4b0a      	ldr	r3, [pc, #40]	@ (800f464 <xTaskRemoveFromEventList+0xc8>)
 800f43a:	2201      	movs	r2, #1
 800f43c:	601a      	str	r2, [r3, #0]
 800f43e:	e001      	b.n	800f444 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f440:	2300      	movs	r3, #0
 800f442:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f444:	697b      	ldr	r3, [r7, #20]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3718      	adds	r7, #24
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	200011ac 	.word	0x200011ac
 800f454:	2000118c 	.word	0x2000118c
 800f458:	20001088 	.word	0x20001088
 800f45c:	20001144 	.word	0x20001144
 800f460:	20001084 	.word	0x20001084
 800f464:	20001198 	.word	0x20001198

0800f468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f470:	4b06      	ldr	r3, [pc, #24]	@ (800f48c <vTaskInternalSetTimeOutState+0x24>)
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f478:	4b05      	ldr	r3, [pc, #20]	@ (800f490 <vTaskInternalSetTimeOutState+0x28>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	605a      	str	r2, [r3, #4]
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	2000119c 	.word	0x2000119c
 800f490:	20001188 	.word	0x20001188

0800f494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10d      	bne.n	800f4c0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a8:	b672      	cpsid	i
 800f4aa:	f383 8811 	msr	BASEPRI, r3
 800f4ae:	f3bf 8f6f 	isb	sy
 800f4b2:	f3bf 8f4f 	dsb	sy
 800f4b6:	b662      	cpsie	i
 800f4b8:	613b      	str	r3, [r7, #16]
}
 800f4ba:	bf00      	nop
 800f4bc:	bf00      	nop
 800f4be:	e7fd      	b.n	800f4bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d10d      	bne.n	800f4e2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ca:	b672      	cpsid	i
 800f4cc:	f383 8811 	msr	BASEPRI, r3
 800f4d0:	f3bf 8f6f 	isb	sy
 800f4d4:	f3bf 8f4f 	dsb	sy
 800f4d8:	b662      	cpsie	i
 800f4da:	60fb      	str	r3, [r7, #12]
}
 800f4dc:	bf00      	nop
 800f4de:	bf00      	nop
 800f4e0:	e7fd      	b.n	800f4de <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f4e2:	f000 fc7b 	bl	800fddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f4e6:	4b1d      	ldr	r3, [pc, #116]	@ (800f55c <xTaskCheckForTimeOut+0xc8>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	69ba      	ldr	r2, [r7, #24]
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fe:	d102      	bne.n	800f506 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f500:	2300      	movs	r3, #0
 800f502:	61fb      	str	r3, [r7, #28]
 800f504:	e023      	b.n	800f54e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	4b15      	ldr	r3, [pc, #84]	@ (800f560 <xTaskCheckForTimeOut+0xcc>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d007      	beq.n	800f522 <xTaskCheckForTimeOut+0x8e>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	69ba      	ldr	r2, [r7, #24]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d302      	bcc.n	800f522 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f51c:	2301      	movs	r3, #1
 800f51e:	61fb      	str	r3, [r7, #28]
 800f520:	e015      	b.n	800f54e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d20b      	bcs.n	800f544 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	1ad2      	subs	r2, r2, r3
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff ff95 	bl	800f468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f53e:	2300      	movs	r3, #0
 800f540:	61fb      	str	r3, [r7, #28]
 800f542:	e004      	b.n	800f54e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2200      	movs	r2, #0
 800f548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f54a:	2301      	movs	r3, #1
 800f54c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f54e:	f000 fc7b 	bl	800fe48 <vPortExitCritical>

	return xReturn;
 800f552:	69fb      	ldr	r3, [r7, #28]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3720      	adds	r7, #32
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	20001188 	.word	0x20001188
 800f560:	2000119c 	.word	0x2000119c

0800f564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f564:	b480      	push	{r7}
 800f566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f568:	4b03      	ldr	r3, [pc, #12]	@ (800f578 <vTaskMissedYield+0x14>)
 800f56a:	2201      	movs	r2, #1
 800f56c:	601a      	str	r2, [r3, #0]
}
 800f56e:	bf00      	nop
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr
 800f578:	20001198 	.word	0x20001198

0800f57c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f584:	f000 f852 	bl	800f62c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f588:	4b06      	ldr	r3, [pc, #24]	@ (800f5a4 <prvIdleTask+0x28>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d9f9      	bls.n	800f584 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f590:	4b05      	ldr	r3, [pc, #20]	@ (800f5a8 <prvIdleTask+0x2c>)
 800f592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f596:	601a      	str	r2, [r3, #0]
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f5a0:	e7f0      	b.n	800f584 <prvIdleTask+0x8>
 800f5a2:	bf00      	nop
 800f5a4:	20001088 	.word	0x20001088
 800f5a8:	e000ed04 	.word	0xe000ed04

0800f5ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	607b      	str	r3, [r7, #4]
 800f5b6:	e00c      	b.n	800f5d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	4413      	add	r3, r2
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	4a12      	ldr	r2, [pc, #72]	@ (800f60c <prvInitialiseTaskLists+0x60>)
 800f5c4:	4413      	add	r3, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fe fa70 	bl	800daac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	607b      	str	r3, [r7, #4]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2b06      	cmp	r3, #6
 800f5d6:	d9ef      	bls.n	800f5b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f5d8:	480d      	ldr	r0, [pc, #52]	@ (800f610 <prvInitialiseTaskLists+0x64>)
 800f5da:	f7fe fa67 	bl	800daac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f5de:	480d      	ldr	r0, [pc, #52]	@ (800f614 <prvInitialiseTaskLists+0x68>)
 800f5e0:	f7fe fa64 	bl	800daac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f5e4:	480c      	ldr	r0, [pc, #48]	@ (800f618 <prvInitialiseTaskLists+0x6c>)
 800f5e6:	f7fe fa61 	bl	800daac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f5ea:	480c      	ldr	r0, [pc, #48]	@ (800f61c <prvInitialiseTaskLists+0x70>)
 800f5ec:	f7fe fa5e 	bl	800daac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f5f0:	480b      	ldr	r0, [pc, #44]	@ (800f620 <prvInitialiseTaskLists+0x74>)
 800f5f2:	f7fe fa5b 	bl	800daac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800f624 <prvInitialiseTaskLists+0x78>)
 800f5f8:	4a05      	ldr	r2, [pc, #20]	@ (800f610 <prvInitialiseTaskLists+0x64>)
 800f5fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f628 <prvInitialiseTaskLists+0x7c>)
 800f5fe:	4a05      	ldr	r2, [pc, #20]	@ (800f614 <prvInitialiseTaskLists+0x68>)
 800f600:	601a      	str	r2, [r3, #0]
}
 800f602:	bf00      	nop
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	20001088 	.word	0x20001088
 800f610:	20001114 	.word	0x20001114
 800f614:	20001128 	.word	0x20001128
 800f618:	20001144 	.word	0x20001144
 800f61c:	20001158 	.word	0x20001158
 800f620:	20001170 	.word	0x20001170
 800f624:	2000113c 	.word	0x2000113c
 800f628:	20001140 	.word	0x20001140

0800f62c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f632:	e019      	b.n	800f668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f634:	f000 fbd2 	bl	800fddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f638:	4b10      	ldr	r3, [pc, #64]	@ (800f67c <prvCheckTasksWaitingTermination+0x50>)
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	3304      	adds	r3, #4
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe fabb 	bl	800dbc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f64a:	4b0d      	ldr	r3, [pc, #52]	@ (800f680 <prvCheckTasksWaitingTermination+0x54>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3b01      	subs	r3, #1
 800f650:	4a0b      	ldr	r2, [pc, #44]	@ (800f680 <prvCheckTasksWaitingTermination+0x54>)
 800f652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f654:	4b0b      	ldr	r3, [pc, #44]	@ (800f684 <prvCheckTasksWaitingTermination+0x58>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3b01      	subs	r3, #1
 800f65a:	4a0a      	ldr	r2, [pc, #40]	@ (800f684 <prvCheckTasksWaitingTermination+0x58>)
 800f65c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f65e:	f000 fbf3 	bl	800fe48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 f810 	bl	800f688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f668:	4b06      	ldr	r3, [pc, #24]	@ (800f684 <prvCheckTasksWaitingTermination+0x58>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e1      	bne.n	800f634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f670:	bf00      	nop
 800f672:	bf00      	nop
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	20001158 	.word	0x20001158
 800f680:	20001184 	.word	0x20001184
 800f684:	2000116c 	.word	0x2000116c

0800f688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	334c      	adds	r3, #76	@ 0x4c
 800f694:	4618      	mov	r0, r3
 800f696:	f002 fce5 	bl	8012064 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d108      	bne.n	800f6b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f000 fd93 	bl	80101d4 <vPortFree>
				vPortFree( pxTCB );
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 fd90 	bl	80101d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f6b4:	e01b      	b.n	800f6ee <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d103      	bne.n	800f6c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 fd87 	bl	80101d4 <vPortFree>
	}
 800f6c6:	e012      	b.n	800f6ee <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d00d      	beq.n	800f6ee <prvDeleteTCB+0x66>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d6:	b672      	cpsid	i
 800f6d8:	f383 8811 	msr	BASEPRI, r3
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	b662      	cpsie	i
 800f6e6:	60fb      	str	r3, [r7, #12]
}
 800f6e8:	bf00      	nop
 800f6ea:	bf00      	nop
 800f6ec:	e7fd      	b.n	800f6ea <prvDeleteTCB+0x62>
	}
 800f6ee:	bf00      	nop
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f730 <prvResetNextTaskUnblockTime+0x38>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d104      	bne.n	800f712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f708:	4b0a      	ldr	r3, [pc, #40]	@ (800f734 <prvResetNextTaskUnblockTime+0x3c>)
 800f70a:	f04f 32ff 	mov.w	r2, #4294967295
 800f70e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f710:	e008      	b.n	800f724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f712:	4b07      	ldr	r3, [pc, #28]	@ (800f730 <prvResetNextTaskUnblockTime+0x38>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4a04      	ldr	r2, [pc, #16]	@ (800f734 <prvResetNextTaskUnblockTime+0x3c>)
 800f722:	6013      	str	r3, [r2, #0]
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr
 800f730:	2000113c 	.word	0x2000113c
 800f734:	200011a4 	.word	0x200011a4

0800f738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f73e:	4b0b      	ldr	r3, [pc, #44]	@ (800f76c <xTaskGetSchedulerState+0x34>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d102      	bne.n	800f74c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f746:	2301      	movs	r3, #1
 800f748:	607b      	str	r3, [r7, #4]
 800f74a:	e008      	b.n	800f75e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f74c:	4b08      	ldr	r3, [pc, #32]	@ (800f770 <xTaskGetSchedulerState+0x38>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d102      	bne.n	800f75a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f754:	2302      	movs	r3, #2
 800f756:	607b      	str	r3, [r7, #4]
 800f758:	e001      	b.n	800f75e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f75a:	2300      	movs	r3, #0
 800f75c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f75e:	687b      	ldr	r3, [r7, #4]
	}
 800f760:	4618      	mov	r0, r3
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr
 800f76c:	20001190 	.word	0x20001190
 800f770:	200011ac 	.word	0x200011ac

0800f774 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f780:	2300      	movs	r3, #0
 800f782:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d069      	beq.n	800f85e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f78e:	4b36      	ldr	r3, [pc, #216]	@ (800f868 <xTaskPriorityInherit+0xf4>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f794:	429a      	cmp	r2, r3
 800f796:	d259      	bcs.n	800f84c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	db06      	blt.n	800f7ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7a0:	4b31      	ldr	r3, [pc, #196]	@ (800f868 <xTaskPriorityInherit+0xf4>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7a6:	f1c3 0207 	rsb	r2, r3, #7
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	6959      	ldr	r1, [r3, #20]
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4a2b      	ldr	r2, [pc, #172]	@ (800f86c <xTaskPriorityInherit+0xf8>)
 800f7c0:	4413      	add	r3, r2
 800f7c2:	4299      	cmp	r1, r3
 800f7c4:	d13a      	bne.n	800f83c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe f9f8 	bl	800dbc0 <uxListRemove>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d115      	bne.n	800f802 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7da:	4924      	ldr	r1, [pc, #144]	@ (800f86c <xTaskPriorityInherit+0xf8>)
 800f7dc:	4613      	mov	r3, r2
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	440b      	add	r3, r1
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10a      	bne.n	800f802 <xTaskPriorityInherit+0x8e>
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f7f6:	43da      	mvns	r2, r3
 800f7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f870 <xTaskPriorityInherit+0xfc>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	4a1c      	ldr	r2, [pc, #112]	@ (800f870 <xTaskPriorityInherit+0xfc>)
 800f800:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f802:	4b19      	ldr	r3, [pc, #100]	@ (800f868 <xTaskPriorityInherit+0xf4>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f810:	2201      	movs	r2, #1
 800f812:	409a      	lsls	r2, r3
 800f814:	4b16      	ldr	r3, [pc, #88]	@ (800f870 <xTaskPriorityInherit+0xfc>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4313      	orrs	r3, r2
 800f81a:	4a15      	ldr	r2, [pc, #84]	@ (800f870 <xTaskPriorityInherit+0xfc>)
 800f81c:	6013      	str	r3, [r2, #0]
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f822:	4613      	mov	r3, r2
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4413      	add	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4a10      	ldr	r2, [pc, #64]	@ (800f86c <xTaskPriorityInherit+0xf8>)
 800f82c:	441a      	add	r2, r3
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	3304      	adds	r3, #4
 800f832:	4619      	mov	r1, r3
 800f834:	4610      	mov	r0, r2
 800f836:	f7fe f966 	bl	800db06 <vListInsertEnd>
 800f83a:	e004      	b.n	800f846 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f83c:	4b0a      	ldr	r3, [pc, #40]	@ (800f868 <xTaskPriorityInherit+0xf4>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f846:	2301      	movs	r3, #1
 800f848:	60fb      	str	r3, [r7, #12]
 800f84a:	e008      	b.n	800f85e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f850:	4b05      	ldr	r3, [pc, #20]	@ (800f868 <xTaskPriorityInherit+0xf4>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f856:	429a      	cmp	r2, r3
 800f858:	d201      	bcs.n	800f85e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f85a:	2301      	movs	r3, #1
 800f85c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f85e:	68fb      	ldr	r3, [r7, #12]
	}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	20001084 	.word	0x20001084
 800f86c:	20001088 	.word	0x20001088
 800f870:	2000118c 	.word	0x2000118c

0800f874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f880:	2300      	movs	r3, #0
 800f882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d074      	beq.n	800f974 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f88a:	4b3d      	ldr	r3, [pc, #244]	@ (800f980 <xTaskPriorityDisinherit+0x10c>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	429a      	cmp	r2, r3
 800f892:	d00d      	beq.n	800f8b0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f898:	b672      	cpsid	i
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	b662      	cpsie	i
 800f8a8:	60fb      	str	r3, [r7, #12]
}
 800f8aa:	bf00      	nop
 800f8ac:	bf00      	nop
 800f8ae:	e7fd      	b.n	800f8ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d10d      	bne.n	800f8d4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8bc:	b672      	cpsid	i
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	b662      	cpsie	i
 800f8cc:	60bb      	str	r3, [r7, #8]
}
 800f8ce:	bf00      	nop
 800f8d0:	bf00      	nop
 800f8d2:	e7fd      	b.n	800f8d0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8d8:	1e5a      	subs	r2, r3, #1
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d044      	beq.n	800f974 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d140      	bne.n	800f974 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	3304      	adds	r3, #4
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fe f962 	bl	800dbc0 <uxListRemove>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d115      	bne.n	800f92e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f906:	491f      	ldr	r1, [pc, #124]	@ (800f984 <xTaskPriorityDisinherit+0x110>)
 800f908:	4613      	mov	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	4413      	add	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	440b      	add	r3, r1
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10a      	bne.n	800f92e <xTaskPriorityDisinherit+0xba>
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91c:	2201      	movs	r2, #1
 800f91e:	fa02 f303 	lsl.w	r3, r2, r3
 800f922:	43da      	mvns	r2, r3
 800f924:	4b18      	ldr	r3, [pc, #96]	@ (800f988 <xTaskPriorityDisinherit+0x114>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4013      	ands	r3, r2
 800f92a:	4a17      	ldr	r2, [pc, #92]	@ (800f988 <xTaskPriorityDisinherit+0x114>)
 800f92c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f93a:	f1c3 0207 	rsb	r2, r3, #7
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f946:	2201      	movs	r2, #1
 800f948:	409a      	lsls	r2, r3
 800f94a:	4b0f      	ldr	r3, [pc, #60]	@ (800f988 <xTaskPriorityDisinherit+0x114>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4313      	orrs	r3, r2
 800f950:	4a0d      	ldr	r2, [pc, #52]	@ (800f988 <xTaskPriorityDisinherit+0x114>)
 800f952:	6013      	str	r3, [r2, #0]
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f958:	4613      	mov	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4413      	add	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4a08      	ldr	r2, [pc, #32]	@ (800f984 <xTaskPriorityDisinherit+0x110>)
 800f962:	441a      	add	r2, r3
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	3304      	adds	r3, #4
 800f968:	4619      	mov	r1, r3
 800f96a:	4610      	mov	r0, r2
 800f96c:	f7fe f8cb 	bl	800db06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f970:	2301      	movs	r3, #1
 800f972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f974:	697b      	ldr	r3, [r7, #20]
	}
 800f976:	4618      	mov	r0, r3
 800f978:	3718      	adds	r7, #24
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	20001084 	.word	0x20001084
 800f984:	20001088 	.word	0x20001088
 800f988:	2000118c 	.word	0x2000118c

0800f98c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b088      	sub	sp, #32
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f99a:	2301      	movs	r3, #1
 800f99c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 8089 	beq.w	800fab8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10d      	bne.n	800f9ca <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b2:	b672      	cpsid	i
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	b662      	cpsie	i
 800f9c2:	60fb      	str	r3, [r7, #12]
}
 800f9c4:	bf00      	nop
 800f9c6:	bf00      	nop
 800f9c8:	e7fd      	b.n	800f9c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ce:	683a      	ldr	r2, [r7, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d902      	bls.n	800f9da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	61fb      	str	r3, [r7, #28]
 800f9d8:	e002      	b.n	800f9e0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e4:	69fa      	ldr	r2, [r7, #28]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d066      	beq.n	800fab8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d161      	bne.n	800fab8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f9f4:	4b32      	ldr	r3, [pc, #200]	@ (800fac0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	69ba      	ldr	r2, [r7, #24]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d10d      	bne.n	800fa1a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	b672      	cpsid	i
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	b662      	cpsie	i
 800fa12:	60bb      	str	r3, [r7, #8]
}
 800fa14:	bf00      	nop
 800fa16:	bf00      	nop
 800fa18:	e7fd      	b.n	800fa16 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	69fa      	ldr	r2, [r7, #28]
 800fa24:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	699b      	ldr	r3, [r3, #24]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	db04      	blt.n	800fa38 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	f1c3 0207 	rsb	r2, r3, #7
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	6959      	ldr	r1, [r3, #20]
 800fa3c:	693a      	ldr	r2, [r7, #16]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4a1f      	ldr	r2, [pc, #124]	@ (800fac4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fa48:	4413      	add	r3, r2
 800fa4a:	4299      	cmp	r1, r3
 800fa4c:	d134      	bne.n	800fab8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	3304      	adds	r3, #4
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fe f8b4 	bl	800dbc0 <uxListRemove>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d115      	bne.n	800fa8a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa62:	4918      	ldr	r1, [pc, #96]	@ (800fac4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fa64:	4613      	mov	r3, r2
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	4413      	add	r3, r2
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	440b      	add	r3, r1
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10a      	bne.n	800fa8a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa78:	2201      	movs	r2, #1
 800fa7a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa7e:	43da      	mvns	r2, r3
 800fa80:	4b11      	ldr	r3, [pc, #68]	@ (800fac8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4013      	ands	r3, r2
 800fa86:	4a10      	ldr	r2, [pc, #64]	@ (800fac8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fa88:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8e:	2201      	movs	r2, #1
 800fa90:	409a      	lsls	r2, r3
 800fa92:	4b0d      	ldr	r3, [pc, #52]	@ (800fac8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	4a0b      	ldr	r2, [pc, #44]	@ (800fac8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fa9a:	6013      	str	r3, [r2, #0]
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faa0:	4613      	mov	r3, r2
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	4413      	add	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4a06      	ldr	r2, [pc, #24]	@ (800fac4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800faaa:	441a      	add	r2, r3
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	3304      	adds	r3, #4
 800fab0:	4619      	mov	r1, r3
 800fab2:	4610      	mov	r0, r2
 800fab4:	f7fe f827 	bl	800db06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fab8:	bf00      	nop
 800faba:	3720      	adds	r7, #32
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	20001084 	.word	0x20001084
 800fac4:	20001088 	.word	0x20001088
 800fac8:	2000118c 	.word	0x2000118c

0800facc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800facc:	b480      	push	{r7}
 800face:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fad0:	4b07      	ldr	r3, [pc, #28]	@ (800faf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d004      	beq.n	800fae2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fad8:	4b05      	ldr	r3, [pc, #20]	@ (800faf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fade:	3201      	adds	r2, #1
 800fae0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800fae2:	4b03      	ldr	r3, [pc, #12]	@ (800faf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fae4:	681b      	ldr	r3, [r3, #0]
	}
 800fae6:	4618      	mov	r0, r3
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	20001084 	.word	0x20001084

0800faf4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fafe:	4b29      	ldr	r3, [pc, #164]	@ (800fba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb04:	4b28      	ldr	r3, [pc, #160]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3304      	adds	r3, #4
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe f858 	bl	800dbc0 <uxListRemove>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d10b      	bne.n	800fb2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fb16:	4b24      	ldr	r3, [pc, #144]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb22:	43da      	mvns	r2, r3
 800fb24:	4b21      	ldr	r3, [pc, #132]	@ (800fbac <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4013      	ands	r3, r2
 800fb2a:	4a20      	ldr	r2, [pc, #128]	@ (800fbac <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb34:	d10a      	bne.n	800fb4c <prvAddCurrentTaskToDelayedList+0x58>
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d007      	beq.n	800fb4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb3c:	4b1a      	ldr	r3, [pc, #104]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3304      	adds	r3, #4
 800fb42:	4619      	mov	r1, r3
 800fb44:	481a      	ldr	r0, [pc, #104]	@ (800fbb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fb46:	f7fd ffde 	bl	800db06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb4a:	e026      	b.n	800fb9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4413      	add	r3, r2
 800fb52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb54:	4b14      	ldr	r3, [pc, #80]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d209      	bcs.n	800fb78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb64:	4b13      	ldr	r3, [pc, #76]	@ (800fbb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	4b0f      	ldr	r3, [pc, #60]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	4619      	mov	r1, r3
 800fb70:	4610      	mov	r0, r2
 800fb72:	f7fd ffec 	bl	800db4e <vListInsert>
}
 800fb76:	e010      	b.n	800fb9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb78:	4b0f      	ldr	r3, [pc, #60]	@ (800fbb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3304      	adds	r3, #4
 800fb82:	4619      	mov	r1, r3
 800fb84:	4610      	mov	r0, r2
 800fb86:	f7fd ffe2 	bl	800db4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb8a:	4b0c      	ldr	r3, [pc, #48]	@ (800fbbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d202      	bcs.n	800fb9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fb94:	4a09      	ldr	r2, [pc, #36]	@ (800fbbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	6013      	str	r3, [r2, #0]
}
 800fb9a:	bf00      	nop
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	20001188 	.word	0x20001188
 800fba8:	20001084 	.word	0x20001084
 800fbac:	2000118c 	.word	0x2000118c
 800fbb0:	20001170 	.word	0x20001170
 800fbb4:	20001140 	.word	0x20001140
 800fbb8:	2000113c 	.word	0x2000113c
 800fbbc:	200011a4 	.word	0x200011a4

0800fbc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	3b04      	subs	r3, #4
 800fbd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fbd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3b04      	subs	r3, #4
 800fbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	f023 0201 	bic.w	r2, r3, #1
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3b04      	subs	r3, #4
 800fbee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbf0:	4a0c      	ldr	r2, [pc, #48]	@ (800fc24 <pxPortInitialiseStack+0x64>)
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	3b14      	subs	r3, #20
 800fbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3b04      	subs	r3, #4
 800fc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f06f 0202 	mvn.w	r2, #2
 800fc0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	3b20      	subs	r3, #32
 800fc14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc16:	68fb      	ldr	r3, [r7, #12]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr
 800fc24:	0800fc29 	.word	0x0800fc29

0800fc28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc32:	4b15      	ldr	r3, [pc, #84]	@ (800fc88 <prvTaskExitError+0x60>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc3a:	d00d      	beq.n	800fc58 <prvTaskExitError+0x30>
	__asm volatile
 800fc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc40:	b672      	cpsid	i
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	b662      	cpsie	i
 800fc50:	60fb      	str	r3, [r7, #12]
}
 800fc52:	bf00      	nop
 800fc54:	bf00      	nop
 800fc56:	e7fd      	b.n	800fc54 <prvTaskExitError+0x2c>
	__asm volatile
 800fc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5c:	b672      	cpsid	i
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	b662      	cpsie	i
 800fc6c:	60bb      	str	r3, [r7, #8]
}
 800fc6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc70:	bf00      	nop
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d0fc      	beq.n	800fc72 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	3714      	adds	r7, #20
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	20000010 	.word	0x20000010
 800fc8c:	00000000 	.word	0x00000000

0800fc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc90:	4b07      	ldr	r3, [pc, #28]	@ (800fcb0 <pxCurrentTCBConst2>)
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	6808      	ldr	r0, [r1, #0]
 800fc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9a:	f380 8809 	msr	PSP, r0
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f04f 0000 	mov.w	r0, #0
 800fca6:	f380 8811 	msr	BASEPRI, r0
 800fcaa:	4770      	bx	lr
 800fcac:	f3af 8000 	nop.w

0800fcb0 <pxCurrentTCBConst2>:
 800fcb0:	20001084 	.word	0x20001084
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fcb4:	bf00      	nop
 800fcb6:	bf00      	nop

0800fcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fcb8:	4808      	ldr	r0, [pc, #32]	@ (800fcdc <prvPortStartFirstTask+0x24>)
 800fcba:	6800      	ldr	r0, [r0, #0]
 800fcbc:	6800      	ldr	r0, [r0, #0]
 800fcbe:	f380 8808 	msr	MSP, r0
 800fcc2:	f04f 0000 	mov.w	r0, #0
 800fcc6:	f380 8814 	msr	CONTROL, r0
 800fcca:	b662      	cpsie	i
 800fccc:	b661      	cpsie	f
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	df00      	svc	0
 800fcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fcda:	bf00      	nop
 800fcdc:	e000ed08 	.word	0xe000ed08

0800fce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fce6:	4b37      	ldr	r3, [pc, #220]	@ (800fdc4 <xPortStartScheduler+0xe4>)
 800fce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	22ff      	movs	r2, #255	@ 0xff
 800fcf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd00:	78fb      	ldrb	r3, [r7, #3]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fd08:	b2da      	uxtb	r2, r3
 800fd0a:	4b2f      	ldr	r3, [pc, #188]	@ (800fdc8 <xPortStartScheduler+0xe8>)
 800fd0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd0e:	4b2f      	ldr	r3, [pc, #188]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd10:	2207      	movs	r2, #7
 800fd12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd14:	e009      	b.n	800fd2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fd16:	4b2d      	ldr	r3, [pc, #180]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	4a2b      	ldr	r2, [pc, #172]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd2a:	78fb      	ldrb	r3, [r7, #3]
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd32:	2b80      	cmp	r3, #128	@ 0x80
 800fd34:	d0ef      	beq.n	800fd16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd36:	4b25      	ldr	r3, [pc, #148]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f1c3 0307 	rsb	r3, r3, #7
 800fd3e:	2b04      	cmp	r3, #4
 800fd40:	d00d      	beq.n	800fd5e <xPortStartScheduler+0x7e>
	__asm volatile
 800fd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd46:	b672      	cpsid	i
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	b662      	cpsie	i
 800fd56:	60bb      	str	r3, [r7, #8]
}
 800fd58:	bf00      	nop
 800fd5a:	bf00      	nop
 800fd5c:	e7fd      	b.n	800fd5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd5e:	4b1b      	ldr	r3, [pc, #108]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	021b      	lsls	r3, r3, #8
 800fd64:	4a19      	ldr	r2, [pc, #100]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd68:	4b18      	ldr	r3, [pc, #96]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fd70:	4a16      	ldr	r2, [pc, #88]	@ (800fdcc <xPortStartScheduler+0xec>)
 800fd72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd7c:	4b14      	ldr	r3, [pc, #80]	@ (800fdd0 <xPortStartScheduler+0xf0>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4a13      	ldr	r2, [pc, #76]	@ (800fdd0 <xPortStartScheduler+0xf0>)
 800fd82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fd86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd88:	4b11      	ldr	r3, [pc, #68]	@ (800fdd0 <xPortStartScheduler+0xf0>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a10      	ldr	r2, [pc, #64]	@ (800fdd0 <xPortStartScheduler+0xf0>)
 800fd8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fd92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd94:	f000 f8dc 	bl	800ff50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd98:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd4 <xPortStartScheduler+0xf4>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd9e:	f000 f8fb 	bl	800ff98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fda2:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd8 <xPortStartScheduler+0xf8>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a0c      	ldr	r2, [pc, #48]	@ (800fdd8 <xPortStartScheduler+0xf8>)
 800fda8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fdac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fdae:	f7ff ff83 	bl	800fcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fdb2:	f7ff fa65 	bl	800f280 <vTaskSwitchContext>
	prvTaskExitError();
 800fdb6:	f7ff ff37 	bl	800fc28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	e000e400 	.word	0xe000e400
 800fdc8:	200011b0 	.word	0x200011b0
 800fdcc:	200011b4 	.word	0x200011b4
 800fdd0:	e000ed20 	.word	0xe000ed20
 800fdd4:	20000010 	.word	0x20000010
 800fdd8:	e000ef34 	.word	0xe000ef34

0800fddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde6:	b672      	cpsid	i
 800fde8:	f383 8811 	msr	BASEPRI, r3
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f3bf 8f4f 	dsb	sy
 800fdf4:	b662      	cpsie	i
 800fdf6:	607b      	str	r3, [r7, #4]
}
 800fdf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fdfa:	4b11      	ldr	r3, [pc, #68]	@ (800fe40 <vPortEnterCritical+0x64>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	4a0f      	ldr	r2, [pc, #60]	@ (800fe40 <vPortEnterCritical+0x64>)
 800fe02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe04:	4b0e      	ldr	r3, [pc, #56]	@ (800fe40 <vPortEnterCritical+0x64>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d112      	bne.n	800fe32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fe0c:	4b0d      	ldr	r3, [pc, #52]	@ (800fe44 <vPortEnterCritical+0x68>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00d      	beq.n	800fe32 <vPortEnterCritical+0x56>
	__asm volatile
 800fe16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1a:	b672      	cpsid	i
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	b662      	cpsie	i
 800fe2a:	603b      	str	r3, [r7, #0]
}
 800fe2c:	bf00      	nop
 800fe2e:	bf00      	nop
 800fe30:	e7fd      	b.n	800fe2e <vPortEnterCritical+0x52>
	}
}
 800fe32:	bf00      	nop
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20000010 	.word	0x20000010
 800fe44:	e000ed04 	.word	0xe000ed04

0800fe48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fe4e:	4b13      	ldr	r3, [pc, #76]	@ (800fe9c <vPortExitCritical+0x54>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10d      	bne.n	800fe72 <vPortExitCritical+0x2a>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe5a:	b672      	cpsid	i
 800fe5c:	f383 8811 	msr	BASEPRI, r3
 800fe60:	f3bf 8f6f 	isb	sy
 800fe64:	f3bf 8f4f 	dsb	sy
 800fe68:	b662      	cpsie	i
 800fe6a:	607b      	str	r3, [r7, #4]
}
 800fe6c:	bf00      	nop
 800fe6e:	bf00      	nop
 800fe70:	e7fd      	b.n	800fe6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800fe72:	4b0a      	ldr	r3, [pc, #40]	@ (800fe9c <vPortExitCritical+0x54>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	3b01      	subs	r3, #1
 800fe78:	4a08      	ldr	r2, [pc, #32]	@ (800fe9c <vPortExitCritical+0x54>)
 800fe7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe7c:	4b07      	ldr	r3, [pc, #28]	@ (800fe9c <vPortExitCritical+0x54>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d105      	bne.n	800fe90 <vPortExitCritical+0x48>
 800fe84:	2300      	movs	r3, #0
 800fe86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	f383 8811 	msr	BASEPRI, r3
}
 800fe8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	20000010 	.word	0x20000010

0800fea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fea0:	f3ef 8009 	mrs	r0, PSP
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	4b15      	ldr	r3, [pc, #84]	@ (800ff00 <pxCurrentTCBConst>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	f01e 0f10 	tst.w	lr, #16
 800feb0:	bf08      	it	eq
 800feb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800feb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feba:	6010      	str	r0, [r2, #0]
 800febc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fec4:	b672      	cpsid	i
 800fec6:	f380 8811 	msr	BASEPRI, r0
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	f3bf 8f6f 	isb	sy
 800fed2:	b662      	cpsie	i
 800fed4:	f7ff f9d4 	bl	800f280 <vTaskSwitchContext>
 800fed8:	f04f 0000 	mov.w	r0, #0
 800fedc:	f380 8811 	msr	BASEPRI, r0
 800fee0:	bc09      	pop	{r0, r3}
 800fee2:	6819      	ldr	r1, [r3, #0]
 800fee4:	6808      	ldr	r0, [r1, #0]
 800fee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feea:	f01e 0f10 	tst.w	lr, #16
 800feee:	bf08      	it	eq
 800fef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fef4:	f380 8809 	msr	PSP, r0
 800fef8:	f3bf 8f6f 	isb	sy
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop

0800ff00 <pxCurrentTCBConst>:
 800ff00:	20001084 	.word	0x20001084
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff04:	bf00      	nop
 800ff06:	bf00      	nop

0800ff08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff12:	b672      	cpsid	i
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	b662      	cpsie	i
 800ff22:	607b      	str	r3, [r7, #4]
}
 800ff24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ff26:	f7ff f8ef 	bl	800f108 <xTaskIncrementTick>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d003      	beq.n	800ff38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ff30:	4b06      	ldr	r3, [pc, #24]	@ (800ff4c <SysTick_Handler+0x44>)
 800ff32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff36:	601a      	str	r2, [r3, #0]
 800ff38:	2300      	movs	r3, #0
 800ff3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	f383 8811 	msr	BASEPRI, r3
}
 800ff42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ff44:	bf00      	nop
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	e000ed04 	.word	0xe000ed04

0800ff50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ff50:	b480      	push	{r7}
 800ff52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ff54:	4b0b      	ldr	r3, [pc, #44]	@ (800ff84 <vPortSetupTimerInterrupt+0x34>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ff5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ff88 <vPortSetupTimerInterrupt+0x38>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff60:	4b0a      	ldr	r3, [pc, #40]	@ (800ff8c <vPortSetupTimerInterrupt+0x3c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a0a      	ldr	r2, [pc, #40]	@ (800ff90 <vPortSetupTimerInterrupt+0x40>)
 800ff66:	fba2 2303 	umull	r2, r3, r2, r3
 800ff6a:	099b      	lsrs	r3, r3, #6
 800ff6c:	4a09      	ldr	r2, [pc, #36]	@ (800ff94 <vPortSetupTimerInterrupt+0x44>)
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff72:	4b04      	ldr	r3, [pc, #16]	@ (800ff84 <vPortSetupTimerInterrupt+0x34>)
 800ff74:	2207      	movs	r2, #7
 800ff76:	601a      	str	r2, [r3, #0]
}
 800ff78:	bf00      	nop
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	e000e010 	.word	0xe000e010
 800ff88:	e000e018 	.word	0xe000e018
 800ff8c:	20000004 	.word	0x20000004
 800ff90:	10624dd3 	.word	0x10624dd3
 800ff94:	e000e014 	.word	0xe000e014

0800ff98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ffa8 <vPortEnableVFP+0x10>
 800ff9c:	6801      	ldr	r1, [r0, #0]
 800ff9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ffa2:	6001      	str	r1, [r0, #0]
 800ffa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ffa6:	bf00      	nop
 800ffa8:	e000ed88 	.word	0xe000ed88

0800ffac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ffb2:	f3ef 8305 	mrs	r3, IPSR
 800ffb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b0f      	cmp	r3, #15
 800ffbc:	d917      	bls.n	800ffee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ffbe:	4a1a      	ldr	r2, [pc, #104]	@ (8010028 <vPortValidateInterruptPriority+0x7c>)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ffc8:	4b18      	ldr	r3, [pc, #96]	@ (801002c <vPortValidateInterruptPriority+0x80>)
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	7afa      	ldrb	r2, [r7, #11]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d20d      	bcs.n	800ffee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800ffd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd6:	b672      	cpsid	i
 800ffd8:	f383 8811 	msr	BASEPRI, r3
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	b662      	cpsie	i
 800ffe6:	607b      	str	r3, [r7, #4]
}
 800ffe8:	bf00      	nop
 800ffea:	bf00      	nop
 800ffec:	e7fd      	b.n	800ffea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ffee:	4b10      	ldr	r3, [pc, #64]	@ (8010030 <vPortValidateInterruptPriority+0x84>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fff6:	4b0f      	ldr	r3, [pc, #60]	@ (8010034 <vPortValidateInterruptPriority+0x88>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d90d      	bls.n	801001a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010002:	b672      	cpsid	i
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	b662      	cpsie	i
 8010012:	603b      	str	r3, [r7, #0]
}
 8010014:	bf00      	nop
 8010016:	bf00      	nop
 8010018:	e7fd      	b.n	8010016 <vPortValidateInterruptPriority+0x6a>
	}
 801001a:	bf00      	nop
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	e000e3f0 	.word	0xe000e3f0
 801002c:	200011b0 	.word	0x200011b0
 8010030:	e000ed0c 	.word	0xe000ed0c
 8010034:	200011b4 	.word	0x200011b4

08010038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b08a      	sub	sp, #40	@ 0x28
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010040:	2300      	movs	r3, #0
 8010042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010044:	f7fe ff90 	bl	800ef68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010048:	4b5d      	ldr	r3, [pc, #372]	@ (80101c0 <pvPortMalloc+0x188>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d101      	bne.n	8010054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010050:	f000 f920 	bl	8010294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010054:	4b5b      	ldr	r3, [pc, #364]	@ (80101c4 <pvPortMalloc+0x18c>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4013      	ands	r3, r2
 801005c:	2b00      	cmp	r3, #0
 801005e:	f040 8094 	bne.w	801018a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d020      	beq.n	80100aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010068:	2208      	movs	r2, #8
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4413      	add	r3, r2
 801006e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f003 0307 	and.w	r3, r3, #7
 8010076:	2b00      	cmp	r3, #0
 8010078:	d017      	beq.n	80100aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f023 0307 	bic.w	r3, r3, #7
 8010080:	3308      	adds	r3, #8
 8010082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f003 0307 	and.w	r3, r3, #7
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00d      	beq.n	80100aa <pvPortMalloc+0x72>
	__asm volatile
 801008e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010092:	b672      	cpsid	i
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	b662      	cpsie	i
 80100a2:	617b      	str	r3, [r7, #20]
}
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	e7fd      	b.n	80100a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d06c      	beq.n	801018a <pvPortMalloc+0x152>
 80100b0:	4b45      	ldr	r3, [pc, #276]	@ (80101c8 <pvPortMalloc+0x190>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d867      	bhi.n	801018a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80100ba:	4b44      	ldr	r3, [pc, #272]	@ (80101cc <pvPortMalloc+0x194>)
 80100bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80100be:	4b43      	ldr	r3, [pc, #268]	@ (80101cc <pvPortMalloc+0x194>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100c4:	e004      	b.n	80100d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80100c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80100ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d903      	bls.n	80100e2 <pvPortMalloc+0xaa>
 80100da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1f1      	bne.n	80100c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80100e2:	4b37      	ldr	r3, [pc, #220]	@ (80101c0 <pvPortMalloc+0x188>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d04e      	beq.n	801018a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2208      	movs	r2, #8
 80100f2:	4413      	add	r3, r2
 80100f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	6a3b      	ldr	r3, [r7, #32]
 80100fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	1ad2      	subs	r2, r2, r3
 8010106:	2308      	movs	r3, #8
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	429a      	cmp	r2, r3
 801010c:	d922      	bls.n	8010154 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801010e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4413      	add	r3, r2
 8010114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	f003 0307 	and.w	r3, r3, #7
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00d      	beq.n	801013c <pvPortMalloc+0x104>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010124:	b672      	cpsid	i
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	b662      	cpsie	i
 8010134:	613b      	str	r3, [r7, #16]
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	e7fd      	b.n	8010138 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801013c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013e:	685a      	ldr	r2, [r3, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	1ad2      	subs	r2, r2, r3
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801014e:	69b8      	ldr	r0, [r7, #24]
 8010150:	f000 f902 	bl	8010358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010154:	4b1c      	ldr	r3, [pc, #112]	@ (80101c8 <pvPortMalloc+0x190>)
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	4a1a      	ldr	r2, [pc, #104]	@ (80101c8 <pvPortMalloc+0x190>)
 8010160:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010162:	4b19      	ldr	r3, [pc, #100]	@ (80101c8 <pvPortMalloc+0x190>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	4b1a      	ldr	r3, [pc, #104]	@ (80101d0 <pvPortMalloc+0x198>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	429a      	cmp	r2, r3
 801016c:	d203      	bcs.n	8010176 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801016e:	4b16      	ldr	r3, [pc, #88]	@ (80101c8 <pvPortMalloc+0x190>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a17      	ldr	r2, [pc, #92]	@ (80101d0 <pvPortMalloc+0x198>)
 8010174:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	4b12      	ldr	r3, [pc, #72]	@ (80101c4 <pvPortMalloc+0x18c>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	431a      	orrs	r2, r3
 8010180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010182:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010186:	2200      	movs	r2, #0
 8010188:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801018a:	f7fe fefb 	bl	800ef84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	f003 0307 	and.w	r3, r3, #7
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00d      	beq.n	80101b4 <pvPortMalloc+0x17c>
	__asm volatile
 8010198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019c:	b672      	cpsid	i
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	b662      	cpsie	i
 80101ac:	60fb      	str	r3, [r7, #12]
}
 80101ae:	bf00      	nop
 80101b0:	bf00      	nop
 80101b2:	e7fd      	b.n	80101b0 <pvPortMalloc+0x178>
	return pvReturn;
 80101b4:	69fb      	ldr	r3, [r7, #28]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3728      	adds	r7, #40	@ 0x28
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	20004dc0 	.word	0x20004dc0
 80101c4:	20004dcc 	.word	0x20004dcc
 80101c8:	20004dc4 	.word	0x20004dc4
 80101cc:	20004db8 	.word	0x20004db8
 80101d0:	20004dc8 	.word	0x20004dc8

080101d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b086      	sub	sp, #24
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d04e      	beq.n	8010284 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80101e6:	2308      	movs	r3, #8
 80101e8:	425b      	negs	r3, r3
 80101ea:	697a      	ldr	r2, [r7, #20]
 80101ec:	4413      	add	r3, r2
 80101ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	4b24      	ldr	r3, [pc, #144]	@ (801028c <vPortFree+0xb8>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4013      	ands	r3, r2
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d10d      	bne.n	801021e <vPortFree+0x4a>
	__asm volatile
 8010202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010206:	b672      	cpsid	i
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	b662      	cpsie	i
 8010216:	60fb      	str	r3, [r7, #12]
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	e7fd      	b.n	801021a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00d      	beq.n	8010242 <vPortFree+0x6e>
	__asm volatile
 8010226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801022a:	b672      	cpsid	i
 801022c:	f383 8811 	msr	BASEPRI, r3
 8010230:	f3bf 8f6f 	isb	sy
 8010234:	f3bf 8f4f 	dsb	sy
 8010238:	b662      	cpsie	i
 801023a:	60bb      	str	r3, [r7, #8]
}
 801023c:	bf00      	nop
 801023e:	bf00      	nop
 8010240:	e7fd      	b.n	801023e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	685a      	ldr	r2, [r3, #4]
 8010246:	4b11      	ldr	r3, [pc, #68]	@ (801028c <vPortFree+0xb8>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4013      	ands	r3, r2
 801024c:	2b00      	cmp	r3, #0
 801024e:	d019      	beq.n	8010284 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d115      	bne.n	8010284 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	4b0b      	ldr	r3, [pc, #44]	@ (801028c <vPortFree+0xb8>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	43db      	mvns	r3, r3
 8010262:	401a      	ands	r2, r3
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010268:	f7fe fe7e 	bl	800ef68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	685a      	ldr	r2, [r3, #4]
 8010270:	4b07      	ldr	r3, [pc, #28]	@ (8010290 <vPortFree+0xbc>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4413      	add	r3, r2
 8010276:	4a06      	ldr	r2, [pc, #24]	@ (8010290 <vPortFree+0xbc>)
 8010278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801027a:	6938      	ldr	r0, [r7, #16]
 801027c:	f000 f86c 	bl	8010358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010280:	f7fe fe80 	bl	800ef84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010284:	bf00      	nop
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20004dcc 	.word	0x20004dcc
 8010290:	20004dc4 	.word	0x20004dc4

08010294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801029a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801029e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80102a0:	4b27      	ldr	r3, [pc, #156]	@ (8010340 <prvHeapInit+0xac>)
 80102a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f003 0307 	and.w	r3, r3, #7
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00c      	beq.n	80102c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3307      	adds	r3, #7
 80102b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f023 0307 	bic.w	r3, r3, #7
 80102ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80102bc:	68ba      	ldr	r2, [r7, #8]
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	4a1f      	ldr	r2, [pc, #124]	@ (8010340 <prvHeapInit+0xac>)
 80102c4:	4413      	add	r3, r2
 80102c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80102cc:	4a1d      	ldr	r2, [pc, #116]	@ (8010344 <prvHeapInit+0xb0>)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80102d2:	4b1c      	ldr	r3, [pc, #112]	@ (8010344 <prvHeapInit+0xb0>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	68ba      	ldr	r2, [r7, #8]
 80102dc:	4413      	add	r3, r2
 80102de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80102e0:	2208      	movs	r2, #8
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	1a9b      	subs	r3, r3, r2
 80102e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f023 0307 	bic.w	r3, r3, #7
 80102ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	4a15      	ldr	r2, [pc, #84]	@ (8010348 <prvHeapInit+0xb4>)
 80102f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80102f6:	4b14      	ldr	r3, [pc, #80]	@ (8010348 <prvHeapInit+0xb4>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2200      	movs	r2, #0
 80102fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102fe:	4b12      	ldr	r3, [pc, #72]	@ (8010348 <prvHeapInit+0xb4>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2200      	movs	r2, #0
 8010304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	68fa      	ldr	r2, [r7, #12]
 801030e:	1ad2      	subs	r2, r2, r3
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010314:	4b0c      	ldr	r3, [pc, #48]	@ (8010348 <prvHeapInit+0xb4>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	4a0a      	ldr	r2, [pc, #40]	@ (801034c <prvHeapInit+0xb8>)
 8010322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	4a09      	ldr	r2, [pc, #36]	@ (8010350 <prvHeapInit+0xbc>)
 801032a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801032c:	4b09      	ldr	r3, [pc, #36]	@ (8010354 <prvHeapInit+0xc0>)
 801032e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010332:	601a      	str	r2, [r3, #0]
}
 8010334:	bf00      	nop
 8010336:	3714      	adds	r7, #20
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	200011b8 	.word	0x200011b8
 8010344:	20004db8 	.word	0x20004db8
 8010348:	20004dc0 	.word	0x20004dc0
 801034c:	20004dc8 	.word	0x20004dc8
 8010350:	20004dc4 	.word	0x20004dc4
 8010354:	20004dcc 	.word	0x20004dcc

08010358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010358:	b480      	push	{r7}
 801035a:	b085      	sub	sp, #20
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010360:	4b28      	ldr	r3, [pc, #160]	@ (8010404 <prvInsertBlockIntoFreeList+0xac>)
 8010362:	60fb      	str	r3, [r7, #12]
 8010364:	e002      	b.n	801036c <prvInsertBlockIntoFreeList+0x14>
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	60fb      	str	r3, [r7, #12]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	429a      	cmp	r2, r3
 8010374:	d8f7      	bhi.n	8010366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	4413      	add	r3, r2
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	429a      	cmp	r2, r3
 8010386:	d108      	bne.n	801039a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	441a      	add	r2, r3
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	441a      	add	r2, r3
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d118      	bne.n	80103e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	4b15      	ldr	r3, [pc, #84]	@ (8010408 <prvInsertBlockIntoFreeList+0xb0>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d00d      	beq.n	80103d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	685a      	ldr	r2, [r3, #4]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	441a      	add	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	e008      	b.n	80103e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80103d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010408 <prvInsertBlockIntoFreeList+0xb0>)
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	601a      	str	r2, [r3, #0]
 80103de:	e003      	b.n	80103e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80103e8:	68fa      	ldr	r2, [r7, #12]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d002      	beq.n	80103f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103f6:	bf00      	nop
 80103f8:	3714      	adds	r7, #20
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	20004db8 	.word	0x20004db8
 8010408:	20004dc0 	.word	0x20004dc0

0801040c <atof>:
 801040c:	2100      	movs	r1, #0
 801040e:	f000 be07 	b.w	8011020 <strtod>

08010412 <atoi>:
 8010412:	220a      	movs	r2, #10
 8010414:	2100      	movs	r1, #0
 8010416:	f000 beed 	b.w	80111f4 <strtol>

0801041a <sulp>:
 801041a:	b570      	push	{r4, r5, r6, lr}
 801041c:	4604      	mov	r4, r0
 801041e:	460d      	mov	r5, r1
 8010420:	ec45 4b10 	vmov	d0, r4, r5
 8010424:	4616      	mov	r6, r2
 8010426:	f003 fd2b 	bl	8013e80 <__ulp>
 801042a:	ec51 0b10 	vmov	r0, r1, d0
 801042e:	b17e      	cbz	r6, 8010450 <sulp+0x36>
 8010430:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010434:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010438:	2b00      	cmp	r3, #0
 801043a:	dd09      	ble.n	8010450 <sulp+0x36>
 801043c:	051b      	lsls	r3, r3, #20
 801043e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010442:	2400      	movs	r4, #0
 8010444:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010448:	4622      	mov	r2, r4
 801044a:	462b      	mov	r3, r5
 801044c:	f7f0 f8f4 	bl	8000638 <__aeabi_dmul>
 8010450:	ec41 0b10 	vmov	d0, r0, r1
 8010454:	bd70      	pop	{r4, r5, r6, pc}
	...

08010458 <_strtod_l>:
 8010458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045c:	b09f      	sub	sp, #124	@ 0x7c
 801045e:	460c      	mov	r4, r1
 8010460:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010462:	2200      	movs	r2, #0
 8010464:	921a      	str	r2, [sp, #104]	@ 0x68
 8010466:	9005      	str	r0, [sp, #20]
 8010468:	f04f 0a00 	mov.w	sl, #0
 801046c:	f04f 0b00 	mov.w	fp, #0
 8010470:	460a      	mov	r2, r1
 8010472:	9219      	str	r2, [sp, #100]	@ 0x64
 8010474:	7811      	ldrb	r1, [r2, #0]
 8010476:	292b      	cmp	r1, #43	@ 0x2b
 8010478:	d04a      	beq.n	8010510 <_strtod_l+0xb8>
 801047a:	d838      	bhi.n	80104ee <_strtod_l+0x96>
 801047c:	290d      	cmp	r1, #13
 801047e:	d832      	bhi.n	80104e6 <_strtod_l+0x8e>
 8010480:	2908      	cmp	r1, #8
 8010482:	d832      	bhi.n	80104ea <_strtod_l+0x92>
 8010484:	2900      	cmp	r1, #0
 8010486:	d03b      	beq.n	8010500 <_strtod_l+0xa8>
 8010488:	2200      	movs	r2, #0
 801048a:	920e      	str	r2, [sp, #56]	@ 0x38
 801048c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801048e:	782a      	ldrb	r2, [r5, #0]
 8010490:	2a30      	cmp	r2, #48	@ 0x30
 8010492:	f040 80b2 	bne.w	80105fa <_strtod_l+0x1a2>
 8010496:	786a      	ldrb	r2, [r5, #1]
 8010498:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801049c:	2a58      	cmp	r2, #88	@ 0x58
 801049e:	d16e      	bne.n	801057e <_strtod_l+0x126>
 80104a0:	9302      	str	r3, [sp, #8]
 80104a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104a4:	9301      	str	r3, [sp, #4]
 80104a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	4a8f      	ldr	r2, [pc, #572]	@ (80106e8 <_strtod_l+0x290>)
 80104ac:	9805      	ldr	r0, [sp, #20]
 80104ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80104b0:	a919      	add	r1, sp, #100	@ 0x64
 80104b2:	f002 fddf 	bl	8013074 <__gethex>
 80104b6:	f010 060f 	ands.w	r6, r0, #15
 80104ba:	4604      	mov	r4, r0
 80104bc:	d005      	beq.n	80104ca <_strtod_l+0x72>
 80104be:	2e06      	cmp	r6, #6
 80104c0:	d128      	bne.n	8010514 <_strtod_l+0xbc>
 80104c2:	3501      	adds	r5, #1
 80104c4:	2300      	movs	r3, #0
 80104c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80104c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80104ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f040 858e 	bne.w	8010fee <_strtod_l+0xb96>
 80104d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104d4:	b1cb      	cbz	r3, 801050a <_strtod_l+0xb2>
 80104d6:	4652      	mov	r2, sl
 80104d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80104dc:	ec43 2b10 	vmov	d0, r2, r3
 80104e0:	b01f      	add	sp, #124	@ 0x7c
 80104e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e6:	2920      	cmp	r1, #32
 80104e8:	d1ce      	bne.n	8010488 <_strtod_l+0x30>
 80104ea:	3201      	adds	r2, #1
 80104ec:	e7c1      	b.n	8010472 <_strtod_l+0x1a>
 80104ee:	292d      	cmp	r1, #45	@ 0x2d
 80104f0:	d1ca      	bne.n	8010488 <_strtod_l+0x30>
 80104f2:	2101      	movs	r1, #1
 80104f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80104f6:	1c51      	adds	r1, r2, #1
 80104f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80104fa:	7852      	ldrb	r2, [r2, #1]
 80104fc:	2a00      	cmp	r2, #0
 80104fe:	d1c5      	bne.n	801048c <_strtod_l+0x34>
 8010500:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010502:	9419      	str	r4, [sp, #100]	@ 0x64
 8010504:	2b00      	cmp	r3, #0
 8010506:	f040 8570 	bne.w	8010fea <_strtod_l+0xb92>
 801050a:	4652      	mov	r2, sl
 801050c:	465b      	mov	r3, fp
 801050e:	e7e5      	b.n	80104dc <_strtod_l+0x84>
 8010510:	2100      	movs	r1, #0
 8010512:	e7ef      	b.n	80104f4 <_strtod_l+0x9c>
 8010514:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010516:	b13a      	cbz	r2, 8010528 <_strtod_l+0xd0>
 8010518:	2135      	movs	r1, #53	@ 0x35
 801051a:	a81c      	add	r0, sp, #112	@ 0x70
 801051c:	f003 fdaa 	bl	8014074 <__copybits>
 8010520:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010522:	9805      	ldr	r0, [sp, #20]
 8010524:	f003 f980 	bl	8013828 <_Bfree>
 8010528:	3e01      	subs	r6, #1
 801052a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801052c:	2e04      	cmp	r6, #4
 801052e:	d806      	bhi.n	801053e <_strtod_l+0xe6>
 8010530:	e8df f006 	tbb	[pc, r6]
 8010534:	201d0314 	.word	0x201d0314
 8010538:	14          	.byte	0x14
 8010539:	00          	.byte	0x00
 801053a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801053e:	05e1      	lsls	r1, r4, #23
 8010540:	bf48      	it	mi
 8010542:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801054a:	0d1b      	lsrs	r3, r3, #20
 801054c:	051b      	lsls	r3, r3, #20
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1bb      	bne.n	80104ca <_strtod_l+0x72>
 8010552:	f001 fe1b 	bl	801218c <__errno>
 8010556:	2322      	movs	r3, #34	@ 0x22
 8010558:	6003      	str	r3, [r0, #0]
 801055a:	e7b6      	b.n	80104ca <_strtod_l+0x72>
 801055c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010560:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010568:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801056c:	e7e7      	b.n	801053e <_strtod_l+0xe6>
 801056e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80106f0 <_strtod_l+0x298>
 8010572:	e7e4      	b.n	801053e <_strtod_l+0xe6>
 8010574:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010578:	f04f 3aff 	mov.w	sl, #4294967295
 801057c:	e7df      	b.n	801053e <_strtod_l+0xe6>
 801057e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010580:	1c5a      	adds	r2, r3, #1
 8010582:	9219      	str	r2, [sp, #100]	@ 0x64
 8010584:	785b      	ldrb	r3, [r3, #1]
 8010586:	2b30      	cmp	r3, #48	@ 0x30
 8010588:	d0f9      	beq.n	801057e <_strtod_l+0x126>
 801058a:	2b00      	cmp	r3, #0
 801058c:	d09d      	beq.n	80104ca <_strtod_l+0x72>
 801058e:	2301      	movs	r3, #1
 8010590:	2700      	movs	r7, #0
 8010592:	9308      	str	r3, [sp, #32]
 8010594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010596:	930c      	str	r3, [sp, #48]	@ 0x30
 8010598:	970b      	str	r7, [sp, #44]	@ 0x2c
 801059a:	46b9      	mov	r9, r7
 801059c:	220a      	movs	r2, #10
 801059e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80105a0:	7805      	ldrb	r5, [r0, #0]
 80105a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80105a6:	b2d9      	uxtb	r1, r3
 80105a8:	2909      	cmp	r1, #9
 80105aa:	d928      	bls.n	80105fe <_strtod_l+0x1a6>
 80105ac:	494f      	ldr	r1, [pc, #316]	@ (80106ec <_strtod_l+0x294>)
 80105ae:	2201      	movs	r2, #1
 80105b0:	f001 fcd5 	bl	8011f5e <strncmp>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d032      	beq.n	801061e <_strtod_l+0x1c6>
 80105b8:	2000      	movs	r0, #0
 80105ba:	462a      	mov	r2, r5
 80105bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80105be:	464d      	mov	r5, r9
 80105c0:	4603      	mov	r3, r0
 80105c2:	2a65      	cmp	r2, #101	@ 0x65
 80105c4:	d001      	beq.n	80105ca <_strtod_l+0x172>
 80105c6:	2a45      	cmp	r2, #69	@ 0x45
 80105c8:	d114      	bne.n	80105f4 <_strtod_l+0x19c>
 80105ca:	b91d      	cbnz	r5, 80105d4 <_strtod_l+0x17c>
 80105cc:	9a08      	ldr	r2, [sp, #32]
 80105ce:	4302      	orrs	r2, r0
 80105d0:	d096      	beq.n	8010500 <_strtod_l+0xa8>
 80105d2:	2500      	movs	r5, #0
 80105d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80105d6:	1c62      	adds	r2, r4, #1
 80105d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80105da:	7862      	ldrb	r2, [r4, #1]
 80105dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80105de:	d07a      	beq.n	80106d6 <_strtod_l+0x27e>
 80105e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80105e2:	d07e      	beq.n	80106e2 <_strtod_l+0x28a>
 80105e4:	f04f 0c00 	mov.w	ip, #0
 80105e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80105ec:	2909      	cmp	r1, #9
 80105ee:	f240 8085 	bls.w	80106fc <_strtod_l+0x2a4>
 80105f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80105f4:	f04f 0800 	mov.w	r8, #0
 80105f8:	e0a5      	b.n	8010746 <_strtod_l+0x2ee>
 80105fa:	2300      	movs	r3, #0
 80105fc:	e7c8      	b.n	8010590 <_strtod_l+0x138>
 80105fe:	f1b9 0f08 	cmp.w	r9, #8
 8010602:	bfd8      	it	le
 8010604:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010606:	f100 0001 	add.w	r0, r0, #1
 801060a:	bfda      	itte	le
 801060c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010610:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010612:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010616:	f109 0901 	add.w	r9, r9, #1
 801061a:	9019      	str	r0, [sp, #100]	@ 0x64
 801061c:	e7bf      	b.n	801059e <_strtod_l+0x146>
 801061e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	9219      	str	r2, [sp, #100]	@ 0x64
 8010624:	785a      	ldrb	r2, [r3, #1]
 8010626:	f1b9 0f00 	cmp.w	r9, #0
 801062a:	d03b      	beq.n	80106a4 <_strtod_l+0x24c>
 801062c:	900a      	str	r0, [sp, #40]	@ 0x28
 801062e:	464d      	mov	r5, r9
 8010630:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010634:	2b09      	cmp	r3, #9
 8010636:	d912      	bls.n	801065e <_strtod_l+0x206>
 8010638:	2301      	movs	r3, #1
 801063a:	e7c2      	b.n	80105c2 <_strtod_l+0x16a>
 801063c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801063e:	1c5a      	adds	r2, r3, #1
 8010640:	9219      	str	r2, [sp, #100]	@ 0x64
 8010642:	785a      	ldrb	r2, [r3, #1]
 8010644:	3001      	adds	r0, #1
 8010646:	2a30      	cmp	r2, #48	@ 0x30
 8010648:	d0f8      	beq.n	801063c <_strtod_l+0x1e4>
 801064a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801064e:	2b08      	cmp	r3, #8
 8010650:	f200 84d2 	bhi.w	8010ff8 <_strtod_l+0xba0>
 8010654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010656:	900a      	str	r0, [sp, #40]	@ 0x28
 8010658:	2000      	movs	r0, #0
 801065a:	930c      	str	r3, [sp, #48]	@ 0x30
 801065c:	4605      	mov	r5, r0
 801065e:	3a30      	subs	r2, #48	@ 0x30
 8010660:	f100 0301 	add.w	r3, r0, #1
 8010664:	d018      	beq.n	8010698 <_strtod_l+0x240>
 8010666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010668:	4419      	add	r1, r3
 801066a:	910a      	str	r1, [sp, #40]	@ 0x28
 801066c:	462e      	mov	r6, r5
 801066e:	f04f 0e0a 	mov.w	lr, #10
 8010672:	1c71      	adds	r1, r6, #1
 8010674:	eba1 0c05 	sub.w	ip, r1, r5
 8010678:	4563      	cmp	r3, ip
 801067a:	dc15      	bgt.n	80106a8 <_strtod_l+0x250>
 801067c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010680:	182b      	adds	r3, r5, r0
 8010682:	2b08      	cmp	r3, #8
 8010684:	f105 0501 	add.w	r5, r5, #1
 8010688:	4405      	add	r5, r0
 801068a:	dc1a      	bgt.n	80106c2 <_strtod_l+0x26a>
 801068c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801068e:	230a      	movs	r3, #10
 8010690:	fb03 2301 	mla	r3, r3, r1, r2
 8010694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010696:	2300      	movs	r3, #0
 8010698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801069a:	1c51      	adds	r1, r2, #1
 801069c:	9119      	str	r1, [sp, #100]	@ 0x64
 801069e:	7852      	ldrb	r2, [r2, #1]
 80106a0:	4618      	mov	r0, r3
 80106a2:	e7c5      	b.n	8010630 <_strtod_l+0x1d8>
 80106a4:	4648      	mov	r0, r9
 80106a6:	e7ce      	b.n	8010646 <_strtod_l+0x1ee>
 80106a8:	2e08      	cmp	r6, #8
 80106aa:	dc05      	bgt.n	80106b8 <_strtod_l+0x260>
 80106ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80106ae:	fb0e f606 	mul.w	r6, lr, r6
 80106b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80106b4:	460e      	mov	r6, r1
 80106b6:	e7dc      	b.n	8010672 <_strtod_l+0x21a>
 80106b8:	2910      	cmp	r1, #16
 80106ba:	bfd8      	it	le
 80106bc:	fb0e f707 	mulle.w	r7, lr, r7
 80106c0:	e7f8      	b.n	80106b4 <_strtod_l+0x25c>
 80106c2:	2b0f      	cmp	r3, #15
 80106c4:	bfdc      	itt	le
 80106c6:	230a      	movle	r3, #10
 80106c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80106cc:	e7e3      	b.n	8010696 <_strtod_l+0x23e>
 80106ce:	2300      	movs	r3, #0
 80106d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80106d2:	2301      	movs	r3, #1
 80106d4:	e77a      	b.n	80105cc <_strtod_l+0x174>
 80106d6:	f04f 0c00 	mov.w	ip, #0
 80106da:	1ca2      	adds	r2, r4, #2
 80106dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80106de:	78a2      	ldrb	r2, [r4, #2]
 80106e0:	e782      	b.n	80105e8 <_strtod_l+0x190>
 80106e2:	f04f 0c01 	mov.w	ip, #1
 80106e6:	e7f8      	b.n	80106da <_strtod_l+0x282>
 80106e8:	08014edc 	.word	0x08014edc
 80106ec:	08014c9c 	.word	0x08014c9c
 80106f0:	7ff00000 	.word	0x7ff00000
 80106f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80106f6:	1c51      	adds	r1, r2, #1
 80106f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80106fa:	7852      	ldrb	r2, [r2, #1]
 80106fc:	2a30      	cmp	r2, #48	@ 0x30
 80106fe:	d0f9      	beq.n	80106f4 <_strtod_l+0x29c>
 8010700:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010704:	2908      	cmp	r1, #8
 8010706:	f63f af75 	bhi.w	80105f4 <_strtod_l+0x19c>
 801070a:	3a30      	subs	r2, #48	@ 0x30
 801070c:	9209      	str	r2, [sp, #36]	@ 0x24
 801070e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010710:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010712:	f04f 080a 	mov.w	r8, #10
 8010716:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010718:	1c56      	adds	r6, r2, #1
 801071a:	9619      	str	r6, [sp, #100]	@ 0x64
 801071c:	7852      	ldrb	r2, [r2, #1]
 801071e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010722:	f1be 0f09 	cmp.w	lr, #9
 8010726:	d939      	bls.n	801079c <_strtod_l+0x344>
 8010728:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801072a:	1a76      	subs	r6, r6, r1
 801072c:	2e08      	cmp	r6, #8
 801072e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010732:	dc03      	bgt.n	801073c <_strtod_l+0x2e4>
 8010734:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010736:	4588      	cmp	r8, r1
 8010738:	bfa8      	it	ge
 801073a:	4688      	movge	r8, r1
 801073c:	f1bc 0f00 	cmp.w	ip, #0
 8010740:	d001      	beq.n	8010746 <_strtod_l+0x2ee>
 8010742:	f1c8 0800 	rsb	r8, r8, #0
 8010746:	2d00      	cmp	r5, #0
 8010748:	d14e      	bne.n	80107e8 <_strtod_l+0x390>
 801074a:	9908      	ldr	r1, [sp, #32]
 801074c:	4308      	orrs	r0, r1
 801074e:	f47f aebc 	bne.w	80104ca <_strtod_l+0x72>
 8010752:	2b00      	cmp	r3, #0
 8010754:	f47f aed4 	bne.w	8010500 <_strtod_l+0xa8>
 8010758:	2a69      	cmp	r2, #105	@ 0x69
 801075a:	d028      	beq.n	80107ae <_strtod_l+0x356>
 801075c:	dc25      	bgt.n	80107aa <_strtod_l+0x352>
 801075e:	2a49      	cmp	r2, #73	@ 0x49
 8010760:	d025      	beq.n	80107ae <_strtod_l+0x356>
 8010762:	2a4e      	cmp	r2, #78	@ 0x4e
 8010764:	f47f aecc 	bne.w	8010500 <_strtod_l+0xa8>
 8010768:	499a      	ldr	r1, [pc, #616]	@ (80109d4 <_strtod_l+0x57c>)
 801076a:	a819      	add	r0, sp, #100	@ 0x64
 801076c:	f002 fea4 	bl	80134b8 <__match>
 8010770:	2800      	cmp	r0, #0
 8010772:	f43f aec5 	beq.w	8010500 <_strtod_l+0xa8>
 8010776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	2b28      	cmp	r3, #40	@ 0x28
 801077c:	d12e      	bne.n	80107dc <_strtod_l+0x384>
 801077e:	4996      	ldr	r1, [pc, #600]	@ (80109d8 <_strtod_l+0x580>)
 8010780:	aa1c      	add	r2, sp, #112	@ 0x70
 8010782:	a819      	add	r0, sp, #100	@ 0x64
 8010784:	f002 feac 	bl	80134e0 <__hexnan>
 8010788:	2805      	cmp	r0, #5
 801078a:	d127      	bne.n	80107dc <_strtod_l+0x384>
 801078c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801078e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010792:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010796:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801079a:	e696      	b.n	80104ca <_strtod_l+0x72>
 801079c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801079e:	fb08 2101 	mla	r1, r8, r1, r2
 80107a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80107a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80107a8:	e7b5      	b.n	8010716 <_strtod_l+0x2be>
 80107aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80107ac:	e7da      	b.n	8010764 <_strtod_l+0x30c>
 80107ae:	498b      	ldr	r1, [pc, #556]	@ (80109dc <_strtod_l+0x584>)
 80107b0:	a819      	add	r0, sp, #100	@ 0x64
 80107b2:	f002 fe81 	bl	80134b8 <__match>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	f43f aea2 	beq.w	8010500 <_strtod_l+0xa8>
 80107bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107be:	4988      	ldr	r1, [pc, #544]	@ (80109e0 <_strtod_l+0x588>)
 80107c0:	3b01      	subs	r3, #1
 80107c2:	a819      	add	r0, sp, #100	@ 0x64
 80107c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80107c6:	f002 fe77 	bl	80134b8 <__match>
 80107ca:	b910      	cbnz	r0, 80107d2 <_strtod_l+0x37a>
 80107cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107ce:	3301      	adds	r3, #1
 80107d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80107d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80109f0 <_strtod_l+0x598>
 80107d6:	f04f 0a00 	mov.w	sl, #0
 80107da:	e676      	b.n	80104ca <_strtod_l+0x72>
 80107dc:	4881      	ldr	r0, [pc, #516]	@ (80109e4 <_strtod_l+0x58c>)
 80107de:	f001 fd13 	bl	8012208 <nan>
 80107e2:	ec5b ab10 	vmov	sl, fp, d0
 80107e6:	e670      	b.n	80104ca <_strtod_l+0x72>
 80107e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80107ec:	eba8 0303 	sub.w	r3, r8, r3
 80107f0:	f1b9 0f00 	cmp.w	r9, #0
 80107f4:	bf08      	it	eq
 80107f6:	46a9      	moveq	r9, r5
 80107f8:	2d10      	cmp	r5, #16
 80107fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80107fc:	462c      	mov	r4, r5
 80107fe:	bfa8      	it	ge
 8010800:	2410      	movge	r4, #16
 8010802:	f7ef fe9f 	bl	8000544 <__aeabi_ui2d>
 8010806:	2d09      	cmp	r5, #9
 8010808:	4682      	mov	sl, r0
 801080a:	468b      	mov	fp, r1
 801080c:	dc13      	bgt.n	8010836 <_strtod_l+0x3de>
 801080e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010810:	2b00      	cmp	r3, #0
 8010812:	f43f ae5a 	beq.w	80104ca <_strtod_l+0x72>
 8010816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010818:	dd78      	ble.n	801090c <_strtod_l+0x4b4>
 801081a:	2b16      	cmp	r3, #22
 801081c:	dc5f      	bgt.n	80108de <_strtod_l+0x486>
 801081e:	4972      	ldr	r1, [pc, #456]	@ (80109e8 <_strtod_l+0x590>)
 8010820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010828:	4652      	mov	r2, sl
 801082a:	465b      	mov	r3, fp
 801082c:	f7ef ff04 	bl	8000638 <__aeabi_dmul>
 8010830:	4682      	mov	sl, r0
 8010832:	468b      	mov	fp, r1
 8010834:	e649      	b.n	80104ca <_strtod_l+0x72>
 8010836:	4b6c      	ldr	r3, [pc, #432]	@ (80109e8 <_strtod_l+0x590>)
 8010838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801083c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010840:	f7ef fefa 	bl	8000638 <__aeabi_dmul>
 8010844:	4682      	mov	sl, r0
 8010846:	4638      	mov	r0, r7
 8010848:	468b      	mov	fp, r1
 801084a:	f7ef fe7b 	bl	8000544 <__aeabi_ui2d>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4650      	mov	r0, sl
 8010854:	4659      	mov	r1, fp
 8010856:	f7ef fd39 	bl	80002cc <__adddf3>
 801085a:	2d0f      	cmp	r5, #15
 801085c:	4682      	mov	sl, r0
 801085e:	468b      	mov	fp, r1
 8010860:	ddd5      	ble.n	801080e <_strtod_l+0x3b6>
 8010862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010864:	1b2c      	subs	r4, r5, r4
 8010866:	441c      	add	r4, r3
 8010868:	2c00      	cmp	r4, #0
 801086a:	f340 8093 	ble.w	8010994 <_strtod_l+0x53c>
 801086e:	f014 030f 	ands.w	r3, r4, #15
 8010872:	d00a      	beq.n	801088a <_strtod_l+0x432>
 8010874:	495c      	ldr	r1, [pc, #368]	@ (80109e8 <_strtod_l+0x590>)
 8010876:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801087a:	4652      	mov	r2, sl
 801087c:	465b      	mov	r3, fp
 801087e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010882:	f7ef fed9 	bl	8000638 <__aeabi_dmul>
 8010886:	4682      	mov	sl, r0
 8010888:	468b      	mov	fp, r1
 801088a:	f034 040f 	bics.w	r4, r4, #15
 801088e:	d073      	beq.n	8010978 <_strtod_l+0x520>
 8010890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010894:	dd49      	ble.n	801092a <_strtod_l+0x4d2>
 8010896:	2400      	movs	r4, #0
 8010898:	46a0      	mov	r8, r4
 801089a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801089c:	46a1      	mov	r9, r4
 801089e:	9a05      	ldr	r2, [sp, #20]
 80108a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80109f0 <_strtod_l+0x598>
 80108a4:	2322      	movs	r3, #34	@ 0x22
 80108a6:	6013      	str	r3, [r2, #0]
 80108a8:	f04f 0a00 	mov.w	sl, #0
 80108ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f43f ae0b 	beq.w	80104ca <_strtod_l+0x72>
 80108b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80108b6:	9805      	ldr	r0, [sp, #20]
 80108b8:	f002 ffb6 	bl	8013828 <_Bfree>
 80108bc:	9805      	ldr	r0, [sp, #20]
 80108be:	4649      	mov	r1, r9
 80108c0:	f002 ffb2 	bl	8013828 <_Bfree>
 80108c4:	9805      	ldr	r0, [sp, #20]
 80108c6:	4641      	mov	r1, r8
 80108c8:	f002 ffae 	bl	8013828 <_Bfree>
 80108cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108ce:	9805      	ldr	r0, [sp, #20]
 80108d0:	f002 ffaa 	bl	8013828 <_Bfree>
 80108d4:	9805      	ldr	r0, [sp, #20]
 80108d6:	4621      	mov	r1, r4
 80108d8:	f002 ffa6 	bl	8013828 <_Bfree>
 80108dc:	e5f5      	b.n	80104ca <_strtod_l+0x72>
 80108de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80108e4:	4293      	cmp	r3, r2
 80108e6:	dbbc      	blt.n	8010862 <_strtod_l+0x40a>
 80108e8:	4c3f      	ldr	r4, [pc, #252]	@ (80109e8 <_strtod_l+0x590>)
 80108ea:	f1c5 050f 	rsb	r5, r5, #15
 80108ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80108f2:	4652      	mov	r2, sl
 80108f4:	465b      	mov	r3, fp
 80108f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108fa:	f7ef fe9d 	bl	8000638 <__aeabi_dmul>
 80108fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010900:	1b5d      	subs	r5, r3, r5
 8010902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010906:	e9d4 2300 	ldrd	r2, r3, [r4]
 801090a:	e78f      	b.n	801082c <_strtod_l+0x3d4>
 801090c:	3316      	adds	r3, #22
 801090e:	dba8      	blt.n	8010862 <_strtod_l+0x40a>
 8010910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010912:	eba3 0808 	sub.w	r8, r3, r8
 8010916:	4b34      	ldr	r3, [pc, #208]	@ (80109e8 <_strtod_l+0x590>)
 8010918:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801091c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010920:	4650      	mov	r0, sl
 8010922:	4659      	mov	r1, fp
 8010924:	f7ef ffb2 	bl	800088c <__aeabi_ddiv>
 8010928:	e782      	b.n	8010830 <_strtod_l+0x3d8>
 801092a:	2300      	movs	r3, #0
 801092c:	4f2f      	ldr	r7, [pc, #188]	@ (80109ec <_strtod_l+0x594>)
 801092e:	1124      	asrs	r4, r4, #4
 8010930:	4650      	mov	r0, sl
 8010932:	4659      	mov	r1, fp
 8010934:	461e      	mov	r6, r3
 8010936:	2c01      	cmp	r4, #1
 8010938:	dc21      	bgt.n	801097e <_strtod_l+0x526>
 801093a:	b10b      	cbz	r3, 8010940 <_strtod_l+0x4e8>
 801093c:	4682      	mov	sl, r0
 801093e:	468b      	mov	fp, r1
 8010940:	492a      	ldr	r1, [pc, #168]	@ (80109ec <_strtod_l+0x594>)
 8010942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801094a:	4652      	mov	r2, sl
 801094c:	465b      	mov	r3, fp
 801094e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010952:	f7ef fe71 	bl	8000638 <__aeabi_dmul>
 8010956:	4b26      	ldr	r3, [pc, #152]	@ (80109f0 <_strtod_l+0x598>)
 8010958:	460a      	mov	r2, r1
 801095a:	400b      	ands	r3, r1
 801095c:	4925      	ldr	r1, [pc, #148]	@ (80109f4 <_strtod_l+0x59c>)
 801095e:	428b      	cmp	r3, r1
 8010960:	4682      	mov	sl, r0
 8010962:	d898      	bhi.n	8010896 <_strtod_l+0x43e>
 8010964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010968:	428b      	cmp	r3, r1
 801096a:	bf86      	itte	hi
 801096c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80109f8 <_strtod_l+0x5a0>
 8010970:	f04f 3aff 	movhi.w	sl, #4294967295
 8010974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010978:	2300      	movs	r3, #0
 801097a:	9308      	str	r3, [sp, #32]
 801097c:	e076      	b.n	8010a6c <_strtod_l+0x614>
 801097e:	07e2      	lsls	r2, r4, #31
 8010980:	d504      	bpl.n	801098c <_strtod_l+0x534>
 8010982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010986:	f7ef fe57 	bl	8000638 <__aeabi_dmul>
 801098a:	2301      	movs	r3, #1
 801098c:	3601      	adds	r6, #1
 801098e:	1064      	asrs	r4, r4, #1
 8010990:	3708      	adds	r7, #8
 8010992:	e7d0      	b.n	8010936 <_strtod_l+0x4de>
 8010994:	d0f0      	beq.n	8010978 <_strtod_l+0x520>
 8010996:	4264      	negs	r4, r4
 8010998:	f014 020f 	ands.w	r2, r4, #15
 801099c:	d00a      	beq.n	80109b4 <_strtod_l+0x55c>
 801099e:	4b12      	ldr	r3, [pc, #72]	@ (80109e8 <_strtod_l+0x590>)
 80109a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109a4:	4650      	mov	r0, sl
 80109a6:	4659      	mov	r1, fp
 80109a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ac:	f7ef ff6e 	bl	800088c <__aeabi_ddiv>
 80109b0:	4682      	mov	sl, r0
 80109b2:	468b      	mov	fp, r1
 80109b4:	1124      	asrs	r4, r4, #4
 80109b6:	d0df      	beq.n	8010978 <_strtod_l+0x520>
 80109b8:	2c1f      	cmp	r4, #31
 80109ba:	dd1f      	ble.n	80109fc <_strtod_l+0x5a4>
 80109bc:	2400      	movs	r4, #0
 80109be:	46a0      	mov	r8, r4
 80109c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80109c2:	46a1      	mov	r9, r4
 80109c4:	9a05      	ldr	r2, [sp, #20]
 80109c6:	2322      	movs	r3, #34	@ 0x22
 80109c8:	f04f 0a00 	mov.w	sl, #0
 80109cc:	f04f 0b00 	mov.w	fp, #0
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	e76b      	b.n	80108ac <_strtod_l+0x454>
 80109d4:	08014cab 	.word	0x08014cab
 80109d8:	08014ec8 	.word	0x08014ec8
 80109dc:	08014ca3 	.word	0x08014ca3
 80109e0:	08014d8a 	.word	0x08014d8a
 80109e4:	08014d86 	.word	0x08014d86
 80109e8:	08015050 	.word	0x08015050
 80109ec:	08015028 	.word	0x08015028
 80109f0:	7ff00000 	.word	0x7ff00000
 80109f4:	7ca00000 	.word	0x7ca00000
 80109f8:	7fefffff 	.word	0x7fefffff
 80109fc:	f014 0310 	ands.w	r3, r4, #16
 8010a00:	bf18      	it	ne
 8010a02:	236a      	movne	r3, #106	@ 0x6a
 8010a04:	4ea9      	ldr	r6, [pc, #676]	@ (8010cac <_strtod_l+0x854>)
 8010a06:	9308      	str	r3, [sp, #32]
 8010a08:	4650      	mov	r0, sl
 8010a0a:	4659      	mov	r1, fp
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	07e7      	lsls	r7, r4, #31
 8010a10:	d504      	bpl.n	8010a1c <_strtod_l+0x5c4>
 8010a12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a16:	f7ef fe0f 	bl	8000638 <__aeabi_dmul>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	1064      	asrs	r4, r4, #1
 8010a1e:	f106 0608 	add.w	r6, r6, #8
 8010a22:	d1f4      	bne.n	8010a0e <_strtod_l+0x5b6>
 8010a24:	b10b      	cbz	r3, 8010a2a <_strtod_l+0x5d2>
 8010a26:	4682      	mov	sl, r0
 8010a28:	468b      	mov	fp, r1
 8010a2a:	9b08      	ldr	r3, [sp, #32]
 8010a2c:	b1b3      	cbz	r3, 8010a5c <_strtod_l+0x604>
 8010a2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010a32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	4659      	mov	r1, fp
 8010a3a:	dd0f      	ble.n	8010a5c <_strtod_l+0x604>
 8010a3c:	2b1f      	cmp	r3, #31
 8010a3e:	dd56      	ble.n	8010aee <_strtod_l+0x696>
 8010a40:	2b34      	cmp	r3, #52	@ 0x34
 8010a42:	bfde      	ittt	le
 8010a44:	f04f 33ff 	movle.w	r3, #4294967295
 8010a48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010a4c:	4093      	lslle	r3, r2
 8010a4e:	f04f 0a00 	mov.w	sl, #0
 8010a52:	bfcc      	ite	gt
 8010a54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010a58:	ea03 0b01 	andle.w	fp, r3, r1
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	2300      	movs	r3, #0
 8010a60:	4650      	mov	r0, sl
 8010a62:	4659      	mov	r1, fp
 8010a64:	f7f0 f850 	bl	8000b08 <__aeabi_dcmpeq>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d1a7      	bne.n	80109bc <_strtod_l+0x564>
 8010a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010a72:	9805      	ldr	r0, [sp, #20]
 8010a74:	462b      	mov	r3, r5
 8010a76:	464a      	mov	r2, r9
 8010a78:	f002 ff3e 	bl	80138f8 <__s2b>
 8010a7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	f43f af09 	beq.w	8010896 <_strtod_l+0x43e>
 8010a84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	eba3 0308 	sub.w	r3, r3, r8
 8010a8e:	bfa8      	it	ge
 8010a90:	2300      	movge	r3, #0
 8010a92:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a94:	2400      	movs	r4, #0
 8010a96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010a9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8010a9c:	46a0      	mov	r8, r4
 8010a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010aa0:	9805      	ldr	r0, [sp, #20]
 8010aa2:	6859      	ldr	r1, [r3, #4]
 8010aa4:	f002 fe80 	bl	80137a8 <_Balloc>
 8010aa8:	4681      	mov	r9, r0
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	f43f aef7 	beq.w	801089e <_strtod_l+0x446>
 8010ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ab2:	691a      	ldr	r2, [r3, #16]
 8010ab4:	3202      	adds	r2, #2
 8010ab6:	f103 010c 	add.w	r1, r3, #12
 8010aba:	0092      	lsls	r2, r2, #2
 8010abc:	300c      	adds	r0, #12
 8010abe:	f001 fb92 	bl	80121e6 <memcpy>
 8010ac2:	ec4b ab10 	vmov	d0, sl, fp
 8010ac6:	9805      	ldr	r0, [sp, #20]
 8010ac8:	aa1c      	add	r2, sp, #112	@ 0x70
 8010aca:	a91b      	add	r1, sp, #108	@ 0x6c
 8010acc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010ad0:	f003 fa46 	bl	8013f60 <__d2b>
 8010ad4:	901a      	str	r0, [sp, #104]	@ 0x68
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	f43f aee1 	beq.w	801089e <_strtod_l+0x446>
 8010adc:	9805      	ldr	r0, [sp, #20]
 8010ade:	2101      	movs	r1, #1
 8010ae0:	f002 ffa0 	bl	8013a24 <__i2b>
 8010ae4:	4680      	mov	r8, r0
 8010ae6:	b948      	cbnz	r0, 8010afc <_strtod_l+0x6a4>
 8010ae8:	f04f 0800 	mov.w	r8, #0
 8010aec:	e6d7      	b.n	801089e <_strtod_l+0x446>
 8010aee:	f04f 32ff 	mov.w	r2, #4294967295
 8010af2:	fa02 f303 	lsl.w	r3, r2, r3
 8010af6:	ea03 0a0a 	and.w	sl, r3, sl
 8010afa:	e7af      	b.n	8010a5c <_strtod_l+0x604>
 8010afc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010afe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010b00:	2d00      	cmp	r5, #0
 8010b02:	bfab      	itete	ge
 8010b04:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010b06:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010b08:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010b0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010b0c:	bfac      	ite	ge
 8010b0e:	18ef      	addge	r7, r5, r3
 8010b10:	1b5e      	sublt	r6, r3, r5
 8010b12:	9b08      	ldr	r3, [sp, #32]
 8010b14:	1aed      	subs	r5, r5, r3
 8010b16:	4415      	add	r5, r2
 8010b18:	4b65      	ldr	r3, [pc, #404]	@ (8010cb0 <_strtod_l+0x858>)
 8010b1a:	3d01      	subs	r5, #1
 8010b1c:	429d      	cmp	r5, r3
 8010b1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010b22:	da50      	bge.n	8010bc6 <_strtod_l+0x76e>
 8010b24:	1b5b      	subs	r3, r3, r5
 8010b26:	2b1f      	cmp	r3, #31
 8010b28:	eba2 0203 	sub.w	r2, r2, r3
 8010b2c:	f04f 0101 	mov.w	r1, #1
 8010b30:	dc3d      	bgt.n	8010bae <_strtod_l+0x756>
 8010b32:	fa01 f303 	lsl.w	r3, r1, r3
 8010b36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b38:	2300      	movs	r3, #0
 8010b3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b3c:	18bd      	adds	r5, r7, r2
 8010b3e:	9b08      	ldr	r3, [sp, #32]
 8010b40:	42af      	cmp	r7, r5
 8010b42:	4416      	add	r6, r2
 8010b44:	441e      	add	r6, r3
 8010b46:	463b      	mov	r3, r7
 8010b48:	bfa8      	it	ge
 8010b4a:	462b      	movge	r3, r5
 8010b4c:	42b3      	cmp	r3, r6
 8010b4e:	bfa8      	it	ge
 8010b50:	4633      	movge	r3, r6
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	bfc2      	ittt	gt
 8010b56:	1aed      	subgt	r5, r5, r3
 8010b58:	1af6      	subgt	r6, r6, r3
 8010b5a:	1aff      	subgt	r7, r7, r3
 8010b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	dd16      	ble.n	8010b90 <_strtod_l+0x738>
 8010b62:	4641      	mov	r1, r8
 8010b64:	9805      	ldr	r0, [sp, #20]
 8010b66:	461a      	mov	r2, r3
 8010b68:	f003 f814 	bl	8013b94 <__pow5mult>
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d0ba      	beq.n	8010ae8 <_strtod_l+0x690>
 8010b72:	4601      	mov	r1, r0
 8010b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b76:	9805      	ldr	r0, [sp, #20]
 8010b78:	f002 ff6a 	bl	8013a50 <__multiply>
 8010b7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	f43f ae8d 	beq.w	801089e <_strtod_l+0x446>
 8010b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b86:	9805      	ldr	r0, [sp, #20]
 8010b88:	f002 fe4e 	bl	8013828 <_Bfree>
 8010b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b90:	2d00      	cmp	r5, #0
 8010b92:	dc1d      	bgt.n	8010bd0 <_strtod_l+0x778>
 8010b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	dd23      	ble.n	8010be2 <_strtod_l+0x78a>
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010b9e:	9805      	ldr	r0, [sp, #20]
 8010ba0:	f002 fff8 	bl	8013b94 <__pow5mult>
 8010ba4:	4681      	mov	r9, r0
 8010ba6:	b9e0      	cbnz	r0, 8010be2 <_strtod_l+0x78a>
 8010ba8:	f04f 0900 	mov.w	r9, #0
 8010bac:	e677      	b.n	801089e <_strtod_l+0x446>
 8010bae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010bb2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010bb6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010bba:	35e2      	adds	r5, #226	@ 0xe2
 8010bbc:	fa01 f305 	lsl.w	r3, r1, r5
 8010bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8010bc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010bc4:	e7ba      	b.n	8010b3c <_strtod_l+0x6e4>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8010bca:	2301      	movs	r3, #1
 8010bcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010bce:	e7b5      	b.n	8010b3c <_strtod_l+0x6e4>
 8010bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bd2:	9805      	ldr	r0, [sp, #20]
 8010bd4:	462a      	mov	r2, r5
 8010bd6:	f003 f837 	bl	8013c48 <__lshift>
 8010bda:	901a      	str	r0, [sp, #104]	@ 0x68
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d1d9      	bne.n	8010b94 <_strtod_l+0x73c>
 8010be0:	e65d      	b.n	801089e <_strtod_l+0x446>
 8010be2:	2e00      	cmp	r6, #0
 8010be4:	dd07      	ble.n	8010bf6 <_strtod_l+0x79e>
 8010be6:	4649      	mov	r1, r9
 8010be8:	9805      	ldr	r0, [sp, #20]
 8010bea:	4632      	mov	r2, r6
 8010bec:	f003 f82c 	bl	8013c48 <__lshift>
 8010bf0:	4681      	mov	r9, r0
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d0d8      	beq.n	8010ba8 <_strtod_l+0x750>
 8010bf6:	2f00      	cmp	r7, #0
 8010bf8:	dd08      	ble.n	8010c0c <_strtod_l+0x7b4>
 8010bfa:	4641      	mov	r1, r8
 8010bfc:	9805      	ldr	r0, [sp, #20]
 8010bfe:	463a      	mov	r2, r7
 8010c00:	f003 f822 	bl	8013c48 <__lshift>
 8010c04:	4680      	mov	r8, r0
 8010c06:	2800      	cmp	r0, #0
 8010c08:	f43f ae49 	beq.w	801089e <_strtod_l+0x446>
 8010c0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c0e:	9805      	ldr	r0, [sp, #20]
 8010c10:	464a      	mov	r2, r9
 8010c12:	f003 f8a1 	bl	8013d58 <__mdiff>
 8010c16:	4604      	mov	r4, r0
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	f43f ae40 	beq.w	801089e <_strtod_l+0x446>
 8010c1e:	68c3      	ldr	r3, [r0, #12]
 8010c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c22:	2300      	movs	r3, #0
 8010c24:	60c3      	str	r3, [r0, #12]
 8010c26:	4641      	mov	r1, r8
 8010c28:	f003 f87a 	bl	8013d20 <__mcmp>
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	da45      	bge.n	8010cbc <_strtod_l+0x864>
 8010c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c32:	ea53 030a 	orrs.w	r3, r3, sl
 8010c36:	d16b      	bne.n	8010d10 <_strtod_l+0x8b8>
 8010c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d167      	bne.n	8010d10 <_strtod_l+0x8b8>
 8010c40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c44:	0d1b      	lsrs	r3, r3, #20
 8010c46:	051b      	lsls	r3, r3, #20
 8010c48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c4c:	d960      	bls.n	8010d10 <_strtod_l+0x8b8>
 8010c4e:	6963      	ldr	r3, [r4, #20]
 8010c50:	b913      	cbnz	r3, 8010c58 <_strtod_l+0x800>
 8010c52:	6923      	ldr	r3, [r4, #16]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	dd5b      	ble.n	8010d10 <_strtod_l+0x8b8>
 8010c58:	4621      	mov	r1, r4
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	9805      	ldr	r0, [sp, #20]
 8010c5e:	f002 fff3 	bl	8013c48 <__lshift>
 8010c62:	4641      	mov	r1, r8
 8010c64:	4604      	mov	r4, r0
 8010c66:	f003 f85b 	bl	8013d20 <__mcmp>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	dd50      	ble.n	8010d10 <_strtod_l+0x8b8>
 8010c6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010c72:	9a08      	ldr	r2, [sp, #32]
 8010c74:	0d1b      	lsrs	r3, r3, #20
 8010c76:	051b      	lsls	r3, r3, #20
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	d06a      	beq.n	8010d52 <_strtod_l+0x8fa>
 8010c7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010c80:	d867      	bhi.n	8010d52 <_strtod_l+0x8fa>
 8010c82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010c86:	f67f ae9d 	bls.w	80109c4 <_strtod_l+0x56c>
 8010c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8010cb4 <_strtod_l+0x85c>)
 8010c8c:	4650      	mov	r0, sl
 8010c8e:	4659      	mov	r1, fp
 8010c90:	2200      	movs	r2, #0
 8010c92:	f7ef fcd1 	bl	8000638 <__aeabi_dmul>
 8010c96:	4b08      	ldr	r3, [pc, #32]	@ (8010cb8 <_strtod_l+0x860>)
 8010c98:	400b      	ands	r3, r1
 8010c9a:	4682      	mov	sl, r0
 8010c9c:	468b      	mov	fp, r1
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f47f ae08 	bne.w	80108b4 <_strtod_l+0x45c>
 8010ca4:	9a05      	ldr	r2, [sp, #20]
 8010ca6:	2322      	movs	r3, #34	@ 0x22
 8010ca8:	6013      	str	r3, [r2, #0]
 8010caa:	e603      	b.n	80108b4 <_strtod_l+0x45c>
 8010cac:	08014ef0 	.word	0x08014ef0
 8010cb0:	fffffc02 	.word	0xfffffc02
 8010cb4:	39500000 	.word	0x39500000
 8010cb8:	7ff00000 	.word	0x7ff00000
 8010cbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010cc0:	d165      	bne.n	8010d8e <_strtod_l+0x936>
 8010cc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cc8:	b35a      	cbz	r2, 8010d22 <_strtod_l+0x8ca>
 8010cca:	4a9f      	ldr	r2, [pc, #636]	@ (8010f48 <_strtod_l+0xaf0>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d12b      	bne.n	8010d28 <_strtod_l+0x8d0>
 8010cd0:	9b08      	ldr	r3, [sp, #32]
 8010cd2:	4651      	mov	r1, sl
 8010cd4:	b303      	cbz	r3, 8010d18 <_strtod_l+0x8c0>
 8010cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8010f4c <_strtod_l+0xaf4>)
 8010cd8:	465a      	mov	r2, fp
 8010cda:	4013      	ands	r3, r2
 8010cdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce4:	d81b      	bhi.n	8010d1e <_strtod_l+0x8c6>
 8010ce6:	0d1b      	lsrs	r3, r3, #20
 8010ce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010cec:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf0:	4299      	cmp	r1, r3
 8010cf2:	d119      	bne.n	8010d28 <_strtod_l+0x8d0>
 8010cf4:	4b96      	ldr	r3, [pc, #600]	@ (8010f50 <_strtod_l+0xaf8>)
 8010cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d102      	bne.n	8010d02 <_strtod_l+0x8aa>
 8010cfc:	3101      	adds	r1, #1
 8010cfe:	f43f adce 	beq.w	801089e <_strtod_l+0x446>
 8010d02:	4b92      	ldr	r3, [pc, #584]	@ (8010f4c <_strtod_l+0xaf4>)
 8010d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d06:	401a      	ands	r2, r3
 8010d08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010d0c:	f04f 0a00 	mov.w	sl, #0
 8010d10:	9b08      	ldr	r3, [sp, #32]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1b9      	bne.n	8010c8a <_strtod_l+0x832>
 8010d16:	e5cd      	b.n	80108b4 <_strtod_l+0x45c>
 8010d18:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1c:	e7e8      	b.n	8010cf0 <_strtod_l+0x898>
 8010d1e:	4613      	mov	r3, r2
 8010d20:	e7e6      	b.n	8010cf0 <_strtod_l+0x898>
 8010d22:	ea53 030a 	orrs.w	r3, r3, sl
 8010d26:	d0a2      	beq.n	8010c6e <_strtod_l+0x816>
 8010d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d2a:	b1db      	cbz	r3, 8010d64 <_strtod_l+0x90c>
 8010d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d2e:	4213      	tst	r3, r2
 8010d30:	d0ee      	beq.n	8010d10 <_strtod_l+0x8b8>
 8010d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d34:	9a08      	ldr	r2, [sp, #32]
 8010d36:	4650      	mov	r0, sl
 8010d38:	4659      	mov	r1, fp
 8010d3a:	b1bb      	cbz	r3, 8010d6c <_strtod_l+0x914>
 8010d3c:	f7ff fb6d 	bl	801041a <sulp>
 8010d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d44:	ec53 2b10 	vmov	r2, r3, d0
 8010d48:	f7ef fac0 	bl	80002cc <__adddf3>
 8010d4c:	4682      	mov	sl, r0
 8010d4e:	468b      	mov	fp, r1
 8010d50:	e7de      	b.n	8010d10 <_strtod_l+0x8b8>
 8010d52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010d5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8010d62:	e7d5      	b.n	8010d10 <_strtod_l+0x8b8>
 8010d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d66:	ea13 0f0a 	tst.w	r3, sl
 8010d6a:	e7e1      	b.n	8010d30 <_strtod_l+0x8d8>
 8010d6c:	f7ff fb55 	bl	801041a <sulp>
 8010d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d74:	ec53 2b10 	vmov	r2, r3, d0
 8010d78:	f7ef faa6 	bl	80002c8 <__aeabi_dsub>
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	2300      	movs	r3, #0
 8010d80:	4682      	mov	sl, r0
 8010d82:	468b      	mov	fp, r1
 8010d84:	f7ef fec0 	bl	8000b08 <__aeabi_dcmpeq>
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	d0c1      	beq.n	8010d10 <_strtod_l+0x8b8>
 8010d8c:	e61a      	b.n	80109c4 <_strtod_l+0x56c>
 8010d8e:	4641      	mov	r1, r8
 8010d90:	4620      	mov	r0, r4
 8010d92:	f003 f93d 	bl	8014010 <__ratio>
 8010d96:	ec57 6b10 	vmov	r6, r7, d0
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010da0:	4630      	mov	r0, r6
 8010da2:	4639      	mov	r1, r7
 8010da4:	f7ef fec4 	bl	8000b30 <__aeabi_dcmple>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d06f      	beq.n	8010e8c <_strtod_l+0xa34>
 8010dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d17a      	bne.n	8010ea8 <_strtod_l+0xa50>
 8010db2:	f1ba 0f00 	cmp.w	sl, #0
 8010db6:	d158      	bne.n	8010e6a <_strtod_l+0xa12>
 8010db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d15a      	bne.n	8010e78 <_strtod_l+0xa20>
 8010dc2:	4b64      	ldr	r3, [pc, #400]	@ (8010f54 <_strtod_l+0xafc>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	4639      	mov	r1, r7
 8010dca:	f7ef fea7 	bl	8000b1c <__aeabi_dcmplt>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d159      	bne.n	8010e86 <_strtod_l+0xa2e>
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	4b60      	ldr	r3, [pc, #384]	@ (8010f58 <_strtod_l+0xb00>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f7ef fc2d 	bl	8000638 <__aeabi_dmul>
 8010dde:	4606      	mov	r6, r0
 8010de0:	460f      	mov	r7, r1
 8010de2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010de6:	9606      	str	r6, [sp, #24]
 8010de8:	9307      	str	r3, [sp, #28]
 8010dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010dee:	4d57      	ldr	r5, [pc, #348]	@ (8010f4c <_strtod_l+0xaf4>)
 8010df0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010df6:	401d      	ands	r5, r3
 8010df8:	4b58      	ldr	r3, [pc, #352]	@ (8010f5c <_strtod_l+0xb04>)
 8010dfa:	429d      	cmp	r5, r3
 8010dfc:	f040 80b2 	bne.w	8010f64 <_strtod_l+0xb0c>
 8010e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010e06:	ec4b ab10 	vmov	d0, sl, fp
 8010e0a:	f003 f839 	bl	8013e80 <__ulp>
 8010e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e12:	ec51 0b10 	vmov	r0, r1, d0
 8010e16:	f7ef fc0f 	bl	8000638 <__aeabi_dmul>
 8010e1a:	4652      	mov	r2, sl
 8010e1c:	465b      	mov	r3, fp
 8010e1e:	f7ef fa55 	bl	80002cc <__adddf3>
 8010e22:	460b      	mov	r3, r1
 8010e24:	4949      	ldr	r1, [pc, #292]	@ (8010f4c <_strtod_l+0xaf4>)
 8010e26:	4a4e      	ldr	r2, [pc, #312]	@ (8010f60 <_strtod_l+0xb08>)
 8010e28:	4019      	ands	r1, r3
 8010e2a:	4291      	cmp	r1, r2
 8010e2c:	4682      	mov	sl, r0
 8010e2e:	d942      	bls.n	8010eb6 <_strtod_l+0xa5e>
 8010e30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e32:	4b47      	ldr	r3, [pc, #284]	@ (8010f50 <_strtod_l+0xaf8>)
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d103      	bne.n	8010e40 <_strtod_l+0x9e8>
 8010e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	f43f ad2f 	beq.w	801089e <_strtod_l+0x446>
 8010e40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010f50 <_strtod_l+0xaf8>
 8010e44:	f04f 3aff 	mov.w	sl, #4294967295
 8010e48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010e4a:	9805      	ldr	r0, [sp, #20]
 8010e4c:	f002 fcec 	bl	8013828 <_Bfree>
 8010e50:	9805      	ldr	r0, [sp, #20]
 8010e52:	4649      	mov	r1, r9
 8010e54:	f002 fce8 	bl	8013828 <_Bfree>
 8010e58:	9805      	ldr	r0, [sp, #20]
 8010e5a:	4641      	mov	r1, r8
 8010e5c:	f002 fce4 	bl	8013828 <_Bfree>
 8010e60:	9805      	ldr	r0, [sp, #20]
 8010e62:	4621      	mov	r1, r4
 8010e64:	f002 fce0 	bl	8013828 <_Bfree>
 8010e68:	e619      	b.n	8010a9e <_strtod_l+0x646>
 8010e6a:	f1ba 0f01 	cmp.w	sl, #1
 8010e6e:	d103      	bne.n	8010e78 <_strtod_l+0xa20>
 8010e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f43f ada6 	beq.w	80109c4 <_strtod_l+0x56c>
 8010e78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010f28 <_strtod_l+0xad0>
 8010e7c:	4f35      	ldr	r7, [pc, #212]	@ (8010f54 <_strtod_l+0xafc>)
 8010e7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010e82:	2600      	movs	r6, #0
 8010e84:	e7b1      	b.n	8010dea <_strtod_l+0x992>
 8010e86:	4f34      	ldr	r7, [pc, #208]	@ (8010f58 <_strtod_l+0xb00>)
 8010e88:	2600      	movs	r6, #0
 8010e8a:	e7aa      	b.n	8010de2 <_strtod_l+0x98a>
 8010e8c:	4b32      	ldr	r3, [pc, #200]	@ (8010f58 <_strtod_l+0xb00>)
 8010e8e:	4630      	mov	r0, r6
 8010e90:	4639      	mov	r1, r7
 8010e92:	2200      	movs	r2, #0
 8010e94:	f7ef fbd0 	bl	8000638 <__aeabi_dmul>
 8010e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460f      	mov	r7, r1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d09f      	beq.n	8010de2 <_strtod_l+0x98a>
 8010ea2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010ea6:	e7a0      	b.n	8010dea <_strtod_l+0x992>
 8010ea8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010f30 <_strtod_l+0xad8>
 8010eac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010eb0:	ec57 6b17 	vmov	r6, r7, d7
 8010eb4:	e799      	b.n	8010dea <_strtod_l+0x992>
 8010eb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010eba:	9b08      	ldr	r3, [sp, #32]
 8010ebc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1c1      	bne.n	8010e48 <_strtod_l+0x9f0>
 8010ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010ec8:	0d1b      	lsrs	r3, r3, #20
 8010eca:	051b      	lsls	r3, r3, #20
 8010ecc:	429d      	cmp	r5, r3
 8010ece:	d1bb      	bne.n	8010e48 <_strtod_l+0x9f0>
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	f7ef ff10 	bl	8000cf8 <__aeabi_d2lz>
 8010ed8:	f7ef fb80 	bl	80005dc <__aeabi_l2d>
 8010edc:	4602      	mov	r2, r0
 8010ede:	460b      	mov	r3, r1
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	f7ef f9f0 	bl	80002c8 <__aeabi_dsub>
 8010ee8:	460b      	mov	r3, r1
 8010eea:	4602      	mov	r2, r0
 8010eec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010ef0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ef6:	ea46 060a 	orr.w	r6, r6, sl
 8010efa:	431e      	orrs	r6, r3
 8010efc:	d06f      	beq.n	8010fde <_strtod_l+0xb86>
 8010efe:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f38 <_strtod_l+0xae0>)
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	f7ef fe0a 	bl	8000b1c <__aeabi_dcmplt>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	f47f acd3 	bne.w	80108b4 <_strtod_l+0x45c>
 8010f0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010f40 <_strtod_l+0xae8>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f18:	f7ef fe1e 	bl	8000b58 <__aeabi_dcmpgt>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d093      	beq.n	8010e48 <_strtod_l+0x9f0>
 8010f20:	e4c8      	b.n	80108b4 <_strtod_l+0x45c>
 8010f22:	bf00      	nop
 8010f24:	f3af 8000 	nop.w
 8010f28:	00000000 	.word	0x00000000
 8010f2c:	bff00000 	.word	0xbff00000
 8010f30:	00000000 	.word	0x00000000
 8010f34:	3ff00000 	.word	0x3ff00000
 8010f38:	94a03595 	.word	0x94a03595
 8010f3c:	3fdfffff 	.word	0x3fdfffff
 8010f40:	35afe535 	.word	0x35afe535
 8010f44:	3fe00000 	.word	0x3fe00000
 8010f48:	000fffff 	.word	0x000fffff
 8010f4c:	7ff00000 	.word	0x7ff00000
 8010f50:	7fefffff 	.word	0x7fefffff
 8010f54:	3ff00000 	.word	0x3ff00000
 8010f58:	3fe00000 	.word	0x3fe00000
 8010f5c:	7fe00000 	.word	0x7fe00000
 8010f60:	7c9fffff 	.word	0x7c9fffff
 8010f64:	9b08      	ldr	r3, [sp, #32]
 8010f66:	b323      	cbz	r3, 8010fb2 <_strtod_l+0xb5a>
 8010f68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010f6c:	d821      	bhi.n	8010fb2 <_strtod_l+0xb5a>
 8010f6e:	a328      	add	r3, pc, #160	@ (adr r3, 8011010 <_strtod_l+0xbb8>)
 8010f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f74:	4630      	mov	r0, r6
 8010f76:	4639      	mov	r1, r7
 8010f78:	f7ef fdda 	bl	8000b30 <__aeabi_dcmple>
 8010f7c:	b1a0      	cbz	r0, 8010fa8 <_strtod_l+0xb50>
 8010f7e:	4639      	mov	r1, r7
 8010f80:	4630      	mov	r0, r6
 8010f82:	f7ef fe31 	bl	8000be8 <__aeabi_d2uiz>
 8010f86:	2801      	cmp	r0, #1
 8010f88:	bf38      	it	cc
 8010f8a:	2001      	movcc	r0, #1
 8010f8c:	f7ef fada 	bl	8000544 <__aeabi_ui2d>
 8010f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f92:	4606      	mov	r6, r0
 8010f94:	460f      	mov	r7, r1
 8010f96:	b9fb      	cbnz	r3, 8010fd8 <_strtod_l+0xb80>
 8010f98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8010f9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010fa0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010fa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010fa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010faa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010fae:	1b5b      	subs	r3, r3, r5
 8010fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8010fb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010fb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010fba:	f002 ff61 	bl	8013e80 <__ulp>
 8010fbe:	4650      	mov	r0, sl
 8010fc0:	ec53 2b10 	vmov	r2, r3, d0
 8010fc4:	4659      	mov	r1, fp
 8010fc6:	f7ef fb37 	bl	8000638 <__aeabi_dmul>
 8010fca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010fce:	f7ef f97d 	bl	80002cc <__adddf3>
 8010fd2:	4682      	mov	sl, r0
 8010fd4:	468b      	mov	fp, r1
 8010fd6:	e770      	b.n	8010eba <_strtod_l+0xa62>
 8010fd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010fdc:	e7e0      	b.n	8010fa0 <_strtod_l+0xb48>
 8010fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8011018 <_strtod_l+0xbc0>)
 8010fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe4:	f7ef fd9a 	bl	8000b1c <__aeabi_dcmplt>
 8010fe8:	e798      	b.n	8010f1c <_strtod_l+0xac4>
 8010fea:	2300      	movs	r3, #0
 8010fec:	930e      	str	r3, [sp, #56]	@ 0x38
 8010fee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ff2:	6013      	str	r3, [r2, #0]
 8010ff4:	f7ff ba6d 	b.w	80104d2 <_strtod_l+0x7a>
 8010ff8:	2a65      	cmp	r2, #101	@ 0x65
 8010ffa:	f43f ab68 	beq.w	80106ce <_strtod_l+0x276>
 8010ffe:	2a45      	cmp	r2, #69	@ 0x45
 8011000:	f43f ab65 	beq.w	80106ce <_strtod_l+0x276>
 8011004:	2301      	movs	r3, #1
 8011006:	f7ff bba0 	b.w	801074a <_strtod_l+0x2f2>
 801100a:	bf00      	nop
 801100c:	f3af 8000 	nop.w
 8011010:	ffc00000 	.word	0xffc00000
 8011014:	41dfffff 	.word	0x41dfffff
 8011018:	94a03595 	.word	0x94a03595
 801101c:	3fcfffff 	.word	0x3fcfffff

08011020 <strtod>:
 8011020:	460a      	mov	r2, r1
 8011022:	4601      	mov	r1, r0
 8011024:	4802      	ldr	r0, [pc, #8]	@ (8011030 <strtod+0x10>)
 8011026:	4b03      	ldr	r3, [pc, #12]	@ (8011034 <strtod+0x14>)
 8011028:	6800      	ldr	r0, [r0, #0]
 801102a:	f7ff ba15 	b.w	8010458 <_strtod_l>
 801102e:	bf00      	nop
 8011030:	2000018c 	.word	0x2000018c
 8011034:	20000020 	.word	0x20000020

08011038 <strtof>:
 8011038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801103c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80110fc <strtof+0xc4>
 8011040:	4b29      	ldr	r3, [pc, #164]	@ (80110e8 <strtof+0xb0>)
 8011042:	460a      	mov	r2, r1
 8011044:	ed2d 8b02 	vpush	{d8}
 8011048:	4601      	mov	r1, r0
 801104a:	f8d8 0000 	ldr.w	r0, [r8]
 801104e:	f7ff fa03 	bl	8010458 <_strtod_l>
 8011052:	ec55 4b10 	vmov	r4, r5, d0
 8011056:	4622      	mov	r2, r4
 8011058:	462b      	mov	r3, r5
 801105a:	4620      	mov	r0, r4
 801105c:	4629      	mov	r1, r5
 801105e:	f7ef fd85 	bl	8000b6c <__aeabi_dcmpun>
 8011062:	b190      	cbz	r0, 801108a <strtof+0x52>
 8011064:	2d00      	cmp	r5, #0
 8011066:	4821      	ldr	r0, [pc, #132]	@ (80110ec <strtof+0xb4>)
 8011068:	da09      	bge.n	801107e <strtof+0x46>
 801106a:	f001 f8d5 	bl	8012218 <nanf>
 801106e:	eeb1 8a40 	vneg.f32	s16, s0
 8011072:	eeb0 0a48 	vmov.f32	s0, s16
 8011076:	ecbd 8b02 	vpop	{d8}
 801107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801107e:	ecbd 8b02 	vpop	{d8}
 8011082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011086:	f001 b8c7 	b.w	8012218 <nanf>
 801108a:	4620      	mov	r0, r4
 801108c:	4629      	mov	r1, r5
 801108e:	f7ef fdcb 	bl	8000c28 <__aeabi_d2f>
 8011092:	ee08 0a10 	vmov	s16, r0
 8011096:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80110f0 <strtof+0xb8>
 801109a:	eeb0 7ac8 	vabs.f32	s14, s16
 801109e:	eeb4 7a67 	vcmp.f32	s14, s15
 80110a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a6:	dd11      	ble.n	80110cc <strtof+0x94>
 80110a8:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80110ac:	4b11      	ldr	r3, [pc, #68]	@ (80110f4 <strtof+0xbc>)
 80110ae:	f04f 32ff 	mov.w	r2, #4294967295
 80110b2:	4620      	mov	r0, r4
 80110b4:	4639      	mov	r1, r7
 80110b6:	f7ef fd59 	bl	8000b6c <__aeabi_dcmpun>
 80110ba:	b980      	cbnz	r0, 80110de <strtof+0xa6>
 80110bc:	4b0d      	ldr	r3, [pc, #52]	@ (80110f4 <strtof+0xbc>)
 80110be:	f04f 32ff 	mov.w	r2, #4294967295
 80110c2:	4620      	mov	r0, r4
 80110c4:	4639      	mov	r1, r7
 80110c6:	f7ef fd33 	bl	8000b30 <__aeabi_dcmple>
 80110ca:	b940      	cbnz	r0, 80110de <strtof+0xa6>
 80110cc:	ee18 3a10 	vmov	r3, s16
 80110d0:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80110d4:	d1cd      	bne.n	8011072 <strtof+0x3a>
 80110d6:	4b08      	ldr	r3, [pc, #32]	@ (80110f8 <strtof+0xc0>)
 80110d8:	402b      	ands	r3, r5
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d0c9      	beq.n	8011072 <strtof+0x3a>
 80110de:	f8d8 3000 	ldr.w	r3, [r8]
 80110e2:	2222      	movs	r2, #34	@ 0x22
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	e7c4      	b.n	8011072 <strtof+0x3a>
 80110e8:	20000020 	.word	0x20000020
 80110ec:	08014d86 	.word	0x08014d86
 80110f0:	7f7fffff 	.word	0x7f7fffff
 80110f4:	7fefffff 	.word	0x7fefffff
 80110f8:	7ff00000 	.word	0x7ff00000
 80110fc:	2000018c 	.word	0x2000018c

08011100 <_strtol_l.isra.0>:
 8011100:	2b24      	cmp	r3, #36	@ 0x24
 8011102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011106:	4686      	mov	lr, r0
 8011108:	4690      	mov	r8, r2
 801110a:	d801      	bhi.n	8011110 <_strtol_l.isra.0+0x10>
 801110c:	2b01      	cmp	r3, #1
 801110e:	d106      	bne.n	801111e <_strtol_l.isra.0+0x1e>
 8011110:	f001 f83c 	bl	801218c <__errno>
 8011114:	2316      	movs	r3, #22
 8011116:	6003      	str	r3, [r0, #0]
 8011118:	2000      	movs	r0, #0
 801111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801111e:	4834      	ldr	r0, [pc, #208]	@ (80111f0 <_strtol_l.isra.0+0xf0>)
 8011120:	460d      	mov	r5, r1
 8011122:	462a      	mov	r2, r5
 8011124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011128:	5d06      	ldrb	r6, [r0, r4]
 801112a:	f016 0608 	ands.w	r6, r6, #8
 801112e:	d1f8      	bne.n	8011122 <_strtol_l.isra.0+0x22>
 8011130:	2c2d      	cmp	r4, #45	@ 0x2d
 8011132:	d110      	bne.n	8011156 <_strtol_l.isra.0+0x56>
 8011134:	782c      	ldrb	r4, [r5, #0]
 8011136:	2601      	movs	r6, #1
 8011138:	1c95      	adds	r5, r2, #2
 801113a:	f033 0210 	bics.w	r2, r3, #16
 801113e:	d115      	bne.n	801116c <_strtol_l.isra.0+0x6c>
 8011140:	2c30      	cmp	r4, #48	@ 0x30
 8011142:	d10d      	bne.n	8011160 <_strtol_l.isra.0+0x60>
 8011144:	782a      	ldrb	r2, [r5, #0]
 8011146:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801114a:	2a58      	cmp	r2, #88	@ 0x58
 801114c:	d108      	bne.n	8011160 <_strtol_l.isra.0+0x60>
 801114e:	786c      	ldrb	r4, [r5, #1]
 8011150:	3502      	adds	r5, #2
 8011152:	2310      	movs	r3, #16
 8011154:	e00a      	b.n	801116c <_strtol_l.isra.0+0x6c>
 8011156:	2c2b      	cmp	r4, #43	@ 0x2b
 8011158:	bf04      	itt	eq
 801115a:	782c      	ldrbeq	r4, [r5, #0]
 801115c:	1c95      	addeq	r5, r2, #2
 801115e:	e7ec      	b.n	801113a <_strtol_l.isra.0+0x3a>
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1f6      	bne.n	8011152 <_strtol_l.isra.0+0x52>
 8011164:	2c30      	cmp	r4, #48	@ 0x30
 8011166:	bf14      	ite	ne
 8011168:	230a      	movne	r3, #10
 801116a:	2308      	moveq	r3, #8
 801116c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011170:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011174:	2200      	movs	r2, #0
 8011176:	fbbc f9f3 	udiv	r9, ip, r3
 801117a:	4610      	mov	r0, r2
 801117c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011180:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011184:	2f09      	cmp	r7, #9
 8011186:	d80f      	bhi.n	80111a8 <_strtol_l.isra.0+0xa8>
 8011188:	463c      	mov	r4, r7
 801118a:	42a3      	cmp	r3, r4
 801118c:	dd1b      	ble.n	80111c6 <_strtol_l.isra.0+0xc6>
 801118e:	1c57      	adds	r7, r2, #1
 8011190:	d007      	beq.n	80111a2 <_strtol_l.isra.0+0xa2>
 8011192:	4581      	cmp	r9, r0
 8011194:	d314      	bcc.n	80111c0 <_strtol_l.isra.0+0xc0>
 8011196:	d101      	bne.n	801119c <_strtol_l.isra.0+0x9c>
 8011198:	45a2      	cmp	sl, r4
 801119a:	db11      	blt.n	80111c0 <_strtol_l.isra.0+0xc0>
 801119c:	fb00 4003 	mla	r0, r0, r3, r4
 80111a0:	2201      	movs	r2, #1
 80111a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111a6:	e7eb      	b.n	8011180 <_strtol_l.isra.0+0x80>
 80111a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80111ac:	2f19      	cmp	r7, #25
 80111ae:	d801      	bhi.n	80111b4 <_strtol_l.isra.0+0xb4>
 80111b0:	3c37      	subs	r4, #55	@ 0x37
 80111b2:	e7ea      	b.n	801118a <_strtol_l.isra.0+0x8a>
 80111b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80111b8:	2f19      	cmp	r7, #25
 80111ba:	d804      	bhi.n	80111c6 <_strtol_l.isra.0+0xc6>
 80111bc:	3c57      	subs	r4, #87	@ 0x57
 80111be:	e7e4      	b.n	801118a <_strtol_l.isra.0+0x8a>
 80111c0:	f04f 32ff 	mov.w	r2, #4294967295
 80111c4:	e7ed      	b.n	80111a2 <_strtol_l.isra.0+0xa2>
 80111c6:	1c53      	adds	r3, r2, #1
 80111c8:	d108      	bne.n	80111dc <_strtol_l.isra.0+0xdc>
 80111ca:	2322      	movs	r3, #34	@ 0x22
 80111cc:	f8ce 3000 	str.w	r3, [lr]
 80111d0:	4660      	mov	r0, ip
 80111d2:	f1b8 0f00 	cmp.w	r8, #0
 80111d6:	d0a0      	beq.n	801111a <_strtol_l.isra.0+0x1a>
 80111d8:	1e69      	subs	r1, r5, #1
 80111da:	e006      	b.n	80111ea <_strtol_l.isra.0+0xea>
 80111dc:	b106      	cbz	r6, 80111e0 <_strtol_l.isra.0+0xe0>
 80111de:	4240      	negs	r0, r0
 80111e0:	f1b8 0f00 	cmp.w	r8, #0
 80111e4:	d099      	beq.n	801111a <_strtol_l.isra.0+0x1a>
 80111e6:	2a00      	cmp	r2, #0
 80111e8:	d1f6      	bne.n	80111d8 <_strtol_l.isra.0+0xd8>
 80111ea:	f8c8 1000 	str.w	r1, [r8]
 80111ee:	e794      	b.n	801111a <_strtol_l.isra.0+0x1a>
 80111f0:	08014f19 	.word	0x08014f19

080111f4 <strtol>:
 80111f4:	4613      	mov	r3, r2
 80111f6:	460a      	mov	r2, r1
 80111f8:	4601      	mov	r1, r0
 80111fa:	4802      	ldr	r0, [pc, #8]	@ (8011204 <strtol+0x10>)
 80111fc:	6800      	ldr	r0, [r0, #0]
 80111fe:	f7ff bf7f 	b.w	8011100 <_strtol_l.isra.0>
 8011202:	bf00      	nop
 8011204:	2000018c 	.word	0x2000018c

08011208 <__cvt>:
 8011208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801120c:	ec57 6b10 	vmov	r6, r7, d0
 8011210:	2f00      	cmp	r7, #0
 8011212:	460c      	mov	r4, r1
 8011214:	4619      	mov	r1, r3
 8011216:	463b      	mov	r3, r7
 8011218:	bfbb      	ittet	lt
 801121a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801121e:	461f      	movlt	r7, r3
 8011220:	2300      	movge	r3, #0
 8011222:	232d      	movlt	r3, #45	@ 0x2d
 8011224:	700b      	strb	r3, [r1, #0]
 8011226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011228:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801122c:	4691      	mov	r9, r2
 801122e:	f023 0820 	bic.w	r8, r3, #32
 8011232:	bfbc      	itt	lt
 8011234:	4632      	movlt	r2, r6
 8011236:	4616      	movlt	r6, r2
 8011238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801123c:	d005      	beq.n	801124a <__cvt+0x42>
 801123e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011242:	d100      	bne.n	8011246 <__cvt+0x3e>
 8011244:	3401      	adds	r4, #1
 8011246:	2102      	movs	r1, #2
 8011248:	e000      	b.n	801124c <__cvt+0x44>
 801124a:	2103      	movs	r1, #3
 801124c:	ab03      	add	r3, sp, #12
 801124e:	9301      	str	r3, [sp, #4]
 8011250:	ab02      	add	r3, sp, #8
 8011252:	9300      	str	r3, [sp, #0]
 8011254:	ec47 6b10 	vmov	d0, r6, r7
 8011258:	4653      	mov	r3, sl
 801125a:	4622      	mov	r2, r4
 801125c:	f001 f888 	bl	8012370 <_dtoa_r>
 8011260:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011264:	4605      	mov	r5, r0
 8011266:	d119      	bne.n	801129c <__cvt+0x94>
 8011268:	f019 0f01 	tst.w	r9, #1
 801126c:	d00e      	beq.n	801128c <__cvt+0x84>
 801126e:	eb00 0904 	add.w	r9, r0, r4
 8011272:	2200      	movs	r2, #0
 8011274:	2300      	movs	r3, #0
 8011276:	4630      	mov	r0, r6
 8011278:	4639      	mov	r1, r7
 801127a:	f7ef fc45 	bl	8000b08 <__aeabi_dcmpeq>
 801127e:	b108      	cbz	r0, 8011284 <__cvt+0x7c>
 8011280:	f8cd 900c 	str.w	r9, [sp, #12]
 8011284:	2230      	movs	r2, #48	@ 0x30
 8011286:	9b03      	ldr	r3, [sp, #12]
 8011288:	454b      	cmp	r3, r9
 801128a:	d31e      	bcc.n	80112ca <__cvt+0xc2>
 801128c:	9b03      	ldr	r3, [sp, #12]
 801128e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011290:	1b5b      	subs	r3, r3, r5
 8011292:	4628      	mov	r0, r5
 8011294:	6013      	str	r3, [r2, #0]
 8011296:	b004      	add	sp, #16
 8011298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80112a0:	eb00 0904 	add.w	r9, r0, r4
 80112a4:	d1e5      	bne.n	8011272 <__cvt+0x6a>
 80112a6:	7803      	ldrb	r3, [r0, #0]
 80112a8:	2b30      	cmp	r3, #48	@ 0x30
 80112aa:	d10a      	bne.n	80112c2 <__cvt+0xba>
 80112ac:	2200      	movs	r2, #0
 80112ae:	2300      	movs	r3, #0
 80112b0:	4630      	mov	r0, r6
 80112b2:	4639      	mov	r1, r7
 80112b4:	f7ef fc28 	bl	8000b08 <__aeabi_dcmpeq>
 80112b8:	b918      	cbnz	r0, 80112c2 <__cvt+0xba>
 80112ba:	f1c4 0401 	rsb	r4, r4, #1
 80112be:	f8ca 4000 	str.w	r4, [sl]
 80112c2:	f8da 3000 	ldr.w	r3, [sl]
 80112c6:	4499      	add	r9, r3
 80112c8:	e7d3      	b.n	8011272 <__cvt+0x6a>
 80112ca:	1c59      	adds	r1, r3, #1
 80112cc:	9103      	str	r1, [sp, #12]
 80112ce:	701a      	strb	r2, [r3, #0]
 80112d0:	e7d9      	b.n	8011286 <__cvt+0x7e>

080112d2 <__exponent>:
 80112d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112d4:	2900      	cmp	r1, #0
 80112d6:	bfba      	itte	lt
 80112d8:	4249      	neglt	r1, r1
 80112da:	232d      	movlt	r3, #45	@ 0x2d
 80112dc:	232b      	movge	r3, #43	@ 0x2b
 80112de:	2909      	cmp	r1, #9
 80112e0:	7002      	strb	r2, [r0, #0]
 80112e2:	7043      	strb	r3, [r0, #1]
 80112e4:	dd29      	ble.n	801133a <__exponent+0x68>
 80112e6:	f10d 0307 	add.w	r3, sp, #7
 80112ea:	461d      	mov	r5, r3
 80112ec:	270a      	movs	r7, #10
 80112ee:	461a      	mov	r2, r3
 80112f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80112f4:	fb07 1416 	mls	r4, r7, r6, r1
 80112f8:	3430      	adds	r4, #48	@ 0x30
 80112fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80112fe:	460c      	mov	r4, r1
 8011300:	2c63      	cmp	r4, #99	@ 0x63
 8011302:	f103 33ff 	add.w	r3, r3, #4294967295
 8011306:	4631      	mov	r1, r6
 8011308:	dcf1      	bgt.n	80112ee <__exponent+0x1c>
 801130a:	3130      	adds	r1, #48	@ 0x30
 801130c:	1e94      	subs	r4, r2, #2
 801130e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011312:	1c41      	adds	r1, r0, #1
 8011314:	4623      	mov	r3, r4
 8011316:	42ab      	cmp	r3, r5
 8011318:	d30a      	bcc.n	8011330 <__exponent+0x5e>
 801131a:	f10d 0309 	add.w	r3, sp, #9
 801131e:	1a9b      	subs	r3, r3, r2
 8011320:	42ac      	cmp	r4, r5
 8011322:	bf88      	it	hi
 8011324:	2300      	movhi	r3, #0
 8011326:	3302      	adds	r3, #2
 8011328:	4403      	add	r3, r0
 801132a:	1a18      	subs	r0, r3, r0
 801132c:	b003      	add	sp, #12
 801132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011330:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011334:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011338:	e7ed      	b.n	8011316 <__exponent+0x44>
 801133a:	2330      	movs	r3, #48	@ 0x30
 801133c:	3130      	adds	r1, #48	@ 0x30
 801133e:	7083      	strb	r3, [r0, #2]
 8011340:	70c1      	strb	r1, [r0, #3]
 8011342:	1d03      	adds	r3, r0, #4
 8011344:	e7f1      	b.n	801132a <__exponent+0x58>
	...

08011348 <_printf_float>:
 8011348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801134c:	b08d      	sub	sp, #52	@ 0x34
 801134e:	460c      	mov	r4, r1
 8011350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011354:	4616      	mov	r6, r2
 8011356:	461f      	mov	r7, r3
 8011358:	4605      	mov	r5, r0
 801135a:	f000 fe6f 	bl	801203c <_localeconv_r>
 801135e:	6803      	ldr	r3, [r0, #0]
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	4618      	mov	r0, r3
 8011364:	f7ee ffa4 	bl	80002b0 <strlen>
 8011368:	2300      	movs	r3, #0
 801136a:	930a      	str	r3, [sp, #40]	@ 0x28
 801136c:	f8d8 3000 	ldr.w	r3, [r8]
 8011370:	9005      	str	r0, [sp, #20]
 8011372:	3307      	adds	r3, #7
 8011374:	f023 0307 	bic.w	r3, r3, #7
 8011378:	f103 0208 	add.w	r2, r3, #8
 801137c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011380:	f8d4 b000 	ldr.w	fp, [r4]
 8011384:	f8c8 2000 	str.w	r2, [r8]
 8011388:	e9d3 8900 	ldrd	r8, r9, [r3]
 801138c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011390:	9307      	str	r3, [sp, #28]
 8011392:	f8cd 8018 	str.w	r8, [sp, #24]
 8011396:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801139a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801139e:	4b9c      	ldr	r3, [pc, #624]	@ (8011610 <_printf_float+0x2c8>)
 80113a0:	f04f 32ff 	mov.w	r2, #4294967295
 80113a4:	f7ef fbe2 	bl	8000b6c <__aeabi_dcmpun>
 80113a8:	bb70      	cbnz	r0, 8011408 <_printf_float+0xc0>
 80113aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113ae:	4b98      	ldr	r3, [pc, #608]	@ (8011610 <_printf_float+0x2c8>)
 80113b0:	f04f 32ff 	mov.w	r2, #4294967295
 80113b4:	f7ef fbbc 	bl	8000b30 <__aeabi_dcmple>
 80113b8:	bb30      	cbnz	r0, 8011408 <_printf_float+0xc0>
 80113ba:	2200      	movs	r2, #0
 80113bc:	2300      	movs	r3, #0
 80113be:	4640      	mov	r0, r8
 80113c0:	4649      	mov	r1, r9
 80113c2:	f7ef fbab 	bl	8000b1c <__aeabi_dcmplt>
 80113c6:	b110      	cbz	r0, 80113ce <_printf_float+0x86>
 80113c8:	232d      	movs	r3, #45	@ 0x2d
 80113ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113ce:	4a91      	ldr	r2, [pc, #580]	@ (8011614 <_printf_float+0x2cc>)
 80113d0:	4b91      	ldr	r3, [pc, #580]	@ (8011618 <_printf_float+0x2d0>)
 80113d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80113d6:	bf8c      	ite	hi
 80113d8:	4690      	movhi	r8, r2
 80113da:	4698      	movls	r8, r3
 80113dc:	2303      	movs	r3, #3
 80113de:	6123      	str	r3, [r4, #16]
 80113e0:	f02b 0304 	bic.w	r3, fp, #4
 80113e4:	6023      	str	r3, [r4, #0]
 80113e6:	f04f 0900 	mov.w	r9, #0
 80113ea:	9700      	str	r7, [sp, #0]
 80113ec:	4633      	mov	r3, r6
 80113ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80113f0:	4621      	mov	r1, r4
 80113f2:	4628      	mov	r0, r5
 80113f4:	f000 f9d2 	bl	801179c <_printf_common>
 80113f8:	3001      	adds	r0, #1
 80113fa:	f040 808d 	bne.w	8011518 <_printf_float+0x1d0>
 80113fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011402:	b00d      	add	sp, #52	@ 0x34
 8011404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011408:	4642      	mov	r2, r8
 801140a:	464b      	mov	r3, r9
 801140c:	4640      	mov	r0, r8
 801140e:	4649      	mov	r1, r9
 8011410:	f7ef fbac 	bl	8000b6c <__aeabi_dcmpun>
 8011414:	b140      	cbz	r0, 8011428 <_printf_float+0xe0>
 8011416:	464b      	mov	r3, r9
 8011418:	2b00      	cmp	r3, #0
 801141a:	bfbc      	itt	lt
 801141c:	232d      	movlt	r3, #45	@ 0x2d
 801141e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011422:	4a7e      	ldr	r2, [pc, #504]	@ (801161c <_printf_float+0x2d4>)
 8011424:	4b7e      	ldr	r3, [pc, #504]	@ (8011620 <_printf_float+0x2d8>)
 8011426:	e7d4      	b.n	80113d2 <_printf_float+0x8a>
 8011428:	6863      	ldr	r3, [r4, #4]
 801142a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801142e:	9206      	str	r2, [sp, #24]
 8011430:	1c5a      	adds	r2, r3, #1
 8011432:	d13b      	bne.n	80114ac <_printf_float+0x164>
 8011434:	2306      	movs	r3, #6
 8011436:	6063      	str	r3, [r4, #4]
 8011438:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801143c:	2300      	movs	r3, #0
 801143e:	6022      	str	r2, [r4, #0]
 8011440:	9303      	str	r3, [sp, #12]
 8011442:	ab0a      	add	r3, sp, #40	@ 0x28
 8011444:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011448:	ab09      	add	r3, sp, #36	@ 0x24
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	6861      	ldr	r1, [r4, #4]
 801144e:	ec49 8b10 	vmov	d0, r8, r9
 8011452:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011456:	4628      	mov	r0, r5
 8011458:	f7ff fed6 	bl	8011208 <__cvt>
 801145c:	9b06      	ldr	r3, [sp, #24]
 801145e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011460:	2b47      	cmp	r3, #71	@ 0x47
 8011462:	4680      	mov	r8, r0
 8011464:	d129      	bne.n	80114ba <_printf_float+0x172>
 8011466:	1cc8      	adds	r0, r1, #3
 8011468:	db02      	blt.n	8011470 <_printf_float+0x128>
 801146a:	6863      	ldr	r3, [r4, #4]
 801146c:	4299      	cmp	r1, r3
 801146e:	dd41      	ble.n	80114f4 <_printf_float+0x1ac>
 8011470:	f1aa 0a02 	sub.w	sl, sl, #2
 8011474:	fa5f fa8a 	uxtb.w	sl, sl
 8011478:	3901      	subs	r1, #1
 801147a:	4652      	mov	r2, sl
 801147c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011480:	9109      	str	r1, [sp, #36]	@ 0x24
 8011482:	f7ff ff26 	bl	80112d2 <__exponent>
 8011486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011488:	1813      	adds	r3, r2, r0
 801148a:	2a01      	cmp	r2, #1
 801148c:	4681      	mov	r9, r0
 801148e:	6123      	str	r3, [r4, #16]
 8011490:	dc02      	bgt.n	8011498 <_printf_float+0x150>
 8011492:	6822      	ldr	r2, [r4, #0]
 8011494:	07d2      	lsls	r2, r2, #31
 8011496:	d501      	bpl.n	801149c <_printf_float+0x154>
 8011498:	3301      	adds	r3, #1
 801149a:	6123      	str	r3, [r4, #16]
 801149c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d0a2      	beq.n	80113ea <_printf_float+0xa2>
 80114a4:	232d      	movs	r3, #45	@ 0x2d
 80114a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114aa:	e79e      	b.n	80113ea <_printf_float+0xa2>
 80114ac:	9a06      	ldr	r2, [sp, #24]
 80114ae:	2a47      	cmp	r2, #71	@ 0x47
 80114b0:	d1c2      	bne.n	8011438 <_printf_float+0xf0>
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d1c0      	bne.n	8011438 <_printf_float+0xf0>
 80114b6:	2301      	movs	r3, #1
 80114b8:	e7bd      	b.n	8011436 <_printf_float+0xee>
 80114ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80114be:	d9db      	bls.n	8011478 <_printf_float+0x130>
 80114c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80114c4:	d118      	bne.n	80114f8 <_printf_float+0x1b0>
 80114c6:	2900      	cmp	r1, #0
 80114c8:	6863      	ldr	r3, [r4, #4]
 80114ca:	dd0b      	ble.n	80114e4 <_printf_float+0x19c>
 80114cc:	6121      	str	r1, [r4, #16]
 80114ce:	b913      	cbnz	r3, 80114d6 <_printf_float+0x18e>
 80114d0:	6822      	ldr	r2, [r4, #0]
 80114d2:	07d0      	lsls	r0, r2, #31
 80114d4:	d502      	bpl.n	80114dc <_printf_float+0x194>
 80114d6:	3301      	adds	r3, #1
 80114d8:	440b      	add	r3, r1
 80114da:	6123      	str	r3, [r4, #16]
 80114dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80114de:	f04f 0900 	mov.w	r9, #0
 80114e2:	e7db      	b.n	801149c <_printf_float+0x154>
 80114e4:	b913      	cbnz	r3, 80114ec <_printf_float+0x1a4>
 80114e6:	6822      	ldr	r2, [r4, #0]
 80114e8:	07d2      	lsls	r2, r2, #31
 80114ea:	d501      	bpl.n	80114f0 <_printf_float+0x1a8>
 80114ec:	3302      	adds	r3, #2
 80114ee:	e7f4      	b.n	80114da <_printf_float+0x192>
 80114f0:	2301      	movs	r3, #1
 80114f2:	e7f2      	b.n	80114da <_printf_float+0x192>
 80114f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80114f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114fa:	4299      	cmp	r1, r3
 80114fc:	db05      	blt.n	801150a <_printf_float+0x1c2>
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	6121      	str	r1, [r4, #16]
 8011502:	07d8      	lsls	r0, r3, #31
 8011504:	d5ea      	bpl.n	80114dc <_printf_float+0x194>
 8011506:	1c4b      	adds	r3, r1, #1
 8011508:	e7e7      	b.n	80114da <_printf_float+0x192>
 801150a:	2900      	cmp	r1, #0
 801150c:	bfd4      	ite	le
 801150e:	f1c1 0202 	rsble	r2, r1, #2
 8011512:	2201      	movgt	r2, #1
 8011514:	4413      	add	r3, r2
 8011516:	e7e0      	b.n	80114da <_printf_float+0x192>
 8011518:	6823      	ldr	r3, [r4, #0]
 801151a:	055a      	lsls	r2, r3, #21
 801151c:	d407      	bmi.n	801152e <_printf_float+0x1e6>
 801151e:	6923      	ldr	r3, [r4, #16]
 8011520:	4642      	mov	r2, r8
 8011522:	4631      	mov	r1, r6
 8011524:	4628      	mov	r0, r5
 8011526:	47b8      	blx	r7
 8011528:	3001      	adds	r0, #1
 801152a:	d12b      	bne.n	8011584 <_printf_float+0x23c>
 801152c:	e767      	b.n	80113fe <_printf_float+0xb6>
 801152e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011532:	f240 80dd 	bls.w	80116f0 <_printf_float+0x3a8>
 8011536:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801153a:	2200      	movs	r2, #0
 801153c:	2300      	movs	r3, #0
 801153e:	f7ef fae3 	bl	8000b08 <__aeabi_dcmpeq>
 8011542:	2800      	cmp	r0, #0
 8011544:	d033      	beq.n	80115ae <_printf_float+0x266>
 8011546:	4a37      	ldr	r2, [pc, #220]	@ (8011624 <_printf_float+0x2dc>)
 8011548:	2301      	movs	r3, #1
 801154a:	4631      	mov	r1, r6
 801154c:	4628      	mov	r0, r5
 801154e:	47b8      	blx	r7
 8011550:	3001      	adds	r0, #1
 8011552:	f43f af54 	beq.w	80113fe <_printf_float+0xb6>
 8011556:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801155a:	4543      	cmp	r3, r8
 801155c:	db02      	blt.n	8011564 <_printf_float+0x21c>
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	07d8      	lsls	r0, r3, #31
 8011562:	d50f      	bpl.n	8011584 <_printf_float+0x23c>
 8011564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011568:	4631      	mov	r1, r6
 801156a:	4628      	mov	r0, r5
 801156c:	47b8      	blx	r7
 801156e:	3001      	adds	r0, #1
 8011570:	f43f af45 	beq.w	80113fe <_printf_float+0xb6>
 8011574:	f04f 0900 	mov.w	r9, #0
 8011578:	f108 38ff 	add.w	r8, r8, #4294967295
 801157c:	f104 0a1a 	add.w	sl, r4, #26
 8011580:	45c8      	cmp	r8, r9
 8011582:	dc09      	bgt.n	8011598 <_printf_float+0x250>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	079b      	lsls	r3, r3, #30
 8011588:	f100 8103 	bmi.w	8011792 <_printf_float+0x44a>
 801158c:	68e0      	ldr	r0, [r4, #12]
 801158e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011590:	4298      	cmp	r0, r3
 8011592:	bfb8      	it	lt
 8011594:	4618      	movlt	r0, r3
 8011596:	e734      	b.n	8011402 <_printf_float+0xba>
 8011598:	2301      	movs	r3, #1
 801159a:	4652      	mov	r2, sl
 801159c:	4631      	mov	r1, r6
 801159e:	4628      	mov	r0, r5
 80115a0:	47b8      	blx	r7
 80115a2:	3001      	adds	r0, #1
 80115a4:	f43f af2b 	beq.w	80113fe <_printf_float+0xb6>
 80115a8:	f109 0901 	add.w	r9, r9, #1
 80115ac:	e7e8      	b.n	8011580 <_printf_float+0x238>
 80115ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	dc39      	bgt.n	8011628 <_printf_float+0x2e0>
 80115b4:	4a1b      	ldr	r2, [pc, #108]	@ (8011624 <_printf_float+0x2dc>)
 80115b6:	2301      	movs	r3, #1
 80115b8:	4631      	mov	r1, r6
 80115ba:	4628      	mov	r0, r5
 80115bc:	47b8      	blx	r7
 80115be:	3001      	adds	r0, #1
 80115c0:	f43f af1d 	beq.w	80113fe <_printf_float+0xb6>
 80115c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80115c8:	ea59 0303 	orrs.w	r3, r9, r3
 80115cc:	d102      	bne.n	80115d4 <_printf_float+0x28c>
 80115ce:	6823      	ldr	r3, [r4, #0]
 80115d0:	07d9      	lsls	r1, r3, #31
 80115d2:	d5d7      	bpl.n	8011584 <_printf_float+0x23c>
 80115d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115d8:	4631      	mov	r1, r6
 80115da:	4628      	mov	r0, r5
 80115dc:	47b8      	blx	r7
 80115de:	3001      	adds	r0, #1
 80115e0:	f43f af0d 	beq.w	80113fe <_printf_float+0xb6>
 80115e4:	f04f 0a00 	mov.w	sl, #0
 80115e8:	f104 0b1a 	add.w	fp, r4, #26
 80115ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115ee:	425b      	negs	r3, r3
 80115f0:	4553      	cmp	r3, sl
 80115f2:	dc01      	bgt.n	80115f8 <_printf_float+0x2b0>
 80115f4:	464b      	mov	r3, r9
 80115f6:	e793      	b.n	8011520 <_printf_float+0x1d8>
 80115f8:	2301      	movs	r3, #1
 80115fa:	465a      	mov	r2, fp
 80115fc:	4631      	mov	r1, r6
 80115fe:	4628      	mov	r0, r5
 8011600:	47b8      	blx	r7
 8011602:	3001      	adds	r0, #1
 8011604:	f43f aefb 	beq.w	80113fe <_printf_float+0xb6>
 8011608:	f10a 0a01 	add.w	sl, sl, #1
 801160c:	e7ee      	b.n	80115ec <_printf_float+0x2a4>
 801160e:	bf00      	nop
 8011610:	7fefffff 	.word	0x7fefffff
 8011614:	08014ca2 	.word	0x08014ca2
 8011618:	08014c9e 	.word	0x08014c9e
 801161c:	08014caa 	.word	0x08014caa
 8011620:	08014ca6 	.word	0x08014ca6
 8011624:	08014cae 	.word	0x08014cae
 8011628:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801162a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801162e:	4553      	cmp	r3, sl
 8011630:	bfa8      	it	ge
 8011632:	4653      	movge	r3, sl
 8011634:	2b00      	cmp	r3, #0
 8011636:	4699      	mov	r9, r3
 8011638:	dc36      	bgt.n	80116a8 <_printf_float+0x360>
 801163a:	f04f 0b00 	mov.w	fp, #0
 801163e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011642:	f104 021a 	add.w	r2, r4, #26
 8011646:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011648:	9306      	str	r3, [sp, #24]
 801164a:	eba3 0309 	sub.w	r3, r3, r9
 801164e:	455b      	cmp	r3, fp
 8011650:	dc31      	bgt.n	80116b6 <_printf_float+0x36e>
 8011652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011654:	459a      	cmp	sl, r3
 8011656:	dc3a      	bgt.n	80116ce <_printf_float+0x386>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	07da      	lsls	r2, r3, #31
 801165c:	d437      	bmi.n	80116ce <_printf_float+0x386>
 801165e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011660:	ebaa 0903 	sub.w	r9, sl, r3
 8011664:	9b06      	ldr	r3, [sp, #24]
 8011666:	ebaa 0303 	sub.w	r3, sl, r3
 801166a:	4599      	cmp	r9, r3
 801166c:	bfa8      	it	ge
 801166e:	4699      	movge	r9, r3
 8011670:	f1b9 0f00 	cmp.w	r9, #0
 8011674:	dc33      	bgt.n	80116de <_printf_float+0x396>
 8011676:	f04f 0800 	mov.w	r8, #0
 801167a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801167e:	f104 0b1a 	add.w	fp, r4, #26
 8011682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011684:	ebaa 0303 	sub.w	r3, sl, r3
 8011688:	eba3 0309 	sub.w	r3, r3, r9
 801168c:	4543      	cmp	r3, r8
 801168e:	f77f af79 	ble.w	8011584 <_printf_float+0x23c>
 8011692:	2301      	movs	r3, #1
 8011694:	465a      	mov	r2, fp
 8011696:	4631      	mov	r1, r6
 8011698:	4628      	mov	r0, r5
 801169a:	47b8      	blx	r7
 801169c:	3001      	adds	r0, #1
 801169e:	f43f aeae 	beq.w	80113fe <_printf_float+0xb6>
 80116a2:	f108 0801 	add.w	r8, r8, #1
 80116a6:	e7ec      	b.n	8011682 <_printf_float+0x33a>
 80116a8:	4642      	mov	r2, r8
 80116aa:	4631      	mov	r1, r6
 80116ac:	4628      	mov	r0, r5
 80116ae:	47b8      	blx	r7
 80116b0:	3001      	adds	r0, #1
 80116b2:	d1c2      	bne.n	801163a <_printf_float+0x2f2>
 80116b4:	e6a3      	b.n	80113fe <_printf_float+0xb6>
 80116b6:	2301      	movs	r3, #1
 80116b8:	4631      	mov	r1, r6
 80116ba:	4628      	mov	r0, r5
 80116bc:	9206      	str	r2, [sp, #24]
 80116be:	47b8      	blx	r7
 80116c0:	3001      	adds	r0, #1
 80116c2:	f43f ae9c 	beq.w	80113fe <_printf_float+0xb6>
 80116c6:	9a06      	ldr	r2, [sp, #24]
 80116c8:	f10b 0b01 	add.w	fp, fp, #1
 80116cc:	e7bb      	b.n	8011646 <_printf_float+0x2fe>
 80116ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116d2:	4631      	mov	r1, r6
 80116d4:	4628      	mov	r0, r5
 80116d6:	47b8      	blx	r7
 80116d8:	3001      	adds	r0, #1
 80116da:	d1c0      	bne.n	801165e <_printf_float+0x316>
 80116dc:	e68f      	b.n	80113fe <_printf_float+0xb6>
 80116de:	9a06      	ldr	r2, [sp, #24]
 80116e0:	464b      	mov	r3, r9
 80116e2:	4442      	add	r2, r8
 80116e4:	4631      	mov	r1, r6
 80116e6:	4628      	mov	r0, r5
 80116e8:	47b8      	blx	r7
 80116ea:	3001      	adds	r0, #1
 80116ec:	d1c3      	bne.n	8011676 <_printf_float+0x32e>
 80116ee:	e686      	b.n	80113fe <_printf_float+0xb6>
 80116f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80116f4:	f1ba 0f01 	cmp.w	sl, #1
 80116f8:	dc01      	bgt.n	80116fe <_printf_float+0x3b6>
 80116fa:	07db      	lsls	r3, r3, #31
 80116fc:	d536      	bpl.n	801176c <_printf_float+0x424>
 80116fe:	2301      	movs	r3, #1
 8011700:	4642      	mov	r2, r8
 8011702:	4631      	mov	r1, r6
 8011704:	4628      	mov	r0, r5
 8011706:	47b8      	blx	r7
 8011708:	3001      	adds	r0, #1
 801170a:	f43f ae78 	beq.w	80113fe <_printf_float+0xb6>
 801170e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011712:	4631      	mov	r1, r6
 8011714:	4628      	mov	r0, r5
 8011716:	47b8      	blx	r7
 8011718:	3001      	adds	r0, #1
 801171a:	f43f ae70 	beq.w	80113fe <_printf_float+0xb6>
 801171e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011722:	2200      	movs	r2, #0
 8011724:	2300      	movs	r3, #0
 8011726:	f10a 3aff 	add.w	sl, sl, #4294967295
 801172a:	f7ef f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 801172e:	b9c0      	cbnz	r0, 8011762 <_printf_float+0x41a>
 8011730:	4653      	mov	r3, sl
 8011732:	f108 0201 	add.w	r2, r8, #1
 8011736:	4631      	mov	r1, r6
 8011738:	4628      	mov	r0, r5
 801173a:	47b8      	blx	r7
 801173c:	3001      	adds	r0, #1
 801173e:	d10c      	bne.n	801175a <_printf_float+0x412>
 8011740:	e65d      	b.n	80113fe <_printf_float+0xb6>
 8011742:	2301      	movs	r3, #1
 8011744:	465a      	mov	r2, fp
 8011746:	4631      	mov	r1, r6
 8011748:	4628      	mov	r0, r5
 801174a:	47b8      	blx	r7
 801174c:	3001      	adds	r0, #1
 801174e:	f43f ae56 	beq.w	80113fe <_printf_float+0xb6>
 8011752:	f108 0801 	add.w	r8, r8, #1
 8011756:	45d0      	cmp	r8, sl
 8011758:	dbf3      	blt.n	8011742 <_printf_float+0x3fa>
 801175a:	464b      	mov	r3, r9
 801175c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011760:	e6df      	b.n	8011522 <_printf_float+0x1da>
 8011762:	f04f 0800 	mov.w	r8, #0
 8011766:	f104 0b1a 	add.w	fp, r4, #26
 801176a:	e7f4      	b.n	8011756 <_printf_float+0x40e>
 801176c:	2301      	movs	r3, #1
 801176e:	4642      	mov	r2, r8
 8011770:	e7e1      	b.n	8011736 <_printf_float+0x3ee>
 8011772:	2301      	movs	r3, #1
 8011774:	464a      	mov	r2, r9
 8011776:	4631      	mov	r1, r6
 8011778:	4628      	mov	r0, r5
 801177a:	47b8      	blx	r7
 801177c:	3001      	adds	r0, #1
 801177e:	f43f ae3e 	beq.w	80113fe <_printf_float+0xb6>
 8011782:	f108 0801 	add.w	r8, r8, #1
 8011786:	68e3      	ldr	r3, [r4, #12]
 8011788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801178a:	1a5b      	subs	r3, r3, r1
 801178c:	4543      	cmp	r3, r8
 801178e:	dcf0      	bgt.n	8011772 <_printf_float+0x42a>
 8011790:	e6fc      	b.n	801158c <_printf_float+0x244>
 8011792:	f04f 0800 	mov.w	r8, #0
 8011796:	f104 0919 	add.w	r9, r4, #25
 801179a:	e7f4      	b.n	8011786 <_printf_float+0x43e>

0801179c <_printf_common>:
 801179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a0:	4616      	mov	r6, r2
 80117a2:	4698      	mov	r8, r3
 80117a4:	688a      	ldr	r2, [r1, #8]
 80117a6:	690b      	ldr	r3, [r1, #16]
 80117a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80117ac:	4293      	cmp	r3, r2
 80117ae:	bfb8      	it	lt
 80117b0:	4613      	movlt	r3, r2
 80117b2:	6033      	str	r3, [r6, #0]
 80117b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80117b8:	4607      	mov	r7, r0
 80117ba:	460c      	mov	r4, r1
 80117bc:	b10a      	cbz	r2, 80117c2 <_printf_common+0x26>
 80117be:	3301      	adds	r3, #1
 80117c0:	6033      	str	r3, [r6, #0]
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	0699      	lsls	r1, r3, #26
 80117c6:	bf42      	ittt	mi
 80117c8:	6833      	ldrmi	r3, [r6, #0]
 80117ca:	3302      	addmi	r3, #2
 80117cc:	6033      	strmi	r3, [r6, #0]
 80117ce:	6825      	ldr	r5, [r4, #0]
 80117d0:	f015 0506 	ands.w	r5, r5, #6
 80117d4:	d106      	bne.n	80117e4 <_printf_common+0x48>
 80117d6:	f104 0a19 	add.w	sl, r4, #25
 80117da:	68e3      	ldr	r3, [r4, #12]
 80117dc:	6832      	ldr	r2, [r6, #0]
 80117de:	1a9b      	subs	r3, r3, r2
 80117e0:	42ab      	cmp	r3, r5
 80117e2:	dc26      	bgt.n	8011832 <_printf_common+0x96>
 80117e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80117e8:	6822      	ldr	r2, [r4, #0]
 80117ea:	3b00      	subs	r3, #0
 80117ec:	bf18      	it	ne
 80117ee:	2301      	movne	r3, #1
 80117f0:	0692      	lsls	r2, r2, #26
 80117f2:	d42b      	bmi.n	801184c <_printf_common+0xb0>
 80117f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80117f8:	4641      	mov	r1, r8
 80117fa:	4638      	mov	r0, r7
 80117fc:	47c8      	blx	r9
 80117fe:	3001      	adds	r0, #1
 8011800:	d01e      	beq.n	8011840 <_printf_common+0xa4>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	6922      	ldr	r2, [r4, #16]
 8011806:	f003 0306 	and.w	r3, r3, #6
 801180a:	2b04      	cmp	r3, #4
 801180c:	bf02      	ittt	eq
 801180e:	68e5      	ldreq	r5, [r4, #12]
 8011810:	6833      	ldreq	r3, [r6, #0]
 8011812:	1aed      	subeq	r5, r5, r3
 8011814:	68a3      	ldr	r3, [r4, #8]
 8011816:	bf0c      	ite	eq
 8011818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801181c:	2500      	movne	r5, #0
 801181e:	4293      	cmp	r3, r2
 8011820:	bfc4      	itt	gt
 8011822:	1a9b      	subgt	r3, r3, r2
 8011824:	18ed      	addgt	r5, r5, r3
 8011826:	2600      	movs	r6, #0
 8011828:	341a      	adds	r4, #26
 801182a:	42b5      	cmp	r5, r6
 801182c:	d11a      	bne.n	8011864 <_printf_common+0xc8>
 801182e:	2000      	movs	r0, #0
 8011830:	e008      	b.n	8011844 <_printf_common+0xa8>
 8011832:	2301      	movs	r3, #1
 8011834:	4652      	mov	r2, sl
 8011836:	4641      	mov	r1, r8
 8011838:	4638      	mov	r0, r7
 801183a:	47c8      	blx	r9
 801183c:	3001      	adds	r0, #1
 801183e:	d103      	bne.n	8011848 <_printf_common+0xac>
 8011840:	f04f 30ff 	mov.w	r0, #4294967295
 8011844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011848:	3501      	adds	r5, #1
 801184a:	e7c6      	b.n	80117da <_printf_common+0x3e>
 801184c:	18e1      	adds	r1, r4, r3
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	2030      	movs	r0, #48	@ 0x30
 8011852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011856:	4422      	add	r2, r4
 8011858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801185c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011860:	3302      	adds	r3, #2
 8011862:	e7c7      	b.n	80117f4 <_printf_common+0x58>
 8011864:	2301      	movs	r3, #1
 8011866:	4622      	mov	r2, r4
 8011868:	4641      	mov	r1, r8
 801186a:	4638      	mov	r0, r7
 801186c:	47c8      	blx	r9
 801186e:	3001      	adds	r0, #1
 8011870:	d0e6      	beq.n	8011840 <_printf_common+0xa4>
 8011872:	3601      	adds	r6, #1
 8011874:	e7d9      	b.n	801182a <_printf_common+0x8e>
	...

08011878 <_printf_i>:
 8011878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801187c:	7e0f      	ldrb	r7, [r1, #24]
 801187e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011880:	2f78      	cmp	r7, #120	@ 0x78
 8011882:	4691      	mov	r9, r2
 8011884:	4680      	mov	r8, r0
 8011886:	460c      	mov	r4, r1
 8011888:	469a      	mov	sl, r3
 801188a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801188e:	d807      	bhi.n	80118a0 <_printf_i+0x28>
 8011890:	2f62      	cmp	r7, #98	@ 0x62
 8011892:	d80a      	bhi.n	80118aa <_printf_i+0x32>
 8011894:	2f00      	cmp	r7, #0
 8011896:	f000 80d1 	beq.w	8011a3c <_printf_i+0x1c4>
 801189a:	2f58      	cmp	r7, #88	@ 0x58
 801189c:	f000 80b8 	beq.w	8011a10 <_printf_i+0x198>
 80118a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80118a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80118a8:	e03a      	b.n	8011920 <_printf_i+0xa8>
 80118aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80118ae:	2b15      	cmp	r3, #21
 80118b0:	d8f6      	bhi.n	80118a0 <_printf_i+0x28>
 80118b2:	a101      	add	r1, pc, #4	@ (adr r1, 80118b8 <_printf_i+0x40>)
 80118b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118b8:	08011911 	.word	0x08011911
 80118bc:	08011925 	.word	0x08011925
 80118c0:	080118a1 	.word	0x080118a1
 80118c4:	080118a1 	.word	0x080118a1
 80118c8:	080118a1 	.word	0x080118a1
 80118cc:	080118a1 	.word	0x080118a1
 80118d0:	08011925 	.word	0x08011925
 80118d4:	080118a1 	.word	0x080118a1
 80118d8:	080118a1 	.word	0x080118a1
 80118dc:	080118a1 	.word	0x080118a1
 80118e0:	080118a1 	.word	0x080118a1
 80118e4:	08011a23 	.word	0x08011a23
 80118e8:	0801194f 	.word	0x0801194f
 80118ec:	080119dd 	.word	0x080119dd
 80118f0:	080118a1 	.word	0x080118a1
 80118f4:	080118a1 	.word	0x080118a1
 80118f8:	08011a45 	.word	0x08011a45
 80118fc:	080118a1 	.word	0x080118a1
 8011900:	0801194f 	.word	0x0801194f
 8011904:	080118a1 	.word	0x080118a1
 8011908:	080118a1 	.word	0x080118a1
 801190c:	080119e5 	.word	0x080119e5
 8011910:	6833      	ldr	r3, [r6, #0]
 8011912:	1d1a      	adds	r2, r3, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	6032      	str	r2, [r6, #0]
 8011918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801191c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011920:	2301      	movs	r3, #1
 8011922:	e09c      	b.n	8011a5e <_printf_i+0x1e6>
 8011924:	6833      	ldr	r3, [r6, #0]
 8011926:	6820      	ldr	r0, [r4, #0]
 8011928:	1d19      	adds	r1, r3, #4
 801192a:	6031      	str	r1, [r6, #0]
 801192c:	0606      	lsls	r6, r0, #24
 801192e:	d501      	bpl.n	8011934 <_printf_i+0xbc>
 8011930:	681d      	ldr	r5, [r3, #0]
 8011932:	e003      	b.n	801193c <_printf_i+0xc4>
 8011934:	0645      	lsls	r5, r0, #25
 8011936:	d5fb      	bpl.n	8011930 <_printf_i+0xb8>
 8011938:	f9b3 5000 	ldrsh.w	r5, [r3]
 801193c:	2d00      	cmp	r5, #0
 801193e:	da03      	bge.n	8011948 <_printf_i+0xd0>
 8011940:	232d      	movs	r3, #45	@ 0x2d
 8011942:	426d      	negs	r5, r5
 8011944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011948:	4858      	ldr	r0, [pc, #352]	@ (8011aac <_printf_i+0x234>)
 801194a:	230a      	movs	r3, #10
 801194c:	e011      	b.n	8011972 <_printf_i+0xfa>
 801194e:	6821      	ldr	r1, [r4, #0]
 8011950:	6833      	ldr	r3, [r6, #0]
 8011952:	0608      	lsls	r0, r1, #24
 8011954:	f853 5b04 	ldr.w	r5, [r3], #4
 8011958:	d402      	bmi.n	8011960 <_printf_i+0xe8>
 801195a:	0649      	lsls	r1, r1, #25
 801195c:	bf48      	it	mi
 801195e:	b2ad      	uxthmi	r5, r5
 8011960:	2f6f      	cmp	r7, #111	@ 0x6f
 8011962:	4852      	ldr	r0, [pc, #328]	@ (8011aac <_printf_i+0x234>)
 8011964:	6033      	str	r3, [r6, #0]
 8011966:	bf14      	ite	ne
 8011968:	230a      	movne	r3, #10
 801196a:	2308      	moveq	r3, #8
 801196c:	2100      	movs	r1, #0
 801196e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011972:	6866      	ldr	r6, [r4, #4]
 8011974:	60a6      	str	r6, [r4, #8]
 8011976:	2e00      	cmp	r6, #0
 8011978:	db05      	blt.n	8011986 <_printf_i+0x10e>
 801197a:	6821      	ldr	r1, [r4, #0]
 801197c:	432e      	orrs	r6, r5
 801197e:	f021 0104 	bic.w	r1, r1, #4
 8011982:	6021      	str	r1, [r4, #0]
 8011984:	d04b      	beq.n	8011a1e <_printf_i+0x1a6>
 8011986:	4616      	mov	r6, r2
 8011988:	fbb5 f1f3 	udiv	r1, r5, r3
 801198c:	fb03 5711 	mls	r7, r3, r1, r5
 8011990:	5dc7      	ldrb	r7, [r0, r7]
 8011992:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011996:	462f      	mov	r7, r5
 8011998:	42bb      	cmp	r3, r7
 801199a:	460d      	mov	r5, r1
 801199c:	d9f4      	bls.n	8011988 <_printf_i+0x110>
 801199e:	2b08      	cmp	r3, #8
 80119a0:	d10b      	bne.n	80119ba <_printf_i+0x142>
 80119a2:	6823      	ldr	r3, [r4, #0]
 80119a4:	07df      	lsls	r7, r3, #31
 80119a6:	d508      	bpl.n	80119ba <_printf_i+0x142>
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	6861      	ldr	r1, [r4, #4]
 80119ac:	4299      	cmp	r1, r3
 80119ae:	bfde      	ittt	le
 80119b0:	2330      	movle	r3, #48	@ 0x30
 80119b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80119b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80119ba:	1b92      	subs	r2, r2, r6
 80119bc:	6122      	str	r2, [r4, #16]
 80119be:	f8cd a000 	str.w	sl, [sp]
 80119c2:	464b      	mov	r3, r9
 80119c4:	aa03      	add	r2, sp, #12
 80119c6:	4621      	mov	r1, r4
 80119c8:	4640      	mov	r0, r8
 80119ca:	f7ff fee7 	bl	801179c <_printf_common>
 80119ce:	3001      	adds	r0, #1
 80119d0:	d14a      	bne.n	8011a68 <_printf_i+0x1f0>
 80119d2:	f04f 30ff 	mov.w	r0, #4294967295
 80119d6:	b004      	add	sp, #16
 80119d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119dc:	6823      	ldr	r3, [r4, #0]
 80119de:	f043 0320 	orr.w	r3, r3, #32
 80119e2:	6023      	str	r3, [r4, #0]
 80119e4:	4832      	ldr	r0, [pc, #200]	@ (8011ab0 <_printf_i+0x238>)
 80119e6:	2778      	movs	r7, #120	@ 0x78
 80119e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	6831      	ldr	r1, [r6, #0]
 80119f0:	061f      	lsls	r7, r3, #24
 80119f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80119f6:	d402      	bmi.n	80119fe <_printf_i+0x186>
 80119f8:	065f      	lsls	r7, r3, #25
 80119fa:	bf48      	it	mi
 80119fc:	b2ad      	uxthmi	r5, r5
 80119fe:	6031      	str	r1, [r6, #0]
 8011a00:	07d9      	lsls	r1, r3, #31
 8011a02:	bf44      	itt	mi
 8011a04:	f043 0320 	orrmi.w	r3, r3, #32
 8011a08:	6023      	strmi	r3, [r4, #0]
 8011a0a:	b11d      	cbz	r5, 8011a14 <_printf_i+0x19c>
 8011a0c:	2310      	movs	r3, #16
 8011a0e:	e7ad      	b.n	801196c <_printf_i+0xf4>
 8011a10:	4826      	ldr	r0, [pc, #152]	@ (8011aac <_printf_i+0x234>)
 8011a12:	e7e9      	b.n	80119e8 <_printf_i+0x170>
 8011a14:	6823      	ldr	r3, [r4, #0]
 8011a16:	f023 0320 	bic.w	r3, r3, #32
 8011a1a:	6023      	str	r3, [r4, #0]
 8011a1c:	e7f6      	b.n	8011a0c <_printf_i+0x194>
 8011a1e:	4616      	mov	r6, r2
 8011a20:	e7bd      	b.n	801199e <_printf_i+0x126>
 8011a22:	6833      	ldr	r3, [r6, #0]
 8011a24:	6825      	ldr	r5, [r4, #0]
 8011a26:	6961      	ldr	r1, [r4, #20]
 8011a28:	1d18      	adds	r0, r3, #4
 8011a2a:	6030      	str	r0, [r6, #0]
 8011a2c:	062e      	lsls	r6, r5, #24
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	d501      	bpl.n	8011a36 <_printf_i+0x1be>
 8011a32:	6019      	str	r1, [r3, #0]
 8011a34:	e002      	b.n	8011a3c <_printf_i+0x1c4>
 8011a36:	0668      	lsls	r0, r5, #25
 8011a38:	d5fb      	bpl.n	8011a32 <_printf_i+0x1ba>
 8011a3a:	8019      	strh	r1, [r3, #0]
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	6123      	str	r3, [r4, #16]
 8011a40:	4616      	mov	r6, r2
 8011a42:	e7bc      	b.n	80119be <_printf_i+0x146>
 8011a44:	6833      	ldr	r3, [r6, #0]
 8011a46:	1d1a      	adds	r2, r3, #4
 8011a48:	6032      	str	r2, [r6, #0]
 8011a4a:	681e      	ldr	r6, [r3, #0]
 8011a4c:	6862      	ldr	r2, [r4, #4]
 8011a4e:	2100      	movs	r1, #0
 8011a50:	4630      	mov	r0, r6
 8011a52:	f7ee fbdd 	bl	8000210 <memchr>
 8011a56:	b108      	cbz	r0, 8011a5c <_printf_i+0x1e4>
 8011a58:	1b80      	subs	r0, r0, r6
 8011a5a:	6060      	str	r0, [r4, #4]
 8011a5c:	6863      	ldr	r3, [r4, #4]
 8011a5e:	6123      	str	r3, [r4, #16]
 8011a60:	2300      	movs	r3, #0
 8011a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a66:	e7aa      	b.n	80119be <_printf_i+0x146>
 8011a68:	6923      	ldr	r3, [r4, #16]
 8011a6a:	4632      	mov	r2, r6
 8011a6c:	4649      	mov	r1, r9
 8011a6e:	4640      	mov	r0, r8
 8011a70:	47d0      	blx	sl
 8011a72:	3001      	adds	r0, #1
 8011a74:	d0ad      	beq.n	80119d2 <_printf_i+0x15a>
 8011a76:	6823      	ldr	r3, [r4, #0]
 8011a78:	079b      	lsls	r3, r3, #30
 8011a7a:	d413      	bmi.n	8011aa4 <_printf_i+0x22c>
 8011a7c:	68e0      	ldr	r0, [r4, #12]
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	4298      	cmp	r0, r3
 8011a82:	bfb8      	it	lt
 8011a84:	4618      	movlt	r0, r3
 8011a86:	e7a6      	b.n	80119d6 <_printf_i+0x15e>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	4632      	mov	r2, r6
 8011a8c:	4649      	mov	r1, r9
 8011a8e:	4640      	mov	r0, r8
 8011a90:	47d0      	blx	sl
 8011a92:	3001      	adds	r0, #1
 8011a94:	d09d      	beq.n	80119d2 <_printf_i+0x15a>
 8011a96:	3501      	adds	r5, #1
 8011a98:	68e3      	ldr	r3, [r4, #12]
 8011a9a:	9903      	ldr	r1, [sp, #12]
 8011a9c:	1a5b      	subs	r3, r3, r1
 8011a9e:	42ab      	cmp	r3, r5
 8011aa0:	dcf2      	bgt.n	8011a88 <_printf_i+0x210>
 8011aa2:	e7eb      	b.n	8011a7c <_printf_i+0x204>
 8011aa4:	2500      	movs	r5, #0
 8011aa6:	f104 0619 	add.w	r6, r4, #25
 8011aaa:	e7f5      	b.n	8011a98 <_printf_i+0x220>
 8011aac:	08014cb0 	.word	0x08014cb0
 8011ab0:	08014cc1 	.word	0x08014cc1

08011ab4 <std>:
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	b510      	push	{r4, lr}
 8011ab8:	4604      	mov	r4, r0
 8011aba:	e9c0 3300 	strd	r3, r3, [r0]
 8011abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ac2:	6083      	str	r3, [r0, #8]
 8011ac4:	8181      	strh	r1, [r0, #12]
 8011ac6:	6643      	str	r3, [r0, #100]	@ 0x64
 8011ac8:	81c2      	strh	r2, [r0, #14]
 8011aca:	6183      	str	r3, [r0, #24]
 8011acc:	4619      	mov	r1, r3
 8011ace:	2208      	movs	r2, #8
 8011ad0:	305c      	adds	r0, #92	@ 0x5c
 8011ad2:	f000 fa2f 	bl	8011f34 <memset>
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8011b0c <std+0x58>)
 8011ad8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011ada:	4b0d      	ldr	r3, [pc, #52]	@ (8011b10 <std+0x5c>)
 8011adc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011ade:	4b0d      	ldr	r3, [pc, #52]	@ (8011b14 <std+0x60>)
 8011ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8011b18 <std+0x64>)
 8011ae4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8011b1c <std+0x68>)
 8011ae8:	6224      	str	r4, [r4, #32]
 8011aea:	429c      	cmp	r4, r3
 8011aec:	d006      	beq.n	8011afc <std+0x48>
 8011aee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011af2:	4294      	cmp	r4, r2
 8011af4:	d002      	beq.n	8011afc <std+0x48>
 8011af6:	33d0      	adds	r3, #208	@ 0xd0
 8011af8:	429c      	cmp	r4, r3
 8011afa:	d105      	bne.n	8011b08 <std+0x54>
 8011afc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b04:	f000 bb6c 	b.w	80121e0 <__retarget_lock_init_recursive>
 8011b08:	bd10      	pop	{r4, pc}
 8011b0a:	bf00      	nop
 8011b0c:	08011d85 	.word	0x08011d85
 8011b10:	08011da7 	.word	0x08011da7
 8011b14:	08011ddf 	.word	0x08011ddf
 8011b18:	08011e03 	.word	0x08011e03
 8011b1c:	20004dd0 	.word	0x20004dd0

08011b20 <stdio_exit_handler>:
 8011b20:	4a02      	ldr	r2, [pc, #8]	@ (8011b2c <stdio_exit_handler+0xc>)
 8011b22:	4903      	ldr	r1, [pc, #12]	@ (8011b30 <stdio_exit_handler+0x10>)
 8011b24:	4803      	ldr	r0, [pc, #12]	@ (8011b34 <stdio_exit_handler+0x14>)
 8011b26:	f000 b869 	b.w	8011bfc <_fwalk_sglue>
 8011b2a:	bf00      	nop
 8011b2c:	20000014 	.word	0x20000014
 8011b30:	08014751 	.word	0x08014751
 8011b34:	20000190 	.word	0x20000190

08011b38 <cleanup_stdio>:
 8011b38:	6841      	ldr	r1, [r0, #4]
 8011b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8011b6c <cleanup_stdio+0x34>)
 8011b3c:	4299      	cmp	r1, r3
 8011b3e:	b510      	push	{r4, lr}
 8011b40:	4604      	mov	r4, r0
 8011b42:	d001      	beq.n	8011b48 <cleanup_stdio+0x10>
 8011b44:	f002 fe04 	bl	8014750 <_fflush_r>
 8011b48:	68a1      	ldr	r1, [r4, #8]
 8011b4a:	4b09      	ldr	r3, [pc, #36]	@ (8011b70 <cleanup_stdio+0x38>)
 8011b4c:	4299      	cmp	r1, r3
 8011b4e:	d002      	beq.n	8011b56 <cleanup_stdio+0x1e>
 8011b50:	4620      	mov	r0, r4
 8011b52:	f002 fdfd 	bl	8014750 <_fflush_r>
 8011b56:	68e1      	ldr	r1, [r4, #12]
 8011b58:	4b06      	ldr	r3, [pc, #24]	@ (8011b74 <cleanup_stdio+0x3c>)
 8011b5a:	4299      	cmp	r1, r3
 8011b5c:	d004      	beq.n	8011b68 <cleanup_stdio+0x30>
 8011b5e:	4620      	mov	r0, r4
 8011b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b64:	f002 bdf4 	b.w	8014750 <_fflush_r>
 8011b68:	bd10      	pop	{r4, pc}
 8011b6a:	bf00      	nop
 8011b6c:	20004dd0 	.word	0x20004dd0
 8011b70:	20004e38 	.word	0x20004e38
 8011b74:	20004ea0 	.word	0x20004ea0

08011b78 <global_stdio_init.part.0>:
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8011ba8 <global_stdio_init.part.0+0x30>)
 8011b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8011bac <global_stdio_init.part.0+0x34>)
 8011b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8011bb0 <global_stdio_init.part.0+0x38>)
 8011b80:	601a      	str	r2, [r3, #0]
 8011b82:	4620      	mov	r0, r4
 8011b84:	2200      	movs	r2, #0
 8011b86:	2104      	movs	r1, #4
 8011b88:	f7ff ff94 	bl	8011ab4 <std>
 8011b8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b90:	2201      	movs	r2, #1
 8011b92:	2109      	movs	r1, #9
 8011b94:	f7ff ff8e 	bl	8011ab4 <std>
 8011b98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b9c:	2202      	movs	r2, #2
 8011b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ba2:	2112      	movs	r1, #18
 8011ba4:	f7ff bf86 	b.w	8011ab4 <std>
 8011ba8:	20004f08 	.word	0x20004f08
 8011bac:	20004dd0 	.word	0x20004dd0
 8011bb0:	08011b21 	.word	0x08011b21

08011bb4 <__sfp_lock_acquire>:
 8011bb4:	4801      	ldr	r0, [pc, #4]	@ (8011bbc <__sfp_lock_acquire+0x8>)
 8011bb6:	f000 bb14 	b.w	80121e2 <__retarget_lock_acquire_recursive>
 8011bba:	bf00      	nop
 8011bbc:	20004f11 	.word	0x20004f11

08011bc0 <__sfp_lock_release>:
 8011bc0:	4801      	ldr	r0, [pc, #4]	@ (8011bc8 <__sfp_lock_release+0x8>)
 8011bc2:	f000 bb0f 	b.w	80121e4 <__retarget_lock_release_recursive>
 8011bc6:	bf00      	nop
 8011bc8:	20004f11 	.word	0x20004f11

08011bcc <__sinit>:
 8011bcc:	b510      	push	{r4, lr}
 8011bce:	4604      	mov	r4, r0
 8011bd0:	f7ff fff0 	bl	8011bb4 <__sfp_lock_acquire>
 8011bd4:	6a23      	ldr	r3, [r4, #32]
 8011bd6:	b11b      	cbz	r3, 8011be0 <__sinit+0x14>
 8011bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bdc:	f7ff bff0 	b.w	8011bc0 <__sfp_lock_release>
 8011be0:	4b04      	ldr	r3, [pc, #16]	@ (8011bf4 <__sinit+0x28>)
 8011be2:	6223      	str	r3, [r4, #32]
 8011be4:	4b04      	ldr	r3, [pc, #16]	@ (8011bf8 <__sinit+0x2c>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1f5      	bne.n	8011bd8 <__sinit+0xc>
 8011bec:	f7ff ffc4 	bl	8011b78 <global_stdio_init.part.0>
 8011bf0:	e7f2      	b.n	8011bd8 <__sinit+0xc>
 8011bf2:	bf00      	nop
 8011bf4:	08011b39 	.word	0x08011b39
 8011bf8:	20004f08 	.word	0x20004f08

08011bfc <_fwalk_sglue>:
 8011bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c00:	4607      	mov	r7, r0
 8011c02:	4688      	mov	r8, r1
 8011c04:	4614      	mov	r4, r2
 8011c06:	2600      	movs	r6, #0
 8011c08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c0c:	f1b9 0901 	subs.w	r9, r9, #1
 8011c10:	d505      	bpl.n	8011c1e <_fwalk_sglue+0x22>
 8011c12:	6824      	ldr	r4, [r4, #0]
 8011c14:	2c00      	cmp	r4, #0
 8011c16:	d1f7      	bne.n	8011c08 <_fwalk_sglue+0xc>
 8011c18:	4630      	mov	r0, r6
 8011c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c1e:	89ab      	ldrh	r3, [r5, #12]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d907      	bls.n	8011c34 <_fwalk_sglue+0x38>
 8011c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c28:	3301      	adds	r3, #1
 8011c2a:	d003      	beq.n	8011c34 <_fwalk_sglue+0x38>
 8011c2c:	4629      	mov	r1, r5
 8011c2e:	4638      	mov	r0, r7
 8011c30:	47c0      	blx	r8
 8011c32:	4306      	orrs	r6, r0
 8011c34:	3568      	adds	r5, #104	@ 0x68
 8011c36:	e7e9      	b.n	8011c0c <_fwalk_sglue+0x10>

08011c38 <iprintf>:
 8011c38:	b40f      	push	{r0, r1, r2, r3}
 8011c3a:	b507      	push	{r0, r1, r2, lr}
 8011c3c:	4906      	ldr	r1, [pc, #24]	@ (8011c58 <iprintf+0x20>)
 8011c3e:	ab04      	add	r3, sp, #16
 8011c40:	6808      	ldr	r0, [r1, #0]
 8011c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c46:	6881      	ldr	r1, [r0, #8]
 8011c48:	9301      	str	r3, [sp, #4]
 8011c4a:	f002 fbe5 	bl	8014418 <_vfiprintf_r>
 8011c4e:	b003      	add	sp, #12
 8011c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c54:	b004      	add	sp, #16
 8011c56:	4770      	bx	lr
 8011c58:	2000018c 	.word	0x2000018c

08011c5c <_puts_r>:
 8011c5c:	6a03      	ldr	r3, [r0, #32]
 8011c5e:	b570      	push	{r4, r5, r6, lr}
 8011c60:	6884      	ldr	r4, [r0, #8]
 8011c62:	4605      	mov	r5, r0
 8011c64:	460e      	mov	r6, r1
 8011c66:	b90b      	cbnz	r3, 8011c6c <_puts_r+0x10>
 8011c68:	f7ff ffb0 	bl	8011bcc <__sinit>
 8011c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c6e:	07db      	lsls	r3, r3, #31
 8011c70:	d405      	bmi.n	8011c7e <_puts_r+0x22>
 8011c72:	89a3      	ldrh	r3, [r4, #12]
 8011c74:	0598      	lsls	r0, r3, #22
 8011c76:	d402      	bmi.n	8011c7e <_puts_r+0x22>
 8011c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c7a:	f000 fab2 	bl	80121e2 <__retarget_lock_acquire_recursive>
 8011c7e:	89a3      	ldrh	r3, [r4, #12]
 8011c80:	0719      	lsls	r1, r3, #28
 8011c82:	d502      	bpl.n	8011c8a <_puts_r+0x2e>
 8011c84:	6923      	ldr	r3, [r4, #16]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d135      	bne.n	8011cf6 <_puts_r+0x9a>
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f000 f8fb 	bl	8011e88 <__swsetup_r>
 8011c92:	b380      	cbz	r0, 8011cf6 <_puts_r+0x9a>
 8011c94:	f04f 35ff 	mov.w	r5, #4294967295
 8011c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c9a:	07da      	lsls	r2, r3, #31
 8011c9c:	d405      	bmi.n	8011caa <_puts_r+0x4e>
 8011c9e:	89a3      	ldrh	r3, [r4, #12]
 8011ca0:	059b      	lsls	r3, r3, #22
 8011ca2:	d402      	bmi.n	8011caa <_puts_r+0x4e>
 8011ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ca6:	f000 fa9d 	bl	80121e4 <__retarget_lock_release_recursive>
 8011caa:	4628      	mov	r0, r5
 8011cac:	bd70      	pop	{r4, r5, r6, pc}
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	da04      	bge.n	8011cbc <_puts_r+0x60>
 8011cb2:	69a2      	ldr	r2, [r4, #24]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	dc17      	bgt.n	8011ce8 <_puts_r+0x8c>
 8011cb8:	290a      	cmp	r1, #10
 8011cba:	d015      	beq.n	8011ce8 <_puts_r+0x8c>
 8011cbc:	6823      	ldr	r3, [r4, #0]
 8011cbe:	1c5a      	adds	r2, r3, #1
 8011cc0:	6022      	str	r2, [r4, #0]
 8011cc2:	7019      	strb	r1, [r3, #0]
 8011cc4:	68a3      	ldr	r3, [r4, #8]
 8011cc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	60a3      	str	r3, [r4, #8]
 8011cce:	2900      	cmp	r1, #0
 8011cd0:	d1ed      	bne.n	8011cae <_puts_r+0x52>
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	da11      	bge.n	8011cfa <_puts_r+0x9e>
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	210a      	movs	r1, #10
 8011cda:	4628      	mov	r0, r5
 8011cdc:	f000 f895 	bl	8011e0a <__swbuf_r>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	d0d7      	beq.n	8011c94 <_puts_r+0x38>
 8011ce4:	250a      	movs	r5, #10
 8011ce6:	e7d7      	b.n	8011c98 <_puts_r+0x3c>
 8011ce8:	4622      	mov	r2, r4
 8011cea:	4628      	mov	r0, r5
 8011cec:	f000 f88d 	bl	8011e0a <__swbuf_r>
 8011cf0:	3001      	adds	r0, #1
 8011cf2:	d1e7      	bne.n	8011cc4 <_puts_r+0x68>
 8011cf4:	e7ce      	b.n	8011c94 <_puts_r+0x38>
 8011cf6:	3e01      	subs	r6, #1
 8011cf8:	e7e4      	b.n	8011cc4 <_puts_r+0x68>
 8011cfa:	6823      	ldr	r3, [r4, #0]
 8011cfc:	1c5a      	adds	r2, r3, #1
 8011cfe:	6022      	str	r2, [r4, #0]
 8011d00:	220a      	movs	r2, #10
 8011d02:	701a      	strb	r2, [r3, #0]
 8011d04:	e7ee      	b.n	8011ce4 <_puts_r+0x88>
	...

08011d08 <puts>:
 8011d08:	4b02      	ldr	r3, [pc, #8]	@ (8011d14 <puts+0xc>)
 8011d0a:	4601      	mov	r1, r0
 8011d0c:	6818      	ldr	r0, [r3, #0]
 8011d0e:	f7ff bfa5 	b.w	8011c5c <_puts_r>
 8011d12:	bf00      	nop
 8011d14:	2000018c 	.word	0x2000018c

08011d18 <sniprintf>:
 8011d18:	b40c      	push	{r2, r3}
 8011d1a:	b530      	push	{r4, r5, lr}
 8011d1c:	4b18      	ldr	r3, [pc, #96]	@ (8011d80 <sniprintf+0x68>)
 8011d1e:	1e0c      	subs	r4, r1, #0
 8011d20:	681d      	ldr	r5, [r3, #0]
 8011d22:	b09d      	sub	sp, #116	@ 0x74
 8011d24:	da08      	bge.n	8011d38 <sniprintf+0x20>
 8011d26:	238b      	movs	r3, #139	@ 0x8b
 8011d28:	602b      	str	r3, [r5, #0]
 8011d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2e:	b01d      	add	sp, #116	@ 0x74
 8011d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d34:	b002      	add	sp, #8
 8011d36:	4770      	bx	lr
 8011d38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011d3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011d40:	f04f 0300 	mov.w	r3, #0
 8011d44:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011d46:	bf14      	ite	ne
 8011d48:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d4c:	4623      	moveq	r3, r4
 8011d4e:	9304      	str	r3, [sp, #16]
 8011d50:	9307      	str	r3, [sp, #28]
 8011d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d56:	9002      	str	r0, [sp, #8]
 8011d58:	9006      	str	r0, [sp, #24]
 8011d5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d60:	ab21      	add	r3, sp, #132	@ 0x84
 8011d62:	a902      	add	r1, sp, #8
 8011d64:	4628      	mov	r0, r5
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	f002 fa30 	bl	80141cc <_svfiprintf_r>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	bfbc      	itt	lt
 8011d70:	238b      	movlt	r3, #139	@ 0x8b
 8011d72:	602b      	strlt	r3, [r5, #0]
 8011d74:	2c00      	cmp	r4, #0
 8011d76:	d0da      	beq.n	8011d2e <sniprintf+0x16>
 8011d78:	9b02      	ldr	r3, [sp, #8]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	701a      	strb	r2, [r3, #0]
 8011d7e:	e7d6      	b.n	8011d2e <sniprintf+0x16>
 8011d80:	2000018c 	.word	0x2000018c

08011d84 <__sread>:
 8011d84:	b510      	push	{r4, lr}
 8011d86:	460c      	mov	r4, r1
 8011d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d8c:	f000 f9da 	bl	8012144 <_read_r>
 8011d90:	2800      	cmp	r0, #0
 8011d92:	bfab      	itete	ge
 8011d94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d96:	89a3      	ldrhlt	r3, [r4, #12]
 8011d98:	181b      	addge	r3, r3, r0
 8011d9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d9e:	bfac      	ite	ge
 8011da0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011da2:	81a3      	strhlt	r3, [r4, #12]
 8011da4:	bd10      	pop	{r4, pc}

08011da6 <__swrite>:
 8011da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011daa:	461f      	mov	r7, r3
 8011dac:	898b      	ldrh	r3, [r1, #12]
 8011dae:	05db      	lsls	r3, r3, #23
 8011db0:	4605      	mov	r5, r0
 8011db2:	460c      	mov	r4, r1
 8011db4:	4616      	mov	r6, r2
 8011db6:	d505      	bpl.n	8011dc4 <__swrite+0x1e>
 8011db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbc:	2302      	movs	r3, #2
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f000 f9ae 	bl	8012120 <_lseek_r>
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011dce:	81a3      	strh	r3, [r4, #12]
 8011dd0:	4632      	mov	r2, r6
 8011dd2:	463b      	mov	r3, r7
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dda:	f000 b9c5 	b.w	8012168 <_write_r>

08011dde <__sseek>:
 8011dde:	b510      	push	{r4, lr}
 8011de0:	460c      	mov	r4, r1
 8011de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011de6:	f000 f99b 	bl	8012120 <_lseek_r>
 8011dea:	1c43      	adds	r3, r0, #1
 8011dec:	89a3      	ldrh	r3, [r4, #12]
 8011dee:	bf15      	itete	ne
 8011df0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011df2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011df6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011dfa:	81a3      	strheq	r3, [r4, #12]
 8011dfc:	bf18      	it	ne
 8011dfe:	81a3      	strhne	r3, [r4, #12]
 8011e00:	bd10      	pop	{r4, pc}

08011e02 <__sclose>:
 8011e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e06:	f000 b91d 	b.w	8012044 <_close_r>

08011e0a <__swbuf_r>:
 8011e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0c:	460e      	mov	r6, r1
 8011e0e:	4614      	mov	r4, r2
 8011e10:	4605      	mov	r5, r0
 8011e12:	b118      	cbz	r0, 8011e1c <__swbuf_r+0x12>
 8011e14:	6a03      	ldr	r3, [r0, #32]
 8011e16:	b90b      	cbnz	r3, 8011e1c <__swbuf_r+0x12>
 8011e18:	f7ff fed8 	bl	8011bcc <__sinit>
 8011e1c:	69a3      	ldr	r3, [r4, #24]
 8011e1e:	60a3      	str	r3, [r4, #8]
 8011e20:	89a3      	ldrh	r3, [r4, #12]
 8011e22:	071a      	lsls	r2, r3, #28
 8011e24:	d501      	bpl.n	8011e2a <__swbuf_r+0x20>
 8011e26:	6923      	ldr	r3, [r4, #16]
 8011e28:	b943      	cbnz	r3, 8011e3c <__swbuf_r+0x32>
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	f000 f82b 	bl	8011e88 <__swsetup_r>
 8011e32:	b118      	cbz	r0, 8011e3c <__swbuf_r+0x32>
 8011e34:	f04f 37ff 	mov.w	r7, #4294967295
 8011e38:	4638      	mov	r0, r7
 8011e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e3c:	6823      	ldr	r3, [r4, #0]
 8011e3e:	6922      	ldr	r2, [r4, #16]
 8011e40:	1a98      	subs	r0, r3, r2
 8011e42:	6963      	ldr	r3, [r4, #20]
 8011e44:	b2f6      	uxtb	r6, r6
 8011e46:	4283      	cmp	r3, r0
 8011e48:	4637      	mov	r7, r6
 8011e4a:	dc05      	bgt.n	8011e58 <__swbuf_r+0x4e>
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f002 fc7e 	bl	8014750 <_fflush_r>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d1ed      	bne.n	8011e34 <__swbuf_r+0x2a>
 8011e58:	68a3      	ldr	r3, [r4, #8]
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	60a3      	str	r3, [r4, #8]
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	6022      	str	r2, [r4, #0]
 8011e64:	701e      	strb	r6, [r3, #0]
 8011e66:	6962      	ldr	r2, [r4, #20]
 8011e68:	1c43      	adds	r3, r0, #1
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d004      	beq.n	8011e78 <__swbuf_r+0x6e>
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	07db      	lsls	r3, r3, #31
 8011e72:	d5e1      	bpl.n	8011e38 <__swbuf_r+0x2e>
 8011e74:	2e0a      	cmp	r6, #10
 8011e76:	d1df      	bne.n	8011e38 <__swbuf_r+0x2e>
 8011e78:	4621      	mov	r1, r4
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f002 fc68 	bl	8014750 <_fflush_r>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d0d9      	beq.n	8011e38 <__swbuf_r+0x2e>
 8011e84:	e7d6      	b.n	8011e34 <__swbuf_r+0x2a>
	...

08011e88 <__swsetup_r>:
 8011e88:	b538      	push	{r3, r4, r5, lr}
 8011e8a:	4b29      	ldr	r3, [pc, #164]	@ (8011f30 <__swsetup_r+0xa8>)
 8011e8c:	4605      	mov	r5, r0
 8011e8e:	6818      	ldr	r0, [r3, #0]
 8011e90:	460c      	mov	r4, r1
 8011e92:	b118      	cbz	r0, 8011e9c <__swsetup_r+0x14>
 8011e94:	6a03      	ldr	r3, [r0, #32]
 8011e96:	b90b      	cbnz	r3, 8011e9c <__swsetup_r+0x14>
 8011e98:	f7ff fe98 	bl	8011bcc <__sinit>
 8011e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ea0:	0719      	lsls	r1, r3, #28
 8011ea2:	d422      	bmi.n	8011eea <__swsetup_r+0x62>
 8011ea4:	06da      	lsls	r2, r3, #27
 8011ea6:	d407      	bmi.n	8011eb8 <__swsetup_r+0x30>
 8011ea8:	2209      	movs	r2, #9
 8011eaa:	602a      	str	r2, [r5, #0]
 8011eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eb0:	81a3      	strh	r3, [r4, #12]
 8011eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb6:	e033      	b.n	8011f20 <__swsetup_r+0x98>
 8011eb8:	0758      	lsls	r0, r3, #29
 8011eba:	d512      	bpl.n	8011ee2 <__swsetup_r+0x5a>
 8011ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ebe:	b141      	cbz	r1, 8011ed2 <__swsetup_r+0x4a>
 8011ec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ec4:	4299      	cmp	r1, r3
 8011ec6:	d002      	beq.n	8011ece <__swsetup_r+0x46>
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f001 f821 	bl	8012f10 <_free_r>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ed2:	89a3      	ldrh	r3, [r4, #12]
 8011ed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ed8:	81a3      	strh	r3, [r4, #12]
 8011eda:	2300      	movs	r3, #0
 8011edc:	6063      	str	r3, [r4, #4]
 8011ede:	6923      	ldr	r3, [r4, #16]
 8011ee0:	6023      	str	r3, [r4, #0]
 8011ee2:	89a3      	ldrh	r3, [r4, #12]
 8011ee4:	f043 0308 	orr.w	r3, r3, #8
 8011ee8:	81a3      	strh	r3, [r4, #12]
 8011eea:	6923      	ldr	r3, [r4, #16]
 8011eec:	b94b      	cbnz	r3, 8011f02 <__swsetup_r+0x7a>
 8011eee:	89a3      	ldrh	r3, [r4, #12]
 8011ef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ef8:	d003      	beq.n	8011f02 <__swsetup_r+0x7a>
 8011efa:	4621      	mov	r1, r4
 8011efc:	4628      	mov	r0, r5
 8011efe:	f002 fc87 	bl	8014810 <__smakebuf_r>
 8011f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f06:	f013 0201 	ands.w	r2, r3, #1
 8011f0a:	d00a      	beq.n	8011f22 <__swsetup_r+0x9a>
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	60a2      	str	r2, [r4, #8]
 8011f10:	6962      	ldr	r2, [r4, #20]
 8011f12:	4252      	negs	r2, r2
 8011f14:	61a2      	str	r2, [r4, #24]
 8011f16:	6922      	ldr	r2, [r4, #16]
 8011f18:	b942      	cbnz	r2, 8011f2c <__swsetup_r+0xa4>
 8011f1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f1e:	d1c5      	bne.n	8011eac <__swsetup_r+0x24>
 8011f20:	bd38      	pop	{r3, r4, r5, pc}
 8011f22:	0799      	lsls	r1, r3, #30
 8011f24:	bf58      	it	pl
 8011f26:	6962      	ldrpl	r2, [r4, #20]
 8011f28:	60a2      	str	r2, [r4, #8]
 8011f2a:	e7f4      	b.n	8011f16 <__swsetup_r+0x8e>
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	e7f7      	b.n	8011f20 <__swsetup_r+0x98>
 8011f30:	2000018c 	.word	0x2000018c

08011f34 <memset>:
 8011f34:	4402      	add	r2, r0
 8011f36:	4603      	mov	r3, r0
 8011f38:	4293      	cmp	r3, r2
 8011f3a:	d100      	bne.n	8011f3e <memset+0xa>
 8011f3c:	4770      	bx	lr
 8011f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8011f42:	e7f9      	b.n	8011f38 <memset+0x4>

08011f44 <strchr>:
 8011f44:	b2c9      	uxtb	r1, r1
 8011f46:	4603      	mov	r3, r0
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f4e:	b112      	cbz	r2, 8011f56 <strchr+0x12>
 8011f50:	428a      	cmp	r2, r1
 8011f52:	d1f9      	bne.n	8011f48 <strchr+0x4>
 8011f54:	4770      	bx	lr
 8011f56:	2900      	cmp	r1, #0
 8011f58:	bf18      	it	ne
 8011f5a:	2000      	movne	r0, #0
 8011f5c:	4770      	bx	lr

08011f5e <strncmp>:
 8011f5e:	b510      	push	{r4, lr}
 8011f60:	b16a      	cbz	r2, 8011f7e <strncmp+0x20>
 8011f62:	3901      	subs	r1, #1
 8011f64:	1884      	adds	r4, r0, r2
 8011f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d103      	bne.n	8011f7a <strncmp+0x1c>
 8011f72:	42a0      	cmp	r0, r4
 8011f74:	d001      	beq.n	8011f7a <strncmp+0x1c>
 8011f76:	2a00      	cmp	r2, #0
 8011f78:	d1f5      	bne.n	8011f66 <strncmp+0x8>
 8011f7a:	1ad0      	subs	r0, r2, r3
 8011f7c:	bd10      	pop	{r4, pc}
 8011f7e:	4610      	mov	r0, r2
 8011f80:	e7fc      	b.n	8011f7c <strncmp+0x1e>
	...

08011f84 <strtok>:
 8011f84:	4b16      	ldr	r3, [pc, #88]	@ (8011fe0 <strtok+0x5c>)
 8011f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8a:	681f      	ldr	r7, [r3, #0]
 8011f8c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8011f8e:	4605      	mov	r5, r0
 8011f90:	460e      	mov	r6, r1
 8011f92:	b9ec      	cbnz	r4, 8011fd0 <strtok+0x4c>
 8011f94:	2050      	movs	r0, #80	@ 0x50
 8011f96:	f001 fb3f 	bl	8013618 <malloc>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	6478      	str	r0, [r7, #68]	@ 0x44
 8011f9e:	b920      	cbnz	r0, 8011faa <strtok+0x26>
 8011fa0:	4b10      	ldr	r3, [pc, #64]	@ (8011fe4 <strtok+0x60>)
 8011fa2:	4811      	ldr	r0, [pc, #68]	@ (8011fe8 <strtok+0x64>)
 8011fa4:	215b      	movs	r1, #91	@ 0x5b
 8011fa6:	f000 f93d 	bl	8012224 <__assert_func>
 8011faa:	e9c0 4400 	strd	r4, r4, [r0]
 8011fae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011fb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011fb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8011fba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8011fbe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8011fc2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8011fc6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8011fca:	6184      	str	r4, [r0, #24]
 8011fcc:	7704      	strb	r4, [r0, #28]
 8011fce:	6244      	str	r4, [r0, #36]	@ 0x24
 8011fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011fd2:	4631      	mov	r1, r6
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	f000 b806 	b.w	8011fec <__strtok_r>
 8011fe0:	2000018c 	.word	0x2000018c
 8011fe4:	08014cd2 	.word	0x08014cd2
 8011fe8:	08014ce9 	.word	0x08014ce9

08011fec <__strtok_r>:
 8011fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fee:	4604      	mov	r4, r0
 8011ff0:	b908      	cbnz	r0, 8011ff6 <__strtok_r+0xa>
 8011ff2:	6814      	ldr	r4, [r2, #0]
 8011ff4:	b144      	cbz	r4, 8012008 <__strtok_r+0x1c>
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011ffc:	460f      	mov	r7, r1
 8011ffe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012002:	b91e      	cbnz	r6, 801200c <__strtok_r+0x20>
 8012004:	b965      	cbnz	r5, 8012020 <__strtok_r+0x34>
 8012006:	6015      	str	r5, [r2, #0]
 8012008:	2000      	movs	r0, #0
 801200a:	e005      	b.n	8012018 <__strtok_r+0x2c>
 801200c:	42b5      	cmp	r5, r6
 801200e:	d1f6      	bne.n	8011ffe <__strtok_r+0x12>
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1f0      	bne.n	8011ff6 <__strtok_r+0xa>
 8012014:	6014      	str	r4, [r2, #0]
 8012016:	7003      	strb	r3, [r0, #0]
 8012018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801201a:	461c      	mov	r4, r3
 801201c:	e00c      	b.n	8012038 <__strtok_r+0x4c>
 801201e:	b91d      	cbnz	r5, 8012028 <__strtok_r+0x3c>
 8012020:	4627      	mov	r7, r4
 8012022:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012026:	460e      	mov	r6, r1
 8012028:	f816 5b01 	ldrb.w	r5, [r6], #1
 801202c:	42ab      	cmp	r3, r5
 801202e:	d1f6      	bne.n	801201e <__strtok_r+0x32>
 8012030:	2b00      	cmp	r3, #0
 8012032:	d0f2      	beq.n	801201a <__strtok_r+0x2e>
 8012034:	2300      	movs	r3, #0
 8012036:	703b      	strb	r3, [r7, #0]
 8012038:	6014      	str	r4, [r2, #0]
 801203a:	e7ed      	b.n	8012018 <__strtok_r+0x2c>

0801203c <_localeconv_r>:
 801203c:	4800      	ldr	r0, [pc, #0]	@ (8012040 <_localeconv_r+0x4>)
 801203e:	4770      	bx	lr
 8012040:	20000110 	.word	0x20000110

08012044 <_close_r>:
 8012044:	b538      	push	{r3, r4, r5, lr}
 8012046:	4d06      	ldr	r5, [pc, #24]	@ (8012060 <_close_r+0x1c>)
 8012048:	2300      	movs	r3, #0
 801204a:	4604      	mov	r4, r0
 801204c:	4608      	mov	r0, r1
 801204e:	602b      	str	r3, [r5, #0]
 8012050:	f7f1 fcc8 	bl	80039e4 <_close>
 8012054:	1c43      	adds	r3, r0, #1
 8012056:	d102      	bne.n	801205e <_close_r+0x1a>
 8012058:	682b      	ldr	r3, [r5, #0]
 801205a:	b103      	cbz	r3, 801205e <_close_r+0x1a>
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	20004f0c 	.word	0x20004f0c

08012064 <_reclaim_reent>:
 8012064:	4b2d      	ldr	r3, [pc, #180]	@ (801211c <_reclaim_reent+0xb8>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4283      	cmp	r3, r0
 801206a:	b570      	push	{r4, r5, r6, lr}
 801206c:	4604      	mov	r4, r0
 801206e:	d053      	beq.n	8012118 <_reclaim_reent+0xb4>
 8012070:	69c3      	ldr	r3, [r0, #28]
 8012072:	b31b      	cbz	r3, 80120bc <_reclaim_reent+0x58>
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	b163      	cbz	r3, 8012092 <_reclaim_reent+0x2e>
 8012078:	2500      	movs	r5, #0
 801207a:	69e3      	ldr	r3, [r4, #28]
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	5959      	ldr	r1, [r3, r5]
 8012080:	b9b1      	cbnz	r1, 80120b0 <_reclaim_reent+0x4c>
 8012082:	3504      	adds	r5, #4
 8012084:	2d80      	cmp	r5, #128	@ 0x80
 8012086:	d1f8      	bne.n	801207a <_reclaim_reent+0x16>
 8012088:	69e3      	ldr	r3, [r4, #28]
 801208a:	4620      	mov	r0, r4
 801208c:	68d9      	ldr	r1, [r3, #12]
 801208e:	f000 ff3f 	bl	8012f10 <_free_r>
 8012092:	69e3      	ldr	r3, [r4, #28]
 8012094:	6819      	ldr	r1, [r3, #0]
 8012096:	b111      	cbz	r1, 801209e <_reclaim_reent+0x3a>
 8012098:	4620      	mov	r0, r4
 801209a:	f000 ff39 	bl	8012f10 <_free_r>
 801209e:	69e3      	ldr	r3, [r4, #28]
 80120a0:	689d      	ldr	r5, [r3, #8]
 80120a2:	b15d      	cbz	r5, 80120bc <_reclaim_reent+0x58>
 80120a4:	4629      	mov	r1, r5
 80120a6:	4620      	mov	r0, r4
 80120a8:	682d      	ldr	r5, [r5, #0]
 80120aa:	f000 ff31 	bl	8012f10 <_free_r>
 80120ae:	e7f8      	b.n	80120a2 <_reclaim_reent+0x3e>
 80120b0:	680e      	ldr	r6, [r1, #0]
 80120b2:	4620      	mov	r0, r4
 80120b4:	f000 ff2c 	bl	8012f10 <_free_r>
 80120b8:	4631      	mov	r1, r6
 80120ba:	e7e1      	b.n	8012080 <_reclaim_reent+0x1c>
 80120bc:	6961      	ldr	r1, [r4, #20]
 80120be:	b111      	cbz	r1, 80120c6 <_reclaim_reent+0x62>
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 ff25 	bl	8012f10 <_free_r>
 80120c6:	69e1      	ldr	r1, [r4, #28]
 80120c8:	b111      	cbz	r1, 80120d0 <_reclaim_reent+0x6c>
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 ff20 	bl	8012f10 <_free_r>
 80120d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80120d2:	b111      	cbz	r1, 80120da <_reclaim_reent+0x76>
 80120d4:	4620      	mov	r0, r4
 80120d6:	f000 ff1b 	bl	8012f10 <_free_r>
 80120da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120dc:	b111      	cbz	r1, 80120e4 <_reclaim_reent+0x80>
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 ff16 	bl	8012f10 <_free_r>
 80120e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80120e6:	b111      	cbz	r1, 80120ee <_reclaim_reent+0x8a>
 80120e8:	4620      	mov	r0, r4
 80120ea:	f000 ff11 	bl	8012f10 <_free_r>
 80120ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80120f0:	b111      	cbz	r1, 80120f8 <_reclaim_reent+0x94>
 80120f2:	4620      	mov	r0, r4
 80120f4:	f000 ff0c 	bl	8012f10 <_free_r>
 80120f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80120fa:	b111      	cbz	r1, 8012102 <_reclaim_reent+0x9e>
 80120fc:	4620      	mov	r0, r4
 80120fe:	f000 ff07 	bl	8012f10 <_free_r>
 8012102:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012104:	b111      	cbz	r1, 801210c <_reclaim_reent+0xa8>
 8012106:	4620      	mov	r0, r4
 8012108:	f000 ff02 	bl	8012f10 <_free_r>
 801210c:	6a23      	ldr	r3, [r4, #32]
 801210e:	b11b      	cbz	r3, 8012118 <_reclaim_reent+0xb4>
 8012110:	4620      	mov	r0, r4
 8012112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012116:	4718      	bx	r3
 8012118:	bd70      	pop	{r4, r5, r6, pc}
 801211a:	bf00      	nop
 801211c:	2000018c 	.word	0x2000018c

08012120 <_lseek_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	4d07      	ldr	r5, [pc, #28]	@ (8012140 <_lseek_r+0x20>)
 8012124:	4604      	mov	r4, r0
 8012126:	4608      	mov	r0, r1
 8012128:	4611      	mov	r1, r2
 801212a:	2200      	movs	r2, #0
 801212c:	602a      	str	r2, [r5, #0]
 801212e:	461a      	mov	r2, r3
 8012130:	f7f1 fc7f 	bl	8003a32 <_lseek>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d102      	bne.n	801213e <_lseek_r+0x1e>
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	b103      	cbz	r3, 801213e <_lseek_r+0x1e>
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	bd38      	pop	{r3, r4, r5, pc}
 8012140:	20004f0c 	.word	0x20004f0c

08012144 <_read_r>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	4d07      	ldr	r5, [pc, #28]	@ (8012164 <_read_r+0x20>)
 8012148:	4604      	mov	r4, r0
 801214a:	4608      	mov	r0, r1
 801214c:	4611      	mov	r1, r2
 801214e:	2200      	movs	r2, #0
 8012150:	602a      	str	r2, [r5, #0]
 8012152:	461a      	mov	r2, r3
 8012154:	f7f1 fc0d 	bl	8003972 <_read>
 8012158:	1c43      	adds	r3, r0, #1
 801215a:	d102      	bne.n	8012162 <_read_r+0x1e>
 801215c:	682b      	ldr	r3, [r5, #0]
 801215e:	b103      	cbz	r3, 8012162 <_read_r+0x1e>
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	bd38      	pop	{r3, r4, r5, pc}
 8012164:	20004f0c 	.word	0x20004f0c

08012168 <_write_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4d07      	ldr	r5, [pc, #28]	@ (8012188 <_write_r+0x20>)
 801216c:	4604      	mov	r4, r0
 801216e:	4608      	mov	r0, r1
 8012170:	4611      	mov	r1, r2
 8012172:	2200      	movs	r2, #0
 8012174:	602a      	str	r2, [r5, #0]
 8012176:	461a      	mov	r2, r3
 8012178:	f7f1 fc18 	bl	80039ac <_write>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_write_r+0x1e>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_write_r+0x1e>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20004f0c 	.word	0x20004f0c

0801218c <__errno>:
 801218c:	4b01      	ldr	r3, [pc, #4]	@ (8012194 <__errno+0x8>)
 801218e:	6818      	ldr	r0, [r3, #0]
 8012190:	4770      	bx	lr
 8012192:	bf00      	nop
 8012194:	2000018c 	.word	0x2000018c

08012198 <__libc_init_array>:
 8012198:	b570      	push	{r4, r5, r6, lr}
 801219a:	4d0d      	ldr	r5, [pc, #52]	@ (80121d0 <__libc_init_array+0x38>)
 801219c:	4c0d      	ldr	r4, [pc, #52]	@ (80121d4 <__libc_init_array+0x3c>)
 801219e:	1b64      	subs	r4, r4, r5
 80121a0:	10a4      	asrs	r4, r4, #2
 80121a2:	2600      	movs	r6, #0
 80121a4:	42a6      	cmp	r6, r4
 80121a6:	d109      	bne.n	80121bc <__libc_init_array+0x24>
 80121a8:	4d0b      	ldr	r5, [pc, #44]	@ (80121d8 <__libc_init_array+0x40>)
 80121aa:	4c0c      	ldr	r4, [pc, #48]	@ (80121dc <__libc_init_array+0x44>)
 80121ac:	f002 fc4e 	bl	8014a4c <_init>
 80121b0:	1b64      	subs	r4, r4, r5
 80121b2:	10a4      	asrs	r4, r4, #2
 80121b4:	2600      	movs	r6, #0
 80121b6:	42a6      	cmp	r6, r4
 80121b8:	d105      	bne.n	80121c6 <__libc_init_array+0x2e>
 80121ba:	bd70      	pop	{r4, r5, r6, pc}
 80121bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80121c0:	4798      	blx	r3
 80121c2:	3601      	adds	r6, #1
 80121c4:	e7ee      	b.n	80121a4 <__libc_init_array+0xc>
 80121c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ca:	4798      	blx	r3
 80121cc:	3601      	adds	r6, #1
 80121ce:	e7f2      	b.n	80121b6 <__libc_init_array+0x1e>
 80121d0:	08015120 	.word	0x08015120
 80121d4:	08015120 	.word	0x08015120
 80121d8:	08015120 	.word	0x08015120
 80121dc:	08015124 	.word	0x08015124

080121e0 <__retarget_lock_init_recursive>:
 80121e0:	4770      	bx	lr

080121e2 <__retarget_lock_acquire_recursive>:
 80121e2:	4770      	bx	lr

080121e4 <__retarget_lock_release_recursive>:
 80121e4:	4770      	bx	lr

080121e6 <memcpy>:
 80121e6:	440a      	add	r2, r1
 80121e8:	4291      	cmp	r1, r2
 80121ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80121ee:	d100      	bne.n	80121f2 <memcpy+0xc>
 80121f0:	4770      	bx	lr
 80121f2:	b510      	push	{r4, lr}
 80121f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121fc:	4291      	cmp	r1, r2
 80121fe:	d1f9      	bne.n	80121f4 <memcpy+0xe>
 8012200:	bd10      	pop	{r4, pc}
 8012202:	0000      	movs	r0, r0
 8012204:	0000      	movs	r0, r0
	...

08012208 <nan>:
 8012208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012210 <nan+0x8>
 801220c:	4770      	bx	lr
 801220e:	bf00      	nop
 8012210:	00000000 	.word	0x00000000
 8012214:	7ff80000 	.word	0x7ff80000

08012218 <nanf>:
 8012218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012220 <nanf+0x8>
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	7fc00000 	.word	0x7fc00000

08012224 <__assert_func>:
 8012224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012226:	4614      	mov	r4, r2
 8012228:	461a      	mov	r2, r3
 801222a:	4b09      	ldr	r3, [pc, #36]	@ (8012250 <__assert_func+0x2c>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4605      	mov	r5, r0
 8012230:	68d8      	ldr	r0, [r3, #12]
 8012232:	b14c      	cbz	r4, 8012248 <__assert_func+0x24>
 8012234:	4b07      	ldr	r3, [pc, #28]	@ (8012254 <__assert_func+0x30>)
 8012236:	9100      	str	r1, [sp, #0]
 8012238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801223c:	4906      	ldr	r1, [pc, #24]	@ (8012258 <__assert_func+0x34>)
 801223e:	462b      	mov	r3, r5
 8012240:	f002 faae 	bl	80147a0 <fiprintf>
 8012244:	f002 fb6c 	bl	8014920 <abort>
 8012248:	4b04      	ldr	r3, [pc, #16]	@ (801225c <__assert_func+0x38>)
 801224a:	461c      	mov	r4, r3
 801224c:	e7f3      	b.n	8012236 <__assert_func+0x12>
 801224e:	bf00      	nop
 8012250:	2000018c 	.word	0x2000018c
 8012254:	08014d4b 	.word	0x08014d4b
 8012258:	08014d58 	.word	0x08014d58
 801225c:	08014d86 	.word	0x08014d86

08012260 <quorem>:
 8012260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	6903      	ldr	r3, [r0, #16]
 8012266:	690c      	ldr	r4, [r1, #16]
 8012268:	42a3      	cmp	r3, r4
 801226a:	4607      	mov	r7, r0
 801226c:	db7e      	blt.n	801236c <quorem+0x10c>
 801226e:	3c01      	subs	r4, #1
 8012270:	f101 0814 	add.w	r8, r1, #20
 8012274:	00a3      	lsls	r3, r4, #2
 8012276:	f100 0514 	add.w	r5, r0, #20
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012280:	9301      	str	r3, [sp, #4]
 8012282:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801228a:	3301      	adds	r3, #1
 801228c:	429a      	cmp	r2, r3
 801228e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012292:	fbb2 f6f3 	udiv	r6, r2, r3
 8012296:	d32e      	bcc.n	80122f6 <quorem+0x96>
 8012298:	f04f 0a00 	mov.w	sl, #0
 801229c:	46c4      	mov	ip, r8
 801229e:	46ae      	mov	lr, r5
 80122a0:	46d3      	mov	fp, sl
 80122a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80122a6:	b298      	uxth	r0, r3
 80122a8:	fb06 a000 	mla	r0, r6, r0, sl
 80122ac:	0c02      	lsrs	r2, r0, #16
 80122ae:	0c1b      	lsrs	r3, r3, #16
 80122b0:	fb06 2303 	mla	r3, r6, r3, r2
 80122b4:	f8de 2000 	ldr.w	r2, [lr]
 80122b8:	b280      	uxth	r0, r0
 80122ba:	b292      	uxth	r2, r2
 80122bc:	1a12      	subs	r2, r2, r0
 80122be:	445a      	add	r2, fp
 80122c0:	f8de 0000 	ldr.w	r0, [lr]
 80122c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80122ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80122d2:	b292      	uxth	r2, r2
 80122d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80122d8:	45e1      	cmp	r9, ip
 80122da:	f84e 2b04 	str.w	r2, [lr], #4
 80122de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80122e2:	d2de      	bcs.n	80122a2 <quorem+0x42>
 80122e4:	9b00      	ldr	r3, [sp, #0]
 80122e6:	58eb      	ldr	r3, [r5, r3]
 80122e8:	b92b      	cbnz	r3, 80122f6 <quorem+0x96>
 80122ea:	9b01      	ldr	r3, [sp, #4]
 80122ec:	3b04      	subs	r3, #4
 80122ee:	429d      	cmp	r5, r3
 80122f0:	461a      	mov	r2, r3
 80122f2:	d32f      	bcc.n	8012354 <quorem+0xf4>
 80122f4:	613c      	str	r4, [r7, #16]
 80122f6:	4638      	mov	r0, r7
 80122f8:	f001 fd12 	bl	8013d20 <__mcmp>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	db25      	blt.n	801234c <quorem+0xec>
 8012300:	4629      	mov	r1, r5
 8012302:	2000      	movs	r0, #0
 8012304:	f858 2b04 	ldr.w	r2, [r8], #4
 8012308:	f8d1 c000 	ldr.w	ip, [r1]
 801230c:	fa1f fe82 	uxth.w	lr, r2
 8012310:	fa1f f38c 	uxth.w	r3, ip
 8012314:	eba3 030e 	sub.w	r3, r3, lr
 8012318:	4403      	add	r3, r0
 801231a:	0c12      	lsrs	r2, r2, #16
 801231c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012320:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012324:	b29b      	uxth	r3, r3
 8012326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801232a:	45c1      	cmp	r9, r8
 801232c:	f841 3b04 	str.w	r3, [r1], #4
 8012330:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012334:	d2e6      	bcs.n	8012304 <quorem+0xa4>
 8012336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801233a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801233e:	b922      	cbnz	r2, 801234a <quorem+0xea>
 8012340:	3b04      	subs	r3, #4
 8012342:	429d      	cmp	r5, r3
 8012344:	461a      	mov	r2, r3
 8012346:	d30b      	bcc.n	8012360 <quorem+0x100>
 8012348:	613c      	str	r4, [r7, #16]
 801234a:	3601      	adds	r6, #1
 801234c:	4630      	mov	r0, r6
 801234e:	b003      	add	sp, #12
 8012350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012354:	6812      	ldr	r2, [r2, #0]
 8012356:	3b04      	subs	r3, #4
 8012358:	2a00      	cmp	r2, #0
 801235a:	d1cb      	bne.n	80122f4 <quorem+0x94>
 801235c:	3c01      	subs	r4, #1
 801235e:	e7c6      	b.n	80122ee <quorem+0x8e>
 8012360:	6812      	ldr	r2, [r2, #0]
 8012362:	3b04      	subs	r3, #4
 8012364:	2a00      	cmp	r2, #0
 8012366:	d1ef      	bne.n	8012348 <quorem+0xe8>
 8012368:	3c01      	subs	r4, #1
 801236a:	e7ea      	b.n	8012342 <quorem+0xe2>
 801236c:	2000      	movs	r0, #0
 801236e:	e7ee      	b.n	801234e <quorem+0xee>

08012370 <_dtoa_r>:
 8012370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012374:	69c7      	ldr	r7, [r0, #28]
 8012376:	b097      	sub	sp, #92	@ 0x5c
 8012378:	ed8d 0b04 	vstr	d0, [sp, #16]
 801237c:	ec55 4b10 	vmov	r4, r5, d0
 8012380:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8012382:	9107      	str	r1, [sp, #28]
 8012384:	4681      	mov	r9, r0
 8012386:	920c      	str	r2, [sp, #48]	@ 0x30
 8012388:	9311      	str	r3, [sp, #68]	@ 0x44
 801238a:	b97f      	cbnz	r7, 80123ac <_dtoa_r+0x3c>
 801238c:	2010      	movs	r0, #16
 801238e:	f001 f943 	bl	8013618 <malloc>
 8012392:	4602      	mov	r2, r0
 8012394:	f8c9 001c 	str.w	r0, [r9, #28]
 8012398:	b920      	cbnz	r0, 80123a4 <_dtoa_r+0x34>
 801239a:	4ba9      	ldr	r3, [pc, #676]	@ (8012640 <_dtoa_r+0x2d0>)
 801239c:	21ef      	movs	r1, #239	@ 0xef
 801239e:	48a9      	ldr	r0, [pc, #676]	@ (8012644 <_dtoa_r+0x2d4>)
 80123a0:	f7ff ff40 	bl	8012224 <__assert_func>
 80123a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80123a8:	6007      	str	r7, [r0, #0]
 80123aa:	60c7      	str	r7, [r0, #12]
 80123ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80123b0:	6819      	ldr	r1, [r3, #0]
 80123b2:	b159      	cbz	r1, 80123cc <_dtoa_r+0x5c>
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	604a      	str	r2, [r1, #4]
 80123b8:	2301      	movs	r3, #1
 80123ba:	4093      	lsls	r3, r2
 80123bc:	608b      	str	r3, [r1, #8]
 80123be:	4648      	mov	r0, r9
 80123c0:	f001 fa32 	bl	8013828 <_Bfree>
 80123c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80123c8:	2200      	movs	r2, #0
 80123ca:	601a      	str	r2, [r3, #0]
 80123cc:	1e2b      	subs	r3, r5, #0
 80123ce:	bfb9      	ittee	lt
 80123d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80123d4:	9305      	strlt	r3, [sp, #20]
 80123d6:	2300      	movge	r3, #0
 80123d8:	6033      	strge	r3, [r6, #0]
 80123da:	9f05      	ldr	r7, [sp, #20]
 80123dc:	4b9a      	ldr	r3, [pc, #616]	@ (8012648 <_dtoa_r+0x2d8>)
 80123de:	bfbc      	itt	lt
 80123e0:	2201      	movlt	r2, #1
 80123e2:	6032      	strlt	r2, [r6, #0]
 80123e4:	43bb      	bics	r3, r7
 80123e6:	d112      	bne.n	801240e <_dtoa_r+0x9e>
 80123e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80123ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80123ee:	6013      	str	r3, [r2, #0]
 80123f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123f4:	4323      	orrs	r3, r4
 80123f6:	f000 855a 	beq.w	8012eae <_dtoa_r+0xb3e>
 80123fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80123fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801265c <_dtoa_r+0x2ec>
 8012400:	2b00      	cmp	r3, #0
 8012402:	f000 855c 	beq.w	8012ebe <_dtoa_r+0xb4e>
 8012406:	f10a 0303 	add.w	r3, sl, #3
 801240a:	f000 bd56 	b.w	8012eba <_dtoa_r+0xb4a>
 801240e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012412:	2200      	movs	r2, #0
 8012414:	ec51 0b17 	vmov	r0, r1, d7
 8012418:	2300      	movs	r3, #0
 801241a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801241e:	f7ee fb73 	bl	8000b08 <__aeabi_dcmpeq>
 8012422:	4680      	mov	r8, r0
 8012424:	b158      	cbz	r0, 801243e <_dtoa_r+0xce>
 8012426:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012428:	2301      	movs	r3, #1
 801242a:	6013      	str	r3, [r2, #0]
 801242c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801242e:	b113      	cbz	r3, 8012436 <_dtoa_r+0xc6>
 8012430:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012432:	4b86      	ldr	r3, [pc, #536]	@ (801264c <_dtoa_r+0x2dc>)
 8012434:	6013      	str	r3, [r2, #0]
 8012436:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8012660 <_dtoa_r+0x2f0>
 801243a:	f000 bd40 	b.w	8012ebe <_dtoa_r+0xb4e>
 801243e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8012442:	aa14      	add	r2, sp, #80	@ 0x50
 8012444:	a915      	add	r1, sp, #84	@ 0x54
 8012446:	4648      	mov	r0, r9
 8012448:	f001 fd8a 	bl	8013f60 <__d2b>
 801244c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012450:	9002      	str	r0, [sp, #8]
 8012452:	2e00      	cmp	r6, #0
 8012454:	d078      	beq.n	8012548 <_dtoa_r+0x1d8>
 8012456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012458:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801245c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801246c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012470:	4619      	mov	r1, r3
 8012472:	2200      	movs	r2, #0
 8012474:	4b76      	ldr	r3, [pc, #472]	@ (8012650 <_dtoa_r+0x2e0>)
 8012476:	f7ed ff27 	bl	80002c8 <__aeabi_dsub>
 801247a:	a36b      	add	r3, pc, #428	@ (adr r3, 8012628 <_dtoa_r+0x2b8>)
 801247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012480:	f7ee f8da 	bl	8000638 <__aeabi_dmul>
 8012484:	a36a      	add	r3, pc, #424	@ (adr r3, 8012630 <_dtoa_r+0x2c0>)
 8012486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248a:	f7ed ff1f 	bl	80002cc <__adddf3>
 801248e:	4604      	mov	r4, r0
 8012490:	4630      	mov	r0, r6
 8012492:	460d      	mov	r5, r1
 8012494:	f7ee f866 	bl	8000564 <__aeabi_i2d>
 8012498:	a367      	add	r3, pc, #412	@ (adr r3, 8012638 <_dtoa_r+0x2c8>)
 801249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249e:	f7ee f8cb 	bl	8000638 <__aeabi_dmul>
 80124a2:	4602      	mov	r2, r0
 80124a4:	460b      	mov	r3, r1
 80124a6:	4620      	mov	r0, r4
 80124a8:	4629      	mov	r1, r5
 80124aa:	f7ed ff0f 	bl	80002cc <__adddf3>
 80124ae:	4604      	mov	r4, r0
 80124b0:	460d      	mov	r5, r1
 80124b2:	f7ee fb71 	bl	8000b98 <__aeabi_d2iz>
 80124b6:	2200      	movs	r2, #0
 80124b8:	4607      	mov	r7, r0
 80124ba:	2300      	movs	r3, #0
 80124bc:	4620      	mov	r0, r4
 80124be:	4629      	mov	r1, r5
 80124c0:	f7ee fb2c 	bl	8000b1c <__aeabi_dcmplt>
 80124c4:	b140      	cbz	r0, 80124d8 <_dtoa_r+0x168>
 80124c6:	4638      	mov	r0, r7
 80124c8:	f7ee f84c 	bl	8000564 <__aeabi_i2d>
 80124cc:	4622      	mov	r2, r4
 80124ce:	462b      	mov	r3, r5
 80124d0:	f7ee fb1a 	bl	8000b08 <__aeabi_dcmpeq>
 80124d4:	b900      	cbnz	r0, 80124d8 <_dtoa_r+0x168>
 80124d6:	3f01      	subs	r7, #1
 80124d8:	2f16      	cmp	r7, #22
 80124da:	d852      	bhi.n	8012582 <_dtoa_r+0x212>
 80124dc:	4b5d      	ldr	r3, [pc, #372]	@ (8012654 <_dtoa_r+0x2e4>)
 80124de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80124ea:	f7ee fb17 	bl	8000b1c <__aeabi_dcmplt>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d049      	beq.n	8012586 <_dtoa_r+0x216>
 80124f2:	3f01      	subs	r7, #1
 80124f4:	2300      	movs	r3, #0
 80124f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80124f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80124fa:	1b9b      	subs	r3, r3, r6
 80124fc:	1e5a      	subs	r2, r3, #1
 80124fe:	bf45      	ittet	mi
 8012500:	f1c3 0301 	rsbmi	r3, r3, #1
 8012504:	9300      	strmi	r3, [sp, #0]
 8012506:	2300      	movpl	r3, #0
 8012508:	2300      	movmi	r3, #0
 801250a:	9206      	str	r2, [sp, #24]
 801250c:	bf54      	ite	pl
 801250e:	9300      	strpl	r3, [sp, #0]
 8012510:	9306      	strmi	r3, [sp, #24]
 8012512:	2f00      	cmp	r7, #0
 8012514:	db39      	blt.n	801258a <_dtoa_r+0x21a>
 8012516:	9b06      	ldr	r3, [sp, #24]
 8012518:	970d      	str	r7, [sp, #52]	@ 0x34
 801251a:	443b      	add	r3, r7
 801251c:	9306      	str	r3, [sp, #24]
 801251e:	2300      	movs	r3, #0
 8012520:	9308      	str	r3, [sp, #32]
 8012522:	9b07      	ldr	r3, [sp, #28]
 8012524:	2b09      	cmp	r3, #9
 8012526:	d863      	bhi.n	80125f0 <_dtoa_r+0x280>
 8012528:	2b05      	cmp	r3, #5
 801252a:	bfc4      	itt	gt
 801252c:	3b04      	subgt	r3, #4
 801252e:	9307      	strgt	r3, [sp, #28]
 8012530:	9b07      	ldr	r3, [sp, #28]
 8012532:	f1a3 0302 	sub.w	r3, r3, #2
 8012536:	bfcc      	ite	gt
 8012538:	2400      	movgt	r4, #0
 801253a:	2401      	movle	r4, #1
 801253c:	2b03      	cmp	r3, #3
 801253e:	d863      	bhi.n	8012608 <_dtoa_r+0x298>
 8012540:	e8df f003 	tbb	[pc, r3]
 8012544:	2b375452 	.word	0x2b375452
 8012548:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801254c:	441e      	add	r6, r3
 801254e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012552:	2b20      	cmp	r3, #32
 8012554:	bfc1      	itttt	gt
 8012556:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801255a:	409f      	lslgt	r7, r3
 801255c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012560:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012564:	bfd6      	itet	le
 8012566:	f1c3 0320 	rsble	r3, r3, #32
 801256a:	ea47 0003 	orrgt.w	r0, r7, r3
 801256e:	fa04 f003 	lslle.w	r0, r4, r3
 8012572:	f7ed ffe7 	bl	8000544 <__aeabi_ui2d>
 8012576:	2201      	movs	r2, #1
 8012578:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801257c:	3e01      	subs	r6, #1
 801257e:	9212      	str	r2, [sp, #72]	@ 0x48
 8012580:	e776      	b.n	8012470 <_dtoa_r+0x100>
 8012582:	2301      	movs	r3, #1
 8012584:	e7b7      	b.n	80124f6 <_dtoa_r+0x186>
 8012586:	9010      	str	r0, [sp, #64]	@ 0x40
 8012588:	e7b6      	b.n	80124f8 <_dtoa_r+0x188>
 801258a:	9b00      	ldr	r3, [sp, #0]
 801258c:	1bdb      	subs	r3, r3, r7
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	427b      	negs	r3, r7
 8012592:	9308      	str	r3, [sp, #32]
 8012594:	2300      	movs	r3, #0
 8012596:	930d      	str	r3, [sp, #52]	@ 0x34
 8012598:	e7c3      	b.n	8012522 <_dtoa_r+0x1b2>
 801259a:	2301      	movs	r3, #1
 801259c:	9309      	str	r3, [sp, #36]	@ 0x24
 801259e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125a0:	eb07 0b03 	add.w	fp, r7, r3
 80125a4:	f10b 0301 	add.w	r3, fp, #1
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	9303      	str	r3, [sp, #12]
 80125ac:	bfb8      	it	lt
 80125ae:	2301      	movlt	r3, #1
 80125b0:	e006      	b.n	80125c0 <_dtoa_r+0x250>
 80125b2:	2301      	movs	r3, #1
 80125b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80125b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	dd28      	ble.n	801260e <_dtoa_r+0x29e>
 80125bc:	469b      	mov	fp, r3
 80125be:	9303      	str	r3, [sp, #12]
 80125c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80125c4:	2100      	movs	r1, #0
 80125c6:	2204      	movs	r2, #4
 80125c8:	f102 0514 	add.w	r5, r2, #20
 80125cc:	429d      	cmp	r5, r3
 80125ce:	d926      	bls.n	801261e <_dtoa_r+0x2ae>
 80125d0:	6041      	str	r1, [r0, #4]
 80125d2:	4648      	mov	r0, r9
 80125d4:	f001 f8e8 	bl	80137a8 <_Balloc>
 80125d8:	4682      	mov	sl, r0
 80125da:	2800      	cmp	r0, #0
 80125dc:	d142      	bne.n	8012664 <_dtoa_r+0x2f4>
 80125de:	4b1e      	ldr	r3, [pc, #120]	@ (8012658 <_dtoa_r+0x2e8>)
 80125e0:	4602      	mov	r2, r0
 80125e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80125e6:	e6da      	b.n	801239e <_dtoa_r+0x2e>
 80125e8:	2300      	movs	r3, #0
 80125ea:	e7e3      	b.n	80125b4 <_dtoa_r+0x244>
 80125ec:	2300      	movs	r3, #0
 80125ee:	e7d5      	b.n	801259c <_dtoa_r+0x22c>
 80125f0:	2401      	movs	r4, #1
 80125f2:	2300      	movs	r3, #0
 80125f4:	9307      	str	r3, [sp, #28]
 80125f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80125f8:	f04f 3bff 	mov.w	fp, #4294967295
 80125fc:	2200      	movs	r2, #0
 80125fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8012602:	2312      	movs	r3, #18
 8012604:	920c      	str	r2, [sp, #48]	@ 0x30
 8012606:	e7db      	b.n	80125c0 <_dtoa_r+0x250>
 8012608:	2301      	movs	r3, #1
 801260a:	9309      	str	r3, [sp, #36]	@ 0x24
 801260c:	e7f4      	b.n	80125f8 <_dtoa_r+0x288>
 801260e:	f04f 0b01 	mov.w	fp, #1
 8012612:	f8cd b00c 	str.w	fp, [sp, #12]
 8012616:	465b      	mov	r3, fp
 8012618:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801261c:	e7d0      	b.n	80125c0 <_dtoa_r+0x250>
 801261e:	3101      	adds	r1, #1
 8012620:	0052      	lsls	r2, r2, #1
 8012622:	e7d1      	b.n	80125c8 <_dtoa_r+0x258>
 8012624:	f3af 8000 	nop.w
 8012628:	636f4361 	.word	0x636f4361
 801262c:	3fd287a7 	.word	0x3fd287a7
 8012630:	8b60c8b3 	.word	0x8b60c8b3
 8012634:	3fc68a28 	.word	0x3fc68a28
 8012638:	509f79fb 	.word	0x509f79fb
 801263c:	3fd34413 	.word	0x3fd34413
 8012640:	08014cd2 	.word	0x08014cd2
 8012644:	08014d94 	.word	0x08014d94
 8012648:	7ff00000 	.word	0x7ff00000
 801264c:	08014caf 	.word	0x08014caf
 8012650:	3ff80000 	.word	0x3ff80000
 8012654:	08015050 	.word	0x08015050
 8012658:	08014dec 	.word	0x08014dec
 801265c:	08014d90 	.word	0x08014d90
 8012660:	08014cae 	.word	0x08014cae
 8012664:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012668:	6018      	str	r0, [r3, #0]
 801266a:	9b03      	ldr	r3, [sp, #12]
 801266c:	2b0e      	cmp	r3, #14
 801266e:	f200 80a1 	bhi.w	80127b4 <_dtoa_r+0x444>
 8012672:	2c00      	cmp	r4, #0
 8012674:	f000 809e 	beq.w	80127b4 <_dtoa_r+0x444>
 8012678:	2f00      	cmp	r7, #0
 801267a:	dd33      	ble.n	80126e4 <_dtoa_r+0x374>
 801267c:	4b9c      	ldr	r3, [pc, #624]	@ (80128f0 <_dtoa_r+0x580>)
 801267e:	f007 020f 	and.w	r2, r7, #15
 8012682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012686:	ed93 7b00 	vldr	d7, [r3]
 801268a:	05f8      	lsls	r0, r7, #23
 801268c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8012690:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012694:	d516      	bpl.n	80126c4 <_dtoa_r+0x354>
 8012696:	4b97      	ldr	r3, [pc, #604]	@ (80128f4 <_dtoa_r+0x584>)
 8012698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801269c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80126a0:	f7ee f8f4 	bl	800088c <__aeabi_ddiv>
 80126a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126a8:	f004 040f 	and.w	r4, r4, #15
 80126ac:	2603      	movs	r6, #3
 80126ae:	4d91      	ldr	r5, [pc, #580]	@ (80128f4 <_dtoa_r+0x584>)
 80126b0:	b954      	cbnz	r4, 80126c8 <_dtoa_r+0x358>
 80126b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80126b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80126ba:	f7ee f8e7 	bl	800088c <__aeabi_ddiv>
 80126be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126c2:	e028      	b.n	8012716 <_dtoa_r+0x3a6>
 80126c4:	2602      	movs	r6, #2
 80126c6:	e7f2      	b.n	80126ae <_dtoa_r+0x33e>
 80126c8:	07e1      	lsls	r1, r4, #31
 80126ca:	d508      	bpl.n	80126de <_dtoa_r+0x36e>
 80126cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80126d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80126d4:	f7ed ffb0 	bl	8000638 <__aeabi_dmul>
 80126d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80126dc:	3601      	adds	r6, #1
 80126de:	1064      	asrs	r4, r4, #1
 80126e0:	3508      	adds	r5, #8
 80126e2:	e7e5      	b.n	80126b0 <_dtoa_r+0x340>
 80126e4:	f000 80af 	beq.w	8012846 <_dtoa_r+0x4d6>
 80126e8:	427c      	negs	r4, r7
 80126ea:	4b81      	ldr	r3, [pc, #516]	@ (80128f0 <_dtoa_r+0x580>)
 80126ec:	4d81      	ldr	r5, [pc, #516]	@ (80128f4 <_dtoa_r+0x584>)
 80126ee:	f004 020f 	and.w	r2, r4, #15
 80126f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80126fe:	f7ed ff9b 	bl	8000638 <__aeabi_dmul>
 8012702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012706:	1124      	asrs	r4, r4, #4
 8012708:	2300      	movs	r3, #0
 801270a:	2602      	movs	r6, #2
 801270c:	2c00      	cmp	r4, #0
 801270e:	f040 808f 	bne.w	8012830 <_dtoa_r+0x4c0>
 8012712:	2b00      	cmp	r3, #0
 8012714:	d1d3      	bne.n	80126be <_dtoa_r+0x34e>
 8012716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012718:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801271c:	2b00      	cmp	r3, #0
 801271e:	f000 8094 	beq.w	801284a <_dtoa_r+0x4da>
 8012722:	4b75      	ldr	r3, [pc, #468]	@ (80128f8 <_dtoa_r+0x588>)
 8012724:	2200      	movs	r2, #0
 8012726:	4620      	mov	r0, r4
 8012728:	4629      	mov	r1, r5
 801272a:	f7ee f9f7 	bl	8000b1c <__aeabi_dcmplt>
 801272e:	2800      	cmp	r0, #0
 8012730:	f000 808b 	beq.w	801284a <_dtoa_r+0x4da>
 8012734:	9b03      	ldr	r3, [sp, #12]
 8012736:	2b00      	cmp	r3, #0
 8012738:	f000 8087 	beq.w	801284a <_dtoa_r+0x4da>
 801273c:	f1bb 0f00 	cmp.w	fp, #0
 8012740:	dd34      	ble.n	80127ac <_dtoa_r+0x43c>
 8012742:	4620      	mov	r0, r4
 8012744:	4b6d      	ldr	r3, [pc, #436]	@ (80128fc <_dtoa_r+0x58c>)
 8012746:	2200      	movs	r2, #0
 8012748:	4629      	mov	r1, r5
 801274a:	f7ed ff75 	bl	8000638 <__aeabi_dmul>
 801274e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012752:	f107 38ff 	add.w	r8, r7, #4294967295
 8012756:	3601      	adds	r6, #1
 8012758:	465c      	mov	r4, fp
 801275a:	4630      	mov	r0, r6
 801275c:	f7ed ff02 	bl	8000564 <__aeabi_i2d>
 8012760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012764:	f7ed ff68 	bl	8000638 <__aeabi_dmul>
 8012768:	4b65      	ldr	r3, [pc, #404]	@ (8012900 <_dtoa_r+0x590>)
 801276a:	2200      	movs	r2, #0
 801276c:	f7ed fdae 	bl	80002cc <__adddf3>
 8012770:	4605      	mov	r5, r0
 8012772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012776:	2c00      	cmp	r4, #0
 8012778:	d16a      	bne.n	8012850 <_dtoa_r+0x4e0>
 801277a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801277e:	4b61      	ldr	r3, [pc, #388]	@ (8012904 <_dtoa_r+0x594>)
 8012780:	2200      	movs	r2, #0
 8012782:	f7ed fda1 	bl	80002c8 <__aeabi_dsub>
 8012786:	4602      	mov	r2, r0
 8012788:	460b      	mov	r3, r1
 801278a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801278e:	462a      	mov	r2, r5
 8012790:	4633      	mov	r3, r6
 8012792:	f7ee f9e1 	bl	8000b58 <__aeabi_dcmpgt>
 8012796:	2800      	cmp	r0, #0
 8012798:	f040 8298 	bne.w	8012ccc <_dtoa_r+0x95c>
 801279c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80127a0:	462a      	mov	r2, r5
 80127a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80127a6:	f7ee f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80127aa:	bb38      	cbnz	r0, 80127fc <_dtoa_r+0x48c>
 80127ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80127b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80127b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f2c0 8157 	blt.w	8012a6a <_dtoa_r+0x6fa>
 80127bc:	2f0e      	cmp	r7, #14
 80127be:	f300 8154 	bgt.w	8012a6a <_dtoa_r+0x6fa>
 80127c2:	4b4b      	ldr	r3, [pc, #300]	@ (80128f0 <_dtoa_r+0x580>)
 80127c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80127c8:	ed93 7b00 	vldr	d7, [r3]
 80127cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	ed8d 7b00 	vstr	d7, [sp]
 80127d4:	f280 80e5 	bge.w	80129a2 <_dtoa_r+0x632>
 80127d8:	9b03      	ldr	r3, [sp, #12]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f300 80e1 	bgt.w	80129a2 <_dtoa_r+0x632>
 80127e0:	d10c      	bne.n	80127fc <_dtoa_r+0x48c>
 80127e2:	4b48      	ldr	r3, [pc, #288]	@ (8012904 <_dtoa_r+0x594>)
 80127e4:	2200      	movs	r2, #0
 80127e6:	ec51 0b17 	vmov	r0, r1, d7
 80127ea:	f7ed ff25 	bl	8000638 <__aeabi_dmul>
 80127ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127f2:	f7ee f9a7 	bl	8000b44 <__aeabi_dcmpge>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	f000 8266 	beq.w	8012cc8 <_dtoa_r+0x958>
 80127fc:	2400      	movs	r4, #0
 80127fe:	4625      	mov	r5, r4
 8012800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012802:	4656      	mov	r6, sl
 8012804:	ea6f 0803 	mvn.w	r8, r3
 8012808:	2700      	movs	r7, #0
 801280a:	4621      	mov	r1, r4
 801280c:	4648      	mov	r0, r9
 801280e:	f001 f80b 	bl	8013828 <_Bfree>
 8012812:	2d00      	cmp	r5, #0
 8012814:	f000 80bd 	beq.w	8012992 <_dtoa_r+0x622>
 8012818:	b12f      	cbz	r7, 8012826 <_dtoa_r+0x4b6>
 801281a:	42af      	cmp	r7, r5
 801281c:	d003      	beq.n	8012826 <_dtoa_r+0x4b6>
 801281e:	4639      	mov	r1, r7
 8012820:	4648      	mov	r0, r9
 8012822:	f001 f801 	bl	8013828 <_Bfree>
 8012826:	4629      	mov	r1, r5
 8012828:	4648      	mov	r0, r9
 801282a:	f000 fffd 	bl	8013828 <_Bfree>
 801282e:	e0b0      	b.n	8012992 <_dtoa_r+0x622>
 8012830:	07e2      	lsls	r2, r4, #31
 8012832:	d505      	bpl.n	8012840 <_dtoa_r+0x4d0>
 8012834:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012838:	f7ed fefe 	bl	8000638 <__aeabi_dmul>
 801283c:	3601      	adds	r6, #1
 801283e:	2301      	movs	r3, #1
 8012840:	1064      	asrs	r4, r4, #1
 8012842:	3508      	adds	r5, #8
 8012844:	e762      	b.n	801270c <_dtoa_r+0x39c>
 8012846:	2602      	movs	r6, #2
 8012848:	e765      	b.n	8012716 <_dtoa_r+0x3a6>
 801284a:	9c03      	ldr	r4, [sp, #12]
 801284c:	46b8      	mov	r8, r7
 801284e:	e784      	b.n	801275a <_dtoa_r+0x3ea>
 8012850:	4b27      	ldr	r3, [pc, #156]	@ (80128f0 <_dtoa_r+0x580>)
 8012852:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012854:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012858:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801285c:	4454      	add	r4, sl
 801285e:	2900      	cmp	r1, #0
 8012860:	d054      	beq.n	801290c <_dtoa_r+0x59c>
 8012862:	4929      	ldr	r1, [pc, #164]	@ (8012908 <_dtoa_r+0x598>)
 8012864:	2000      	movs	r0, #0
 8012866:	f7ee f811 	bl	800088c <__aeabi_ddiv>
 801286a:	4633      	mov	r3, r6
 801286c:	462a      	mov	r2, r5
 801286e:	f7ed fd2b 	bl	80002c8 <__aeabi_dsub>
 8012872:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012876:	4656      	mov	r6, sl
 8012878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801287c:	f7ee f98c 	bl	8000b98 <__aeabi_d2iz>
 8012880:	4605      	mov	r5, r0
 8012882:	f7ed fe6f 	bl	8000564 <__aeabi_i2d>
 8012886:	4602      	mov	r2, r0
 8012888:	460b      	mov	r3, r1
 801288a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801288e:	f7ed fd1b 	bl	80002c8 <__aeabi_dsub>
 8012892:	3530      	adds	r5, #48	@ 0x30
 8012894:	4602      	mov	r2, r0
 8012896:	460b      	mov	r3, r1
 8012898:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801289c:	f806 5b01 	strb.w	r5, [r6], #1
 80128a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80128a4:	f7ee f93a 	bl	8000b1c <__aeabi_dcmplt>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d172      	bne.n	8012992 <_dtoa_r+0x622>
 80128ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128b0:	4911      	ldr	r1, [pc, #68]	@ (80128f8 <_dtoa_r+0x588>)
 80128b2:	2000      	movs	r0, #0
 80128b4:	f7ed fd08 	bl	80002c8 <__aeabi_dsub>
 80128b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80128bc:	f7ee f92e 	bl	8000b1c <__aeabi_dcmplt>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	f040 80b4 	bne.w	8012a2e <_dtoa_r+0x6be>
 80128c6:	42a6      	cmp	r6, r4
 80128c8:	f43f af70 	beq.w	80127ac <_dtoa_r+0x43c>
 80128cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80128d0:	4b0a      	ldr	r3, [pc, #40]	@ (80128fc <_dtoa_r+0x58c>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	f7ed feb0 	bl	8000638 <__aeabi_dmul>
 80128d8:	4b08      	ldr	r3, [pc, #32]	@ (80128fc <_dtoa_r+0x58c>)
 80128da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80128de:	2200      	movs	r2, #0
 80128e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128e4:	f7ed fea8 	bl	8000638 <__aeabi_dmul>
 80128e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128ec:	e7c4      	b.n	8012878 <_dtoa_r+0x508>
 80128ee:	bf00      	nop
 80128f0:	08015050 	.word	0x08015050
 80128f4:	08015028 	.word	0x08015028
 80128f8:	3ff00000 	.word	0x3ff00000
 80128fc:	40240000 	.word	0x40240000
 8012900:	401c0000 	.word	0x401c0000
 8012904:	40140000 	.word	0x40140000
 8012908:	3fe00000 	.word	0x3fe00000
 801290c:	4631      	mov	r1, r6
 801290e:	4628      	mov	r0, r5
 8012910:	f7ed fe92 	bl	8000638 <__aeabi_dmul>
 8012914:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012918:	9413      	str	r4, [sp, #76]	@ 0x4c
 801291a:	4656      	mov	r6, sl
 801291c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012920:	f7ee f93a 	bl	8000b98 <__aeabi_d2iz>
 8012924:	4605      	mov	r5, r0
 8012926:	f7ed fe1d 	bl	8000564 <__aeabi_i2d>
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012932:	f7ed fcc9 	bl	80002c8 <__aeabi_dsub>
 8012936:	3530      	adds	r5, #48	@ 0x30
 8012938:	f806 5b01 	strb.w	r5, [r6], #1
 801293c:	4602      	mov	r2, r0
 801293e:	460b      	mov	r3, r1
 8012940:	42a6      	cmp	r6, r4
 8012942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012946:	f04f 0200 	mov.w	r2, #0
 801294a:	d124      	bne.n	8012996 <_dtoa_r+0x626>
 801294c:	4baf      	ldr	r3, [pc, #700]	@ (8012c0c <_dtoa_r+0x89c>)
 801294e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012952:	f7ed fcbb 	bl	80002cc <__adddf3>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801295e:	f7ee f8fb 	bl	8000b58 <__aeabi_dcmpgt>
 8012962:	2800      	cmp	r0, #0
 8012964:	d163      	bne.n	8012a2e <_dtoa_r+0x6be>
 8012966:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801296a:	49a8      	ldr	r1, [pc, #672]	@ (8012c0c <_dtoa_r+0x89c>)
 801296c:	2000      	movs	r0, #0
 801296e:	f7ed fcab 	bl	80002c8 <__aeabi_dsub>
 8012972:	4602      	mov	r2, r0
 8012974:	460b      	mov	r3, r1
 8012976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801297a:	f7ee f8cf 	bl	8000b1c <__aeabi_dcmplt>
 801297e:	2800      	cmp	r0, #0
 8012980:	f43f af14 	beq.w	80127ac <_dtoa_r+0x43c>
 8012984:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012986:	1e73      	subs	r3, r6, #1
 8012988:	9313      	str	r3, [sp, #76]	@ 0x4c
 801298a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801298e:	2b30      	cmp	r3, #48	@ 0x30
 8012990:	d0f8      	beq.n	8012984 <_dtoa_r+0x614>
 8012992:	4647      	mov	r7, r8
 8012994:	e03b      	b.n	8012a0e <_dtoa_r+0x69e>
 8012996:	4b9e      	ldr	r3, [pc, #632]	@ (8012c10 <_dtoa_r+0x8a0>)
 8012998:	f7ed fe4e 	bl	8000638 <__aeabi_dmul>
 801299c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129a0:	e7bc      	b.n	801291c <_dtoa_r+0x5ac>
 80129a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80129a6:	4656      	mov	r6, sl
 80129a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129ac:	4620      	mov	r0, r4
 80129ae:	4629      	mov	r1, r5
 80129b0:	f7ed ff6c 	bl	800088c <__aeabi_ddiv>
 80129b4:	f7ee f8f0 	bl	8000b98 <__aeabi_d2iz>
 80129b8:	4680      	mov	r8, r0
 80129ba:	f7ed fdd3 	bl	8000564 <__aeabi_i2d>
 80129be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129c2:	f7ed fe39 	bl	8000638 <__aeabi_dmul>
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	4620      	mov	r0, r4
 80129cc:	4629      	mov	r1, r5
 80129ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80129d2:	f7ed fc79 	bl	80002c8 <__aeabi_dsub>
 80129d6:	f806 4b01 	strb.w	r4, [r6], #1
 80129da:	9d03      	ldr	r5, [sp, #12]
 80129dc:	eba6 040a 	sub.w	r4, r6, sl
 80129e0:	42a5      	cmp	r5, r4
 80129e2:	4602      	mov	r2, r0
 80129e4:	460b      	mov	r3, r1
 80129e6:	d133      	bne.n	8012a50 <_dtoa_r+0x6e0>
 80129e8:	f7ed fc70 	bl	80002cc <__adddf3>
 80129ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129f0:	4604      	mov	r4, r0
 80129f2:	460d      	mov	r5, r1
 80129f4:	f7ee f8b0 	bl	8000b58 <__aeabi_dcmpgt>
 80129f8:	b9c0      	cbnz	r0, 8012a2c <_dtoa_r+0x6bc>
 80129fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129fe:	4620      	mov	r0, r4
 8012a00:	4629      	mov	r1, r5
 8012a02:	f7ee f881 	bl	8000b08 <__aeabi_dcmpeq>
 8012a06:	b110      	cbz	r0, 8012a0e <_dtoa_r+0x69e>
 8012a08:	f018 0f01 	tst.w	r8, #1
 8012a0c:	d10e      	bne.n	8012a2c <_dtoa_r+0x6bc>
 8012a0e:	9902      	ldr	r1, [sp, #8]
 8012a10:	4648      	mov	r0, r9
 8012a12:	f000 ff09 	bl	8013828 <_Bfree>
 8012a16:	2300      	movs	r3, #0
 8012a18:	7033      	strb	r3, [r6, #0]
 8012a1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a1c:	3701      	adds	r7, #1
 8012a1e:	601f      	str	r7, [r3, #0]
 8012a20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f000 824b 	beq.w	8012ebe <_dtoa_r+0xb4e>
 8012a28:	601e      	str	r6, [r3, #0]
 8012a2a:	e248      	b.n	8012ebe <_dtoa_r+0xb4e>
 8012a2c:	46b8      	mov	r8, r7
 8012a2e:	4633      	mov	r3, r6
 8012a30:	461e      	mov	r6, r3
 8012a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a36:	2a39      	cmp	r2, #57	@ 0x39
 8012a38:	d106      	bne.n	8012a48 <_dtoa_r+0x6d8>
 8012a3a:	459a      	cmp	sl, r3
 8012a3c:	d1f8      	bne.n	8012a30 <_dtoa_r+0x6c0>
 8012a3e:	2230      	movs	r2, #48	@ 0x30
 8012a40:	f108 0801 	add.w	r8, r8, #1
 8012a44:	f88a 2000 	strb.w	r2, [sl]
 8012a48:	781a      	ldrb	r2, [r3, #0]
 8012a4a:	3201      	adds	r2, #1
 8012a4c:	701a      	strb	r2, [r3, #0]
 8012a4e:	e7a0      	b.n	8012992 <_dtoa_r+0x622>
 8012a50:	4b6f      	ldr	r3, [pc, #444]	@ (8012c10 <_dtoa_r+0x8a0>)
 8012a52:	2200      	movs	r2, #0
 8012a54:	f7ed fdf0 	bl	8000638 <__aeabi_dmul>
 8012a58:	2200      	movs	r2, #0
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	460d      	mov	r5, r1
 8012a60:	f7ee f852 	bl	8000b08 <__aeabi_dcmpeq>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d09f      	beq.n	80129a8 <_dtoa_r+0x638>
 8012a68:	e7d1      	b.n	8012a0e <_dtoa_r+0x69e>
 8012a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a6c:	2a00      	cmp	r2, #0
 8012a6e:	f000 80ea 	beq.w	8012c46 <_dtoa_r+0x8d6>
 8012a72:	9a07      	ldr	r2, [sp, #28]
 8012a74:	2a01      	cmp	r2, #1
 8012a76:	f300 80cd 	bgt.w	8012c14 <_dtoa_r+0x8a4>
 8012a7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	f000 80c1 	beq.w	8012c04 <_dtoa_r+0x894>
 8012a82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012a86:	9c08      	ldr	r4, [sp, #32]
 8012a88:	9e00      	ldr	r6, [sp, #0]
 8012a8a:	9a00      	ldr	r2, [sp, #0]
 8012a8c:	441a      	add	r2, r3
 8012a8e:	9200      	str	r2, [sp, #0]
 8012a90:	9a06      	ldr	r2, [sp, #24]
 8012a92:	2101      	movs	r1, #1
 8012a94:	441a      	add	r2, r3
 8012a96:	4648      	mov	r0, r9
 8012a98:	9206      	str	r2, [sp, #24]
 8012a9a:	f000 ffc3 	bl	8013a24 <__i2b>
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	b166      	cbz	r6, 8012abc <_dtoa_r+0x74c>
 8012aa2:	9b06      	ldr	r3, [sp, #24]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	dd09      	ble.n	8012abc <_dtoa_r+0x74c>
 8012aa8:	42b3      	cmp	r3, r6
 8012aaa:	9a00      	ldr	r2, [sp, #0]
 8012aac:	bfa8      	it	ge
 8012aae:	4633      	movge	r3, r6
 8012ab0:	1ad2      	subs	r2, r2, r3
 8012ab2:	9200      	str	r2, [sp, #0]
 8012ab4:	9a06      	ldr	r2, [sp, #24]
 8012ab6:	1af6      	subs	r6, r6, r3
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	9306      	str	r3, [sp, #24]
 8012abc:	9b08      	ldr	r3, [sp, #32]
 8012abe:	b30b      	cbz	r3, 8012b04 <_dtoa_r+0x794>
 8012ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f000 80c6 	beq.w	8012c54 <_dtoa_r+0x8e4>
 8012ac8:	2c00      	cmp	r4, #0
 8012aca:	f000 80c0 	beq.w	8012c4e <_dtoa_r+0x8de>
 8012ace:	4629      	mov	r1, r5
 8012ad0:	4622      	mov	r2, r4
 8012ad2:	4648      	mov	r0, r9
 8012ad4:	f001 f85e 	bl	8013b94 <__pow5mult>
 8012ad8:	9a02      	ldr	r2, [sp, #8]
 8012ada:	4601      	mov	r1, r0
 8012adc:	4605      	mov	r5, r0
 8012ade:	4648      	mov	r0, r9
 8012ae0:	f000 ffb6 	bl	8013a50 <__multiply>
 8012ae4:	9902      	ldr	r1, [sp, #8]
 8012ae6:	4680      	mov	r8, r0
 8012ae8:	4648      	mov	r0, r9
 8012aea:	f000 fe9d 	bl	8013828 <_Bfree>
 8012aee:	9b08      	ldr	r3, [sp, #32]
 8012af0:	1b1b      	subs	r3, r3, r4
 8012af2:	9308      	str	r3, [sp, #32]
 8012af4:	f000 80b1 	beq.w	8012c5a <_dtoa_r+0x8ea>
 8012af8:	9a08      	ldr	r2, [sp, #32]
 8012afa:	4641      	mov	r1, r8
 8012afc:	4648      	mov	r0, r9
 8012afe:	f001 f849 	bl	8013b94 <__pow5mult>
 8012b02:	9002      	str	r0, [sp, #8]
 8012b04:	2101      	movs	r1, #1
 8012b06:	4648      	mov	r0, r9
 8012b08:	f000 ff8c 	bl	8013a24 <__i2b>
 8012b0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b0e:	4604      	mov	r4, r0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f000 81d8 	beq.w	8012ec6 <_dtoa_r+0xb56>
 8012b16:	461a      	mov	r2, r3
 8012b18:	4601      	mov	r1, r0
 8012b1a:	4648      	mov	r0, r9
 8012b1c:	f001 f83a 	bl	8013b94 <__pow5mult>
 8012b20:	9b07      	ldr	r3, [sp, #28]
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	4604      	mov	r4, r0
 8012b26:	f300 809f 	bgt.w	8012c68 <_dtoa_r+0x8f8>
 8012b2a:	9b04      	ldr	r3, [sp, #16]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f040 8097 	bne.w	8012c60 <_dtoa_r+0x8f0>
 8012b32:	9b05      	ldr	r3, [sp, #20]
 8012b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f040 8093 	bne.w	8012c64 <_dtoa_r+0x8f4>
 8012b3e:	9b05      	ldr	r3, [sp, #20]
 8012b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b44:	0d1b      	lsrs	r3, r3, #20
 8012b46:	051b      	lsls	r3, r3, #20
 8012b48:	b133      	cbz	r3, 8012b58 <_dtoa_r+0x7e8>
 8012b4a:	9b00      	ldr	r3, [sp, #0]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	9b06      	ldr	r3, [sp, #24]
 8012b52:	3301      	adds	r3, #1
 8012b54:	9306      	str	r3, [sp, #24]
 8012b56:	2301      	movs	r3, #1
 8012b58:	9308      	str	r3, [sp, #32]
 8012b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f000 81b8 	beq.w	8012ed2 <_dtoa_r+0xb62>
 8012b62:	6923      	ldr	r3, [r4, #16]
 8012b64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b68:	6918      	ldr	r0, [r3, #16]
 8012b6a:	f000 ff0f 	bl	801398c <__hi0bits>
 8012b6e:	f1c0 0020 	rsb	r0, r0, #32
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	4418      	add	r0, r3
 8012b76:	f010 001f 	ands.w	r0, r0, #31
 8012b7a:	f000 8082 	beq.w	8012c82 <_dtoa_r+0x912>
 8012b7e:	f1c0 0320 	rsb	r3, r0, #32
 8012b82:	2b04      	cmp	r3, #4
 8012b84:	dd73      	ble.n	8012c6e <_dtoa_r+0x8fe>
 8012b86:	9b00      	ldr	r3, [sp, #0]
 8012b88:	f1c0 001c 	rsb	r0, r0, #28
 8012b8c:	4403      	add	r3, r0
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	9b06      	ldr	r3, [sp, #24]
 8012b92:	4403      	add	r3, r0
 8012b94:	4406      	add	r6, r0
 8012b96:	9306      	str	r3, [sp, #24]
 8012b98:	9b00      	ldr	r3, [sp, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	dd05      	ble.n	8012baa <_dtoa_r+0x83a>
 8012b9e:	9902      	ldr	r1, [sp, #8]
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	f001 f850 	bl	8013c48 <__lshift>
 8012ba8:	9002      	str	r0, [sp, #8]
 8012baa:	9b06      	ldr	r3, [sp, #24]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	dd05      	ble.n	8012bbc <_dtoa_r+0x84c>
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	4648      	mov	r0, r9
 8012bb6:	f001 f847 	bl	8013c48 <__lshift>
 8012bba:	4604      	mov	r4, r0
 8012bbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d061      	beq.n	8012c86 <_dtoa_r+0x916>
 8012bc2:	9802      	ldr	r0, [sp, #8]
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	f001 f8ab 	bl	8013d20 <__mcmp>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	da5b      	bge.n	8012c86 <_dtoa_r+0x916>
 8012bce:	2300      	movs	r3, #0
 8012bd0:	9902      	ldr	r1, [sp, #8]
 8012bd2:	220a      	movs	r2, #10
 8012bd4:	4648      	mov	r0, r9
 8012bd6:	f000 fe49 	bl	801386c <__multadd>
 8012bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bdc:	9002      	str	r0, [sp, #8]
 8012bde:	f107 38ff 	add.w	r8, r7, #4294967295
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f000 8177 	beq.w	8012ed6 <_dtoa_r+0xb66>
 8012be8:	4629      	mov	r1, r5
 8012bea:	2300      	movs	r3, #0
 8012bec:	220a      	movs	r2, #10
 8012bee:	4648      	mov	r0, r9
 8012bf0:	f000 fe3c 	bl	801386c <__multadd>
 8012bf4:	f1bb 0f00 	cmp.w	fp, #0
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	dc6f      	bgt.n	8012cdc <_dtoa_r+0x96c>
 8012bfc:	9b07      	ldr	r3, [sp, #28]
 8012bfe:	2b02      	cmp	r3, #2
 8012c00:	dc49      	bgt.n	8012c96 <_dtoa_r+0x926>
 8012c02:	e06b      	b.n	8012cdc <_dtoa_r+0x96c>
 8012c04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012c06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012c0a:	e73c      	b.n	8012a86 <_dtoa_r+0x716>
 8012c0c:	3fe00000 	.word	0x3fe00000
 8012c10:	40240000 	.word	0x40240000
 8012c14:	9b03      	ldr	r3, [sp, #12]
 8012c16:	1e5c      	subs	r4, r3, #1
 8012c18:	9b08      	ldr	r3, [sp, #32]
 8012c1a:	42a3      	cmp	r3, r4
 8012c1c:	db09      	blt.n	8012c32 <_dtoa_r+0x8c2>
 8012c1e:	1b1c      	subs	r4, r3, r4
 8012c20:	9b03      	ldr	r3, [sp, #12]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	f6bf af30 	bge.w	8012a88 <_dtoa_r+0x718>
 8012c28:	9b00      	ldr	r3, [sp, #0]
 8012c2a:	9a03      	ldr	r2, [sp, #12]
 8012c2c:	1a9e      	subs	r6, r3, r2
 8012c2e:	2300      	movs	r3, #0
 8012c30:	e72b      	b.n	8012a8a <_dtoa_r+0x71a>
 8012c32:	9b08      	ldr	r3, [sp, #32]
 8012c34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012c36:	9408      	str	r4, [sp, #32]
 8012c38:	1ae3      	subs	r3, r4, r3
 8012c3a:	441a      	add	r2, r3
 8012c3c:	9e00      	ldr	r6, [sp, #0]
 8012c3e:	9b03      	ldr	r3, [sp, #12]
 8012c40:	920d      	str	r2, [sp, #52]	@ 0x34
 8012c42:	2400      	movs	r4, #0
 8012c44:	e721      	b.n	8012a8a <_dtoa_r+0x71a>
 8012c46:	9c08      	ldr	r4, [sp, #32]
 8012c48:	9e00      	ldr	r6, [sp, #0]
 8012c4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012c4c:	e728      	b.n	8012aa0 <_dtoa_r+0x730>
 8012c4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012c52:	e751      	b.n	8012af8 <_dtoa_r+0x788>
 8012c54:	9a08      	ldr	r2, [sp, #32]
 8012c56:	9902      	ldr	r1, [sp, #8]
 8012c58:	e750      	b.n	8012afc <_dtoa_r+0x78c>
 8012c5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8012c5e:	e751      	b.n	8012b04 <_dtoa_r+0x794>
 8012c60:	2300      	movs	r3, #0
 8012c62:	e779      	b.n	8012b58 <_dtoa_r+0x7e8>
 8012c64:	9b04      	ldr	r3, [sp, #16]
 8012c66:	e777      	b.n	8012b58 <_dtoa_r+0x7e8>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	9308      	str	r3, [sp, #32]
 8012c6c:	e779      	b.n	8012b62 <_dtoa_r+0x7f2>
 8012c6e:	d093      	beq.n	8012b98 <_dtoa_r+0x828>
 8012c70:	9a00      	ldr	r2, [sp, #0]
 8012c72:	331c      	adds	r3, #28
 8012c74:	441a      	add	r2, r3
 8012c76:	9200      	str	r2, [sp, #0]
 8012c78:	9a06      	ldr	r2, [sp, #24]
 8012c7a:	441a      	add	r2, r3
 8012c7c:	441e      	add	r6, r3
 8012c7e:	9206      	str	r2, [sp, #24]
 8012c80:	e78a      	b.n	8012b98 <_dtoa_r+0x828>
 8012c82:	4603      	mov	r3, r0
 8012c84:	e7f4      	b.n	8012c70 <_dtoa_r+0x900>
 8012c86:	9b03      	ldr	r3, [sp, #12]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	46b8      	mov	r8, r7
 8012c8c:	dc20      	bgt.n	8012cd0 <_dtoa_r+0x960>
 8012c8e:	469b      	mov	fp, r3
 8012c90:	9b07      	ldr	r3, [sp, #28]
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	dd1e      	ble.n	8012cd4 <_dtoa_r+0x964>
 8012c96:	f1bb 0f00 	cmp.w	fp, #0
 8012c9a:	f47f adb1 	bne.w	8012800 <_dtoa_r+0x490>
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	465b      	mov	r3, fp
 8012ca2:	2205      	movs	r2, #5
 8012ca4:	4648      	mov	r0, r9
 8012ca6:	f000 fde1 	bl	801386c <__multadd>
 8012caa:	4601      	mov	r1, r0
 8012cac:	4604      	mov	r4, r0
 8012cae:	9802      	ldr	r0, [sp, #8]
 8012cb0:	f001 f836 	bl	8013d20 <__mcmp>
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	f77f ada3 	ble.w	8012800 <_dtoa_r+0x490>
 8012cba:	4656      	mov	r6, sl
 8012cbc:	2331      	movs	r3, #49	@ 0x31
 8012cbe:	f806 3b01 	strb.w	r3, [r6], #1
 8012cc2:	f108 0801 	add.w	r8, r8, #1
 8012cc6:	e59f      	b.n	8012808 <_dtoa_r+0x498>
 8012cc8:	9c03      	ldr	r4, [sp, #12]
 8012cca:	46b8      	mov	r8, r7
 8012ccc:	4625      	mov	r5, r4
 8012cce:	e7f4      	b.n	8012cba <_dtoa_r+0x94a>
 8012cd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 8101 	beq.w	8012ede <_dtoa_r+0xb6e>
 8012cdc:	2e00      	cmp	r6, #0
 8012cde:	dd05      	ble.n	8012cec <_dtoa_r+0x97c>
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	4632      	mov	r2, r6
 8012ce4:	4648      	mov	r0, r9
 8012ce6:	f000 ffaf 	bl	8013c48 <__lshift>
 8012cea:	4605      	mov	r5, r0
 8012cec:	9b08      	ldr	r3, [sp, #32]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d05c      	beq.n	8012dac <_dtoa_r+0xa3c>
 8012cf2:	6869      	ldr	r1, [r5, #4]
 8012cf4:	4648      	mov	r0, r9
 8012cf6:	f000 fd57 	bl	80137a8 <_Balloc>
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	b928      	cbnz	r0, 8012d0a <_dtoa_r+0x99a>
 8012cfe:	4b82      	ldr	r3, [pc, #520]	@ (8012f08 <_dtoa_r+0xb98>)
 8012d00:	4602      	mov	r2, r0
 8012d02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012d06:	f7ff bb4a 	b.w	801239e <_dtoa_r+0x2e>
 8012d0a:	692a      	ldr	r2, [r5, #16]
 8012d0c:	3202      	adds	r2, #2
 8012d0e:	0092      	lsls	r2, r2, #2
 8012d10:	f105 010c 	add.w	r1, r5, #12
 8012d14:	300c      	adds	r0, #12
 8012d16:	f7ff fa66 	bl	80121e6 <memcpy>
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	4631      	mov	r1, r6
 8012d1e:	4648      	mov	r0, r9
 8012d20:	f000 ff92 	bl	8013c48 <__lshift>
 8012d24:	f10a 0301 	add.w	r3, sl, #1
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	eb0a 030b 	add.w	r3, sl, fp
 8012d2e:	9308      	str	r3, [sp, #32]
 8012d30:	9b04      	ldr	r3, [sp, #16]
 8012d32:	f003 0301 	and.w	r3, r3, #1
 8012d36:	462f      	mov	r7, r5
 8012d38:	9306      	str	r3, [sp, #24]
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	9b00      	ldr	r3, [sp, #0]
 8012d3e:	9802      	ldr	r0, [sp, #8]
 8012d40:	4621      	mov	r1, r4
 8012d42:	f103 3bff 	add.w	fp, r3, #4294967295
 8012d46:	f7ff fa8b 	bl	8012260 <quorem>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	3330      	adds	r3, #48	@ 0x30
 8012d4e:	9003      	str	r0, [sp, #12]
 8012d50:	4639      	mov	r1, r7
 8012d52:	9802      	ldr	r0, [sp, #8]
 8012d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d56:	f000 ffe3 	bl	8013d20 <__mcmp>
 8012d5a:	462a      	mov	r2, r5
 8012d5c:	9004      	str	r0, [sp, #16]
 8012d5e:	4621      	mov	r1, r4
 8012d60:	4648      	mov	r0, r9
 8012d62:	f000 fff9 	bl	8013d58 <__mdiff>
 8012d66:	68c2      	ldr	r2, [r0, #12]
 8012d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	bb02      	cbnz	r2, 8012db0 <_dtoa_r+0xa40>
 8012d6e:	4601      	mov	r1, r0
 8012d70:	9802      	ldr	r0, [sp, #8]
 8012d72:	f000 ffd5 	bl	8013d20 <__mcmp>
 8012d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d78:	4602      	mov	r2, r0
 8012d7a:	4631      	mov	r1, r6
 8012d7c:	4648      	mov	r0, r9
 8012d7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d82:	f000 fd51 	bl	8013828 <_Bfree>
 8012d86:	9b07      	ldr	r3, [sp, #28]
 8012d88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012d8a:	9e00      	ldr	r6, [sp, #0]
 8012d8c:	ea42 0103 	orr.w	r1, r2, r3
 8012d90:	9b06      	ldr	r3, [sp, #24]
 8012d92:	4319      	orrs	r1, r3
 8012d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d96:	d10d      	bne.n	8012db4 <_dtoa_r+0xa44>
 8012d98:	2b39      	cmp	r3, #57	@ 0x39
 8012d9a:	d027      	beq.n	8012dec <_dtoa_r+0xa7c>
 8012d9c:	9a04      	ldr	r2, [sp, #16]
 8012d9e:	2a00      	cmp	r2, #0
 8012da0:	dd01      	ble.n	8012da6 <_dtoa_r+0xa36>
 8012da2:	9b03      	ldr	r3, [sp, #12]
 8012da4:	3331      	adds	r3, #49	@ 0x31
 8012da6:	f88b 3000 	strb.w	r3, [fp]
 8012daa:	e52e      	b.n	801280a <_dtoa_r+0x49a>
 8012dac:	4628      	mov	r0, r5
 8012dae:	e7b9      	b.n	8012d24 <_dtoa_r+0x9b4>
 8012db0:	2201      	movs	r2, #1
 8012db2:	e7e2      	b.n	8012d7a <_dtoa_r+0xa0a>
 8012db4:	9904      	ldr	r1, [sp, #16]
 8012db6:	2900      	cmp	r1, #0
 8012db8:	db04      	blt.n	8012dc4 <_dtoa_r+0xa54>
 8012dba:	9807      	ldr	r0, [sp, #28]
 8012dbc:	4301      	orrs	r1, r0
 8012dbe:	9806      	ldr	r0, [sp, #24]
 8012dc0:	4301      	orrs	r1, r0
 8012dc2:	d120      	bne.n	8012e06 <_dtoa_r+0xa96>
 8012dc4:	2a00      	cmp	r2, #0
 8012dc6:	ddee      	ble.n	8012da6 <_dtoa_r+0xa36>
 8012dc8:	9902      	ldr	r1, [sp, #8]
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	2201      	movs	r2, #1
 8012dce:	4648      	mov	r0, r9
 8012dd0:	f000 ff3a 	bl	8013c48 <__lshift>
 8012dd4:	4621      	mov	r1, r4
 8012dd6:	9002      	str	r0, [sp, #8]
 8012dd8:	f000 ffa2 	bl	8013d20 <__mcmp>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	9b00      	ldr	r3, [sp, #0]
 8012de0:	dc02      	bgt.n	8012de8 <_dtoa_r+0xa78>
 8012de2:	d1e0      	bne.n	8012da6 <_dtoa_r+0xa36>
 8012de4:	07da      	lsls	r2, r3, #31
 8012de6:	d5de      	bpl.n	8012da6 <_dtoa_r+0xa36>
 8012de8:	2b39      	cmp	r3, #57	@ 0x39
 8012dea:	d1da      	bne.n	8012da2 <_dtoa_r+0xa32>
 8012dec:	2339      	movs	r3, #57	@ 0x39
 8012dee:	f88b 3000 	strb.w	r3, [fp]
 8012df2:	4633      	mov	r3, r6
 8012df4:	461e      	mov	r6, r3
 8012df6:	3b01      	subs	r3, #1
 8012df8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012dfc:	2a39      	cmp	r2, #57	@ 0x39
 8012dfe:	d04e      	beq.n	8012e9e <_dtoa_r+0xb2e>
 8012e00:	3201      	adds	r2, #1
 8012e02:	701a      	strb	r2, [r3, #0]
 8012e04:	e501      	b.n	801280a <_dtoa_r+0x49a>
 8012e06:	2a00      	cmp	r2, #0
 8012e08:	dd03      	ble.n	8012e12 <_dtoa_r+0xaa2>
 8012e0a:	2b39      	cmp	r3, #57	@ 0x39
 8012e0c:	d0ee      	beq.n	8012dec <_dtoa_r+0xa7c>
 8012e0e:	3301      	adds	r3, #1
 8012e10:	e7c9      	b.n	8012da6 <_dtoa_r+0xa36>
 8012e12:	9a00      	ldr	r2, [sp, #0]
 8012e14:	9908      	ldr	r1, [sp, #32]
 8012e16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012e1a:	428a      	cmp	r2, r1
 8012e1c:	d028      	beq.n	8012e70 <_dtoa_r+0xb00>
 8012e1e:	9902      	ldr	r1, [sp, #8]
 8012e20:	2300      	movs	r3, #0
 8012e22:	220a      	movs	r2, #10
 8012e24:	4648      	mov	r0, r9
 8012e26:	f000 fd21 	bl	801386c <__multadd>
 8012e2a:	42af      	cmp	r7, r5
 8012e2c:	9002      	str	r0, [sp, #8]
 8012e2e:	f04f 0300 	mov.w	r3, #0
 8012e32:	f04f 020a 	mov.w	r2, #10
 8012e36:	4639      	mov	r1, r7
 8012e38:	4648      	mov	r0, r9
 8012e3a:	d107      	bne.n	8012e4c <_dtoa_r+0xadc>
 8012e3c:	f000 fd16 	bl	801386c <__multadd>
 8012e40:	4607      	mov	r7, r0
 8012e42:	4605      	mov	r5, r0
 8012e44:	9b00      	ldr	r3, [sp, #0]
 8012e46:	3301      	adds	r3, #1
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	e777      	b.n	8012d3c <_dtoa_r+0x9cc>
 8012e4c:	f000 fd0e 	bl	801386c <__multadd>
 8012e50:	4629      	mov	r1, r5
 8012e52:	4607      	mov	r7, r0
 8012e54:	2300      	movs	r3, #0
 8012e56:	220a      	movs	r2, #10
 8012e58:	4648      	mov	r0, r9
 8012e5a:	f000 fd07 	bl	801386c <__multadd>
 8012e5e:	4605      	mov	r5, r0
 8012e60:	e7f0      	b.n	8012e44 <_dtoa_r+0xad4>
 8012e62:	f1bb 0f00 	cmp.w	fp, #0
 8012e66:	bfcc      	ite	gt
 8012e68:	465e      	movgt	r6, fp
 8012e6a:	2601      	movle	r6, #1
 8012e6c:	4456      	add	r6, sl
 8012e6e:	2700      	movs	r7, #0
 8012e70:	9902      	ldr	r1, [sp, #8]
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	2201      	movs	r2, #1
 8012e76:	4648      	mov	r0, r9
 8012e78:	f000 fee6 	bl	8013c48 <__lshift>
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	9002      	str	r0, [sp, #8]
 8012e80:	f000 ff4e 	bl	8013d20 <__mcmp>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	dcb4      	bgt.n	8012df2 <_dtoa_r+0xa82>
 8012e88:	d102      	bne.n	8012e90 <_dtoa_r+0xb20>
 8012e8a:	9b00      	ldr	r3, [sp, #0]
 8012e8c:	07db      	lsls	r3, r3, #31
 8012e8e:	d4b0      	bmi.n	8012df2 <_dtoa_r+0xa82>
 8012e90:	4633      	mov	r3, r6
 8012e92:	461e      	mov	r6, r3
 8012e94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e98:	2a30      	cmp	r2, #48	@ 0x30
 8012e9a:	d0fa      	beq.n	8012e92 <_dtoa_r+0xb22>
 8012e9c:	e4b5      	b.n	801280a <_dtoa_r+0x49a>
 8012e9e:	459a      	cmp	sl, r3
 8012ea0:	d1a8      	bne.n	8012df4 <_dtoa_r+0xa84>
 8012ea2:	2331      	movs	r3, #49	@ 0x31
 8012ea4:	f108 0801 	add.w	r8, r8, #1
 8012ea8:	f88a 3000 	strb.w	r3, [sl]
 8012eac:	e4ad      	b.n	801280a <_dtoa_r+0x49a>
 8012eae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012eb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8012f0c <_dtoa_r+0xb9c>
 8012eb4:	b11b      	cbz	r3, 8012ebe <_dtoa_r+0xb4e>
 8012eb6:	f10a 0308 	add.w	r3, sl, #8
 8012eba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012ebc:	6013      	str	r3, [r2, #0]
 8012ebe:	4650      	mov	r0, sl
 8012ec0:	b017      	add	sp, #92	@ 0x5c
 8012ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec6:	9b07      	ldr	r3, [sp, #28]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	f77f ae2e 	ble.w	8012b2a <_dtoa_r+0x7ba>
 8012ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ed0:	9308      	str	r3, [sp, #32]
 8012ed2:	2001      	movs	r0, #1
 8012ed4:	e64d      	b.n	8012b72 <_dtoa_r+0x802>
 8012ed6:	f1bb 0f00 	cmp.w	fp, #0
 8012eda:	f77f aed9 	ble.w	8012c90 <_dtoa_r+0x920>
 8012ede:	4656      	mov	r6, sl
 8012ee0:	9802      	ldr	r0, [sp, #8]
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	f7ff f9bc 	bl	8012260 <quorem>
 8012ee8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8012eec:	f806 3b01 	strb.w	r3, [r6], #1
 8012ef0:	eba6 020a 	sub.w	r2, r6, sl
 8012ef4:	4593      	cmp	fp, r2
 8012ef6:	ddb4      	ble.n	8012e62 <_dtoa_r+0xaf2>
 8012ef8:	9902      	ldr	r1, [sp, #8]
 8012efa:	2300      	movs	r3, #0
 8012efc:	220a      	movs	r2, #10
 8012efe:	4648      	mov	r0, r9
 8012f00:	f000 fcb4 	bl	801386c <__multadd>
 8012f04:	9002      	str	r0, [sp, #8]
 8012f06:	e7eb      	b.n	8012ee0 <_dtoa_r+0xb70>
 8012f08:	08014dec 	.word	0x08014dec
 8012f0c:	08014d87 	.word	0x08014d87

08012f10 <_free_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	4605      	mov	r5, r0
 8012f14:	2900      	cmp	r1, #0
 8012f16:	d041      	beq.n	8012f9c <_free_r+0x8c>
 8012f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f1c:	1f0c      	subs	r4, r1, #4
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	bfb8      	it	lt
 8012f22:	18e4      	addlt	r4, r4, r3
 8012f24:	f000 fc34 	bl	8013790 <__malloc_lock>
 8012f28:	4a1d      	ldr	r2, [pc, #116]	@ (8012fa0 <_free_r+0x90>)
 8012f2a:	6813      	ldr	r3, [r2, #0]
 8012f2c:	b933      	cbnz	r3, 8012f3c <_free_r+0x2c>
 8012f2e:	6063      	str	r3, [r4, #4]
 8012f30:	6014      	str	r4, [r2, #0]
 8012f32:	4628      	mov	r0, r5
 8012f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f38:	f000 bc30 	b.w	801379c <__malloc_unlock>
 8012f3c:	42a3      	cmp	r3, r4
 8012f3e:	d908      	bls.n	8012f52 <_free_r+0x42>
 8012f40:	6820      	ldr	r0, [r4, #0]
 8012f42:	1821      	adds	r1, r4, r0
 8012f44:	428b      	cmp	r3, r1
 8012f46:	bf01      	itttt	eq
 8012f48:	6819      	ldreq	r1, [r3, #0]
 8012f4a:	685b      	ldreq	r3, [r3, #4]
 8012f4c:	1809      	addeq	r1, r1, r0
 8012f4e:	6021      	streq	r1, [r4, #0]
 8012f50:	e7ed      	b.n	8012f2e <_free_r+0x1e>
 8012f52:	461a      	mov	r2, r3
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	b10b      	cbz	r3, 8012f5c <_free_r+0x4c>
 8012f58:	42a3      	cmp	r3, r4
 8012f5a:	d9fa      	bls.n	8012f52 <_free_r+0x42>
 8012f5c:	6811      	ldr	r1, [r2, #0]
 8012f5e:	1850      	adds	r0, r2, r1
 8012f60:	42a0      	cmp	r0, r4
 8012f62:	d10b      	bne.n	8012f7c <_free_r+0x6c>
 8012f64:	6820      	ldr	r0, [r4, #0]
 8012f66:	4401      	add	r1, r0
 8012f68:	1850      	adds	r0, r2, r1
 8012f6a:	4283      	cmp	r3, r0
 8012f6c:	6011      	str	r1, [r2, #0]
 8012f6e:	d1e0      	bne.n	8012f32 <_free_r+0x22>
 8012f70:	6818      	ldr	r0, [r3, #0]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	6053      	str	r3, [r2, #4]
 8012f76:	4408      	add	r0, r1
 8012f78:	6010      	str	r0, [r2, #0]
 8012f7a:	e7da      	b.n	8012f32 <_free_r+0x22>
 8012f7c:	d902      	bls.n	8012f84 <_free_r+0x74>
 8012f7e:	230c      	movs	r3, #12
 8012f80:	602b      	str	r3, [r5, #0]
 8012f82:	e7d6      	b.n	8012f32 <_free_r+0x22>
 8012f84:	6820      	ldr	r0, [r4, #0]
 8012f86:	1821      	adds	r1, r4, r0
 8012f88:	428b      	cmp	r3, r1
 8012f8a:	bf04      	itt	eq
 8012f8c:	6819      	ldreq	r1, [r3, #0]
 8012f8e:	685b      	ldreq	r3, [r3, #4]
 8012f90:	6063      	str	r3, [r4, #4]
 8012f92:	bf04      	itt	eq
 8012f94:	1809      	addeq	r1, r1, r0
 8012f96:	6021      	streq	r1, [r4, #0]
 8012f98:	6054      	str	r4, [r2, #4]
 8012f9a:	e7ca      	b.n	8012f32 <_free_r+0x22>
 8012f9c:	bd38      	pop	{r3, r4, r5, pc}
 8012f9e:	bf00      	nop
 8012fa0:	20004f18 	.word	0x20004f18

08012fa4 <rshift>:
 8012fa4:	6903      	ldr	r3, [r0, #16]
 8012fa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012faa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012fb2:	f100 0414 	add.w	r4, r0, #20
 8012fb6:	dd45      	ble.n	8013044 <rshift+0xa0>
 8012fb8:	f011 011f 	ands.w	r1, r1, #31
 8012fbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012fc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012fc4:	d10c      	bne.n	8012fe0 <rshift+0x3c>
 8012fc6:	f100 0710 	add.w	r7, r0, #16
 8012fca:	4629      	mov	r1, r5
 8012fcc:	42b1      	cmp	r1, r6
 8012fce:	d334      	bcc.n	801303a <rshift+0x96>
 8012fd0:	1a9b      	subs	r3, r3, r2
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	1eea      	subs	r2, r5, #3
 8012fd6:	4296      	cmp	r6, r2
 8012fd8:	bf38      	it	cc
 8012fda:	2300      	movcc	r3, #0
 8012fdc:	4423      	add	r3, r4
 8012fde:	e015      	b.n	801300c <rshift+0x68>
 8012fe0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012fe4:	f1c1 0820 	rsb	r8, r1, #32
 8012fe8:	40cf      	lsrs	r7, r1
 8012fea:	f105 0e04 	add.w	lr, r5, #4
 8012fee:	46a1      	mov	r9, r4
 8012ff0:	4576      	cmp	r6, lr
 8012ff2:	46f4      	mov	ip, lr
 8012ff4:	d815      	bhi.n	8013022 <rshift+0x7e>
 8012ff6:	1a9a      	subs	r2, r3, r2
 8012ff8:	0092      	lsls	r2, r2, #2
 8012ffa:	3a04      	subs	r2, #4
 8012ffc:	3501      	adds	r5, #1
 8012ffe:	42ae      	cmp	r6, r5
 8013000:	bf38      	it	cc
 8013002:	2200      	movcc	r2, #0
 8013004:	18a3      	adds	r3, r4, r2
 8013006:	50a7      	str	r7, [r4, r2]
 8013008:	b107      	cbz	r7, 801300c <rshift+0x68>
 801300a:	3304      	adds	r3, #4
 801300c:	1b1a      	subs	r2, r3, r4
 801300e:	42a3      	cmp	r3, r4
 8013010:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013014:	bf08      	it	eq
 8013016:	2300      	moveq	r3, #0
 8013018:	6102      	str	r2, [r0, #16]
 801301a:	bf08      	it	eq
 801301c:	6143      	streq	r3, [r0, #20]
 801301e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013022:	f8dc c000 	ldr.w	ip, [ip]
 8013026:	fa0c fc08 	lsl.w	ip, ip, r8
 801302a:	ea4c 0707 	orr.w	r7, ip, r7
 801302e:	f849 7b04 	str.w	r7, [r9], #4
 8013032:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013036:	40cf      	lsrs	r7, r1
 8013038:	e7da      	b.n	8012ff0 <rshift+0x4c>
 801303a:	f851 cb04 	ldr.w	ip, [r1], #4
 801303e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013042:	e7c3      	b.n	8012fcc <rshift+0x28>
 8013044:	4623      	mov	r3, r4
 8013046:	e7e1      	b.n	801300c <rshift+0x68>

08013048 <__hexdig_fun>:
 8013048:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801304c:	2b09      	cmp	r3, #9
 801304e:	d802      	bhi.n	8013056 <__hexdig_fun+0xe>
 8013050:	3820      	subs	r0, #32
 8013052:	b2c0      	uxtb	r0, r0
 8013054:	4770      	bx	lr
 8013056:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801305a:	2b05      	cmp	r3, #5
 801305c:	d801      	bhi.n	8013062 <__hexdig_fun+0x1a>
 801305e:	3847      	subs	r0, #71	@ 0x47
 8013060:	e7f7      	b.n	8013052 <__hexdig_fun+0xa>
 8013062:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013066:	2b05      	cmp	r3, #5
 8013068:	d801      	bhi.n	801306e <__hexdig_fun+0x26>
 801306a:	3827      	subs	r0, #39	@ 0x27
 801306c:	e7f1      	b.n	8013052 <__hexdig_fun+0xa>
 801306e:	2000      	movs	r0, #0
 8013070:	4770      	bx	lr
	...

08013074 <__gethex>:
 8013074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013078:	b085      	sub	sp, #20
 801307a:	468a      	mov	sl, r1
 801307c:	9302      	str	r3, [sp, #8]
 801307e:	680b      	ldr	r3, [r1, #0]
 8013080:	9001      	str	r0, [sp, #4]
 8013082:	4690      	mov	r8, r2
 8013084:	1c9c      	adds	r4, r3, #2
 8013086:	46a1      	mov	r9, r4
 8013088:	f814 0b01 	ldrb.w	r0, [r4], #1
 801308c:	2830      	cmp	r0, #48	@ 0x30
 801308e:	d0fa      	beq.n	8013086 <__gethex+0x12>
 8013090:	eba9 0303 	sub.w	r3, r9, r3
 8013094:	f1a3 0b02 	sub.w	fp, r3, #2
 8013098:	f7ff ffd6 	bl	8013048 <__hexdig_fun>
 801309c:	4605      	mov	r5, r0
 801309e:	2800      	cmp	r0, #0
 80130a0:	d168      	bne.n	8013174 <__gethex+0x100>
 80130a2:	49a0      	ldr	r1, [pc, #640]	@ (8013324 <__gethex+0x2b0>)
 80130a4:	2201      	movs	r2, #1
 80130a6:	4648      	mov	r0, r9
 80130a8:	f7fe ff59 	bl	8011f5e <strncmp>
 80130ac:	4607      	mov	r7, r0
 80130ae:	2800      	cmp	r0, #0
 80130b0:	d167      	bne.n	8013182 <__gethex+0x10e>
 80130b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80130b6:	4626      	mov	r6, r4
 80130b8:	f7ff ffc6 	bl	8013048 <__hexdig_fun>
 80130bc:	2800      	cmp	r0, #0
 80130be:	d062      	beq.n	8013186 <__gethex+0x112>
 80130c0:	4623      	mov	r3, r4
 80130c2:	7818      	ldrb	r0, [r3, #0]
 80130c4:	2830      	cmp	r0, #48	@ 0x30
 80130c6:	4699      	mov	r9, r3
 80130c8:	f103 0301 	add.w	r3, r3, #1
 80130cc:	d0f9      	beq.n	80130c2 <__gethex+0x4e>
 80130ce:	f7ff ffbb 	bl	8013048 <__hexdig_fun>
 80130d2:	fab0 f580 	clz	r5, r0
 80130d6:	096d      	lsrs	r5, r5, #5
 80130d8:	f04f 0b01 	mov.w	fp, #1
 80130dc:	464a      	mov	r2, r9
 80130de:	4616      	mov	r6, r2
 80130e0:	3201      	adds	r2, #1
 80130e2:	7830      	ldrb	r0, [r6, #0]
 80130e4:	f7ff ffb0 	bl	8013048 <__hexdig_fun>
 80130e8:	2800      	cmp	r0, #0
 80130ea:	d1f8      	bne.n	80130de <__gethex+0x6a>
 80130ec:	498d      	ldr	r1, [pc, #564]	@ (8013324 <__gethex+0x2b0>)
 80130ee:	2201      	movs	r2, #1
 80130f0:	4630      	mov	r0, r6
 80130f2:	f7fe ff34 	bl	8011f5e <strncmp>
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d13f      	bne.n	801317a <__gethex+0x106>
 80130fa:	b944      	cbnz	r4, 801310e <__gethex+0x9a>
 80130fc:	1c74      	adds	r4, r6, #1
 80130fe:	4622      	mov	r2, r4
 8013100:	4616      	mov	r6, r2
 8013102:	3201      	adds	r2, #1
 8013104:	7830      	ldrb	r0, [r6, #0]
 8013106:	f7ff ff9f 	bl	8013048 <__hexdig_fun>
 801310a:	2800      	cmp	r0, #0
 801310c:	d1f8      	bne.n	8013100 <__gethex+0x8c>
 801310e:	1ba4      	subs	r4, r4, r6
 8013110:	00a7      	lsls	r7, r4, #2
 8013112:	7833      	ldrb	r3, [r6, #0]
 8013114:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013118:	2b50      	cmp	r3, #80	@ 0x50
 801311a:	d13e      	bne.n	801319a <__gethex+0x126>
 801311c:	7873      	ldrb	r3, [r6, #1]
 801311e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013120:	d033      	beq.n	801318a <__gethex+0x116>
 8013122:	2b2d      	cmp	r3, #45	@ 0x2d
 8013124:	d034      	beq.n	8013190 <__gethex+0x11c>
 8013126:	1c71      	adds	r1, r6, #1
 8013128:	2400      	movs	r4, #0
 801312a:	7808      	ldrb	r0, [r1, #0]
 801312c:	f7ff ff8c 	bl	8013048 <__hexdig_fun>
 8013130:	1e43      	subs	r3, r0, #1
 8013132:	b2db      	uxtb	r3, r3
 8013134:	2b18      	cmp	r3, #24
 8013136:	d830      	bhi.n	801319a <__gethex+0x126>
 8013138:	f1a0 0210 	sub.w	r2, r0, #16
 801313c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013140:	f7ff ff82 	bl	8013048 <__hexdig_fun>
 8013144:	f100 3cff 	add.w	ip, r0, #4294967295
 8013148:	fa5f fc8c 	uxtb.w	ip, ip
 801314c:	f1bc 0f18 	cmp.w	ip, #24
 8013150:	f04f 030a 	mov.w	r3, #10
 8013154:	d91e      	bls.n	8013194 <__gethex+0x120>
 8013156:	b104      	cbz	r4, 801315a <__gethex+0xe6>
 8013158:	4252      	negs	r2, r2
 801315a:	4417      	add	r7, r2
 801315c:	f8ca 1000 	str.w	r1, [sl]
 8013160:	b1ed      	cbz	r5, 801319e <__gethex+0x12a>
 8013162:	f1bb 0f00 	cmp.w	fp, #0
 8013166:	bf0c      	ite	eq
 8013168:	2506      	moveq	r5, #6
 801316a:	2500      	movne	r5, #0
 801316c:	4628      	mov	r0, r5
 801316e:	b005      	add	sp, #20
 8013170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013174:	2500      	movs	r5, #0
 8013176:	462c      	mov	r4, r5
 8013178:	e7b0      	b.n	80130dc <__gethex+0x68>
 801317a:	2c00      	cmp	r4, #0
 801317c:	d1c7      	bne.n	801310e <__gethex+0x9a>
 801317e:	4627      	mov	r7, r4
 8013180:	e7c7      	b.n	8013112 <__gethex+0x9e>
 8013182:	464e      	mov	r6, r9
 8013184:	462f      	mov	r7, r5
 8013186:	2501      	movs	r5, #1
 8013188:	e7c3      	b.n	8013112 <__gethex+0x9e>
 801318a:	2400      	movs	r4, #0
 801318c:	1cb1      	adds	r1, r6, #2
 801318e:	e7cc      	b.n	801312a <__gethex+0xb6>
 8013190:	2401      	movs	r4, #1
 8013192:	e7fb      	b.n	801318c <__gethex+0x118>
 8013194:	fb03 0002 	mla	r0, r3, r2, r0
 8013198:	e7ce      	b.n	8013138 <__gethex+0xc4>
 801319a:	4631      	mov	r1, r6
 801319c:	e7de      	b.n	801315c <__gethex+0xe8>
 801319e:	eba6 0309 	sub.w	r3, r6, r9
 80131a2:	3b01      	subs	r3, #1
 80131a4:	4629      	mov	r1, r5
 80131a6:	2b07      	cmp	r3, #7
 80131a8:	dc0a      	bgt.n	80131c0 <__gethex+0x14c>
 80131aa:	9801      	ldr	r0, [sp, #4]
 80131ac:	f000 fafc 	bl	80137a8 <_Balloc>
 80131b0:	4604      	mov	r4, r0
 80131b2:	b940      	cbnz	r0, 80131c6 <__gethex+0x152>
 80131b4:	4b5c      	ldr	r3, [pc, #368]	@ (8013328 <__gethex+0x2b4>)
 80131b6:	4602      	mov	r2, r0
 80131b8:	21e4      	movs	r1, #228	@ 0xe4
 80131ba:	485c      	ldr	r0, [pc, #368]	@ (801332c <__gethex+0x2b8>)
 80131bc:	f7ff f832 	bl	8012224 <__assert_func>
 80131c0:	3101      	adds	r1, #1
 80131c2:	105b      	asrs	r3, r3, #1
 80131c4:	e7ef      	b.n	80131a6 <__gethex+0x132>
 80131c6:	f100 0a14 	add.w	sl, r0, #20
 80131ca:	2300      	movs	r3, #0
 80131cc:	4655      	mov	r5, sl
 80131ce:	469b      	mov	fp, r3
 80131d0:	45b1      	cmp	r9, r6
 80131d2:	d337      	bcc.n	8013244 <__gethex+0x1d0>
 80131d4:	f845 bb04 	str.w	fp, [r5], #4
 80131d8:	eba5 050a 	sub.w	r5, r5, sl
 80131dc:	10ad      	asrs	r5, r5, #2
 80131de:	6125      	str	r5, [r4, #16]
 80131e0:	4658      	mov	r0, fp
 80131e2:	f000 fbd3 	bl	801398c <__hi0bits>
 80131e6:	016d      	lsls	r5, r5, #5
 80131e8:	f8d8 6000 	ldr.w	r6, [r8]
 80131ec:	1a2d      	subs	r5, r5, r0
 80131ee:	42b5      	cmp	r5, r6
 80131f0:	dd54      	ble.n	801329c <__gethex+0x228>
 80131f2:	1bad      	subs	r5, r5, r6
 80131f4:	4629      	mov	r1, r5
 80131f6:	4620      	mov	r0, r4
 80131f8:	f000 ff5f 	bl	80140ba <__any_on>
 80131fc:	4681      	mov	r9, r0
 80131fe:	b178      	cbz	r0, 8013220 <__gethex+0x1ac>
 8013200:	1e6b      	subs	r3, r5, #1
 8013202:	1159      	asrs	r1, r3, #5
 8013204:	f003 021f 	and.w	r2, r3, #31
 8013208:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801320c:	f04f 0901 	mov.w	r9, #1
 8013210:	fa09 f202 	lsl.w	r2, r9, r2
 8013214:	420a      	tst	r2, r1
 8013216:	d003      	beq.n	8013220 <__gethex+0x1ac>
 8013218:	454b      	cmp	r3, r9
 801321a:	dc36      	bgt.n	801328a <__gethex+0x216>
 801321c:	f04f 0902 	mov.w	r9, #2
 8013220:	4629      	mov	r1, r5
 8013222:	4620      	mov	r0, r4
 8013224:	f7ff febe 	bl	8012fa4 <rshift>
 8013228:	442f      	add	r7, r5
 801322a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801322e:	42bb      	cmp	r3, r7
 8013230:	da42      	bge.n	80132b8 <__gethex+0x244>
 8013232:	9801      	ldr	r0, [sp, #4]
 8013234:	4621      	mov	r1, r4
 8013236:	f000 faf7 	bl	8013828 <_Bfree>
 801323a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801323c:	2300      	movs	r3, #0
 801323e:	6013      	str	r3, [r2, #0]
 8013240:	25a3      	movs	r5, #163	@ 0xa3
 8013242:	e793      	b.n	801316c <__gethex+0xf8>
 8013244:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013248:	2a2e      	cmp	r2, #46	@ 0x2e
 801324a:	d012      	beq.n	8013272 <__gethex+0x1fe>
 801324c:	2b20      	cmp	r3, #32
 801324e:	d104      	bne.n	801325a <__gethex+0x1e6>
 8013250:	f845 bb04 	str.w	fp, [r5], #4
 8013254:	f04f 0b00 	mov.w	fp, #0
 8013258:	465b      	mov	r3, fp
 801325a:	7830      	ldrb	r0, [r6, #0]
 801325c:	9303      	str	r3, [sp, #12]
 801325e:	f7ff fef3 	bl	8013048 <__hexdig_fun>
 8013262:	9b03      	ldr	r3, [sp, #12]
 8013264:	f000 000f 	and.w	r0, r0, #15
 8013268:	4098      	lsls	r0, r3
 801326a:	ea4b 0b00 	orr.w	fp, fp, r0
 801326e:	3304      	adds	r3, #4
 8013270:	e7ae      	b.n	80131d0 <__gethex+0x15c>
 8013272:	45b1      	cmp	r9, r6
 8013274:	d8ea      	bhi.n	801324c <__gethex+0x1d8>
 8013276:	492b      	ldr	r1, [pc, #172]	@ (8013324 <__gethex+0x2b0>)
 8013278:	9303      	str	r3, [sp, #12]
 801327a:	2201      	movs	r2, #1
 801327c:	4630      	mov	r0, r6
 801327e:	f7fe fe6e 	bl	8011f5e <strncmp>
 8013282:	9b03      	ldr	r3, [sp, #12]
 8013284:	2800      	cmp	r0, #0
 8013286:	d1e1      	bne.n	801324c <__gethex+0x1d8>
 8013288:	e7a2      	b.n	80131d0 <__gethex+0x15c>
 801328a:	1ea9      	subs	r1, r5, #2
 801328c:	4620      	mov	r0, r4
 801328e:	f000 ff14 	bl	80140ba <__any_on>
 8013292:	2800      	cmp	r0, #0
 8013294:	d0c2      	beq.n	801321c <__gethex+0x1a8>
 8013296:	f04f 0903 	mov.w	r9, #3
 801329a:	e7c1      	b.n	8013220 <__gethex+0x1ac>
 801329c:	da09      	bge.n	80132b2 <__gethex+0x23e>
 801329e:	1b75      	subs	r5, r6, r5
 80132a0:	4621      	mov	r1, r4
 80132a2:	9801      	ldr	r0, [sp, #4]
 80132a4:	462a      	mov	r2, r5
 80132a6:	f000 fccf 	bl	8013c48 <__lshift>
 80132aa:	1b7f      	subs	r7, r7, r5
 80132ac:	4604      	mov	r4, r0
 80132ae:	f100 0a14 	add.w	sl, r0, #20
 80132b2:	f04f 0900 	mov.w	r9, #0
 80132b6:	e7b8      	b.n	801322a <__gethex+0x1b6>
 80132b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80132bc:	42bd      	cmp	r5, r7
 80132be:	dd6f      	ble.n	80133a0 <__gethex+0x32c>
 80132c0:	1bed      	subs	r5, r5, r7
 80132c2:	42ae      	cmp	r6, r5
 80132c4:	dc34      	bgt.n	8013330 <__gethex+0x2bc>
 80132c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132ca:	2b02      	cmp	r3, #2
 80132cc:	d022      	beq.n	8013314 <__gethex+0x2a0>
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	d024      	beq.n	801331c <__gethex+0x2a8>
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d115      	bne.n	8013302 <__gethex+0x28e>
 80132d6:	42ae      	cmp	r6, r5
 80132d8:	d113      	bne.n	8013302 <__gethex+0x28e>
 80132da:	2e01      	cmp	r6, #1
 80132dc:	d10b      	bne.n	80132f6 <__gethex+0x282>
 80132de:	9a02      	ldr	r2, [sp, #8]
 80132e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80132e4:	6013      	str	r3, [r2, #0]
 80132e6:	2301      	movs	r3, #1
 80132e8:	6123      	str	r3, [r4, #16]
 80132ea:	f8ca 3000 	str.w	r3, [sl]
 80132ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132f0:	2562      	movs	r5, #98	@ 0x62
 80132f2:	601c      	str	r4, [r3, #0]
 80132f4:	e73a      	b.n	801316c <__gethex+0xf8>
 80132f6:	1e71      	subs	r1, r6, #1
 80132f8:	4620      	mov	r0, r4
 80132fa:	f000 fede 	bl	80140ba <__any_on>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d1ed      	bne.n	80132de <__gethex+0x26a>
 8013302:	9801      	ldr	r0, [sp, #4]
 8013304:	4621      	mov	r1, r4
 8013306:	f000 fa8f 	bl	8013828 <_Bfree>
 801330a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801330c:	2300      	movs	r3, #0
 801330e:	6013      	str	r3, [r2, #0]
 8013310:	2550      	movs	r5, #80	@ 0x50
 8013312:	e72b      	b.n	801316c <__gethex+0xf8>
 8013314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013316:	2b00      	cmp	r3, #0
 8013318:	d1f3      	bne.n	8013302 <__gethex+0x28e>
 801331a:	e7e0      	b.n	80132de <__gethex+0x26a>
 801331c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801331e:	2b00      	cmp	r3, #0
 8013320:	d1dd      	bne.n	80132de <__gethex+0x26a>
 8013322:	e7ee      	b.n	8013302 <__gethex+0x28e>
 8013324:	08014c9c 	.word	0x08014c9c
 8013328:	08014dec 	.word	0x08014dec
 801332c:	08014dfd 	.word	0x08014dfd
 8013330:	1e6f      	subs	r7, r5, #1
 8013332:	f1b9 0f00 	cmp.w	r9, #0
 8013336:	d130      	bne.n	801339a <__gethex+0x326>
 8013338:	b127      	cbz	r7, 8013344 <__gethex+0x2d0>
 801333a:	4639      	mov	r1, r7
 801333c:	4620      	mov	r0, r4
 801333e:	f000 febc 	bl	80140ba <__any_on>
 8013342:	4681      	mov	r9, r0
 8013344:	117a      	asrs	r2, r7, #5
 8013346:	2301      	movs	r3, #1
 8013348:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801334c:	f007 071f 	and.w	r7, r7, #31
 8013350:	40bb      	lsls	r3, r7
 8013352:	4213      	tst	r3, r2
 8013354:	4629      	mov	r1, r5
 8013356:	4620      	mov	r0, r4
 8013358:	bf18      	it	ne
 801335a:	f049 0902 	orrne.w	r9, r9, #2
 801335e:	f7ff fe21 	bl	8012fa4 <rshift>
 8013362:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013366:	1b76      	subs	r6, r6, r5
 8013368:	2502      	movs	r5, #2
 801336a:	f1b9 0f00 	cmp.w	r9, #0
 801336e:	d047      	beq.n	8013400 <__gethex+0x38c>
 8013370:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013374:	2b02      	cmp	r3, #2
 8013376:	d015      	beq.n	80133a4 <__gethex+0x330>
 8013378:	2b03      	cmp	r3, #3
 801337a:	d017      	beq.n	80133ac <__gethex+0x338>
 801337c:	2b01      	cmp	r3, #1
 801337e:	d109      	bne.n	8013394 <__gethex+0x320>
 8013380:	f019 0f02 	tst.w	r9, #2
 8013384:	d006      	beq.n	8013394 <__gethex+0x320>
 8013386:	f8da 3000 	ldr.w	r3, [sl]
 801338a:	ea49 0903 	orr.w	r9, r9, r3
 801338e:	f019 0f01 	tst.w	r9, #1
 8013392:	d10e      	bne.n	80133b2 <__gethex+0x33e>
 8013394:	f045 0510 	orr.w	r5, r5, #16
 8013398:	e032      	b.n	8013400 <__gethex+0x38c>
 801339a:	f04f 0901 	mov.w	r9, #1
 801339e:	e7d1      	b.n	8013344 <__gethex+0x2d0>
 80133a0:	2501      	movs	r5, #1
 80133a2:	e7e2      	b.n	801336a <__gethex+0x2f6>
 80133a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133a6:	f1c3 0301 	rsb	r3, r3, #1
 80133aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80133ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d0f0      	beq.n	8013394 <__gethex+0x320>
 80133b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80133b6:	f104 0314 	add.w	r3, r4, #20
 80133ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80133be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80133c2:	f04f 0c00 	mov.w	ip, #0
 80133c6:	4618      	mov	r0, r3
 80133c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80133d0:	d01b      	beq.n	801340a <__gethex+0x396>
 80133d2:	3201      	adds	r2, #1
 80133d4:	6002      	str	r2, [r0, #0]
 80133d6:	2d02      	cmp	r5, #2
 80133d8:	f104 0314 	add.w	r3, r4, #20
 80133dc:	d13c      	bne.n	8013458 <__gethex+0x3e4>
 80133de:	f8d8 2000 	ldr.w	r2, [r8]
 80133e2:	3a01      	subs	r2, #1
 80133e4:	42b2      	cmp	r2, r6
 80133e6:	d109      	bne.n	80133fc <__gethex+0x388>
 80133e8:	1171      	asrs	r1, r6, #5
 80133ea:	2201      	movs	r2, #1
 80133ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133f0:	f006 061f 	and.w	r6, r6, #31
 80133f4:	fa02 f606 	lsl.w	r6, r2, r6
 80133f8:	421e      	tst	r6, r3
 80133fa:	d13a      	bne.n	8013472 <__gethex+0x3fe>
 80133fc:	f045 0520 	orr.w	r5, r5, #32
 8013400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013402:	601c      	str	r4, [r3, #0]
 8013404:	9b02      	ldr	r3, [sp, #8]
 8013406:	601f      	str	r7, [r3, #0]
 8013408:	e6b0      	b.n	801316c <__gethex+0xf8>
 801340a:	4299      	cmp	r1, r3
 801340c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013410:	d8d9      	bhi.n	80133c6 <__gethex+0x352>
 8013412:	68a3      	ldr	r3, [r4, #8]
 8013414:	459b      	cmp	fp, r3
 8013416:	db17      	blt.n	8013448 <__gethex+0x3d4>
 8013418:	6861      	ldr	r1, [r4, #4]
 801341a:	9801      	ldr	r0, [sp, #4]
 801341c:	3101      	adds	r1, #1
 801341e:	f000 f9c3 	bl	80137a8 <_Balloc>
 8013422:	4681      	mov	r9, r0
 8013424:	b918      	cbnz	r0, 801342e <__gethex+0x3ba>
 8013426:	4b1a      	ldr	r3, [pc, #104]	@ (8013490 <__gethex+0x41c>)
 8013428:	4602      	mov	r2, r0
 801342a:	2184      	movs	r1, #132	@ 0x84
 801342c:	e6c5      	b.n	80131ba <__gethex+0x146>
 801342e:	6922      	ldr	r2, [r4, #16]
 8013430:	3202      	adds	r2, #2
 8013432:	f104 010c 	add.w	r1, r4, #12
 8013436:	0092      	lsls	r2, r2, #2
 8013438:	300c      	adds	r0, #12
 801343a:	f7fe fed4 	bl	80121e6 <memcpy>
 801343e:	4621      	mov	r1, r4
 8013440:	9801      	ldr	r0, [sp, #4]
 8013442:	f000 f9f1 	bl	8013828 <_Bfree>
 8013446:	464c      	mov	r4, r9
 8013448:	6923      	ldr	r3, [r4, #16]
 801344a:	1c5a      	adds	r2, r3, #1
 801344c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013450:	6122      	str	r2, [r4, #16]
 8013452:	2201      	movs	r2, #1
 8013454:	615a      	str	r2, [r3, #20]
 8013456:	e7be      	b.n	80133d6 <__gethex+0x362>
 8013458:	6922      	ldr	r2, [r4, #16]
 801345a:	455a      	cmp	r2, fp
 801345c:	dd0b      	ble.n	8013476 <__gethex+0x402>
 801345e:	2101      	movs	r1, #1
 8013460:	4620      	mov	r0, r4
 8013462:	f7ff fd9f 	bl	8012fa4 <rshift>
 8013466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801346a:	3701      	adds	r7, #1
 801346c:	42bb      	cmp	r3, r7
 801346e:	f6ff aee0 	blt.w	8013232 <__gethex+0x1be>
 8013472:	2501      	movs	r5, #1
 8013474:	e7c2      	b.n	80133fc <__gethex+0x388>
 8013476:	f016 061f 	ands.w	r6, r6, #31
 801347a:	d0fa      	beq.n	8013472 <__gethex+0x3fe>
 801347c:	4453      	add	r3, sl
 801347e:	f1c6 0620 	rsb	r6, r6, #32
 8013482:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013486:	f000 fa81 	bl	801398c <__hi0bits>
 801348a:	42b0      	cmp	r0, r6
 801348c:	dbe7      	blt.n	801345e <__gethex+0x3ea>
 801348e:	e7f0      	b.n	8013472 <__gethex+0x3fe>
 8013490:	08014dec 	.word	0x08014dec

08013494 <L_shift>:
 8013494:	f1c2 0208 	rsb	r2, r2, #8
 8013498:	0092      	lsls	r2, r2, #2
 801349a:	b570      	push	{r4, r5, r6, lr}
 801349c:	f1c2 0620 	rsb	r6, r2, #32
 80134a0:	6843      	ldr	r3, [r0, #4]
 80134a2:	6804      	ldr	r4, [r0, #0]
 80134a4:	fa03 f506 	lsl.w	r5, r3, r6
 80134a8:	432c      	orrs	r4, r5
 80134aa:	40d3      	lsrs	r3, r2
 80134ac:	6004      	str	r4, [r0, #0]
 80134ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80134b2:	4288      	cmp	r0, r1
 80134b4:	d3f4      	bcc.n	80134a0 <L_shift+0xc>
 80134b6:	bd70      	pop	{r4, r5, r6, pc}

080134b8 <__match>:
 80134b8:	b530      	push	{r4, r5, lr}
 80134ba:	6803      	ldr	r3, [r0, #0]
 80134bc:	3301      	adds	r3, #1
 80134be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134c2:	b914      	cbnz	r4, 80134ca <__match+0x12>
 80134c4:	6003      	str	r3, [r0, #0]
 80134c6:	2001      	movs	r0, #1
 80134c8:	bd30      	pop	{r4, r5, pc}
 80134ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80134d2:	2d19      	cmp	r5, #25
 80134d4:	bf98      	it	ls
 80134d6:	3220      	addls	r2, #32
 80134d8:	42a2      	cmp	r2, r4
 80134da:	d0f0      	beq.n	80134be <__match+0x6>
 80134dc:	2000      	movs	r0, #0
 80134de:	e7f3      	b.n	80134c8 <__match+0x10>

080134e0 <__hexnan>:
 80134e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e4:	680b      	ldr	r3, [r1, #0]
 80134e6:	6801      	ldr	r1, [r0, #0]
 80134e8:	115e      	asrs	r6, r3, #5
 80134ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80134ee:	f013 031f 	ands.w	r3, r3, #31
 80134f2:	b087      	sub	sp, #28
 80134f4:	bf18      	it	ne
 80134f6:	3604      	addne	r6, #4
 80134f8:	2500      	movs	r5, #0
 80134fa:	1f37      	subs	r7, r6, #4
 80134fc:	4682      	mov	sl, r0
 80134fe:	4690      	mov	r8, r2
 8013500:	9301      	str	r3, [sp, #4]
 8013502:	f846 5c04 	str.w	r5, [r6, #-4]
 8013506:	46b9      	mov	r9, r7
 8013508:	463c      	mov	r4, r7
 801350a:	9502      	str	r5, [sp, #8]
 801350c:	46ab      	mov	fp, r5
 801350e:	784a      	ldrb	r2, [r1, #1]
 8013510:	1c4b      	adds	r3, r1, #1
 8013512:	9303      	str	r3, [sp, #12]
 8013514:	b342      	cbz	r2, 8013568 <__hexnan+0x88>
 8013516:	4610      	mov	r0, r2
 8013518:	9105      	str	r1, [sp, #20]
 801351a:	9204      	str	r2, [sp, #16]
 801351c:	f7ff fd94 	bl	8013048 <__hexdig_fun>
 8013520:	2800      	cmp	r0, #0
 8013522:	d151      	bne.n	80135c8 <__hexnan+0xe8>
 8013524:	9a04      	ldr	r2, [sp, #16]
 8013526:	9905      	ldr	r1, [sp, #20]
 8013528:	2a20      	cmp	r2, #32
 801352a:	d818      	bhi.n	801355e <__hexnan+0x7e>
 801352c:	9b02      	ldr	r3, [sp, #8]
 801352e:	459b      	cmp	fp, r3
 8013530:	dd13      	ble.n	801355a <__hexnan+0x7a>
 8013532:	454c      	cmp	r4, r9
 8013534:	d206      	bcs.n	8013544 <__hexnan+0x64>
 8013536:	2d07      	cmp	r5, #7
 8013538:	dc04      	bgt.n	8013544 <__hexnan+0x64>
 801353a:	462a      	mov	r2, r5
 801353c:	4649      	mov	r1, r9
 801353e:	4620      	mov	r0, r4
 8013540:	f7ff ffa8 	bl	8013494 <L_shift>
 8013544:	4544      	cmp	r4, r8
 8013546:	d952      	bls.n	80135ee <__hexnan+0x10e>
 8013548:	2300      	movs	r3, #0
 801354a:	f1a4 0904 	sub.w	r9, r4, #4
 801354e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013552:	f8cd b008 	str.w	fp, [sp, #8]
 8013556:	464c      	mov	r4, r9
 8013558:	461d      	mov	r5, r3
 801355a:	9903      	ldr	r1, [sp, #12]
 801355c:	e7d7      	b.n	801350e <__hexnan+0x2e>
 801355e:	2a29      	cmp	r2, #41	@ 0x29
 8013560:	d157      	bne.n	8013612 <__hexnan+0x132>
 8013562:	3102      	adds	r1, #2
 8013564:	f8ca 1000 	str.w	r1, [sl]
 8013568:	f1bb 0f00 	cmp.w	fp, #0
 801356c:	d051      	beq.n	8013612 <__hexnan+0x132>
 801356e:	454c      	cmp	r4, r9
 8013570:	d206      	bcs.n	8013580 <__hexnan+0xa0>
 8013572:	2d07      	cmp	r5, #7
 8013574:	dc04      	bgt.n	8013580 <__hexnan+0xa0>
 8013576:	462a      	mov	r2, r5
 8013578:	4649      	mov	r1, r9
 801357a:	4620      	mov	r0, r4
 801357c:	f7ff ff8a 	bl	8013494 <L_shift>
 8013580:	4544      	cmp	r4, r8
 8013582:	d936      	bls.n	80135f2 <__hexnan+0x112>
 8013584:	f1a8 0204 	sub.w	r2, r8, #4
 8013588:	4623      	mov	r3, r4
 801358a:	f853 1b04 	ldr.w	r1, [r3], #4
 801358e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013592:	429f      	cmp	r7, r3
 8013594:	d2f9      	bcs.n	801358a <__hexnan+0xaa>
 8013596:	1b3b      	subs	r3, r7, r4
 8013598:	f023 0303 	bic.w	r3, r3, #3
 801359c:	3304      	adds	r3, #4
 801359e:	3401      	adds	r4, #1
 80135a0:	3e03      	subs	r6, #3
 80135a2:	42b4      	cmp	r4, r6
 80135a4:	bf88      	it	hi
 80135a6:	2304      	movhi	r3, #4
 80135a8:	4443      	add	r3, r8
 80135aa:	2200      	movs	r2, #0
 80135ac:	f843 2b04 	str.w	r2, [r3], #4
 80135b0:	429f      	cmp	r7, r3
 80135b2:	d2fb      	bcs.n	80135ac <__hexnan+0xcc>
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	b91b      	cbnz	r3, 80135c0 <__hexnan+0xe0>
 80135b8:	4547      	cmp	r7, r8
 80135ba:	d128      	bne.n	801360e <__hexnan+0x12e>
 80135bc:	2301      	movs	r3, #1
 80135be:	603b      	str	r3, [r7, #0]
 80135c0:	2005      	movs	r0, #5
 80135c2:	b007      	add	sp, #28
 80135c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c8:	3501      	adds	r5, #1
 80135ca:	2d08      	cmp	r5, #8
 80135cc:	f10b 0b01 	add.w	fp, fp, #1
 80135d0:	dd06      	ble.n	80135e0 <__hexnan+0x100>
 80135d2:	4544      	cmp	r4, r8
 80135d4:	d9c1      	bls.n	801355a <__hexnan+0x7a>
 80135d6:	2300      	movs	r3, #0
 80135d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80135dc:	2501      	movs	r5, #1
 80135de:	3c04      	subs	r4, #4
 80135e0:	6822      	ldr	r2, [r4, #0]
 80135e2:	f000 000f 	and.w	r0, r0, #15
 80135e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80135ea:	6020      	str	r0, [r4, #0]
 80135ec:	e7b5      	b.n	801355a <__hexnan+0x7a>
 80135ee:	2508      	movs	r5, #8
 80135f0:	e7b3      	b.n	801355a <__hexnan+0x7a>
 80135f2:	9b01      	ldr	r3, [sp, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d0dd      	beq.n	80135b4 <__hexnan+0xd4>
 80135f8:	f1c3 0320 	rsb	r3, r3, #32
 80135fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013600:	40da      	lsrs	r2, r3
 8013602:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013606:	4013      	ands	r3, r2
 8013608:	f846 3c04 	str.w	r3, [r6, #-4]
 801360c:	e7d2      	b.n	80135b4 <__hexnan+0xd4>
 801360e:	3f04      	subs	r7, #4
 8013610:	e7d0      	b.n	80135b4 <__hexnan+0xd4>
 8013612:	2004      	movs	r0, #4
 8013614:	e7d5      	b.n	80135c2 <__hexnan+0xe2>
	...

08013618 <malloc>:
 8013618:	4b02      	ldr	r3, [pc, #8]	@ (8013624 <malloc+0xc>)
 801361a:	4601      	mov	r1, r0
 801361c:	6818      	ldr	r0, [r3, #0]
 801361e:	f000 b825 	b.w	801366c <_malloc_r>
 8013622:	bf00      	nop
 8013624:	2000018c 	.word	0x2000018c

08013628 <sbrk_aligned>:
 8013628:	b570      	push	{r4, r5, r6, lr}
 801362a:	4e0f      	ldr	r6, [pc, #60]	@ (8013668 <sbrk_aligned+0x40>)
 801362c:	460c      	mov	r4, r1
 801362e:	6831      	ldr	r1, [r6, #0]
 8013630:	4605      	mov	r5, r0
 8013632:	b911      	cbnz	r1, 801363a <sbrk_aligned+0x12>
 8013634:	f001 f964 	bl	8014900 <_sbrk_r>
 8013638:	6030      	str	r0, [r6, #0]
 801363a:	4621      	mov	r1, r4
 801363c:	4628      	mov	r0, r5
 801363e:	f001 f95f 	bl	8014900 <_sbrk_r>
 8013642:	1c43      	adds	r3, r0, #1
 8013644:	d103      	bne.n	801364e <sbrk_aligned+0x26>
 8013646:	f04f 34ff 	mov.w	r4, #4294967295
 801364a:	4620      	mov	r0, r4
 801364c:	bd70      	pop	{r4, r5, r6, pc}
 801364e:	1cc4      	adds	r4, r0, #3
 8013650:	f024 0403 	bic.w	r4, r4, #3
 8013654:	42a0      	cmp	r0, r4
 8013656:	d0f8      	beq.n	801364a <sbrk_aligned+0x22>
 8013658:	1a21      	subs	r1, r4, r0
 801365a:	4628      	mov	r0, r5
 801365c:	f001 f950 	bl	8014900 <_sbrk_r>
 8013660:	3001      	adds	r0, #1
 8013662:	d1f2      	bne.n	801364a <sbrk_aligned+0x22>
 8013664:	e7ef      	b.n	8013646 <sbrk_aligned+0x1e>
 8013666:	bf00      	nop
 8013668:	20004f14 	.word	0x20004f14

0801366c <_malloc_r>:
 801366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013670:	1ccd      	adds	r5, r1, #3
 8013672:	f025 0503 	bic.w	r5, r5, #3
 8013676:	3508      	adds	r5, #8
 8013678:	2d0c      	cmp	r5, #12
 801367a:	bf38      	it	cc
 801367c:	250c      	movcc	r5, #12
 801367e:	2d00      	cmp	r5, #0
 8013680:	4606      	mov	r6, r0
 8013682:	db01      	blt.n	8013688 <_malloc_r+0x1c>
 8013684:	42a9      	cmp	r1, r5
 8013686:	d904      	bls.n	8013692 <_malloc_r+0x26>
 8013688:	230c      	movs	r3, #12
 801368a:	6033      	str	r3, [r6, #0]
 801368c:	2000      	movs	r0, #0
 801368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013768 <_malloc_r+0xfc>
 8013696:	f000 f87b 	bl	8013790 <__malloc_lock>
 801369a:	f8d8 3000 	ldr.w	r3, [r8]
 801369e:	461c      	mov	r4, r3
 80136a0:	bb44      	cbnz	r4, 80136f4 <_malloc_r+0x88>
 80136a2:	4629      	mov	r1, r5
 80136a4:	4630      	mov	r0, r6
 80136a6:	f7ff ffbf 	bl	8013628 <sbrk_aligned>
 80136aa:	1c43      	adds	r3, r0, #1
 80136ac:	4604      	mov	r4, r0
 80136ae:	d158      	bne.n	8013762 <_malloc_r+0xf6>
 80136b0:	f8d8 4000 	ldr.w	r4, [r8]
 80136b4:	4627      	mov	r7, r4
 80136b6:	2f00      	cmp	r7, #0
 80136b8:	d143      	bne.n	8013742 <_malloc_r+0xd6>
 80136ba:	2c00      	cmp	r4, #0
 80136bc:	d04b      	beq.n	8013756 <_malloc_r+0xea>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	4639      	mov	r1, r7
 80136c2:	4630      	mov	r0, r6
 80136c4:	eb04 0903 	add.w	r9, r4, r3
 80136c8:	f001 f91a 	bl	8014900 <_sbrk_r>
 80136cc:	4581      	cmp	r9, r0
 80136ce:	d142      	bne.n	8013756 <_malloc_r+0xea>
 80136d0:	6821      	ldr	r1, [r4, #0]
 80136d2:	1a6d      	subs	r5, r5, r1
 80136d4:	4629      	mov	r1, r5
 80136d6:	4630      	mov	r0, r6
 80136d8:	f7ff ffa6 	bl	8013628 <sbrk_aligned>
 80136dc:	3001      	adds	r0, #1
 80136de:	d03a      	beq.n	8013756 <_malloc_r+0xea>
 80136e0:	6823      	ldr	r3, [r4, #0]
 80136e2:	442b      	add	r3, r5
 80136e4:	6023      	str	r3, [r4, #0]
 80136e6:	f8d8 3000 	ldr.w	r3, [r8]
 80136ea:	685a      	ldr	r2, [r3, #4]
 80136ec:	bb62      	cbnz	r2, 8013748 <_malloc_r+0xdc>
 80136ee:	f8c8 7000 	str.w	r7, [r8]
 80136f2:	e00f      	b.n	8013714 <_malloc_r+0xa8>
 80136f4:	6822      	ldr	r2, [r4, #0]
 80136f6:	1b52      	subs	r2, r2, r5
 80136f8:	d420      	bmi.n	801373c <_malloc_r+0xd0>
 80136fa:	2a0b      	cmp	r2, #11
 80136fc:	d917      	bls.n	801372e <_malloc_r+0xc2>
 80136fe:	1961      	adds	r1, r4, r5
 8013700:	42a3      	cmp	r3, r4
 8013702:	6025      	str	r5, [r4, #0]
 8013704:	bf18      	it	ne
 8013706:	6059      	strne	r1, [r3, #4]
 8013708:	6863      	ldr	r3, [r4, #4]
 801370a:	bf08      	it	eq
 801370c:	f8c8 1000 	streq.w	r1, [r8]
 8013710:	5162      	str	r2, [r4, r5]
 8013712:	604b      	str	r3, [r1, #4]
 8013714:	4630      	mov	r0, r6
 8013716:	f000 f841 	bl	801379c <__malloc_unlock>
 801371a:	f104 000b 	add.w	r0, r4, #11
 801371e:	1d23      	adds	r3, r4, #4
 8013720:	f020 0007 	bic.w	r0, r0, #7
 8013724:	1ac2      	subs	r2, r0, r3
 8013726:	bf1c      	itt	ne
 8013728:	1a1b      	subne	r3, r3, r0
 801372a:	50a3      	strne	r3, [r4, r2]
 801372c:	e7af      	b.n	801368e <_malloc_r+0x22>
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	42a3      	cmp	r3, r4
 8013732:	bf0c      	ite	eq
 8013734:	f8c8 2000 	streq.w	r2, [r8]
 8013738:	605a      	strne	r2, [r3, #4]
 801373a:	e7eb      	b.n	8013714 <_malloc_r+0xa8>
 801373c:	4623      	mov	r3, r4
 801373e:	6864      	ldr	r4, [r4, #4]
 8013740:	e7ae      	b.n	80136a0 <_malloc_r+0x34>
 8013742:	463c      	mov	r4, r7
 8013744:	687f      	ldr	r7, [r7, #4]
 8013746:	e7b6      	b.n	80136b6 <_malloc_r+0x4a>
 8013748:	461a      	mov	r2, r3
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	42a3      	cmp	r3, r4
 801374e:	d1fb      	bne.n	8013748 <_malloc_r+0xdc>
 8013750:	2300      	movs	r3, #0
 8013752:	6053      	str	r3, [r2, #4]
 8013754:	e7de      	b.n	8013714 <_malloc_r+0xa8>
 8013756:	230c      	movs	r3, #12
 8013758:	6033      	str	r3, [r6, #0]
 801375a:	4630      	mov	r0, r6
 801375c:	f000 f81e 	bl	801379c <__malloc_unlock>
 8013760:	e794      	b.n	801368c <_malloc_r+0x20>
 8013762:	6005      	str	r5, [r0, #0]
 8013764:	e7d6      	b.n	8013714 <_malloc_r+0xa8>
 8013766:	bf00      	nop
 8013768:	20004f18 	.word	0x20004f18

0801376c <__ascii_mbtowc>:
 801376c:	b082      	sub	sp, #8
 801376e:	b901      	cbnz	r1, 8013772 <__ascii_mbtowc+0x6>
 8013770:	a901      	add	r1, sp, #4
 8013772:	b142      	cbz	r2, 8013786 <__ascii_mbtowc+0x1a>
 8013774:	b14b      	cbz	r3, 801378a <__ascii_mbtowc+0x1e>
 8013776:	7813      	ldrb	r3, [r2, #0]
 8013778:	600b      	str	r3, [r1, #0]
 801377a:	7812      	ldrb	r2, [r2, #0]
 801377c:	1e10      	subs	r0, r2, #0
 801377e:	bf18      	it	ne
 8013780:	2001      	movne	r0, #1
 8013782:	b002      	add	sp, #8
 8013784:	4770      	bx	lr
 8013786:	4610      	mov	r0, r2
 8013788:	e7fb      	b.n	8013782 <__ascii_mbtowc+0x16>
 801378a:	f06f 0001 	mvn.w	r0, #1
 801378e:	e7f8      	b.n	8013782 <__ascii_mbtowc+0x16>

08013790 <__malloc_lock>:
 8013790:	4801      	ldr	r0, [pc, #4]	@ (8013798 <__malloc_lock+0x8>)
 8013792:	f7fe bd26 	b.w	80121e2 <__retarget_lock_acquire_recursive>
 8013796:	bf00      	nop
 8013798:	20004f10 	.word	0x20004f10

0801379c <__malloc_unlock>:
 801379c:	4801      	ldr	r0, [pc, #4]	@ (80137a4 <__malloc_unlock+0x8>)
 801379e:	f7fe bd21 	b.w	80121e4 <__retarget_lock_release_recursive>
 80137a2:	bf00      	nop
 80137a4:	20004f10 	.word	0x20004f10

080137a8 <_Balloc>:
 80137a8:	b570      	push	{r4, r5, r6, lr}
 80137aa:	69c6      	ldr	r6, [r0, #28]
 80137ac:	4604      	mov	r4, r0
 80137ae:	460d      	mov	r5, r1
 80137b0:	b976      	cbnz	r6, 80137d0 <_Balloc+0x28>
 80137b2:	2010      	movs	r0, #16
 80137b4:	f7ff ff30 	bl	8013618 <malloc>
 80137b8:	4602      	mov	r2, r0
 80137ba:	61e0      	str	r0, [r4, #28]
 80137bc:	b920      	cbnz	r0, 80137c8 <_Balloc+0x20>
 80137be:	4b18      	ldr	r3, [pc, #96]	@ (8013820 <_Balloc+0x78>)
 80137c0:	4818      	ldr	r0, [pc, #96]	@ (8013824 <_Balloc+0x7c>)
 80137c2:	216b      	movs	r1, #107	@ 0x6b
 80137c4:	f7fe fd2e 	bl	8012224 <__assert_func>
 80137c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137cc:	6006      	str	r6, [r0, #0]
 80137ce:	60c6      	str	r6, [r0, #12]
 80137d0:	69e6      	ldr	r6, [r4, #28]
 80137d2:	68f3      	ldr	r3, [r6, #12]
 80137d4:	b183      	cbz	r3, 80137f8 <_Balloc+0x50>
 80137d6:	69e3      	ldr	r3, [r4, #28]
 80137d8:	68db      	ldr	r3, [r3, #12]
 80137da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137de:	b9b8      	cbnz	r0, 8013810 <_Balloc+0x68>
 80137e0:	2101      	movs	r1, #1
 80137e2:	fa01 f605 	lsl.w	r6, r1, r5
 80137e6:	1d72      	adds	r2, r6, #5
 80137e8:	0092      	lsls	r2, r2, #2
 80137ea:	4620      	mov	r0, r4
 80137ec:	f001 f89f 	bl	801492e <_calloc_r>
 80137f0:	b160      	cbz	r0, 801380c <_Balloc+0x64>
 80137f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137f6:	e00e      	b.n	8013816 <_Balloc+0x6e>
 80137f8:	2221      	movs	r2, #33	@ 0x21
 80137fa:	2104      	movs	r1, #4
 80137fc:	4620      	mov	r0, r4
 80137fe:	f001 f896 	bl	801492e <_calloc_r>
 8013802:	69e3      	ldr	r3, [r4, #28]
 8013804:	60f0      	str	r0, [r6, #12]
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d1e4      	bne.n	80137d6 <_Balloc+0x2e>
 801380c:	2000      	movs	r0, #0
 801380e:	bd70      	pop	{r4, r5, r6, pc}
 8013810:	6802      	ldr	r2, [r0, #0]
 8013812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013816:	2300      	movs	r3, #0
 8013818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801381c:	e7f7      	b.n	801380e <_Balloc+0x66>
 801381e:	bf00      	nop
 8013820:	08014cd2 	.word	0x08014cd2
 8013824:	08014e5d 	.word	0x08014e5d

08013828 <_Bfree>:
 8013828:	b570      	push	{r4, r5, r6, lr}
 801382a:	69c6      	ldr	r6, [r0, #28]
 801382c:	4605      	mov	r5, r0
 801382e:	460c      	mov	r4, r1
 8013830:	b976      	cbnz	r6, 8013850 <_Bfree+0x28>
 8013832:	2010      	movs	r0, #16
 8013834:	f7ff fef0 	bl	8013618 <malloc>
 8013838:	4602      	mov	r2, r0
 801383a:	61e8      	str	r0, [r5, #28]
 801383c:	b920      	cbnz	r0, 8013848 <_Bfree+0x20>
 801383e:	4b09      	ldr	r3, [pc, #36]	@ (8013864 <_Bfree+0x3c>)
 8013840:	4809      	ldr	r0, [pc, #36]	@ (8013868 <_Bfree+0x40>)
 8013842:	218f      	movs	r1, #143	@ 0x8f
 8013844:	f7fe fcee 	bl	8012224 <__assert_func>
 8013848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801384c:	6006      	str	r6, [r0, #0]
 801384e:	60c6      	str	r6, [r0, #12]
 8013850:	b13c      	cbz	r4, 8013862 <_Bfree+0x3a>
 8013852:	69eb      	ldr	r3, [r5, #28]
 8013854:	6862      	ldr	r2, [r4, #4]
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801385c:	6021      	str	r1, [r4, #0]
 801385e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013862:	bd70      	pop	{r4, r5, r6, pc}
 8013864:	08014cd2 	.word	0x08014cd2
 8013868:	08014e5d 	.word	0x08014e5d

0801386c <__multadd>:
 801386c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013870:	690d      	ldr	r5, [r1, #16]
 8013872:	4607      	mov	r7, r0
 8013874:	460c      	mov	r4, r1
 8013876:	461e      	mov	r6, r3
 8013878:	f101 0c14 	add.w	ip, r1, #20
 801387c:	2000      	movs	r0, #0
 801387e:	f8dc 3000 	ldr.w	r3, [ip]
 8013882:	b299      	uxth	r1, r3
 8013884:	fb02 6101 	mla	r1, r2, r1, r6
 8013888:	0c1e      	lsrs	r6, r3, #16
 801388a:	0c0b      	lsrs	r3, r1, #16
 801388c:	fb02 3306 	mla	r3, r2, r6, r3
 8013890:	b289      	uxth	r1, r1
 8013892:	3001      	adds	r0, #1
 8013894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013898:	4285      	cmp	r5, r0
 801389a:	f84c 1b04 	str.w	r1, [ip], #4
 801389e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80138a2:	dcec      	bgt.n	801387e <__multadd+0x12>
 80138a4:	b30e      	cbz	r6, 80138ea <__multadd+0x7e>
 80138a6:	68a3      	ldr	r3, [r4, #8]
 80138a8:	42ab      	cmp	r3, r5
 80138aa:	dc19      	bgt.n	80138e0 <__multadd+0x74>
 80138ac:	6861      	ldr	r1, [r4, #4]
 80138ae:	4638      	mov	r0, r7
 80138b0:	3101      	adds	r1, #1
 80138b2:	f7ff ff79 	bl	80137a8 <_Balloc>
 80138b6:	4680      	mov	r8, r0
 80138b8:	b928      	cbnz	r0, 80138c6 <__multadd+0x5a>
 80138ba:	4602      	mov	r2, r0
 80138bc:	4b0c      	ldr	r3, [pc, #48]	@ (80138f0 <__multadd+0x84>)
 80138be:	480d      	ldr	r0, [pc, #52]	@ (80138f4 <__multadd+0x88>)
 80138c0:	21ba      	movs	r1, #186	@ 0xba
 80138c2:	f7fe fcaf 	bl	8012224 <__assert_func>
 80138c6:	6922      	ldr	r2, [r4, #16]
 80138c8:	3202      	adds	r2, #2
 80138ca:	f104 010c 	add.w	r1, r4, #12
 80138ce:	0092      	lsls	r2, r2, #2
 80138d0:	300c      	adds	r0, #12
 80138d2:	f7fe fc88 	bl	80121e6 <memcpy>
 80138d6:	4621      	mov	r1, r4
 80138d8:	4638      	mov	r0, r7
 80138da:	f7ff ffa5 	bl	8013828 <_Bfree>
 80138de:	4644      	mov	r4, r8
 80138e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138e4:	3501      	adds	r5, #1
 80138e6:	615e      	str	r6, [r3, #20]
 80138e8:	6125      	str	r5, [r4, #16]
 80138ea:	4620      	mov	r0, r4
 80138ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f0:	08014dec 	.word	0x08014dec
 80138f4:	08014e5d 	.word	0x08014e5d

080138f8 <__s2b>:
 80138f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138fc:	460c      	mov	r4, r1
 80138fe:	4615      	mov	r5, r2
 8013900:	461f      	mov	r7, r3
 8013902:	2209      	movs	r2, #9
 8013904:	3308      	adds	r3, #8
 8013906:	4606      	mov	r6, r0
 8013908:	fb93 f3f2 	sdiv	r3, r3, r2
 801390c:	2100      	movs	r1, #0
 801390e:	2201      	movs	r2, #1
 8013910:	429a      	cmp	r2, r3
 8013912:	db09      	blt.n	8013928 <__s2b+0x30>
 8013914:	4630      	mov	r0, r6
 8013916:	f7ff ff47 	bl	80137a8 <_Balloc>
 801391a:	b940      	cbnz	r0, 801392e <__s2b+0x36>
 801391c:	4602      	mov	r2, r0
 801391e:	4b19      	ldr	r3, [pc, #100]	@ (8013984 <__s2b+0x8c>)
 8013920:	4819      	ldr	r0, [pc, #100]	@ (8013988 <__s2b+0x90>)
 8013922:	21d3      	movs	r1, #211	@ 0xd3
 8013924:	f7fe fc7e 	bl	8012224 <__assert_func>
 8013928:	0052      	lsls	r2, r2, #1
 801392a:	3101      	adds	r1, #1
 801392c:	e7f0      	b.n	8013910 <__s2b+0x18>
 801392e:	9b08      	ldr	r3, [sp, #32]
 8013930:	6143      	str	r3, [r0, #20]
 8013932:	2d09      	cmp	r5, #9
 8013934:	f04f 0301 	mov.w	r3, #1
 8013938:	6103      	str	r3, [r0, #16]
 801393a:	dd16      	ble.n	801396a <__s2b+0x72>
 801393c:	f104 0909 	add.w	r9, r4, #9
 8013940:	46c8      	mov	r8, r9
 8013942:	442c      	add	r4, r5
 8013944:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013948:	4601      	mov	r1, r0
 801394a:	3b30      	subs	r3, #48	@ 0x30
 801394c:	220a      	movs	r2, #10
 801394e:	4630      	mov	r0, r6
 8013950:	f7ff ff8c 	bl	801386c <__multadd>
 8013954:	45a0      	cmp	r8, r4
 8013956:	d1f5      	bne.n	8013944 <__s2b+0x4c>
 8013958:	f1a5 0408 	sub.w	r4, r5, #8
 801395c:	444c      	add	r4, r9
 801395e:	1b2d      	subs	r5, r5, r4
 8013960:	1963      	adds	r3, r4, r5
 8013962:	42bb      	cmp	r3, r7
 8013964:	db04      	blt.n	8013970 <__s2b+0x78>
 8013966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801396a:	340a      	adds	r4, #10
 801396c:	2509      	movs	r5, #9
 801396e:	e7f6      	b.n	801395e <__s2b+0x66>
 8013970:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013974:	4601      	mov	r1, r0
 8013976:	3b30      	subs	r3, #48	@ 0x30
 8013978:	220a      	movs	r2, #10
 801397a:	4630      	mov	r0, r6
 801397c:	f7ff ff76 	bl	801386c <__multadd>
 8013980:	e7ee      	b.n	8013960 <__s2b+0x68>
 8013982:	bf00      	nop
 8013984:	08014dec 	.word	0x08014dec
 8013988:	08014e5d 	.word	0x08014e5d

0801398c <__hi0bits>:
 801398c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013990:	4603      	mov	r3, r0
 8013992:	bf36      	itet	cc
 8013994:	0403      	lslcc	r3, r0, #16
 8013996:	2000      	movcs	r0, #0
 8013998:	2010      	movcc	r0, #16
 801399a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801399e:	bf3c      	itt	cc
 80139a0:	021b      	lslcc	r3, r3, #8
 80139a2:	3008      	addcc	r0, #8
 80139a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80139a8:	bf3c      	itt	cc
 80139aa:	011b      	lslcc	r3, r3, #4
 80139ac:	3004      	addcc	r0, #4
 80139ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80139b2:	bf3c      	itt	cc
 80139b4:	009b      	lslcc	r3, r3, #2
 80139b6:	3002      	addcc	r0, #2
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	db05      	blt.n	80139c8 <__hi0bits+0x3c>
 80139bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80139c0:	f100 0001 	add.w	r0, r0, #1
 80139c4:	bf08      	it	eq
 80139c6:	2020      	moveq	r0, #32
 80139c8:	4770      	bx	lr

080139ca <__lo0bits>:
 80139ca:	6803      	ldr	r3, [r0, #0]
 80139cc:	4602      	mov	r2, r0
 80139ce:	f013 0007 	ands.w	r0, r3, #7
 80139d2:	d00b      	beq.n	80139ec <__lo0bits+0x22>
 80139d4:	07d9      	lsls	r1, r3, #31
 80139d6:	d421      	bmi.n	8013a1c <__lo0bits+0x52>
 80139d8:	0798      	lsls	r0, r3, #30
 80139da:	bf49      	itett	mi
 80139dc:	085b      	lsrmi	r3, r3, #1
 80139de:	089b      	lsrpl	r3, r3, #2
 80139e0:	2001      	movmi	r0, #1
 80139e2:	6013      	strmi	r3, [r2, #0]
 80139e4:	bf5c      	itt	pl
 80139e6:	6013      	strpl	r3, [r2, #0]
 80139e8:	2002      	movpl	r0, #2
 80139ea:	4770      	bx	lr
 80139ec:	b299      	uxth	r1, r3
 80139ee:	b909      	cbnz	r1, 80139f4 <__lo0bits+0x2a>
 80139f0:	0c1b      	lsrs	r3, r3, #16
 80139f2:	2010      	movs	r0, #16
 80139f4:	b2d9      	uxtb	r1, r3
 80139f6:	b909      	cbnz	r1, 80139fc <__lo0bits+0x32>
 80139f8:	3008      	adds	r0, #8
 80139fa:	0a1b      	lsrs	r3, r3, #8
 80139fc:	0719      	lsls	r1, r3, #28
 80139fe:	bf04      	itt	eq
 8013a00:	091b      	lsreq	r3, r3, #4
 8013a02:	3004      	addeq	r0, #4
 8013a04:	0799      	lsls	r1, r3, #30
 8013a06:	bf04      	itt	eq
 8013a08:	089b      	lsreq	r3, r3, #2
 8013a0a:	3002      	addeq	r0, #2
 8013a0c:	07d9      	lsls	r1, r3, #31
 8013a0e:	d403      	bmi.n	8013a18 <__lo0bits+0x4e>
 8013a10:	085b      	lsrs	r3, r3, #1
 8013a12:	f100 0001 	add.w	r0, r0, #1
 8013a16:	d003      	beq.n	8013a20 <__lo0bits+0x56>
 8013a18:	6013      	str	r3, [r2, #0]
 8013a1a:	4770      	bx	lr
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	4770      	bx	lr
 8013a20:	2020      	movs	r0, #32
 8013a22:	4770      	bx	lr

08013a24 <__i2b>:
 8013a24:	b510      	push	{r4, lr}
 8013a26:	460c      	mov	r4, r1
 8013a28:	2101      	movs	r1, #1
 8013a2a:	f7ff febd 	bl	80137a8 <_Balloc>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	b928      	cbnz	r0, 8013a3e <__i2b+0x1a>
 8013a32:	4b05      	ldr	r3, [pc, #20]	@ (8013a48 <__i2b+0x24>)
 8013a34:	4805      	ldr	r0, [pc, #20]	@ (8013a4c <__i2b+0x28>)
 8013a36:	f240 1145 	movw	r1, #325	@ 0x145
 8013a3a:	f7fe fbf3 	bl	8012224 <__assert_func>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	6144      	str	r4, [r0, #20]
 8013a42:	6103      	str	r3, [r0, #16]
 8013a44:	bd10      	pop	{r4, pc}
 8013a46:	bf00      	nop
 8013a48:	08014dec 	.word	0x08014dec
 8013a4c:	08014e5d 	.word	0x08014e5d

08013a50 <__multiply>:
 8013a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a54:	4617      	mov	r7, r2
 8013a56:	690a      	ldr	r2, [r1, #16]
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	bfa8      	it	ge
 8013a5e:	463b      	movge	r3, r7
 8013a60:	4689      	mov	r9, r1
 8013a62:	bfa4      	itt	ge
 8013a64:	460f      	movge	r7, r1
 8013a66:	4699      	movge	r9, r3
 8013a68:	693d      	ldr	r5, [r7, #16]
 8013a6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	6879      	ldr	r1, [r7, #4]
 8013a72:	eb05 060a 	add.w	r6, r5, sl
 8013a76:	42b3      	cmp	r3, r6
 8013a78:	b085      	sub	sp, #20
 8013a7a:	bfb8      	it	lt
 8013a7c:	3101      	addlt	r1, #1
 8013a7e:	f7ff fe93 	bl	80137a8 <_Balloc>
 8013a82:	b930      	cbnz	r0, 8013a92 <__multiply+0x42>
 8013a84:	4602      	mov	r2, r0
 8013a86:	4b41      	ldr	r3, [pc, #260]	@ (8013b8c <__multiply+0x13c>)
 8013a88:	4841      	ldr	r0, [pc, #260]	@ (8013b90 <__multiply+0x140>)
 8013a8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013a8e:	f7fe fbc9 	bl	8012224 <__assert_func>
 8013a92:	f100 0414 	add.w	r4, r0, #20
 8013a96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013a9a:	4623      	mov	r3, r4
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	4573      	cmp	r3, lr
 8013aa0:	d320      	bcc.n	8013ae4 <__multiply+0x94>
 8013aa2:	f107 0814 	add.w	r8, r7, #20
 8013aa6:	f109 0114 	add.w	r1, r9, #20
 8013aaa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013aae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013ab2:	9302      	str	r3, [sp, #8]
 8013ab4:	1beb      	subs	r3, r5, r7
 8013ab6:	3b15      	subs	r3, #21
 8013ab8:	f023 0303 	bic.w	r3, r3, #3
 8013abc:	3304      	adds	r3, #4
 8013abe:	3715      	adds	r7, #21
 8013ac0:	42bd      	cmp	r5, r7
 8013ac2:	bf38      	it	cc
 8013ac4:	2304      	movcc	r3, #4
 8013ac6:	9301      	str	r3, [sp, #4]
 8013ac8:	9b02      	ldr	r3, [sp, #8]
 8013aca:	9103      	str	r1, [sp, #12]
 8013acc:	428b      	cmp	r3, r1
 8013ace:	d80c      	bhi.n	8013aea <__multiply+0x9a>
 8013ad0:	2e00      	cmp	r6, #0
 8013ad2:	dd03      	ble.n	8013adc <__multiply+0x8c>
 8013ad4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d055      	beq.n	8013b88 <__multiply+0x138>
 8013adc:	6106      	str	r6, [r0, #16]
 8013ade:	b005      	add	sp, #20
 8013ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae4:	f843 2b04 	str.w	r2, [r3], #4
 8013ae8:	e7d9      	b.n	8013a9e <__multiply+0x4e>
 8013aea:	f8b1 a000 	ldrh.w	sl, [r1]
 8013aee:	f1ba 0f00 	cmp.w	sl, #0
 8013af2:	d01f      	beq.n	8013b34 <__multiply+0xe4>
 8013af4:	46c4      	mov	ip, r8
 8013af6:	46a1      	mov	r9, r4
 8013af8:	2700      	movs	r7, #0
 8013afa:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013afe:	f8d9 3000 	ldr.w	r3, [r9]
 8013b02:	fa1f fb82 	uxth.w	fp, r2
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	fb0a 330b 	mla	r3, sl, fp, r3
 8013b0c:	443b      	add	r3, r7
 8013b0e:	f8d9 7000 	ldr.w	r7, [r9]
 8013b12:	0c12      	lsrs	r2, r2, #16
 8013b14:	0c3f      	lsrs	r7, r7, #16
 8013b16:	fb0a 7202 	mla	r2, sl, r2, r7
 8013b1a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b24:	4565      	cmp	r5, ip
 8013b26:	f849 3b04 	str.w	r3, [r9], #4
 8013b2a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013b2e:	d8e4      	bhi.n	8013afa <__multiply+0xaa>
 8013b30:	9b01      	ldr	r3, [sp, #4]
 8013b32:	50e7      	str	r7, [r4, r3]
 8013b34:	9b03      	ldr	r3, [sp, #12]
 8013b36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013b3a:	3104      	adds	r1, #4
 8013b3c:	f1b9 0f00 	cmp.w	r9, #0
 8013b40:	d020      	beq.n	8013b84 <__multiply+0x134>
 8013b42:	6823      	ldr	r3, [r4, #0]
 8013b44:	4647      	mov	r7, r8
 8013b46:	46a4      	mov	ip, r4
 8013b48:	f04f 0a00 	mov.w	sl, #0
 8013b4c:	f8b7 b000 	ldrh.w	fp, [r7]
 8013b50:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013b54:	fb09 220b 	mla	r2, r9, fp, r2
 8013b58:	4452      	add	r2, sl
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b60:	f84c 3b04 	str.w	r3, [ip], #4
 8013b64:	f857 3b04 	ldr.w	r3, [r7], #4
 8013b68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b6c:	f8bc 3000 	ldrh.w	r3, [ip]
 8013b70:	fb09 330a 	mla	r3, r9, sl, r3
 8013b74:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013b78:	42bd      	cmp	r5, r7
 8013b7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b7e:	d8e5      	bhi.n	8013b4c <__multiply+0xfc>
 8013b80:	9a01      	ldr	r2, [sp, #4]
 8013b82:	50a3      	str	r3, [r4, r2]
 8013b84:	3404      	adds	r4, #4
 8013b86:	e79f      	b.n	8013ac8 <__multiply+0x78>
 8013b88:	3e01      	subs	r6, #1
 8013b8a:	e7a1      	b.n	8013ad0 <__multiply+0x80>
 8013b8c:	08014dec 	.word	0x08014dec
 8013b90:	08014e5d 	.word	0x08014e5d

08013b94 <__pow5mult>:
 8013b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b98:	4615      	mov	r5, r2
 8013b9a:	f012 0203 	ands.w	r2, r2, #3
 8013b9e:	4607      	mov	r7, r0
 8013ba0:	460e      	mov	r6, r1
 8013ba2:	d007      	beq.n	8013bb4 <__pow5mult+0x20>
 8013ba4:	4c25      	ldr	r4, [pc, #148]	@ (8013c3c <__pow5mult+0xa8>)
 8013ba6:	3a01      	subs	r2, #1
 8013ba8:	2300      	movs	r3, #0
 8013baa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013bae:	f7ff fe5d 	bl	801386c <__multadd>
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	10ad      	asrs	r5, r5, #2
 8013bb6:	d03d      	beq.n	8013c34 <__pow5mult+0xa0>
 8013bb8:	69fc      	ldr	r4, [r7, #28]
 8013bba:	b97c      	cbnz	r4, 8013bdc <__pow5mult+0x48>
 8013bbc:	2010      	movs	r0, #16
 8013bbe:	f7ff fd2b 	bl	8013618 <malloc>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	61f8      	str	r0, [r7, #28]
 8013bc6:	b928      	cbnz	r0, 8013bd4 <__pow5mult+0x40>
 8013bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8013c40 <__pow5mult+0xac>)
 8013bca:	481e      	ldr	r0, [pc, #120]	@ (8013c44 <__pow5mult+0xb0>)
 8013bcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013bd0:	f7fe fb28 	bl	8012224 <__assert_func>
 8013bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013bd8:	6004      	str	r4, [r0, #0]
 8013bda:	60c4      	str	r4, [r0, #12]
 8013bdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013be0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013be4:	b94c      	cbnz	r4, 8013bfa <__pow5mult+0x66>
 8013be6:	f240 2171 	movw	r1, #625	@ 0x271
 8013bea:	4638      	mov	r0, r7
 8013bec:	f7ff ff1a 	bl	8013a24 <__i2b>
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	6003      	str	r3, [r0, #0]
 8013bfa:	f04f 0900 	mov.w	r9, #0
 8013bfe:	07eb      	lsls	r3, r5, #31
 8013c00:	d50a      	bpl.n	8013c18 <__pow5mult+0x84>
 8013c02:	4631      	mov	r1, r6
 8013c04:	4622      	mov	r2, r4
 8013c06:	4638      	mov	r0, r7
 8013c08:	f7ff ff22 	bl	8013a50 <__multiply>
 8013c0c:	4631      	mov	r1, r6
 8013c0e:	4680      	mov	r8, r0
 8013c10:	4638      	mov	r0, r7
 8013c12:	f7ff fe09 	bl	8013828 <_Bfree>
 8013c16:	4646      	mov	r6, r8
 8013c18:	106d      	asrs	r5, r5, #1
 8013c1a:	d00b      	beq.n	8013c34 <__pow5mult+0xa0>
 8013c1c:	6820      	ldr	r0, [r4, #0]
 8013c1e:	b938      	cbnz	r0, 8013c30 <__pow5mult+0x9c>
 8013c20:	4622      	mov	r2, r4
 8013c22:	4621      	mov	r1, r4
 8013c24:	4638      	mov	r0, r7
 8013c26:	f7ff ff13 	bl	8013a50 <__multiply>
 8013c2a:	6020      	str	r0, [r4, #0]
 8013c2c:	f8c0 9000 	str.w	r9, [r0]
 8013c30:	4604      	mov	r4, r0
 8013c32:	e7e4      	b.n	8013bfe <__pow5mult+0x6a>
 8013c34:	4630      	mov	r0, r6
 8013c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c3a:	bf00      	nop
 8013c3c:	0801501c 	.word	0x0801501c
 8013c40:	08014cd2 	.word	0x08014cd2
 8013c44:	08014e5d 	.word	0x08014e5d

08013c48 <__lshift>:
 8013c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c4c:	460c      	mov	r4, r1
 8013c4e:	6849      	ldr	r1, [r1, #4]
 8013c50:	6923      	ldr	r3, [r4, #16]
 8013c52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c56:	68a3      	ldr	r3, [r4, #8]
 8013c58:	4607      	mov	r7, r0
 8013c5a:	4691      	mov	r9, r2
 8013c5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c60:	f108 0601 	add.w	r6, r8, #1
 8013c64:	42b3      	cmp	r3, r6
 8013c66:	db0b      	blt.n	8013c80 <__lshift+0x38>
 8013c68:	4638      	mov	r0, r7
 8013c6a:	f7ff fd9d 	bl	80137a8 <_Balloc>
 8013c6e:	4605      	mov	r5, r0
 8013c70:	b948      	cbnz	r0, 8013c86 <__lshift+0x3e>
 8013c72:	4602      	mov	r2, r0
 8013c74:	4b28      	ldr	r3, [pc, #160]	@ (8013d18 <__lshift+0xd0>)
 8013c76:	4829      	ldr	r0, [pc, #164]	@ (8013d1c <__lshift+0xd4>)
 8013c78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013c7c:	f7fe fad2 	bl	8012224 <__assert_func>
 8013c80:	3101      	adds	r1, #1
 8013c82:	005b      	lsls	r3, r3, #1
 8013c84:	e7ee      	b.n	8013c64 <__lshift+0x1c>
 8013c86:	2300      	movs	r3, #0
 8013c88:	f100 0114 	add.w	r1, r0, #20
 8013c8c:	f100 0210 	add.w	r2, r0, #16
 8013c90:	4618      	mov	r0, r3
 8013c92:	4553      	cmp	r3, sl
 8013c94:	db33      	blt.n	8013cfe <__lshift+0xb6>
 8013c96:	6920      	ldr	r0, [r4, #16]
 8013c98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c9c:	f104 0314 	add.w	r3, r4, #20
 8013ca0:	f019 091f 	ands.w	r9, r9, #31
 8013ca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013cac:	d02b      	beq.n	8013d06 <__lshift+0xbe>
 8013cae:	f1c9 0e20 	rsb	lr, r9, #32
 8013cb2:	468a      	mov	sl, r1
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	6818      	ldr	r0, [r3, #0]
 8013cb8:	fa00 f009 	lsl.w	r0, r0, r9
 8013cbc:	4310      	orrs	r0, r2
 8013cbe:	f84a 0b04 	str.w	r0, [sl], #4
 8013cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cc6:	459c      	cmp	ip, r3
 8013cc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8013ccc:	d8f3      	bhi.n	8013cb6 <__lshift+0x6e>
 8013cce:	ebac 0304 	sub.w	r3, ip, r4
 8013cd2:	3b15      	subs	r3, #21
 8013cd4:	f023 0303 	bic.w	r3, r3, #3
 8013cd8:	3304      	adds	r3, #4
 8013cda:	f104 0015 	add.w	r0, r4, #21
 8013cde:	4560      	cmp	r0, ip
 8013ce0:	bf88      	it	hi
 8013ce2:	2304      	movhi	r3, #4
 8013ce4:	50ca      	str	r2, [r1, r3]
 8013ce6:	b10a      	cbz	r2, 8013cec <__lshift+0xa4>
 8013ce8:	f108 0602 	add.w	r6, r8, #2
 8013cec:	3e01      	subs	r6, #1
 8013cee:	4638      	mov	r0, r7
 8013cf0:	612e      	str	r6, [r5, #16]
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	f7ff fd98 	bl	8013828 <_Bfree>
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d02:	3301      	adds	r3, #1
 8013d04:	e7c5      	b.n	8013c92 <__lshift+0x4a>
 8013d06:	3904      	subs	r1, #4
 8013d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d10:	459c      	cmp	ip, r3
 8013d12:	d8f9      	bhi.n	8013d08 <__lshift+0xc0>
 8013d14:	e7ea      	b.n	8013cec <__lshift+0xa4>
 8013d16:	bf00      	nop
 8013d18:	08014dec 	.word	0x08014dec
 8013d1c:	08014e5d 	.word	0x08014e5d

08013d20 <__mcmp>:
 8013d20:	690a      	ldr	r2, [r1, #16]
 8013d22:	4603      	mov	r3, r0
 8013d24:	6900      	ldr	r0, [r0, #16]
 8013d26:	1a80      	subs	r0, r0, r2
 8013d28:	b530      	push	{r4, r5, lr}
 8013d2a:	d10e      	bne.n	8013d4a <__mcmp+0x2a>
 8013d2c:	3314      	adds	r3, #20
 8013d2e:	3114      	adds	r1, #20
 8013d30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013d34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013d38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013d3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013d40:	4295      	cmp	r5, r2
 8013d42:	d003      	beq.n	8013d4c <__mcmp+0x2c>
 8013d44:	d205      	bcs.n	8013d52 <__mcmp+0x32>
 8013d46:	f04f 30ff 	mov.w	r0, #4294967295
 8013d4a:	bd30      	pop	{r4, r5, pc}
 8013d4c:	42a3      	cmp	r3, r4
 8013d4e:	d3f3      	bcc.n	8013d38 <__mcmp+0x18>
 8013d50:	e7fb      	b.n	8013d4a <__mcmp+0x2a>
 8013d52:	2001      	movs	r0, #1
 8013d54:	e7f9      	b.n	8013d4a <__mcmp+0x2a>
	...

08013d58 <__mdiff>:
 8013d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d5c:	4689      	mov	r9, r1
 8013d5e:	4606      	mov	r6, r0
 8013d60:	4611      	mov	r1, r2
 8013d62:	4648      	mov	r0, r9
 8013d64:	4614      	mov	r4, r2
 8013d66:	f7ff ffdb 	bl	8013d20 <__mcmp>
 8013d6a:	1e05      	subs	r5, r0, #0
 8013d6c:	d112      	bne.n	8013d94 <__mdiff+0x3c>
 8013d6e:	4629      	mov	r1, r5
 8013d70:	4630      	mov	r0, r6
 8013d72:	f7ff fd19 	bl	80137a8 <_Balloc>
 8013d76:	4602      	mov	r2, r0
 8013d78:	b928      	cbnz	r0, 8013d86 <__mdiff+0x2e>
 8013d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8013e78 <__mdiff+0x120>)
 8013d7c:	f240 2137 	movw	r1, #567	@ 0x237
 8013d80:	483e      	ldr	r0, [pc, #248]	@ (8013e7c <__mdiff+0x124>)
 8013d82:	f7fe fa4f 	bl	8012224 <__assert_func>
 8013d86:	2301      	movs	r3, #1
 8013d88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d8c:	4610      	mov	r0, r2
 8013d8e:	b003      	add	sp, #12
 8013d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d94:	bfbc      	itt	lt
 8013d96:	464b      	movlt	r3, r9
 8013d98:	46a1      	movlt	r9, r4
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013da0:	bfba      	itte	lt
 8013da2:	461c      	movlt	r4, r3
 8013da4:	2501      	movlt	r5, #1
 8013da6:	2500      	movge	r5, #0
 8013da8:	f7ff fcfe 	bl	80137a8 <_Balloc>
 8013dac:	4602      	mov	r2, r0
 8013dae:	b918      	cbnz	r0, 8013db8 <__mdiff+0x60>
 8013db0:	4b31      	ldr	r3, [pc, #196]	@ (8013e78 <__mdiff+0x120>)
 8013db2:	f240 2145 	movw	r1, #581	@ 0x245
 8013db6:	e7e3      	b.n	8013d80 <__mdiff+0x28>
 8013db8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013dbc:	6926      	ldr	r6, [r4, #16]
 8013dbe:	60c5      	str	r5, [r0, #12]
 8013dc0:	f109 0310 	add.w	r3, r9, #16
 8013dc4:	f109 0514 	add.w	r5, r9, #20
 8013dc8:	f104 0e14 	add.w	lr, r4, #20
 8013dcc:	f100 0b14 	add.w	fp, r0, #20
 8013dd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013dd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013dd8:	9301      	str	r3, [sp, #4]
 8013dda:	46d9      	mov	r9, fp
 8013ddc:	f04f 0c00 	mov.w	ip, #0
 8013de0:	9b01      	ldr	r3, [sp, #4]
 8013de2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013de6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013dea:	9301      	str	r3, [sp, #4]
 8013dec:	fa1f f38a 	uxth.w	r3, sl
 8013df0:	4619      	mov	r1, r3
 8013df2:	b283      	uxth	r3, r0
 8013df4:	1acb      	subs	r3, r1, r3
 8013df6:	0c00      	lsrs	r0, r0, #16
 8013df8:	4463      	add	r3, ip
 8013dfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013dfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013e08:	4576      	cmp	r6, lr
 8013e0a:	f849 3b04 	str.w	r3, [r9], #4
 8013e0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013e12:	d8e5      	bhi.n	8013de0 <__mdiff+0x88>
 8013e14:	1b33      	subs	r3, r6, r4
 8013e16:	3b15      	subs	r3, #21
 8013e18:	f023 0303 	bic.w	r3, r3, #3
 8013e1c:	3415      	adds	r4, #21
 8013e1e:	3304      	adds	r3, #4
 8013e20:	42a6      	cmp	r6, r4
 8013e22:	bf38      	it	cc
 8013e24:	2304      	movcc	r3, #4
 8013e26:	441d      	add	r5, r3
 8013e28:	445b      	add	r3, fp
 8013e2a:	461e      	mov	r6, r3
 8013e2c:	462c      	mov	r4, r5
 8013e2e:	4544      	cmp	r4, r8
 8013e30:	d30e      	bcc.n	8013e50 <__mdiff+0xf8>
 8013e32:	f108 0103 	add.w	r1, r8, #3
 8013e36:	1b49      	subs	r1, r1, r5
 8013e38:	f021 0103 	bic.w	r1, r1, #3
 8013e3c:	3d03      	subs	r5, #3
 8013e3e:	45a8      	cmp	r8, r5
 8013e40:	bf38      	it	cc
 8013e42:	2100      	movcc	r1, #0
 8013e44:	440b      	add	r3, r1
 8013e46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013e4a:	b191      	cbz	r1, 8013e72 <__mdiff+0x11a>
 8013e4c:	6117      	str	r7, [r2, #16]
 8013e4e:	e79d      	b.n	8013d8c <__mdiff+0x34>
 8013e50:	f854 1b04 	ldr.w	r1, [r4], #4
 8013e54:	46e6      	mov	lr, ip
 8013e56:	0c08      	lsrs	r0, r1, #16
 8013e58:	fa1c fc81 	uxtah	ip, ip, r1
 8013e5c:	4471      	add	r1, lr
 8013e5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013e62:	b289      	uxth	r1, r1
 8013e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013e68:	f846 1b04 	str.w	r1, [r6], #4
 8013e6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013e70:	e7dd      	b.n	8013e2e <__mdiff+0xd6>
 8013e72:	3f01      	subs	r7, #1
 8013e74:	e7e7      	b.n	8013e46 <__mdiff+0xee>
 8013e76:	bf00      	nop
 8013e78:	08014dec 	.word	0x08014dec
 8013e7c:	08014e5d 	.word	0x08014e5d

08013e80 <__ulp>:
 8013e80:	b082      	sub	sp, #8
 8013e82:	ed8d 0b00 	vstr	d0, [sp]
 8013e86:	9a01      	ldr	r2, [sp, #4]
 8013e88:	4b0f      	ldr	r3, [pc, #60]	@ (8013ec8 <__ulp+0x48>)
 8013e8a:	4013      	ands	r3, r2
 8013e8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	dc08      	bgt.n	8013ea6 <__ulp+0x26>
 8013e94:	425b      	negs	r3, r3
 8013e96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013e9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013e9e:	da04      	bge.n	8013eaa <__ulp+0x2a>
 8013ea0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013ea4:	4113      	asrs	r3, r2
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	e008      	b.n	8013ebc <__ulp+0x3c>
 8013eaa:	f1a2 0314 	sub.w	r3, r2, #20
 8013eae:	2b1e      	cmp	r3, #30
 8013eb0:	bfda      	itte	le
 8013eb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013eb6:	40da      	lsrle	r2, r3
 8013eb8:	2201      	movgt	r2, #1
 8013eba:	2300      	movs	r3, #0
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	4610      	mov	r0, r2
 8013ec0:	ec41 0b10 	vmov	d0, r0, r1
 8013ec4:	b002      	add	sp, #8
 8013ec6:	4770      	bx	lr
 8013ec8:	7ff00000 	.word	0x7ff00000

08013ecc <__b2d>:
 8013ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed0:	6906      	ldr	r6, [r0, #16]
 8013ed2:	f100 0814 	add.w	r8, r0, #20
 8013ed6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013eda:	1f37      	subs	r7, r6, #4
 8013edc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013ee0:	4610      	mov	r0, r2
 8013ee2:	f7ff fd53 	bl	801398c <__hi0bits>
 8013ee6:	f1c0 0320 	rsb	r3, r0, #32
 8013eea:	280a      	cmp	r0, #10
 8013eec:	600b      	str	r3, [r1, #0]
 8013eee:	491b      	ldr	r1, [pc, #108]	@ (8013f5c <__b2d+0x90>)
 8013ef0:	dc15      	bgt.n	8013f1e <__b2d+0x52>
 8013ef2:	f1c0 0c0b 	rsb	ip, r0, #11
 8013ef6:	fa22 f30c 	lsr.w	r3, r2, ip
 8013efa:	45b8      	cmp	r8, r7
 8013efc:	ea43 0501 	orr.w	r5, r3, r1
 8013f00:	bf34      	ite	cc
 8013f02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013f06:	2300      	movcs	r3, #0
 8013f08:	3015      	adds	r0, #21
 8013f0a:	fa02 f000 	lsl.w	r0, r2, r0
 8013f0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013f12:	4303      	orrs	r3, r0
 8013f14:	461c      	mov	r4, r3
 8013f16:	ec45 4b10 	vmov	d0, r4, r5
 8013f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f1e:	45b8      	cmp	r8, r7
 8013f20:	bf3a      	itte	cc
 8013f22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013f26:	f1a6 0708 	subcc.w	r7, r6, #8
 8013f2a:	2300      	movcs	r3, #0
 8013f2c:	380b      	subs	r0, #11
 8013f2e:	d012      	beq.n	8013f56 <__b2d+0x8a>
 8013f30:	f1c0 0120 	rsb	r1, r0, #32
 8013f34:	fa23 f401 	lsr.w	r4, r3, r1
 8013f38:	4082      	lsls	r2, r0
 8013f3a:	4322      	orrs	r2, r4
 8013f3c:	4547      	cmp	r7, r8
 8013f3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013f42:	bf8c      	ite	hi
 8013f44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013f48:	2200      	movls	r2, #0
 8013f4a:	4083      	lsls	r3, r0
 8013f4c:	40ca      	lsrs	r2, r1
 8013f4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013f52:	4313      	orrs	r3, r2
 8013f54:	e7de      	b.n	8013f14 <__b2d+0x48>
 8013f56:	ea42 0501 	orr.w	r5, r2, r1
 8013f5a:	e7db      	b.n	8013f14 <__b2d+0x48>
 8013f5c:	3ff00000 	.word	0x3ff00000

08013f60 <__d2b>:
 8013f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f64:	460f      	mov	r7, r1
 8013f66:	2101      	movs	r1, #1
 8013f68:	ec59 8b10 	vmov	r8, r9, d0
 8013f6c:	4616      	mov	r6, r2
 8013f6e:	f7ff fc1b 	bl	80137a8 <_Balloc>
 8013f72:	4604      	mov	r4, r0
 8013f74:	b930      	cbnz	r0, 8013f84 <__d2b+0x24>
 8013f76:	4602      	mov	r2, r0
 8013f78:	4b23      	ldr	r3, [pc, #140]	@ (8014008 <__d2b+0xa8>)
 8013f7a:	4824      	ldr	r0, [pc, #144]	@ (801400c <__d2b+0xac>)
 8013f7c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013f80:	f7fe f950 	bl	8012224 <__assert_func>
 8013f84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013f88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f8c:	b10d      	cbz	r5, 8013f92 <__d2b+0x32>
 8013f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f92:	9301      	str	r3, [sp, #4]
 8013f94:	f1b8 0300 	subs.w	r3, r8, #0
 8013f98:	d023      	beq.n	8013fe2 <__d2b+0x82>
 8013f9a:	4668      	mov	r0, sp
 8013f9c:	9300      	str	r3, [sp, #0]
 8013f9e:	f7ff fd14 	bl	80139ca <__lo0bits>
 8013fa2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013fa6:	b1d0      	cbz	r0, 8013fde <__d2b+0x7e>
 8013fa8:	f1c0 0320 	rsb	r3, r0, #32
 8013fac:	fa02 f303 	lsl.w	r3, r2, r3
 8013fb0:	430b      	orrs	r3, r1
 8013fb2:	40c2      	lsrs	r2, r0
 8013fb4:	6163      	str	r3, [r4, #20]
 8013fb6:	9201      	str	r2, [sp, #4]
 8013fb8:	9b01      	ldr	r3, [sp, #4]
 8013fba:	61a3      	str	r3, [r4, #24]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	bf0c      	ite	eq
 8013fc0:	2201      	moveq	r2, #1
 8013fc2:	2202      	movne	r2, #2
 8013fc4:	6122      	str	r2, [r4, #16]
 8013fc6:	b1a5      	cbz	r5, 8013ff2 <__d2b+0x92>
 8013fc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013fcc:	4405      	add	r5, r0
 8013fce:	603d      	str	r5, [r7, #0]
 8013fd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013fd4:	6030      	str	r0, [r6, #0]
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	b003      	add	sp, #12
 8013fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fde:	6161      	str	r1, [r4, #20]
 8013fe0:	e7ea      	b.n	8013fb8 <__d2b+0x58>
 8013fe2:	a801      	add	r0, sp, #4
 8013fe4:	f7ff fcf1 	bl	80139ca <__lo0bits>
 8013fe8:	9b01      	ldr	r3, [sp, #4]
 8013fea:	6163      	str	r3, [r4, #20]
 8013fec:	3020      	adds	r0, #32
 8013fee:	2201      	movs	r2, #1
 8013ff0:	e7e8      	b.n	8013fc4 <__d2b+0x64>
 8013ff2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013ff6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013ffa:	6038      	str	r0, [r7, #0]
 8013ffc:	6918      	ldr	r0, [r3, #16]
 8013ffe:	f7ff fcc5 	bl	801398c <__hi0bits>
 8014002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014006:	e7e5      	b.n	8013fd4 <__d2b+0x74>
 8014008:	08014dec 	.word	0x08014dec
 801400c:	08014e5d 	.word	0x08014e5d

08014010 <__ratio>:
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	b085      	sub	sp, #20
 8014016:	e9cd 1000 	strd	r1, r0, [sp]
 801401a:	a902      	add	r1, sp, #8
 801401c:	f7ff ff56 	bl	8013ecc <__b2d>
 8014020:	9800      	ldr	r0, [sp, #0]
 8014022:	a903      	add	r1, sp, #12
 8014024:	ec55 4b10 	vmov	r4, r5, d0
 8014028:	f7ff ff50 	bl	8013ecc <__b2d>
 801402c:	9b01      	ldr	r3, [sp, #4]
 801402e:	6919      	ldr	r1, [r3, #16]
 8014030:	9b00      	ldr	r3, [sp, #0]
 8014032:	691b      	ldr	r3, [r3, #16]
 8014034:	1ac9      	subs	r1, r1, r3
 8014036:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801403a:	1a9b      	subs	r3, r3, r2
 801403c:	ec5b ab10 	vmov	sl, fp, d0
 8014040:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014044:	2b00      	cmp	r3, #0
 8014046:	bfce      	itee	gt
 8014048:	462a      	movgt	r2, r5
 801404a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801404e:	465a      	movle	r2, fp
 8014050:	462f      	mov	r7, r5
 8014052:	46d9      	mov	r9, fp
 8014054:	bfcc      	ite	gt
 8014056:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801405a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801405e:	464b      	mov	r3, r9
 8014060:	4652      	mov	r2, sl
 8014062:	4620      	mov	r0, r4
 8014064:	4639      	mov	r1, r7
 8014066:	f7ec fc11 	bl	800088c <__aeabi_ddiv>
 801406a:	ec41 0b10 	vmov	d0, r0, r1
 801406e:	b005      	add	sp, #20
 8014070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014074 <__copybits>:
 8014074:	3901      	subs	r1, #1
 8014076:	b570      	push	{r4, r5, r6, lr}
 8014078:	1149      	asrs	r1, r1, #5
 801407a:	6914      	ldr	r4, [r2, #16]
 801407c:	3101      	adds	r1, #1
 801407e:	f102 0314 	add.w	r3, r2, #20
 8014082:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014086:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801408a:	1f05      	subs	r5, r0, #4
 801408c:	42a3      	cmp	r3, r4
 801408e:	d30c      	bcc.n	80140aa <__copybits+0x36>
 8014090:	1aa3      	subs	r3, r4, r2
 8014092:	3b11      	subs	r3, #17
 8014094:	f023 0303 	bic.w	r3, r3, #3
 8014098:	3211      	adds	r2, #17
 801409a:	42a2      	cmp	r2, r4
 801409c:	bf88      	it	hi
 801409e:	2300      	movhi	r3, #0
 80140a0:	4418      	add	r0, r3
 80140a2:	2300      	movs	r3, #0
 80140a4:	4288      	cmp	r0, r1
 80140a6:	d305      	bcc.n	80140b4 <__copybits+0x40>
 80140a8:	bd70      	pop	{r4, r5, r6, pc}
 80140aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80140ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80140b2:	e7eb      	b.n	801408c <__copybits+0x18>
 80140b4:	f840 3b04 	str.w	r3, [r0], #4
 80140b8:	e7f4      	b.n	80140a4 <__copybits+0x30>

080140ba <__any_on>:
 80140ba:	f100 0214 	add.w	r2, r0, #20
 80140be:	6900      	ldr	r0, [r0, #16]
 80140c0:	114b      	asrs	r3, r1, #5
 80140c2:	4298      	cmp	r0, r3
 80140c4:	b510      	push	{r4, lr}
 80140c6:	db11      	blt.n	80140ec <__any_on+0x32>
 80140c8:	dd0a      	ble.n	80140e0 <__any_on+0x26>
 80140ca:	f011 011f 	ands.w	r1, r1, #31
 80140ce:	d007      	beq.n	80140e0 <__any_on+0x26>
 80140d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80140d4:	fa24 f001 	lsr.w	r0, r4, r1
 80140d8:	fa00 f101 	lsl.w	r1, r0, r1
 80140dc:	428c      	cmp	r4, r1
 80140de:	d10b      	bne.n	80140f8 <__any_on+0x3e>
 80140e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80140e4:	4293      	cmp	r3, r2
 80140e6:	d803      	bhi.n	80140f0 <__any_on+0x36>
 80140e8:	2000      	movs	r0, #0
 80140ea:	bd10      	pop	{r4, pc}
 80140ec:	4603      	mov	r3, r0
 80140ee:	e7f7      	b.n	80140e0 <__any_on+0x26>
 80140f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80140f4:	2900      	cmp	r1, #0
 80140f6:	d0f5      	beq.n	80140e4 <__any_on+0x2a>
 80140f8:	2001      	movs	r0, #1
 80140fa:	e7f6      	b.n	80140ea <__any_on+0x30>

080140fc <__ascii_wctomb>:
 80140fc:	4603      	mov	r3, r0
 80140fe:	4608      	mov	r0, r1
 8014100:	b141      	cbz	r1, 8014114 <__ascii_wctomb+0x18>
 8014102:	2aff      	cmp	r2, #255	@ 0xff
 8014104:	d904      	bls.n	8014110 <__ascii_wctomb+0x14>
 8014106:	228a      	movs	r2, #138	@ 0x8a
 8014108:	601a      	str	r2, [r3, #0]
 801410a:	f04f 30ff 	mov.w	r0, #4294967295
 801410e:	4770      	bx	lr
 8014110:	700a      	strb	r2, [r1, #0]
 8014112:	2001      	movs	r0, #1
 8014114:	4770      	bx	lr

08014116 <__ssputs_r>:
 8014116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801411a:	688e      	ldr	r6, [r1, #8]
 801411c:	461f      	mov	r7, r3
 801411e:	42be      	cmp	r6, r7
 8014120:	680b      	ldr	r3, [r1, #0]
 8014122:	4682      	mov	sl, r0
 8014124:	460c      	mov	r4, r1
 8014126:	4690      	mov	r8, r2
 8014128:	d82d      	bhi.n	8014186 <__ssputs_r+0x70>
 801412a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801412e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014132:	d026      	beq.n	8014182 <__ssputs_r+0x6c>
 8014134:	6965      	ldr	r5, [r4, #20]
 8014136:	6909      	ldr	r1, [r1, #16]
 8014138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801413c:	eba3 0901 	sub.w	r9, r3, r1
 8014140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014144:	1c7b      	adds	r3, r7, #1
 8014146:	444b      	add	r3, r9
 8014148:	106d      	asrs	r5, r5, #1
 801414a:	429d      	cmp	r5, r3
 801414c:	bf38      	it	cc
 801414e:	461d      	movcc	r5, r3
 8014150:	0553      	lsls	r3, r2, #21
 8014152:	d527      	bpl.n	80141a4 <__ssputs_r+0x8e>
 8014154:	4629      	mov	r1, r5
 8014156:	f7ff fa89 	bl	801366c <_malloc_r>
 801415a:	4606      	mov	r6, r0
 801415c:	b360      	cbz	r0, 80141b8 <__ssputs_r+0xa2>
 801415e:	6921      	ldr	r1, [r4, #16]
 8014160:	464a      	mov	r2, r9
 8014162:	f7fe f840 	bl	80121e6 <memcpy>
 8014166:	89a3      	ldrh	r3, [r4, #12]
 8014168:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801416c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014170:	81a3      	strh	r3, [r4, #12]
 8014172:	6126      	str	r6, [r4, #16]
 8014174:	6165      	str	r5, [r4, #20]
 8014176:	444e      	add	r6, r9
 8014178:	eba5 0509 	sub.w	r5, r5, r9
 801417c:	6026      	str	r6, [r4, #0]
 801417e:	60a5      	str	r5, [r4, #8]
 8014180:	463e      	mov	r6, r7
 8014182:	42be      	cmp	r6, r7
 8014184:	d900      	bls.n	8014188 <__ssputs_r+0x72>
 8014186:	463e      	mov	r6, r7
 8014188:	6820      	ldr	r0, [r4, #0]
 801418a:	4632      	mov	r2, r6
 801418c:	4641      	mov	r1, r8
 801418e:	f000 fb7b 	bl	8014888 <memmove>
 8014192:	68a3      	ldr	r3, [r4, #8]
 8014194:	1b9b      	subs	r3, r3, r6
 8014196:	60a3      	str	r3, [r4, #8]
 8014198:	6823      	ldr	r3, [r4, #0]
 801419a:	4433      	add	r3, r6
 801419c:	6023      	str	r3, [r4, #0]
 801419e:	2000      	movs	r0, #0
 80141a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a4:	462a      	mov	r2, r5
 80141a6:	f000 fbd6 	bl	8014956 <_realloc_r>
 80141aa:	4606      	mov	r6, r0
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d1e0      	bne.n	8014172 <__ssputs_r+0x5c>
 80141b0:	6921      	ldr	r1, [r4, #16]
 80141b2:	4650      	mov	r0, sl
 80141b4:	f7fe feac 	bl	8012f10 <_free_r>
 80141b8:	230c      	movs	r3, #12
 80141ba:	f8ca 3000 	str.w	r3, [sl]
 80141be:	89a3      	ldrh	r3, [r4, #12]
 80141c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141c4:	81a3      	strh	r3, [r4, #12]
 80141c6:	f04f 30ff 	mov.w	r0, #4294967295
 80141ca:	e7e9      	b.n	80141a0 <__ssputs_r+0x8a>

080141cc <_svfiprintf_r>:
 80141cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d0:	4698      	mov	r8, r3
 80141d2:	898b      	ldrh	r3, [r1, #12]
 80141d4:	061b      	lsls	r3, r3, #24
 80141d6:	b09d      	sub	sp, #116	@ 0x74
 80141d8:	4607      	mov	r7, r0
 80141da:	460d      	mov	r5, r1
 80141dc:	4614      	mov	r4, r2
 80141de:	d510      	bpl.n	8014202 <_svfiprintf_r+0x36>
 80141e0:	690b      	ldr	r3, [r1, #16]
 80141e2:	b973      	cbnz	r3, 8014202 <_svfiprintf_r+0x36>
 80141e4:	2140      	movs	r1, #64	@ 0x40
 80141e6:	f7ff fa41 	bl	801366c <_malloc_r>
 80141ea:	6028      	str	r0, [r5, #0]
 80141ec:	6128      	str	r0, [r5, #16]
 80141ee:	b930      	cbnz	r0, 80141fe <_svfiprintf_r+0x32>
 80141f0:	230c      	movs	r3, #12
 80141f2:	603b      	str	r3, [r7, #0]
 80141f4:	f04f 30ff 	mov.w	r0, #4294967295
 80141f8:	b01d      	add	sp, #116	@ 0x74
 80141fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141fe:	2340      	movs	r3, #64	@ 0x40
 8014200:	616b      	str	r3, [r5, #20]
 8014202:	2300      	movs	r3, #0
 8014204:	9309      	str	r3, [sp, #36]	@ 0x24
 8014206:	2320      	movs	r3, #32
 8014208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801420c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014210:	2330      	movs	r3, #48	@ 0x30
 8014212:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80143b0 <_svfiprintf_r+0x1e4>
 8014216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801421a:	f04f 0901 	mov.w	r9, #1
 801421e:	4623      	mov	r3, r4
 8014220:	469a      	mov	sl, r3
 8014222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014226:	b10a      	cbz	r2, 801422c <_svfiprintf_r+0x60>
 8014228:	2a25      	cmp	r2, #37	@ 0x25
 801422a:	d1f9      	bne.n	8014220 <_svfiprintf_r+0x54>
 801422c:	ebba 0b04 	subs.w	fp, sl, r4
 8014230:	d00b      	beq.n	801424a <_svfiprintf_r+0x7e>
 8014232:	465b      	mov	r3, fp
 8014234:	4622      	mov	r2, r4
 8014236:	4629      	mov	r1, r5
 8014238:	4638      	mov	r0, r7
 801423a:	f7ff ff6c 	bl	8014116 <__ssputs_r>
 801423e:	3001      	adds	r0, #1
 8014240:	f000 80a7 	beq.w	8014392 <_svfiprintf_r+0x1c6>
 8014244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014246:	445a      	add	r2, fp
 8014248:	9209      	str	r2, [sp, #36]	@ 0x24
 801424a:	f89a 3000 	ldrb.w	r3, [sl]
 801424e:	2b00      	cmp	r3, #0
 8014250:	f000 809f 	beq.w	8014392 <_svfiprintf_r+0x1c6>
 8014254:	2300      	movs	r3, #0
 8014256:	f04f 32ff 	mov.w	r2, #4294967295
 801425a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801425e:	f10a 0a01 	add.w	sl, sl, #1
 8014262:	9304      	str	r3, [sp, #16]
 8014264:	9307      	str	r3, [sp, #28]
 8014266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801426a:	931a      	str	r3, [sp, #104]	@ 0x68
 801426c:	4654      	mov	r4, sl
 801426e:	2205      	movs	r2, #5
 8014270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014274:	484e      	ldr	r0, [pc, #312]	@ (80143b0 <_svfiprintf_r+0x1e4>)
 8014276:	f7eb ffcb 	bl	8000210 <memchr>
 801427a:	9a04      	ldr	r2, [sp, #16]
 801427c:	b9d8      	cbnz	r0, 80142b6 <_svfiprintf_r+0xea>
 801427e:	06d0      	lsls	r0, r2, #27
 8014280:	bf44      	itt	mi
 8014282:	2320      	movmi	r3, #32
 8014284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014288:	0711      	lsls	r1, r2, #28
 801428a:	bf44      	itt	mi
 801428c:	232b      	movmi	r3, #43	@ 0x2b
 801428e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014292:	f89a 3000 	ldrb.w	r3, [sl]
 8014296:	2b2a      	cmp	r3, #42	@ 0x2a
 8014298:	d015      	beq.n	80142c6 <_svfiprintf_r+0xfa>
 801429a:	9a07      	ldr	r2, [sp, #28]
 801429c:	4654      	mov	r4, sl
 801429e:	2000      	movs	r0, #0
 80142a0:	f04f 0c0a 	mov.w	ip, #10
 80142a4:	4621      	mov	r1, r4
 80142a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142aa:	3b30      	subs	r3, #48	@ 0x30
 80142ac:	2b09      	cmp	r3, #9
 80142ae:	d94b      	bls.n	8014348 <_svfiprintf_r+0x17c>
 80142b0:	b1b0      	cbz	r0, 80142e0 <_svfiprintf_r+0x114>
 80142b2:	9207      	str	r2, [sp, #28]
 80142b4:	e014      	b.n	80142e0 <_svfiprintf_r+0x114>
 80142b6:	eba0 0308 	sub.w	r3, r0, r8
 80142ba:	fa09 f303 	lsl.w	r3, r9, r3
 80142be:	4313      	orrs	r3, r2
 80142c0:	9304      	str	r3, [sp, #16]
 80142c2:	46a2      	mov	sl, r4
 80142c4:	e7d2      	b.n	801426c <_svfiprintf_r+0xa0>
 80142c6:	9b03      	ldr	r3, [sp, #12]
 80142c8:	1d19      	adds	r1, r3, #4
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	9103      	str	r1, [sp, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	bfbb      	ittet	lt
 80142d2:	425b      	neglt	r3, r3
 80142d4:	f042 0202 	orrlt.w	r2, r2, #2
 80142d8:	9307      	strge	r3, [sp, #28]
 80142da:	9307      	strlt	r3, [sp, #28]
 80142dc:	bfb8      	it	lt
 80142de:	9204      	strlt	r2, [sp, #16]
 80142e0:	7823      	ldrb	r3, [r4, #0]
 80142e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80142e4:	d10a      	bne.n	80142fc <_svfiprintf_r+0x130>
 80142e6:	7863      	ldrb	r3, [r4, #1]
 80142e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80142ea:	d132      	bne.n	8014352 <_svfiprintf_r+0x186>
 80142ec:	9b03      	ldr	r3, [sp, #12]
 80142ee:	1d1a      	adds	r2, r3, #4
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	9203      	str	r2, [sp, #12]
 80142f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142f8:	3402      	adds	r4, #2
 80142fa:	9305      	str	r3, [sp, #20]
 80142fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80143c0 <_svfiprintf_r+0x1f4>
 8014300:	7821      	ldrb	r1, [r4, #0]
 8014302:	2203      	movs	r2, #3
 8014304:	4650      	mov	r0, sl
 8014306:	f7eb ff83 	bl	8000210 <memchr>
 801430a:	b138      	cbz	r0, 801431c <_svfiprintf_r+0x150>
 801430c:	9b04      	ldr	r3, [sp, #16]
 801430e:	eba0 000a 	sub.w	r0, r0, sl
 8014312:	2240      	movs	r2, #64	@ 0x40
 8014314:	4082      	lsls	r2, r0
 8014316:	4313      	orrs	r3, r2
 8014318:	3401      	adds	r4, #1
 801431a:	9304      	str	r3, [sp, #16]
 801431c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014320:	4824      	ldr	r0, [pc, #144]	@ (80143b4 <_svfiprintf_r+0x1e8>)
 8014322:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014326:	2206      	movs	r2, #6
 8014328:	f7eb ff72 	bl	8000210 <memchr>
 801432c:	2800      	cmp	r0, #0
 801432e:	d036      	beq.n	801439e <_svfiprintf_r+0x1d2>
 8014330:	4b21      	ldr	r3, [pc, #132]	@ (80143b8 <_svfiprintf_r+0x1ec>)
 8014332:	bb1b      	cbnz	r3, 801437c <_svfiprintf_r+0x1b0>
 8014334:	9b03      	ldr	r3, [sp, #12]
 8014336:	3307      	adds	r3, #7
 8014338:	f023 0307 	bic.w	r3, r3, #7
 801433c:	3308      	adds	r3, #8
 801433e:	9303      	str	r3, [sp, #12]
 8014340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014342:	4433      	add	r3, r6
 8014344:	9309      	str	r3, [sp, #36]	@ 0x24
 8014346:	e76a      	b.n	801421e <_svfiprintf_r+0x52>
 8014348:	fb0c 3202 	mla	r2, ip, r2, r3
 801434c:	460c      	mov	r4, r1
 801434e:	2001      	movs	r0, #1
 8014350:	e7a8      	b.n	80142a4 <_svfiprintf_r+0xd8>
 8014352:	2300      	movs	r3, #0
 8014354:	3401      	adds	r4, #1
 8014356:	9305      	str	r3, [sp, #20]
 8014358:	4619      	mov	r1, r3
 801435a:	f04f 0c0a 	mov.w	ip, #10
 801435e:	4620      	mov	r0, r4
 8014360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014364:	3a30      	subs	r2, #48	@ 0x30
 8014366:	2a09      	cmp	r2, #9
 8014368:	d903      	bls.n	8014372 <_svfiprintf_r+0x1a6>
 801436a:	2b00      	cmp	r3, #0
 801436c:	d0c6      	beq.n	80142fc <_svfiprintf_r+0x130>
 801436e:	9105      	str	r1, [sp, #20]
 8014370:	e7c4      	b.n	80142fc <_svfiprintf_r+0x130>
 8014372:	fb0c 2101 	mla	r1, ip, r1, r2
 8014376:	4604      	mov	r4, r0
 8014378:	2301      	movs	r3, #1
 801437a:	e7f0      	b.n	801435e <_svfiprintf_r+0x192>
 801437c:	ab03      	add	r3, sp, #12
 801437e:	9300      	str	r3, [sp, #0]
 8014380:	462a      	mov	r2, r5
 8014382:	4b0e      	ldr	r3, [pc, #56]	@ (80143bc <_svfiprintf_r+0x1f0>)
 8014384:	a904      	add	r1, sp, #16
 8014386:	4638      	mov	r0, r7
 8014388:	f7fc ffde 	bl	8011348 <_printf_float>
 801438c:	1c42      	adds	r2, r0, #1
 801438e:	4606      	mov	r6, r0
 8014390:	d1d6      	bne.n	8014340 <_svfiprintf_r+0x174>
 8014392:	89ab      	ldrh	r3, [r5, #12]
 8014394:	065b      	lsls	r3, r3, #25
 8014396:	f53f af2d 	bmi.w	80141f4 <_svfiprintf_r+0x28>
 801439a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801439c:	e72c      	b.n	80141f8 <_svfiprintf_r+0x2c>
 801439e:	ab03      	add	r3, sp, #12
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	462a      	mov	r2, r5
 80143a4:	4b05      	ldr	r3, [pc, #20]	@ (80143bc <_svfiprintf_r+0x1f0>)
 80143a6:	a904      	add	r1, sp, #16
 80143a8:	4638      	mov	r0, r7
 80143aa:	f7fd fa65 	bl	8011878 <_printf_i>
 80143ae:	e7ed      	b.n	801438c <_svfiprintf_r+0x1c0>
 80143b0:	08014eb6 	.word	0x08014eb6
 80143b4:	08014ec0 	.word	0x08014ec0
 80143b8:	08011349 	.word	0x08011349
 80143bc:	08014117 	.word	0x08014117
 80143c0:	08014ebc 	.word	0x08014ebc

080143c4 <__sfputc_r>:
 80143c4:	6893      	ldr	r3, [r2, #8]
 80143c6:	3b01      	subs	r3, #1
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	b410      	push	{r4}
 80143cc:	6093      	str	r3, [r2, #8]
 80143ce:	da08      	bge.n	80143e2 <__sfputc_r+0x1e>
 80143d0:	6994      	ldr	r4, [r2, #24]
 80143d2:	42a3      	cmp	r3, r4
 80143d4:	db01      	blt.n	80143da <__sfputc_r+0x16>
 80143d6:	290a      	cmp	r1, #10
 80143d8:	d103      	bne.n	80143e2 <__sfputc_r+0x1e>
 80143da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143de:	f7fd bd14 	b.w	8011e0a <__swbuf_r>
 80143e2:	6813      	ldr	r3, [r2, #0]
 80143e4:	1c58      	adds	r0, r3, #1
 80143e6:	6010      	str	r0, [r2, #0]
 80143e8:	7019      	strb	r1, [r3, #0]
 80143ea:	4608      	mov	r0, r1
 80143ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <__sfputs_r>:
 80143f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f4:	4606      	mov	r6, r0
 80143f6:	460f      	mov	r7, r1
 80143f8:	4614      	mov	r4, r2
 80143fa:	18d5      	adds	r5, r2, r3
 80143fc:	42ac      	cmp	r4, r5
 80143fe:	d101      	bne.n	8014404 <__sfputs_r+0x12>
 8014400:	2000      	movs	r0, #0
 8014402:	e007      	b.n	8014414 <__sfputs_r+0x22>
 8014404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014408:	463a      	mov	r2, r7
 801440a:	4630      	mov	r0, r6
 801440c:	f7ff ffda 	bl	80143c4 <__sfputc_r>
 8014410:	1c43      	adds	r3, r0, #1
 8014412:	d1f3      	bne.n	80143fc <__sfputs_r+0xa>
 8014414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014418 <_vfiprintf_r>:
 8014418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801441c:	460d      	mov	r5, r1
 801441e:	b09d      	sub	sp, #116	@ 0x74
 8014420:	4614      	mov	r4, r2
 8014422:	4698      	mov	r8, r3
 8014424:	4606      	mov	r6, r0
 8014426:	b118      	cbz	r0, 8014430 <_vfiprintf_r+0x18>
 8014428:	6a03      	ldr	r3, [r0, #32]
 801442a:	b90b      	cbnz	r3, 8014430 <_vfiprintf_r+0x18>
 801442c:	f7fd fbce 	bl	8011bcc <__sinit>
 8014430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014432:	07d9      	lsls	r1, r3, #31
 8014434:	d405      	bmi.n	8014442 <_vfiprintf_r+0x2a>
 8014436:	89ab      	ldrh	r3, [r5, #12]
 8014438:	059a      	lsls	r2, r3, #22
 801443a:	d402      	bmi.n	8014442 <_vfiprintf_r+0x2a>
 801443c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801443e:	f7fd fed0 	bl	80121e2 <__retarget_lock_acquire_recursive>
 8014442:	89ab      	ldrh	r3, [r5, #12]
 8014444:	071b      	lsls	r3, r3, #28
 8014446:	d501      	bpl.n	801444c <_vfiprintf_r+0x34>
 8014448:	692b      	ldr	r3, [r5, #16]
 801444a:	b99b      	cbnz	r3, 8014474 <_vfiprintf_r+0x5c>
 801444c:	4629      	mov	r1, r5
 801444e:	4630      	mov	r0, r6
 8014450:	f7fd fd1a 	bl	8011e88 <__swsetup_r>
 8014454:	b170      	cbz	r0, 8014474 <_vfiprintf_r+0x5c>
 8014456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014458:	07dc      	lsls	r4, r3, #31
 801445a:	d504      	bpl.n	8014466 <_vfiprintf_r+0x4e>
 801445c:	f04f 30ff 	mov.w	r0, #4294967295
 8014460:	b01d      	add	sp, #116	@ 0x74
 8014462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014466:	89ab      	ldrh	r3, [r5, #12]
 8014468:	0598      	lsls	r0, r3, #22
 801446a:	d4f7      	bmi.n	801445c <_vfiprintf_r+0x44>
 801446c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801446e:	f7fd feb9 	bl	80121e4 <__retarget_lock_release_recursive>
 8014472:	e7f3      	b.n	801445c <_vfiprintf_r+0x44>
 8014474:	2300      	movs	r3, #0
 8014476:	9309      	str	r3, [sp, #36]	@ 0x24
 8014478:	2320      	movs	r3, #32
 801447a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801447e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014482:	2330      	movs	r3, #48	@ 0x30
 8014484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014634 <_vfiprintf_r+0x21c>
 8014488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801448c:	f04f 0901 	mov.w	r9, #1
 8014490:	4623      	mov	r3, r4
 8014492:	469a      	mov	sl, r3
 8014494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014498:	b10a      	cbz	r2, 801449e <_vfiprintf_r+0x86>
 801449a:	2a25      	cmp	r2, #37	@ 0x25
 801449c:	d1f9      	bne.n	8014492 <_vfiprintf_r+0x7a>
 801449e:	ebba 0b04 	subs.w	fp, sl, r4
 80144a2:	d00b      	beq.n	80144bc <_vfiprintf_r+0xa4>
 80144a4:	465b      	mov	r3, fp
 80144a6:	4622      	mov	r2, r4
 80144a8:	4629      	mov	r1, r5
 80144aa:	4630      	mov	r0, r6
 80144ac:	f7ff ffa1 	bl	80143f2 <__sfputs_r>
 80144b0:	3001      	adds	r0, #1
 80144b2:	f000 80a7 	beq.w	8014604 <_vfiprintf_r+0x1ec>
 80144b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144b8:	445a      	add	r2, fp
 80144ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80144bc:	f89a 3000 	ldrb.w	r3, [sl]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f000 809f 	beq.w	8014604 <_vfiprintf_r+0x1ec>
 80144c6:	2300      	movs	r3, #0
 80144c8:	f04f 32ff 	mov.w	r2, #4294967295
 80144cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144d0:	f10a 0a01 	add.w	sl, sl, #1
 80144d4:	9304      	str	r3, [sp, #16]
 80144d6:	9307      	str	r3, [sp, #28]
 80144d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80144de:	4654      	mov	r4, sl
 80144e0:	2205      	movs	r2, #5
 80144e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144e6:	4853      	ldr	r0, [pc, #332]	@ (8014634 <_vfiprintf_r+0x21c>)
 80144e8:	f7eb fe92 	bl	8000210 <memchr>
 80144ec:	9a04      	ldr	r2, [sp, #16]
 80144ee:	b9d8      	cbnz	r0, 8014528 <_vfiprintf_r+0x110>
 80144f0:	06d1      	lsls	r1, r2, #27
 80144f2:	bf44      	itt	mi
 80144f4:	2320      	movmi	r3, #32
 80144f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144fa:	0713      	lsls	r3, r2, #28
 80144fc:	bf44      	itt	mi
 80144fe:	232b      	movmi	r3, #43	@ 0x2b
 8014500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014504:	f89a 3000 	ldrb.w	r3, [sl]
 8014508:	2b2a      	cmp	r3, #42	@ 0x2a
 801450a:	d015      	beq.n	8014538 <_vfiprintf_r+0x120>
 801450c:	9a07      	ldr	r2, [sp, #28]
 801450e:	4654      	mov	r4, sl
 8014510:	2000      	movs	r0, #0
 8014512:	f04f 0c0a 	mov.w	ip, #10
 8014516:	4621      	mov	r1, r4
 8014518:	f811 3b01 	ldrb.w	r3, [r1], #1
 801451c:	3b30      	subs	r3, #48	@ 0x30
 801451e:	2b09      	cmp	r3, #9
 8014520:	d94b      	bls.n	80145ba <_vfiprintf_r+0x1a2>
 8014522:	b1b0      	cbz	r0, 8014552 <_vfiprintf_r+0x13a>
 8014524:	9207      	str	r2, [sp, #28]
 8014526:	e014      	b.n	8014552 <_vfiprintf_r+0x13a>
 8014528:	eba0 0308 	sub.w	r3, r0, r8
 801452c:	fa09 f303 	lsl.w	r3, r9, r3
 8014530:	4313      	orrs	r3, r2
 8014532:	9304      	str	r3, [sp, #16]
 8014534:	46a2      	mov	sl, r4
 8014536:	e7d2      	b.n	80144de <_vfiprintf_r+0xc6>
 8014538:	9b03      	ldr	r3, [sp, #12]
 801453a:	1d19      	adds	r1, r3, #4
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	9103      	str	r1, [sp, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	bfbb      	ittet	lt
 8014544:	425b      	neglt	r3, r3
 8014546:	f042 0202 	orrlt.w	r2, r2, #2
 801454a:	9307      	strge	r3, [sp, #28]
 801454c:	9307      	strlt	r3, [sp, #28]
 801454e:	bfb8      	it	lt
 8014550:	9204      	strlt	r2, [sp, #16]
 8014552:	7823      	ldrb	r3, [r4, #0]
 8014554:	2b2e      	cmp	r3, #46	@ 0x2e
 8014556:	d10a      	bne.n	801456e <_vfiprintf_r+0x156>
 8014558:	7863      	ldrb	r3, [r4, #1]
 801455a:	2b2a      	cmp	r3, #42	@ 0x2a
 801455c:	d132      	bne.n	80145c4 <_vfiprintf_r+0x1ac>
 801455e:	9b03      	ldr	r3, [sp, #12]
 8014560:	1d1a      	adds	r2, r3, #4
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	9203      	str	r2, [sp, #12]
 8014566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801456a:	3402      	adds	r4, #2
 801456c:	9305      	str	r3, [sp, #20]
 801456e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014644 <_vfiprintf_r+0x22c>
 8014572:	7821      	ldrb	r1, [r4, #0]
 8014574:	2203      	movs	r2, #3
 8014576:	4650      	mov	r0, sl
 8014578:	f7eb fe4a 	bl	8000210 <memchr>
 801457c:	b138      	cbz	r0, 801458e <_vfiprintf_r+0x176>
 801457e:	9b04      	ldr	r3, [sp, #16]
 8014580:	eba0 000a 	sub.w	r0, r0, sl
 8014584:	2240      	movs	r2, #64	@ 0x40
 8014586:	4082      	lsls	r2, r0
 8014588:	4313      	orrs	r3, r2
 801458a:	3401      	adds	r4, #1
 801458c:	9304      	str	r3, [sp, #16]
 801458e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014592:	4829      	ldr	r0, [pc, #164]	@ (8014638 <_vfiprintf_r+0x220>)
 8014594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014598:	2206      	movs	r2, #6
 801459a:	f7eb fe39 	bl	8000210 <memchr>
 801459e:	2800      	cmp	r0, #0
 80145a0:	d03f      	beq.n	8014622 <_vfiprintf_r+0x20a>
 80145a2:	4b26      	ldr	r3, [pc, #152]	@ (801463c <_vfiprintf_r+0x224>)
 80145a4:	bb1b      	cbnz	r3, 80145ee <_vfiprintf_r+0x1d6>
 80145a6:	9b03      	ldr	r3, [sp, #12]
 80145a8:	3307      	adds	r3, #7
 80145aa:	f023 0307 	bic.w	r3, r3, #7
 80145ae:	3308      	adds	r3, #8
 80145b0:	9303      	str	r3, [sp, #12]
 80145b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145b4:	443b      	add	r3, r7
 80145b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80145b8:	e76a      	b.n	8014490 <_vfiprintf_r+0x78>
 80145ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80145be:	460c      	mov	r4, r1
 80145c0:	2001      	movs	r0, #1
 80145c2:	e7a8      	b.n	8014516 <_vfiprintf_r+0xfe>
 80145c4:	2300      	movs	r3, #0
 80145c6:	3401      	adds	r4, #1
 80145c8:	9305      	str	r3, [sp, #20]
 80145ca:	4619      	mov	r1, r3
 80145cc:	f04f 0c0a 	mov.w	ip, #10
 80145d0:	4620      	mov	r0, r4
 80145d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145d6:	3a30      	subs	r2, #48	@ 0x30
 80145d8:	2a09      	cmp	r2, #9
 80145da:	d903      	bls.n	80145e4 <_vfiprintf_r+0x1cc>
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d0c6      	beq.n	801456e <_vfiprintf_r+0x156>
 80145e0:	9105      	str	r1, [sp, #20]
 80145e2:	e7c4      	b.n	801456e <_vfiprintf_r+0x156>
 80145e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80145e8:	4604      	mov	r4, r0
 80145ea:	2301      	movs	r3, #1
 80145ec:	e7f0      	b.n	80145d0 <_vfiprintf_r+0x1b8>
 80145ee:	ab03      	add	r3, sp, #12
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	462a      	mov	r2, r5
 80145f4:	4b12      	ldr	r3, [pc, #72]	@ (8014640 <_vfiprintf_r+0x228>)
 80145f6:	a904      	add	r1, sp, #16
 80145f8:	4630      	mov	r0, r6
 80145fa:	f7fc fea5 	bl	8011348 <_printf_float>
 80145fe:	4607      	mov	r7, r0
 8014600:	1c78      	adds	r0, r7, #1
 8014602:	d1d6      	bne.n	80145b2 <_vfiprintf_r+0x19a>
 8014604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014606:	07d9      	lsls	r1, r3, #31
 8014608:	d405      	bmi.n	8014616 <_vfiprintf_r+0x1fe>
 801460a:	89ab      	ldrh	r3, [r5, #12]
 801460c:	059a      	lsls	r2, r3, #22
 801460e:	d402      	bmi.n	8014616 <_vfiprintf_r+0x1fe>
 8014610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014612:	f7fd fde7 	bl	80121e4 <__retarget_lock_release_recursive>
 8014616:	89ab      	ldrh	r3, [r5, #12]
 8014618:	065b      	lsls	r3, r3, #25
 801461a:	f53f af1f 	bmi.w	801445c <_vfiprintf_r+0x44>
 801461e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014620:	e71e      	b.n	8014460 <_vfiprintf_r+0x48>
 8014622:	ab03      	add	r3, sp, #12
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	462a      	mov	r2, r5
 8014628:	4b05      	ldr	r3, [pc, #20]	@ (8014640 <_vfiprintf_r+0x228>)
 801462a:	a904      	add	r1, sp, #16
 801462c:	4630      	mov	r0, r6
 801462e:	f7fd f923 	bl	8011878 <_printf_i>
 8014632:	e7e4      	b.n	80145fe <_vfiprintf_r+0x1e6>
 8014634:	08014eb6 	.word	0x08014eb6
 8014638:	08014ec0 	.word	0x08014ec0
 801463c:	08011349 	.word	0x08011349
 8014640:	080143f3 	.word	0x080143f3
 8014644:	08014ebc 	.word	0x08014ebc

08014648 <__sflush_r>:
 8014648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014650:	0716      	lsls	r6, r2, #28
 8014652:	4605      	mov	r5, r0
 8014654:	460c      	mov	r4, r1
 8014656:	d454      	bmi.n	8014702 <__sflush_r+0xba>
 8014658:	684b      	ldr	r3, [r1, #4]
 801465a:	2b00      	cmp	r3, #0
 801465c:	dc02      	bgt.n	8014664 <__sflush_r+0x1c>
 801465e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014660:	2b00      	cmp	r3, #0
 8014662:	dd48      	ble.n	80146f6 <__sflush_r+0xae>
 8014664:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014666:	2e00      	cmp	r6, #0
 8014668:	d045      	beq.n	80146f6 <__sflush_r+0xae>
 801466a:	2300      	movs	r3, #0
 801466c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014670:	682f      	ldr	r7, [r5, #0]
 8014672:	6a21      	ldr	r1, [r4, #32]
 8014674:	602b      	str	r3, [r5, #0]
 8014676:	d030      	beq.n	80146da <__sflush_r+0x92>
 8014678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	0759      	lsls	r1, r3, #29
 801467e:	d505      	bpl.n	801468c <__sflush_r+0x44>
 8014680:	6863      	ldr	r3, [r4, #4]
 8014682:	1ad2      	subs	r2, r2, r3
 8014684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014686:	b10b      	cbz	r3, 801468c <__sflush_r+0x44>
 8014688:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801468a:	1ad2      	subs	r2, r2, r3
 801468c:	2300      	movs	r3, #0
 801468e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014690:	6a21      	ldr	r1, [r4, #32]
 8014692:	4628      	mov	r0, r5
 8014694:	47b0      	blx	r6
 8014696:	1c43      	adds	r3, r0, #1
 8014698:	89a3      	ldrh	r3, [r4, #12]
 801469a:	d106      	bne.n	80146aa <__sflush_r+0x62>
 801469c:	6829      	ldr	r1, [r5, #0]
 801469e:	291d      	cmp	r1, #29
 80146a0:	d82b      	bhi.n	80146fa <__sflush_r+0xb2>
 80146a2:	4a2a      	ldr	r2, [pc, #168]	@ (801474c <__sflush_r+0x104>)
 80146a4:	40ca      	lsrs	r2, r1
 80146a6:	07d6      	lsls	r6, r2, #31
 80146a8:	d527      	bpl.n	80146fa <__sflush_r+0xb2>
 80146aa:	2200      	movs	r2, #0
 80146ac:	6062      	str	r2, [r4, #4]
 80146ae:	04d9      	lsls	r1, r3, #19
 80146b0:	6922      	ldr	r2, [r4, #16]
 80146b2:	6022      	str	r2, [r4, #0]
 80146b4:	d504      	bpl.n	80146c0 <__sflush_r+0x78>
 80146b6:	1c42      	adds	r2, r0, #1
 80146b8:	d101      	bne.n	80146be <__sflush_r+0x76>
 80146ba:	682b      	ldr	r3, [r5, #0]
 80146bc:	b903      	cbnz	r3, 80146c0 <__sflush_r+0x78>
 80146be:	6560      	str	r0, [r4, #84]	@ 0x54
 80146c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146c2:	602f      	str	r7, [r5, #0]
 80146c4:	b1b9      	cbz	r1, 80146f6 <__sflush_r+0xae>
 80146c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146ca:	4299      	cmp	r1, r3
 80146cc:	d002      	beq.n	80146d4 <__sflush_r+0x8c>
 80146ce:	4628      	mov	r0, r5
 80146d0:	f7fe fc1e 	bl	8012f10 <_free_r>
 80146d4:	2300      	movs	r3, #0
 80146d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80146d8:	e00d      	b.n	80146f6 <__sflush_r+0xae>
 80146da:	2301      	movs	r3, #1
 80146dc:	4628      	mov	r0, r5
 80146de:	47b0      	blx	r6
 80146e0:	4602      	mov	r2, r0
 80146e2:	1c50      	adds	r0, r2, #1
 80146e4:	d1c9      	bne.n	801467a <__sflush_r+0x32>
 80146e6:	682b      	ldr	r3, [r5, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d0c6      	beq.n	801467a <__sflush_r+0x32>
 80146ec:	2b1d      	cmp	r3, #29
 80146ee:	d001      	beq.n	80146f4 <__sflush_r+0xac>
 80146f0:	2b16      	cmp	r3, #22
 80146f2:	d11e      	bne.n	8014732 <__sflush_r+0xea>
 80146f4:	602f      	str	r7, [r5, #0]
 80146f6:	2000      	movs	r0, #0
 80146f8:	e022      	b.n	8014740 <__sflush_r+0xf8>
 80146fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146fe:	b21b      	sxth	r3, r3
 8014700:	e01b      	b.n	801473a <__sflush_r+0xf2>
 8014702:	690f      	ldr	r7, [r1, #16]
 8014704:	2f00      	cmp	r7, #0
 8014706:	d0f6      	beq.n	80146f6 <__sflush_r+0xae>
 8014708:	0793      	lsls	r3, r2, #30
 801470a:	680e      	ldr	r6, [r1, #0]
 801470c:	bf08      	it	eq
 801470e:	694b      	ldreq	r3, [r1, #20]
 8014710:	600f      	str	r7, [r1, #0]
 8014712:	bf18      	it	ne
 8014714:	2300      	movne	r3, #0
 8014716:	eba6 0807 	sub.w	r8, r6, r7
 801471a:	608b      	str	r3, [r1, #8]
 801471c:	f1b8 0f00 	cmp.w	r8, #0
 8014720:	dde9      	ble.n	80146f6 <__sflush_r+0xae>
 8014722:	6a21      	ldr	r1, [r4, #32]
 8014724:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014726:	4643      	mov	r3, r8
 8014728:	463a      	mov	r2, r7
 801472a:	4628      	mov	r0, r5
 801472c:	47b0      	blx	r6
 801472e:	2800      	cmp	r0, #0
 8014730:	dc08      	bgt.n	8014744 <__sflush_r+0xfc>
 8014732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801473a:	81a3      	strh	r3, [r4, #12]
 801473c:	f04f 30ff 	mov.w	r0, #4294967295
 8014740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014744:	4407      	add	r7, r0
 8014746:	eba8 0800 	sub.w	r8, r8, r0
 801474a:	e7e7      	b.n	801471c <__sflush_r+0xd4>
 801474c:	20400001 	.word	0x20400001

08014750 <_fflush_r>:
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	690b      	ldr	r3, [r1, #16]
 8014754:	4605      	mov	r5, r0
 8014756:	460c      	mov	r4, r1
 8014758:	b913      	cbnz	r3, 8014760 <_fflush_r+0x10>
 801475a:	2500      	movs	r5, #0
 801475c:	4628      	mov	r0, r5
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	b118      	cbz	r0, 801476a <_fflush_r+0x1a>
 8014762:	6a03      	ldr	r3, [r0, #32]
 8014764:	b90b      	cbnz	r3, 801476a <_fflush_r+0x1a>
 8014766:	f7fd fa31 	bl	8011bcc <__sinit>
 801476a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d0f3      	beq.n	801475a <_fflush_r+0xa>
 8014772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014774:	07d0      	lsls	r0, r2, #31
 8014776:	d404      	bmi.n	8014782 <_fflush_r+0x32>
 8014778:	0599      	lsls	r1, r3, #22
 801477a:	d402      	bmi.n	8014782 <_fflush_r+0x32>
 801477c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801477e:	f7fd fd30 	bl	80121e2 <__retarget_lock_acquire_recursive>
 8014782:	4628      	mov	r0, r5
 8014784:	4621      	mov	r1, r4
 8014786:	f7ff ff5f 	bl	8014648 <__sflush_r>
 801478a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801478c:	07da      	lsls	r2, r3, #31
 801478e:	4605      	mov	r5, r0
 8014790:	d4e4      	bmi.n	801475c <_fflush_r+0xc>
 8014792:	89a3      	ldrh	r3, [r4, #12]
 8014794:	059b      	lsls	r3, r3, #22
 8014796:	d4e1      	bmi.n	801475c <_fflush_r+0xc>
 8014798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801479a:	f7fd fd23 	bl	80121e4 <__retarget_lock_release_recursive>
 801479e:	e7dd      	b.n	801475c <_fflush_r+0xc>

080147a0 <fiprintf>:
 80147a0:	b40e      	push	{r1, r2, r3}
 80147a2:	b503      	push	{r0, r1, lr}
 80147a4:	4601      	mov	r1, r0
 80147a6:	ab03      	add	r3, sp, #12
 80147a8:	4805      	ldr	r0, [pc, #20]	@ (80147c0 <fiprintf+0x20>)
 80147aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80147ae:	6800      	ldr	r0, [r0, #0]
 80147b0:	9301      	str	r3, [sp, #4]
 80147b2:	f7ff fe31 	bl	8014418 <_vfiprintf_r>
 80147b6:	b002      	add	sp, #8
 80147b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80147bc:	b003      	add	sp, #12
 80147be:	4770      	bx	lr
 80147c0:	2000018c 	.word	0x2000018c

080147c4 <__swhatbuf_r>:
 80147c4:	b570      	push	{r4, r5, r6, lr}
 80147c6:	460c      	mov	r4, r1
 80147c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147cc:	2900      	cmp	r1, #0
 80147ce:	b096      	sub	sp, #88	@ 0x58
 80147d0:	4615      	mov	r5, r2
 80147d2:	461e      	mov	r6, r3
 80147d4:	da0d      	bge.n	80147f2 <__swhatbuf_r+0x2e>
 80147d6:	89a3      	ldrh	r3, [r4, #12]
 80147d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80147dc:	f04f 0100 	mov.w	r1, #0
 80147e0:	bf14      	ite	ne
 80147e2:	2340      	movne	r3, #64	@ 0x40
 80147e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80147e8:	2000      	movs	r0, #0
 80147ea:	6031      	str	r1, [r6, #0]
 80147ec:	602b      	str	r3, [r5, #0]
 80147ee:	b016      	add	sp, #88	@ 0x58
 80147f0:	bd70      	pop	{r4, r5, r6, pc}
 80147f2:	466a      	mov	r2, sp
 80147f4:	f000 f862 	bl	80148bc <_fstat_r>
 80147f8:	2800      	cmp	r0, #0
 80147fa:	dbec      	blt.n	80147d6 <__swhatbuf_r+0x12>
 80147fc:	9901      	ldr	r1, [sp, #4]
 80147fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014802:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014806:	4259      	negs	r1, r3
 8014808:	4159      	adcs	r1, r3
 801480a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801480e:	e7eb      	b.n	80147e8 <__swhatbuf_r+0x24>

08014810 <__smakebuf_r>:
 8014810:	898b      	ldrh	r3, [r1, #12]
 8014812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014814:	079d      	lsls	r5, r3, #30
 8014816:	4606      	mov	r6, r0
 8014818:	460c      	mov	r4, r1
 801481a:	d507      	bpl.n	801482c <__smakebuf_r+0x1c>
 801481c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014820:	6023      	str	r3, [r4, #0]
 8014822:	6123      	str	r3, [r4, #16]
 8014824:	2301      	movs	r3, #1
 8014826:	6163      	str	r3, [r4, #20]
 8014828:	b003      	add	sp, #12
 801482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801482c:	ab01      	add	r3, sp, #4
 801482e:	466a      	mov	r2, sp
 8014830:	f7ff ffc8 	bl	80147c4 <__swhatbuf_r>
 8014834:	9f00      	ldr	r7, [sp, #0]
 8014836:	4605      	mov	r5, r0
 8014838:	4639      	mov	r1, r7
 801483a:	4630      	mov	r0, r6
 801483c:	f7fe ff16 	bl	801366c <_malloc_r>
 8014840:	b948      	cbnz	r0, 8014856 <__smakebuf_r+0x46>
 8014842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014846:	059a      	lsls	r2, r3, #22
 8014848:	d4ee      	bmi.n	8014828 <__smakebuf_r+0x18>
 801484a:	f023 0303 	bic.w	r3, r3, #3
 801484e:	f043 0302 	orr.w	r3, r3, #2
 8014852:	81a3      	strh	r3, [r4, #12]
 8014854:	e7e2      	b.n	801481c <__smakebuf_r+0xc>
 8014856:	89a3      	ldrh	r3, [r4, #12]
 8014858:	6020      	str	r0, [r4, #0]
 801485a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801485e:	81a3      	strh	r3, [r4, #12]
 8014860:	9b01      	ldr	r3, [sp, #4]
 8014862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014866:	b15b      	cbz	r3, 8014880 <__smakebuf_r+0x70>
 8014868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801486c:	4630      	mov	r0, r6
 801486e:	f000 f837 	bl	80148e0 <_isatty_r>
 8014872:	b128      	cbz	r0, 8014880 <__smakebuf_r+0x70>
 8014874:	89a3      	ldrh	r3, [r4, #12]
 8014876:	f023 0303 	bic.w	r3, r3, #3
 801487a:	f043 0301 	orr.w	r3, r3, #1
 801487e:	81a3      	strh	r3, [r4, #12]
 8014880:	89a3      	ldrh	r3, [r4, #12]
 8014882:	431d      	orrs	r5, r3
 8014884:	81a5      	strh	r5, [r4, #12]
 8014886:	e7cf      	b.n	8014828 <__smakebuf_r+0x18>

08014888 <memmove>:
 8014888:	4288      	cmp	r0, r1
 801488a:	b510      	push	{r4, lr}
 801488c:	eb01 0402 	add.w	r4, r1, r2
 8014890:	d902      	bls.n	8014898 <memmove+0x10>
 8014892:	4284      	cmp	r4, r0
 8014894:	4623      	mov	r3, r4
 8014896:	d807      	bhi.n	80148a8 <memmove+0x20>
 8014898:	1e43      	subs	r3, r0, #1
 801489a:	42a1      	cmp	r1, r4
 801489c:	d008      	beq.n	80148b0 <memmove+0x28>
 801489e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80148a6:	e7f8      	b.n	801489a <memmove+0x12>
 80148a8:	4402      	add	r2, r0
 80148aa:	4601      	mov	r1, r0
 80148ac:	428a      	cmp	r2, r1
 80148ae:	d100      	bne.n	80148b2 <memmove+0x2a>
 80148b0:	bd10      	pop	{r4, pc}
 80148b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80148b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80148ba:	e7f7      	b.n	80148ac <memmove+0x24>

080148bc <_fstat_r>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	4d07      	ldr	r5, [pc, #28]	@ (80148dc <_fstat_r+0x20>)
 80148c0:	2300      	movs	r3, #0
 80148c2:	4604      	mov	r4, r0
 80148c4:	4608      	mov	r0, r1
 80148c6:	4611      	mov	r1, r2
 80148c8:	602b      	str	r3, [r5, #0]
 80148ca:	f7ef f897 	bl	80039fc <_fstat>
 80148ce:	1c43      	adds	r3, r0, #1
 80148d0:	d102      	bne.n	80148d8 <_fstat_r+0x1c>
 80148d2:	682b      	ldr	r3, [r5, #0]
 80148d4:	b103      	cbz	r3, 80148d8 <_fstat_r+0x1c>
 80148d6:	6023      	str	r3, [r4, #0]
 80148d8:	bd38      	pop	{r3, r4, r5, pc}
 80148da:	bf00      	nop
 80148dc:	20004f0c 	.word	0x20004f0c

080148e0 <_isatty_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4d06      	ldr	r5, [pc, #24]	@ (80148fc <_isatty_r+0x1c>)
 80148e4:	2300      	movs	r3, #0
 80148e6:	4604      	mov	r4, r0
 80148e8:	4608      	mov	r0, r1
 80148ea:	602b      	str	r3, [r5, #0]
 80148ec:	f7ef f896 	bl	8003a1c <_isatty>
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	d102      	bne.n	80148fa <_isatty_r+0x1a>
 80148f4:	682b      	ldr	r3, [r5, #0]
 80148f6:	b103      	cbz	r3, 80148fa <_isatty_r+0x1a>
 80148f8:	6023      	str	r3, [r4, #0]
 80148fa:	bd38      	pop	{r3, r4, r5, pc}
 80148fc:	20004f0c 	.word	0x20004f0c

08014900 <_sbrk_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4d06      	ldr	r5, [pc, #24]	@ (801491c <_sbrk_r+0x1c>)
 8014904:	2300      	movs	r3, #0
 8014906:	4604      	mov	r4, r0
 8014908:	4608      	mov	r0, r1
 801490a:	602b      	str	r3, [r5, #0]
 801490c:	f7ef f89e 	bl	8003a4c <_sbrk>
 8014910:	1c43      	adds	r3, r0, #1
 8014912:	d102      	bne.n	801491a <_sbrk_r+0x1a>
 8014914:	682b      	ldr	r3, [r5, #0]
 8014916:	b103      	cbz	r3, 801491a <_sbrk_r+0x1a>
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	20004f0c 	.word	0x20004f0c

08014920 <abort>:
 8014920:	b508      	push	{r3, lr}
 8014922:	2006      	movs	r0, #6
 8014924:	f000 f86e 	bl	8014a04 <raise>
 8014928:	2001      	movs	r0, #1
 801492a:	f7ef f817 	bl	800395c <_exit>

0801492e <_calloc_r>:
 801492e:	b570      	push	{r4, r5, r6, lr}
 8014930:	fba1 5402 	umull	r5, r4, r1, r2
 8014934:	b934      	cbnz	r4, 8014944 <_calloc_r+0x16>
 8014936:	4629      	mov	r1, r5
 8014938:	f7fe fe98 	bl	801366c <_malloc_r>
 801493c:	4606      	mov	r6, r0
 801493e:	b928      	cbnz	r0, 801494c <_calloc_r+0x1e>
 8014940:	4630      	mov	r0, r6
 8014942:	bd70      	pop	{r4, r5, r6, pc}
 8014944:	220c      	movs	r2, #12
 8014946:	6002      	str	r2, [r0, #0]
 8014948:	2600      	movs	r6, #0
 801494a:	e7f9      	b.n	8014940 <_calloc_r+0x12>
 801494c:	462a      	mov	r2, r5
 801494e:	4621      	mov	r1, r4
 8014950:	f7fd faf0 	bl	8011f34 <memset>
 8014954:	e7f4      	b.n	8014940 <_calloc_r+0x12>

08014956 <_realloc_r>:
 8014956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801495a:	4607      	mov	r7, r0
 801495c:	4614      	mov	r4, r2
 801495e:	460d      	mov	r5, r1
 8014960:	b921      	cbnz	r1, 801496c <_realloc_r+0x16>
 8014962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014966:	4611      	mov	r1, r2
 8014968:	f7fe be80 	b.w	801366c <_malloc_r>
 801496c:	b92a      	cbnz	r2, 801497a <_realloc_r+0x24>
 801496e:	f7fe facf 	bl	8012f10 <_free_r>
 8014972:	4625      	mov	r5, r4
 8014974:	4628      	mov	r0, r5
 8014976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801497a:	f000 f85f 	bl	8014a3c <_malloc_usable_size_r>
 801497e:	4284      	cmp	r4, r0
 8014980:	4606      	mov	r6, r0
 8014982:	d802      	bhi.n	801498a <_realloc_r+0x34>
 8014984:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014988:	d8f4      	bhi.n	8014974 <_realloc_r+0x1e>
 801498a:	4621      	mov	r1, r4
 801498c:	4638      	mov	r0, r7
 801498e:	f7fe fe6d 	bl	801366c <_malloc_r>
 8014992:	4680      	mov	r8, r0
 8014994:	b908      	cbnz	r0, 801499a <_realloc_r+0x44>
 8014996:	4645      	mov	r5, r8
 8014998:	e7ec      	b.n	8014974 <_realloc_r+0x1e>
 801499a:	42b4      	cmp	r4, r6
 801499c:	4622      	mov	r2, r4
 801499e:	4629      	mov	r1, r5
 80149a0:	bf28      	it	cs
 80149a2:	4632      	movcs	r2, r6
 80149a4:	f7fd fc1f 	bl	80121e6 <memcpy>
 80149a8:	4629      	mov	r1, r5
 80149aa:	4638      	mov	r0, r7
 80149ac:	f7fe fab0 	bl	8012f10 <_free_r>
 80149b0:	e7f1      	b.n	8014996 <_realloc_r+0x40>

080149b2 <_raise_r>:
 80149b2:	291f      	cmp	r1, #31
 80149b4:	b538      	push	{r3, r4, r5, lr}
 80149b6:	4605      	mov	r5, r0
 80149b8:	460c      	mov	r4, r1
 80149ba:	d904      	bls.n	80149c6 <_raise_r+0x14>
 80149bc:	2316      	movs	r3, #22
 80149be:	6003      	str	r3, [r0, #0]
 80149c0:	f04f 30ff 	mov.w	r0, #4294967295
 80149c4:	bd38      	pop	{r3, r4, r5, pc}
 80149c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80149c8:	b112      	cbz	r2, 80149d0 <_raise_r+0x1e>
 80149ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80149ce:	b94b      	cbnz	r3, 80149e4 <_raise_r+0x32>
 80149d0:	4628      	mov	r0, r5
 80149d2:	f000 f831 	bl	8014a38 <_getpid_r>
 80149d6:	4622      	mov	r2, r4
 80149d8:	4601      	mov	r1, r0
 80149da:	4628      	mov	r0, r5
 80149dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149e0:	f000 b818 	b.w	8014a14 <_kill_r>
 80149e4:	2b01      	cmp	r3, #1
 80149e6:	d00a      	beq.n	80149fe <_raise_r+0x4c>
 80149e8:	1c59      	adds	r1, r3, #1
 80149ea:	d103      	bne.n	80149f4 <_raise_r+0x42>
 80149ec:	2316      	movs	r3, #22
 80149ee:	6003      	str	r3, [r0, #0]
 80149f0:	2001      	movs	r0, #1
 80149f2:	e7e7      	b.n	80149c4 <_raise_r+0x12>
 80149f4:	2100      	movs	r1, #0
 80149f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80149fa:	4620      	mov	r0, r4
 80149fc:	4798      	blx	r3
 80149fe:	2000      	movs	r0, #0
 8014a00:	e7e0      	b.n	80149c4 <_raise_r+0x12>
	...

08014a04 <raise>:
 8014a04:	4b02      	ldr	r3, [pc, #8]	@ (8014a10 <raise+0xc>)
 8014a06:	4601      	mov	r1, r0
 8014a08:	6818      	ldr	r0, [r3, #0]
 8014a0a:	f7ff bfd2 	b.w	80149b2 <_raise_r>
 8014a0e:	bf00      	nop
 8014a10:	2000018c 	.word	0x2000018c

08014a14 <_kill_r>:
 8014a14:	b538      	push	{r3, r4, r5, lr}
 8014a16:	4d07      	ldr	r5, [pc, #28]	@ (8014a34 <_kill_r+0x20>)
 8014a18:	2300      	movs	r3, #0
 8014a1a:	4604      	mov	r4, r0
 8014a1c:	4608      	mov	r0, r1
 8014a1e:	4611      	mov	r1, r2
 8014a20:	602b      	str	r3, [r5, #0]
 8014a22:	f7ee ff8b 	bl	800393c <_kill>
 8014a26:	1c43      	adds	r3, r0, #1
 8014a28:	d102      	bne.n	8014a30 <_kill_r+0x1c>
 8014a2a:	682b      	ldr	r3, [r5, #0]
 8014a2c:	b103      	cbz	r3, 8014a30 <_kill_r+0x1c>
 8014a2e:	6023      	str	r3, [r4, #0]
 8014a30:	bd38      	pop	{r3, r4, r5, pc}
 8014a32:	bf00      	nop
 8014a34:	20004f0c 	.word	0x20004f0c

08014a38 <_getpid_r>:
 8014a38:	f7ee bf78 	b.w	800392c <_getpid>

08014a3c <_malloc_usable_size_r>:
 8014a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a40:	1f18      	subs	r0, r3, #4
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	bfbc      	itt	lt
 8014a46:	580b      	ldrlt	r3, [r1, r0]
 8014a48:	18c0      	addlt	r0, r0, r3
 8014a4a:	4770      	bx	lr

08014a4c <_init>:
 8014a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4e:	bf00      	nop
 8014a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a52:	bc08      	pop	{r3}
 8014a54:	469e      	mov	lr, r3
 8014a56:	4770      	bx	lr

08014a58 <_fini>:
 8014a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a5a:	bf00      	nop
 8014a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a5e:	bc08      	pop	{r3}
 8014a60:	469e      	mov	lr, r3
 8014a62:	4770      	bx	lr
