
little_driver_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000149d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08014ba8  08014ba8  00015ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015318  08015318  0001731c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015318  08015318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015320  08015320  0001731c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015320  08015320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015324  08015324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08015328  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  08015504  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  080155a4  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009004  20000320  08015644  00017320  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20009324  08015644  00017324  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001731c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039b9b  00000000  00000000  0001734c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008ef4  00000000  00000000  00050ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002fc8  00000000  00000000  00059de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000024c6  00000000  00000000  0005cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036cc7  00000000  00000000  0005f26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044ffe  00000000  00000000  00095f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127e45  00000000  00000000  000daf33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00202d78  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dc7c  00000000  00000000  00202dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000074  00000000  00000000  00210a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014b8c 	.word	0x08014b8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	08014b8c 	.word	0x08014b8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC3_Init>:
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC3_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC3_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC3_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC3_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC3_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC3_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010c2:	f003 fb5f 	bl	8004784 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC3_Init+0x70>
 80010cc:	f001 ff8c 	bl	8002fe8 <Error_Handler>
 80010d0:	2304      	movs	r3, #4
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC3_Init+0x98>)
 80010e2:	f003 fb93 	bl	800480c <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC3_Init+0x90>
 80010ec:	f001 ff7c 	bl	8002fe8 <Error_Handler>
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000033c 	.word	0x2000033c
 80010fc:	40012200 	.word	0x40012200
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <HAL_ADC_MspInit+0xa4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d13c      	bne.n	80011a0 <HAL_ADC_MspInit+0x9c>
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a20      	ldr	r2, [pc, #128]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001144:	f043 0320 	orr.w	r3, r3, #32
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_ADC_MspInit+0xa8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	2303      	movs	r3, #3
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <HAL_ADC_MspInit+0xac>)
 8001184:	f004 fe4a 	bl	8005e1c <HAL_GPIO_Init>
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	2303      	movs	r3, #3
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <HAL_ADC_MspInit+0xb0>)
 800119c:	f004 fe3e 	bl	8005e1c <HAL_GPIO_Init>
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40012200 	.word	0x40012200
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40020000 	.word	0x40020000

080011b8 <MX_CRC_Init>:
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <MX_CRC_Init+0x40>)
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	711a      	strb	r2, [r3, #4]
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	715a      	strb	r2, [r3, #5]
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_CRC_Init+0x3c>)
 80011e2:	f003 fe49 	bl	8004e78 <HAL_CRC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_CRC_Init+0x38>
 80011ec:	f001 fefc 	bl	8002fe8 <Error_Handler>
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000384 	.word	0x20000384
 80011f8:	40023000 	.word	0x40023000

080011fc <HAL_CRC_MspInit>:
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_CRC_MspInit+0x38>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10b      	bne.n	8001226 <HAL_CRC_MspInit+0x2a>
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_CRC_MspInit+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <HAL_CRC_MspInit+0x3c>)
 8001214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <HAL_CRC_MspInit+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023000 	.word	0x40023000
 8001238:	40023800 	.word	0x40023800

0800123c <MX_DCMI_Init>:
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_DCMI_Init+0x60>)
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <MX_DCMI_Init+0x64>)
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_DCMI_Init+0x60>)
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <MX_DCMI_Init+0x60>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_DCMI_Init+0x60>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <MX_DCMI_Init+0x60>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_DCMI_Init+0x60>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <MX_DCMI_Init+0x60>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_DCMI_Init+0x60>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_DCMI_Init+0x60>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_DCMI_Init+0x60>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_DCMI_Init+0x60>)
 800127e:	2200      	movs	r2, #0
 8001280:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_DCMI_Init+0x60>)
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_DCMI_Init+0x60>)
 800128a:	f003 fee7 	bl	800505c <HAL_DCMI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_DCMI_Init+0x5c>
 8001294:	f001 fea8 	bl	8002fe8 <Error_Handler>
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200003a8 	.word	0x200003a8
 80012a0:	50050000 	.word	0x50050000

080012a4 <HAL_DCMI_MspInit>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a50      	ldr	r2, [pc, #320]	@ (8001404 <HAL_DCMI_MspInit+0x160>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f040 809a 	bne.w	80013fc <HAL_DCMI_MspInit+0x158>
 80012c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80012d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	4b49      	ldr	r3, [pc, #292]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4a48      	ldr	r2, [pc, #288]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ec:	4b46      	ldr	r3, [pc, #280]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	4a42      	ldr	r2, [pc, #264]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6313      	str	r3, [r2, #48]	@ 0x30
 8001304:	4b40      	ldr	r3, [pc, #256]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4b3d      	ldr	r3, [pc, #244]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a3c      	ldr	r2, [pc, #240]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800132e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001332:	6313      	str	r3, [r2, #48]	@ 0x30
 8001334:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4b31      	ldr	r3, [pc, #196]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	4a30      	ldr	r2, [pc, #192]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6313      	str	r3, [r2, #48]	@ 0x30
 800134c:	4b2e      	ldr	r3, [pc, #184]	@ (8001408 <HAL_DCMI_MspInit+0x164>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2360      	movs	r3, #96	@ 0x60
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	@ 0x30
 8001368:	230d      	movs	r3, #13
 800136a:	637b      	str	r3, [r7, #52]	@ 0x34
 800136c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	4826      	ldr	r0, [pc, #152]	@ (800140c <HAL_DCMI_MspInit+0x168>)
 8001374:	f004 fd52 	bl	8005e1c <HAL_GPIO_Init>
 8001378:	2308      	movs	r3, #8
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	@ 0x30
 8001388:	230d      	movs	r3, #13
 800138a:	637b      	str	r3, [r7, #52]	@ 0x34
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	481f      	ldr	r0, [pc, #124]	@ (8001410 <HAL_DCMI_MspInit+0x16c>)
 8001394:	f004 fd42 	bl	8005e1c <HAL_GPIO_Init>
 8001398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
 800139e:	2302      	movs	r3, #2
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80013aa:	230d      	movs	r3, #13
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4817      	ldr	r0, [pc, #92]	@ (8001414 <HAL_DCMI_MspInit+0x170>)
 80013b6:	f004 fd31 	bl	8005e1c <HAL_GPIO_Init>
 80013ba:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c0:	2302      	movs	r3, #2
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80013cc:	230d      	movs	r3, #13
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80013d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4810      	ldr	r0, [pc, #64]	@ (8001418 <HAL_DCMI_MspInit+0x174>)
 80013d8:	f004 fd20 	bl	8005e1c <HAL_GPIO_Init>
 80013dc:	2350      	movs	r3, #80	@ 0x50
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80013ec:	230d      	movs	r3, #13
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <HAL_DCMI_MspInit+0x178>)
 80013f8:	f004 fd10 	bl	8005e1c <HAL_GPIO_Init>
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	@ 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	50050000 	.word	0x50050000
 8001408:	40023800 	.word	0x40023800
 800140c:	40021000 	.word	0x40021000
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40020000 	.word	0x40020000

08001420 <MX_DMA2D_Init>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001426:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <MX_DMA2D_Init+0x60>)
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_DMA2D_Init+0x5c>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_DMA2D_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA2D_Init+0x5c>)
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001456:	f003 ffa7 	bl	80053a8 <HAL_DMA2D_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_DMA2D_Init+0x44>
 8001460:	f001 fdc2 	bl	8002fe8 <Error_Handler>
 8001464:	2101      	movs	r1, #1
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_DMA2D_Init+0x5c>)
 8001468:	f004 f8f8 	bl	800565c <HAL_DMA2D_ConfigLayer>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_DMA2D_Init+0x56>
 8001472:	f001 fdb9 	bl	8002fe8 <Error_Handler>
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003f8 	.word	0x200003f8
 8001480:	4002b000 	.word	0x4002b000

08001484 <HAL_DMA2D_MspInit>:
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_DMA2D_MspInit+0x44>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d113      	bne.n	80014be <HAL_DMA2D_MspInit+0x3a>
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_DMA2D_MspInit+0x48>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <HAL_DMA2D_MspInit+0x48>)
 800149c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_DMA2D_MspInit+0x48>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	205a      	movs	r0, #90	@ 0x5a
 80014b4:	f003 fcb6 	bl	8004e24 <HAL_NVIC_SetPriority>
 80014b8:	205a      	movs	r0, #90	@ 0x5a
 80014ba:	f003 fccf 	bl	8004e5c <HAL_NVIC_EnableIRQ>
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	4002b000 	.word	0x4002b000
 80014cc:	40023800 	.word	0x40023800

080014d0 <MX_ETH_Init>:
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_ETH_Init+0x84>)
 80014d6:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <MX_ETH_Init+0x88>)
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_ETH_Init+0x8c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <MX_ETH_Init+0x8c>)
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	705a      	strb	r2, [r3, #1]
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <MX_ETH_Init+0x8c>)
 80014e8:	22e1      	movs	r2, #225	@ 0xe1
 80014ea:	709a      	strb	r2, [r3, #2]
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <MX_ETH_Init+0x8c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	70da      	strb	r2, [r3, #3]
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <MX_ETH_Init+0x8c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_ETH_Init+0x8c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	715a      	strb	r2, [r3, #5]
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_ETH_Init+0x84>)
 8001500:	4a16      	ldr	r2, [pc, #88]	@ (800155c <MX_ETH_Init+0x8c>)
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <MX_ETH_Init+0x84>)
 8001506:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_ETH_Init+0x84>)
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <MX_ETH_Init+0x90>)
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <MX_ETH_Init+0x84>)
 8001514:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <MX_ETH_Init+0x94>)
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_ETH_Init+0x84>)
 800151a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_ETH_Init+0x84>)
 8001522:	f004 f92d 	bl	8005780 <HAL_ETH_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ETH_Init+0x60>
 800152c:	f001 fd5c 	bl	8002fe8 <Error_Handler>
 8001530:	2238      	movs	r2, #56	@ 0x38
 8001532:	2100      	movs	r1, #0
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <MX_ETH_Init+0x98>)
 8001536:	f010 fd9d 	bl	8012074 <memset>
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_ETH_Init+0x98>)
 800153c:	2221      	movs	r2, #33	@ 0x21
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_ETH_Init+0x98>)
 8001542:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <MX_ETH_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000470 	.word	0x20000470
 8001558:	40028000 	.word	0x40028000
 800155c:	20000520 	.word	0x20000520
 8001560:	2000027c 	.word	0x2000027c
 8001564:	200001dc 	.word	0x200001dc
 8001568:	20000438 	.word	0x20000438

0800156c <HAL_ETH_MspInit>:
 800156c:	b580      	push	{r7, lr}
 800156e:	b08e      	sub	sp, #56	@ 0x38
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a3f      	ldr	r2, [pc, #252]	@ (8001688 <HAL_ETH_MspInit+0x11c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d178      	bne.n	8001680 <HAL_ETH_MspInit+0x114>
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a3e      	ldr	r2, [pc, #248]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <HAL_ETH_MspInit+0x120>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a38      	ldr	r2, [pc, #224]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b36      	ldr	r3, [pc, #216]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a32      	ldr	r2, [pc, #200]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b30      	ldr	r3, [pc, #192]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a2c      	ldr	r2, [pc, #176]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a26      	ldr	r2, [pc, #152]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_ETH_MspInit+0x120>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_ETH_MspInit+0x120>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_ETH_MspInit+0x120>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
 8001624:	2302      	movs	r3, #2
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162c:	2303      	movs	r3, #3
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001630:	230b      	movs	r3, #11
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
 8001634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4815      	ldr	r0, [pc, #84]	@ (8001690 <HAL_ETH_MspInit+0x124>)
 800163c:	f004 fbee 	bl	8005e1c <HAL_GPIO_Init>
 8001640:	2332      	movs	r3, #50	@ 0x32
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164c:	2303      	movs	r3, #3
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001650:	230b      	movs	r3, #11
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
 8001654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <HAL_ETH_MspInit+0x128>)
 800165c:	f004 fbde 	bl	8005e1c <HAL_GPIO_Init>
 8001660:	2386      	movs	r3, #134	@ 0x86
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
 8001664:	2302      	movs	r3, #2
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	2303      	movs	r3, #3
 800166e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001670:	230b      	movs	r3, #11
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
 8001674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	@ (8001698 <HAL_ETH_MspInit+0x12c>)
 800167c:	f004 fbce 	bl	8005e1c <HAL_GPIO_Init>
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	@ 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40028000 	.word	0x40028000
 800168c:	40023800 	.word	0x40023800
 8001690:	40021800 	.word	0x40021800
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000

0800169c <MX_FMC_Init>:
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <MX_FMC_Init+0x98>)
 80016b6:	4a20      	ldr	r2, [pc, #128]	@ (8001738 <MX_FMC_Init+0x9c>)
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <MX_FMC_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <MX_FMC_Init+0x98>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_FMC_Init+0x98>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <MX_FMC_Init+0x98>)
 80016ce:	2210      	movs	r2, #16
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_FMC_Init+0x98>)
 80016d4:	2240      	movs	r2, #64	@ 0x40
 80016d6:	615a      	str	r2, [r3, #20]
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_FMC_Init+0x98>)
 80016da:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_FMC_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <MX_FMC_Init+0x98>)
 80016e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016ec:	621a      	str	r2, [r3, #32]
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_FMC_Init+0x98>)
 80016f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_FMC_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80016fc:	2302      	movs	r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	2307      	movs	r3, #7
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	2304      	movs	r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	2307      	movs	r3, #7
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	2303      	movs	r3, #3
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_FMC_Init+0x98>)
 800171e:	f008 fad0 	bl	8009cc2 <HAL_SDRAM_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_FMC_Init+0x90>
 8001728:	f001 fc5e 	bl	8002fe8 <Error_Handler>
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000528 	.word	0x20000528
 8001738:	a0000140 	.word	0xa0000140

0800173c <HAL_FMC_MspInit>:
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_FMC_MspInit+0x100>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d16d      	bne.n	8001834 <HAL_FMC_MspInit+0xf8>
 8001758:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_FMC_MspInit+0x100>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <HAL_FMC_MspInit+0x104>)
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	4a37      	ldr	r2, [pc, #220]	@ (8001840 <HAL_FMC_MspInit+0x104>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6393      	str	r3, [r2, #56]	@ 0x38
 800176a:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_FMC_MspInit+0x104>)
 800176c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	2302      	movs	r3, #2
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	2303      	movs	r3, #3
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	230c      	movs	r3, #12
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	482c      	ldr	r0, [pc, #176]	@ (8001844 <HAL_FMC_MspInit+0x108>)
 8001792:	f004 fb43 	bl	8005e1c <HAL_GPIO_Init>
 8001796:	f248 1333 	movw	r3, #33075	@ 0x8133
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	2303      	movs	r3, #3
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	230c      	movs	r3, #12
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4825      	ldr	r0, [pc, #148]	@ (8001848 <HAL_FMC_MspInit+0x10c>)
 80017b2:	f004 fb33 	bl	8005e1c <HAL_GPIO_Init>
 80017b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	2302      	movs	r3, #2
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	2303      	movs	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	230c      	movs	r3, #12
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	481e      	ldr	r0, [pc, #120]	@ (800184c <HAL_FMC_MspInit+0x110>)
 80017d2:	f004 fb23 	bl	8005e1c <HAL_GPIO_Init>
 80017d6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	2303      	movs	r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	230c      	movs	r3, #12
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4817      	ldr	r0, [pc, #92]	@ (8001850 <HAL_FMC_MspInit+0x114>)
 80017f2:	f004 fb13 	bl	8005e1c <HAL_GPIO_Init>
 80017f6:	2328      	movs	r3, #40	@ 0x28
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	2302      	movs	r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	2303      	movs	r3, #3
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	230c      	movs	r3, #12
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4811      	ldr	r0, [pc, #68]	@ (8001854 <HAL_FMC_MspInit+0x118>)
 8001810:	f004 fb04 	bl	8005e1c <HAL_GPIO_Init>
 8001814:	2308      	movs	r3, #8
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	2302      	movs	r3, #2
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	2303      	movs	r3, #3
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	230c      	movs	r3, #12
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	480a      	ldr	r0, [pc, #40]	@ (8001858 <HAL_FMC_MspInit+0x11c>)
 800182e:	f004 faf5 	bl	8005e1c <HAL_GPIO_Init>
 8001832:	e000      	b.n	8001836 <HAL_FMC_MspInit+0xfa>
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000055c 	.word	0x2000055c
 8001840:	40023800 	.word	0x40023800
 8001844:	40021000 	.word	0x40021000
 8001848:	40021800 	.word	0x40021800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021400 	.word	0x40021400
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40020800 	.word	0x40020800

0800185c <HAL_SDRAM_MspInit>:
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	f7ff ff6a 	bl	800173c <HAL_FMC_MspInit>
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a07      	ldr	r2, [pc, #28]	@ (800189c <vApplicationGetIdleTaskMemory+0x2c>)
 8001880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2280      	movs	r2, #128	@ 0x80
 800188c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000568 	.word	0x20000568
 80018a0:	20000608 	.word	0x20000608

080018a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b08e      	sub	sp, #56	@ 0x38
 80018a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_FREERTOS_Init+0x6c>)
 80018ac:	f107 041c 	add.w	r4, r7, #28
 80018b0:	461d      	mov	r5, r3
 80018b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00c f857 	bl	800d978 <osThreadCreate>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a11      	ldr	r2, [pc, #68]	@ (8001914 <MX_FREERTOS_Init+0x70>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(gpsTask, L76_Task, osPriorityAboveNormal, 0, 2048);
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_FREERTOS_Init+0x74>)
 80018d2:	463c      	mov	r4, r7
 80018d4:	461d      	mov	r5, r3
 80018d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gpsTaskHandle = osThreadCreate(osThread(gpsTask), &huart6);
 80018e2:	463b      	mov	r3, r7
 80018e4:	490d      	ldr	r1, [pc, #52]	@ (800191c <MX_FREERTOS_Init+0x78>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00c f846 	bl	800d978 <osThreadCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001920 <MX_FREERTOS_Init+0x7c>)
 80018f0:	6013      	str	r3, [r2, #0]
  if (gpsTaskHandle == NULL) {
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <MX_FREERTOS_Init+0x7c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <MX_FREERTOS_Init+0x5e>
      printf("gpsTask creation FAILED\r\n");
 80018fa:	480a      	ldr	r0, [pc, #40]	@ (8001924 <MX_FREERTOS_Init+0x80>)
 80018fc:	f010 faa4 	bl	8011e48 <puts>
      printf("gpsTask created OK\r\n");
  }

  /* USER CODE END RTOS_THREADS */

}
 8001900:	e002      	b.n	8001908 <MX_FREERTOS_Init+0x64>
      printf("gpsTask created OK\r\n");
 8001902:	4809      	ldr	r0, [pc, #36]	@ (8001928 <MX_FREERTOS_Init+0x84>)
 8001904:	f010 faa0 	bl	8011e48 <puts>
}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	@ 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	08014be4 	.word	0x08014be4
 8001914:	20000564 	.word	0x20000564
 8001918:	08014c08 	.word	0x08014c08
 800191c:	20000fe8 	.word	0x20000fe8
 8001920:	20000560 	.word	0x20000560
 8001924:	08014ba8 	.word	0x08014ba8
 8001928:	08014bc4 	.word	0x08014bc4

0800192c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	L76_PrintExample();
 8001934:	f000 fa78 	bl	8001e28 <L76_PrintExample>
    osDelay(2000);
 8001938:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800193c:	f00c f868 	bl	800da10 <osDelay>
	L76_PrintExample();
 8001940:	bf00      	nop
 8001942:	e7f7      	b.n	8001934 <StartDefaultTask+0x8>

08001944 <MX_GPIO_Init>:
 8001944:	b580      	push	{r7, lr}
 8001946:	b090      	sub	sp, #64	@ 0x40
 8001948:	af00      	add	r7, sp, #0
 800194a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	4bb0      	ldr	r3, [pc, #704]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4aaf      	ldr	r2, [pc, #700]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4bad      	ldr	r3, [pc, #692]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001972:	4baa      	ldr	r3, [pc, #680]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4aa9      	ldr	r2, [pc, #676]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4ba7      	ldr	r3, [pc, #668]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	4ba4      	ldr	r3, [pc, #656]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4aa3      	ldr	r2, [pc, #652]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4ba1      	ldr	r3, [pc, #644]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	4b9e      	ldr	r3, [pc, #632]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a9d      	ldr	r2, [pc, #628]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b9b      	ldr	r3, [pc, #620]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4b98      	ldr	r3, [pc, #608]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a97      	ldr	r2, [pc, #604]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b95      	ldr	r3, [pc, #596]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4b92      	ldr	r3, [pc, #584]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a91      	ldr	r2, [pc, #580]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b8f      	ldr	r3, [pc, #572]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a8b      	ldr	r2, [pc, #556]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b89      	ldr	r3, [pc, #548]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4b86      	ldr	r3, [pc, #536]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a85      	ldr	r2, [pc, #532]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b7d      	ldr	r3, [pc, #500]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4b7a      	ldr	r3, [pc, #488]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a79      	ldr	r2, [pc, #484]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b77      	ldr	r3, [pc, #476]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4b74      	ldr	r3, [pc, #464]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a73      	ldr	r2, [pc, #460]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b71      	ldr	r3, [pc, #452]	@ (8001c1c <MX_GPIO_Init+0x2d8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	2120      	movs	r1, #32
 8001a66:	486e      	ldr	r0, [pc, #440]	@ (8001c20 <MX_GPIO_Init+0x2dc>)
 8001a68:	f004 fb9c 	bl	80061a4 <HAL_GPIO_WritePin>
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	210c      	movs	r1, #12
 8001a70:	486c      	ldr	r0, [pc, #432]	@ (8001c24 <MX_GPIO_Init+0x2e0>)
 8001a72:	f004 fb97 	bl	80061a4 <HAL_GPIO_WritePin>
 8001a76:	2201      	movs	r2, #1
 8001a78:	2108      	movs	r1, #8
 8001a7a:	486b      	ldr	r0, [pc, #428]	@ (8001c28 <MX_GPIO_Init+0x2e4>)
 8001a7c:	f004 fb92 	bl	80061a4 <HAL_GPIO_WritePin>
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a86:	4867      	ldr	r0, [pc, #412]	@ (8001c24 <MX_GPIO_Init+0x2e0>)
 8001a88:	f004 fb8c 	bl	80061a4 <HAL_GPIO_WritePin>
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a92:	4866      	ldr	r0, [pc, #408]	@ (8001c2c <MX_GPIO_Init+0x2e8>)
 8001a94:	f004 fb86 	bl	80061a4 <HAL_GPIO_WritePin>
 8001a98:	2200      	movs	r2, #0
 8001a9a:	21c8      	movs	r1, #200	@ 0xc8
 8001a9c:	4864      	ldr	r0, [pc, #400]	@ (8001c30 <MX_GPIO_Init+0x2ec>)
 8001a9e:	f004 fb81 	bl	80061a4 <HAL_GPIO_WritePin>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	485f      	ldr	r0, [pc, #380]	@ (8001c34 <MX_GPIO_Init+0x2f0>)
 8001ab6:	f004 f9b1 	bl	8005e1c <HAL_GPIO_Init>
 8001aba:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ac8:	2303      	movs	r3, #3
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001acc:	230a      	movs	r3, #10
 8001ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4858      	ldr	r0, [pc, #352]	@ (8001c38 <MX_GPIO_Init+0x2f4>)
 8001ad8:	f004 f9a0 	bl	8005e1c <HAL_GPIO_Init>
 8001adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	4852      	ldr	r0, [pc, #328]	@ (8001c3c <MX_GPIO_Init+0x2f8>)
 8001af2:	f004 f993 	bl	8005e1c <HAL_GPIO_Init>
 8001af6:	2340      	movs	r3, #64	@ 0x40
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001afa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4845      	ldr	r0, [pc, #276]	@ (8001c20 <MX_GPIO_Init+0x2dc>)
 8001b0c:	f004 f986 	bl	8005e1c <HAL_GPIO_Init>
 8001b10:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b16:	2302      	movs	r3, #2
 8001b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b1e:	2303      	movs	r3, #3
 8001b20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b22:	230a      	movs	r3, #10
 8001b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4844      	ldr	r0, [pc, #272]	@ (8001c40 <MX_GPIO_Init+0x2fc>)
 8001b2e:	f004 f975 	bl	8005e1c <HAL_GPIO_Init>
 8001b32:	2320      	movs	r3, #32
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b36:	2301      	movs	r3, #1
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4835      	ldr	r0, [pc, #212]	@ (8001c20 <MX_GPIO_Init+0x2dc>)
 8001b4a:	f004 f967 	bl	8005e1c <HAL_GPIO_Init>
 8001b4e:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b54:	2301      	movs	r3, #1
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b64:	4619      	mov	r1, r3
 8001b66:	482f      	ldr	r0, [pc, #188]	@ (8001c24 <MX_GPIO_Init+0x2e0>)
 8001b68:	f004 f958 	bl	8005e1c <HAL_GPIO_Init>
 8001b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b72:	2300      	movs	r3, #0
 8001b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4830      	ldr	r0, [pc, #192]	@ (8001c44 <MX_GPIO_Init+0x300>)
 8001b82:	f004 f94b 	bl	8005e1c <HAL_GPIO_Init>
 8001b86:	2308      	movs	r3, #8
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4822      	ldr	r0, [pc, #136]	@ (8001c28 <MX_GPIO_Init+0x2e4>)
 8001b9e:	f004 f93d 	bl	8005e1c <HAL_GPIO_Init>
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481a      	ldr	r0, [pc, #104]	@ (8001c20 <MX_GPIO_Init+0x2dc>)
 8001bb6:	f004 f931 	bl	8005e1c <HAL_GPIO_Init>
 8001bba:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4817      	ldr	r0, [pc, #92]	@ (8001c2c <MX_GPIO_Init+0x2e8>)
 8001bd0:	f004 f924 	bl	8005e1c <HAL_GPIO_Init>
 8001bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bda:	2301      	movs	r3, #1
 8001bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be2:	2300      	movs	r3, #0
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001be6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	480f      	ldr	r0, [pc, #60]	@ (8001c2c <MX_GPIO_Init+0x2e8>)
 8001bee:	f004 f915 	bl	8005e1c <HAL_GPIO_Init>
 8001bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bf8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c06:	4619      	mov	r1, r3
 8001c08:	4806      	ldr	r0, [pc, #24]	@ (8001c24 <MX_GPIO_Init+0x2e0>)
 8001c0a:	f004 f907 	bl	8005e1c <HAL_GPIO_Init>
 8001c0e:	2310      	movs	r3, #16
 8001c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c16:	2300      	movs	r3, #0
 8001c18:	e016      	b.n	8001c48 <MX_GPIO_Init+0x304>
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022800 	.word	0x40022800
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40022400 	.word	0x40022400
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020800 	.word	0x40020800
 8001c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c4e:	230a      	movs	r3, #10
 8001c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4820      	ldr	r0, [pc, #128]	@ (8001cdc <MX_GPIO_Init+0x398>)
 8001c5a:	f004 f8df 	bl	8005e1c <HAL_GPIO_Init>
 8001c5e:	23c8      	movs	r3, #200	@ 0xc8
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c62:	2301      	movs	r3, #1
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c72:	4619      	mov	r1, r3
 8001c74:	481a      	ldr	r0, [pc, #104]	@ (8001ce0 <MX_GPIO_Init+0x39c>)
 8001c76:	f004 f8d1 	bl	8005e1c <HAL_GPIO_Init>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c7e:	2302      	movs	r3, #2
 8001c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c86:	2303      	movs	r3, #3
 8001c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4813      	ldr	r0, [pc, #76]	@ (8001ce4 <MX_GPIO_Init+0x3a0>)
 8001c96:	f004 f8c1 	bl	8005e1c <HAL_GPIO_Init>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001caa:	4619      	mov	r1, r3
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <MX_GPIO_Init+0x39c>)
 8001cae:	f004 f8b5 	bl	8005e1c <HAL_GPIO_Init>
 8001cb2:	2328      	movs	r3, #40	@ 0x28
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_GPIO_Init+0x3a4>)
 8001cce:	f004 f8a5 	bl	8005e1c <HAL_GPIO_Init>
 8001cd2:	bf00      	nop
 8001cd4:	3740      	adds	r7, #64	@ 0x40
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021c00 	.word	0x40021c00
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020000 	.word	0x40020000

08001cec <L76_Init>:
static void L76_ParseDate(const char *datestr, uint8_t *day, uint8_t *month,
		uint16_t *year);

/* ========= Public API Functions ========= */

void L76_Init(UART_HandleTypeDef *huart) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	/* Save the UART handle for use in ISR and other functions */
	l76_huart = huart;
 8001cf4:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <L76_Init+0x68>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]

	/* Configure the standby pin: ensure the GPS is powered on (STDBY pin high) */
	HAL_GPIO_WritePin(L76_STDBY_GPIO_Port, L76_STDBY_Pin, GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	4816      	ldr	r0, [pc, #88]	@ (8001d58 <L76_Init+0x6c>)
 8001d00:	f004 fa50 	bl	80061a4 <HAL_GPIO_WritePin>
	/* Small delay to ensure the pin state is registered (if needed) */
	HAL_Delay(10);
 8001d04:	200a      	movs	r0, #10
 8001d06:	f002 fd19 	bl	800473c <HAL_Delay>

	/* Create a binary semaphore for line synchronization */
	l76_sem = xSemaphoreCreateBinary();
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f00c f915 	bl	800df3e <xQueueGenericCreate>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <L76_Init+0x70>)
 8001d18:	6013      	str	r3, [r2, #0]
		// Semaphore creation failed (should not happen under normal conditions)
		// In production, you might handle this with an error indicator.
	}

	/* Initialize the GPS data structure to all zeros */
	memset(&l76_data, 0, sizeof(L76_GPS_Data_t));
 8001d1a:	2230      	movs	r2, #48	@ 0x30
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4810      	ldr	r0, [pc, #64]	@ (8001d60 <L76_Init+0x74>)
 8001d20:	f010 f9a8 	bl	8012074 <memset>
	l76_data.fix_quality = 0;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <L76_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	751a      	strb	r2, [r3, #20]
	l76_readyBuf = -1;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <L76_Init+0x78>)
 8001d2c:	22ff      	movs	r2, #255	@ 0xff
 8001d2e:	701a      	strb	r2, [r3, #0]
	l76_rxIndex = 0;
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <L76_Init+0x7c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]
	l76_currentBuf = 0;
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <L76_Init+0x80>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]

	/* Start UART reception in interrupt mode for one byte at a time */
	//HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
	HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <L76_Init+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	490b      	ldr	r1, [pc, #44]	@ (8001d70 <L76_Init+0x84>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f009 faca 	bl	800b2de <HAL_UART_Receive_IT>

}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000808 	.word	0x20000808
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	2000080c 	.word	0x2000080c
 8001d60:	20000918 	.word	0x20000918
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000910 	.word	0x20000910
 8001d6c:	20000912 	.word	0x20000912
 8001d70:	20000913 	.word	0x20000913

08001d74 <L76_Task>:

void L76_Task(void const *argument) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	/* Initialize the GPS module (UART, pins, etc.) */
	UART_HandleTypeDef *uart = (UART_HandleTypeDef*) argument;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60bb      	str	r3, [r7, #8]
	L76_Init(uart);
 8001d80:	68b8      	ldr	r0, [r7, #8]
 8001d82:	f7ff ffb3 	bl	8001cec <L76_Init>

	const char *uart_name = "not uart6 !";
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <L76_Task+0x64>)
 8001d88:	60fb      	str	r3, [r7, #12]

	if (uart == &huart6)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <L76_Task+0x68>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <L76_Task+0x22>
		uart_name = "uart6";
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <L76_Task+0x6c>)
 8001d94:	60fb      	str	r3, [r7, #12]

	printf("L76_Task launched with UART: %s\r\n", uart_name);
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <L76_Task+0x70>)
 8001d9a:	f00f ffed 	bl	8011d78 <iprintf>
	// Alternatively, one can call L76_Init before creating the task and ignore this parameter.

	/* Continuously wait for and process NMEA sentences */
	for (;;) {
		/* Wait indefinitely for a NMEA sentence to be received (signaled by ISR) */
		if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE) {
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <L76_Task+0x74>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f04f 31ff 	mov.w	r1, #4294967295
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00c fc5a 	bl	800e660 <xQueueSemaphoreTake>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d1f5      	bne.n	8001d9e <L76_Task+0x2a>
			// A full NMEA sentence has been captured and is ready in one of the buffers.
			if (l76_readyBuf >= 0) {
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <L76_Task+0x78>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	dbf0      	blt.n	8001d9e <L76_Task+0x2a>
				/* Process the NMEA sentence in the ready buffer */
				L76_ProcessNMEA(l76_rxBuffer[l76_readyBuf]);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <L76_Task+0x78>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	01db      	lsls	r3, r3, #7
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <L76_Task+0x7c>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fa1b 	bl	8002204 <L76_ProcessNMEA>
				/* Mark buffer as processed (readyBuf will be set by ISR for next line) */
				l76_readyBuf = -1;
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <L76_Task+0x78>)
 8001dd0:	22ff      	movs	r2, #255	@ 0xff
 8001dd2:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE) {
 8001dd4:	e7e3      	b.n	8001d9e <L76_Task+0x2a>
 8001dd6:	bf00      	nop
 8001dd8:	08014c24 	.word	0x08014c24
 8001ddc:	20000fe8 	.word	0x20000fe8
 8001de0:	08014c30 	.word	0x08014c30
 8001de4:	08014c38 	.word	0x08014c38
 8001de8:	2000080c 	.word	0x2000080c
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000810 	.word	0x20000810

08001df4 <L76_GetData>:
		}
		// Loop back to wait for the next sentence
	}
}

void L76_GetData(L76_GPS_Data_t *data) {
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	/* Copy the latest GPS data in a critical section to ensure consistency */
	taskENTER_CRITICAL();
 8001dfc:	f00e f88e 	bl	800ff1c <vPortEnterCritical>
	*data = l76_data;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <L76_GetData+0x30>)
 8001e04:	461c      	mov	r4, r3
 8001e06:	4615      	mov	r5, r2
 8001e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	taskEXIT_CRITICAL();
 8001e18:	f00e f8b6 	bl	800ff88 <vPortExitCritical>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bdb0      	pop	{r4, r5, r7, pc}
 8001e24:	20000918 	.word	0x20000918

08001e28 <L76_PrintExample>:
		l76_currentBuf = 0;
		HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
	}
}

void L76_PrintExample(void) {
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2c:	ed2d 8b02 	vpush	{d8}
 8001e30:	b0eb      	sub	sp, #428	@ 0x1ac
 8001e32:	af16      	add	r7, sp, #88	@ 0x58
	L76_GPS_Data_t data;
	L76_GetData(&data);
 8001e34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ffdb 	bl	8001df4 <L76_GetData>

	char buf[256];

	if (data.fix_quality == 0) {
 8001e3e:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80af 	bne.w	8001fa6 <L76_PrintExample+0x17e>
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
				"UTC %02d:%02d:%05.2f, date %02d/%02d/%04d\r\n"
				"[GSV] Satellites in view: %d, Max SNR: %ddB\r\n",
				data.satellites, data.hours, data.minutes, data.seconds,
 8001e48:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e4c:	4698      	mov	r8, r3
				data.satellites, data.hours, data.minutes, data.seconds,
 8001e4e:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e52:	461c      	mov	r4, r3
				data.satellites, data.hours, data.minutes, data.seconds,
 8001e54:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e58:	461d      	mov	r5, r3
				data.satellites, data.hours, data.minutes, data.seconds,
 8001e5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb92 	bl	8000588 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
				data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 8001e68:	f897 1148 	ldrb.w	r1, [r7, #328]	@ 0x148
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e6c:	460e      	mov	r6, r1
				data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 8001e6e:	f897 1149 	ldrb.w	r1, [r7, #329]	@ 0x149
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e72:	61b9      	str	r1, [r7, #24]
				data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 8001e74:	f8b7 114a 	ldrh.w	r1, [r7, #330]	@ 0x14a
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 8001e78:	6179      	str	r1, [r7, #20]
 8001e7a:	497f      	ldr	r1, [pc, #508]	@ (8002078 <L76_PrintExample+0x250>)
 8001e7c:	7809      	ldrb	r1, [r1, #0]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	497e      	ldr	r1, [pc, #504]	@ (800207c <L76_PrintExample+0x254>)
 8001e82:	7809      	ldrb	r1, [r1, #0]
 8001e84:	f107 0020 	add.w	r0, r7, #32
 8001e88:	9108      	str	r1, [sp, #32]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	9107      	str	r1, [sp, #28]
 8001e8e:	6979      	ldr	r1, [r7, #20]
 8001e90:	9106      	str	r1, [sp, #24]
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	9105      	str	r1, [sp, #20]
 8001e96:	9604      	str	r6, [sp, #16]
 8001e98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e9c:	9501      	str	r5, [sp, #4]
 8001e9e:	9400      	str	r4, [sp, #0]
 8001ea0:	4643      	mov	r3, r8
 8001ea2:	4a77      	ldr	r2, [pc, #476]	@ (8002080 <L76_PrintExample+0x258>)
 8001ea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ea8:	f00f ffd6 	bl	8011e58 <sniprintf>

		if (gsv_sat_count == 0 && data.hours == 0 && data.minutes == 0) {
 8001eac:	4b72      	ldr	r3, [pc, #456]	@ (8002078 <L76_PrintExample+0x250>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d12c      	bne.n	8001f0e <L76_PrintExample+0xe6>
 8001eb4:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d128      	bne.n	8001f0e <L76_PrintExample+0xe6>
 8001ebc:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d124      	bne.n	8001f0e <L76_PrintExample+0xe6>
			strcat(buf, "[GPS] Cold start likely (no GNSS signal)\r\n");
 8001ec4:	f107 0320 	add.w	r3, r7, #32
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe f9f1 	bl	80002b0 <strlen>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8002084 <L76_PrintExample+0x25c>)
 8001eda:	4614      	mov	r4, r2
 8001edc:	469c      	mov	ip, r3
 8001ede:	f104 0e20 	add.w	lr, r4, #32
 8001ee2:	4665      	mov	r5, ip
 8001ee4:	4626      	mov	r6, r4
 8001ee6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ee8:	6028      	str	r0, [r5, #0]
 8001eea:	6069      	str	r1, [r5, #4]
 8001eec:	60aa      	str	r2, [r5, #8]
 8001eee:	60eb      	str	r3, [r5, #12]
 8001ef0:	3410      	adds	r4, #16
 8001ef2:	f10c 0c10 	add.w	ip, ip, #16
 8001ef6:	4574      	cmp	r4, lr
 8001ef8:	d1f3      	bne.n	8001ee2 <L76_PrintExample+0xba>
 8001efa:	4662      	mov	r2, ip
 8001efc:	4623      	mov	r3, r4
 8001efe:	cb03      	ldmia	r3!, {r0, r1}
 8001f00:	6010      	str	r0, [r2, #0]
 8001f02:	6051      	str	r1, [r2, #4]
 8001f04:	8819      	ldrh	r1, [r3, #0]
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	8111      	strh	r1, [r2, #8]
 8001f0a:	7293      	strb	r3, [r2, #10]
 8001f0c:	e0a5      	b.n	800205a <L76_PrintExample+0x232>
		} else if (gsv_sat_count < 4) {
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002078 <L76_PrintExample+0x250>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d824      	bhi.n	8001f60 <L76_PrintExample+0x138>
			strcat(buf, "[GPS] Acquiring satellites (weak signal)\r\n");
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f9c8 	bl	80002b0 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	f107 0320 	add.w	r3, r7, #32
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <L76_PrintExample+0x260>)
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	469c      	mov	ip, r3
 8001f30:	f104 0e20 	add.w	lr, r4, #32
 8001f34:	4665      	mov	r5, ip
 8001f36:	4626      	mov	r6, r4
 8001f38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f3a:	6028      	str	r0, [r5, #0]
 8001f3c:	6069      	str	r1, [r5, #4]
 8001f3e:	60aa      	str	r2, [r5, #8]
 8001f40:	60eb      	str	r3, [r5, #12]
 8001f42:	3410      	adds	r4, #16
 8001f44:	f10c 0c10 	add.w	ip, ip, #16
 8001f48:	4574      	cmp	r4, lr
 8001f4a:	d1f3      	bne.n	8001f34 <L76_PrintExample+0x10c>
 8001f4c:	4662      	mov	r2, ip
 8001f4e:	4623      	mov	r3, r4
 8001f50:	cb03      	ldmia	r3!, {r0, r1}
 8001f52:	6010      	str	r0, [r2, #0]
 8001f54:	6051      	str	r1, [r2, #4]
 8001f56:	8819      	ldrh	r1, [r3, #0]
 8001f58:	789b      	ldrb	r3, [r3, #2]
 8001f5a:	8111      	strh	r1, [r2, #8]
 8001f5c:	7293      	strb	r3, [r2, #10]
 8001f5e:	e07c      	b.n	800205a <L76_PrintExample+0x232>
		} else {
			strcat(buf, "[GPS] Satellites visible but not locked\r\n");
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe f9a3 	bl	80002b0 <strlen>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	4413      	add	r3, r2
 8001f74:	4a45      	ldr	r2, [pc, #276]	@ (800208c <L76_PrintExample+0x264>)
 8001f76:	4614      	mov	r4, r2
 8001f78:	469c      	mov	ip, r3
 8001f7a:	f104 0e20 	add.w	lr, r4, #32
 8001f7e:	4665      	mov	r5, ip
 8001f80:	4626      	mov	r6, r4
 8001f82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f84:	6028      	str	r0, [r5, #0]
 8001f86:	6069      	str	r1, [r5, #4]
 8001f88:	60aa      	str	r2, [r5, #8]
 8001f8a:	60eb      	str	r3, [r5, #12]
 8001f8c:	3410      	adds	r4, #16
 8001f8e:	f10c 0c10 	add.w	ip, ip, #16
 8001f92:	4574      	cmp	r4, lr
 8001f94:	d1f3      	bne.n	8001f7e <L76_PrintExample+0x156>
 8001f96:	4662      	mov	r2, ip
 8001f98:	4623      	mov	r3, r4
 8001f9a:	cb03      	ldmia	r3!, {r0, r1}
 8001f9c:	6010      	str	r0, [r2, #0]
 8001f9e:	6051      	str	r1, [r2, #4]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	8113      	strh	r3, [r2, #8]
 8001fa4:	e059      	b.n	800205a <L76_PrintExample+0x232>
		}
	} else {
		snprintf(buf, sizeof(buf),
 8001fa6:	e9d7 ab48 	ldrd	sl, fp, [r7, #288]	@ 0x120
 8001faa:	ed97 8b4a 	vldr	d8, [r7, #296]	@ 0x128
				"[GPS] FIX OK: Lat=%.5f, Lon=%.5f, Alt=%.1fm\r\n"
						"UTC=%02d:%02d:%05.2f, Date=%02d/%02d/%04d\r\n"
						"Speed=%.1f kt, Course=%.1f°, Satellites used=%d\r\n"
						"[GSV] Satellites in view: %d, Max SNR: %ddB\r\n",
				data.latitude, data.longitude, data.altitude, data.hours,
 8001fae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
		snprintf(buf, sizeof(buf),
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fae8 	bl	8000588 <__aeabi_f2d>
 8001fb8:	e9c7 0106 	strd	r0, r1, [r7, #24]
				data.latitude, data.longitude, data.altitude, data.hours,
 8001fbc:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
		snprintf(buf, sizeof(buf),
 8001fc0:	461e      	mov	r6, r3
				data.minutes, data.seconds, data.day, data.month, data.year,
 8001fc2:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
		snprintf(buf, sizeof(buf),
 8001fc6:	617b      	str	r3, [r7, #20]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8001fc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
		snprintf(buf, sizeof(buf),
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fadb 	bl	8000588 <__aeabi_f2d>
 8001fd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8001fd6:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
		snprintf(buf, sizeof(buf),
 8001fda:	613b      	str	r3, [r7, #16]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8001fdc:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
		snprintf(buf, sizeof(buf),
 8001fe0:	607b      	str	r3, [r7, #4]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8001fe2:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
		snprintf(buf, sizeof(buf),
 8001fe6:	603b      	str	r3, [r7, #0]
				data.speed, data.course, data.satellites, gsv_sat_count,
 8001fe8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
		snprintf(buf, sizeof(buf),
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe facb 	bl	8000588 <__aeabi_f2d>
 8001ff2:	4680      	mov	r8, r0
 8001ff4:	4689      	mov	r9, r1
				data.speed, data.course, data.satellites, gsv_sat_count,
 8001ff6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
		snprintf(buf, sizeof(buf),
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fac4 	bl	8000588 <__aeabi_f2d>
 8002000:	4604      	mov	r4, r0
 8002002:	460d      	mov	r5, r1
				data.speed, data.course, data.satellites, gsv_sat_count,
 8002004:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
		snprintf(buf, sizeof(buf),
 8002008:	4619      	mov	r1, r3
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <L76_PrintExample+0x250>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <L76_PrintExample+0x254>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	f107 0020 	add.w	r0, r7, #32
 8002018:	9314      	str	r3, [sp, #80]	@ 0x50
 800201a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800201c:	9112      	str	r1, [sp, #72]	@ 0x48
 800201e:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8002022:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	920c      	str	r2, [sp, #48]	@ 0x30
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	920a      	str	r2, [sp, #40]	@ 0x28
 8002032:	ed97 7b02 	vldr	d7, [r7, #8]
 8002036:	ed8d 7b08 	vstr	d7, [sp, #32]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	9307      	str	r3, [sp, #28]
 800203e:	9606      	str	r6, [sp, #24]
 8002040:	ed97 7b06 	vldr	d7, [r7, #24]
 8002044:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002048:	ed8d 8b02 	vstr	d8, [sp, #8]
 800204c:	e9cd ab00 	strd	sl, fp, [sp]
 8002050:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <L76_PrintExample+0x268>)
 8002052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002056:	f00f feff 	bl	8011e58 <sniprintf>
				gsv_max_snr);
	}

	printf("%s", buf);
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	4619      	mov	r1, r3
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <L76_PrintExample+0x26c>)
 8002062:	f00f fe89 	bl	8011d78 <iprintf>
}
 8002066:	bf00      	nop
 8002068:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 800206c:	46bd      	mov	sp, r7
 800206e:	ecbd 8b02 	vpop	{d8}
 8002072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002076:	bf00      	nop
 8002078:	20000948 	.word	0x20000948
 800207c:	20000949 	.word	0x20000949
 8002080:	08014c5c 	.word	0x08014c5c
 8002084:	08014cd8 	.word	0x08014cd8
 8002088:	08014d04 	.word	0x08014d04
 800208c:	08014d30 	.word	0x08014d30
 8002090:	08014d5c 	.word	0x08014d5c
 8002094:	08014e14 	.word	0x08014e14

08002098 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART RX Complete Callback (called from HAL IRQ handler when a byte is received).
 * @note This ISR appends incoming characters to a buffer and signals when a full line is received.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
	if (huart == l76_huart) {
 80020a4:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_UART_RxCpltCallback+0x14c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	f040 8095 	bne.w	80021da <HAL_UART_RxCpltCallback+0x142>
		char c = (char) l76_rxChar;
 80020b0:	4b4d      	ldr	r3, [pc, #308]	@ (80021e8 <HAL_UART_RxCpltCallback+0x150>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	73fb      	strb	r3, [r7, #15]
		//HAL_UART_Transmit(&huart1, (uint8_t*) &c, 1, 1);
		//printf("callback triggered");
		if (c == '$') {
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b24      	cmp	r3, #36	@ 0x24
 80020ba:	d11a      	bne.n	80020f2 <HAL_UART_RxCpltCallback+0x5a>
			/* Start of a new NMEA sentence */
			l76_rxIndex = 0;
 80020bc:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80020be:	2200      	movs	r2, #0
 80020c0:	801a      	strh	r2, [r3, #0]
			l76_currentBuf ^= 1;  // switch to the other buffer for new sentence
 80020c2:	4b4b      	ldr	r3, [pc, #300]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b48      	ldr	r3, [pc, #288]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 80020ce:	701a      	strb	r2, [r3, #0]
			l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 80020d0:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	b291      	uxth	r1, r2
 80020de:	4a43      	ldr	r2, [pc, #268]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80020e0:	8011      	strh	r1, [r2, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4a43      	ldr	r2, [pc, #268]	@ (80021f4 <HAL_UART_RxCpltCallback+0x15c>)
 80020e6:	01c3      	lsls	r3, r0, #7
 80020e8:	4413      	add	r3, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e06c      	b.n	80021cc <HAL_UART_RxCpltCallback+0x134>
		} else if (c == '\n') {
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b0a      	cmp	r3, #10
 80020f6:	d14e      	bne.n	8002196 <HAL_UART_RxCpltCallback+0xfe>
			/* End of NMEA sentence (LF detected). Terminate the string. */
			if (l76_rxIndex < L76_NMEA_MAX_LEN) {
 80020f8:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80020fe:	d80c      	bhi.n	800211a <HAL_UART_RxCpltCallback+0x82>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex] = '\0'; // null-terminate line
 8002100:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	4a39      	ldr	r2, [pc, #228]	@ (80021f4 <HAL_UART_RxCpltCallback+0x15c>)
 800210e:	01c3      	lsls	r3, r0, #7
 8002110:	4413      	add	r3, r2
 8002112:	440b      	add	r3, r1
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e007      	b.n	800212a <HAL_UART_RxCpltCallback+0x92>
			} else {
				l76_rxBuffer[l76_currentBuf][L76_NMEA_MAX_LEN - 1] = '\0';
 800211a:	4b35      	ldr	r3, [pc, #212]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	4a35      	ldr	r2, [pc, #212]	@ (80021f4 <HAL_UART_RxCpltCallback+0x15c>)
 8002120:	01db      	lsls	r3, r3, #7
 8002122:	4413      	add	r3, r2
 8002124:	337f      	adds	r3, #127	@ 0x7f
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
			}
			// Remove any trailing CR if present (overwrite with null terminator)
			if (l76_rxIndex > 0
 800212a:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d018      	beq.n	8002164 <HAL_UART_RxCpltCallback+0xcc>
					&& l76_rxBuffer[l76_currentBuf][l76_rxIndex - 1] == '\r') {
 8002132:	4b2f      	ldr	r3, [pc, #188]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	3b01      	subs	r3, #1
 800213e:	492d      	ldr	r1, [pc, #180]	@ (80021f4 <HAL_UART_RxCpltCallback+0x15c>)
 8002140:	01d2      	lsls	r2, r2, #7
 8002142:	440a      	add	r2, r1
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b0d      	cmp	r3, #13
 800214a:	d10b      	bne.n	8002164 <HAL_UART_RxCpltCallback+0xcc>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex - 1] = '\0';
 800214c:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	3b01      	subs	r3, #1
 8002158:	4926      	ldr	r1, [pc, #152]	@ (80021f4 <HAL_UART_RxCpltCallback+0x15c>)
 800215a:	01d2      	lsls	r2, r2, #7
 800215c:	440a      	add	r2, r1
 800215e:	4413      	add	r3, r2
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
			}
			/* The buffer l76_currentBuf now holds a complete sentence.
			 Signal the task that a line is ready in the OTHER buffer (the one just filled). */
			l76_readyBuf = l76_currentBuf;
 8002164:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b25a      	sxtb	r2, r3
 800216a:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_UART_RxCpltCallback+0x160>)
 800216c:	701a      	strb	r2, [r3, #0]
			// Actually, we've toggled at '$', so at this point l76_currentBuf is the buffer just filled.
			// We will toggle it next time a new '$' comes.
			// So here l76_readyBuf is set to currentBuf, which is the filled buffer.

			/* Give semaphore to unblock the task waiting for a new line */
			xSemaphoreGiveFromISR(l76_sem, &xHigherPriorityTaskWoken);
 800216e:	4b23      	ldr	r3, [pc, #140]	@ (80021fc <HAL_UART_RxCpltCallback+0x164>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f107 0208 	add.w	r2, r7, #8
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f00c f8f0 	bl	800e35e <xQueueGiveFromISR>
			/* Optionally, yield to the GPS task immediately if it has higher priority */
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d023      	beq.n	80021cc <HAL_UART_RxCpltCallback+0x134>
 8002184:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_UART_RxCpltCallback+0x168>)
 8002186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	e01a      	b.n	80021cc <HAL_UART_RxCpltCallback+0x134>
		} else if (c == '\r') {
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b0d      	cmp	r3, #13
 800219a:	d017      	beq.n	80021cc <HAL_UART_RxCpltCallback+0x134>
			/* Carriage return: skip it (will handle on '\n') */
			// Do nothing, just ignore the CR
		} else {
			/* Regular character, add to current buffer if space */
			if (l76_rxIndex < (L76_NMEA_MAX_LEN - 1)) {
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80021a2:	d810      	bhi.n	80021c6 <HAL_UART_RxCpltCallback+0x12e>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_UART_RxCpltCallback+0x158>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	b291      	uxth	r1, r2
 80021b2:	4a0e      	ldr	r2, [pc, #56]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80021b4:	8011      	strh	r1, [r2, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	4a0e      	ldr	r2, [pc, #56]	@ (80021f4 <HAL_UART_RxCpltCallback+0x15c>)
 80021ba:	01c3      	lsls	r3, r0, #7
 80021bc:	4413      	add	r3, r2
 80021be:	440b      	add	r3, r1
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e002      	b.n	80021cc <HAL_UART_RxCpltCallback+0x134>
			} else {
				/* Buffer overflow - sentence too long, reset index to avoid overflow.
				 (In practice, NMEA sentences should not exceed buffer length.) */
				l76_rxIndex = 0;
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_UART_RxCpltCallback+0x154>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
			}
		}
		/* Re-arm the UART receive interrupt for the next character */
		HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_UART_RxCpltCallback+0x14c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4905      	ldr	r1, [pc, #20]	@ (80021e8 <HAL_UART_RxCpltCallback+0x150>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f009 f882 	bl	800b2de <HAL_UART_Receive_IT>
	}
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000808 	.word	0x20000808
 80021e8:	20000913 	.word	0x20000913
 80021ec:	20000910 	.word	0x20000910
 80021f0:	20000912 	.word	0x20000912
 80021f4:	20000810 	.word	0x20000810
 80021f8:	20000000 	.word	0x20000000
 80021fc:	2000080c 	.word	0x2000080c
 8002200:	e000ed04 	.word	0xe000ed04

08002204 <L76_ProcessNMEA>:

/**
 * @brief Determine the type of NMEA sentence and parse accordingly.
 * @param nmea Pointer to the NMEA sentence string (null-terminated, starting with '$').
 */
static void L76_ProcessNMEA(char *nmea) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if (nmea == NULL || nmea[0] != '$') {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d07a      	beq.n	8002308 <L76_ProcessNMEA+0x104>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b24      	cmp	r3, #36	@ 0x24
 8002218:	d176      	bne.n	8002308 <L76_ProcessNMEA+0x104>
		return; // invalid sentence
	}

	// Remove any checksum if present by cutting off at '*'
	char *checksum_start = strchr(nmea, '*');
 800221a:	212a      	movs	r1, #42	@ 0x2a
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f00f ff31 	bl	8012084 <strchr>
 8002222:	60f8      	str	r0, [r7, #12]
	if (checksum_start) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <L76_ProcessNMEA+0x2c>
		*checksum_start = '\0'; // terminate string at '*' (discard checksum part)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
	}

	// Identify sentence type by the 3-letter identifier after '$xx' (talker ID)
	if (strncmp(nmea + 3, "GGA", 3) == 0) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3303      	adds	r3, #3
 8002234:	2203      	movs	r2, #3
 8002236:	4936      	ldr	r1, [pc, #216]	@ (8002310 <L76_ProcessNMEA+0x10c>)
 8002238:	4618      	mov	r0, r3
 800223a:	f00f ff30 	bl	801209e <strncmp>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <L76_ProcessNMEA+0x4a>
		L76_ParseGGA(nmea, &l76_data);
 8002244:	4933      	ldr	r1, [pc, #204]	@ (8002314 <L76_ProcessNMEA+0x110>)
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f874 	bl	8002334 <L76_ParseGGA>
 800224c:	e05d      	b.n	800230a <L76_ProcessNMEA+0x106>
	} else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3303      	adds	r3, #3
 8002252:	2203      	movs	r2, #3
 8002254:	4930      	ldr	r1, [pc, #192]	@ (8002318 <L76_ProcessNMEA+0x114>)
 8002256:	4618      	mov	r0, r3
 8002258:	f00f ff21 	bl	801209e <strncmp>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d104      	bne.n	800226c <L76_ProcessNMEA+0x68>
		L76_ParseRMC(nmea, &l76_data);
 8002262:	492c      	ldr	r1, [pc, #176]	@ (8002314 <L76_ProcessNMEA+0x110>)
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f925 	bl	80024b4 <L76_ParseRMC>
 800226a:	e04e      	b.n	800230a <L76_ProcessNMEA+0x106>
	} else if (strncmp(nmea, "$GPGSV", 6) == 0
 800226c:	2206      	movs	r2, #6
 800226e:	492b      	ldr	r1, [pc, #172]	@ (800231c <L76_ProcessNMEA+0x118>)
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f00f ff14 	bl	801209e <strncmp>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <L76_ProcessNMEA+0x88>
			|| strncmp(nmea, "$GLGSV", 6) == 0) {
 800227c:	2206      	movs	r2, #6
 800227e:	4928      	ldr	r1, [pc, #160]	@ (8002320 <L76_ProcessNMEA+0x11c>)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f00f ff0c 	bl	801209e <strncmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d13e      	bne.n	800230a <L76_ProcessNMEA+0x106>
		// Display raw GSV line
		printf("[RAW GSV] %s\r\n", nmea);
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4825      	ldr	r0, [pc, #148]	@ (8002324 <L76_ProcessNMEA+0x120>)
 8002290:	f00f fd72 	bl	8011d78 <iprintf>

		// Basic parsing to count satellites and max SNR
		char *token;
		uint8_t field = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	74fb      	strb	r3, [r7, #19]
		uint8_t sat_seen = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	74bb      	strb	r3, [r7, #18]
		uint8_t max_snr = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	747b      	strb	r3, [r7, #17]

		token = strtok(nmea, ",");
 80022a0:	4921      	ldr	r1, [pc, #132]	@ (8002328 <L76_ProcessNMEA+0x124>)
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f00f ff0e 	bl	80120c4 <strtok>
 80022a8:	6178      	str	r0, [r7, #20]
		while (token != NULL) {
 80022aa:	e023      	b.n	80022f4 <L76_ProcessNMEA+0xf0>
			field++;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	3301      	adds	r3, #1
 80022b0:	74fb      	strb	r3, [r7, #19]
			if (field == 4) {
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d104      	bne.n	80022c2 <L76_ProcessNMEA+0xbe>
				sat_seen = (uint8_t) atoi(token);  // total satellites in view
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f00e f94a 	bl	8010552 <atoi>
 80022be:	4603      	mov	r3, r0
 80022c0:	74bb      	strb	r3, [r7, #18]
			}
			if (field >= 8 && ((field - 8) % 4 == 0)) {
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d910      	bls.n	80022ea <L76_ProcessNMEA+0xe6>
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	3b08      	subs	r3, #8
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <L76_ProcessNMEA+0xe6>
				uint8_t snr = (uint8_t) atoi(token);
 80022d4:	6978      	ldr	r0, [r7, #20]
 80022d6:	f00e f93c 	bl	8010552 <atoi>
 80022da:	4603      	mov	r3, r0
 80022dc:	72fb      	strb	r3, [r7, #11]
				if (snr > max_snr)
 80022de:	7afa      	ldrb	r2, [r7, #11]
 80022e0:	7c7b      	ldrb	r3, [r7, #17]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d901      	bls.n	80022ea <L76_ProcessNMEA+0xe6>
					max_snr = snr;
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	747b      	strb	r3, [r7, #17]
			}
			token = strtok(NULL, ",");
 80022ea:	490f      	ldr	r1, [pc, #60]	@ (8002328 <L76_ProcessNMEA+0x124>)
 80022ec:	2000      	movs	r0, #0
 80022ee:	f00f fee9 	bl	80120c4 <strtok>
 80022f2:	6178      	str	r0, [r7, #20]
		while (token != NULL) {
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1d8      	bne.n	80022ac <L76_ProcessNMEA+0xa8>
		}

		// Update global GSV debug values
		gsv_sat_count = sat_seen;
 80022fa:	4a0c      	ldr	r2, [pc, #48]	@ (800232c <L76_ProcessNMEA+0x128>)
 80022fc:	7cbb      	ldrb	r3, [r7, #18]
 80022fe:	7013      	strb	r3, [r2, #0]
		gsv_max_snr = max_snr;
 8002300:	4a0b      	ldr	r2, [pc, #44]	@ (8002330 <L76_ProcessNMEA+0x12c>)
 8002302:	7c7b      	ldrb	r3, [r7, #17]
 8002304:	7013      	strb	r3, [r2, #0]
 8002306:	e000      	b.n	800230a <L76_ProcessNMEA+0x106>
		return; // invalid sentence
 8002308:	bf00      	nop
	}
}
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	08014e18 	.word	0x08014e18
 8002314:	20000918 	.word	0x20000918
 8002318:	08014e1c 	.word	0x08014e1c
 800231c:	08014e20 	.word	0x08014e20
 8002320:	08014e28 	.word	0x08014e28
 8002324:	08014e30 	.word	0x08014e30
 8002328:	08014e40 	.word	0x08014e40
 800232c:	20000948 	.word	0x20000948
 8002330:	20000949 	.word	0x20000949

08002334 <L76_ParseGGA>:
/**
 * @brief Parse a $GPGGA or $GNGGA NMEA sentence and update GPS data.
 * @param nmea The NMEA sentence string (null-terminated, without the checksum part).
 * @param data Pointer to GPS data structure to update.
 */
static void L76_ParseGGA(char *nmea, L76_GPS_Data_t *data) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	// Example GGA: $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,
	char *token;
	token = strtok(nmea, ",");       // token0: "$GPGGA" (with talker)
 800233e:	495b      	ldr	r1, [pc, #364]	@ (80024ac <L76_ParseGGA+0x178>)
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f00f febf 	bl	80120c4 <strtok>
 8002346:	61f8      	str	r0, [r7, #28]
	token = strtok(NULL, ",");       // token1: UTC time (hhmmss.sss)
 8002348:	4958      	ldr	r1, [pc, #352]	@ (80024ac <L76_ParseGGA+0x178>)
 800234a:	2000      	movs	r0, #0
 800234c:	f00f feba 	bl	80120c4 <strtok>
 8002350:	61f8      	str	r0, [r7, #28]
	if (token != NULL) {
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <L76_ParseGGA+0x3a>
		L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f103 0120 	add.w	r1, r3, #32
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3324      	adds	r3, #36	@ 0x24
 8002368:	69f8      	ldr	r0, [r7, #28]
 800236a:	f000 f9cd 	bl	8002708 <L76_ParseTime>
	}
	token = strtok(NULL, ",");       // token2: latitude (ddmm.mmmm)
 800236e:	494f      	ldr	r1, [pc, #316]	@ (80024ac <L76_ParseGGA+0x178>)
 8002370:	2000      	movs	r0, #0
 8002372:	f00f fea7 	bl	80120c4 <strtok>
 8002376:	61f8      	str	r0, [r7, #28]
	const char *lat_str = token;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	61bb      	str	r3, [r7, #24]
	token = strtok(NULL, ",");       // token3: N/S
 800237c:	494b      	ldr	r1, [pc, #300]	@ (80024ac <L76_ParseGGA+0x178>)
 800237e:	2000      	movs	r0, #0
 8002380:	f00f fea0 	bl	80120c4 <strtok>
 8002384:	61f8      	str	r0, [r7, #28]
	char lat_dir = (token != NULL ? token[0] : 0);
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <L76_ParseGGA+0x5e>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	e000      	b.n	8002394 <L76_ParseGGA+0x60>
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
	token = strtok(NULL, ",");       // token4: longitude (dddmm.mmmm)
 8002396:	4945      	ldr	r1, [pc, #276]	@ (80024ac <L76_ParseGGA+0x178>)
 8002398:	2000      	movs	r0, #0
 800239a:	f00f fe93 	bl	80120c4 <strtok>
 800239e:	61f8      	str	r0, [r7, #28]
	const char *lon_str = token;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	613b      	str	r3, [r7, #16]
	token = strtok(NULL, ",");       // token5: E/W
 80023a4:	4941      	ldr	r1, [pc, #260]	@ (80024ac <L76_ParseGGA+0x178>)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f00f fe8c 	bl	80120c4 <strtok>
 80023ac:	61f8      	str	r0, [r7, #28]
	char lon_dir = (token != NULL ? token[0] : 0);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <L76_ParseGGA+0x86>
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	e000      	b.n	80023bc <L76_ParseGGA+0x88>
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
	token = strtok(NULL, ","); // token6: Fix quality (0 = invalid, 1 = GPS fix, 2 = DGPS fix, ...)
 80023be:	493b      	ldr	r1, [pc, #236]	@ (80024ac <L76_ParseGGA+0x178>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	f00f fe7f 	bl	80120c4 <strtok>
 80023c6:	61f8      	str	r0, [r7, #28]
	data->fix_quality = (token != NULL ? (uint8_t) atoi(token) : 0);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <L76_ParseGGA+0xa6>
 80023ce:	69f8      	ldr	r0, [r7, #28]
 80023d0:	f00e f8bf 	bl	8010552 <atoi>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	e000      	b.n	80023dc <L76_ParseGGA+0xa8>
 80023da:	2200      	movs	r2, #0
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	751a      	strb	r2, [r3, #20]
	token = strtok(NULL, ",");       // token7: Number of satellites
 80023e0:	4932      	ldr	r1, [pc, #200]	@ (80024ac <L76_ParseGGA+0x178>)
 80023e2:	2000      	movs	r0, #0
 80023e4:	f00f fe6e 	bl	80120c4 <strtok>
 80023e8:	61f8      	str	r0, [r7, #28]
	data->satellites = (token != NULL ? (uint8_t) atoi(token) : 0);
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <L76_ParseGGA+0xc8>
 80023f0:	69f8      	ldr	r0, [r7, #28]
 80023f2:	f00e f8ae 	bl	8010552 <atoi>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	e000      	b.n	80023fe <L76_ParseGGA+0xca>
 80023fc:	2200      	movs	r2, #0
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	755a      	strb	r2, [r3, #21]
	token = strtok(NULL, ",");       // token8: HDOP
 8002402:	492a      	ldr	r1, [pc, #168]	@ (80024ac <L76_ParseGGA+0x178>)
 8002404:	2000      	movs	r0, #0
 8002406:	f00f fe5d 	bl	80120c4 <strtok>
 800240a:	61f8      	str	r0, [r7, #28]
	// We can parse HDOP if needed: float hdop = token ? strtof(token, NULL) : 0.0f;
	token = strtok(NULL, ",");       // token9: Altitude
 800240c:	4927      	ldr	r1, [pc, #156]	@ (80024ac <L76_ParseGGA+0x178>)
 800240e:	2000      	movs	r0, #0
 8002410:	f00f fe58 	bl	80120c4 <strtok>
 8002414:	61f8      	str	r0, [r7, #28]
	data->altitude = (token != NULL ? strtof(token, NULL) : 0.0f);
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <L76_ParseGGA+0xf6>
 800241c:	2100      	movs	r1, #0
 800241e:	69f8      	ldr	r0, [r7, #28]
 8002420:	f00e feaa 	bl	8011178 <strtof>
 8002424:	eef0 7a40 	vmov.f32	s15, s0
 8002428:	e001      	b.n	800242e <L76_ParseGGA+0xfa>
 800242a:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80024b0 <L76_ParseGGA+0x17c>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	edc3 7a04 	vstr	s15, [r3, #16]
	// token10: Altitude unit (usually "M")
	token = strtok(NULL, ",");
 8002434:	491d      	ldr	r1, [pc, #116]	@ (80024ac <L76_ParseGGA+0x178>)
 8002436:	2000      	movs	r0, #0
 8002438:	f00f fe44 	bl	80120c4 <strtok>
 800243c:	61f8      	str	r0, [r7, #28]
	// token11: Geoidal separation (not used)
	token = strtok(NULL, ",");
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <L76_ParseGGA+0x178>)
 8002440:	2000      	movs	r0, #0
 8002442:	f00f fe3f 	bl	80120c4 <strtok>
 8002446:	61f8      	str	r0, [r7, #28]
	// token12: Geoidal separation unit (usually "M")
	token = strtok(NULL, ",");
 8002448:	4918      	ldr	r1, [pc, #96]	@ (80024ac <L76_ParseGGA+0x178>)
 800244a:	2000      	movs	r0, #0
 800244c:	f00f fe3a 	bl	80120c4 <strtok>
 8002450:	61f8      	str	r0, [r7, #28]
	// token13: DGPS age (if any, not used)
	token = strtok(NULL, ",");
 8002452:	4916      	ldr	r1, [pc, #88]	@ (80024ac <L76_ParseGGA+0x178>)
 8002454:	2000      	movs	r0, #0
 8002456:	f00f fe35 	bl	80120c4 <strtok>
 800245a:	61f8      	str	r0, [r7, #28]
	// token14: DGPS reference station ID (if any, not used)
	// (Note: strtok already stopped at '*' if there was a checksum, since we cut it in ProcessNMEA)

	// Convert latitude and longitude to decimal degrees
	if (lat_str && lat_dir) {
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00e      	beq.n	8002480 <L76_ParseGGA+0x14c>
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <L76_ParseGGA+0x14c>
		data->latitude = L76_ConvertNMEADegrees(lat_str, lat_dir);
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	4619      	mov	r1, r3
 800246c:	69b8      	ldr	r0, [r7, #24]
 800246e:	f000 f8ed 	bl	800264c <L76_ConvertNMEADegrees>
 8002472:	eeb0 7a40 	vmov.f32	s14, s0
 8002476:	eef0 7a60 	vmov.f32	s15, s1
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	ed83 7b00 	vstr	d7, [r3]
	}
	if (lon_str && lon_dir) {
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00e      	beq.n	80024a4 <L76_ParseGGA+0x170>
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <L76_ParseGGA+0x170>
		data->longitude = L76_ConvertNMEADegrees(lon_str, lon_dir);
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	4619      	mov	r1, r3
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f000 f8db 	bl	800264c <L76_ConvertNMEADegrees>
 8002496:	eeb0 7a40 	vmov.f32	s14, s0
 800249a:	eef0 7a60 	vmov.f32	s15, s1
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	ed83 7b02 	vstr	d7, [r3, #8]
	}
	// No return value; data is updated in the provided structure
}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	08014e40 	.word	0x08014e40
 80024b0:	00000000 	.word	0x00000000

080024b4 <L76_ParseRMC>:
/**
 * @brief Parse a $GPRMC or $GNRMC NMEA sentence and update GPS data.
 * @param nmea The NMEA sentence string (null-terminated, without the checksum).
 * @param data Pointer to GPS data structure to update.
 */
static void L76_ParseRMC(char *nmea, L76_GPS_Data_t *data) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	// Example RMC: $GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,,,A
	char *token;
	token = strtok(nmea, ",");      // token0: "$GPRMC"
 80024be:	4961      	ldr	r1, [pc, #388]	@ (8002644 <L76_ParseRMC+0x190>)
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f00f fdff 	bl	80120c4 <strtok>
 80024c6:	61f8      	str	r0, [r7, #28]
	token = strtok(NULL, ",");      // token1: UTC time
 80024c8:	495e      	ldr	r1, [pc, #376]	@ (8002644 <L76_ParseRMC+0x190>)
 80024ca:	2000      	movs	r0, #0
 80024cc:	f00f fdfa 	bl	80120c4 <strtok>
 80024d0:	61f8      	str	r0, [r7, #28]
	if (token != NULL) {
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <L76_ParseRMC+0x3a>
		L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f103 0120 	add.w	r1, r3, #32
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	3324      	adds	r3, #36	@ 0x24
 80024e8:	69f8      	ldr	r0, [r7, #28]
 80024ea:	f000 f90d 	bl	8002708 <L76_ParseTime>
	}
	token = strtok(NULL, ",");      // token2: Status (A=active, V=void)
 80024ee:	4955      	ldr	r1, [pc, #340]	@ (8002644 <L76_ParseRMC+0x190>)
 80024f0:	2000      	movs	r0, #0
 80024f2:	f00f fde7 	bl	80120c4 <strtok>
 80024f6:	61f8      	str	r0, [r7, #28]
	char status = (token != NULL ? token[0] : 'V');
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <L76_ParseRMC+0x50>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	e000      	b.n	8002506 <L76_ParseRMC+0x52>
 8002504:	2356      	movs	r3, #86	@ 0x56
 8002506:	76fb      	strb	r3, [r7, #27]
	token = strtok(NULL, ",");      // token3: Latitude
 8002508:	494e      	ldr	r1, [pc, #312]	@ (8002644 <L76_ParseRMC+0x190>)
 800250a:	2000      	movs	r0, #0
 800250c:	f00f fdda 	bl	80120c4 <strtok>
 8002510:	61f8      	str	r0, [r7, #28]
	const char *lat_str = token;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	617b      	str	r3, [r7, #20]
	token = strtok(NULL, ",");      // token4: N/S
 8002516:	494b      	ldr	r1, [pc, #300]	@ (8002644 <L76_ParseRMC+0x190>)
 8002518:	2000      	movs	r0, #0
 800251a:	f00f fdd3 	bl	80120c4 <strtok>
 800251e:	61f8      	str	r0, [r7, #28]
	char lat_dir = (token != NULL ? token[0] : 0);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <L76_ParseRMC+0x78>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	e000      	b.n	800252e <L76_ParseRMC+0x7a>
 800252c:	2300      	movs	r3, #0
 800252e:	74fb      	strb	r3, [r7, #19]
	token = strtok(NULL, ",");      // token5: Longitude
 8002530:	4944      	ldr	r1, [pc, #272]	@ (8002644 <L76_ParseRMC+0x190>)
 8002532:	2000      	movs	r0, #0
 8002534:	f00f fdc6 	bl	80120c4 <strtok>
 8002538:	61f8      	str	r0, [r7, #28]
	const char *lon_str = token;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	60fb      	str	r3, [r7, #12]
	token = strtok(NULL, ",");      // token6: E/W
 800253e:	4941      	ldr	r1, [pc, #260]	@ (8002644 <L76_ParseRMC+0x190>)
 8002540:	2000      	movs	r0, #0
 8002542:	f00f fdbf 	bl	80120c4 <strtok>
 8002546:	61f8      	str	r0, [r7, #28]
	char lon_dir = (token != NULL ? token[0] : 0);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <L76_ParseRMC+0xa0>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	e000      	b.n	8002556 <L76_ParseRMC+0xa2>
 8002554:	2300      	movs	r3, #0
 8002556:	72fb      	strb	r3, [r7, #11]
	token = strtok(NULL, ",");      // token7: Speed in knots
 8002558:	493a      	ldr	r1, [pc, #232]	@ (8002644 <L76_ParseRMC+0x190>)
 800255a:	2000      	movs	r0, #0
 800255c:	f00f fdb2 	bl	80120c4 <strtok>
 8002560:	61f8      	str	r0, [r7, #28]
	data->speed = (token != NULL ? strtof(token, NULL) : 0.0f);
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <L76_ParseRMC+0xc2>
 8002568:	2100      	movs	r1, #0
 800256a:	69f8      	ldr	r0, [r7, #28]
 800256c:	f00e fe04 	bl	8011178 <strtof>
 8002570:	eef0 7a40 	vmov.f32	s15, s0
 8002574:	e001      	b.n	800257a <L76_ParseRMC+0xc6>
 8002576:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8002648 <L76_ParseRMC+0x194>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	edc3 7a06 	vstr	s15, [r3, #24]
	token = strtok(NULL, ",");      // token8: Course (track angle in degrees)
 8002580:	4930      	ldr	r1, [pc, #192]	@ (8002644 <L76_ParseRMC+0x190>)
 8002582:	2000      	movs	r0, #0
 8002584:	f00f fd9e 	bl	80120c4 <strtok>
 8002588:	61f8      	str	r0, [r7, #28]
	data->course = (token != NULL ? strtof(token, NULL) : 0.0f);
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <L76_ParseRMC+0xea>
 8002590:	2100      	movs	r1, #0
 8002592:	69f8      	ldr	r0, [r7, #28]
 8002594:	f00e fdf0 	bl	8011178 <strtof>
 8002598:	eef0 7a40 	vmov.f32	s15, s0
 800259c:	e001      	b.n	80025a2 <L76_ParseRMC+0xee>
 800259e:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8002648 <L76_ParseRMC+0x194>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	edc3 7a07 	vstr	s15, [r3, #28]
	token = strtok(NULL, ",");      // token9: Date (ddmmyy)
 80025a8:	4926      	ldr	r1, [pc, #152]	@ (8002644 <L76_ParseRMC+0x190>)
 80025aa:	2000      	movs	r0, #0
 80025ac:	f00f fd8a 	bl	80120c4 <strtok>
 80025b0:	61f8      	str	r0, [r7, #28]
	if (token != NULL) {
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <L76_ParseRMC+0x11a>
		L76_ParseDate(token, &data->day, &data->month, &data->year);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	332a      	adds	r3, #42	@ 0x2a
 80025c8:	69f8      	ldr	r0, [r7, #28]
 80025ca:	f000 f929 	bl	8002820 <L76_ParseDate>
	}
	// token10: Magnetic variation (optional, may be empty)
	token = strtok(NULL, ",");
 80025ce:	491d      	ldr	r1, [pc, #116]	@ (8002644 <L76_ParseRMC+0x190>)
 80025d0:	2000      	movs	r0, #0
 80025d2:	f00f fd77 	bl	80120c4 <strtok>
 80025d6:	61f8      	str	r0, [r7, #28]
	// token11: Mag var direction (E/W, optional)
	token = strtok(NULL, ",");
 80025d8:	491a      	ldr	r1, [pc, #104]	@ (8002644 <L76_ParseRMC+0x190>)
 80025da:	2000      	movs	r0, #0
 80025dc:	f00f fd72 	bl	80120c4 <strtok>
 80025e0:	61f8      	str	r0, [r7, #28]

	// Update latitude/longitude if available
	if (lat_str && lat_dir) {
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <L76_ParseRMC+0x152>
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <L76_ParseRMC+0x152>
		data->latitude = L76_ConvertNMEADegrees(lat_str, lat_dir);
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	4619      	mov	r1, r3
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f000 f82a 	bl	800264c <L76_ConvertNMEADegrees>
 80025f8:	eeb0 7a40 	vmov.f32	s14, s0
 80025fc:	eef0 7a60 	vmov.f32	s15, s1
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	ed83 7b00 	vstr	d7, [r3]
	}
	if (lon_str && lon_dir) {
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <L76_ParseRMC+0x176>
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <L76_ParseRMC+0x176>
		data->longitude = L76_ConvertNMEADegrees(lon_str, lon_dir);
 8002612:	7afb      	ldrb	r3, [r7, #11]
 8002614:	4619      	mov	r1, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f818 	bl	800264c <L76_ConvertNMEADegrees>
 800261c:	eeb0 7a40 	vmov.f32	s14, s0
 8002620:	eef0 7a60 	vmov.f32	s15, s1
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	ed83 7b02 	vstr	d7, [r3, #8]
	}
	// Update fix status based on Status field
	if (status == 'V') {
 800262a:	7efb      	ldrb	r3, [r7, #27]
 800262c:	2b56      	cmp	r3, #86	@ 0x56
 800262e:	d105      	bne.n	800263c <L76_ParseRMC+0x188>
		// 'V' = navigation receiver warning (no valid fix)
		data->fix_quality = 0;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2200      	movs	r2, #0
 8002634:	751a      	strb	r2, [r3, #20]
		data->satellites = 0;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	755a      	strb	r2, [r3, #21]
	}
}
 800263c:	bf00      	nop
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	08014e40 	.word	0x08014e40
 8002648:	00000000 	.word	0x00000000

0800264c <L76_ConvertNMEADegrees>:
 * @brief Convert an NMEA coordinate string (degrees and minutes) into decimal degrees.
 * @param raw The coordinate string in NMEA format (ddmm.mmmm or dddmm.mmmm).
 * @param dir The direction character ('N','S','E','W').
 * @return The coordinate in decimal degrees, with sign indicating hemisphere.
 */
static double L76_ConvertNMEADegrees(const char *raw, char dir) {
 800264c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002650:	b08a      	sub	sp, #40	@ 0x28
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
	// NMEA format: latitude: ddmm.mmmm, longitude: dddmm.mmmm
	// Convert to decimal degrees.
	double val = atof(raw);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f00d ff76 	bl	801054c <atof>
 8002660:	ed87 0b06 	vstr	d0, [r7, #24]
	int degrees = (int) (val / 100);         // extract whole degrees
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <L76_ConvertNMEADegrees+0xb4>)
 800266a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800266e:	f7fe f90d 	bl	800088c <__aeabi_ddiv>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fa8d 	bl	8000b98 <__aeabi_d2iz>
 800267e:	4603      	mov	r3, r0
 8002680:	617b      	str	r3, [r7, #20]
	double minutes = val - (degrees * 100); // extract minutes (including fractional part)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2264      	movs	r2, #100	@ 0x64
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff6a 	bl	8000564 <__aeabi_i2d>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002698:	f7fd fe16 	bl	80002c8 <__aeabi_dsub>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double dec_deg = (double) degrees + minutes / 60.0;
 80026a4:	6978      	ldr	r0, [r7, #20]
 80026a6:	f7fd ff5d 	bl	8000564 <__aeabi_i2d>
 80026aa:	4680      	mov	r8, r0
 80026ac:	4689      	mov	r9, r1
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <L76_ConvertNMEADegrees+0xb8>)
 80026b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b8:	f7fe f8e8 	bl	800088c <__aeabi_ddiv>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4640      	mov	r0, r8
 80026c2:	4649      	mov	r1, r9
 80026c4:	f7fd fe02 	bl	80002cc <__adddf3>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (dir == 'S' || dir == 'W') {
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	2b53      	cmp	r3, #83	@ 0x53
 80026d4:	d002      	beq.n	80026dc <L76_ConvertNMEADegrees+0x90>
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	2b57      	cmp	r3, #87	@ 0x57
 80026da:	d105      	bne.n	80026e8 <L76_ConvertNMEADegrees+0x9c>
		dec_deg = -dec_deg;
 80026dc:	6a3c      	ldr	r4, [r7, #32]
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80026e4:	e9c7 4508 	strd	r4, r5, [r7, #32]
	}
	return dec_deg;
 80026e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80026f0:	eeb0 0a47 	vmov.f32	s0, s14
 80026f4:	eef0 0a67 	vmov.f32	s1, s15
 80026f8:	3728      	adds	r7, #40	@ 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002700:	40590000 	.word	0x40590000
 8002704:	404e0000 	.word	0x404e0000

08002708 <L76_ParseTime>:
 * @param hour [out] Parsed hour.
 * @param min  [out] Parsed minute.
 * @param sec  [out] Parsed seconds (including fractional part).
 */
static void L76_ParseTime(const char *timestr, uint8_t *hour, uint8_t *min,
		float *sec) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
	if (strlen(timestr) < 6) {
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7fd fdca 	bl	80002b0 <strlen>
 800271c:	4603      	mov	r3, r0
 800271e:	2b05      	cmp	r3, #5
 8002720:	d80b      	bhi.n	800273a <L76_ParseTime+0x32>
		// Invalid time string
		*hour = *min = 0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	701a      	strb	r2, [r3, #0]
		*sec = 0.0f;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e06f      	b.n	800281a <L76_ParseTime+0x112>
		return;
	}
	// Parse hour, minute, second
	char buf[3] = { 0 };
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	2100      	movs	r1, #0
 8002740:	460a      	mov	r2, r1
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	460a      	mov	r2, r1
 8002746:	709a      	strb	r2, [r3, #2]
	buf[0] = timestr[0];
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	743b      	strb	r3, [r7, #16]
	buf[1] = timestr[1]; // HH
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3301      	adds	r3, #1
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	747b      	strb	r3, [r7, #17]
	*hour = (uint8_t) atoi(buf);
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f00d fef9 	bl	8010552 <atoi>
 8002760:	4603      	mov	r3, r0
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	701a      	strb	r2, [r3, #0]
	buf[0] = timestr[2];
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3302      	adds	r3, #2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	743b      	strb	r3, [r7, #16]
	buf[1] = timestr[3]; // MM
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3303      	adds	r3, #3
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	747b      	strb	r3, [r7, #17]
	*min = (uint8_t) atoi(buf);
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4618      	mov	r0, r3
 800277e:	f00d fee8 	bl	8010552 <atoi>
 8002782:	4603      	mov	r3, r0
 8002784:	b2da      	uxtb	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	701a      	strb	r2, [r3, #0]
	buf[0] = timestr[4];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3304      	adds	r3, #4
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	743b      	strb	r3, [r7, #16]
	buf[1] = timestr[5]; // SS
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3305      	adds	r3, #5
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	747b      	strb	r3, [r7, #17]
	uint8_t sec_int = (uint8_t) atoi(buf);
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f00d fed7 	bl	8010552 <atoi>
 80027a4:	4603      	mov	r3, r0
 80027a6:	77fb      	strb	r3, [r7, #31]
	float sec_frac = 0.0f;
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
	if (timestr[6] == '.') {
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3306      	adds	r3, #6
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80027b6:	d124      	bne.n	8002802 <L76_ParseTime+0xfa>
		// Fractional part present
		const char *frac_str = timestr + 7;  // part after the decimal point
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3307      	adds	r3, #7
 80027bc:	61bb      	str	r3, [r7, #24]
		if (*frac_str) {
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01d      	beq.n	8002802 <L76_ParseTime+0xfa>
			int frac_int = atoi(frac_str);
 80027c6:	69b8      	ldr	r0, [r7, #24]
 80027c8:	f00d fec3 	bl	8010552 <atoi>
 80027cc:	6178      	str	r0, [r7, #20]
			int frac_len = strlen(frac_str);
 80027ce:	69b8      	ldr	r0, [r7, #24]
 80027d0:	f7fd fd6e 	bl	80002b0 <strlen>
 80027d4:	4603      	mov	r3, r0
 80027d6:	623b      	str	r3, [r7, #32]
			sec_frac = (float) frac_int;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			// Divide by 10^frac_len to get the fractional seconds
			while (frac_len-- > 0) {
 80027e6:	e007      	b.n	80027f8 <L76_ParseTime+0xf0>
				sec_frac /= 10.0f;
 80027e8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80027ec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80027f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			while (frac_len-- > 0) {
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	623a      	str	r2, [r7, #32]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	dcf2      	bgt.n	80027e8 <L76_ParseTime+0xe0>
			}
		}
	}
	*sec = sec_int + sec_frac;
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	edc3 7a00 	vstr	s15, [r3]
}
 800281a:	3728      	adds	r7, #40	@ 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <L76_ParseDate>:
 * @param day   [out] Parsed day.
 * @param month [out] Parsed month.
 * @param year  [out] Parsed year (full year, e.g., 1994 or 2025).
 */
static void L76_ParseDate(const char *datestr, uint8_t *day, uint8_t *month,
		uint16_t *year) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
	if (strlen(datestr) != 6) {
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7fd fd3e 	bl	80002b0 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	2b06      	cmp	r3, #6
 8002838:	d00a      	beq.n	8002850 <L76_ParseDate+0x30>
		*day = *month = 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	701a      	strb	r2, [r3, #0]
		*year = 0;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	e048      	b.n	80028e2 <L76_ParseDate+0xc2>
		return;
	}
	char buf[3] = { 0 };
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2100      	movs	r1, #0
 8002856:	460a      	mov	r2, r1
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	460a      	mov	r2, r1
 800285c:	709a      	strb	r2, [r3, #2]
	buf[0] = datestr[0];
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	753b      	strb	r3, [r7, #20]
	buf[1] = datestr[1];
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3301      	adds	r3, #1
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	757b      	strb	r3, [r7, #21]
	*day = (uint8_t) atoi(buf);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4618      	mov	r0, r3
 8002872:	f00d fe6e 	bl	8010552 <atoi>
 8002876:	4603      	mov	r3, r0
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	701a      	strb	r2, [r3, #0]
	buf[0] = datestr[2];
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3302      	adds	r3, #2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	753b      	strb	r3, [r7, #20]
	buf[1] = datestr[3];
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3303      	adds	r3, #3
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	757b      	strb	r3, [r7, #21]
	*month = (uint8_t) atoi(buf);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4618      	mov	r0, r3
 8002894:	f00d fe5d 	bl	8010552 <atoi>
 8002898:	4603      	mov	r3, r0
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	701a      	strb	r2, [r3, #0]
	buf[0] = datestr[4];
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3304      	adds	r3, #4
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	753b      	strb	r3, [r7, #20]
	buf[1] = datestr[5];
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3305      	adds	r3, #5
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	757b      	strb	r3, [r7, #21]
	uint8_t yy = (uint8_t) atoi(buf);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00d fe4c 	bl	8010552 <atoi>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
	// NMEA year is two digits (00-99). Assume 2000-2099 for 00-99 up to 89, and 1900s for 90-99.
	if (yy < 90) {
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	2b59      	cmp	r3, #89	@ 0x59
 80028c2:	d807      	bhi.n	80028d4 <L76_ParseDate+0xb4>
		*year = 2000 + yy;
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	e006      	b.n	80028e2 <L76_ParseDate+0xc2>
	} else {
		*year = 1900 + yy;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80028dc:	b29a      	uxth	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	801a      	strh	r2, [r3, #0]
	}
}
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <MX_I2C1_Init>:
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <MX_I2C1_Init+0x74>)
 80028ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002960 <MX_I2C1_Init+0x78>)
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <MX_I2C1_Init+0x74>)
 80028f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002964 <MX_I2C1_Init+0x7c>)
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	4b18      	ldr	r3, [pc, #96]	@ (800295c <MX_I2C1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <MX_I2C1_Init+0x74>)
 8002900:	2201      	movs	r2, #1
 8002902:	60da      	str	r2, [r3, #12]
 8002904:	4b15      	ldr	r3, [pc, #84]	@ (800295c <MX_I2C1_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	4b14      	ldr	r3, [pc, #80]	@ (800295c <MX_I2C1_Init+0x74>)
 800290c:	2200      	movs	r2, #0
 800290e:	615a      	str	r2, [r3, #20]
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <MX_I2C1_Init+0x74>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
 8002916:	4b11      	ldr	r3, [pc, #68]	@ (800295c <MX_I2C1_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <MX_I2C1_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
 8002922:	480e      	ldr	r0, [pc, #56]	@ (800295c <MX_I2C1_Init+0x74>)
 8002924:	f003 fc58 	bl	80061d8 <HAL_I2C_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C1_Init+0x4a>
 800292e:	f000 fb5b 	bl	8002fe8 <Error_Handler>
 8002932:	2100      	movs	r1, #0
 8002934:	4809      	ldr	r0, [pc, #36]	@ (800295c <MX_I2C1_Init+0x74>)
 8002936:	f003 fceb 	bl	8006310 <HAL_I2CEx_ConfigAnalogFilter>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_I2C1_Init+0x5c>
 8002940:	f000 fb52 	bl	8002fe8 <Error_Handler>
 8002944:	2100      	movs	r1, #0
 8002946:	4805      	ldr	r0, [pc, #20]	@ (800295c <MX_I2C1_Init+0x74>)
 8002948:	f003 fd2d 	bl	80063a6 <HAL_I2CEx_ConfigDigitalFilter>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_I2C1_Init+0x6e>
 8002952:	f000 fb49 	bl	8002fe8 <Error_Handler>
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000094c 	.word	0x2000094c
 8002960:	40005400 	.word	0x40005400
 8002964:	00c0eaff 	.word	0x00c0eaff

08002968 <MX_I2C3_Init>:
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
 800296c:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <MX_I2C3_Init+0x74>)
 800296e:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <MX_I2C3_Init+0x78>)
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <MX_I2C3_Init+0x74>)
 8002974:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <MX_I2C3_Init+0x7c>)
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <MX_I2C3_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <MX_I2C3_Init+0x74>)
 8002980:	2201      	movs	r2, #1
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <MX_I2C3_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <MX_I2C3_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <MX_I2C3_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <MX_I2C3_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <MX_I2C3_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	480e      	ldr	r0, [pc, #56]	@ (80029dc <MX_I2C3_Init+0x74>)
 80029a4:	f003 fc18 	bl	80061d8 <HAL_I2C_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C3_Init+0x4a>
 80029ae:	f000 fb1b 	bl	8002fe8 <Error_Handler>
 80029b2:	2100      	movs	r1, #0
 80029b4:	4809      	ldr	r0, [pc, #36]	@ (80029dc <MX_I2C3_Init+0x74>)
 80029b6:	f003 fcab 	bl	8006310 <HAL_I2CEx_ConfigAnalogFilter>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_I2C3_Init+0x5c>
 80029c0:	f000 fb12 	bl	8002fe8 <Error_Handler>
 80029c4:	2100      	movs	r1, #0
 80029c6:	4805      	ldr	r0, [pc, #20]	@ (80029dc <MX_I2C3_Init+0x74>)
 80029c8:	f003 fced 	bl	80063a6 <HAL_I2CEx_ConfigDigitalFilter>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_I2C3_Init+0x6e>
 80029d2:	f000 fb09 	bl	8002fe8 <Error_Handler>
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200009a0 	.word	0x200009a0
 80029e0:	40005c00 	.word	0x40005c00
 80029e4:	00c0eaff 	.word	0x00c0eaff

080029e8 <HAL_I2C_MspInit>:
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0ac      	sub	sp, #176	@ 0xb0
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
 8002a00:	f107 0318 	add.w	r3, r7, #24
 8002a04:	2284      	movs	r2, #132	@ 0x84
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f00f fb33 	bl	8012074 <memset>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a44      	ldr	r2, [pc, #272]	@ (8002b24 <HAL_I2C_MspInit+0x13c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d13d      	bne.n	8002a94 <HAL_I2C_MspInit+0xac>
 8002a18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a22:	f107 0318 	add.w	r3, r7, #24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 fdfa 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_MspInit+0x4e>
 8002a32:	f000 fad9 	bl	8002fe8 <Error_Handler>
 8002a36:	4b3c      	ldr	r3, [pc, #240]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a56:	2312      	movs	r3, #18
 8002a58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a68:	2304      	movs	r3, #4
 8002a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a72:	4619      	mov	r1, r3
 8002a74:	482d      	ldr	r0, [pc, #180]	@ (8002b2c <HAL_I2C_MspInit+0x144>)
 8002a76:	f003 f9d1 	bl	8005e1c <HAL_GPIO_Init>
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002a80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a86:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	e042      	b.n	8002b1a <HAL_I2C_MspInit+0x132>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_I2C_MspInit+0x148>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d13d      	bne.n	8002b1a <HAL_I2C_MspInit+0x132>
 8002a9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002aaa:	f107 0318 	add.w	r3, r7, #24
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fdb6 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_MspInit+0xd6>
 8002aba:	f000 fa95 	bl	8002fe8 <Error_Handler>
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a19      	ldr	r2, [pc, #100]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ade:	2312      	movs	r3, #18
 8002ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002aea:	2303      	movs	r3, #3
 8002aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002af0:	2304      	movs	r3, #4
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002af6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002afa:	4619      	mov	r1, r3
 8002afc:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <HAL_I2C_MspInit+0x14c>)
 8002afe:	f003 f98d 	bl	8005e1c <HAL_GPIO_Init>
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002b08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_I2C_MspInit+0x140>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	bf00      	nop
 8002b1c:	37b0      	adds	r7, #176	@ 0xb0
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40005400 	.word	0x40005400
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40005c00 	.word	0x40005c00
 8002b34:	40021c00 	.word	0x40021c00

08002b38 <MX_LTDC_Init>:
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	@ 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2234      	movs	r2, #52	@ 0x34
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00f fa95 	bl	8012074 <memset>
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c38 <MX_LTDC_Init+0x100>)
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	4b38      	ldr	r3, [pc, #224]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	4b35      	ldr	r3, [pc, #212]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
 8002b68:	4b32      	ldr	r3, [pc, #200]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b6a:	2228      	movs	r2, #40	@ 0x28
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b70:	2209      	movs	r2, #9
 8002b72:	619a      	str	r2, [r3, #24]
 8002b74:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b76:	2235      	movs	r2, #53	@ 0x35
 8002b78:	61da      	str	r2, [r3, #28]
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b7c:	220b      	movs	r2, #11
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	4b2c      	ldr	r3, [pc, #176]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b82:	f240 2215 	movw	r2, #533	@ 0x215
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b88:	4b2a      	ldr	r3, [pc, #168]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b8a:	f240 121b 	movw	r2, #283	@ 0x11b
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b90:	4b28      	ldr	r3, [pc, #160]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b92:	f240 2235 	movw	r2, #565	@ 0x235
 8002b96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b98:	4b26      	ldr	r3, [pc, #152]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002b9a:	f240 121d 	movw	r2, #285	@ 0x11d
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba0:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002ba8:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002bb0:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8002bb8:	481e      	ldr	r0, [pc, #120]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002bba:	f003 fc40 	bl	800643e <HAL_LTDC_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_LTDC_Init+0x90>
 8002bc4:	f000 fa10 	bl	8002fe8 <Error_Handler>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	23ff      	movs	r3, #255	@ 0xff
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	2307      	movs	r3, #7
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bfe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4805      	ldr	r0, [pc, #20]	@ (8002c34 <MX_LTDC_Init+0xfc>)
 8002c1e:	f003 fd6d 	bl	80066fc <HAL_LTDC_ConfigLayer>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_LTDC_Init+0xf4>
 8002c28:	f000 f9de 	bl	8002fe8 <Error_Handler>
 8002c2c:	bf00      	nop
 8002c2e:	3738      	adds	r7, #56	@ 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200009f4 	.word	0x200009f4
 8002c38:	40016800 	.word	0x40016800

08002c3c <HAL_LTDC_MspInit>:
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	@ 0x38
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a55      	ldr	r2, [pc, #340]	@ (8002db0 <HAL_LTDC_MspInit+0x174>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	f040 80a3 	bne.w	8002da6 <HAL_LTDC_MspInit+0x16a>
 8002c60:	4b54      	ldr	r3, [pc, #336]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c64:	4a53      	ldr	r2, [pc, #332]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6c:	4b51      	ldr	r3, [pc, #324]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	4b4e      	ldr	r3, [pc, #312]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c7e:	f043 0310 	orr.w	r3, r3, #16
 8002c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c84:	4b4b      	ldr	r3, [pc, #300]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4b48      	ldr	r3, [pc, #288]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	4a47      	ldr	r2, [pc, #284]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9c:	4b45      	ldr	r3, [pc, #276]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4b42      	ldr	r3, [pc, #264]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	4a41      	ldr	r2, [pc, #260]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ccc:	4b39      	ldr	r3, [pc, #228]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4b36      	ldr	r3, [pc, #216]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4a35      	ldr	r2, [pc, #212]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce4:	4b33      	ldr	r3, [pc, #204]	@ (8002db4 <HAL_LTDC_MspInit+0x178>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d00:	230e      	movs	r3, #14
 8002d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d08:	4619      	mov	r1, r3
 8002d0a:	482b      	ldr	r0, [pc, #172]	@ (8002db8 <HAL_LTDC_MspInit+0x17c>)
 8002d0c:	f003 f886 	bl	8005e1c <HAL_GPIO_Init>
 8002d10:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	2302      	movs	r3, #2
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1e:	2300      	movs	r3, #0
 8002d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d22:	230e      	movs	r3, #14
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4823      	ldr	r0, [pc, #140]	@ (8002dbc <HAL_LTDC_MspInit+0x180>)
 8002d2e:	f003 f875 	bl	8005e1c <HAL_GPIO_Init>
 8002d32:	23f7      	movs	r3, #247	@ 0xf7
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d36:	2302      	movs	r3, #2
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3e:	2300      	movs	r3, #0
 8002d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d42:	230e      	movs	r3, #14
 8002d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	481c      	ldr	r0, [pc, #112]	@ (8002dc0 <HAL_LTDC_MspInit+0x184>)
 8002d4e:	f003 f865 	bl	8005e1c <HAL_GPIO_Init>
 8002d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d58:	2302      	movs	r3, #2
 8002d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d60:	2300      	movs	r3, #0
 8002d62:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d64:	2309      	movs	r3, #9
 8002d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4815      	ldr	r0, [pc, #84]	@ (8002dc4 <HAL_LTDC_MspInit+0x188>)
 8002d70:	f003 f854 	bl	8005e1c <HAL_GPIO_Init>
 8002d74:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	2300      	movs	r3, #0
 8002d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d86:	230e      	movs	r3, #14
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	480d      	ldr	r0, [pc, #52]	@ (8002dc8 <HAL_LTDC_MspInit+0x18c>)
 8002d92:	f003 f843 	bl	8005e1c <HAL_GPIO_Init>
 8002d96:	2200      	movs	r2, #0
 8002d98:	2105      	movs	r1, #5
 8002d9a:	2058      	movs	r0, #88	@ 0x58
 8002d9c:	f002 f842 	bl	8004e24 <HAL_NVIC_SetPriority>
 8002da0:	2058      	movs	r0, #88	@ 0x58
 8002da2:	f002 f85b 	bl	8004e5c <HAL_NVIC_EnableIRQ>
 8002da6:	bf00      	nop
 8002da8:	3738      	adds	r7, #56	@ 0x38
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40016800 	.word	0x40016800
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40022400 	.word	0x40022400
 8002dc0:	40022800 	.word	0x40022800
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40022000 	.word	0x40022000

08002dcc <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002dd4:	1d39      	adds	r1, r7, #4
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4803      	ldr	r0, [pc, #12]	@ (8002dec <__io_putchar+0x20>)
 8002dde:	f008 f9f5 	bl	800b1cc <HAL_UART_Transmit>
    return ch;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000f60 	.word	0x20000f60

08002df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002df4:	f001 fc75 	bl	80046e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df8:	f000 f840 	bl	8002e7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002dfc:	f000 f8b0 	bl	8002f60 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e00:	f7fe fda0 	bl	8001944 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002e04:	f7fe f92c 	bl	8001060 <MX_ADC3_Init>
  MX_CRC_Init();
 8002e08:	f7fe f9d6 	bl	80011b8 <MX_CRC_Init>
  MX_DCMI_Init();
 8002e0c:	f7fe fa16 	bl	800123c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8002e10:	f7fe fb06 	bl	8001420 <MX_DMA2D_Init>
  MX_ETH_Init();
 8002e14:	f7fe fb5c 	bl	80014d0 <MX_ETH_Init>
  MX_FMC_Init();
 8002e18:	f7fe fc40 	bl	800169c <MX_FMC_Init>
  MX_I2C1_Init();
 8002e1c:	f7ff fd64 	bl	80028e8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002e20:	f7ff fda2 	bl	8002968 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002e24:	f7ff fe88 	bl	8002b38 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8002e28:	f000 f8e4 	bl	8002ff4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002e2c:	f000 f99e 	bl	800316c <MX_RTC_Init>
  MX_SAI2_Init();
 8002e30:	f000 fa6e 	bl	8003310 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002e34:	f000 fb7e 	bl	8003534 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8002e38:	f000 fc00 	bl	800363c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002e3c:	f000 fc92 	bl	8003764 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002e40:	f000 feee 	bl	8003c20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e44:	f000 ff98 	bl	8003d78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e48:	f001 f80c 	bl	8003e64 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002e4c:	f001 f882 	bl	8003f54 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002e50:	f001 f8f8 	bl	8004044 <MX_TIM8_Init>
  MX_TIM12_Init();
 8002e54:	f001 f94a 	bl	80040ec <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002e58:	f001 faea 	bl	8004430 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002e5c:	f001 fb18 	bl	8004490 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002e60:	f00a fa92 	bl	800d388 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart6, &rx, 1);
//  const char *msg = "STM32 OK\r\n";
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  printf("stm32 started.\r\n");
 8002e64:	4804      	ldr	r0, [pc, #16]	@ (8002e78 <main+0x88>)
 8002e66:	f00e ffef 	bl	8011e48 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002e6a:	f7fe fd1b 	bl	80018a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002e6e:	f00a fd60 	bl	800d932 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e72:	bf00      	nop
 8002e74:	e7fd      	b.n	8002e72 <main+0x82>
 8002e76:	bf00      	nop
 8002e78:	08014e44 	.word	0x08014e44

08002e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b094      	sub	sp, #80	@ 0x50
 8002e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e82:	f107 0320 	add.w	r3, r7, #32
 8002e86:	2230      	movs	r2, #48	@ 0x30
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f00f f8f2 	bl	8012074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ea0:	f003 fde0 	bl	8006a64 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f58 <SystemClock_Config+0xdc>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f58 <SystemClock_Config+0xdc>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb0:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <SystemClock_Config+0xdc>)
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ebc:	4b27      	ldr	r3, [pc, #156]	@ (8002f5c <SystemClock_Config+0xe0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	@ (8002f5c <SystemClock_Config+0xe0>)
 8002ec2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <SystemClock_Config+0xe0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ed4:	2309      	movs	r3, #9
 8002ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ee6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002eec:	2319      	movs	r3, #25
 8002eee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002ef0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002efa:	2309      	movs	r3, #9
 8002efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efe:	f107 0320 	add.w	r3, r7, #32
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fed0 	bl	8006ca8 <HAL_RCC_OscConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f0e:	f000 f86b 	bl	8002fe8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f12:	f003 fdb7 	bl	8006a84 <HAL_PWREx_EnableOverDrive>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f1c:	f000 f864 	bl	8002fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f20:	230f      	movs	r3, #15
 8002f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f24:	2302      	movs	r3, #2
 8002f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	2106      	movs	r1, #6
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 f956 	bl	80071f0 <HAL_RCC_ClockConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002f4a:	f000 f84d 	bl	8002fe8 <Error_Handler>
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3750      	adds	r7, #80	@ 0x50
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000

08002f60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0a2      	sub	sp, #136	@ 0x88
 8002f64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2284      	movs	r2, #132	@ 0x84
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00f f881 	bl	8012074 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8002f72:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <PeriphCommonClock_Config+0x60>)
 8002f74:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002f76:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002f7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002f7c:	2305      	movs	r3, #5
 8002f7e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002f80:	2302      	movs	r3, #2
 8002f82:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002f84:	2303      	movs	r3, #3
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002f8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f90:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8002f92:	2300      	movs	r3, #0
 8002f94:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002f96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 fb3a 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002fb2:	f000 f819 	bl	8002fe8 <Error_Handler>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3788      	adds	r7, #136	@ 0x88
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	00b00008 	.word	0x00b00008

08002fc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002fd6:	f001 fb91 	bl	80046fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40001000 	.word	0x40001000

08002fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fec:	b672      	cpsid	i
}
 8002fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <Error_Handler+0x8>

08002ff4 <MX_QUADSPI_Init>:
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8002ffa:	4a13      	ldr	r2, [pc, #76]	@ (8003048 <MX_QUADSPI_Init+0x54>)
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003000:	2201      	movs	r2, #1
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	4b0f      	ldr	r3, [pc, #60]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003006:	2204      	movs	r2, #4
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	4b0e      	ldr	r3, [pc, #56]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 800300c:	2210      	movs	r2, #16
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003012:	2218      	movs	r2, #24
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003018:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800301c:	615a      	str	r2, [r3, #20]
 800301e:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
 8003024:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
 8003030:	4804      	ldr	r0, [pc, #16]	@ (8003044 <MX_QUADSPI_Init+0x50>)
 8003032:	f003 fd77 	bl	8006b24 <HAL_QSPI_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_QUADSPI_Init+0x4c>
 800303c:	f7ff ffd4 	bl	8002fe8 <Error_Handler>
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000a9c 	.word	0x20000a9c
 8003048:	a0001000 	.word	0xa0001000

0800304c <HAL_QSPI_MspInit>:
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	@ 0x30
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3b      	ldr	r2, [pc, #236]	@ (8003158 <HAL_QSPI_MspInit+0x10c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d170      	bne.n	8003150 <HAL_QSPI_MspInit+0x104>
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	4a3a      	ldr	r2, [pc, #232]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6393      	str	r3, [r2, #56]	@ 0x38
 800307a:	4b38      	ldr	r3, [pc, #224]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4b35      	ldr	r3, [pc, #212]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	4a34      	ldr	r2, [pc, #208]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 800308c:	f043 0310 	orr.w	r3, r3, #16
 8003090:	6313      	str	r3, [r2, #48]	@ 0x30
 8003092:	4b32      	ldr	r3, [pc, #200]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a2e      	ldr	r2, [pc, #184]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b2c      	ldr	r3, [pc, #176]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4b29      	ldr	r3, [pc, #164]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	4a28      	ldr	r2, [pc, #160]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c2:	4b26      	ldr	r3, [pc, #152]	@ (800315c <HAL_QSPI_MspInit+0x110>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2304      	movs	r3, #4
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	2302      	movs	r3, #2
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	2303      	movs	r3, #3
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030de:	2309      	movs	r3, #9
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	481d      	ldr	r0, [pc, #116]	@ (8003160 <HAL_QSPI_MspInit+0x114>)
 80030ea:	f002 fe97 	bl	8005e1c <HAL_GPIO_Init>
 80030ee:	2340      	movs	r3, #64	@ 0x40
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	2302      	movs	r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	2303      	movs	r3, #3
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fe:	230a      	movs	r3, #10
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	4619      	mov	r1, r3
 8003108:	4816      	ldr	r0, [pc, #88]	@ (8003164 <HAL_QSPI_MspInit+0x118>)
 800310a:	f002 fe87 	bl	8005e1c <HAL_GPIO_Init>
 800310e:	2304      	movs	r3, #4
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	2302      	movs	r3, #2
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
 800311a:	2303      	movs	r3, #3
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800311e:	2309      	movs	r3, #9
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4619      	mov	r1, r3
 8003128:	480e      	ldr	r0, [pc, #56]	@ (8003164 <HAL_QSPI_MspInit+0x118>)
 800312a:	f002 fe77 	bl	8005e1c <HAL_GPIO_Init>
 800312e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	2302      	movs	r3, #2
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
 800313c:	2303      	movs	r3, #3
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003140:	2309      	movs	r3, #9
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	4807      	ldr	r0, [pc, #28]	@ (8003168 <HAL_QSPI_MspInit+0x11c>)
 800314c:	f002 fe66 	bl	8005e1c <HAL_GPIO_Init>
 8003150:	bf00      	nop
 8003152:	3730      	adds	r7, #48	@ 0x30
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	a0001000 	.word	0xa0001000
 800315c:	40023800 	.word	0x40023800
 8003160:	40021000 	.word	0x40021000
 8003164:	40020400 	.word	0x40020400
 8003168:	40020c00 	.word	0x40020c00

0800316c <MX_RTC_Init>:
 800316c:	b580      	push	{r7, lr}
 800316e:	b090      	sub	sp, #64	@ 0x40
 8003170:	af00      	add	r7, sp, #0
 8003172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	611a      	str	r2, [r3, #16]
 8003182:	2300      	movs	r3, #0
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003186:	463b      	mov	r3, r7
 8003188:	2228      	movs	r2, #40	@ 0x28
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f00e ff71 	bl	8012074 <memset>
 8003192:	4b46      	ldr	r3, [pc, #280]	@ (80032ac <MX_RTC_Init+0x140>)
 8003194:	4a46      	ldr	r2, [pc, #280]	@ (80032b0 <MX_RTC_Init+0x144>)
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <MX_RTC_Init+0x140>)
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <MX_RTC_Init+0x140>)
 80031a0:	227f      	movs	r2, #127	@ 0x7f
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	4b41      	ldr	r3, [pc, #260]	@ (80032ac <MX_RTC_Init+0x140>)
 80031a6:	22ff      	movs	r2, #255	@ 0xff
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <MX_RTC_Init+0x140>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
 80031b0:	4b3e      	ldr	r3, [pc, #248]	@ (80032ac <MX_RTC_Init+0x140>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <MX_RTC_Init+0x140>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
 80031bc:	483b      	ldr	r0, [pc, #236]	@ (80032ac <MX_RTC_Init+0x140>)
 80031be:	f004 ff5f 	bl	8008080 <HAL_RTC_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_RTC_Init+0x60>
 80031c8:	f7ff ff0e 	bl	8002fe8 <Error_Handler>
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80031de:	2300      	movs	r3, #0
 80031e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031e2:	2300      	movs	r3, #0
 80031e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031ea:	2201      	movs	r2, #1
 80031ec:	4619      	mov	r1, r3
 80031ee:	482f      	ldr	r0, [pc, #188]	@ (80032ac <MX_RTC_Init+0x140>)
 80031f0:	f004 ffc8 	bl	8008184 <HAL_RTC_SetTime>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_RTC_Init+0x92>
 80031fa:	f7ff fef5 	bl	8002fe8 <Error_Handler>
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8003204:	2301      	movs	r3, #1
 8003206:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800320a:	2301      	movs	r3, #1
 800320c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003210:	2300      	movs	r3, #0
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800321a:	2201      	movs	r2, #1
 800321c:	4619      	mov	r1, r3
 800321e:	4823      	ldr	r0, [pc, #140]	@ (80032ac <MX_RTC_Init+0x140>)
 8003220:	f005 f84a 	bl	80082b8 <HAL_RTC_SetDate>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_RTC_Init+0xc2>
 800322a:	f7ff fedd 	bl	8002fe8 <Error_Handler>
 800322e:	2300      	movs	r3, #0
 8003230:	703b      	strb	r3, [r7, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	707b      	strb	r3, [r7, #1]
 8003236:	2300      	movs	r3, #0
 8003238:	70bb      	strb	r3, [r7, #2]
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3020 	strb.w	r3, [r7, #32]
 8003258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
 800325e:	463b      	mov	r3, r7
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	4811      	ldr	r0, [pc, #68]	@ (80032ac <MX_RTC_Init+0x140>)
 8003266:	f005 f8ab 	bl	80083c0 <HAL_RTC_SetAlarm>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_RTC_Init+0x108>
 8003270:	f7ff feba 	bl	8002fe8 <Error_Handler>
 8003274:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
 800327a:	463b      	mov	r3, r7
 800327c:	2201      	movs	r2, #1
 800327e:	4619      	mov	r1, r3
 8003280:	480a      	ldr	r0, [pc, #40]	@ (80032ac <MX_RTC_Init+0x140>)
 8003282:	f005 f89d 	bl	80083c0 <HAL_RTC_SetAlarm>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_RTC_Init+0x124>
 800328c:	f7ff feac 	bl	8002fe8 <Error_Handler>
 8003290:	2202      	movs	r2, #2
 8003292:	2100      	movs	r1, #0
 8003294:	4805      	ldr	r0, [pc, #20]	@ (80032ac <MX_RTC_Init+0x140>)
 8003296:	f005 fa5d 	bl	8008754 <HAL_RTCEx_SetTimeStamp>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_RTC_Init+0x138>
 80032a0:	f7ff fea2 	bl	8002fe8 <Error_Handler>
 80032a4:	bf00      	nop
 80032a6:	3740      	adds	r7, #64	@ 0x40
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000ae8 	.word	0x20000ae8
 80032b0:	40002800 	.word	0x40002800

080032b4 <HAL_RTC_MspInit>:
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0a4      	sub	sp, #144	@ 0x90
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	2284      	movs	r2, #132	@ 0x84
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00e fed5 	bl	8012074 <memset>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003308 <HAL_RTC_MspInit+0x54>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d114      	bne.n	80032fe <HAL_RTC_MspInit+0x4a>
 80032d4:	2320      	movs	r3, #32
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 f99c 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RTC_MspInit+0x3e>
 80032ee:	f7ff fe7b 	bl	8002fe8 <Error_Handler>
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RTC_MspInit+0x58>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	4a05      	ldr	r2, [pc, #20]	@ (800330c <HAL_RTC_MspInit+0x58>)
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fe:	bf00      	nop
 8003300:	3790      	adds	r7, #144	@ 0x90
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40002800 	.word	0x40002800
 800330c:	40023800 	.word	0x40023800

08003310 <MX_SAI2_Init>:
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
 8003314:	4b4d      	ldr	r3, [pc, #308]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003316:	4a4e      	ldr	r2, [pc, #312]	@ (8003450 <MX_SAI2_Init+0x140>)
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b4c      	ldr	r3, [pc, #304]	@ (800344c <MX_SAI2_Init+0x13c>)
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003320:	4b4a      	ldr	r3, [pc, #296]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	4b49      	ldr	r3, [pc, #292]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003328:	2240      	movs	r2, #64	@ 0x40
 800332a:	635a      	str	r2, [r3, #52]	@ 0x34
 800332c:	4b47      	ldr	r3, [pc, #284]	@ (800344c <MX_SAI2_Init+0x13c>)
 800332e:	2200      	movs	r2, #0
 8003330:	639a      	str	r2, [r3, #56]	@ 0x38
 8003332:	4b46      	ldr	r3, [pc, #280]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003334:	2200      	movs	r2, #0
 8003336:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003338:	4b44      	ldr	r3, [pc, #272]	@ (800344c <MX_SAI2_Init+0x13c>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	4b43      	ldr	r3, [pc, #268]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	4b41      	ldr	r3, [pc, #260]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
 800334a:	4b40      	ldr	r3, [pc, #256]	@ (800344c <MX_SAI2_Init+0x13c>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
 8003350:	4b3e      	ldr	r3, [pc, #248]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003352:	4a40      	ldr	r2, [pc, #256]	@ (8003454 <MX_SAI2_Init+0x144>)
 8003354:	61da      	str	r2, [r3, #28]
 8003356:	4b3d      	ldr	r3, [pc, #244]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <MX_SAI2_Init+0x13c>)
 800335e:	2200      	movs	r2, #0
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
 8003362:	4b3a      	ldr	r3, [pc, #232]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003364:	2200      	movs	r2, #0
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
 8003368:	4b38      	ldr	r3, [pc, #224]	@ (800344c <MX_SAI2_Init+0x13c>)
 800336a:	2200      	movs	r2, #0
 800336c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800336e:	4b37      	ldr	r3, [pc, #220]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003370:	2208      	movs	r2, #8
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
 8003374:	4b35      	ldr	r3, [pc, #212]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003376:	2201      	movs	r2, #1
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
 800337a:	4b34      	ldr	r3, [pc, #208]	@ (800344c <MX_SAI2_Init+0x13c>)
 800337c:	2200      	movs	r2, #0
 800337e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003380:	4b32      	ldr	r3, [pc, #200]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003382:	2200      	movs	r2, #0
 8003384:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003386:	4b31      	ldr	r3, [pc, #196]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003388:	2200      	movs	r2, #0
 800338a:	651a      	str	r2, [r3, #80]	@ 0x50
 800338c:	4b2f      	ldr	r3, [pc, #188]	@ (800344c <MX_SAI2_Init+0x13c>)
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	@ 0x54
 8003392:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <MX_SAI2_Init+0x13c>)
 8003394:	2200      	movs	r2, #0
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
 8003398:	4b2c      	ldr	r3, [pc, #176]	@ (800344c <MX_SAI2_Init+0x13c>)
 800339a:	2201      	movs	r2, #1
 800339c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800339e:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <MX_SAI2_Init+0x13c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	661a      	str	r2, [r3, #96]	@ 0x60
 80033a4:	4829      	ldr	r0, [pc, #164]	@ (800344c <MX_SAI2_Init+0x13c>)
 80033a6:	f005 fa3d 	bl	8008824 <HAL_SAI_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_SAI2_Init+0xa4>
 80033b0:	f7ff fe1a 	bl	8002fe8 <Error_Handler>
 80033b4:	4b28      	ldr	r3, [pc, #160]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033b6:	4a29      	ldr	r2, [pc, #164]	@ (800345c <MX_SAI2_Init+0x14c>)
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	4b27      	ldr	r3, [pc, #156]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c0:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033c2:	2203      	movs	r2, #3
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80033cc:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80033d2:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033da:	2201      	movs	r2, #1
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
 80033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80033fc:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <MX_SAI2_Init+0x148>)
 80033fe:	2200      	movs	r2, #0
 8003400:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <MX_SAI2_Init+0x148>)
 8003404:	2208      	movs	r2, #8
 8003406:	641a      	str	r2, [r3, #64]	@ 0x40
 8003408:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <MX_SAI2_Init+0x148>)
 800340a:	2201      	movs	r2, #1
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <MX_SAI2_Init+0x148>)
 8003410:	2200      	movs	r2, #0
 8003412:	649a      	str	r2, [r3, #72]	@ 0x48
 8003414:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <MX_SAI2_Init+0x148>)
 8003416:	2200      	movs	r2, #0
 8003418:	64da      	str	r2, [r3, #76]	@ 0x4c
 800341a:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <MX_SAI2_Init+0x148>)
 800341c:	2200      	movs	r2, #0
 800341e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <MX_SAI2_Init+0x148>)
 8003422:	2200      	movs	r2, #0
 8003424:	655a      	str	r2, [r3, #84]	@ 0x54
 8003426:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <MX_SAI2_Init+0x148>)
 8003428:	2200      	movs	r2, #0
 800342a:	659a      	str	r2, [r3, #88]	@ 0x58
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <MX_SAI2_Init+0x148>)
 800342e:	2201      	movs	r2, #1
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <MX_SAI2_Init+0x148>)
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	@ 0x60
 8003438:	4807      	ldr	r0, [pc, #28]	@ (8003458 <MX_SAI2_Init+0x148>)
 800343a:	f005 f9f3 	bl	8008824 <HAL_SAI_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_SAI2_Init+0x138>
 8003444:	f7ff fdd0 	bl	8002fe8 <Error_Handler>
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000b08 	.word	0x20000b08
 8003450:	40015c04 	.word	0x40015c04
 8003454:	0002ee00 	.word	0x0002ee00
 8003458:	20000b8c 	.word	0x20000b8c
 800345c:	40015c24 	.word	0x40015c24

08003460 <HAL_SAI_MspInit>:
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <HAL_SAI_MspInit+0xbc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d124      	bne.n	80034bc <HAL_SAI_MspInit+0x5c>
 8003472:	4b2b      	ldr	r3, [pc, #172]	@ (8003520 <HAL_SAI_MspInit+0xc0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <HAL_SAI_MspInit+0x32>
 800347a:	4b2a      	ldr	r3, [pc, #168]	@ (8003524 <HAL_SAI_MspInit+0xc4>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	4a29      	ldr	r2, [pc, #164]	@ (8003524 <HAL_SAI_MspInit+0xc4>)
 8003480:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003484:	6453      	str	r3, [r2, #68]	@ 0x44
 8003486:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <HAL_SAI_MspInit+0xc4>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_SAI_MspInit+0xc0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <HAL_SAI_MspInit+0xc0>)
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	23f0      	movs	r3, #240	@ 0xf0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	2302      	movs	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	2300      	movs	r3, #0
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	230a      	movs	r3, #10
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	481c      	ldr	r0, [pc, #112]	@ (8003528 <HAL_SAI_MspInit+0xc8>)
 80034b8:	f002 fcb0 	bl	8005e1c <HAL_GPIO_Init>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1a      	ldr	r2, [pc, #104]	@ (800352c <HAL_SAI_MspInit+0xcc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d125      	bne.n	8003512 <HAL_SAI_MspInit+0xb2>
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_SAI_MspInit+0xc0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_SAI_MspInit+0x86>
 80034ce:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <HAL_SAI_MspInit+0xc4>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <HAL_SAI_MspInit+0xc4>)
 80034d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <HAL_SAI_MspInit+0xc4>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_SAI_MspInit+0xc0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003520 <HAL_SAI_MspInit+0xc0>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	2302      	movs	r3, #2
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	230a      	movs	r3, #10
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	4808      	ldr	r0, [pc, #32]	@ (8003530 <HAL_SAI_MspInit+0xd0>)
 800350e:	f002 fc85 	bl	8005e1c <HAL_GPIO_Init>
 8003512:	bf00      	nop
 8003514:	3728      	adds	r7, #40	@ 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40015c04 	.word	0x40015c04
 8003520:	20000c10 	.word	0x20000c10
 8003524:	40023800 	.word	0x40023800
 8003528:	40022000 	.word	0x40022000
 800352c:	40015c24 	.word	0x40015c24
 8003530:	40021800 	.word	0x40021800

08003534 <MX_SDMMC1_SD_Init>:
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
 8003538:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 800353a:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <MX_SDMMC1_SD_Init+0x40>)
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 800354c:	2200      	movs	r2, #0
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 8003552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003556:	611a      	str	r2, [r3, #16]
 8003558:	4b05      	ldr	r3, [pc, #20]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 800355a:	2200      	movs	r2, #0
 800355c:	615a      	str	r2, [r3, #20]
 800355e:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <MX_SDMMC1_SD_Init+0x3c>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000c14 	.word	0x20000c14
 8003574:	40012c00 	.word	0x40012c00

08003578 <HAL_SD_MspInit>:
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a25      	ldr	r2, [pc, #148]	@ (800362c <HAL_SD_MspInit+0xb4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d144      	bne.n	8003624 <HAL_SD_MspInit+0xac>
 800359a:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	4a24      	ldr	r2, [pc, #144]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a6:	4b22      	ldr	r3, [pc, #136]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035be:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	4a18      	ldr	r2, [pc, #96]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035d0:	f043 0308 	orr.w	r3, r3, #8
 80035d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d6:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <HAL_SD_MspInit+0xb8>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	2302      	movs	r3, #2
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	2303      	movs	r3, #3
 80035f2:	623b      	str	r3, [r7, #32]
 80035f4:	230c      	movs	r3, #12
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4619      	mov	r1, r3
 80035fe:	480d      	ldr	r0, [pc, #52]	@ (8003634 <HAL_SD_MspInit+0xbc>)
 8003600:	f002 fc0c 	bl	8005e1c <HAL_GPIO_Init>
 8003604:	2304      	movs	r3, #4
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	2302      	movs	r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	2303      	movs	r3, #3
 8003612:	623b      	str	r3, [r7, #32]
 8003614:	230c      	movs	r3, #12
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4619      	mov	r1, r3
 800361e:	4806      	ldr	r0, [pc, #24]	@ (8003638 <HAL_SD_MspInit+0xc0>)
 8003620:	f002 fbfc 	bl	8005e1c <HAL_GPIO_Init>
 8003624:	bf00      	nop
 8003626:	3728      	adds	r7, #40	@ 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40023800 	.word	0x40023800
 8003634:	40020800 	.word	0x40020800
 8003638:	40020c00 	.word	0x40020c00

0800363c <MX_SPDIFRX_Init>:
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
 8003640:	4b15      	ldr	r3, [pc, #84]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003642:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 800364a:	2200      	movs	r2, #0
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
 8003660:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
 8003666:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
 800366c:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003680:	2200      	movs	r2, #0
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28
 8003684:	4804      	ldr	r0, [pc, #16]	@ (8003698 <MX_SPDIFRX_Init+0x5c>)
 8003686:	f006 fb51 	bl	8009d2c <HAL_SPDIFRX_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_SPDIFRX_Init+0x58>
 8003690:	f7ff fcaa 	bl	8002fe8 <Error_Handler>
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000c98 	.word	0x20000c98

0800369c <HAL_SPDIFRX_MspInit>:
 800369c:	b580      	push	{r7, lr}
 800369e:	b0aa      	sub	sp, #168	@ 0xa8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
 80036b4:	f107 0310 	add.w	r3, r7, #16
 80036b8:	2284      	movs	r2, #132	@ 0x84
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f00e fcd9 	bl	8012074 <memset>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80036ca:	d143      	bne.n	8003754 <HAL_SPDIFRX_MspInit+0xb8>
 80036cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	2364      	movs	r3, #100	@ 0x64
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	2302      	movs	r3, #2
 80036d8:	623b      	str	r3, [r7, #32]
 80036da:	2302      	movs	r3, #2
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	2302      	movs	r3, #2
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	2301      	movs	r3, #1
 80036e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 ff98 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_SPDIFRX_MspInit+0x5e>
 80036f6:	f7ff fc77 	bl	8002fe8 <Error_Handler>
 80036fa:	4b18      	ldr	r3, [pc, #96]	@ (800375c <HAL_SPDIFRX_MspInit+0xc0>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_SPDIFRX_MspInit+0xc0>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003704:	6413      	str	r3, [r2, #64]	@ 0x40
 8003706:	4b15      	ldr	r3, [pc, #84]	@ (800375c <HAL_SPDIFRX_MspInit+0xc0>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_SPDIFRX_MspInit+0xc0>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a11      	ldr	r2, [pc, #68]	@ (800375c <HAL_SPDIFRX_MspInit+0xc0>)
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b0f      	ldr	r3, [pc, #60]	@ (800375c <HAL_SPDIFRX_MspInit+0xc0>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003730:	2302      	movs	r3, #2
 8003732:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003742:	2308      	movs	r3, #8
 8003744:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003748:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800374c:	4619      	mov	r1, r3
 800374e:	4804      	ldr	r0, [pc, #16]	@ (8003760 <HAL_SPDIFRX_MspInit+0xc4>)
 8003750:	f002 fb64 	bl	8005e1c <HAL_GPIO_Init>
 8003754:	bf00      	nop
 8003756:	37a8      	adds	r7, #168	@ 0xa8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	40020c00 	.word	0x40020c00

08003764 <MX_SPI2_Init>:
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <MX_SPI2_Init+0x74>)
 800376a:	4a1c      	ldr	r2, [pc, #112]	@ (80037dc <MX_SPI2_Init+0x78>)
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <MX_SPI2_Init+0x74>)
 8003770:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	4b18      	ldr	r3, [pc, #96]	@ (80037d8 <MX_SPI2_Init+0x74>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <MX_SPI2_Init+0x74>)
 800377e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <MX_SPI2_Init+0x74>)
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <MX_SPI2_Init+0x74>)
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
 8003790:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <MX_SPI2_Init+0x74>)
 8003792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003796:	619a      	str	r2, [r3, #24]
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <MX_SPI2_Init+0x74>)
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
 800379e:	4b0e      	ldr	r3, [pc, #56]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80037aa:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037b2:	2207      	movs	r2, #7
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037be:	2208      	movs	r2, #8
 80037c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80037c2:	4805      	ldr	r0, [pc, #20]	@ (80037d8 <MX_SPI2_Init+0x74>)
 80037c4:	f006 fb0e 	bl	8009de4 <HAL_SPI_Init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_SPI2_Init+0x6e>
 80037ce:	f7ff fc0b 	bl	8002fe8 <Error_Handler>
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000ce4 	.word	0x20000ce4
 80037dc:	40003800 	.word	0x40003800

080037e0 <HAL_SPI_MspInit>:
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	@ 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a25      	ldr	r2, [pc, #148]	@ (8003894 <HAL_SPI_MspInit+0xb4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d144      	bne.n	800388c <HAL_SPI_MspInit+0xac>
 8003802:	4b25      	ldr	r3, [pc, #148]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	4a24      	ldr	r2, [pc, #144]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800380c:	6413      	str	r3, [r2, #64]	@ 0x40
 800380e:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a1e      	ldr	r2, [pc, #120]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003824:	6313      	str	r3, [r2, #48]	@ 0x30
 8003826:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4a18      	ldr	r2, [pc, #96]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	6313      	str	r3, [r2, #48]	@ 0x30
 800383e:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <HAL_SPI_MspInit+0xb8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2302      	movs	r3, #2
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	2302      	movs	r3, #2
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
 800385a:	2305      	movs	r3, #5
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	4619      	mov	r1, r3
 8003864:	480d      	ldr	r0, [pc, #52]	@ (800389c <HAL_SPI_MspInit+0xbc>)
 8003866:	f002 fad9 	bl	8005e1c <HAL_GPIO_Init>
 800386a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	2302      	movs	r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	2300      	movs	r3, #0
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	2305      	movs	r3, #5
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	4619      	mov	r1, r3
 8003886:	4806      	ldr	r0, [pc, #24]	@ (80038a0 <HAL_SPI_MspInit+0xc0>)
 8003888:	f002 fac8 	bl	8005e1c <HAL_GPIO_Init>
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	@ 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40003800 	.word	0x40003800
 8003898:	40023800 	.word	0x40023800
 800389c:	40022000 	.word	0x40022000
 80038a0:	40020400 	.word	0x40020400

080038a4 <HAL_MspInit>:
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_MspInit+0x4c>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	4a10      	ldr	r2, [pc, #64]	@ (80038f0 <HAL_MspInit+0x4c>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_MspInit+0x4c>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_MspInit+0x4c>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <HAL_MspInit+0x4c>)
 80038c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ce:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <HAL_MspInit+0x4c>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	210f      	movs	r1, #15
 80038de:	f06f 0001 	mvn.w	r0, #1
 80038e2:	f001 fa9f 	bl	8004e24 <HAL_NVIC_SetPriority>
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_InitTick>:
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	@ 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	2300      	movs	r3, #0
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003904:	4b33      	ldr	r3, [pc, #204]	@ (80039d4 <HAL_InitTick+0xe0>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a32      	ldr	r2, [pc, #200]	@ (80039d4 <HAL_InitTick+0xe0>)
 800390a:	f043 0310 	orr.w	r3, r3, #16
 800390e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003910:	4b30      	ldr	r3, [pc, #192]	@ (80039d4 <HAL_InitTick+0xe0>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f107 0210 	add.w	r2, r7, #16
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f003 fe48 	bl	80075bc <HAL_RCC_GetClockConfig>
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_InitTick+0x4a>
 8003936:	f003 fe19 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 800393a:	6378      	str	r0, [r7, #52]	@ 0x34
 800393c:	e004      	b.n	8003948 <HAL_InitTick+0x54>
 800393e:	f003 fe15 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 8003942:	4603      	mov	r3, r0
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	4a23      	ldr	r2, [pc, #140]	@ (80039d8 <HAL_InitTick+0xe4>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	0c9b      	lsrs	r3, r3, #18
 8003952:	3b01      	subs	r3, #1
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003956:	4b21      	ldr	r3, [pc, #132]	@ (80039dc <HAL_InitTick+0xe8>)
 8003958:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_InitTick+0xec>)
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b1f      	ldr	r3, [pc, #124]	@ (80039dc <HAL_InitTick+0xe8>)
 800395e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	4a1d      	ldr	r2, [pc, #116]	@ (80039dc <HAL_InitTick+0xe8>)
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	4b1c      	ldr	r3, [pc, #112]	@ (80039dc <HAL_InitTick+0xe8>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
 8003970:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <HAL_InitTick+0xe8>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	4b19      	ldr	r3, [pc, #100]	@ (80039dc <HAL_InitTick+0xe8>)
 8003978:	2200      	movs	r2, #0
 800397a:	619a      	str	r2, [r3, #24]
 800397c:	4817      	ldr	r0, [pc, #92]	@ (80039dc <HAL_InitTick+0xe8>)
 800397e:	f006 fadc 	bl	8009f3a <HAL_TIM_Base_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8003988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800398c:	2b00      	cmp	r3, #0
 800398e:	d11b      	bne.n	80039c8 <HAL_InitTick+0xd4>
 8003990:	4812      	ldr	r0, [pc, #72]	@ (80039dc <HAL_InitTick+0xe8>)
 8003992:	f006 fb29 	bl	8009fe8 <HAL_TIM_Base_Start_IT>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800399c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_InitTick+0xd4>
 80039a4:	2036      	movs	r0, #54	@ 0x36
 80039a6:	f001 fa59 	bl	8004e5c <HAL_NVIC_EnableIRQ>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b0f      	cmp	r3, #15
 80039ae:	d808      	bhi.n	80039c2 <HAL_InitTick+0xce>
 80039b0:	2200      	movs	r2, #0
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	2036      	movs	r0, #54	@ 0x36
 80039b6:	f001 fa35 	bl	8004e24 <HAL_NVIC_SetPriority>
 80039ba:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <HAL_InitTick+0xf0>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e002      	b.n	80039c8 <HAL_InitTick+0xd4>
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80039c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039cc:	4618      	mov	r0, r3
 80039ce:	3738      	adds	r7, #56	@ 0x38
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	20000d48 	.word	0x20000d48
 80039e0:	40001000 	.word	0x40001000
 80039e4:	20000008 	.word	0x20000008

080039e8 <NMI_Handler>:
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <NMI_Handler+0x4>

080039f0 <HardFault_Handler>:
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <HardFault_Handler+0x4>

080039f8 <MemManage_Handler>:
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <MemManage_Handler+0x4>

08003a00 <BusFault_Handler>:
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <BusFault_Handler+0x4>

08003a08 <UsageFault_Handler>:
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <UsageFault_Handler+0x4>

08003a10 <DebugMon_Handler>:
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <TIM6_DAC_IRQHandler>:
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4802      	ldr	r0, [pc, #8]	@ (8003a30 <TIM6_DAC_IRQHandler+0x10>)
 8003a26:	f006 fbae 	bl	800a186 <HAL_TIM_IRQHandler>
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000d48 	.word	0x20000d48

08003a34 <USART6_IRQHandler>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4802      	ldr	r0, [pc, #8]	@ (8003a44 <USART6_IRQHandler+0x10>)
 8003a3a:	f007 fc95 	bl	800b368 <HAL_UART_IRQHandler>
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000fe8 	.word	0x20000fe8

08003a48 <LTDC_IRQHandler>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4802      	ldr	r0, [pc, #8]	@ (8003a58 <LTDC_IRQHandler+0x10>)
 8003a4e:	f002 fd93 	bl	8006578 <HAL_LTDC_IRQHandler>
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200009f4 	.word	0x200009f4

08003a5c <DMA2D_IRQHandler>:
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4802      	ldr	r0, [pc, #8]	@ (8003a6c <DMA2D_IRQHandler+0x10>)
 8003a62:	f001 fceb 	bl	800543c <HAL_DMA2D_IRQHandler>
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200003f8 	.word	0x200003f8

08003a70 <_getpid>:
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	2301      	movs	r3, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_kill>:
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	f00e fc1f 	bl	80122cc <__errno>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2216      	movs	r2, #22
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <_exit>:
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ffe7 	bl	8003a80 <_kill>
 8003ab2:	bf00      	nop
 8003ab4:	e7fd      	b.n	8003ab2 <_exit+0x12>

08003ab6 <_read>:
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e00a      	b.n	8003ade <_read+0x28>
 8003ac8:	f3af 8000 	nop.w
 8003acc:	4601      	mov	r1, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	60ba      	str	r2, [r7, #8]
 8003ad4:	b2ca      	uxtb	r2, r1
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	dbf0      	blt.n	8003ac8 <_read+0x12>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_write>:
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e009      	b.n	8003b16 <_write+0x26>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	60ba      	str	r2, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f95e 	bl	8002dcc <__io_putchar>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3301      	adds	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dbf1      	blt.n	8003b02 <_write+0x12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_close>:
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_fstat>:
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	2300      	movs	r3, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_isatty>:
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_lseek>:
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	2300      	movs	r3, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_sbrk>:
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <_sbrk+0x5c>)
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <_sbrk+0x60>)
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <_sbrk+0x64>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <_sbrk+0x22>
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <_sbrk+0x64>)
 8003bae:	4a12      	ldr	r2, [pc, #72]	@ (8003bf8 <_sbrk+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <_sbrk+0x64>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d207      	bcs.n	8003bd0 <_sbrk+0x40>
 8003bc0:	f00e fb84 	bl	80122cc <__errno>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e009      	b.n	8003be4 <_sbrk+0x54>
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <_sbrk+0x64>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <_sbrk+0x64>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	4a05      	ldr	r2, [pc, #20]	@ (8003bf4 <_sbrk+0x64>)
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20050000 	.word	0x20050000
 8003bf0:	00000400 	.word	0x00000400
 8003bf4:	20000d94 	.word	0x20000d94
 8003bf8:	20009328 	.word	0x20009328

08003bfc <SystemInit>:
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <SystemInit+0x20>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <SystemInit+0x20>)
 8003c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <MX_TIM1_Init>:
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b09a      	sub	sp, #104	@ 0x68
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	611a      	str	r2, [r3, #16]
 8003c50:	615a      	str	r2, [r3, #20]
 8003c52:	619a      	str	r2, [r3, #24]
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	222c      	movs	r2, #44	@ 0x2c
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f00e fa0a 	bl	8012074 <memset>
 8003c60:	4b43      	ldr	r3, [pc, #268]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c62:	4a44      	ldr	r2, [pc, #272]	@ (8003d74 <MX_TIM1_Init+0x154>)
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	4b42      	ldr	r3, [pc, #264]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	4b40      	ldr	r3, [pc, #256]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	4b3f      	ldr	r3, [pc, #252]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
 8003c80:	4b3b      	ldr	r3, [pc, #236]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	615a      	str	r2, [r3, #20]
 8003c86:	4b3a      	ldr	r3, [pc, #232]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]
 8003c8c:	4838      	ldr	r0, [pc, #224]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003c8e:	f006 f954 	bl	8009f3a <HAL_TIM_Base_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_TIM1_Init+0x7c>
 8003c98:	f7ff f9a6 	bl	8002fe8 <Error_Handler>
 8003c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ca2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4831      	ldr	r0, [pc, #196]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003caa:	f006 fc87 	bl	800a5bc <HAL_TIM_ConfigClockSource>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_TIM1_Init+0x98>
 8003cb4:	f7ff f998 	bl	8002fe8 <Error_Handler>
 8003cb8:	482d      	ldr	r0, [pc, #180]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003cba:	f006 fa0d 	bl	800a0d8 <HAL_TIM_PWM_Init>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <MX_TIM1_Init+0xa8>
 8003cc4:	f7ff f990 	bl	8002fe8 <Error_Handler>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ccc:	2300      	movs	r3, #0
 8003cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4825      	ldr	r0, [pc, #148]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003cdc:	f007 f8fe 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM1_Init+0xca>
 8003ce6:	f7ff f97f 	bl	8002fe8 <Error_Handler>
 8003cea:	2360      	movs	r3, #96	@ 0x60
 8003cec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cee:	2300      	movs	r3, #0
 8003cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cfe:	2300      	movs	r3, #0
 8003d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d02:	2300      	movs	r3, #0
 8003d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4818      	ldr	r0, [pc, #96]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003d10:	f006 fb40 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_TIM1_Init+0xfe>
 8003d1a:	f7ff f965 	bl	8002fe8 <Error_Handler>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	2300      	movs	r3, #0
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4807      	ldr	r0, [pc, #28]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003d54:	f007 f950 	bl	800aff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM1_Init+0x142>
 8003d5e:	f7ff f943 	bl	8002fe8 <Error_Handler>
 8003d62:	4803      	ldr	r0, [pc, #12]	@ (8003d70 <MX_TIM1_Init+0x150>)
 8003d64:	f000 fa96 	bl	8004294 <HAL_TIM_MspPostInit>
 8003d68:	bf00      	nop
 8003d6a:	3768      	adds	r7, #104	@ 0x68
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000d98 	.word	0x20000d98
 8003d74:	40010000 	.word	0x40010000

08003d78 <MX_TIM2_Init>:
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	@ 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	f107 031c 	add.w	r3, r7, #28
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	463b      	mov	r3, r7
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	615a      	str	r2, [r3, #20]
 8003da8:	619a      	str	r2, [r3, #24]
 8003daa:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	4b28      	ldr	r3, [pc, #160]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	4b26      	ldr	r3, [pc, #152]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
 8003dcc:	4b24      	ldr	r3, [pc, #144]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	619a      	str	r2, [r3, #24]
 8003dd2:	4823      	ldr	r0, [pc, #140]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003dd4:	f006 f8b1 	bl	8009f3a <HAL_TIM_Base_Init>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM2_Init+0x6a>
 8003dde:	f7ff f903 	bl	8002fe8 <Error_Handler>
 8003de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dec:	4619      	mov	r1, r3
 8003dee:	481c      	ldr	r0, [pc, #112]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003df0:	f006 fbe4 	bl	800a5bc <HAL_TIM_ConfigClockSource>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_TIM2_Init+0x86>
 8003dfa:	f7ff f8f5 	bl	8002fe8 <Error_Handler>
 8003dfe:	4818      	ldr	r0, [pc, #96]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003e00:	f006 f96a 	bl	800a0d8 <HAL_TIM_PWM_Init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_TIM2_Init+0x96>
 8003e0a:	f7ff f8ed 	bl	8002fe8 <Error_Handler>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	f107 031c 	add.w	r3, r7, #28
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4810      	ldr	r0, [pc, #64]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003e1e:	f007 f85d 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM2_Init+0xb4>
 8003e28:	f7ff f8de 	bl	8002fe8 <Error_Handler>
 8003e2c:	2360      	movs	r3, #96	@ 0x60
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	2300      	movs	r3, #0
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	2300      	movs	r3, #0
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4619      	mov	r1, r3
 8003e42:	4807      	ldr	r0, [pc, #28]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003e44:	f006 faa6 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM2_Init+0xda>
 8003e4e:	f7ff f8cb 	bl	8002fe8 <Error_Handler>
 8003e52:	4803      	ldr	r0, [pc, #12]	@ (8003e60 <MX_TIM2_Init+0xe8>)
 8003e54:	f000 fa1e 	bl	8004294 <HAL_TIM_MspPostInit>
 8003e58:	bf00      	nop
 8003e5a:	3738      	adds	r7, #56	@ 0x38
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000de4 	.word	0x20000de4

08003e64 <MX_TIM3_Init>:
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	@ 0x38
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	f107 031c 	add.w	r3, r7, #28
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	463b      	mov	r3, r7
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	611a      	str	r2, [r3, #16]
 8003e92:	615a      	str	r2, [r3, #20]
 8003e94:	619a      	str	r2, [r3, #24]
 8003e96:	4b2d      	ldr	r3, [pc, #180]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003e98:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <MX_TIM3_Init+0xec>)
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
 8003ebc:	4823      	ldr	r0, [pc, #140]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003ebe:	f006 f83c 	bl	8009f3a <HAL_TIM_Base_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM3_Init+0x68>
 8003ec8:	f7ff f88e 	bl	8002fe8 <Error_Handler>
 8003ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	481c      	ldr	r0, [pc, #112]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003eda:	f006 fb6f 	bl	800a5bc <HAL_TIM_ConfigClockSource>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_TIM3_Init+0x84>
 8003ee4:	f7ff f880 	bl	8002fe8 <Error_Handler>
 8003ee8:	4818      	ldr	r0, [pc, #96]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003eea:	f006 f8f5 	bl	800a0d8 <HAL_TIM_PWM_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM3_Init+0x94>
 8003ef4:	f7ff f878 	bl	8002fe8 <Error_Handler>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f00:	f107 031c 	add.w	r3, r7, #28
 8003f04:	4619      	mov	r1, r3
 8003f06:	4811      	ldr	r0, [pc, #68]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003f08:	f006 ffe8 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_TIM3_Init+0xb2>
 8003f12:	f7ff f869 	bl	8002fe8 <Error_Handler>
 8003f16:	2360      	movs	r3, #96	@ 0x60
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	463b      	mov	r3, r7
 8003f28:	2200      	movs	r2, #0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4807      	ldr	r0, [pc, #28]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003f2e:	f006 fa31 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM3_Init+0xd8>
 8003f38:	f7ff f856 	bl	8002fe8 <Error_Handler>
 8003f3c:	4803      	ldr	r0, [pc, #12]	@ (8003f4c <MX_TIM3_Init+0xe8>)
 8003f3e:	f000 f9a9 	bl	8004294 <HAL_TIM_MspPostInit>
 8003f42:	bf00      	nop
 8003f44:	3738      	adds	r7, #56	@ 0x38
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000e30 	.word	0x20000e30
 8003f50:	40000400 	.word	0x40000400

08003f54 <MX_TIM5_Init>:
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	@ 0x38
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	f107 031c 	add.w	r3, r7, #28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	463b      	mov	r3, r7
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	615a      	str	r2, [r3, #20]
 8003f84:	619a      	str	r2, [r3, #24]
 8003f86:	4b2d      	ldr	r3, [pc, #180]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003f88:	4a2d      	ldr	r2, [pc, #180]	@ (8004040 <MX_TIM5_Init+0xec>)
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	4b28      	ldr	r3, [pc, #160]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	4b25      	ldr	r3, [pc, #148]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
 8003fac:	4823      	ldr	r0, [pc, #140]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003fae:	f005 ffc4 	bl	8009f3a <HAL_TIM_Base_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM5_Init+0x68>
 8003fb8:	f7ff f816 	bl	8002fe8 <Error_Handler>
 8003fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	481c      	ldr	r0, [pc, #112]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003fca:	f006 faf7 	bl	800a5bc <HAL_TIM_ConfigClockSource>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM5_Init+0x84>
 8003fd4:	f7ff f808 	bl	8002fe8 <Error_Handler>
 8003fd8:	4818      	ldr	r0, [pc, #96]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003fda:	f006 f87d 	bl	800a0d8 <HAL_TIM_PWM_Init>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_TIM5_Init+0x94>
 8003fe4:	f7ff f800 	bl	8002fe8 <Error_Handler>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff0:	f107 031c 	add.w	r3, r7, #28
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4811      	ldr	r0, [pc, #68]	@ (800403c <MX_TIM5_Init+0xe8>)
 8003ff8:	f006 ff70 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM5_Init+0xb2>
 8004002:	f7fe fff1 	bl	8002fe8 <Error_Handler>
 8004006:	2360      	movs	r3, #96	@ 0x60
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	463b      	mov	r3, r7
 8004018:	220c      	movs	r2, #12
 800401a:	4619      	mov	r1, r3
 800401c:	4807      	ldr	r0, [pc, #28]	@ (800403c <MX_TIM5_Init+0xe8>)
 800401e:	f006 f9b9 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM5_Init+0xd8>
 8004028:	f7fe ffde 	bl	8002fe8 <Error_Handler>
 800402c:	4803      	ldr	r0, [pc, #12]	@ (800403c <MX_TIM5_Init+0xe8>)
 800402e:	f000 f931 	bl	8004294 <HAL_TIM_MspPostInit>
 8004032:	bf00      	nop
 8004034:	3738      	adds	r7, #56	@ 0x38
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000e7c 	.word	0x20000e7c
 8004040:	40000c00 	.word	0x40000c00

08004044 <MX_TIM8_Init>:
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	f107 0310 	add.w	r3, r7, #16
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 8004064:	4a20      	ldr	r2, [pc, #128]	@ (80040e8 <MX_TIM8_Init+0xa4>)
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	4b1e      	ldr	r3, [pc, #120]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	4b1d      	ldr	r3, [pc, #116]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 8004076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
 8004082:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
 8004088:	4b16      	ldr	r3, [pc, #88]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
 800408e:	4815      	ldr	r0, [pc, #84]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 8004090:	f005 ff53 	bl	8009f3a <HAL_TIM_Base_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM8_Init+0x5a>
 800409a:	f7fe ffa5 	bl	8002fe8 <Error_Handler>
 800409e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	f107 0310 	add.w	r3, r7, #16
 80040a8:	4619      	mov	r1, r3
 80040aa:	480e      	ldr	r0, [pc, #56]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 80040ac:	f006 fa86 	bl	800a5bc <HAL_TIM_ConfigClockSource>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM8_Init+0x76>
 80040b6:	f7fe ff97 	bl	8002fe8 <Error_Handler>
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4806      	ldr	r0, [pc, #24]	@ (80040e4 <MX_TIM8_Init+0xa0>)
 80040cc:	f006 ff06 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM8_Init+0x96>
 80040d6:	f7fe ff87 	bl	8002fe8 <Error_Handler>
 80040da:	bf00      	nop
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000ec8 	.word	0x20000ec8
 80040e8:	40010400 	.word	0x40010400

080040ec <MX_TIM12_Init>:
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
 8004100:	615a      	str	r2, [r3, #20]
 8004102:	619a      	str	r2, [r3, #24]
 8004104:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004106:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <MX_TIM12_Init+0x88>)
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <MX_TIM12_Init+0x84>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	4b17      	ldr	r3, [pc, #92]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	4b16      	ldr	r3, [pc, #88]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004118:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
 800412a:	4811      	ldr	r0, [pc, #68]	@ (8004170 <MX_TIM12_Init+0x84>)
 800412c:	f005 ffd4 	bl	800a0d8 <HAL_TIM_PWM_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM12_Init+0x4e>
 8004136:	f7fe ff57 	bl	8002fe8 <Error_Handler>
 800413a:	2360      	movs	r3, #96	@ 0x60
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2200      	movs	r2, #0
 800414e:	4619      	mov	r1, r3
 8004150:	4807      	ldr	r0, [pc, #28]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004152:	f006 f91f 	bl	800a394 <HAL_TIM_PWM_ConfigChannel>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_TIM12_Init+0x74>
 800415c:	f7fe ff44 	bl	8002fe8 <Error_Handler>
 8004160:	4803      	ldr	r0, [pc, #12]	@ (8004170 <MX_TIM12_Init+0x84>)
 8004162:	f000 f897 	bl	8004294 <HAL_TIM_MspPostInit>
 8004166:	bf00      	nop
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000f14 	.word	0x20000f14
 8004174:	40001800 	.word	0x40001800

08004178 <HAL_TIM_Base_MspInit>:
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	@ 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2e      	ldr	r2, [pc, #184]	@ (8004240 <HAL_TIM_Base_MspInit+0xc8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10c      	bne.n	80041a4 <HAL_TIM_Base_MspInit+0x2c>
 800418a:	4b2e      	ldr	r3, [pc, #184]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	4a2d      	ldr	r2, [pc, #180]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6453      	str	r3, [r2, #68]	@ 0x44
 8004196:	4b2b      	ldr	r3, [pc, #172]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	e046      	b.n	8004232 <HAL_TIM_Base_MspInit+0xba>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d10c      	bne.n	80041c8 <HAL_TIM_Base_MspInit+0x50>
 80041ae:	4b25      	ldr	r3, [pc, #148]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ba:	4b22      	ldr	r3, [pc, #136]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	e034      	b.n	8004232 <HAL_TIM_Base_MspInit+0xba>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_TIM_Base_MspInit+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10c      	bne.n	80041ec <HAL_TIM_Base_MspInit+0x74>
 80041d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041de:	4b19      	ldr	r3, [pc, #100]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	e022      	b.n	8004232 <HAL_TIM_Base_MspInit+0xba>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a16      	ldr	r2, [pc, #88]	@ (800424c <HAL_TIM_Base_MspInit+0xd4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10c      	bne.n	8004210 <HAL_TIM_Base_MspInit+0x98>
 80041f6:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	4a12      	ldr	r2, [pc, #72]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 80041fc:	f043 0308 	orr.w	r3, r3, #8
 8004200:	6413      	str	r3, [r2, #64]	@ 0x40
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	e010      	b.n	8004232 <HAL_TIM_Base_MspInit+0xba>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0e      	ldr	r2, [pc, #56]	@ (8004250 <HAL_TIM_Base_MspInit+0xd8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10b      	bne.n	8004232 <HAL_TIM_Base_MspInit+0xba>
 800421a:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	4a09      	ldr	r2, [pc, #36]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	6453      	str	r3, [r2, #68]	@ 0x44
 8004226:	4b07      	ldr	r3, [pc, #28]	@ (8004244 <HAL_TIM_Base_MspInit+0xcc>)
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	bf00      	nop
 8004234:	3724      	adds	r7, #36	@ 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40023800 	.word	0x40023800
 8004248:	40000400 	.word	0x40000400
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40010400 	.word	0x40010400

08004254 <HAL_TIM_PWM_MspInit>:
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <HAL_TIM_PWM_MspInit+0x38>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10b      	bne.n	800427e <HAL_TIM_PWM_MspInit+0x2a>
 8004266:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <HAL_TIM_PWM_MspInit+0x3c>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4a09      	ldr	r2, [pc, #36]	@ (8004290 <HAL_TIM_PWM_MspInit+0x3c>)
 800426c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004270:	6413      	str	r3, [r2, #64]	@ 0x40
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <HAL_TIM_PWM_MspInit+0x3c>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40001800 	.word	0x40001800
 8004290:	40023800 	.word	0x40023800

08004294 <HAL_TIM_MspPostInit>:
 8004294:	b580      	push	{r7, lr}
 8004296:	b08c      	sub	sp, #48	@ 0x30
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	f107 031c 	add.w	r3, r7, #28
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a56      	ldr	r2, [pc, #344]	@ (800440c <HAL_TIM_MspPostInit+0x178>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d11d      	bne.n	80042f2 <HAL_TIM_MspPostInit+0x5e>
 80042b6:	4b56      	ldr	r3, [pc, #344]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	4a55      	ldr	r2, [pc, #340]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c2:	4b53      	ldr	r3, [pc, #332]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	2302      	movs	r3, #2
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	2300      	movs	r3, #0
 80042de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e0:	2301      	movs	r3, #1
 80042e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e4:	f107 031c 	add.w	r3, r7, #28
 80042e8:	4619      	mov	r1, r3
 80042ea:	484a      	ldr	r0, [pc, #296]	@ (8004414 <HAL_TIM_MspPostInit+0x180>)
 80042ec:	f001 fd96 	bl	8005e1c <HAL_GPIO_Init>
 80042f0:	e087      	b.n	8004402 <HAL_TIM_MspPostInit+0x16e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fa:	d11d      	bne.n	8004338 <HAL_TIM_MspPostInit+0xa4>
 80042fc:	4b44      	ldr	r3, [pc, #272]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	4a43      	ldr	r2, [pc, #268]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6313      	str	r3, [r2, #48]	@ 0x30
 8004308:	4b41      	ldr	r3, [pc, #260]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	2302      	movs	r3, #2
 800431c:	623b      	str	r3, [r7, #32]
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
 8004322:	2300      	movs	r3, #0
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004326:	2301      	movs	r3, #1
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432a:	f107 031c 	add.w	r3, r7, #28
 800432e:	4619      	mov	r1, r3
 8004330:	4838      	ldr	r0, [pc, #224]	@ (8004414 <HAL_TIM_MspPostInit+0x180>)
 8004332:	f001 fd73 	bl	8005e1c <HAL_GPIO_Init>
 8004336:	e064      	b.n	8004402 <HAL_TIM_MspPostInit+0x16e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a36      	ldr	r2, [pc, #216]	@ (8004418 <HAL_TIM_MspPostInit+0x184>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d11c      	bne.n	800437c <HAL_TIM_MspPostInit+0xe8>
 8004342:	4b33      	ldr	r3, [pc, #204]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	4a32      	ldr	r2, [pc, #200]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	6313      	str	r3, [r2, #48]	@ 0x30
 800434e:	4b30      	ldr	r3, [pc, #192]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2310      	movs	r3, #16
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	2302      	movs	r3, #2
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
 8004366:	2300      	movs	r3, #0
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800436a:	2302      	movs	r3, #2
 800436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	4619      	mov	r1, r3
 8004374:	4829      	ldr	r0, [pc, #164]	@ (800441c <HAL_TIM_MspPostInit+0x188>)
 8004376:	f001 fd51 	bl	8005e1c <HAL_GPIO_Init>
 800437a:	e042      	b.n	8004402 <HAL_TIM_MspPostInit+0x16e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a27      	ldr	r2, [pc, #156]	@ (8004420 <HAL_TIM_MspPostInit+0x18c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d11c      	bne.n	80043c0 <HAL_TIM_MspPostInit+0x12c>
 8004386:	4b22      	ldr	r3, [pc, #136]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	4a21      	ldr	r2, [pc, #132]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004390:	6313      	str	r3, [r2, #48]	@ 0x30
 8004392:	4b1f      	ldr	r3, [pc, #124]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	2302      	movs	r3, #2
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043aa:	2300      	movs	r3, #0
 80043ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ae:	2302      	movs	r3, #2
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b2:	f107 031c 	add.w	r3, r7, #28
 80043b6:	4619      	mov	r1, r3
 80043b8:	481a      	ldr	r0, [pc, #104]	@ (8004424 <HAL_TIM_MspPostInit+0x190>)
 80043ba:	f001 fd2f 	bl	8005e1c <HAL_GPIO_Init>
 80043be:	e020      	b.n	8004402 <HAL_TIM_MspPostInit+0x16e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	@ (8004428 <HAL_TIM_MspPostInit+0x194>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d11b      	bne.n	8004402 <HAL_TIM_MspPostInit+0x16e>
 80043ca:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	4a10      	ldr	r2, [pc, #64]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80043d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <HAL_TIM_MspPostInit+0x17c>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2340      	movs	r3, #64	@ 0x40
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	2302      	movs	r3, #2
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	2300      	movs	r3, #0
 80043f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f2:	2309      	movs	r3, #9
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f6:	f107 031c 	add.w	r3, r7, #28
 80043fa:	4619      	mov	r1, r3
 80043fc:	480b      	ldr	r0, [pc, #44]	@ (800442c <HAL_TIM_MspPostInit+0x198>)
 80043fe:	f001 fd0d 	bl	8005e1c <HAL_GPIO_Init>
 8004402:	bf00      	nop
 8004404:	3730      	adds	r7, #48	@ 0x30
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40023800 	.word	0x40023800
 8004414:	40020000 	.word	0x40020000
 8004418:	40000400 	.word	0x40000400
 800441c:	40020400 	.word	0x40020400
 8004420:	40000c00 	.word	0x40000c00
 8004424:	40022000 	.word	0x40022000
 8004428:	40001800 	.word	0x40001800
 800442c:	40021c00 	.word	0x40021c00

08004430 <MX_USART1_UART_Init>:
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
 8004434:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004436:	4a15      	ldr	r2, [pc, #84]	@ (800448c <MX_USART1_UART_Init+0x5c>)
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800443c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800444a:	2200      	movs	r2, #0
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004450:	2200      	movs	r2, #0
 8004452:	611a      	str	r2, [r3, #16]
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004456:	220c      	movs	r2, #12
 8004458:	615a      	str	r2, [r3, #20]
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004468:	2200      	movs	r2, #0
 800446a:	621a      	str	r2, [r3, #32]
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 800446e:	2200      	movs	r2, #0
 8004470:	625a      	str	r2, [r3, #36]	@ 0x24
 8004472:	4805      	ldr	r0, [pc, #20]	@ (8004488 <MX_USART1_UART_Init+0x58>)
 8004474:	f006 fe5c 	bl	800b130 <HAL_UART_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_USART1_UART_Init+0x52>
 800447e:	f7fe fdb3 	bl	8002fe8 <Error_Handler>
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000f60 	.word	0x20000f60
 800448c:	40011000 	.word	0x40011000

08004490 <MX_USART6_UART_Init>:
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
 8004494:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 8004496:	4a15      	ldr	r2, [pc, #84]	@ (80044ec <MX_USART6_UART_Init+0x5c>)
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	4b13      	ldr	r3, [pc, #76]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 800449c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	615a      	str	r2, [r3, #20]
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
 80044c0:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	621a      	str	r2, [r3, #32]
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80044d2:	4805      	ldr	r0, [pc, #20]	@ (80044e8 <MX_USART6_UART_Init+0x58>)
 80044d4:	f006 fe2c 	bl	800b130 <HAL_UART_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_USART6_UART_Init+0x52>
 80044de:	f7fe fd83 	bl	8002fe8 <Error_Handler>
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000fe8 	.word	0x20000fe8
 80044ec:	40011400 	.word	0x40011400

080044f0 <HAL_UART_MspInit>:
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b0ae      	sub	sp, #184	@ 0xb8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
 8004508:	f107 0320 	add.w	r3, r7, #32
 800450c:	2284      	movs	r2, #132	@ 0x84
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f00d fdaf 	bl	8012074 <memset>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a57      	ldr	r2, [pc, #348]	@ (8004678 <HAL_UART_MspInit+0x188>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d15d      	bne.n	80045dc <HAL_UART_MspInit+0xec>
 8004520:	2340      	movs	r3, #64	@ 0x40
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	2300      	movs	r3, #0
 8004526:	667b      	str	r3, [r7, #100]	@ 0x64
 8004528:	f107 0320 	add.w	r3, r7, #32
 800452c:	4618      	mov	r0, r3
 800452e:	f003 f877 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_UART_MspInit+0x4c>
 8004538:	f7fe fd56 	bl	8002fe8 <Error_Handler>
 800453c:	4b4f      	ldr	r3, [pc, #316]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	4a4e      	ldr	r2, [pc, #312]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004542:	f043 0310 	orr.w	r3, r3, #16
 8004546:	6453      	str	r3, [r2, #68]	@ 0x44
 8004548:	4b4c      	ldr	r3, [pc, #304]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800454a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4b49      	ldr	r3, [pc, #292]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	4a48      	ldr	r2, [pc, #288]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800455a:	f043 0302 	orr.w	r3, r3, #2
 800455e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004560:	4b46      	ldr	r3, [pc, #280]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	4b43      	ldr	r3, [pc, #268]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	4a42      	ldr	r2, [pc, #264]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6313      	str	r3, [r2, #48]	@ 0x30
 8004578:	4b40      	ldr	r3, [pc, #256]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800458a:	2302      	movs	r3, #2
 800458c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459c:	2307      	movs	r3, #7
 800459e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80045a6:	4619      	mov	r1, r3
 80045a8:	4835      	ldr	r0, [pc, #212]	@ (8004680 <HAL_UART_MspInit+0x190>)
 80045aa:	f001 fc37 	bl	8005e1c <HAL_GPIO_Init>
 80045ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045b6:	2302      	movs	r3, #2
 80045b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c8:	2307      	movs	r3, #7
 80045ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80045d2:	4619      	mov	r1, r3
 80045d4:	482b      	ldr	r0, [pc, #172]	@ (8004684 <HAL_UART_MspInit+0x194>)
 80045d6:	f001 fc21 	bl	8005e1c <HAL_GPIO_Init>
 80045da:	e048      	b.n	800466e <HAL_UART_MspInit+0x17e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a29      	ldr	r2, [pc, #164]	@ (8004688 <HAL_UART_MspInit+0x198>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d143      	bne.n	800466e <HAL_UART_MspInit+0x17e>
 80045e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	2300      	movs	r3, #0
 80045ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045f0:	f107 0320 	add.w	r3, r7, #32
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 f813 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_MspInit+0x114>
 8004600:	f7fe fcf2 	bl	8002fe8 <Error_Handler>
 8004604:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004610:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4b17      	ldr	r3, [pc, #92]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004620:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_UART_MspInit+0x18c>)
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	6313      	str	r3, [r2, #48]	@ 0x30
 8004628:	4b14      	ldr	r3, [pc, #80]	@ (800467c <HAL_UART_MspInit+0x18c>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	23c0      	movs	r3, #192	@ 0xc0
 8004636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800463a:	2302      	movs	r3, #2
 800463c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004646:	2303      	movs	r3, #3
 8004648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800464c:	2308      	movs	r3, #8
 800464e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004652:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004656:	4619      	mov	r1, r3
 8004658:	480c      	ldr	r0, [pc, #48]	@ (800468c <HAL_UART_MspInit+0x19c>)
 800465a:	f001 fbdf 	bl	8005e1c <HAL_GPIO_Init>
 800465e:	2200      	movs	r2, #0
 8004660:	2105      	movs	r1, #5
 8004662:	2047      	movs	r0, #71	@ 0x47
 8004664:	f000 fbde 	bl	8004e24 <HAL_NVIC_SetPriority>
 8004668:	2047      	movs	r0, #71	@ 0x47
 800466a:	f000 fbf7 	bl	8004e5c <HAL_NVIC_EnableIRQ>
 800466e:	bf00      	nop
 8004670:	37b8      	adds	r7, #184	@ 0xb8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40011000 	.word	0x40011000
 800467c:	40023800 	.word	0x40023800
 8004680:	40020400 	.word	0x40020400
 8004684:	40020000 	.word	0x40020000
 8004688:	40011400 	.word	0x40011400
 800468c:	40020800 	.word	0x40020800

08004690 <Reset_Handler>:
 8004690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046c8 <LoopFillZerobss+0xe>
 8004694:	f7ff fab2 	bl	8003bfc <SystemInit>
 8004698:	480c      	ldr	r0, [pc, #48]	@ (80046cc <LoopFillZerobss+0x12>)
 800469a:	490d      	ldr	r1, [pc, #52]	@ (80046d0 <LoopFillZerobss+0x16>)
 800469c:	4a0d      	ldr	r2, [pc, #52]	@ (80046d4 <LoopFillZerobss+0x1a>)
 800469e:	2300      	movs	r3, #0
 80046a0:	e002      	b.n	80046a8 <LoopCopyDataInit>

080046a2 <CopyDataInit>:
 80046a2:	58d4      	ldr	r4, [r2, r3]
 80046a4:	50c4      	str	r4, [r0, r3]
 80046a6:	3304      	adds	r3, #4

080046a8 <LoopCopyDataInit>:
 80046a8:	18c4      	adds	r4, r0, r3
 80046aa:	428c      	cmp	r4, r1
 80046ac:	d3f9      	bcc.n	80046a2 <CopyDataInit>
 80046ae:	4a0a      	ldr	r2, [pc, #40]	@ (80046d8 <LoopFillZerobss+0x1e>)
 80046b0:	4c0a      	ldr	r4, [pc, #40]	@ (80046dc <LoopFillZerobss+0x22>)
 80046b2:	2300      	movs	r3, #0
 80046b4:	e001      	b.n	80046ba <LoopFillZerobss>

080046b6 <FillZerobss>:
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	3204      	adds	r2, #4

080046ba <LoopFillZerobss>:
 80046ba:	42a2      	cmp	r2, r4
 80046bc:	d3fb      	bcc.n	80046b6 <FillZerobss>
 80046be:	f00d fe0b 	bl	80122d8 <__libc_init_array>
 80046c2:	f7fe fb95 	bl	8002df0 <main>
 80046c6:	4770      	bx	lr
 80046c8:	20050000 	.word	0x20050000
 80046cc:	20000000 	.word	0x20000000
 80046d0:	200001dc 	.word	0x200001dc
 80046d4:	08015328 	.word	0x08015328
 80046d8:	20000320 	.word	0x20000320
 80046dc:	20009324 	.word	0x20009324

080046e0 <ADC_IRQHandler>:
 80046e0:	e7fe      	b.n	80046e0 <ADC_IRQHandler>

080046e2 <HAL_Init>:
 80046e2:	b580      	push	{r7, lr}
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	2003      	movs	r0, #3
 80046e8:	f000 fb91 	bl	8004e0e <HAL_NVIC_SetPriorityGrouping>
 80046ec:	200f      	movs	r0, #15
 80046ee:	f7ff f901 	bl	80038f4 <HAL_InitTick>
 80046f2:	f7ff f8d7 	bl	80038a4 <HAL_MspInit>
 80046f6:	2300      	movs	r3, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_IncTick>:
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_IncTick+0x20>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_IncTick+0x24>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4413      	add	r3, r2
 800470c:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <HAL_IncTick+0x24>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c
 8004720:	20001070 	.word	0x20001070

08004724 <HAL_GetTick>:
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
 8004728:	4b03      	ldr	r3, [pc, #12]	@ (8004738 <HAL_GetTick+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20001070 	.word	0x20001070

0800473c <HAL_Delay>:
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	f7ff ffee 	bl	8004724 <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d005      	beq.n	8004762 <HAL_Delay+0x26>
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_Delay+0x44>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	bf00      	nop
 8004764:	f7ff ffde 	bl	8004724 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d8f7      	bhi.n	8004764 <HAL_Delay+0x28>
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000000c 	.word	0x2000000c

08004784 <HAL_ADC_Init>:
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	2300      	movs	r3, #0
 800478e:	73fb      	strb	r3, [r7, #15]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_ADC_Init+0x16>
 8004796:	2301      	movs	r3, #1
 8004798:	e031      	b.n	80047fe <HAL_ADC_Init+0x7a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_ADC_Init+0x32>
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc fcae 	bl	8001104 <HAL_ADC_MspInit>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d116      	bne.n	80047f0 <HAL_ADC_Init+0x6c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_ADC_Init+0x84>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	f043 0202 	orr.w	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f974 	bl	8004ac0 <ADC_Init>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	f023 0303 	bic.w	r3, r3, #3
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80047ee:	e001      	b.n	80047f4 <HAL_ADC_Init+0x70>
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	ffffeefd 	.word	0xffffeefd

0800480c <HAL_ADC_ConfigChannel>:
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x1c>
 8004824:	2302      	movs	r3, #2
 8004826:	e13a      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x292>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b09      	cmp	r3, #9
 8004836:	d93a      	bls.n	80048ae <HAL_ADC_ConfigChannel+0xa2>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004840:	d035      	beq.n	80048ae <HAL_ADC_ConfigChannel+0xa2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68d9      	ldr	r1, [r3, #12]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	3b1e      	subs	r3, #30
 8004858:	2207      	movs	r2, #7
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	400a      	ands	r2, r1
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a8f      	ldr	r2, [pc, #572]	@ (8004aac <HAL_ADC_ConfigChannel+0x2a0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10a      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x7c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68d9      	ldr	r1, [r3, #12]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	061a      	lsls	r2, r3, #24
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e039      	b.n	80048fc <HAL_ADC_ConfigChannel+0xf0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68d9      	ldr	r1, [r3, #12]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	4618      	mov	r0, r3
 800489a:	4603      	mov	r3, r0
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4403      	add	r3, r0
 80048a0:	3b1e      	subs	r3, #30
 80048a2:	409a      	lsls	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	e026      	b.n	80048fc <HAL_ADC_ConfigChannel+0xf0>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6919      	ldr	r1, [r3, #16]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2207      	movs	r2, #7
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43da      	mvns	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	400a      	ands	r2, r1
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6919      	ldr	r1, [r3, #16]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	4603      	mov	r3, r0
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4403      	add	r3, r0
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	409a      	lsls	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	611a      	str	r2, [r3, #16]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b06      	cmp	r3, #6
 8004902:	d824      	bhi.n	800494e <HAL_ADC_ConfigChannel+0x142>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	3b05      	subs	r3, #5
 8004916:	221f      	movs	r2, #31
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43da      	mvns	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	400a      	ands	r2, r1
 8004924:	635a      	str	r2, [r3, #52]	@ 0x34
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	4618      	mov	r0, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	3b05      	subs	r3, #5
 8004940:	fa00 f203 	lsl.w	r2, r0, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	635a      	str	r2, [r3, #52]	@ 0x34
 800494c:	e04c      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x1dc>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d824      	bhi.n	80049a0 <HAL_ADC_ConfigChannel+0x194>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	3b23      	subs	r3, #35	@ 0x23
 8004968:	221f      	movs	r2, #31
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	400a      	ands	r2, r1
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	4618      	mov	r0, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	3b23      	subs	r3, #35	@ 0x23
 8004992:	fa00 f203 	lsl.w	r2, r0, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	631a      	str	r2, [r3, #48]	@ 0x30
 800499e:	e023      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x1dc>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	3b41      	subs	r3, #65	@ 0x41
 80049b2:	221f      	movs	r2, #31
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43da      	mvns	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	400a      	ands	r2, r1
 80049c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4618      	mov	r0, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	3b41      	subs	r3, #65	@ 0x41
 80049dc:	fa00 f203 	lsl.w	r2, r0, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x2a4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10a      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x1fc>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049fa:	d105      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x1fc>
 80049fc:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004a06:	6053      	str	r3, [r2, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x2a4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10f      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x226>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b12      	cmp	r3, #18
 8004a18:	d10b      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x226>
 8004a1a:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4a25      	ldr	r2, [pc, #148]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a24:	6053      	str	r3, [r2, #4]
 8004a26:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4a22      	ldr	r2, [pc, #136]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a30:	6053      	str	r3, [r2, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab0 <HAL_ADC_ConfigChannel+0x2a4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d12b      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x288>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1a      	ldr	r2, [pc, #104]	@ (8004aac <HAL_ADC_ConfigChannel+0x2a0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <HAL_ADC_ConfigChannel+0x242>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b11      	cmp	r3, #17
 8004a4c:	d122      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x288>
 8004a4e:	4b19      	ldr	r3, [pc, #100]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4a18      	ldr	r2, [pc, #96]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a54:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a58:	6053      	str	r3, [r2, #4]
 8004a5a:	4b16      	ldr	r3, [pc, #88]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	@ (8004ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a64:	6053      	str	r3, [r2, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	@ (8004aac <HAL_ADC_ConfigChannel+0x2a0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d111      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x288>
 8004a70:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <HAL_ADC_ConfigChannel+0x2ac>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a11      	ldr	r2, [pc, #68]	@ (8004abc <HAL_ADC_ConfigChannel+0x2b0>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	0c9a      	lsrs	r2, r3, #18
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e002      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x282>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f9      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x27c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	10000012 	.word	0x10000012
 8004ab0:	40012000 	.word	0x40012000
 8004ab4:	40012300 	.word	0x40012300
 8004ab8:	20000004 	.word	0x20000004
 8004abc:	431bde83 	.word	0x431bde83

08004ac0 <ADC_Init>:
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	4b78      	ldr	r3, [pc, #480]	@ (8004cac <ADC_Init+0x1ec>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a77      	ldr	r2, [pc, #476]	@ (8004cac <ADC_Init+0x1ec>)
 8004ace:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004ad2:	6053      	str	r3, [r2, #4]
 8004ad4:	4b75      	ldr	r3, [pc, #468]	@ (8004cac <ADC_Init+0x1ec>)
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4973      	ldr	r1, [pc, #460]	@ (8004cac <ADC_Init+0x1ec>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	604b      	str	r3, [r1, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6899      	ldr	r1, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	4a58      	ldr	r2, [pc, #352]	@ (8004cb0 <ADC_Init+0x1f0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <ADC_Init+0xda>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6899      	ldr	r1, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e00f      	b.n	8004bba <ADC_Init+0xfa>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0202 	bic.w	r2, r2, #2
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6899      	ldr	r1, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	005a      	lsls	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <ADC_Init+0x160>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf6:	605a      	str	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	3b01      	subs	r3, #1
 8004c14:	035a      	lsls	r2, r3, #13
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e007      	b.n	8004c30 <ADC_Init+0x170>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	051a      	lsls	r2, r3, #20
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c64:	609a      	str	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c72:	025a      	lsls	r2, r3, #9
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	029a      	lsls	r2, r3, #10
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40012300 	.word	0x40012300
 8004cb0:	0f000001 	.word	0x0f000001

08004cb4 <__NVIC_SetPriorityGrouping>:
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	60d3      	str	r3, [r2, #12]
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000ed00 	.word	0xe000ed00
 8004cf8:	05fa0000 	.word	0x05fa0000

08004cfc <__NVIC_GetPriorityGrouping>:
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <__NVIC_GetPriorityGrouping+0x18>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <__NVIC_EnableIRQ>:
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	db0b      	blt.n	8004d42 <__NVIC_EnableIRQ+0x2a>
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	f003 021f 	and.w	r2, r3, #31
 8004d30:	4907      	ldr	r1, [pc, #28]	@ (8004d50 <__NVIC_EnableIRQ+0x38>)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2001      	movs	r0, #1
 8004d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e000e100 	.word	0xe000e100

08004d54 <__NVIC_SetPriority>:
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	71fb      	strb	r3, [r7, #7]
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	db0a      	blt.n	8004d7e <__NVIC_SetPriority+0x2a>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	490c      	ldr	r1, [pc, #48]	@ (8004da0 <__NVIC_SetPriority+0x4c>)
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	0112      	lsls	r2, r2, #4
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	440b      	add	r3, r1
 8004d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8004d7c:	e00a      	b.n	8004d94 <__NVIC_SetPriority+0x40>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4908      	ldr	r1, [pc, #32]	@ (8004da4 <__NVIC_SetPriority+0x50>)
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	3b04      	subs	r3, #4
 8004d8c:	0112      	lsls	r2, r2, #4
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	440b      	add	r3, r1
 8004d92:	761a      	strb	r2, [r3, #24]
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000e100 	.word	0xe000e100
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <NVIC_EncodePriority>:
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f1c3 0307 	rsb	r3, r3, #7
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	bf28      	it	cs
 8004dc6:	2304      	movcs	r3, #4
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d902      	bls.n	8004dd8 <NVIC_EncodePriority+0x30>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3b03      	subs	r3, #3
 8004dd6:	e000      	b.n	8004dda <NVIC_EncodePriority+0x32>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43da      	mvns	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	401a      	ands	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	409a      	lsls	r2, r3
 8004df0:	f04f 31ff 	mov.w	r1, #4294967295
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfa:	43d9      	mvns	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	400b      	ands	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	3724      	adds	r7, #36	@ 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_NVIC_SetPriorityGrouping>:
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff4c 	bl	8004cb4 <__NVIC_SetPriorityGrouping>
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_NVIC_SetPriority>:
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	73fb      	strb	r3, [r7, #15]
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	f7ff ff61 	bl	8004cfc <__NVIC_GetPriorityGrouping>
 8004e3a:	6178      	str	r0, [r7, #20]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	6978      	ldr	r0, [r7, #20]
 8004e42:	f7ff ffb1 	bl	8004da8 <NVIC_EncodePriority>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ff80 	bl	8004d54 <__NVIC_SetPriority>
 8004e54:	bf00      	nop
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_NVIC_EnableIRQ>:
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ff54 	bl	8004d18 <__NVIC_EnableIRQ>
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_CRC_Init>:
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_CRC_Init+0x12>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e054      	b.n	8004f34 <HAL_CRC_Init+0xbc>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7f5b      	ldrb	r3, [r3, #29]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <HAL_CRC_Init+0x28>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	771a      	strb	r2, [r3, #28]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc f9ae 	bl	80011fc <HAL_CRC_MspInit>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	775a      	strb	r2, [r3, #29]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	791b      	ldrb	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10c      	bne.n	8004ec8 <HAL_CRC_Init+0x50>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <HAL_CRC_Init+0xc4>)
 8004eb4:	615a      	str	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0218 	bic.w	r2, r2, #24
 8004ec4:	609a      	str	r2, [r3, #8]
 8004ec6:	e00c      	b.n	8004ee2 <HAL_CRC_Init+0x6a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f834 	bl	8004f40 <HAL_CRCEx_Polynomial_Set>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_CRC_Init+0x6a>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e028      	b.n	8004f34 <HAL_CRC_Init+0xbc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	795b      	ldrb	r3, [r3, #5]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <HAL_CRC_Init+0x7e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	611a      	str	r2, [r3, #16]
 8004ef4:	e004      	b.n	8004f00 <HAL_CRC_Init+0x88>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6912      	ldr	r2, [r2, #16]
 8004efe:	611a      	str	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	775a      	strb	r2, [r3, #29]
 8004f32:	2300      	movs	r3, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	04c11db7 	.word	0x04c11db7

08004f40 <HAL_CRCEx_Polynomial_Set>:
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	75fb      	strb	r3, [r7, #23]
 8004f50:	231f      	movs	r3, #31
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d102      	bne.n	8004f64 <HAL_CRCEx_Polynomial_Set+0x24>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
 8004f62:	e063      	b.n	800502c <HAL_CRCEx_Polynomial_Set+0xec>
 8004f64:	bf00      	nop
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	613a      	str	r2, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_CRCEx_Polynomial_Set+0x44>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_CRCEx_Polynomial_Set+0x26>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b18      	cmp	r3, #24
 8004f88:	d846      	bhi.n	8005018 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f90 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	0800501f 	.word	0x0800501f
 8004f94:	08005019 	.word	0x08005019
 8004f98:	08005019 	.word	0x08005019
 8004f9c:	08005019 	.word	0x08005019
 8004fa0:	08005019 	.word	0x08005019
 8004fa4:	08005019 	.word	0x08005019
 8004fa8:	08005019 	.word	0x08005019
 8004fac:	08005019 	.word	0x08005019
 8004fb0:	0800500d 	.word	0x0800500d
 8004fb4:	08005019 	.word	0x08005019
 8004fb8:	08005019 	.word	0x08005019
 8004fbc:	08005019 	.word	0x08005019
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	08005019 	.word	0x08005019
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	08005019 	.word	0x08005019
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	08005019 	.word	0x08005019
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	08004ff5 	.word	0x08004ff5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d913      	bls.n	8005022 <HAL_CRCEx_Polynomial_Set+0xe2>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
 8004ffe:	e010      	b.n	8005022 <HAL_CRCEx_Polynomial_Set+0xe2>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b07      	cmp	r3, #7
 8005004:	d90f      	bls.n	8005026 <HAL_CRCEx_Polynomial_Set+0xe6>
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
 800500a:	e00c      	b.n	8005026 <HAL_CRCEx_Polynomial_Set+0xe6>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d90b      	bls.n	800502a <HAL_CRCEx_Polynomial_Set+0xea>
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
 8005016:	e008      	b.n	800502a <HAL_CRCEx_Polynomial_Set+0xea>
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
 800501c:	e006      	b.n	800502c <HAL_CRCEx_Polynomial_Set+0xec>
 800501e:	bf00      	nop
 8005020:	e004      	b.n	800502c <HAL_CRCEx_Polynomial_Set+0xec>
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <HAL_CRCEx_Polynomial_Set+0xec>
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <HAL_CRCEx_Polynomial_Set+0xec>
 800502a:	bf00      	nop
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10d      	bne.n	800504e <HAL_CRCEx_Polynomial_Set+0x10e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	615a      	str	r2, [r3, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 0118 	bic.w	r1, r3, #24
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	430a      	orrs	r2, r1
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	4618      	mov	r0, r3
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_DCMI_Init>:
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_DCMI_Init+0x12>
 800506a:	2301      	movs	r3, #1
 800506c:	e069      	b.n	8005142 <HAL_DCMI_Init+0xe6>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <HAL_DCMI_Init+0x24>
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc f912 	bl	80012a4 <HAL_DCMI_MspInit>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_DCMI_Init+0x3a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <HAL_DCMI_Init+0xf0>)
 80050a2:	400b      	ands	r3, r1
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d112      	bne.n	8005122 <HAL_DCMI_Init+0xc6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	7f1b      	ldrb	r3, [r3, #28]
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	7f5b      	ldrb	r3, [r3, #29]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	7f9b      	ldrb	r3, [r3, #30]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	ea42 0103 	orr.w	r1, r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	7fdb      	ldrb	r3, [r3, #31]
 8005118:	061a      	lsls	r2, r3, #24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 021e 	orr.w	r2, r2, #30
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005140:	2300      	movs	r3, #0
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	ffe0f007 	.word	0xffe0f007

08005150 <HAL_DMA_Start_IT>:
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_DMA_Start_IT+0x26>
 8005172:	2302      	movs	r3, #2
 8005174:	e048      	b.n	8005208 <HAL_DMA_Start_IT+0xb8>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d137      	bne.n	80051fa <HAL_DMA_Start_IT+0xaa>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2202      	movs	r2, #2
 800518e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	655a      	str	r2, [r3, #84]	@ 0x54
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f8d4 	bl	800534c <DMA_SetConfig>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a8:	223f      	movs	r2, #63	@ 0x3f
 80051aa:	409a      	lsls	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0216 	orr.w	r2, r2, #22
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80051ce:	615a      	str	r2, [r3, #20]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_DMA_Start_IT+0x98>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e005      	b.n	8005206 <HAL_DMA_Start_IT+0xb6>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8005202:	2302      	movs	r3, #2
 8005204:	75fb      	strb	r3, [r7, #23]
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_DMA_Abort>:
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	f7ff fa81 	bl	8004724 <HAL_GetTick>
 8005222:	60b8      	str	r0, [r7, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d008      	beq.n	8005242 <HAL_DMA_Abort+0x32>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2280      	movs	r2, #128	@ 0x80
 8005234:	655a      	str	r2, [r3, #84]	@ 0x54
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800523e:	2301      	movs	r3, #1
 8005240:	e052      	b.n	80052e8 <HAL_DMA_Abort+0xd8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0216 	bic.w	r2, r2, #22
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005260:	615a      	str	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <HAL_DMA_Abort+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_DMA_Abort+0x72>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0208 	bic.w	r2, r2, #8
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e013      	b.n	80052bc <HAL_DMA_Abort+0xac>
 8005294:	f7ff fa46 	bl	8004724 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d90c      	bls.n	80052bc <HAL_DMA_Abort+0xac>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2203      	movs	r2, #3
 80052ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80052b8:	2303      	movs	r3, #3
 80052ba:	e015      	b.n	80052e8 <HAL_DMA_Abort+0xd8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e4      	bne.n	8005294 <HAL_DMA_Abort+0x84>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ce:	223f      	movs	r2, #63	@ 0x3f
 80052d0:	409a      	lsls	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80052e6:	2300      	movs	r3, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_DMA_Abort_IT>:
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d004      	beq.n	800530e <HAL_DMA_Abort_IT+0x1e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
 800530a:	2301      	movs	r3, #1
 800530c:	e00c      	b.n	8005328 <HAL_DMA_Abort_IT+0x38>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2205      	movs	r2, #5
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_DMA_GetError>:
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <DMA_SetConfig>:
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b40      	cmp	r3, #64	@ 0x40
 8005378:	d108      	bne.n	800538c <DMA_SetConfig+0x40>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e007      	b.n	800539c <DMA_SetConfig+0x50>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_DMA2D_Init>:
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_DMA2D_Init+0x12>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e039      	b.n	800542e <HAL_DMA2D_Init+0x86>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_DMA2D_Init+0x2c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fc f858 	bl	8001484 <HAL_DMA2D_MspInit>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f8:	f023 0107 	bic.w	r1, r3, #7
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	635a      	str	r2, [r3, #52]	@ 0x34
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <HAL_DMA2D_Init+0x90>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68d1      	ldr	r1, [r2, #12]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	430b      	orrs	r3, r1
 800541c:	6413      	str	r3, [r2, #64]	@ 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800542c:	2300      	movs	r3, #0
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	ffffc000 	.word	0xffffc000

0800543c <HAL_DMA2D_IRQHandler>:
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d026      	beq.n	80054ac <HAL_DMA2D_IRQHandler+0x70>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d021      	beq.n	80054ac <HAL_DMA2D_IRQHandler+0x70>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547c:	f043 0201 	orr.w	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2201      	movs	r2, #1
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2204      	movs	r2, #4
 8005490:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_DMA2D_IRQHandler+0x70>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d026      	beq.n	8005504 <HAL_DMA2D_IRQHandler+0xc8>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d021      	beq.n	8005504 <HAL_DMA2D_IRQHandler+0xc8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2220      	movs	r2, #32
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	f043 0202 	orr.w	r2, r3, #2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2204      	movs	r2, #4
 80054e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_DMA2D_IRQHandler+0xc8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d026      	beq.n	800555c <HAL_DMA2D_IRQHandler+0x120>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005514:	2b00      	cmp	r3, #0
 8005516:	d021      	beq.n	800555c <HAL_DMA2D_IRQHandler+0x120>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2208      	movs	r2, #8
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_DMA2D_IRQHandler+0x120>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d013      	beq.n	800558e <HAL_DMA2D_IRQHandler+0x152>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <HAL_DMA2D_IRQHandler+0x152>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2204      	movs	r2, #4
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f853 	bl	8005634 <HAL_DMA2D_LineEventCallback>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d024      	beq.n	80055e2 <HAL_DMA2D_IRQHandler+0x1a6>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01f      	beq.n	80055e2 <HAL_DMA2D_IRQHandler+0x1a6>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2202      	movs	r2, #2
 80055b8:	609a      	str	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_DMA2D_IRQHandler+0x1a6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01f      	beq.n	800562c <HAL_DMA2D_IRQHandler+0x1f0>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01a      	beq.n	800562c <HAL_DMA2D_IRQHandler+0x1f0>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	609a      	str	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f80e 	bl	8005648 <HAL_DMA2D_CLUTLoadingCpltCallback>
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_DMA2D_LineEventCallback>:
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_DMA2D_ConfigLayer>:
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_DMA2D_ConfigLayer+0x20>
 8005678:	2302      	movs	r3, #2
 800567a:	e079      	b.n	8005770 <HAL_DMA2D_ConfigLayer+0x114>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	3318      	adds	r3, #24
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	4b35      	ldr	r3, [pc, #212]	@ (800577c <HAL_DMA2D_ConfigLayer+0x120>)
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b0a      	cmp	r3, #10
 80056b0:	d003      	beq.n	80056ba <HAL_DMA2D_ConfigLayer+0x5e>
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d107      	bne.n	80056ca <HAL_DMA2D_ConfigLayer+0x6e>
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e005      	b.n	80056d6 <HAL_DMA2D_ConfigLayer+0x7a>
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	061b      	lsls	r3, r3, #24
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d120      	bne.n	800571e <HAL_DMA2D_ConfigLayer+0xc2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	ea02 0103 	and.w	r1, r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	619a      	str	r2, [r3, #24]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b0a      	cmp	r3, #10
 8005704:	d003      	beq.n	800570e <HAL_DMA2D_ConfigLayer+0xb2>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b09      	cmp	r3, #9
 800570c:	d127      	bne.n	800575e <HAL_DMA2D_ConfigLayer+0x102>
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800571a:	629a      	str	r2, [r3, #40]	@ 0x28
 800571c:	e01f      	b.n	800575e <HAL_DMA2D_ConfigLayer+0x102>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43db      	mvns	r3, r3
 8005728:	ea02 0103 	and.w	r1, r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	430a      	orrs	r2, r1
 8005734:	61da      	str	r2, [r3, #28]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	611a      	str	r2, [r3, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b0a      	cmp	r3, #10
 8005746:	d003      	beq.n	8005750 <HAL_DMA2D_ConfigLayer+0xf4>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b09      	cmp	r3, #9
 800574e:	d106      	bne.n	800575e <HAL_DMA2D_ConfigLayer+0x102>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800575c:	621a      	str	r2, [r3, #32]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800576e:	2300      	movs	r3, #0
 8005770:	4618      	mov	r0, r3
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	ff03000f 	.word	0xff03000f

08005780 <HAL_ETH_Init>:
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_ETH_Init+0x12>
 800578e:	2301      	movs	r3, #1
 8005790:	e086      	b.n	80058a0 <HAL_ETH_Init+0x120>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <HAL_ETH_Init+0x2a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fb fee1 	bl	800156c <HAL_ETH_MspInit>
 80057aa:	4b3f      	ldr	r3, [pc, #252]	@ (80058a8 <HAL_ETH_Init+0x128>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	4a3e      	ldr	r2, [pc, #248]	@ (80058a8 <HAL_ETH_Init+0x128>)
 80057b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057b6:	4b3c      	ldr	r3, [pc, #240]	@ (80058a8 <HAL_ETH_Init+0x128>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4b3a      	ldr	r3, [pc, #232]	@ (80058ac <HAL_ETH_Init+0x12c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4a39      	ldr	r2, [pc, #228]	@ (80058ac <HAL_ETH_Init+0x12c>)
 80057c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80057cc:	6053      	str	r3, [r2, #4]
 80057ce:	4b37      	ldr	r3, [pc, #220]	@ (80058ac <HAL_ETH_Init+0x12c>)
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	4935      	ldr	r1, [pc, #212]	@ (80058ac <HAL_ETH_Init+0x12c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
 80057dc:	4b33      	ldr	r3, [pc, #204]	@ (80058ac <HAL_ETH_Init+0x12c>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	f7fe ff94 	bl	8004724 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	e011      	b.n	8005824 <HAL_ETH_Init+0xa4>
 8005800:	f7fe ff90 	bl	8004724 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800580e:	d909      	bls.n	8005824 <HAL_ETH_Init+0xa4>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2204      	movs	r2, #4
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	22e0      	movs	r2, #224	@ 0xe0
 800581c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005820:	2301      	movs	r3, #1
 8005822:	e03d      	b.n	80058a0 <HAL_ETH_Init+0x120>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e4      	bne.n	8005800 <HAL_ETH_Init+0x80>
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f97a 	bl	8005b30 <ETH_MACDMAConfig>
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fa25 	bl	8005c8c <ETH_DMATxDescListInit>
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa7b 	bl	8005d3e <ETH_DMARxDescListInit>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	461a      	mov	r2, r3
 800584e:	2100      	movs	r1, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f9e3 	bl	8005c1c <ETH_MACAddressConfig>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005864:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b0f      	ldr	r3, [pc, #60]	@ (80058b0 <HAL_ETH_Init+0x130>)
 8005874:	430b      	orrs	r3, r1
 8005876:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800588a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2210      	movs	r2, #16
 800589a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800589e:	2300      	movs	r3, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40013800 	.word	0x40013800
 80058b0:	00020060 	.word	0x00020060

080058b4 <ETH_SetMACConfig>:
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4b53      	ldr	r3, [pc, #332]	@ (8005a18 <ETH_SetMACConfig+0x164>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	7b9b      	ldrb	r3, [r3, #14]
 80058d2:	065b      	lsls	r3, r3, #25
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	7c12      	ldrb	r2, [r2, #16]
 80058d8:	2a00      	cmp	r2, #0
 80058da:	d102      	bne.n	80058e2 <ETH_SetMACConfig+0x2e>
 80058dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80058e0:	e000      	b.n	80058e4 <ETH_SetMACConfig+0x30>
 80058e2:	2200      	movs	r2, #0
 80058e4:	4313      	orrs	r3, r2
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	7c52      	ldrb	r2, [r2, #17]
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	d102      	bne.n	80058f4 <ETH_SetMACConfig+0x40>
 80058ee:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80058f2:	e000      	b.n	80058f6 <ETH_SetMACConfig+0x42>
 80058f4:	2200      	movs	r2, #0
 80058f6:	431a      	orrs	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	7fdb      	ldrb	r3, [r3, #31]
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	431a      	orrs	r2, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	7f92      	ldrb	r2, [r2, #30]
 8005910:	2a00      	cmp	r2, #0
 8005912:	d102      	bne.n	800591a <ETH_SetMACConfig+0x66>
 8005914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005918:	e000      	b.n	800591c <ETH_SetMACConfig+0x68>
 800591a:	2200      	movs	r2, #0
 800591c:	431a      	orrs	r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	7f1b      	ldrb	r3, [r3, #28]
 8005922:	031b      	lsls	r3, r3, #12
 8005924:	431a      	orrs	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	431a      	orrs	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	791b      	ldrb	r3, [r3, #4]
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	4313      	orrs	r3, r2
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	f892 2020 	ldrb.w	r2, [r2, #32]
 800593a:	2a00      	cmp	r2, #0
 800593c:	d102      	bne.n	8005944 <ETH_SetMACConfig+0x90>
 800593e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005942:	e000      	b.n	8005946 <ETH_SetMACConfig+0x92>
 8005944:	2200      	movs	r2, #0
 8005946:	431a      	orrs	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	7bdb      	ldrb	r3, [r3, #15]
 800594c:	01db      	lsls	r3, r3, #7
 800594e:	431a      	orrs	r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	431a      	orrs	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	4313      	orrs	r3, r2
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	2001      	movs	r0, #1
 8005978:	f7fe fee0 	bl	800473c <HAL_Delay>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005992:	4013      	ands	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800599a:	041b      	lsls	r3, r3, #16
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d101      	bne.n	80059aa <ETH_SetMACConfig+0xf6>
 80059a6:	2280      	movs	r2, #128	@ 0x80
 80059a8:	e000      	b.n	80059ac <ETH_SetMACConfig+0xf8>
 80059aa:	2200      	movs	r2, #0
 80059ac:	431a      	orrs	r2, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b2:	4313      	orrs	r3, r2
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	d101      	bne.n	80059c2 <ETH_SetMACConfig+0x10e>
 80059be:	2208      	movs	r2, #8
 80059c0:	e000      	b.n	80059c4 <ETH_SetMACConfig+0x110>
 80059c2:	2200      	movs	r2, #0
 80059c4:	4313      	orrs	r3, r2
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80059cc:	2a01      	cmp	r2, #1
 80059ce:	d101      	bne.n	80059d4 <ETH_SetMACConfig+0x120>
 80059d0:	2204      	movs	r2, #4
 80059d2:	e000      	b.n	80059d6 <ETH_SetMACConfig+0x122>
 80059d4:	2200      	movs	r2, #0
 80059d6:	4313      	orrs	r3, r2
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80059de:	2a01      	cmp	r2, #1
 80059e0:	d101      	bne.n	80059e6 <ETH_SetMACConfig+0x132>
 80059e2:	2202      	movs	r2, #2
 80059e4:	e000      	b.n	80059e8 <ETH_SetMACConfig+0x134>
 80059e6:	2200      	movs	r2, #0
 80059e8:	4313      	orrs	r3, r2
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	619a      	str	r2, [r3, #24]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7fe fe9b 	bl	800473c <HAL_Delay>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	619a      	str	r2, [r3, #24]
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	fd20810f 	.word	0xfd20810f

08005a1c <ETH_SetDMAConfig>:
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4b3d      	ldr	r3, [pc, #244]	@ (8005b2c <ETH_SetDMAConfig+0x110>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	7b1b      	ldrb	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <ETH_SetDMAConfig+0x2c>
 8005a42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005a46:	e000      	b.n	8005a4a <ETH_SetDMAConfig+0x2e>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	7b5b      	ldrb	r3, [r3, #13]
 8005a4e:	065b      	lsls	r3, r3, #25
 8005a50:	4313      	orrs	r3, r2
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	7f52      	ldrb	r2, [r2, #29]
 8005a56:	2a00      	cmp	r2, #0
 8005a58:	d102      	bne.n	8005a60 <ETH_SetDMAConfig+0x44>
 8005a5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a5e:	e000      	b.n	8005a62 <ETH_SetDMAConfig+0x46>
 8005a60:	2200      	movs	r2, #0
 8005a62:	431a      	orrs	r2, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	7b9b      	ldrb	r3, [r3, #14]
 8005a68:	055b      	lsls	r3, r3, #21
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	7f1b      	ldrb	r3, [r3, #28]
 8005a76:	01db      	lsls	r3, r3, #7
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	7f9b      	ldrb	r3, [r3, #30]
 8005a7e:	019b      	lsls	r3, r3, #6
 8005a80:	431a      	orrs	r2, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4313      	orrs	r3, r2
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6193      	str	r3, [r2, #24]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	f7fe fe42 	bl	800473c <HAL_Delay>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6193      	str	r3, [r2, #24]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	791b      	ldrb	r3, [r3, #4]
 8005aca:	065a      	lsls	r2, r3, #25
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ae4:	01db      	lsls	r3, r3, #7
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	431a      	orrs	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005afe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	2001      	movs	r0, #1
 8005b12:	f7fe fe13 	bl	800473c <HAL_Delay>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	f8de3f23 	.word	0xf8de3f23

08005b30 <ETH_MACDMAConfig>:
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b0a6      	sub	sp, #152	@ 0x98
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8005b44:	2300      	movs	r3, #0
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b72:	2300      	movs	r3, #0
 8005b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 8005b92:	2300      	movs	r3, #0
 8005b94:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
 8005b98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8005baa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fe7f 	bl	80058b4 <ETH_SetMACConfig>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	753b      	strb	r3, [r7, #20]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	757b      	strb	r3, [r7, #21]
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75bb      	strb	r3, [r7, #22]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8005be2:	2301      	movs	r3, #1
 8005be4:	733b      	strb	r3, [r7, #12]
 8005be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8005bfe:	2300      	movs	r3, #0
 8005c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff05 	bl	8005a1c <ETH_SetDMAConfig>
 8005c12:	bf00      	nop
 8005c14:	3798      	adds	r7, #152	@ 0x98
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <ETH_MACAddressConfig>:
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3305      	adds	r3, #5
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	3204      	adds	r2, #4
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <ETH_MACAddressConfig+0x68>)
 8005c3e:	4413      	add	r3, r2
 8005c40:	461a      	mov	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3303      	adds	r3, #3
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	061a      	lsls	r2, r3, #24
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3302      	adds	r3, #2
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	041b      	lsls	r3, r3, #16
 8005c56:	431a      	orrs	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	4313      	orrs	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <ETH_MACAddressConfig+0x6c>)
 8005c6e:	4413      	add	r3, r2
 8005c70:	461a      	mov	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40028040 	.word	0x40028040
 8005c88:	40028044 	.word	0x40028044

08005c8c <ETH_DMATxDescListInit>:
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e03e      	b.n	8005d18 <ETH_DMATxDescListInit+0x8c>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68d9      	ldr	r1, [r3, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	440b      	add	r3, r1
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	3206      	adds	r2, #6
 8005ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d80c      	bhi.n	8005cfc <ETH_DMATxDescListInit+0x70>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68d9      	ldr	r1, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e004      	b.n	8005d06 <ETH_DMATxDescListInit+0x7a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	461a      	mov	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	60da      	str	r2, [r3, #12]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d9bd      	bls.n	8005c9a <ETH_DMATxDescListInit+0xe>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <ETH_DMARxDescListInit>:
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e048      	b.n	8005dde <ETH_DMARxDescListInit+0xa0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6919      	ldr	r1, [r3, #16]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	60da      	str	r2, [r3, #12]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	621a      	str	r2, [r3, #32]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	3212      	adds	r2, #18
 8005daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d80c      	bhi.n	8005dce <ETH_DMARxDescListInit+0x90>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6919      	ldr	r1, [r3, #16]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	440b      	add	r3, r1
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	e004      	b.n	8005dd8 <ETH_DMARxDescListInit+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d9b3      	bls.n	8005d4c <ETH_DMARxDescListInit+0xe>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	661a      	str	r2, [r3, #96]	@ 0x60
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	669a      	str	r2, [r3, #104]	@ 0x68
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_GPIO_Init>:
 8005e1c:	b480      	push	{r7}
 8005e1e:	b089      	sub	sp, #36	@ 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	2300      	movs	r3, #0
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	e175      	b.n	8006128 <HAL_GPIO_Init+0x30c>
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	f040 8164 	bne.w	8006122 <HAL_GPIO_Init+0x306>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d005      	beq.n	8005e72 <HAL_GPIO_Init+0x56>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d130      	bne.n	8005ed4 <HAL_GPIO_Init+0xb8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 0201 	and.w	r2, r3, #1
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d017      	beq.n	8005f10 <HAL_GPIO_Init+0xf4>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	2203      	movs	r2, #3
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d123      	bne.n	8005f64 <HAL_GPIO_Init+0x148>
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	08da      	lsrs	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3208      	adds	r2, #8
 8005f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	220f      	movs	r2, #15
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	08da      	lsrs	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3208      	adds	r2, #8
 8005f5e:	69b9      	ldr	r1, [r7, #24]
 8005f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	2203      	movs	r2, #3
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 0203 	and.w	r2, r3, #3
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80be 	beq.w	8006122 <HAL_GPIO_Init+0x306>
 8005fa6:	4b66      	ldr	r3, [pc, #408]	@ (8006140 <HAL_GPIO_Init+0x324>)
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	4a65      	ldr	r2, [pc, #404]	@ (8006140 <HAL_GPIO_Init+0x324>)
 8005fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fb2:	4b63      	ldr	r3, [pc, #396]	@ (8006140 <HAL_GPIO_Init+0x324>)
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a61      	ldr	r2, [pc, #388]	@ (8006144 <HAL_GPIO_Init+0x328>)
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	220f      	movs	r2, #15
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a58      	ldr	r2, [pc, #352]	@ (8006148 <HAL_GPIO_Init+0x32c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d037      	beq.n	800605a <HAL_GPIO_Init+0x23e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a57      	ldr	r2, [pc, #348]	@ (800614c <HAL_GPIO_Init+0x330>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_GPIO_Init+0x23a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a56      	ldr	r2, [pc, #344]	@ (8006150 <HAL_GPIO_Init+0x334>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <HAL_GPIO_Init+0x236>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a55      	ldr	r2, [pc, #340]	@ (8006154 <HAL_GPIO_Init+0x338>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d025      	beq.n	800604e <HAL_GPIO_Init+0x232>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a54      	ldr	r2, [pc, #336]	@ (8006158 <HAL_GPIO_Init+0x33c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01f      	beq.n	800604a <HAL_GPIO_Init+0x22e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a53      	ldr	r2, [pc, #332]	@ (800615c <HAL_GPIO_Init+0x340>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d019      	beq.n	8006046 <HAL_GPIO_Init+0x22a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a52      	ldr	r2, [pc, #328]	@ (8006160 <HAL_GPIO_Init+0x344>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_GPIO_Init+0x226>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a51      	ldr	r2, [pc, #324]	@ (8006164 <HAL_GPIO_Init+0x348>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00d      	beq.n	800603e <HAL_GPIO_Init+0x222>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a50      	ldr	r2, [pc, #320]	@ (8006168 <HAL_GPIO_Init+0x34c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <HAL_GPIO_Init+0x21e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a4f      	ldr	r2, [pc, #316]	@ (800616c <HAL_GPIO_Init+0x350>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_GPIO_Init+0x21a>
 8006032:	2309      	movs	r3, #9
 8006034:	e012      	b.n	800605c <HAL_GPIO_Init+0x240>
 8006036:	230a      	movs	r3, #10
 8006038:	e010      	b.n	800605c <HAL_GPIO_Init+0x240>
 800603a:	2308      	movs	r3, #8
 800603c:	e00e      	b.n	800605c <HAL_GPIO_Init+0x240>
 800603e:	2307      	movs	r3, #7
 8006040:	e00c      	b.n	800605c <HAL_GPIO_Init+0x240>
 8006042:	2306      	movs	r3, #6
 8006044:	e00a      	b.n	800605c <HAL_GPIO_Init+0x240>
 8006046:	2305      	movs	r3, #5
 8006048:	e008      	b.n	800605c <HAL_GPIO_Init+0x240>
 800604a:	2304      	movs	r3, #4
 800604c:	e006      	b.n	800605c <HAL_GPIO_Init+0x240>
 800604e:	2303      	movs	r3, #3
 8006050:	e004      	b.n	800605c <HAL_GPIO_Init+0x240>
 8006052:	2302      	movs	r3, #2
 8006054:	e002      	b.n	800605c <HAL_GPIO_Init+0x240>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <HAL_GPIO_Init+0x240>
 800605a:	2300      	movs	r3, #0
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	f002 0203 	and.w	r2, r2, #3
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	4093      	lsls	r3, r2
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4313      	orrs	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	4935      	ldr	r1, [pc, #212]	@ (8006144 <HAL_GPIO_Init+0x328>)
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	089b      	lsrs	r3, r3, #2
 8006072:	3302      	adds	r3, #2
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800607a:	4b3d      	ldr	r3, [pc, #244]	@ (8006170 <HAL_GPIO_Init+0x354>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_GPIO_Init+0x282>
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	4a34      	ldr	r2, [pc, #208]	@ (8006170 <HAL_GPIO_Init+0x354>)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	6093      	str	r3, [r2, #8]
 80060a4:	4b32      	ldr	r3, [pc, #200]	@ (8006170 <HAL_GPIO_Init+0x354>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	43db      	mvns	r3, r3
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	4013      	ands	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_GPIO_Init+0x2ac>
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	4a29      	ldr	r2, [pc, #164]	@ (8006170 <HAL_GPIO_Init+0x354>)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	60d3      	str	r3, [r2, #12]
 80060ce:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <HAL_GPIO_Init+0x354>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_Init+0x2d6>
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006170 <HAL_GPIO_Init+0x354>)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	6053      	str	r3, [r2, #4]
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <HAL_GPIO_Init+0x354>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	43db      	mvns	r3, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4013      	ands	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_GPIO_Init+0x300>
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <HAL_GPIO_Init+0x354>)
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3301      	adds	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2b0f      	cmp	r3, #15
 800612c:	f67f ae86 	bls.w	8005e3c <HAL_GPIO_Init+0x20>
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	3724      	adds	r7, #36	@ 0x24
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40023800 	.word	0x40023800
 8006144:	40013800 	.word	0x40013800
 8006148:	40020000 	.word	0x40020000
 800614c:	40020400 	.word	0x40020400
 8006150:	40020800 	.word	0x40020800
 8006154:	40020c00 	.word	0x40020c00
 8006158:	40021000 	.word	0x40021000
 800615c:	40021400 	.word	0x40021400
 8006160:	40021800 	.word	0x40021800
 8006164:	40021c00 	.word	0x40021c00
 8006168:	40022000 	.word	0x40022000
 800616c:	40022400 	.word	0x40022400
 8006170:	40013c00 	.word	0x40013c00

08006174 <HAL_GPIO_ReadPin>:
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_GPIO_ReadPin+0x1e>
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
 8006190:	e001      	b.n	8006196 <HAL_GPIO_ReadPin+0x22>
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_GPIO_WritePin>:
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
 80061b0:	4613      	mov	r3, r2
 80061b2:	707b      	strb	r3, [r7, #1]
 80061b4:	787b      	ldrb	r3, [r7, #1]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_GPIO_WritePin+0x1e>
 80061ba:	887a      	ldrh	r2, [r7, #2]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	619a      	str	r2, [r3, #24]
 80061c0:	e003      	b.n	80061ca <HAL_GPIO_WritePin+0x26>
 80061c2:	887b      	ldrh	r3, [r7, #2]
 80061c4:	041a      	lsls	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_I2C_Init>:
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_Init+0x12>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e08b      	b.n	8006302 <HAL_I2C_Init+0x12a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_I2C_Init+0x2c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fc fbf2 	bl	80029e8 <HAL_I2C_MspInit>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	@ 0x24
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006228:	611a      	str	r2, [r3, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006238:	609a      	str	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d107      	bne.n	8006252 <HAL_I2C_Init+0x7a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800624e:	609a      	str	r2, [r3, #8]
 8006250:	e006      	b.n	8006260 <HAL_I2C_Init+0x88>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d108      	bne.n	800627a <HAL_I2C_Init+0xa2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006276:	605a      	str	r2, [r3, #4]
 8006278:	e007      	b.n	800628a <HAL_I2C_Init+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b1d      	ldr	r3, [pc, #116]	@ (800630c <HAL_I2C_Init+0x134>)
 8006296:	430b      	orrs	r3, r1
 8006298:	6053      	str	r3, [r2, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	ea42 0103 	orr.w	r1, r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	60da      	str	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	69d9      	ldr	r1, [r3, #28]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006300:	2300      	movs	r3, #0
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	02008000 	.word	0x02008000

08006310 <HAL_I2CEx_ConfigAnalogFilter>:
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b20      	cmp	r3, #32
 8006324:	d138      	bne.n	8006398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006330:	2302      	movs	r3, #2
 8006332:	e032      	b.n	800639a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2224      	movs	r2, #36	@ 0x24
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006398:	2302      	movs	r3, #2
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_I2CEx_ConfigDigitalFilter>:
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d139      	bne.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e033      	b.n	8006432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2224      	movs	r2, #36	@ 0x24
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006430:	2302      	movs	r3, #2
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_LTDC_Init>:
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_LTDC_Init+0x12>
 800644c:	2301      	movs	r3, #1
 800644e:	e08f      	b.n	8006570 <HAL_LTDC_Init+0x132>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_LTDC_Init+0x2c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc fbe9 	bl	8002c3c <HAL_LTDC_MspInit>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006480:	619a      	str	r2, [r3, #24]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6999      	ldr	r1, [r3, #24]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	619a      	str	r2, [r3, #24]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6999      	ldr	r1, [r3, #24]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	041b      	lsls	r3, r3, #16
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a19      	ldr	r1, [r3, #32]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	611a      	str	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	615a      	str	r2, [r3, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006520:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0206 	orr.w	r2, r2, #6
 800654c:	635a      	str	r2, [r3, #52]	@ 0x34
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	619a      	str	r2, [r3, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800656e:	2300      	movs	r3, #0
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_LTDC_IRQHandler>:
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	d023      	beq.n	80065e2 <HAL_LTDC_IRQHandler+0x6a>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01e      	beq.n	80065e2 <HAL_LTDC_IRQHandler+0x6a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2204      	movs	r2, #4
 80065ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065c2:	f043 0201 	orr.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2204      	movs	r2, #4
 80065d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f86f 	bl	80066c0 <HAL_LTDC_ErrorCallback>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d023      	beq.n	8006634 <HAL_LTDC_IRQHandler+0xbc>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01e      	beq.n	8006634 <HAL_LTDC_IRQHandler+0xbc>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0202 	bic.w	r2, r2, #2
 8006604:	635a      	str	r2, [r3, #52]	@ 0x34
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2202      	movs	r2, #2
 800660c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006614:	f043 0202 	orr.w	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2204      	movs	r2, #4
 8006622:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f846 	bl	80066c0 <HAL_LTDC_ErrorCallback>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01b      	beq.n	8006676 <HAL_LTDC_IRQHandler+0xfe>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d016      	beq.n	8006676 <HAL_LTDC_IRQHandler+0xfe>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	635a      	str	r2, [r3, #52]	@ 0x34
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f82f 	bl	80066d4 <HAL_LTDC_LineEventCallback>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01b      	beq.n	80066b8 <HAL_LTDC_IRQHandler+0x140>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <HAL_LTDC_IRQHandler+0x140>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0208 	bic.w	r2, r2, #8
 8006698:	635a      	str	r2, [r3, #52]	@ 0x34
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2208      	movs	r2, #8
 80066a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f818 	bl	80066e8 <HAL_LTDC_ReloadEventCallback>
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_LTDC_ErrorCallback>:
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_LTDC_LineEventCallback>:
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_LTDC_ReloadEventCallback>:
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_LTDC_ConfigLayer>:
 80066fc:	b5b0      	push	{r4, r5, r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_LTDC_ConfigLayer+0x1a>
 8006712:	2302      	movs	r3, #2
 8006714:	e02c      	b.n	8006770 <HAL_LTDC_ConfigLayer+0x74>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2134      	movs	r1, #52	@ 0x34
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4614      	mov	r4, r2
 800673a:	461d      	mov	r5, r3
 800673c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800673e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f811 	bl	8006778 <LTDC_SetConfig>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2201      	movs	r2, #1
 800675c:	625a      	str	r2, [r3, #36]	@ 0x24
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 800676e:	2300      	movs	r3, #0
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bdb0      	pop	{r4, r5, r7, pc}

08006778 <LTDC_SetConfig>:
 8006778:	b480      	push	{r7}
 800677a:	b089      	sub	sp, #36	@ 0x24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006794:	4413      	add	r3, r2
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	01db      	lsls	r3, r3, #7
 80067a4:	4413      	add	r3, r2
 80067a6:	3384      	adds	r3, #132	@ 0x84
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	4611      	mov	r1, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	01d2      	lsls	r2, r2, #7
 80067b4:	440a      	add	r2, r1
 80067b6:	3284      	adds	r2, #132	@ 0x84
 80067b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80067bc:	6053      	str	r3, [r2, #4]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ce:	4413      	add	r3, r2
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4619      	mov	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	01db      	lsls	r3, r3, #7
 80067dc:	440b      	add	r3, r1
 80067de:	3384      	adds	r3, #132	@ 0x84
 80067e0:	4619      	mov	r1, r3
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067f6:	4413      	add	r3, r2
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	01db      	lsls	r3, r3, #7
 8006806:	4413      	add	r3, r2
 8006808:	3384      	adds	r3, #132	@ 0x84
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	4611      	mov	r1, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	01d2      	lsls	r2, r2, #7
 8006816:	440a      	add	r2, r1
 8006818:	3284      	adds	r2, #132	@ 0x84
 800681a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800681e:	6093      	str	r3, [r2, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800682e:	4413      	add	r3, r2
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4619      	mov	r1, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	01db      	lsls	r3, r3, #7
 800683c:	440b      	add	r3, r1
 800683e:	3384      	adds	r3, #132	@ 0x84
 8006840:	4619      	mov	r1, r3
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	01db      	lsls	r3, r3, #7
 8006852:	4413      	add	r3, r2
 8006854:	3384      	adds	r3, #132	@ 0x84
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	4611      	mov	r1, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	01d2      	lsls	r2, r2, #7
 8006862:	440a      	add	r2, r1
 8006864:	3284      	adds	r2, #132	@ 0x84
 8006866:	f023 0307 	bic.w	r3, r3, #7
 800686a:	6113      	str	r3, [r2, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	01db      	lsls	r3, r3, #7
 8006876:	4413      	add	r3, r2
 8006878:	3384      	adds	r3, #132	@ 0x84
 800687a:	461a      	mov	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	6113      	str	r3, [r2, #16]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068a4:	461a      	mov	r2, r3
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	01db      	lsls	r3, r3, #7
 80068b8:	440b      	add	r3, r1
 80068ba:	3384      	adds	r3, #132	@ 0x84
 80068bc:	4619      	mov	r1, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	618b      	str	r3, [r1, #24]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	01db      	lsls	r3, r3, #7
 80068ce:	4413      	add	r3, r2
 80068d0:	3384      	adds	r3, #132	@ 0x84
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	4611      	mov	r1, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	01d2      	lsls	r2, r2, #7
 80068de:	440a      	add	r2, r1
 80068e0:	3284      	adds	r2, #132	@ 0x84
 80068e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068e6:	6153      	str	r3, [r2, #20]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	01db      	lsls	r3, r3, #7
 80068f2:	4413      	add	r3, r2
 80068f4:	3384      	adds	r3, #132	@ 0x84
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	6153      	str	r3, [r2, #20]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	01db      	lsls	r3, r3, #7
 8006908:	4413      	add	r3, r2
 800690a:	3384      	adds	r3, #132	@ 0x84
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4619      	mov	r1, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	01db      	lsls	r3, r3, #7
 8006918:	440b      	add	r3, r1
 800691a:	3384      	adds	r3, #132	@ 0x84
 800691c:	4619      	mov	r1, r3
 800691e:	4b4f      	ldr	r3, [pc, #316]	@ (8006a5c <LTDC_SetConfig+0x2e4>)
 8006920:	4013      	ands	r3, r2
 8006922:	61cb      	str	r3, [r1, #28]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	68f9      	ldr	r1, [r7, #12]
 800692e:	6809      	ldr	r1, [r1, #0]
 8006930:	4608      	mov	r0, r1
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	01c9      	lsls	r1, r1, #7
 8006936:	4401      	add	r1, r0
 8006938:	3184      	adds	r1, #132	@ 0x84
 800693a:	4313      	orrs	r3, r2
 800693c:	61cb      	str	r3, [r1, #28]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	01db      	lsls	r3, r3, #7
 8006948:	4413      	add	r3, r2
 800694a:	3384      	adds	r3, #132	@ 0x84
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	6293      	str	r3, [r2, #40]	@ 0x28
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <LTDC_SetConfig+0x1ea>
 800695c:	2304      	movs	r3, #4
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	e01b      	b.n	800699a <LTDC_SetConfig+0x222>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <LTDC_SetConfig+0x1f8>
 800696a:	2303      	movs	r3, #3
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	e014      	b.n	800699a <LTDC_SetConfig+0x222>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d00b      	beq.n	8006990 <LTDC_SetConfig+0x218>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d007      	beq.n	8006990 <LTDC_SetConfig+0x218>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d003      	beq.n	8006990 <LTDC_SetConfig+0x218>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b07      	cmp	r3, #7
 800698e:	d102      	bne.n	8006996 <LTDC_SetConfig+0x21e>
 8006990:	2302      	movs	r3, #2
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e001      	b.n	800699a <LTDC_SetConfig+0x222>
 8006996:	2301      	movs	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	01db      	lsls	r3, r3, #7
 80069a4:	4413      	add	r3, r2
 80069a6:	3384      	adds	r3, #132	@ 0x84
 80069a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	4611      	mov	r1, r2
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	01d2      	lsls	r2, r2, #7
 80069b4:	440a      	add	r2, r1
 80069b6:	3284      	adds	r2, #132	@ 0x84
 80069b8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80069bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	fb02 f303 	mul.w	r3, r2, r3
 80069c8:	041a      	lsls	r2, r3, #16
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6859      	ldr	r1, [r3, #4]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	1acb      	subs	r3, r1, r3
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	3303      	adds	r3, #3
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	6809      	ldr	r1, [r1, #0]
 80069e0:	4608      	mov	r0, r1
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	01c9      	lsls	r1, r1, #7
 80069e6:	4401      	add	r1, r0
 80069e8:	3184      	adds	r1, #132	@ 0x84
 80069ea:	4313      	orrs	r3, r2
 80069ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	01db      	lsls	r3, r3, #7
 80069f8:	4413      	add	r3, r2
 80069fa:	3384      	adds	r3, #132	@ 0x84
 80069fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	01db      	lsls	r3, r3, #7
 8006a08:	440b      	add	r3, r1
 8006a0a:	3384      	adds	r3, #132	@ 0x84
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <LTDC_SetConfig+0x2e8>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	630b      	str	r3, [r1, #48]	@ 0x30
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	4413      	add	r3, r2
 8006a20:	3384      	adds	r3, #132	@ 0x84
 8006a22:	461a      	mov	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	4413      	add	r3, r2
 8006a36:	3384      	adds	r3, #132	@ 0x84
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	01d2      	lsls	r2, r2, #7
 8006a44:	440a      	add	r2, r1
 8006a46:	3284      	adds	r2, #132	@ 0x84
 8006a48:	f043 0301 	orr.w	r3, r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	bf00      	nop
 8006a50:	3724      	adds	r7, #36	@ 0x24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	fffff8f8 	.word	0xfffff8f8
 8006a60:	fffff800 	.word	0xfffff800

08006a64 <HAL_PWR_EnableBkUpAccess>:
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a04      	ldr	r2, [pc, #16]	@ (8006a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40007000 	.word	0x40007000

08006a84 <HAL_PWREx_EnableOverDrive>:
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	4b23      	ldr	r3, [pc, #140]	@ (8006b1c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	4a22      	ldr	r2, [pc, #136]	@ (8006b1c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a9a:	4b20      	ldr	r3, [pc, #128]	@ (8006b1c <HAL_PWREx_EnableOverDrive+0x98>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8006b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8006b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	f7fd fe37 	bl	8004724 <HAL_GetTick>
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	e009      	b.n	8006ace <HAL_PWREx_EnableOverDrive+0x4a>
 8006aba:	f7fd fe33 	bl	8004724 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ac8:	d901      	bls.n	8006ace <HAL_PWREx_EnableOverDrive+0x4a>
 8006aca:	2303      	movs	r3, #3
 8006acc:	e022      	b.n	8006b14 <HAL_PWREx_EnableOverDrive+0x90>
 8006ace:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d1ee      	bne.n	8006aba <HAL_PWREx_EnableOverDrive+0x36>
 8006adc:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8006b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	f7fd fe1c 	bl	8004724 <HAL_GetTick>
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	e009      	b.n	8006b04 <HAL_PWREx_EnableOverDrive+0x80>
 8006af0:	f7fd fe18 	bl	8004724 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006afe:	d901      	bls.n	8006b04 <HAL_PWREx_EnableOverDrive+0x80>
 8006b00:	2303      	movs	r3, #3
 8006b02:	e007      	b.n	8006b14 <HAL_PWREx_EnableOverDrive+0x90>
 8006b04:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b10:	d1ee      	bne.n	8006af0 <HAL_PWREx_EnableOverDrive+0x6c>
 8006b12:	2300      	movs	r3, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	40007000 	.word	0x40007000

08006b24 <HAL_QSPI_Init>:
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	f7fd fdfa 	bl	8004724 <HAL_GetTick>
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_QSPI_Init+0x18>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e067      	b.n	8006c0c <HAL_QSPI_Init+0xe8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <HAL_QSPI_Init+0x3c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fc fa7b 	bl	800304c <HAL_QSPI_MspInit>
 8006b56:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f85e 	bl	8006c1c <HAL_QSPI_SetTimeout>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	021a      	lsls	r2, r3, #8
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	2120      	movs	r1, #32
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f856 	bl	8006c38 <QSPI_WaitFlagStateUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	72fb      	strb	r3, [r7, #11]
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d135      	bne.n	8006c02 <HAL_QSPI_Init+0xde>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c14 <HAL_QSPI_Init+0xf0>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6852      	ldr	r2, [r2, #4]
 8006ba4:	0611      	lsls	r1, r2, #24
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	68d2      	ldr	r2, [r2, #12]
 8006baa:	4311      	orrs	r1, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	69d2      	ldr	r2, [r2, #28]
 8006bb0:	4311      	orrs	r1, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6a12      	ldr	r2, [r2, #32]
 8006bb6:	4311      	orrs	r1, r2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4b14      	ldr	r3, [pc, #80]	@ (8006c18 <HAL_QSPI_Init+0xf4>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6912      	ldr	r2, [r2, #16]
 8006bce:	0411      	lsls	r1, r2, #16
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6952      	ldr	r2, [r2, #20]
 8006bd4:	4311      	orrs	r1, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6992      	ldr	r2, [r2, #24]
 8006bda:	4311      	orrs	r1, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	430b      	orrs	r3, r1
 8006be2:	6053      	str	r3, [r2, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	645a      	str	r2, [r3, #68]	@ 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	00ffff2f 	.word	0x00ffff2f
 8006c18:	ffe0f8fe 	.word	0xffe0f8fe

08006c1c <HAL_QSPI_SetTimeout>:
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	649a      	str	r2, [r3, #72]	@ 0x48
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <QSPI_WaitFlagStateUntilTimeout>:
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	71fb      	strb	r3, [r7, #7]
 8006c48:	e01a      	b.n	8006c80 <QSPI_WaitFlagStateUntilTimeout+0x48>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d016      	beq.n	8006c80 <QSPI_WaitFlagStateUntilTimeout+0x48>
 8006c52:	f7fd fd67 	bl	8004724 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d302      	bcc.n	8006c68 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <QSPI_WaitFlagStateUntilTimeout+0x48>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e00e      	b.n	8006c9e <QSPI_WaitFlagStateUntilTimeout+0x66>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d1d6      	bne.n	8006c4a <QSPI_WaitFlagStateUntilTimeout+0x12>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <HAL_RCC_OscConfig>:
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	75fb      	strb	r3, [r7, #23]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCC_OscConfig+0x16>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e291      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8087 	beq.w	8006dda <HAL_RCC_OscConfig+0x132>
 8006ccc:	4b96      	ldr	r3, [pc, #600]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 030c 	and.w	r3, r3, #12
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d00c      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x4a>
 8006cd8:	4b93      	ldr	r3, [pc, #588]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 030c 	and.w	r3, r3, #12
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d112      	bne.n	8006d0a <HAL_RCC_OscConfig+0x62>
 8006ce4:	4b90      	ldr	r3, [pc, #576]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf0:	d10b      	bne.n	8006d0a <HAL_RCC_OscConfig+0x62>
 8006cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d06c      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x130>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d168      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x130>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e26b      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d12:	d106      	bne.n	8006d22 <HAL_RCC_OscConfig+0x7a>
 8006d14:	4b84      	ldr	r3, [pc, #528]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a83      	ldr	r2, [pc, #524]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e02e      	b.n	8006d80 <HAL_RCC_OscConfig+0xd8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10c      	bne.n	8006d44 <HAL_RCC_OscConfig+0x9c>
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	4b7c      	ldr	r3, [pc, #496]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e01d      	b.n	8006d80 <HAL_RCC_OscConfig+0xd8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0xc0>
 8006d4e:	4b76      	ldr	r3, [pc, #472]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a75      	ldr	r2, [pc, #468]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4b73      	ldr	r3, [pc, #460]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a72      	ldr	r2, [pc, #456]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0xd8>
 8006d68:	4b6f      	ldr	r3, [pc, #444]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	4b6c      	ldr	r3, [pc, #432]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a6b      	ldr	r2, [pc, #428]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d013      	beq.n	8006db0 <HAL_RCC_OscConfig+0x108>
 8006d88:	f7fd fccc 	bl	8004724 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0xfa>
 8006d90:	f7fd fcc8 	bl	8004724 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b64      	cmp	r3, #100	@ 0x64
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0xfa>
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e21f      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006da2:	4b61      	ldr	r3, [pc, #388]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0xe8>
 8006dae:	e014      	b.n	8006dda <HAL_RCC_OscConfig+0x132>
 8006db0:	f7fd fcb8 	bl	8004724 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x122>
 8006db8:	f7fd fcb4 	bl	8004724 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	@ 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x122>
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e20b      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006dca:	4b57      	ldr	r3, [pc, #348]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x110>
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x132>
 8006dd8:	bf00      	nop
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d069      	beq.n	8006eba <HAL_RCC_OscConfig+0x212>
 8006de6:	4b50      	ldr	r3, [pc, #320]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_RCC_OscConfig+0x162>
 8006df2:	4b4d      	ldr	r3, [pc, #308]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d11c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x190>
 8006dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d116      	bne.n	8006e38 <HAL_RCC_OscConfig+0x190>
 8006e0a:	4b47      	ldr	r3, [pc, #284]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_RCC_OscConfig+0x17a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d001      	beq.n	8006e22 <HAL_RCC_OscConfig+0x17a>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e1df      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006e22:	4b41      	ldr	r3, [pc, #260]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	493d      	ldr	r1, [pc, #244]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]
 8006e36:	e040      	b.n	8006eba <HAL_RCC_OscConfig+0x212>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d023      	beq.n	8006e88 <HAL_RCC_OscConfig+0x1e0>
 8006e40:	4b39      	ldr	r3, [pc, #228]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a38      	ldr	r2, [pc, #224]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	f7fd fc6a 	bl	8004724 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x1be>
 8006e54:	f7fd fc66 	bl	8004724 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x1be>
 8006e62:	2303      	movs	r3, #3
 8006e64:	e1bd      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006e66:	4b30      	ldr	r3, [pc, #192]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCC_OscConfig+0x1ac>
 8006e72:	4b2d      	ldr	r3, [pc, #180]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	4929      	ldr	r1, [pc, #164]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]
 8006e86:	e018      	b.n	8006eba <HAL_RCC_OscConfig+0x212>
 8006e88:	4b27      	ldr	r3, [pc, #156]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	f7fd fc46 	bl	8004724 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x206>
 8006e9c:	f7fd fc42 	bl	8004724 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x206>
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e199      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006eae:	4b1e      	ldr	r3, [pc, #120]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1f4>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d038      	beq.n	8006f38 <HAL_RCC_OscConfig+0x290>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d019      	beq.n	8006f02 <HAL_RCC_OscConfig+0x25a>
 8006ece:	4b16      	ldr	r3, [pc, #88]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ed2:	4a15      	ldr	r2, [pc, #84]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	6753      	str	r3, [r2, #116]	@ 0x74
 8006eda:	f7fd fc23 	bl	8004724 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCC_OscConfig+0x24c>
 8006ee2:	f7fd fc1f 	bl	8004724 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x24c>
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e176      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0f0      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x23a>
 8006f00:	e01a      	b.n	8006f38 <HAL_RCC_OscConfig+0x290>
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f06:	4a08      	ldr	r2, [pc, #32]	@ (8006f28 <HAL_RCC_OscConfig+0x280>)
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	6753      	str	r3, [r2, #116]	@ 0x74
 8006f0e:	f7fd fc09 	bl	8004724 <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]
 8006f14:	e00a      	b.n	8006f2c <HAL_RCC_OscConfig+0x284>
 8006f16:	f7fd fc05 	bl	8004724 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d903      	bls.n	8006f2c <HAL_RCC_OscConfig+0x284>
 8006f24:	2303      	movs	r3, #3
 8006f26:	e15c      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	4b91      	ldr	r3, [pc, #580]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ee      	bne.n	8006f16 <HAL_RCC_OscConfig+0x26e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80a4 	beq.w	800708e <HAL_RCC_OscConfig+0x3e6>
 8006f46:	4b8b      	ldr	r3, [pc, #556]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10d      	bne.n	8006f6e <HAL_RCC_OscConfig+0x2c6>
 8006f52:	4b88      	ldr	r3, [pc, #544]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	4a87      	ldr	r2, [pc, #540]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f5e:	4b85      	ldr	r3, [pc, #532]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f66:	60bb      	str	r3, [r7, #8]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
 8006f6e:	4b82      	ldr	r3, [pc, #520]	@ (8007178 <HAL_RCC_OscConfig+0x4d0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d118      	bne.n	8006fac <HAL_RCC_OscConfig+0x304>
 8006f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8007178 <HAL_RCC_OscConfig+0x4d0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8007178 <HAL_RCC_OscConfig+0x4d0>)
 8006f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	f7fd fbcd 	bl	8004724 <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x2f8>
 8006f8e:	f7fd fbc9 	bl	8004724 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b64      	cmp	r3, #100	@ 0x64
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x2f8>
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e120      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8006fa0:	4b75      	ldr	r3, [pc, #468]	@ (8007178 <HAL_RCC_OscConfig+0x4d0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCC_OscConfig+0x2e6>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x31a>
 8006fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc0:	e02d      	b.n	800701e <HAL_RCC_OscConfig+0x376>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x33c>
 8006fca:	4b6a      	ldr	r3, [pc, #424]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fce:	4a69      	ldr	r2, [pc, #420]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fd6:	4b67      	ldr	r3, [pc, #412]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fda:	4a66      	ldr	r2, [pc, #408]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fdc:	f023 0304 	bic.w	r3, r3, #4
 8006fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fe2:	e01c      	b.n	800701e <HAL_RCC_OscConfig+0x376>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b05      	cmp	r3, #5
 8006fea:	d10c      	bne.n	8007006 <HAL_RCC_OscConfig+0x35e>
 8006fec:	4b61      	ldr	r3, [pc, #388]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff0:	4a60      	ldr	r2, [pc, #384]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006ff2:	f043 0304 	orr.w	r3, r3, #4
 8006ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	6713      	str	r3, [r2, #112]	@ 0x70
 8007004:	e00b      	b.n	800701e <HAL_RCC_OscConfig+0x376>
 8007006:	4b5b      	ldr	r3, [pc, #364]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700a:	4a5a      	ldr	r2, [pc, #360]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 800700c:	f023 0301 	bic.w	r3, r3, #1
 8007010:	6713      	str	r3, [r2, #112]	@ 0x70
 8007012:	4b58      	ldr	r3, [pc, #352]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	4a57      	ldr	r2, [pc, #348]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007018:	f023 0304 	bic.w	r3, r3, #4
 800701c:	6713      	str	r3, [r2, #112]	@ 0x70
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d015      	beq.n	8007052 <HAL_RCC_OscConfig+0x3aa>
 8007026:	f7fd fb7d 	bl	8004724 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]
 800702c:	e00a      	b.n	8007044 <HAL_RCC_OscConfig+0x39c>
 800702e:	f7fd fb79 	bl	8004724 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800703c:	4293      	cmp	r3, r2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x39c>
 8007040:	2303      	movs	r3, #3
 8007042:	e0ce      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8007044:	4b4b      	ldr	r3, [pc, #300]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0ee      	beq.n	800702e <HAL_RCC_OscConfig+0x386>
 8007050:	e014      	b.n	800707c <HAL_RCC_OscConfig+0x3d4>
 8007052:	f7fd fb67 	bl	8004724 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]
 8007058:	e00a      	b.n	8007070 <HAL_RCC_OscConfig+0x3c8>
 800705a:	f7fd fb63 	bl	8004724 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x3c8>
 800706c:	2303      	movs	r3, #3
 800706e:	e0b8      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8007070:	4b40      	ldr	r3, [pc, #256]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1ee      	bne.n	800705a <HAL_RCC_OscConfig+0x3b2>
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d105      	bne.n	800708e <HAL_RCC_OscConfig+0x3e6>
 8007082:	4b3c      	ldr	r3, [pc, #240]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	4a3b      	ldr	r2, [pc, #236]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007088:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800708c:	6413      	str	r3, [r2, #64]	@ 0x40
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80a4 	beq.w	80071e0 <HAL_RCC_OscConfig+0x538>
 8007098:	4b36      	ldr	r3, [pc, #216]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d06b      	beq.n	800717c <HAL_RCC_OscConfig+0x4d4>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d149      	bne.n	8007140 <HAL_RCC_OscConfig+0x498>
 80070ac:	4b31      	ldr	r3, [pc, #196]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a30      	ldr	r2, [pc, #192]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 80070b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	f7fd fb34 	bl	8004724 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x42a>
 80070c0:	f7fd fb30 	bl	8004724 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x42a>
 80070ce:	2303      	movs	r3, #3
 80070d0:	e087      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 80070d2:	4b28      	ldr	r3, [pc, #160]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x418>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69da      	ldr	r2, [r3, #28]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	3b01      	subs	r3, #1
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	061b      	lsls	r3, r3, #24
 8007102:	4313      	orrs	r3, r2
 8007104:	4a1b      	ldr	r2, [pc, #108]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007106:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800710a:	6053      	str	r3, [r2, #4]
 800710c:	4b19      	ldr	r3, [pc, #100]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a18      	ldr	r2, [pc, #96]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	f7fd fb04 	bl	8004724 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x48a>
 8007120:	f7fd fb00 	bl	8004724 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x48a>
 800712e:	2303      	movs	r3, #3
 8007130:	e057      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x478>
 800713e:	e04f      	b.n	80071e0 <HAL_RCC_OscConfig+0x538>
 8007140:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a0b      	ldr	r2, [pc, #44]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	f7fd faea 	bl	8004724 <HAL_GetTick>
 8007150:	6138      	str	r0, [r7, #16]
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x4be>
 8007154:	f7fd fae6 	bl	8004724 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x4be>
 8007162:	2303      	movs	r3, #3
 8007164:	e03d      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 8007166:	4b03      	ldr	r3, [pc, #12]	@ (8007174 <HAL_RCC_OscConfig+0x4cc>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x4ac>
 8007172:	e035      	b.n	80071e0 <HAL_RCC_OscConfig+0x538>
 8007174:	40023800 	.word	0x40023800
 8007178:	40007000 	.word	0x40007000
 800717c:	4b1b      	ldr	r3, [pc, #108]	@ (80071ec <HAL_RCC_OscConfig+0x544>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d028      	beq.n	80071dc <HAL_RCC_OscConfig+0x534>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	429a      	cmp	r2, r3
 8007196:	d121      	bne.n	80071dc <HAL_RCC_OscConfig+0x534>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d11a      	bne.n	80071dc <HAL_RCC_OscConfig+0x534>
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80071ac:	4013      	ands	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071b2:	0192      	lsls	r2, r2, #6
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d111      	bne.n	80071dc <HAL_RCC_OscConfig+0x534>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	3b01      	subs	r3, #1
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d107      	bne.n	80071dc <HAL_RCC_OscConfig+0x534>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	061b      	lsls	r3, r3, #24
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_OscConfig+0x538>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <HAL_RCC_OscConfig+0x53a>
 80071e0:	2300      	movs	r3, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800

080071f0 <HAL_RCC_ClockConfig>:
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_RCC_ClockConfig+0x18>
 8007204:	2301      	movs	r3, #1
 8007206:	e0d0      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 8007208:	4b6a      	ldr	r3, [pc, #424]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d910      	bls.n	8007238 <HAL_RCC_ClockConfig+0x48>
 8007216:	4b67      	ldr	r3, [pc, #412]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f023 020f 	bic.w	r2, r3, #15
 800721e:	4965      	ldr	r1, [pc, #404]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	4313      	orrs	r3, r2
 8007224:	600b      	str	r3, [r1, #0]
 8007226:	4b63      	ldr	r3, [pc, #396]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d001      	beq.n	8007238 <HAL_RCC_ClockConfig+0x48>
 8007234:	2301      	movs	r3, #1
 8007236:	e0b8      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d020      	beq.n	8007286 <HAL_RCC_ClockConfig+0x96>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_RCC_ClockConfig+0x6c>
 8007250:	4b59      	ldr	r3, [pc, #356]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4a58      	ldr	r2, [pc, #352]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007256:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800725a:	6093      	str	r3, [r2, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <HAL_RCC_ClockConfig+0x84>
 8007268:	4b53      	ldr	r3, [pc, #332]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	4a52      	ldr	r2, [pc, #328]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 800726e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007272:	6093      	str	r3, [r2, #8]
 8007274:	4b50      	ldr	r3, [pc, #320]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	494d      	ldr	r1, [pc, #308]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d040      	beq.n	8007314 <HAL_RCC_ClockConfig+0x124>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d107      	bne.n	80072aa <HAL_RCC_ClockConfig+0xba>
 800729a:	4b47      	ldr	r3, [pc, #284]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d115      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xe2>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e07f      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d107      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xd2>
 80072b2:	4b41      	ldr	r3, [pc, #260]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xe2>
 80072be:	2301      	movs	r3, #1
 80072c0:	e073      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 80072c2:	4b3d      	ldr	r3, [pc, #244]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_RCC_ClockConfig+0xe2>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e06b      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 80072d2:	4b39      	ldr	r3, [pc, #228]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f023 0203 	bic.w	r2, r3, #3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4936      	ldr	r1, [pc, #216]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]
 80072e4:	f7fd fa1e 	bl	8004724 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	e00a      	b.n	8007302 <HAL_RCC_ClockConfig+0x112>
 80072ec:	f7fd fa1a 	bl	8004724 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_ClockConfig+0x112>
 80072fe:	2303      	movs	r3, #3
 8007300:	e053      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 8007302:	4b2d      	ldr	r3, [pc, #180]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 020c 	and.w	r2, r3, #12
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	429a      	cmp	r2, r3
 8007312:	d1eb      	bne.n	80072ec <HAL_RCC_ClockConfig+0xfc>
 8007314:	4b27      	ldr	r3, [pc, #156]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d210      	bcs.n	8007344 <HAL_RCC_ClockConfig+0x154>
 8007322:	4b24      	ldr	r3, [pc, #144]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 020f 	bic.w	r2, r3, #15
 800732a:	4922      	ldr	r1, [pc, #136]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	4313      	orrs	r3, r2
 8007330:	600b      	str	r3, [r1, #0]
 8007332:	4b20      	ldr	r3, [pc, #128]	@ (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d001      	beq.n	8007344 <HAL_RCC_ClockConfig+0x154>
 8007340:	2301      	movs	r3, #1
 8007342:	e032      	b.n	80073aa <HAL_RCC_ClockConfig+0x1ba>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_RCC_ClockConfig+0x172>
 8007350:	4b19      	ldr	r3, [pc, #100]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4916      	ldr	r1, [pc, #88]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 800735e:	4313      	orrs	r3, r2
 8007360:	608b      	str	r3, [r1, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <HAL_RCC_ClockConfig+0x192>
 800736e:	4b12      	ldr	r3, [pc, #72]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	490e      	ldr	r1, [pc, #56]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
 8007382:	f000 f821 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 8007386:	4602      	mov	r2, r0
 8007388:	4b0b      	ldr	r3, [pc, #44]	@ (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	091b      	lsrs	r3, r3, #4
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	490a      	ldr	r1, [pc, #40]	@ (80073bc <HAL_RCC_ClockConfig+0x1cc>)
 8007394:	5ccb      	ldrb	r3, [r1, r3]
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	4a09      	ldr	r2, [pc, #36]	@ (80073c0 <HAL_RCC_ClockConfig+0x1d0>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <HAL_RCC_ClockConfig+0x1d4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fc faa6 	bl	80038f4 <HAL_InitTick>
 80073a8:	2300      	movs	r3, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40023c00 	.word	0x40023c00
 80073b8:	40023800 	.word	0x40023800
 80073bc:	08014e6c 	.word	0x08014e6c
 80073c0:	20000004 	.word	0x20000004
 80073c4:	20000008 	.word	0x20000008

080073c8 <HAL_RCC_GetSysClockFreq>:
 80073c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073cc:	b090      	sub	sp, #64	@ 0x40
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d4:	2300      	movs	r3, #0
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d8:	2300      	movs	r3, #0
 80073da:	633b      	str	r3, [r7, #48]	@ 0x30
 80073dc:	2300      	movs	r3, #0
 80073de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073e0:	4b59      	ldr	r3, [pc, #356]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x180>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 030c 	and.w	r3, r3, #12
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d00d      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x40>
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	f200 80a1 	bhi.w	8007534 <HAL_RCC_GetSysClockFreq+0x16c>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_RCC_GetSysClockFreq+0x34>
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d003      	beq.n	8007402 <HAL_RCC_GetSysClockFreq+0x3a>
 80073fa:	e09b      	b.n	8007534 <HAL_RCC_GetSysClockFreq+0x16c>
 80073fc:	4b53      	ldr	r3, [pc, #332]	@ (800754c <HAL_RCC_GetSysClockFreq+0x184>)
 80073fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007400:	e09b      	b.n	800753a <HAL_RCC_GetSysClockFreq+0x172>
 8007402:	4b53      	ldr	r3, [pc, #332]	@ (8007550 <HAL_RCC_GetSysClockFreq+0x188>)
 8007404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007406:	e098      	b.n	800753a <HAL_RCC_GetSysClockFreq+0x172>
 8007408:	4b4f      	ldr	r3, [pc, #316]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x180>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
 8007412:	4b4d      	ldr	r3, [pc, #308]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x180>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d028      	beq.n	8007470 <HAL_RCC_GetSysClockFreq+0xa8>
 800741e:	4b4a      	ldr	r3, [pc, #296]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x180>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	099b      	lsrs	r3, r3, #6
 8007424:	2200      	movs	r2, #0
 8007426:	623b      	str	r3, [r7, #32]
 8007428:	627a      	str	r2, [r7, #36]	@ 0x24
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007430:	2100      	movs	r1, #0
 8007432:	4b47      	ldr	r3, [pc, #284]	@ (8007550 <HAL_RCC_GetSysClockFreq+0x188>)
 8007434:	fb03 f201 	mul.w	r2, r3, r1
 8007438:	2300      	movs	r3, #0
 800743a:	fb00 f303 	mul.w	r3, r0, r3
 800743e:	4413      	add	r3, r2
 8007440:	4a43      	ldr	r2, [pc, #268]	@ (8007550 <HAL_RCC_GetSysClockFreq+0x188>)
 8007442:	fba0 1202 	umull	r1, r2, r0, r2
 8007446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007448:	460a      	mov	r2, r1
 800744a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800744c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744e:	4413      	add	r3, r2
 8007450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007454:	2200      	movs	r2, #0
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	61fa      	str	r2, [r7, #28]
 800745a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800745e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007462:	f7f9 fc31 	bl	8000cc8 <__aeabi_uldivmod>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4613      	mov	r3, r2
 800746c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800746e:	e053      	b.n	8007518 <HAL_RCC_GetSysClockFreq+0x150>
 8007470:	4b35      	ldr	r3, [pc, #212]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x180>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	099b      	lsrs	r3, r3, #6
 8007476:	2200      	movs	r2, #0
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	617a      	str	r2, [r7, #20]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007482:	f04f 0b00 	mov.w	fp, #0
 8007486:	4652      	mov	r2, sl
 8007488:	465b      	mov	r3, fp
 800748a:	f04f 0000 	mov.w	r0, #0
 800748e:	f04f 0100 	mov.w	r1, #0
 8007492:	0159      	lsls	r1, r3, #5
 8007494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007498:	0150      	lsls	r0, r2, #5
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	ebb2 080a 	subs.w	r8, r2, sl
 80074a2:	eb63 090b 	sbc.w	r9, r3, fp
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80074b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074ba:	ebb2 0408 	subs.w	r4, r2, r8
 80074be:	eb63 0509 	sbc.w	r5, r3, r9
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	00eb      	lsls	r3, r5, #3
 80074cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074d0:	00e2      	lsls	r2, r4, #3
 80074d2:	4614      	mov	r4, r2
 80074d4:	461d      	mov	r5, r3
 80074d6:	eb14 030a 	adds.w	r3, r4, sl
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	eb45 030b 	adc.w	r3, r5, fp
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	f04f 0300 	mov.w	r3, #0
 80074ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074ee:	4629      	mov	r1, r5
 80074f0:	028b      	lsls	r3, r1, #10
 80074f2:	4621      	mov	r1, r4
 80074f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074f8:	4621      	mov	r1, r4
 80074fa:	028a      	lsls	r2, r1, #10
 80074fc:	4610      	mov	r0, r2
 80074fe:	4619      	mov	r1, r3
 8007500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007502:	2200      	movs	r2, #0
 8007504:	60bb      	str	r3, [r7, #8]
 8007506:	60fa      	str	r2, [r7, #12]
 8007508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800750c:	f7f9 fbdc 	bl	8000cc8 <__aeabi_uldivmod>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4613      	mov	r3, r2
 8007516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007518:	4b0b      	ldr	r3, [pc, #44]	@ (8007548 <HAL_RCC_GetSysClockFreq+0x180>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	0c1b      	lsrs	r3, r3, #16
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	3301      	adds	r3, #1
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	633b      	str	r3, [r7, #48]	@ 0x30
 8007528:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007530:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007532:	e002      	b.n	800753a <HAL_RCC_GetSysClockFreq+0x172>
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <HAL_RCC_GetSysClockFreq+0x184>)
 8007536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007538:	bf00      	nop
 800753a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753c:	4618      	mov	r0, r3
 800753e:	3740      	adds	r7, #64	@ 0x40
 8007540:	46bd      	mov	sp, r7
 8007542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007546:	bf00      	nop
 8007548:	40023800 	.word	0x40023800
 800754c:	00f42400 	.word	0x00f42400
 8007550:	017d7840 	.word	0x017d7840

08007554 <HAL_RCC_GetHCLKFreq>:
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
 8007558:	4b03      	ldr	r3, [pc, #12]	@ (8007568 <HAL_RCC_GetHCLKFreq+0x14>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000004 	.word	0x20000004

0800756c <HAL_RCC_GetPCLK1Freq>:
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
 8007570:	f7ff fff0 	bl	8007554 <HAL_RCC_GetHCLKFreq>
 8007574:	4602      	mov	r2, r0
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	0a9b      	lsrs	r3, r3, #10
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	4903      	ldr	r1, [pc, #12]	@ (8007590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007582:	5ccb      	ldrb	r3, [r1, r3]
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	4618      	mov	r0, r3
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40023800 	.word	0x40023800
 8007590:	08014e7c 	.word	0x08014e7c

08007594 <HAL_RCC_GetPCLK2Freq>:
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
 8007598:	f7ff ffdc 	bl	8007554 <HAL_RCC_GetHCLKFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	0b5b      	lsrs	r3, r3, #13
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	4903      	ldr	r1, [pc, #12]	@ (80075b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	fa22 f303 	lsr.w	r3, r2, r3
 80075b0:	4618      	mov	r0, r3
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40023800 	.word	0x40023800
 80075b8:	08014e7c 	.word	0x08014e7c

080075bc <HAL_RCC_GetClockConfig>:
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	220f      	movs	r2, #15
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	4b12      	ldr	r3, [pc, #72]	@ (8007618 <HAL_RCC_GetClockConfig+0x5c>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0203 	and.w	r2, r3, #3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	605a      	str	r2, [r3, #4]
 80075d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007618 <HAL_RCC_GetClockConfig+0x5c>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	609a      	str	r2, [r3, #8]
 80075e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007618 <HAL_RCC_GetClockConfig+0x5c>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	4b09      	ldr	r3, [pc, #36]	@ (8007618 <HAL_RCC_GetClockConfig+0x5c>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	08db      	lsrs	r3, r3, #3
 80075f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	611a      	str	r2, [r3, #16]
 80075fe:	4b07      	ldr	r3, [pc, #28]	@ (800761c <HAL_RCC_GetClockConfig+0x60>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40023800 	.word	0x40023800
 800761c:	40023c00 	.word	0x40023c00

08007620 <HAL_RCCEx_PeriphCLKConfig>:
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d012      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007648:	4b69      	ldr	r3, [pc, #420]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4a68      	ldr	r2, [pc, #416]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007652:	6093      	str	r3, [r2, #8]
 8007654:	4b66      	ldr	r3, [pc, #408]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765c:	4964      	ldr	r1, [pc, #400]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800765e:	4313      	orrs	r3, r2
 8007660:	608b      	str	r3, [r1, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800766a:	2301      	movs	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d017      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800767a:	4b5d      	ldr	r3, [pc, #372]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800767c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007680:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007688:	4959      	ldr	r1, [pc, #356]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768a:	4313      	orrs	r3, r2
 800768c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007694:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007698:	d101      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800769a:	2301      	movs	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80076a6:	2301      	movs	r3, #1
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d017      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80076b6:	4b4e      	ldr	r3, [pc, #312]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c4:	494a      	ldr	r1, [pc, #296]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076d4:	d101      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xba>
 80076d6:	2301      	movs	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80076e2:	2301      	movs	r3, #1
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80076f2:	2301      	movs	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 808b 	beq.w	800781a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007704:	4b3a      	ldr	r3, [pc, #232]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007708:	4a39      	ldr	r2, [pc, #228]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800770a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800770e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007710:	4b37      	ldr	r3, [pc, #220]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4b35      	ldr	r3, [pc, #212]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a34      	ldr	r2, [pc, #208]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	f7fc fffc 	bl	8004724 <HAL_GetTick>
 800772c:	6178      	str	r0, [r7, #20]
 800772e:	e008      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8007730:	f7fc fff8 	bl	8004724 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	@ 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800773e:	2303      	movs	r3, #3
 8007740:	e357      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007742:	4b2c      	ldr	r3, [pc, #176]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800774e:	4b28      	ldr	r3, [pc, #160]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d035      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	429a      	cmp	r2, r3
 800776a:	d02e      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800776c:	4b20      	ldr	r3, [pc, #128]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	4b1e      	ldr	r3, [pc, #120]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777a:	4a1d      	ldr	r2, [pc, #116]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007780:	6713      	str	r3, [r2, #112]	@ 0x70
 8007782:	4b1b      	ldr	r3, [pc, #108]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007786:	4a1a      	ldr	r2, [pc, #104]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800778c:	6713      	str	r3, [r2, #112]	@ 0x70
 800778e:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6713      	str	r3, [r2, #112]	@ 0x70
 8007794:	4b16      	ldr	r3, [pc, #88]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b01      	cmp	r3, #1
 800779e:	d114      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80077a0:	f7fc ffc0 	bl	8004724 <HAL_GetTick>
 80077a4:	6178      	str	r0, [r7, #20]
 80077a6:	e00a      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80077a8:	f7fc ffbc 	bl	8004724 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80077ba:	2303      	movs	r3, #3
 80077bc:	e319      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077be:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0ee      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d6:	d111      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80077d8:	4b05      	ldr	r3, [pc, #20]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077e6:	400b      	ands	r3, r1
 80077e8:	4901      	ldr	r1, [pc, #4]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	608b      	str	r3, [r1, #8]
 80077ee:	e00b      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80077f0:	40023800 	.word	0x40023800
 80077f4:	40007000 	.word	0x40007000
 80077f8:	0ffffcff 	.word	0x0ffffcff
 80077fc:	4baa      	ldr	r3, [pc, #680]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4aa9      	ldr	r2, [pc, #676]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007802:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007806:	6093      	str	r3, [r2, #8]
 8007808:	4ba7      	ldr	r3, [pc, #668]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007814:	49a4      	ldr	r1, [pc, #656]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007816:	4313      	orrs	r3, r2
 8007818:	670b      	str	r3, [r1, #112]	@ 0x70
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b00      	cmp	r3, #0
 8007824:	d010      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007826:	4ba0      	ldr	r3, [pc, #640]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800782c:	4a9e      	ldr	r2, [pc, #632]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800782e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007836:	4b9c      	ldr	r3, [pc, #624]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007838:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007840:	4999      	ldr	r1, [pc, #612]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007842:	4313      	orrs	r3, r2
 8007844:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007854:	4b94      	ldr	r3, [pc, #592]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007862:	4991      	ldr	r1, [pc, #580]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007864:	4313      	orrs	r3, r2
 8007866:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007876:	4b8c      	ldr	r3, [pc, #560]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007884:	4988      	ldr	r1, [pc, #544]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007898:	4b83      	ldr	r3, [pc, #524]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a6:	4980      	ldr	r1, [pc, #512]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80078ba:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c8:	4977      	ldr	r1, [pc, #476]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80078dc:	4b72      	ldr	r3, [pc, #456]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e2:	f023 0203 	bic.w	r2, r3, #3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ea:	496f      	ldr	r1, [pc, #444]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80078fe:	4b6a      	ldr	r3, [pc, #424]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007904:	f023 020c 	bic.w	r2, r3, #12
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800790c:	4966      	ldr	r1, [pc, #408]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800790e:	4313      	orrs	r3, r2
 8007910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8007920:	4b61      	ldr	r3, [pc, #388]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007926:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792e:	495e      	ldr	r1, [pc, #376]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007930:	4313      	orrs	r3, r2
 8007932:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8007942:	4b59      	ldr	r3, [pc, #356]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007948:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007950:	4955      	ldr	r1, [pc, #340]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007964:	4b50      	ldr	r3, [pc, #320]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007972:	494d      	ldr	r1, [pc, #308]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007974:	4313      	orrs	r3, r2
 8007976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8007986:	4b48      	ldr	r3, [pc, #288]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007994:	4944      	ldr	r1, [pc, #272]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00a      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x39e>
 80079a8:	4b3f      	ldr	r3, [pc, #252]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b6:	493c      	ldr	r1, [pc, #240]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80079ca:	4b37      	ldr	r3, [pc, #220]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079d8:	4933      	ldr	r1, [pc, #204]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80079ec:	4b2e      	ldr	r3, [pc, #184]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079fa:	492b      	ldr	r1, [pc, #172]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d011      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8007a0e:	4b26      	ldr	r3, [pc, #152]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a1c:	4922      	ldr	r1, [pc, #136]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8007a4e:	4b16      	ldr	r3, [pc, #88]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a5c:	4912      	ldr	r1, [pc, #72]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8007a70:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a80:	4909      	ldr	r1, [pc, #36]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d006      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80d9 	beq.w	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8007a9c:	4b02      	ldr	r3, [pc, #8]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a01      	ldr	r2, [pc, #4]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aa6:	e001      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	f7fc fe39 	bl	8004724 <HAL_GetTick>
 8007ab2:	6178      	str	r0, [r7, #20]
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ab6:	f7fc fe35 	bl	8004724 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b64      	cmp	r3, #100	@ 0x64
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e194      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1f0      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d021      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d11d      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ae8:	4b64      	ldr	r3, [pc, #400]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	f003 0303 	and.w	r3, r3, #3
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	4b61      	ldr	r3, [pc, #388]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afc:	0e1b      	lsrs	r3, r3, #24
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	019a      	lsls	r2, r3, #6
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	041b      	lsls	r3, r3, #16
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	061b      	lsls	r3, r3, #24
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	071b      	lsls	r3, r3, #28
 8007b1c:	4957      	ldr	r1, [pc, #348]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b38:	d00a      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d02e      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b4e:	d129      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007b50:	4b4a      	ldr	r3, [pc, #296]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	4b47      	ldr	r3, [pc, #284]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b64:	0f1b      	lsrs	r3, r3, #28
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	019a      	lsls	r2, r3, #6
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	061b      	lsls	r3, r3, #24
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	071b      	lsls	r3, r3, #28
 8007b84:	493d      	ldr	r1, [pc, #244]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b92:	f023 021f 	bic.w	r2, r3, #31
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4937      	ldr	r1, [pc, #220]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01d      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007bb0:	4b32      	ldr	r3, [pc, #200]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bb6:	0e1b      	lsrs	r3, r3, #24
 8007bb8:	f003 030f 	and.w	r3, r3, #15
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc4:	0f1b      	lsrs	r3, r3, #28
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	019a      	lsls	r2, r3, #6
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	061b      	lsls	r3, r3, #24
 8007bde:	431a      	orrs	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	071b      	lsls	r3, r3, #28
 8007be4:	4925      	ldr	r1, [pc, #148]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d011      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	019a      	lsls	r2, r3, #6
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	061b      	lsls	r3, r3, #24
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	071b      	lsls	r3, r3, #28
 8007c14:	4919      	ldr	r1, [pc, #100]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007c1c:	4b17      	ldr	r3, [pc, #92]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a16      	ldr	r2, [pc, #88]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	f7fc fd7c 	bl	8004724 <HAL_GetTick>
 8007c2c:	6178      	str	r0, [r7, #20]
 8007c2e:	e008      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8007c30:	f7fc fd78 	bl	8004724 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b64      	cmp	r3, #100	@ 0x64
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e0d7      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c42:	4b0e      	ldr	r3, [pc, #56]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f0      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f040 80cd 	bne.w	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8007c56:	4b09      	ldr	r3, [pc, #36]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a08      	ldr	r2, [pc, #32]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	f7fc fd5f 	bl	8004724 <HAL_GetTick>
 8007c66:	6178      	str	r0, [r7, #20]
 8007c68:	e00a      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8007c6a:	f7fc fd5b 	bl	8004724 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b64      	cmp	r3, #100	@ 0x64
 8007c76:	d903      	bls.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e0ba      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	4b5e      	ldr	r3, [pc, #376]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c8c:	d0ed      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d009      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02e      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d12a      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8007cb6:	4b51      	ldr	r3, [pc, #324]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cbc:	0c1b      	lsrs	r3, r3, #16
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	613b      	str	r3, [r7, #16]
 8007cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cca:	0f1b      	lsrs	r3, r3, #28
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	019a      	lsls	r2, r3, #6
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	061b      	lsls	r3, r3, #24
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	071b      	lsls	r3, r3, #28
 8007cea:	4944      	ldr	r1, [pc, #272]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007cf2:	4b42      	ldr	r3, [pc, #264]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cf8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	3b01      	subs	r3, #1
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	493d      	ldr	r1, [pc, #244]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d022      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d20:	d11d      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007d22:	4b36      	ldr	r3, [pc, #216]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d28:	0e1b      	lsrs	r3, r3, #24
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	613b      	str	r3, [r7, #16]
 8007d30:	4b32      	ldr	r3, [pc, #200]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d36:	0f1b      	lsrs	r3, r3, #28
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	019a      	lsls	r2, r3, #6
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	061b      	lsls	r3, r3, #24
 8007d50:	431a      	orrs	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	071b      	lsls	r3, r3, #28
 8007d56:	4929      	ldr	r1, [pc, #164]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d028      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x79c>
 8007d6a:	4b24      	ldr	r3, [pc, #144]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d70:	0e1b      	lsrs	r3, r3, #24
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	4b20      	ldr	r3, [pc, #128]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	019a      	lsls	r2, r3, #6
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	431a      	orrs	r2, r3
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	061b      	lsls	r3, r3, #24
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	071b      	lsls	r3, r3, #28
 8007d9e:	4917      	ldr	r1, [pc, #92]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007da6:	4b15      	ldr	r3, [pc, #84]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	4911      	ldr	r1, [pc, #68]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	f7fc fcac 	bl	8004724 <HAL_GetTick>
 8007dcc:	6178      	str	r0, [r7, #20]
 8007dce:	e008      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8007dd0:	f7fc fca8 	bl	8004724 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b64      	cmp	r3, #100	@ 0x64
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8007dde:	2303      	movs	r3, #3
 8007de0:	e007      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007de2:	4b06      	ldr	r3, [pc, #24]	@ (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dee:	d1ef      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8007df0:	2300      	movs	r3, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40023800 	.word	0x40023800

08007e00 <HAL_RCCEx_GetPeriphCLKFreq>:
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	2300      	movs	r3, #0
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007e1e:	f040 808d 	bne.w	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007e22:	4b93      	ldr	r3, [pc, #588]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e38:	d07c      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e40:	d87b      	bhi.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d004      	beq.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e4e:	d039      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8007e50:	e073      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007e52:	4b87      	ldr	r3, [pc, #540]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d108      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 8007e5e:	4b84      	ldr	r3, [pc, #528]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e66:	4a83      	ldr	r2, [pc, #524]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	e007      	b.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8007e70:	4b7f      	ldr	r3, [pc, #508]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e78:	4a7f      	ldr	r2, [pc, #508]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	4b7b      	ldr	r3, [pc, #492]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e86:	0e1b      	lsrs	r3, r3, #24
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b78      	ldr	r3, [pc, #480]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e94:	099b      	lsrs	r3, r3, #6
 8007e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	fb03 f202 	mul.w	r2, r3, r2
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	4b71      	ldr	r3, [pc, #452]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e03b      	b.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8007ed0:	4b67      	ldr	r3, [pc, #412]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed8:	4a66      	ldr	r2, [pc, #408]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	e007      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8007ee2:	4b63      	ldr	r3, [pc, #396]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eea:	4a63      	ldr	r2, [pc, #396]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef8:	0e1b      	lsrs	r3, r3, #24
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	4b5b      	ldr	r3, [pc, #364]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	fb03 f202 	mul.w	r2, r3, r2
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	4b55      	ldr	r3, [pc, #340]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	e003      	b.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007f34:	4b51      	ldr	r3, [pc, #324]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e000      	b.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8007f3a:	bf00      	nop
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f42:	f040 808d 	bne.w	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007f46:	4b4a      	ldr	r3, [pc, #296]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f5c:	d07c      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f64:	d87b      	bhi.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f72:	d039      	beq.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8007f74:	e073      	b.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007f76:	4b3e      	ldr	r3, [pc, #248]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007f82:	4b3b      	ldr	r3, [pc, #236]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	e007      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007f94:	4b36      	ldr	r3, [pc, #216]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f9c:	4a36      	ldr	r2, [pc, #216]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	4b32      	ldr	r3, [pc, #200]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007faa:	0e1b      	lsrs	r3, r3, #24
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb8:	099b      	lsrs	r3, r3, #6
 8007fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	fb03 f202 	mul.w	r2, r3, r2
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	4b28      	ldr	r3, [pc, #160]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fd2:	0a1b      	lsrs	r3, r3, #8
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	3301      	adds	r3, #1
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	e03b      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007fe8:	4b21      	ldr	r3, [pc, #132]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d108      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	e007      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8008006:	4b1a      	ldr	r3, [pc, #104]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800800e:	4a1a      	ldr	r2, [pc, #104]	@ (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800801c:	0e1b      	lsrs	r3, r3, #24
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800802a:	099b      	lsrs	r3, r3, #6
 800802c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	fb03 f202 	mul.w	r2, r3, r2
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	3301      	adds	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	fbb2 f3f3 	udiv	r3, r2, r3
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	e003      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008058:	4b08      	ldr	r3, [pc, #32]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e000      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800805e:	bf00      	nop
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	4618      	mov	r0, r3
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40023800 	.word	0x40023800
 8008074:	00f42400 	.word	0x00f42400
 8008078:	017d7840 	.word	0x017d7840
 800807c:	00bb8000 	.word	0x00bb8000

08008080 <HAL_RTC_Init>:
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_RTC_Init+0x12>
 800808e:	2301      	movs	r3, #1
 8008090:	e071      	b.n	8008176 <HAL_RTC_Init+0xf6>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7f5b      	ldrb	r3, [r3, #29]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d105      	bne.n	80080a8 <HAL_RTC_Init+0x28>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	771a      	strb	r2, [r3, #28]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fb f906 	bl	80032b4 <HAL_RTC_MspInit>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	775a      	strb	r2, [r3, #29]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0310 	and.w	r3, r3, #16
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d053      	beq.n	8008164 <HAL_RTC_Init+0xe4>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	22ca      	movs	r2, #202	@ 0xca
 80080c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2253      	movs	r2, #83	@ 0x53
 80080ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fac7 	bl	8008660 <RTC_EnterInitMode>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d12a      	bne.n	8008132 <HAL_RTC_Init+0xb2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6899      	ldr	r1, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b26      	ldr	r3, [pc, #152]	@ (8008180 <HAL_RTC_Init+0x100>)
 80080e8:	400b      	ands	r3, r1
 80080ea:	6093      	str	r3, [r2, #8]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6899      	ldr	r1, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	609a      	str	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68d2      	ldr	r2, [r2, #12]
 8008112:	611a      	str	r2, [r3, #16]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6919      	ldr	r1, [r3, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	041a      	lsls	r2, r3, #16
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	611a      	str	r2, [r3, #16]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fad0 	bl	80086ce <RTC_ExitInitMode>
 800812e:	4603      	mov	r3, r0
 8008130:	73fb      	strb	r3, [r7, #15]
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d110      	bne.n	800815a <HAL_RTC_Init+0xda>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0208 	bic.w	r2, r2, #8
 8008146:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	64da      	str	r2, [r3, #76]	@ 0x4c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	22ff      	movs	r2, #255	@ 0xff
 8008160:	625a      	str	r2, [r3, #36]	@ 0x24
 8008162:	e001      	b.n	8008168 <HAL_RTC_Init+0xe8>
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <HAL_RTC_Init+0xf4>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	775a      	strb	r2, [r3, #29]
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	ff8fffbf 	.word	0xff8fffbf

08008184 <HAL_RTC_SetTime>:
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	7f1b      	ldrb	r3, [r3, #28]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_RTC_SetTime+0x1c>
 800819c:	2302      	movs	r3, #2
 800819e:	e085      	b.n	80082ac <HAL_RTC_SetTime+0x128>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	771a      	strb	r2, [r3, #28]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	775a      	strb	r2, [r3, #29]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d126      	bne.n	8008200 <HAL_RTC_SetTime+0x7c>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <HAL_RTC_SetTime+0x42>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	70da      	strb	r2, [r3, #3]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 faa4 	bl	8008718 <RTC_ByteToBcd2>
 80081d0:	4603      	mov	r3, r0
 80081d2:	041c      	lsls	r4, r3, #16
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fa9d 	bl	8008718 <RTC_ByteToBcd2>
 80081de:	4603      	mov	r3, r0
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	431c      	orrs	r4, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	789b      	ldrb	r3, [r3, #2]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fa95 	bl	8008718 <RTC_ByteToBcd2>
 80081ee:	4603      	mov	r3, r0
 80081f0:	ea44 0203 	orr.w	r2, r4, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	78db      	ldrb	r3, [r3, #3]
 80081f8:	059b      	lsls	r3, r3, #22
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e018      	b.n	8008232 <HAL_RTC_SetTime+0xae>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <HAL_RTC_SetTime+0x90>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2200      	movs	r2, #0
 8008212:	70da      	strb	r2, [r3, #3]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	041a      	lsls	r2, r3, #16
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	4313      	orrs	r3, r2
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	7892      	ldrb	r2, [r2, #2]
 8008226:	431a      	orrs	r2, r3
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	78db      	ldrb	r3, [r3, #3]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	22ca      	movs	r2, #202	@ 0xca
 8008238:	625a      	str	r2, [r3, #36]	@ 0x24
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2253      	movs	r2, #83	@ 0x53
 8008240:	625a      	str	r2, [r3, #36]	@ 0x24
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fa0c 	bl	8008660 <RTC_EnterInitMode>
 8008248:	4603      	mov	r3, r0
 800824a:	74fb      	strb	r3, [r7, #19]
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d11e      	bne.n	8008290 <HAL_RTC_SetTime+0x10c>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	6979      	ldr	r1, [r7, #20]
 8008258:	4b16      	ldr	r3, [pc, #88]	@ (80082b4 <HAL_RTC_SetTime+0x130>)
 800825a:	400b      	ands	r3, r1
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800826c:	609a      	str	r2, [r3, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	609a      	str	r2, [r3, #8]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 fa21 	bl	80086ce <RTC_ExitInitMode>
 800828c:	4603      	mov	r3, r0
 800828e:	74fb      	strb	r3, [r7, #19]
 8008290:	7cfb      	ldrb	r3, [r7, #19]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <HAL_RTC_SetTime+0x118>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	775a      	strb	r2, [r3, #29]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	22ff      	movs	r2, #255	@ 0xff
 80082a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	771a      	strb	r2, [r3, #28]
 80082aa:	7cfb      	ldrb	r3, [r7, #19]
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}
 80082b4:	007f7f7f 	.word	0x007f7f7f

080082b8 <HAL_RTC_SetDate>:
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	7f1b      	ldrb	r3, [r3, #28]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_RTC_SetDate+0x1c>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e06f      	b.n	80083b4 <HAL_RTC_SetDate+0xfc>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	771a      	strb	r2, [r3, #28]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2202      	movs	r2, #2
 80082de:	775a      	strb	r2, [r3, #29]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10e      	bne.n	8008304 <HAL_RTC_SetDate+0x4c>
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <HAL_RTC_SetDate+0x4c>
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	f023 0310 	bic.w	r3, r3, #16
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	330a      	adds	r3, #10
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	705a      	strb	r2, [r3, #1]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d11c      	bne.n	8008344 <HAL_RTC_SetDate+0x8c>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	78db      	ldrb	r3, [r3, #3]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fa02 	bl	8008718 <RTC_ByteToBcd2>
 8008314:	4603      	mov	r3, r0
 8008316:	041c      	lsls	r4, r3, #16
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f9fb 	bl	8008718 <RTC_ByteToBcd2>
 8008322:	4603      	mov	r3, r0
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	431c      	orrs	r4, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	789b      	ldrb	r3, [r3, #2]
 800832c:	4618      	mov	r0, r3
 800832e:	f000 f9f3 	bl	8008718 <RTC_ByteToBcd2>
 8008332:	4603      	mov	r3, r0
 8008334:	ea44 0203 	orr.w	r2, r4, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	035b      	lsls	r3, r3, #13
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	e00e      	b.n	8008362 <HAL_RTC_SetDate+0xaa>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	78db      	ldrb	r3, [r3, #3]
 8008348:	041a      	lsls	r2, r3, #16
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	4313      	orrs	r3, r2
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	7892      	ldrb	r2, [r2, #2]
 8008356:	431a      	orrs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	035b      	lsls	r3, r3, #13
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	22ca      	movs	r2, #202	@ 0xca
 8008368:	625a      	str	r2, [r3, #36]	@ 0x24
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2253      	movs	r2, #83	@ 0x53
 8008370:	625a      	str	r2, [r3, #36]	@ 0x24
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f974 	bl	8008660 <RTC_EnterInitMode>
 8008378:	4603      	mov	r3, r0
 800837a:	74fb      	strb	r3, [r7, #19]
 800837c:	7cfb      	ldrb	r3, [r7, #19]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <HAL_RTC_SetDate+0xe0>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	6979      	ldr	r1, [r7, #20]
 8008388:	4b0c      	ldr	r3, [pc, #48]	@ (80083bc <HAL_RTC_SetDate+0x104>)
 800838a:	400b      	ands	r3, r1
 800838c:	6053      	str	r3, [r2, #4]
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f99d 	bl	80086ce <RTC_ExitInitMode>
 8008394:	4603      	mov	r3, r0
 8008396:	74fb      	strb	r3, [r7, #19]
 8008398:	7cfb      	ldrb	r3, [r7, #19]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <HAL_RTC_SetDate+0xec>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	775a      	strb	r2, [r3, #29]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	22ff      	movs	r2, #255	@ 0xff
 80083aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	771a      	strb	r2, [r3, #28]
 80083b2:	7cfb      	ldrb	r3, [r7, #19]
 80083b4:	4618      	mov	r0, r3
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd90      	pop	{r4, r7, pc}
 80083bc:	00ffff3f 	.word	0x00ffff3f

080083c0 <HAL_RTC_SetAlarm>:
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b089      	sub	sp, #36	@ 0x24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]
 80083d0:	2300      	movs	r3, #0
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	7f1b      	ldrb	r3, [r3, #28]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_RTC_SetAlarm+0x24>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e113      	b.n	800860c <HAL_RTC_SetAlarm+0x24c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	771a      	strb	r2, [r3, #28]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2202      	movs	r2, #2
 80083ee:	775a      	strb	r2, [r3, #29]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d137      	bne.n	8008466 <HAL_RTC_SetAlarm+0xa6>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d102      	bne.n	800840a <HAL_RTC_SetAlarm+0x4a>
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2200      	movs	r2, #0
 8008408:	70da      	strb	r2, [r3, #3]
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f982 	bl	8008718 <RTC_ByteToBcd2>
 8008414:	4603      	mov	r3, r0
 8008416:	041c      	lsls	r4, r3, #16
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 f97b 	bl	8008718 <RTC_ByteToBcd2>
 8008422:	4603      	mov	r3, r0
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	431c      	orrs	r4, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	789b      	ldrb	r3, [r3, #2]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 f973 	bl	8008718 <RTC_ByteToBcd2>
 8008432:	4603      	mov	r3, r0
 8008434:	ea44 0203 	orr.w	r2, r4, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	78db      	ldrb	r3, [r3, #3]
 800843c:	059b      	lsls	r3, r3, #22
 800843e:	ea42 0403 	orr.w	r4, r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f965 	bl	8008718 <RTC_ByteToBcd2>
 800844e:	4603      	mov	r3, r0
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	ea44 0203 	orr.w	r2, r4, r3
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	431a      	orrs	r2, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e023      	b.n	80084ae <HAL_RTC_SetAlarm+0xee>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d102      	bne.n	800847a <HAL_RTC_SetAlarm+0xba>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	70da      	strb	r2, [r3, #3]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	041a      	lsls	r2, r3, #16
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	021b      	lsls	r3, r3, #8
 8008486:	4313      	orrs	r3, r2
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	7892      	ldrb	r2, [r2, #2]
 800848c:	431a      	orrs	r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	78db      	ldrb	r3, [r3, #3]
 8008492:	059b      	lsls	r3, r3, #22
 8008494:	431a      	orrs	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	431a      	orrs	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	61fb      	str	r3, [r7, #28]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	22ca      	movs	r2, #202	@ 0xca
 80084c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2253      	movs	r2, #83	@ 0x53
 80084c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084d2:	d148      	bne.n	8008566 <HAL_RTC_SetAlarm+0x1a6>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084e2:	609a      	str	r2, [r3, #8]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689a      	ldr	r2, [r3, #8]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084f2:	609a      	str	r2, [r3, #8]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008504:	60da      	str	r2, [r3, #12]
 8008506:	f7fc f90d 	bl	8004724 <HAL_GetTick>
 800850a:	61b8      	str	r0, [r7, #24]
 800850c:	e013      	b.n	8008536 <HAL_RTC_SetAlarm+0x176>
 800850e:	f7fc f909 	bl	8004724 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800851c:	d90b      	bls.n	8008536 <HAL_RTC_SetAlarm+0x176>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	22ff      	movs	r2, #255	@ 0xff
 8008524:	625a      	str	r2, [r3, #36]	@ 0x24
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2203      	movs	r2, #3
 800852a:	775a      	strb	r2, [r3, #29]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	771a      	strb	r2, [r3, #28]
 8008532:	2303      	movs	r3, #3
 8008534:	e06a      	b.n	800860c <HAL_RTC_SetAlarm+0x24c>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0e4      	beq.n	800850e <HAL_RTC_SetAlarm+0x14e>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	61da      	str	r2, [r3, #28]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	645a      	str	r2, [r3, #68]	@ 0x44
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	e047      	b.n	80085f6 <HAL_RTC_SetAlarm+0x236>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008574:	609a      	str	r2, [r3, #8]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008584:	609a      	str	r2, [r3, #8]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	b2da      	uxtb	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008596:	60da      	str	r2, [r3, #12]
 8008598:	f7fc f8c4 	bl	8004724 <HAL_GetTick>
 800859c:	61b8      	str	r0, [r7, #24]
 800859e:	e013      	b.n	80085c8 <HAL_RTC_SetAlarm+0x208>
 80085a0:	f7fc f8c0 	bl	8004724 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085ae:	d90b      	bls.n	80085c8 <HAL_RTC_SetAlarm+0x208>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	22ff      	movs	r2, #255	@ 0xff
 80085b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2203      	movs	r2, #3
 80085bc:	775a      	strb	r2, [r3, #29]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	771a      	strb	r2, [r3, #28]
 80085c4:	2303      	movs	r3, #3
 80085c6:	e021      	b.n	800860c <HAL_RTC_SetAlarm+0x24c>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0e4      	beq.n	80085a0 <HAL_RTC_SetAlarm+0x1e0>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	621a      	str	r2, [r3, #32]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085f4:	609a      	str	r2, [r3, #8]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	22ff      	movs	r2, #255	@ 0xff
 80085fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	775a      	strb	r2, [r3, #29]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	771a      	strb	r2, [r3, #28]
 800860a:	2300      	movs	r3, #0
 800860c:	4618      	mov	r0, r3
 800860e:	3724      	adds	r7, #36	@ 0x24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd90      	pop	{r4, r7, pc}

08008614 <HAL_RTC_WaitForSynchro>:
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0d      	ldr	r2, [pc, #52]	@ (800865c <HAL_RTC_WaitForSynchro+0x48>)
 8008626:	60da      	str	r2, [r3, #12]
 8008628:	f7fc f87c 	bl	8004724 <HAL_GetTick>
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	e009      	b.n	8008644 <HAL_RTC_WaitForSynchro+0x30>
 8008630:	f7fc f878 	bl	8004724 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800863e:	d901      	bls.n	8008644 <HAL_RTC_WaitForSynchro+0x30>
 8008640:	2303      	movs	r3, #3
 8008642:	e007      	b.n	8008654 <HAL_RTC_WaitForSynchro+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0ee      	beq.n	8008630 <HAL_RTC_WaitForSynchro+0x1c>
 8008652:	2300      	movs	r3, #0
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	0001ff5f 	.word	0x0001ff5f

08008660 <RTC_EnterInitMode>:
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	2300      	movs	r3, #0
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d122      	bne.n	80086c4 <RTC_EnterInitMode+0x64>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800868c:	60da      	str	r2, [r3, #12]
 800868e:	f7fc f849 	bl	8004724 <HAL_GetTick>
 8008692:	60b8      	str	r0, [r7, #8]
 8008694:	e00c      	b.n	80086b0 <RTC_EnterInitMode+0x50>
 8008696:	f7fc f845 	bl	8004724 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086a4:	d904      	bls.n	80086b0 <RTC_EnterInitMode+0x50>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2204      	movs	r2, #4
 80086aa:	775a      	strb	r2, [r3, #29]
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <RTC_EnterInitMode+0x64>
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d1e8      	bne.n	8008696 <RTC_EnterInitMode+0x36>
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <RTC_ExitInitMode>:
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <RTC_ExitInitMode+0x40>
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff ff8b 	bl	8008614 <HAL_RTC_WaitForSynchro>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <RTC_ExitInitMode+0x40>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2204      	movs	r2, #4
 8008708:	775a      	strb	r2, [r3, #29]
 800870a:	2301      	movs	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <RTC_ByteToBcd2>:
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e005      	b.n	8008734 <RTC_ByteToBcd2+0x1c>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3301      	adds	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	3b0a      	subs	r3, #10
 8008732:	71fb      	strb	r3, [r7, #7]
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b09      	cmp	r3, #9
 8008738:	d8f6      	bhi.n	8008728 <RTC_ByteToBcd2+0x10>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	b2da      	uxtb	r2, r3
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	4313      	orrs	r3, r2
 8008746:	b2db      	uxtb	r3, r3
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_RTCEx_SetTimeStamp>:
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	7f1b      	ldrb	r3, [r3, #28]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_RTCEx_SetTimeStamp+0x1c>
 800876c:	2302      	movs	r3, #2
 800876e:	e050      	b.n	8008812 <HAL_RTCEx_SetTimeStamp+0xbe>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	771a      	strb	r2, [r3, #28]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2202      	movs	r2, #2
 800877a:	775a      	strb	r2, [r3, #29]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0206 	bic.w	r2, r2, #6
 800878a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	430a      	orrs	r2, r1
 800879a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008820 <HAL_RTCEx_SetTimeStamp+0xcc>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	22ca      	movs	r2, #202	@ 0xca
 80087b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2253      	movs	r2, #83	@ 0x53
 80087be:	625a      	str	r2, [r3, #36]	@ 0x24
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80087d8:	60da      	str	r2, [r3, #12]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80087ea:	60da      	str	r2, [r3, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	22ff      	movs	r2, #255	@ 0xff
 8008802:	625a      	str	r2, [r3, #36]	@ 0x24
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	775a      	strb	r2, [r3, #29]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]
 8008810:	2300      	movs	r3, #0
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	fffff7f7 	.word	0xfffff7f7

08008824 <HAL_SAI_Init>:
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	2300      	movs	r3, #0
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	2300      	movs	r3, #0
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_SAI_Init+0x1e>
 800883e:	2301      	movs	r3, #1
 8008840:	e156      	b.n	8008af0 <HAL_SAI_Init+0x2cc>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_SAI_Init+0x38>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fa fe02 	bl	8003460 <HAL_SAI_MspInit>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f95b 	bl	8008b20 <SAI_Disable>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d00c      	beq.n	800888c <HAL_SAI_Init+0x68>
 8008872:	2b02      	cmp	r3, #2
 8008874:	d80d      	bhi.n	8008892 <HAL_SAI_Init+0x6e>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <HAL_SAI_Init+0x5c>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d003      	beq.n	8008886 <HAL_SAI_Init+0x62>
 800887e:	e008      	b.n	8008892 <HAL_SAI_Init+0x6e>
 8008880:	2300      	movs	r3, #0
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	e006      	b.n	8008894 <HAL_SAI_Init+0x70>
 8008886:	2310      	movs	r3, #16
 8008888:	61fb      	str	r3, [r7, #28]
 800888a:	e003      	b.n	8008894 <HAL_SAI_Init+0x70>
 800888c:	2320      	movs	r3, #32
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	e000      	b.n	8008894 <HAL_SAI_Init+0x70>
 8008892:	bf00      	nop
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d81e      	bhi.n	80088da <HAL_SAI_Init+0xb6>
 800889c:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <HAL_SAI_Init+0x80>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088bb 	.word	0x080088bb
 80088ac:	080088c3 	.word	0x080088c3
 80088b0:	080088cb 	.word	0x080088cb
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e010      	b.n	80088dc <HAL_SAI_Init+0xb8>
 80088ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e00c      	b.n	80088dc <HAL_SAI_Init+0xb8>
 80088c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e008      	b.n	80088dc <HAL_SAI_Init+0xb8>
 80088ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	f043 0301 	orr.w	r3, r3, #1
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	e000      	b.n	80088dc <HAL_SAI_Init+0xb8>
 80088da:	bf00      	nop
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a85      	ldr	r2, [pc, #532]	@ (8008af8 <HAL_SAI_Init+0x2d4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_SAI_Init+0xcc>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a84      	ldr	r2, [pc, #528]	@ (8008afc <HAL_SAI_Init+0x2d8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d103      	bne.n	80088f8 <HAL_SAI_Init+0xd4>
 80088f0:	4a83      	ldr	r2, [pc, #524]	@ (8008b00 <HAL_SAI_Init+0x2dc>)
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	e002      	b.n	80088fe <HAL_SAI_Init+0xda>
 80088f8:	4a82      	ldr	r2, [pc, #520]	@ (8008b04 <HAL_SAI_Init+0x2e0>)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d04c      	beq.n	80089a0 <HAL_SAI_Init+0x17c>
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a7a      	ldr	r2, [pc, #488]	@ (8008af8 <HAL_SAI_Init+0x2d4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d004      	beq.n	800891e <HAL_SAI_Init+0xfa>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a78      	ldr	r2, [pc, #480]	@ (8008afc <HAL_SAI_Init+0x2d8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d104      	bne.n	8008928 <HAL_SAI_Init+0x104>
 800891e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008922:	f7ff fa6d 	bl	8007e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8008926:	6138      	str	r0, [r7, #16]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a76      	ldr	r2, [pc, #472]	@ (8008b08 <HAL_SAI_Init+0x2e4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d004      	beq.n	800893c <HAL_SAI_Init+0x118>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a75      	ldr	r2, [pc, #468]	@ (8008b0c <HAL_SAI_Init+0x2e8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d104      	bne.n	8008946 <HAL_SAI_Init+0x122>
 800893c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008940:	f7ff fa5e 	bl	8007e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8008944:	6138      	str	r0, [r7, #16]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	025b      	lsls	r3, r3, #9
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a6b      	ldr	r2, [pc, #428]	@ (8008b10 <HAL_SAI_Init+0x2ec>)
 8008962:	fba2 2303 	umull	r2, r3, r2, r3
 8008966:	08da      	lsrs	r2, r3, #3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	621a      	str	r2, [r3, #32]
 800896c:	68f9      	ldr	r1, [r7, #12]
 800896e:	4b68      	ldr	r3, [pc, #416]	@ (8008b10 <HAL_SAI_Init+0x2ec>)
 8008970:	fba3 2301 	umull	r2, r3, r3, r1
 8008974:	08da      	lsrs	r2, r3, #3
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	1aca      	subs	r2, r1, r3
 8008980:	2a08      	cmp	r2, #8
 8008982:	d904      	bls.n	800898e <HAL_SAI_Init+0x16a>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	621a      	str	r2, [r3, #32]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008992:	2b04      	cmp	r3, #4
 8008994:	d104      	bne.n	80089a0 <HAL_SAI_Init+0x17c>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	085a      	lsrs	r2, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	621a      	str	r2, [r3, #32]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_SAI_Init+0x18c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d109      	bne.n	80089c4 <HAL_SAI_Init+0x1a0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_SAI_Init+0x198>
 80089b8:	2300      	movs	r3, #0
 80089ba:	e001      	b.n	80089c0 <HAL_SAI_Init+0x19c>
 80089bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	e008      	b.n	80089d6 <HAL_SAI_Init+0x1b2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d102      	bne.n	80089d2 <HAL_SAI_Init+0x1ae>
 80089cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089d0:	e000      	b.n	80089d4 <HAL_SAI_Init+0x1b0>
 80089d2:	2300      	movs	r3, #0
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b4c      	ldr	r3, [pc, #304]	@ (8008b14 <HAL_SAI_Init+0x2f0>)
 80089e2:	400b      	ands	r3, r1
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f4:	431a      	orrs	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a00:	431a      	orrs	r2, r3
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	431a      	orrs	r2, r3
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	051b      	lsls	r3, r3, #20
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	4b38      	ldr	r3, [pc, #224]	@ (8008b18 <HAL_SAI_Init+0x2f4>)
 8008a38:	400b      	ands	r3, r1
 8008a3a:	6053      	str	r3, [r2, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6859      	ldr	r1, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6899      	ldr	r1, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	4b2d      	ldr	r3, [pc, #180]	@ (8008b1c <HAL_SAI_Init+0x2f8>)
 8008a66:	400b      	ands	r3, r1
 8008a68:	6093      	str	r3, [r2, #8]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6899      	ldr	r1, [r3, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a74:	1e5a      	subs	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	021b      	lsls	r3, r3, #8
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	609a      	str	r2, [r3, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68d9      	ldr	r1, [r3, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008aa8:	400b      	ands	r3, r1
 8008aaa:	60d3      	str	r3, [r2, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68d9      	ldr	r1, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8008aee:	2300      	movs	r3, #0
 8008af0:	4618      	mov	r0, r3
 8008af2:	3720      	adds	r7, #32
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40015804 	.word	0x40015804
 8008afc:	40015824 	.word	0x40015824
 8008b00:	40015800 	.word	0x40015800
 8008b04:	40015c00 	.word	0x40015c00
 8008b08:	40015c04 	.word	0x40015c04
 8008b0c:	40015c24 	.word	0x40015c24
 8008b10:	cccccccd 	.word	0xcccccccd
 8008b14:	ff05c010 	.word	0xff05c010
 8008b18:	ffff1ff0 	.word	0xffff1ff0
 8008b1c:	fff88000 	.word	0xfff88000

08008b20 <SAI_Disable>:
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	4b17      	ldr	r3, [pc, #92]	@ (8008b88 <SAI_Disable+0x68>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a17      	ldr	r2, [pc, #92]	@ (8008b8c <SAI_Disable+0x6c>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	0b1b      	lsrs	r3, r3, #12
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	72fb      	strb	r3, [r7, #11]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	1e5a      	subs	r2, r3, #1
 8008b50:	60fa      	str	r2, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <SAI_Disable+0x4c>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008b66:	2303      	movs	r3, #3
 8008b68:	72fb      	strb	r3, [r7, #11]
 8008b6a:	e006      	b.n	8008b7a <SAI_Disable+0x5a>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e8      	bne.n	8008b4c <SAI_Disable+0x2c>
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	20000004 	.word	0x20000004
 8008b8c:	95cbec1b 	.word	0x95cbec1b

08008b90 <HAL_SD_Init>:
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_SD_Init+0x12>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e022      	b.n	8008be8 <HAL_SD_Init+0x58>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <HAL_SD_Init+0x2a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	771a      	strb	r2, [r3, #28]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7fa fcdf 	bl	8003578 <HAL_SD_MspInit>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2203      	movs	r2, #3
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f814 	bl	8008bf0 <HAL_SD_InitCard>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <HAL_SD_Init+0x42>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e00a      	b.n	8008be8 <HAL_SD_Init+0x58>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008be6:	2300      	movs	r3, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_SD_InitCard>:
 8008bf0:	b5b0      	push	{r4, r5, r7, lr}
 8008bf2:	b08e      	sub	sp, #56	@ 0x38
 8008bf4:	af04      	add	r7, sp, #16
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	2376      	movs	r3, #118	@ 0x76
 8008c0e:	623b      	str	r3, [r7, #32]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681d      	ldr	r5, [r3, #0]
 8008c14:	466c      	mov	r4, sp
 8008c16:	f107 0318 	add.w	r3, r7, #24
 8008c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f003 fe47 	bl	800c8bc <SDMMC_Init>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c3c:	605a      	str	r2, [r3, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f003 fe73 	bl	800c92e <SDMMC_PowerState_ON>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	2002      	movs	r0, #2
 8008c5a:	f7fb fd6f 	bl	800473c <HAL_Delay>
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fe10 	bl	8009884 <SD_PowerON>
 8008c64:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <HAL_SD_InitCard+0x94>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c80:	2301      	movs	r3, #1
 8008c82:	e02e      	b.n	8008ce2 <HAL_SD_InitCard+0xf2>
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fd2f 	bl	80096e8 <SD_InitCard>
 8008c8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <HAL_SD_InitCard+0xba>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e01b      	b.n	8008ce2 <HAL_SD_InitCard+0xf2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f003 fece 	bl	800ca54 <SDMMC_CmdBlockLength>
 8008cb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00f      	beq.n	8008ce0 <HAL_SD_InitCard+0xf0>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a09      	ldr	r2, [pc, #36]	@ (8008cec <HAL_SD_InitCard+0xfc>)
 8008cc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e000      	b.n	8008ce2 <HAL_SD_InitCard+0xf2>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3728      	adds	r7, #40	@ 0x28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8008cea:	bf00      	nop
 8008cec:	004005ff 	.word	0x004005ff

08008cf0 <HAL_SD_ReadBlocks_DMA>:
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08c      	sub	sp, #48	@ 0x30
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d107      	bne.n	8008d18 <HAL_SD_ReadBlocks_DMA+0x28>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d14:	2301      	movs	r3, #1
 8008d16:	e0c3      	b.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x1b0>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	f040 80bc 	bne.w	8008e9e <HAL_SD_ReadBlocks_DMA+0x1ae>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	441a      	add	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d907      	bls.n	8008d4a <HAL_SD_ReadBlocks_DMA+0x5a>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d46:	2301      	movs	r3, #1
 8008d48:	e0aa      	b.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x1b0>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2200      	movs	r2, #0
 8008d58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008d68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8008ea8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008d70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d76:	4a4d      	ldr	r2, [pc, #308]	@ (8008eac <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008d78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	2200      	movs	r2, #0
 8008d80:	651a      	str	r2, [r3, #80]	@ 0x50
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d86:	2200      	movs	r2, #0
 8008d88:	609a      	str	r2, [r3, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3380      	adds	r3, #128	@ 0x80
 8008db0:	4619      	mov	r1, r3
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	025b      	lsls	r3, r3, #9
 8008db8:	089b      	lsrs	r3, r3, #2
 8008dba:	f7fc f9c9 	bl	8005150 <HAL_DMA_Start_IT>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d017      	beq.n	8008df4 <HAL_SD_ReadBlocks_DMA+0x104>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a35      	ldr	r2, [pc, #212]	@ (8008eb0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008dda:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008df0:	2301      	movs	r3, #1
 8008df2:	e055      	b.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x1b0>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0208 	orr.w	r2, r2, #8
 8008e02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d002      	beq.n	8008e12 <HAL_SD_ReadBlocks_DMA+0x122>
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	025b      	lsls	r3, r3, #9
 8008e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e12:	f04f 33ff 	mov.w	r3, #4294967295
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	025b      	lsls	r3, r3, #9
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	2390      	movs	r3, #144	@ 0x90
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	2302      	movs	r3, #2
 8008e24:	61fb      	str	r3, [r7, #28]
 8008e26:	2300      	movs	r3, #0
 8008e28:	623b      	str	r3, [r7, #32]
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f107 0210 	add.w	r2, r7, #16
 8008e36:	4611      	mov	r1, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f003 fddf 	bl	800c9fc <SDMMC_ConfigData>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d90a      	bls.n	8008e5a <HAL_SD_ReadBlocks_DMA+0x16a>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2282      	movs	r2, #130	@ 0x82
 8008e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e50:	4618      	mov	r0, r3
 8008e52:	f003 fe43 	bl	800cadc <SDMMC_CmdReadMultiBlock>
 8008e56:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e58:	e009      	b.n	8008e6e <HAL_SD_ReadBlocks_DMA+0x17e>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2281      	movs	r2, #129	@ 0x81
 8008e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e66:	4618      	mov	r0, r3
 8008e68:	f003 fe16 	bl	800ca98 <SDMMC_CmdReadSingleBlock>
 8008e6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d012      	beq.n	8008e9a <HAL_SD_ReadBlocks_DMA+0x1aa>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008e7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e82:	431a      	orrs	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e96:	2301      	movs	r3, #1
 8008e98:	e002      	b.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x1b0>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e000      	b.n	8008ea0 <HAL_SD_ReadBlocks_DMA+0x1b0>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3730      	adds	r7, #48	@ 0x30
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	080095d3 	.word	0x080095d3
 8008eac:	08009645 	.word	0x08009645
 8008eb0:	004005ff 	.word	0x004005ff

08008eb4 <HAL_SD_WriteBlocks_DMA>:
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08c      	sub	sp, #48	@ 0x30
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <HAL_SD_WriteBlocks_DMA+0x28>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0c6      	b.n	800906a <HAL_SD_WriteBlocks_DMA+0x1b6>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	f040 80bf 	bne.w	8009068 <HAL_SD_WriteBlocks_DMA+0x1b4>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d907      	bls.n	8008f0e <HAL_SD_WriteBlocks_DMA+0x5a>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f02:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0ad      	b.n	800906a <HAL_SD_WriteBlocks_DMA+0x1b6>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2203      	movs	r2, #3
 8008f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 021a 	orr.w	r2, r2, #26
 8008f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f32:	4a50      	ldr	r2, [pc, #320]	@ (8009074 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008f34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8009078 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	2200      	movs	r2, #0
 8008f44:	651a      	str	r2, [r3, #80]	@ 0x50
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d002      	beq.n	8008f54 <HAL_SD_WriteBlocks_DMA+0xa0>
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	025b      	lsls	r3, r3, #9
 8008f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d90a      	bls.n	8008f70 <HAL_SD_WriteBlocks_DMA+0xbc>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	22a0      	movs	r2, #160	@ 0xa0
 8008f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f66:	4618      	mov	r0, r3
 8008f68:	f003 fdfc 	bl	800cb64 <SDMMC_CmdWriteMultiBlock>
 8008f6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008f6e:	e009      	b.n	8008f84 <HAL_SD_WriteBlocks_DMA+0xd0>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2290      	movs	r2, #144	@ 0x90
 8008f74:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f003 fdcf 	bl	800cb20 <SDMMC_CmdWriteSingleBlock>
 8008f82:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d012      	beq.n	8008fb0 <HAL_SD_WriteBlocks_DMA+0xfc>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800907c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fac:	2301      	movs	r3, #1
 8008fae:	e05c      	b.n	800906a <HAL_SD_WriteBlocks_DMA+0x1b6>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0208 	orr.w	r2, r2, #8
 8008fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc4:	2240      	movs	r2, #64	@ 0x40
 8008fc6:	609a      	str	r2, [r3, #8]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3380      	adds	r3, #128	@ 0x80
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	025b      	lsls	r3, r3, #9
 8008ff6:	089b      	lsrs	r3, r3, #2
 8008ff8:	f7fc f8aa 	bl	8005150 <HAL_DMA_Start_IT>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01a      	beq.n	8009038 <HAL_SD_WriteBlocks_DMA+0x184>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 021a 	bic.w	r2, r2, #26
 8009010:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a19      	ldr	r2, [pc, #100]	@ (800907c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009018:	639a      	str	r2, [r3, #56]	@ 0x38
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	639a      	str	r2, [r3, #56]	@ 0x38
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30
 8009034:	2301      	movs	r3, #1
 8009036:	e018      	b.n	800906a <HAL_SD_WriteBlocks_DMA+0x1b6>
 8009038:	f04f 33ff 	mov.w	r3, #4294967295
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	025b      	lsls	r3, r3, #9
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	2390      	movs	r3, #144	@ 0x90
 8009046:	61bb      	str	r3, [r7, #24]
 8009048:	2300      	movs	r3, #0
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	2300      	movs	r3, #0
 800904e:	623b      	str	r3, [r7, #32]
 8009050:	2301      	movs	r3, #1
 8009052:	627b      	str	r3, [r7, #36]	@ 0x24
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f107 0210 	add.w	r2, r7, #16
 800905c:	4611      	mov	r1, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f003 fccc 	bl	800c9fc <SDMMC_ConfigData>
 8009064:	2300      	movs	r3, #0
 8009066:	e000      	b.n	800906a <HAL_SD_WriteBlocks_DMA+0x1b6>
 8009068:	2302      	movs	r3, #2
 800906a:	4618      	mov	r0, r3
 800906c:	3730      	adds	r7, #48	@ 0x30
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	080095a9 	.word	0x080095a9
 8009078:	08009645 	.word	0x08009645
 800907c:	004005ff 	.word	0x004005ff

08009080 <HAL_SD_ErrorCallback>:
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_SD_GetCardCSD>:
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a2:	0f9b      	lsrs	r3, r3, #30
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ae:	0e9b      	lsrs	r3, r3, #26
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	705a      	strb	r2, [r3, #1]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090c0:	0e1b      	lsrs	r3, r3, #24
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	709a      	strb	r2, [r3, #2]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	70da      	strb	r2, [r3, #3]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090de:	0a1b      	lsrs	r3, r3, #8
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	711a      	strb	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	715a      	strb	r2, [r3, #5]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090f4:	0d1b      	lsrs	r3, r3, #20
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	80da      	strh	r2, [r3, #6]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	b2da      	uxtb	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	721a      	strb	r2, [r3, #8]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009112:	0bdb      	lsrs	r3, r3, #15
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	b2da      	uxtb	r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	725a      	strb	r2, [r3, #9]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009124:	0b9b      	lsrs	r3, r3, #14
 8009126:	b2db      	uxtb	r3, r3
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	b2da      	uxtb	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	729a      	strb	r2, [r3, #10]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009136:	0b5b      	lsrs	r3, r3, #13
 8009138:	b2db      	uxtb	r3, r3
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	b2da      	uxtb	r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	72da      	strb	r2, [r3, #11]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009148:	0b1b      	lsrs	r3, r3, #12
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	b2da      	uxtb	r2, r3
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	731a      	strb	r2, [r3, #12]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2200      	movs	r2, #0
 800915a:	735a      	strb	r2, [r3, #13]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009160:	2b00      	cmp	r3, #0
 8009162:	d163      	bne.n	800922c <HAL_SD_GetCardCSD+0x198>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009168:	009a      	lsls	r2, r3, #2
 800916a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800916e:	4013      	ands	r3, r2
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009174:	0f92      	lsrs	r2, r2, #30
 8009176:	431a      	orrs	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	611a      	str	r2, [r3, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009180:	0edb      	lsrs	r3, r3, #27
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	b2da      	uxtb	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	751a      	strb	r2, [r3, #20]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009192:	0e1b      	lsrs	r3, r3, #24
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	755a      	strb	r2, [r3, #21]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a4:	0d5b      	lsrs	r3, r3, #21
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0307 	and.w	r3, r3, #7
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	759a      	strb	r2, [r3, #22]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091b6:	0c9b      	lsrs	r3, r3, #18
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	75da      	strb	r2, [r3, #23]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c8:	0bdb      	lsrs	r3, r3, #15
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	761a      	strb	r2, [r3, #24]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	655a      	str	r2, [r3, #84]	@ 0x54
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	7e1b      	ldrb	r3, [r3, #24]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	3302      	adds	r3, #2
 80091ec:	2201      	movs	r2, #1
 80091ee:	fa02 f303 	lsl.w	r3, r2, r3
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80091f6:	fb03 f202 	mul.w	r2, r3, r2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	7a1b      	ldrb	r3, [r3, #8]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	2201      	movs	r2, #1
 800920a:	409a      	lsls	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009218:	0a52      	lsrs	r2, r2, #9
 800921a:	fb03 f202 	mul.w	r2, r3, r2
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009228:	661a      	str	r2, [r3, #96]	@ 0x60
 800922a:	e031      	b.n	8009290 <HAL_SD_GetCardCSD+0x1fc>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009230:	2b01      	cmp	r3, #1
 8009232:	d11d      	bne.n	8009270 <HAL_SD_GetCardCSD+0x1dc>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009238:	041b      	lsls	r3, r3, #16
 800923a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009242:	0c1b      	lsrs	r3, r3, #16
 8009244:	431a      	orrs	r2, r3
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	611a      	str	r2, [r3, #16]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	3301      	adds	r3, #1
 8009250:	029a      	lsls	r2, r3, #10
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	655a      	str	r2, [r3, #84]	@ 0x54
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009264:	659a      	str	r2, [r3, #88]	@ 0x58
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	661a      	str	r2, [r3, #96]	@ 0x60
 800926e:	e00f      	b.n	8009290 <HAL_SD_GetCardCSD+0x1fc>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a58      	ldr	r2, [pc, #352]	@ (80093d8 <HAL_SD_GetCardCSD+0x344>)
 8009276:	639a      	str	r2, [r3, #56]	@ 0x38
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	@ 0x38
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800928c:	2301      	movs	r3, #1
 800928e:	e09d      	b.n	80093cc <HAL_SD_GetCardCSD+0x338>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009294:	0b9b      	lsrs	r3, r3, #14
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	b2da      	uxtb	r2, r3
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	765a      	strb	r2, [r3, #25]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a6:	09db      	lsrs	r3, r3, #7
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	769a      	strb	r2, [r3, #26]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	76da      	strb	r2, [r3, #27]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092c8:	0fdb      	lsrs	r3, r3, #31
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	771a      	strb	r2, [r3, #28]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d4:	0f5b      	lsrs	r3, r3, #29
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	775a      	strb	r2, [r3, #29]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e6:	0e9b      	lsrs	r3, r3, #26
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 0307 	and.w	r3, r3, #7
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	779a      	strb	r2, [r3, #30]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f8:	0d9b      	lsrs	r3, r3, #22
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	b2da      	uxtb	r2, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	77da      	strb	r2, [r3, #31]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800930a:	0d5b      	lsrs	r3, r3, #21
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	f883 2020 	strb.w	r2, [r3, #32]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009326:	0c1b      	lsrs	r3, r3, #16
 8009328:	b2db      	uxtb	r3, r3
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	b2da      	uxtb	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933a:	0bdb      	lsrs	r3, r3, #15
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	b2da      	uxtb	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934e:	0b9b      	lsrs	r3, r3, #14
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009362:	0b5b      	lsrs	r3, r3, #13
 8009364:	b2db      	uxtb	r3, r3
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	b2da      	uxtb	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009376:	0b1b      	lsrs	r3, r3, #12
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	b2da      	uxtb	r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938a:	0a9b      	lsrs	r3, r3, #10
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	b2da      	uxtb	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b2:	085b      	lsrs	r3, r3, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80093ca:	2300      	movs	r3, #0
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	004005ff 	.word	0x004005ff

080093dc <HAL_SD_GetCardInfo>:
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	605a      	str	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	609a      	str	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	60da      	str	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	611a      	str	r2, [r3, #16]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	615a      	str	r2, [r3, #20]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	619a      	str	r2, [r3, #24]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	61da      	str	r2, [r3, #28]
 8009426:	2300      	movs	r3, #0
 8009428:	4618      	mov	r0, r3
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_SD_ConfigWideBusOperation>:
 8009434:	b5b0      	push	{r4, r5, r7, lr}
 8009436:	b08e      	sub	sp, #56	@ 0x38
 8009438:	af04      	add	r7, sp, #16
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	2300      	movs	r3, #0
 8009440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2203      	movs	r2, #3
 8009448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009450:	2b03      	cmp	r3, #3
 8009452:	d02e      	beq.n	80094b2 <HAL_SD_ConfigWideBusOperation+0x7e>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800945a:	d106      	bne.n	800946a <HAL_SD_ConfigWideBusOperation+0x36>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009460:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	639a      	str	r2, [r3, #56]	@ 0x38
 8009468:	e029      	b.n	80094be <HAL_SD_ConfigWideBusOperation+0x8a>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009470:	d10a      	bne.n	8009488 <HAL_SD_ConfigWideBusOperation+0x54>
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fabc 	bl	80099f0 <SD_WideBus_Enable>
 8009478:	6238      	str	r0, [r7, #32]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	639a      	str	r2, [r3, #56]	@ 0x38
 8009486:	e01a      	b.n	80094be <HAL_SD_ConfigWideBusOperation+0x8a>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <HAL_SD_ConfigWideBusOperation+0x70>
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 faf9 	bl	8009a86 <SD_WideBus_Disable>
 8009494:	6238      	str	r0, [r7, #32]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80094a2:	e00c      	b.n	80094be <HAL_SD_ConfigWideBusOperation+0x8a>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80094b0:	e005      	b.n	80094be <HAL_SD_ConfigWideBusOperation+0x8a>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <HAL_SD_ConfigWideBusOperation+0xaa>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a26      	ldr	r2, [pc, #152]	@ (8009564 <HAL_SD_ConfigWideBusOperation+0x130>)
 80094cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80094dc:	e01f      	b.n	800951e <HAL_SD_ConfigWideBusOperation+0xea>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	60bb      	str	r3, [r7, #8]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	61bb      	str	r3, [r7, #24]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681d      	ldr	r5, [r3, #0]
 8009504:	466c      	mov	r4, sp
 8009506:	f107 0314 	add.w	r3, r7, #20
 800950a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800950e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009518:	4628      	mov	r0, r5
 800951a:	f003 f9cf 	bl	800c8bc <SDMMC_Init>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009526:	4618      	mov	r0, r3
 8009528:	f003 fa94 	bl	800ca54 <SDMMC_CmdBlockLength>
 800952c:	6238      	str	r0, [r7, #32]
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_SD_ConfigWideBusOperation+0x11a>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a0a      	ldr	r2, [pc, #40]	@ (8009564 <HAL_SD_ConfigWideBusOperation+0x130>)
 800953a:	639a      	str	r2, [r3, #56]	@ 0x38
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	639a      	str	r2, [r3, #56]	@ 0x38
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8009556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800955a:	4618      	mov	r0, r3
 800955c:	3728      	adds	r7, #40	@ 0x28
 800955e:	46bd      	mov	sp, r7
 8009560:	bdb0      	pop	{r4, r5, r7, pc}
 8009562:	bf00      	nop
 8009564:	004005ff 	.word	0x004005ff

08009568 <HAL_SD_GetCardState>:
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	2300      	movs	r3, #0
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fa10 	bl	80099a0 <SD_SendStatus>
 8009580:	6178      	str	r0, [r7, #20]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <HAL_SD_GetCardState+0x2c>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	639a      	str	r2, [r3, #56]	@ 0x38
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	0a5b      	lsrs	r3, r3, #9
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	613b      	str	r3, [r7, #16]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <SD_DMATransmitCplt>:
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <SD_DMAReceiveCplt>:
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e4:	2b82      	cmp	r3, #130	@ 0x82
 80095e6:	d111      	bne.n	800960c <SD_DMAReceiveCplt+0x3a>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f003 fadb 	bl	800cba8 <SDMMC_CmdStopTransfer>
 80095f2:	60b8      	str	r0, [r7, #8]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d008      	beq.n	800960c <SD_DMAReceiveCplt+0x3a>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	431a      	orrs	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	639a      	str	r2, [r3, #56]	@ 0x38
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff fd3a 	bl	8009080 <HAL_SD_ErrorCallback>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0208 	bic.w	r2, r2, #8
 800961a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009624:	639a      	str	r2, [r3, #56]	@ 0x38
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	631a      	str	r2, [r3, #48]	@ 0x30
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f003 ff31 	bl	800d49c <HAL_SD_RxCpltCallback>
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <SD_DMAError>:
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009650:	617b      	str	r3, [r7, #20]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7fb fe6e 	bl	8005334 <HAL_DMA_GetError>
 8009658:	4603      	mov	r3, r0
 800965a:	2b02      	cmp	r3, #2
 800965c:	d03e      	beq.n	80096dc <SD_DMAError+0x98>
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009664:	613b      	str	r3, [r7, #16]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d002      	beq.n	800967a <SD_DMAError+0x36>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d12d      	bne.n	80096d6 <SD_DMAError+0x92>
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a19      	ldr	r2, [pc, #100]	@ (80096e4 <SD_DMAError+0xa0>)
 8009680:	639a      	str	r2, [r3, #56]	@ 0x38
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009690:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009696:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	639a      	str	r2, [r3, #56]	@ 0x38
 800969e:	6978      	ldr	r0, [r7, #20]
 80096a0:	f7ff ff62 	bl	8009568 <HAL_SD_GetCardState>
 80096a4:	60b8      	str	r0, [r7, #8]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b06      	cmp	r3, #6
 80096aa:	d002      	beq.n	80096b2 <SD_DMAError+0x6e>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d10a      	bne.n	80096c8 <SD_DMAError+0x84>
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f003 fa76 	bl	800cba8 <SDMMC_CmdStopTransfer>
 80096bc:	4602      	mov	r2, r0
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c2:	431a      	orrs	r2, r3
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2200      	movs	r2, #0
 80096d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80096d6:	6978      	ldr	r0, [r7, #20]
 80096d8:	f7ff fcd2 	bl	8009080 <HAL_SD_ErrorCallback>
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	004005ff 	.word	0x004005ff

080096e8 <SD_InitCard>:
 80096e8:	b5b0      	push	{r4, r5, r7, lr}
 80096ea:	b094      	sub	sp, #80	@ 0x50
 80096ec:	af04      	add	r7, sp, #16
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	2301      	movs	r3, #1
 80096f2:	81fb      	strh	r3, [r7, #14]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f003 f926 	bl	800c94a <SDMMC_GetPowerState>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <SD_InitCard+0x22>
 8009704:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009708:	e0b8      	b.n	800987c <SD_InitCard+0x194>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800970e:	2b03      	cmp	r3, #3
 8009710:	d02f      	beq.n	8009772 <SD_InitCard+0x8a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f003 fb51 	bl	800cdbe <SDMMC_CmdSendCID>
 800971c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800971e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <SD_InitCard+0x40>
 8009724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009726:	e0a9      	b.n	800987c <SD_InitCard+0x194>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2100      	movs	r1, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f003 f951 	bl	800c9d6 <SDMMC_GetResponse>
 8009734:	4602      	mov	r2, r0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	675a      	str	r2, [r3, #116]	@ 0x74
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2104      	movs	r1, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f003 f948 	bl	800c9d6 <SDMMC_GetResponse>
 8009746:	4602      	mov	r2, r0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	679a      	str	r2, [r3, #120]	@ 0x78
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2108      	movs	r1, #8
 8009752:	4618      	mov	r0, r3
 8009754:	f003 f93f 	bl	800c9d6 <SDMMC_GetResponse>
 8009758:	4602      	mov	r2, r0
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	210c      	movs	r1, #12
 8009764:	4618      	mov	r0, r3
 8009766:	f003 f936 	bl	800c9d6 <SDMMC_GetResponse>
 800976a:	4602      	mov	r2, r0
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	2b03      	cmp	r3, #3
 8009778:	d00d      	beq.n	8009796 <SD_InitCard+0xae>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f107 020e 	add.w	r2, r7, #14
 8009782:	4611      	mov	r1, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f003 fb57 	bl	800ce38 <SDMMC_CmdSetRelAdd>
 800978a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800978c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <SD_InitCard+0xae>
 8009792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009794:	e072      	b.n	800987c <SD_InitCard+0x194>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800979a:	2b03      	cmp	r3, #3
 800979c:	d036      	beq.n	800980c <SD_InitCard+0x124>
 800979e:	89fb      	ldrh	r3, [r7, #14]
 80097a0:	461a      	mov	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ae:	041b      	lsls	r3, r3, #16
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f003 fb21 	bl	800cdfa <SDMMC_CmdSendCSD>
 80097b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80097ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <SD_InitCard+0xdc>
 80097c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c2:	e05b      	b.n	800987c <SD_InitCard+0x194>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f003 f903 	bl	800c9d6 <SDMMC_GetResponse>
 80097d0:	4602      	mov	r2, r0
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	665a      	str	r2, [r3, #100]	@ 0x64
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2104      	movs	r1, #4
 80097dc:	4618      	mov	r0, r3
 80097de:	f003 f8fa 	bl	800c9d6 <SDMMC_GetResponse>
 80097e2:	4602      	mov	r2, r0
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	669a      	str	r2, [r3, #104]	@ 0x68
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2108      	movs	r1, #8
 80097ee:	4618      	mov	r0, r3
 80097f0:	f003 f8f1 	bl	800c9d6 <SDMMC_GetResponse>
 80097f4:	4602      	mov	r2, r0
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	210c      	movs	r1, #12
 8009800:	4618      	mov	r0, r3
 8009802:	f003 f8e8 	bl	800c9d6 <SDMMC_GetResponse>
 8009806:	4602      	mov	r2, r0
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	671a      	str	r2, [r3, #112]	@ 0x70
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2104      	movs	r1, #4
 8009812:	4618      	mov	r0, r3
 8009814:	f003 f8df 	bl	800c9d6 <SDMMC_GetResponse>
 8009818:	4603      	mov	r3, r0
 800981a:	0d1a      	lsrs	r2, r3, #20
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009820:	f107 0310 	add.w	r3, r7, #16
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fc34 	bl	8009094 <HAL_SD_GetCardCSD>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <SD_InitCard+0x150>
 8009832:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009836:	e021      	b.n	800987c <SD_InitCard+0x194>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009840:	041b      	lsls	r3, r3, #16
 8009842:	2200      	movs	r2, #0
 8009844:	461c      	mov	r4, r3
 8009846:	4615      	mov	r5, r2
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	4608      	mov	r0, r1
 800984e:	f003 f9cd 	bl	800cbec <SDMMC_CmdSelDesel>
 8009852:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <SD_InitCard+0x176>
 800985a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800985c:	e00e      	b.n	800987c <SD_InitCard+0x194>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681d      	ldr	r5, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	466c      	mov	r4, sp
 8009866:	f103 0210 	add.w	r2, r3, #16
 800986a:	ca07      	ldmia	r2, {r0, r1, r2}
 800986c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009870:	3304      	adds	r3, #4
 8009872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009874:	4628      	mov	r0, r5
 8009876:	f003 f821 	bl	800c8bc <SDMMC_Init>
 800987a:	2300      	movs	r3, #0
 800987c:	4618      	mov	r0, r3
 800987e:	3740      	adds	r7, #64	@ 0x40
 8009880:	46bd      	mov	sp, r7
 8009882:	bdb0      	pop	{r4, r5, r7, pc}

08009884 <SD_PowerON>:
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	2300      	movs	r3, #0
 800988e:	60bb      	str	r3, [r7, #8]
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	2300      	movs	r3, #0
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4618      	mov	r0, r3
 800989e:	f003 f9c8 	bl	800cc32 <SDMMC_CmdGoIdleState>
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <SD_PowerON+0x2a>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	e072      	b.n	8009994 <SD_PowerON+0x110>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f003 f9db 	bl	800cc6e <SDMMC_CmdOperCond>
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00d      	beq.n	80098dc <SD_PowerON+0x58>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	649a      	str	r2, [r3, #72]	@ 0x48
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f003 f9b1 	bl	800cc32 <SDMMC_CmdGoIdleState>
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <SD_PowerON+0x5e>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	e05b      	b.n	8009994 <SD_PowerON+0x110>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	649a      	str	r2, [r3, #72]	@ 0x48
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d137      	bne.n	800995a <SD_PowerON+0xd6>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f003 f9db 	bl	800ccac <SDMMC_CmdAppCommand>
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d02d      	beq.n	800995a <SD_PowerON+0xd6>
 80098fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009902:	e047      	b.n	8009994 <SD_PowerON+0x110>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2100      	movs	r1, #0
 800990a:	4618      	mov	r0, r3
 800990c:	f003 f9ce 	bl	800ccac <SDMMC_CmdAppCommand>
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <SD_PowerON+0x98>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	e03b      	b.n	8009994 <SD_PowerON+0x110>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	491e      	ldr	r1, [pc, #120]	@ (800999c <SD_PowerON+0x118>)
 8009922:	4618      	mov	r0, r3
 8009924:	f003 f9e4 	bl	800ccf0 <SDMMC_CmdAppOperCommand>
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SD_PowerON+0xb2>
 8009930:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009934:	e02e      	b.n	8009994 <SD_PowerON+0x110>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f003 f84a 	bl	800c9d6 <SDMMC_GetResponse>
 8009942:	6178      	str	r0, [r7, #20]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	0fdb      	lsrs	r3, r3, #31
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <SD_PowerON+0xcc>
 800994c:	2301      	movs	r3, #1
 800994e:	e000      	b.n	8009952 <SD_PowerON+0xce>
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	3301      	adds	r3, #1
 8009958:	60bb      	str	r3, [r7, #8]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009960:	4293      	cmp	r3, r2
 8009962:	d802      	bhi.n	800996a <SD_PowerON+0xe6>
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0cc      	beq.n	8009904 <SD_PowerON+0x80>
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009970:	4293      	cmp	r3, r2
 8009972:	d902      	bls.n	800997a <SD_PowerON+0xf6>
 8009974:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009978:	e00c      	b.n	8009994 <SD_PowerON+0x110>
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d003      	beq.n	800998c <SD_PowerON+0x108>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	645a      	str	r2, [r3, #68]	@ 0x44
 800998a:	e002      	b.n	8009992 <SD_PowerON+0x10e>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	645a      	str	r2, [r3, #68]	@ 0x44
 8009992:	2300      	movs	r3, #0
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	c1100000 	.word	0xc1100000

080099a0 <SD_SendStatus>:
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d102      	bne.n	80099b6 <SD_SendStatus+0x16>
 80099b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099b4:	e018      	b.n	80099e8 <SD_SendStatus+0x48>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	4619      	mov	r1, r3
 80099c2:	4610      	mov	r0, r2
 80099c4:	f003 fa59 	bl	800ce7a <SDMMC_CmdSendStatus>
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <SD_SendStatus+0x34>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	e009      	b.n	80099e8 <SD_SendStatus+0x48>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2100      	movs	r1, #0
 80099da:	4618      	mov	r0, r3
 80099dc:	f002 fffb 	bl	800c9d6 <SDMMC_GetResponse>
 80099e0:	4602      	mov	r2, r0
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	2300      	movs	r3, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SD_WideBus_Enable>:
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	2300      	movs	r3, #0
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f002 ffe5 	bl	800c9d6 <SDMMC_GetResponse>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a16:	d102      	bne.n	8009a1e <SD_WideBus_Enable+0x2e>
 8009a18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a1c:	e02f      	b.n	8009a7e <SD_WideBus_Enable+0x8e>
 8009a1e:	f107 030c 	add.w	r3, r7, #12
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f879 	bl	8009b1c <SD_FindSCR>
 8009a2a:	6178      	str	r0, [r7, #20]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <SD_WideBus_Enable+0x46>
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	e023      	b.n	8009a7e <SD_WideBus_Enable+0x8e>
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d01c      	beq.n	8009a7a <SD_WideBus_Enable+0x8a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a48:	041b      	lsls	r3, r3, #16
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	f003 f92d 	bl	800ccac <SDMMC_CmdAppCommand>
 8009a52:	6178      	str	r0, [r7, #20]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <SD_WideBus_Enable+0x6e>
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	e00f      	b.n	8009a7e <SD_WideBus_Enable+0x8e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2102      	movs	r1, #2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f003 f967 	bl	800cd38 <SDMMC_CmdBusWidth>
 8009a6a:	6178      	str	r0, [r7, #20]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <SD_WideBus_Enable+0x86>
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	e003      	b.n	8009a7e <SD_WideBus_Enable+0x8e>
 8009a76:	2300      	movs	r3, #0
 8009a78:	e001      	b.n	8009a7e <SD_WideBus_Enable+0x8e>
 8009a7a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <SD_WideBus_Disable>:
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b086      	sub	sp, #24
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	2300      	movs	r3, #0
 8009a94:	613b      	str	r3, [r7, #16]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f002 ff9a 	bl	800c9d6 <SDMMC_GetResponse>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009aac:	d102      	bne.n	8009ab4 <SD_WideBus_Disable+0x2e>
 8009aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ab2:	e02f      	b.n	8009b14 <SD_WideBus_Disable+0x8e>
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f82e 	bl	8009b1c <SD_FindSCR>
 8009ac0:	6178      	str	r0, [r7, #20]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_WideBus_Disable+0x46>
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	e023      	b.n	8009b14 <SD_WideBus_Disable+0x8e>
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01c      	beq.n	8009b10 <SD_WideBus_Disable+0x8a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ade:	041b      	lsls	r3, r3, #16
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f003 f8e2 	bl	800ccac <SDMMC_CmdAppCommand>
 8009ae8:	6178      	str	r0, [r7, #20]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <SD_WideBus_Disable+0x6e>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	e00f      	b.n	8009b14 <SD_WideBus_Disable+0x8e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2100      	movs	r1, #0
 8009afa:	4618      	mov	r0, r3
 8009afc:	f003 f91c 	bl	800cd38 <SDMMC_CmdBusWidth>
 8009b00:	6178      	str	r0, [r7, #20]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <SD_WideBus_Disable+0x86>
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	e003      	b.n	8009b14 <SD_WideBus_Disable+0x8e>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e001      	b.n	8009b14 <SD_WideBus_Disable+0x8e>
 8009b10:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009b14:	4618      	mov	r0, r3
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SD_FindSCR>:
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	b08f      	sub	sp, #60	@ 0x3c
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	f7fa fdfd 	bl	8004724 <HAL_GetTick>
 8009b2a:	6338      	str	r0, [r7, #48]	@ 0x30
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b30:	2300      	movs	r3, #0
 8009b32:	60bb      	str	r3, [r7, #8]
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2108      	movs	r1, #8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 ff86 	bl	800ca54 <SDMMC_CmdBlockLength>
 8009b48:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <SD_FindSCR+0x38>
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	e0b2      	b.n	8009cba <SD_FindSCR+0x19e>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b5c:	041b      	lsls	r3, r3, #16
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4610      	mov	r0, r2
 8009b62:	f003 f8a3 	bl	800ccac <SDMMC_CmdAppCommand>
 8009b66:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <SD_FindSCR+0x56>
 8009b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b70:	e0a3      	b.n	8009cba <SD_FindSCR+0x19e>
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	2308      	movs	r3, #8
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	2330      	movs	r3, #48	@ 0x30
 8009b7e:	61bb      	str	r3, [r7, #24]
 8009b80:	2302      	movs	r3, #2
 8009b82:	61fb      	str	r3, [r7, #28]
 8009b84:	2300      	movs	r3, #0
 8009b86:	623b      	str	r3, [r7, #32]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f107 0210 	add.w	r2, r7, #16
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 ff30 	bl	800c9fc <SDMMC_ConfigData>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 f8eb 	bl	800cd7c <SDMMC_CmdSendSCR>
 8009ba6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d02a      	beq.n	8009c04 <SD_FindSCR+0xe8>
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	e083      	b.n	8009cba <SD_FindSCR+0x19e>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00f      	beq.n	8009be0 <SD_FindSCR+0xc4>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6819      	ldr	r1, [r3, #0]
 8009bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	f107 0208 	add.w	r2, r7, #8
 8009bcc:	18d4      	adds	r4, r2, r3
 8009bce:	4608      	mov	r0, r1
 8009bd0:	f002 fea0 	bl	800c914 <SDMMC_ReadFIFO>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bda:	3301      	adds	r3, #1
 8009bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bde:	e006      	b.n	8009bee <SD_FindSCR+0xd2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d012      	beq.n	8009c14 <SD_FindSCR+0xf8>
 8009bee:	f7fa fd99 	bl	8004724 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d102      	bne.n	8009c04 <SD_FindSCR+0xe8>
 8009bfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c02:	e05a      	b.n	8009cba <SD_FindSCR+0x19e>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0cf      	beq.n	8009bb2 <SD_FindSCR+0x96>
 8009c12:	e000      	b.n	8009c16 <SD_FindSCR+0xfa>
 8009c14:	bf00      	nop
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c1c:	f003 0308 	and.w	r3, r3, #8
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <SD_FindSCR+0x114>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2208      	movs	r2, #8
 8009c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	e044      	b.n	8009cba <SD_FindSCR+0x19e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <SD_FindSCR+0x12e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2202      	movs	r2, #2
 8009c44:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c46:	2302      	movs	r3, #2
 8009c48:	e037      	b.n	8009cba <SD_FindSCR+0x19e>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <SD_FindSCR+0x148>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c60:	2320      	movs	r3, #32
 8009c62:	e02a      	b.n	8009cba <SD_FindSCR+0x19e>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	061a      	lsls	r2, r3, #24
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	0a1b      	lsrs	r3, r3, #8
 8009c80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009c84:	431a      	orrs	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	0e1b      	lsrs	r3, r3, #24
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c92:	3304      	adds	r3, #4
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	061a      	lsls	r2, r3, #24
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	0a1b      	lsrs	r3, r3, #8
 8009ca8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	0e1b      	lsrs	r3, r3, #24
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	373c      	adds	r7, #60	@ 0x3c
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd90      	pop	{r4, r7, pc}

08009cc2 <HAL_SDRAM_Init>:
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <HAL_SDRAM_Init+0x14>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e025      	b.n	8009d22 <HAL_SDRAM_Init+0x60>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d106      	bne.n	8009cf0 <HAL_SDRAM_Init+0x2e>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7f7 fdb6 	bl	800185c <HAL_SDRAM_MspInit>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4619      	mov	r1, r3
 8009d02:	4610      	mov	r0, r2
 8009d04:	f002 fd14 	bl	800c730 <FMC_SDRAM_Init>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6818      	ldr	r0, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	461a      	mov	r2, r3
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	f002 fd68 	bl	800c7e8 <FMC_SDRAM_Timing_Init>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8009d20:	2300      	movs	r3, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <HAL_SPDIFRX_Init>:
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_SPDIFRX_Init+0x12>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e04c      	b.n	8009dd8 <HAL_SPDIFRX_Init+0xac>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d106      	bne.n	8009d58 <HAL_SPDIFRX_Init+0x2c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7f9 fca2 	bl	800369c <HAL_SPDIFRX_MspInit>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0203 	bic.w	r2, r2, #3
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4b19      	ldr	r3, [pc, #100]	@ (8009de0 <HAL_SPDIFRX_Init+0xb4>)
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699a      	ldr	r2, [r3, #24]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	431a      	orrs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	431a      	orrs	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	431a      	orrs	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db8:	4313      	orrs	r3, r2
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	649a      	str	r2, [r3, #72]	@ 0x48
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	fff88407 	.word	0xfff88407

08009de4 <HAL_SPI_Init>:
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_SPI_Init+0x12>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e09d      	b.n	8009f32 <HAL_SPI_Init+0x14e>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d108      	bne.n	8009e10 <HAL_SPI_Init+0x2c>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e06:	d009      	beq.n	8009e1c <HAL_SPI_Init+0x38>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	61da      	str	r2, [r3, #28]
 8009e0e:	e005      	b.n	8009e1c <HAL_SPI_Init+0x38>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	611a      	str	r2, [r3, #16]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	615a      	str	r2, [r3, #20]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_SPI_Init+0x58>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7f9 fcd2 	bl	80037e0 <HAL_SPI_MspInit>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e5c:	d902      	bls.n	8009e64 <HAL_SPI_Init+0x80>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	e002      	b.n	8009e6a <HAL_SPI_Init+0x86>
 8009e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009e72:	d007      	beq.n	8009e84 <HAL_SPI_Init+0xa0>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e7c:	d002      	beq.n	8009e84 <HAL_SPI_Init+0xa0>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ec6:	ea42 0103 	orr.w	r1, r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ece:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	f003 0204 	and.w	r2, r3, #4
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef2:	f003 0308 	and.w	r3, r3, #8
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009f00:	ea42 0103 	orr.w	r1, r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69da      	ldr	r2, [r3, #28]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f20:	61da      	str	r2, [r3, #28]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	661a      	str	r2, [r3, #96]	@ 0x60
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8009f30:	2300      	movs	r3, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <HAL_TIM_Base_Init>:
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <HAL_TIM_Base_Init+0x12>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e049      	b.n	8009fe0 <HAL_TIM_Base_Init+0xa6>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d106      	bne.n	8009f66 <HAL_TIM_Base_Init+0x2c>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7fa f909 	bl	8004178 <HAL_TIM_Base_MspInit>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f000 fc11 	bl	800a7a0 <TIM_Base_SetConfig>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <HAL_TIM_Base_Start_IT>:
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d001      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x18>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e054      	b.n	800a0aa <HAL_TIM_Base_Start_IT+0xc2>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68da      	ldr	r2, [r3, #12]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	60da      	str	r2, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a26      	ldr	r2, [pc, #152]	@ (800a0b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d022      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a02a:	d01d      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a22      	ldr	r2, [pc, #136]	@ (800a0bc <HAL_TIM_Base_Start_IT+0xd4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d018      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a21      	ldr	r2, [pc, #132]	@ (800a0c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1f      	ldr	r2, [pc, #124]	@ (800a0c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1e      	ldr	r2, [pc, #120]	@ (800a0c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1c      	ldr	r2, [pc, #112]	@ (800a0cc <HAL_TIM_Base_Start_IT+0xe4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d004      	beq.n	800a068 <HAL_TIM_Base_Start_IT+0x80>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1b      	ldr	r2, [pc, #108]	@ (800a0d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d115      	bne.n	800a094 <HAL_TIM_Base_Start_IT+0xac>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	4b19      	ldr	r3, [pc, #100]	@ (800a0d4 <HAL_TIM_Base_Start_IT+0xec>)
 800a070:	4013      	ands	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b06      	cmp	r3, #6
 800a078:	d015      	beq.n	800a0a6 <HAL_TIM_Base_Start_IT+0xbe>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a080:	d011      	beq.n	800a0a6 <HAL_TIM_Base_Start_IT+0xbe>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0201 	orr.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	e008      	b.n	800a0a6 <HAL_TIM_Base_Start_IT+0xbe>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f042 0201 	orr.w	r2, r2, #1
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e000      	b.n	800a0a8 <HAL_TIM_Base_Start_IT+0xc0>
 800a0a6:	bf00      	nop
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40010400 	.word	0x40010400
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40001800 	.word	0x40001800
 800a0d4:	00010007 	.word	0x00010007

0800a0d8 <HAL_TIM_PWM_Init>:
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_TIM_PWM_Init+0x12>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e049      	b.n	800a17e <HAL_TIM_PWM_Init+0xa6>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <HAL_TIM_PWM_Init+0x2c>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7fa f8a8 	bl	8004254 <HAL_TIM_PWM_MspInit>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f000 fb42 	bl	800a7a0 <TIM_Base_SetConfig>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a17c:	2300      	movs	r3, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <HAL_TIM_IRQHandler>:
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d020      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x64>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f003 0302 	and.w	r3, r3, #2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01b      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x64>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f06f 0202 	mvn.w	r2, #2
 800a1ba:	611a      	str	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	771a      	strb	r2, [r3, #28]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	f003 0303 	and.w	r3, r3, #3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_TIM_IRQHandler+0x52>
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fac7 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a1d6:	e005      	b.n	800a1e4 <HAL_TIM_IRQHandler+0x5e>
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fab9 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 faca 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	771a      	strb	r2, [r3, #28]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d020      	beq.n	800a236 <HAL_TIM_IRQHandler+0xb0>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01b      	beq.n	800a236 <HAL_TIM_IRQHandler+0xb0>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f06f 0204 	mvn.w	r2, #4
 800a206:	611a      	str	r2, [r3, #16]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	771a      	strb	r2, [r3, #28]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_TIM_IRQHandler+0x9e>
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 faa1 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a222:	e005      	b.n	800a230 <HAL_TIM_IRQHandler+0xaa>
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fa93 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 faa4 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	771a      	strb	r2, [r3, #28]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f003 0308 	and.w	r3, r3, #8
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d020      	beq.n	800a282 <HAL_TIM_IRQHandler+0xfc>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01b      	beq.n	800a282 <HAL_TIM_IRQHandler+0xfc>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f06f 0208 	mvn.w	r2, #8
 800a252:	611a      	str	r2, [r3, #16]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2204      	movs	r2, #4
 800a258:	771a      	strb	r2, [r3, #28]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_TIM_IRQHandler+0xea>
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fa7b 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a26e:	e005      	b.n	800a27c <HAL_TIM_IRQHandler+0xf6>
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fa6d 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa7e 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	771a      	strb	r2, [r3, #28]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d020      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x148>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b00      	cmp	r3, #0
 800a294:	d01b      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x148>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f06f 0210 	mvn.w	r2, #16
 800a29e:	611a      	str	r2, [r3, #16]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2208      	movs	r2, #8
 800a2a4:	771a      	strb	r2, [r3, #28]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <HAL_TIM_IRQHandler+0x136>
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fa55 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a2ba:	e005      	b.n	800a2c8 <HAL_TIM_IRQHandler+0x142>
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fa47 	bl	800a750 <HAL_TIM_OC_DelayElapsedCallback>
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fa58 	bl	800a778 <HAL_TIM_PWM_PulseFinishedCallback>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	771a      	strb	r2, [r3, #28]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00c      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0x16c>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d007      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0x16c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f06f 0201 	mvn.w	r2, #1
 800a2ea:	611a      	str	r2, [r3, #16]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7f8 fe69 	bl	8002fc4 <HAL_TIM_PeriodElapsedCallback>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d104      	bne.n	800a306 <HAL_TIM_IRQHandler+0x180>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <HAL_TIM_IRQHandler+0x19a>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d007      	beq.n	800a320 <HAL_TIM_IRQHandler+0x19a>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a318:	611a      	str	r2, [r3, #16]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fef4 	bl	800b108 <HAL_TIMEx_BreakCallback>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00c      	beq.n	800a344 <HAL_TIM_IRQHandler+0x1be>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <HAL_TIM_IRQHandler+0x1be>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a33c:	611a      	str	r2, [r3, #16]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 feec 	bl	800b11c <HAL_TIMEx_Break2Callback>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <HAL_TIM_IRQHandler+0x1e2>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <HAL_TIM_IRQHandler+0x1e2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a360:	611a      	str	r2, [r3, #16]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa12 	bl	800a78c <HAL_TIM_TriggerCallback>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00c      	beq.n	800a38c <HAL_TIM_IRQHandler+0x206>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d007      	beq.n	800a38c <HAL_TIM_IRQHandler+0x206>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f06f 0220 	mvn.w	r2, #32
 800a384:	611a      	str	r2, [r3, #16]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 feb4 	bl	800b0f4 <HAL_TIMEx_CommutCallback>
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_TIM_PWM_ConfigChannel>:
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e0ff      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b14      	cmp	r3, #20
 800a3be:	f200 80f0 	bhi.w	800a5a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c8:	0800a41d 	.word	0x0800a41d
 800a3cc:	0800a5a3 	.word	0x0800a5a3
 800a3d0:	0800a5a3 	.word	0x0800a5a3
 800a3d4:	0800a5a3 	.word	0x0800a5a3
 800a3d8:	0800a45d 	.word	0x0800a45d
 800a3dc:	0800a5a3 	.word	0x0800a5a3
 800a3e0:	0800a5a3 	.word	0x0800a5a3
 800a3e4:	0800a5a3 	.word	0x0800a5a3
 800a3e8:	0800a49f 	.word	0x0800a49f
 800a3ec:	0800a5a3 	.word	0x0800a5a3
 800a3f0:	0800a5a3 	.word	0x0800a5a3
 800a3f4:	0800a5a3 	.word	0x0800a5a3
 800a3f8:	0800a4df 	.word	0x0800a4df
 800a3fc:	0800a5a3 	.word	0x0800a5a3
 800a400:	0800a5a3 	.word	0x0800a5a3
 800a404:	0800a5a3 	.word	0x0800a5a3
 800a408:	0800a521 	.word	0x0800a521
 800a40c:	0800a5a3 	.word	0x0800a5a3
 800a410:	0800a5a3 	.word	0x0800a5a3
 800a414:	0800a5a3 	.word	0x0800a5a3
 800a418:	0800a561 	.word	0x0800a561
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fa62 	bl	800a8ec <TIM_OC1_SetConfig>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699a      	ldr	r2, [r3, #24]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0208 	orr.w	r2, r2, #8
 800a436:	619a      	str	r2, [r3, #24]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0204 	bic.w	r2, r2, #4
 800a446:	619a      	str	r2, [r3, #24]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6999      	ldr	r1, [r3, #24]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	691a      	ldr	r2, [r3, #16]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	619a      	str	r2, [r3, #24]
 800a45a:	e0a5      	b.n	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x214>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68b9      	ldr	r1, [r7, #8]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fab4 	bl	800a9d0 <TIM_OC2_SetConfig>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	699a      	ldr	r2, [r3, #24]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a476:	619a      	str	r2, [r3, #24]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699a      	ldr	r2, [r3, #24]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a486:	619a      	str	r2, [r3, #24]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6999      	ldr	r1, [r3, #24]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	021a      	lsls	r2, r3, #8
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	619a      	str	r2, [r3, #24]
 800a49c:	e084      	b.n	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x214>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fb0b 	bl	800aac0 <TIM_OC3_SetConfig>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69da      	ldr	r2, [r3, #28]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 0208 	orr.w	r2, r2, #8
 800a4b8:	61da      	str	r2, [r3, #28]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69da      	ldr	r2, [r3, #28]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0204 	bic.w	r2, r2, #4
 800a4c8:	61da      	str	r2, [r3, #28]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69d9      	ldr	r1, [r3, #28]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	61da      	str	r2, [r3, #28]
 800a4dc:	e064      	b.n	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x214>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fb61 	bl	800abac <TIM_OC4_SetConfig>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69da      	ldr	r2, [r3, #28]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4f8:	61da      	str	r2, [r3, #28]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	69da      	ldr	r2, [r3, #28]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a508:	61da      	str	r2, [r3, #28]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	69d9      	ldr	r1, [r3, #28]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	021a      	lsls	r2, r3, #8
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	430a      	orrs	r2, r1
 800a51c:	61da      	str	r2, [r3, #28]
 800a51e:	e043      	b.n	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x214>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fb98 	bl	800ac5c <TIM_OC5_SetConfig>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0208 	orr.w	r2, r2, #8
 800a53a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0204 	bic.w	r2, r2, #4
 800a54a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	691a      	ldr	r2, [r3, #16]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	655a      	str	r2, [r3, #84]	@ 0x54
 800a55e:	e023      	b.n	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x214>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fbca 	bl	800ad00 <TIM_OC6_SetConfig>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a57a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a58a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	021a      	lsls	r2, r3, #8
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5a0:	e002      	b.n	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x214>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	75fb      	strb	r3, [r7, #23]
 800a5a6:	bf00      	nop
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop

0800a5bc <HAL_TIM_ConfigClockSource>:
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d101      	bne.n	800a5d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e0b4      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x186>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	60bb      	str	r3, [r7, #8]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	4b56      	ldr	r3, [pc, #344]	@ (800a74c <HAL_TIM_ConfigClockSource+0x190>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	60bb      	str	r3, [r7, #8]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5fe:	60bb      	str	r3, [r7, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	609a      	str	r2, [r3, #8]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a610:	d03e      	beq.n	800a690 <HAL_TIM_ConfigClockSource+0xd4>
 800a612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a616:	f200 8087 	bhi.w	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a61a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a61e:	f000 8086 	beq.w	800a72e <HAL_TIM_ConfigClockSource+0x172>
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a626:	d87f      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a628:	2b70      	cmp	r3, #112	@ 0x70
 800a62a:	d01a      	beq.n	800a662 <HAL_TIM_ConfigClockSource+0xa6>
 800a62c:	2b70      	cmp	r3, #112	@ 0x70
 800a62e:	d87b      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a630:	2b60      	cmp	r3, #96	@ 0x60
 800a632:	d050      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0x11a>
 800a634:	2b60      	cmp	r3, #96	@ 0x60
 800a636:	d877      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a638:	2b50      	cmp	r3, #80	@ 0x50
 800a63a:	d03c      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0xfa>
 800a63c:	2b50      	cmp	r3, #80	@ 0x50
 800a63e:	d873      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a640:	2b40      	cmp	r3, #64	@ 0x40
 800a642:	d058      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x13a>
 800a644:	2b40      	cmp	r3, #64	@ 0x40
 800a646:	d86f      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a648:	2b30      	cmp	r3, #48	@ 0x30
 800a64a:	d064      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x15a>
 800a64c:	2b30      	cmp	r3, #48	@ 0x30
 800a64e:	d86b      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a650:	2b20      	cmp	r3, #32
 800a652:	d060      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x15a>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d867      	bhi.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d05c      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x15a>
 800a65c:	2b10      	cmp	r3, #16
 800a65e:	d05a      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x15a>
 800a660:	e062      	b.n	800a728 <HAL_TIM_ConfigClockSource+0x16c>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	6899      	ldr	r1, [r3, #8]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f000 fc13 	bl	800ae9c <TIM_ETR_SetConfig>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	60bb      	str	r3, [r7, #8]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a684:	60bb      	str	r3, [r7, #8]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	609a      	str	r2, [r3, #8]
 800a68e:	e04f      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	6899      	ldr	r1, [r3, #8]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f000 fbfc 	bl	800ae9c <TIM_ETR_SetConfig>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a6b2:	609a      	str	r2, [r3, #8]
 800a6b4:	e03c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6859      	ldr	r1, [r3, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f000 fb70 	bl	800ada8 <TIM_TI1_ConfigInputStage>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2150      	movs	r1, #80	@ 0x50
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fbc9 	bl	800ae66 <TIM_ITRx_SetConfig>
 800a6d4:	e02c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f000 fb8f 	bl	800ae06 <TIM_TI2_ConfigInputStage>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2160      	movs	r1, #96	@ 0x60
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fbb9 	bl	800ae66 <TIM_ITRx_SetConfig>
 800a6f4:	e01c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	6859      	ldr	r1, [r3, #4]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	461a      	mov	r2, r3
 800a704:	f000 fb50 	bl	800ada8 <TIM_TI1_ConfigInputStage>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2140      	movs	r1, #64	@ 0x40
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fba9 	bl	800ae66 <TIM_ITRx_SetConfig>
 800a714:	e00c      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f000 fba0 	bl	800ae66 <TIM_ITRx_SetConfig>
 800a726:	e003      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a728:	2301      	movs	r3, #1
 800a72a:	73fb      	strb	r3, [r7, #15]
 800a72c:	e000      	b.n	800a730 <HAL_TIM_ConfigClockSource+0x174>
 800a72e:	bf00      	nop
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	fffeff88 	.word	0xfffeff88

0800a750 <HAL_TIM_OC_DelayElapsedCallback>:
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_TIM_IC_CaptureCallback>:
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_TIM_TriggerCallback>:
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <TIM_Base_SetConfig>:
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a43      	ldr	r2, [pc, #268]	@ (800a8c0 <TIM_Base_SetConfig+0x120>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d013      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7be:	d00f      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a40      	ldr	r2, [pc, #256]	@ (800a8c4 <TIM_Base_SetConfig+0x124>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00b      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a3f      	ldr	r2, [pc, #252]	@ (800a8c8 <TIM_Base_SetConfig+0x128>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d007      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a3e      	ldr	r2, [pc, #248]	@ (800a8cc <TIM_Base_SetConfig+0x12c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d003      	beq.n	800a7e0 <TIM_Base_SetConfig+0x40>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a3d      	ldr	r2, [pc, #244]	@ (800a8d0 <TIM_Base_SetConfig+0x130>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d108      	bne.n	800a7f2 <TIM_Base_SetConfig+0x52>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a32      	ldr	r2, [pc, #200]	@ (800a8c0 <TIM_Base_SetConfig+0x120>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d02b      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a800:	d027      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a2f      	ldr	r2, [pc, #188]	@ (800a8c4 <TIM_Base_SetConfig+0x124>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d023      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a2e      	ldr	r2, [pc, #184]	@ (800a8c8 <TIM_Base_SetConfig+0x128>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d01f      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2d      	ldr	r2, [pc, #180]	@ (800a8cc <TIM_Base_SetConfig+0x12c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d01b      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a2c      	ldr	r2, [pc, #176]	@ (800a8d0 <TIM_Base_SetConfig+0x130>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d017      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a2b      	ldr	r2, [pc, #172]	@ (800a8d4 <TIM_Base_SetConfig+0x134>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d013      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d8 <TIM_Base_SetConfig+0x138>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00f      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a29      	ldr	r2, [pc, #164]	@ (800a8dc <TIM_Base_SetConfig+0x13c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00b      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a28      	ldr	r2, [pc, #160]	@ (800a8e0 <TIM_Base_SetConfig+0x140>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d007      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a27      	ldr	r2, [pc, #156]	@ (800a8e4 <TIM_Base_SetConfig+0x144>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d003      	beq.n	800a852 <TIM_Base_SetConfig+0xb2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a26      	ldr	r2, [pc, #152]	@ (800a8e8 <TIM_Base_SetConfig+0x148>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d108      	bne.n	800a864 <TIM_Base_SetConfig+0xc4>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4313      	orrs	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	629a      	str	r2, [r3, #40]	@ 0x28
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a0e      	ldr	r2, [pc, #56]	@ (800a8c0 <TIM_Base_SetConfig+0x120>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d003      	beq.n	800a892 <TIM_Base_SetConfig+0xf2>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a10      	ldr	r2, [pc, #64]	@ (800a8d0 <TIM_Base_SetConfig+0x130>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d103      	bne.n	800a89a <TIM_Base_SetConfig+0xfa>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	691a      	ldr	r2, [r3, #16]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	631a      	str	r2, [r3, #48]	@ 0x30
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f043 0204 	orr.w	r2, r3, #4
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	615a      	str	r2, [r3, #20]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40010000 	.word	0x40010000
 800a8c4:	40000400 	.word	0x40000400
 800a8c8:	40000800 	.word	0x40000800
 800a8cc:	40000c00 	.word	0x40000c00
 800a8d0:	40010400 	.word	0x40010400
 800a8d4:	40014000 	.word	0x40014000
 800a8d8:	40014400 	.word	0x40014400
 800a8dc:	40014800 	.word	0x40014800
 800a8e0:	40001800 	.word	0x40001800
 800a8e4:	40001c00 	.word	0x40001c00
 800a8e8:	40002000 	.word	0x40002000

0800a8ec <TIM_OC1_SetConfig>:
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	f023 0201 	bic.w	r2, r3, #1
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	621a      	str	r2, [r3, #32]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c4 <TIM_OC1_SetConfig+0xd8>)
 800a918:	4013      	ands	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0303 	bic.w	r3, r3, #3
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f023 0302 	bic.w	r3, r3, #2
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a21      	ldr	r2, [pc, #132]	@ (800a9c8 <TIM_OC1_SetConfig+0xdc>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d003      	beq.n	800a950 <TIM_OC1_SetConfig+0x64>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a20      	ldr	r2, [pc, #128]	@ (800a9cc <TIM_OC1_SetConfig+0xe0>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10c      	bne.n	800a96a <TIM_OC1_SetConfig+0x7e>
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f023 0308 	bic.w	r3, r3, #8
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4313      	orrs	r3, r2
 800a960:	617b      	str	r3, [r7, #20]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 0304 	bic.w	r3, r3, #4
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a16      	ldr	r2, [pc, #88]	@ (800a9c8 <TIM_OC1_SetConfig+0xdc>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d003      	beq.n	800a97a <TIM_OC1_SetConfig+0x8e>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a15      	ldr	r2, [pc, #84]	@ (800a9cc <TIM_OC1_SetConfig+0xe0>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d111      	bne.n	800a99e <TIM_OC1_SetConfig+0xb2>
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a980:	613b      	str	r3, [r7, #16]
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a988:	613b      	str	r3, [r7, #16]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	4313      	orrs	r3, r2
 800a992:	613b      	str	r3, [r7, #16]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	605a      	str	r2, [r3, #4]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	619a      	str	r2, [r3, #24]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	621a      	str	r2, [r3, #32]
 800a9b8:	bf00      	nop
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	fffeff8f 	.word	0xfffeff8f
 800a9c8:	40010000 	.word	0x40010000
 800a9cc:	40010400 	.word	0x40010400

0800a9d0 <TIM_OC2_SetConfig>:
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a1b      	ldr	r3, [r3, #32]
 800a9e4:	f023 0210 	bic.w	r2, r3, #16
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	621a      	str	r2, [r3, #32]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	613b      	str	r3, [r7, #16]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4b2e      	ldr	r3, [pc, #184]	@ (800aab4 <TIM_OC2_SetConfig+0xe4>)
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0320 	bic.w	r3, r3, #32
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a23      	ldr	r2, [pc, #140]	@ (800aab8 <TIM_OC2_SetConfig+0xe8>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_OC2_SetConfig+0x68>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a22      	ldr	r2, [pc, #136]	@ (800aabc <TIM_OC2_SetConfig+0xec>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d10d      	bne.n	800aa54 <TIM_OC2_SetConfig+0x84>
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa3e:	617b      	str	r3, [r7, #20]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a18      	ldr	r2, [pc, #96]	@ (800aab8 <TIM_OC2_SetConfig+0xe8>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d003      	beq.n	800aa64 <TIM_OC2_SetConfig+0x94>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a17      	ldr	r2, [pc, #92]	@ (800aabc <TIM_OC2_SetConfig+0xec>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d113      	bne.n	800aa8c <TIM_OC2_SetConfig+0xbc>
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa72:	613b      	str	r3, [r7, #16]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	605a      	str	r2, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	619a      	str	r2, [r3, #24]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	639a      	str	r2, [r3, #56]	@ 0x38
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	621a      	str	r2, [r3, #32]
 800aaa6:	bf00      	nop
 800aaa8:	371c      	adds	r7, #28
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	feff8fff 	.word	0xfeff8fff
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40010400 	.word	0x40010400

0800aac0 <TIM_OC3_SetConfig>:
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	617b      	str	r3, [r7, #20]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	621a      	str	r2, [r3, #32]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	60fb      	str	r3, [r7, #12]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4b2d      	ldr	r3, [pc, #180]	@ (800aba0 <TIM_OC3_SetConfig+0xe0>)
 800aaec:	4013      	ands	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab08:	617b      	str	r3, [r7, #20]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a22      	ldr	r2, [pc, #136]	@ (800aba4 <TIM_OC3_SetConfig+0xe4>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d003      	beq.n	800ab26 <TIM_OC3_SetConfig+0x66>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a21      	ldr	r2, [pc, #132]	@ (800aba8 <TIM_OC3_SetConfig+0xe8>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d10d      	bne.n	800ab42 <TIM_OC3_SetConfig+0x82>
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a17      	ldr	r2, [pc, #92]	@ (800aba4 <TIM_OC3_SetConfig+0xe4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d003      	beq.n	800ab52 <TIM_OC3_SetConfig+0x92>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a16      	ldr	r2, [pc, #88]	@ (800aba8 <TIM_OC3_SetConfig+0xe8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d113      	bne.n	800ab7a <TIM_OC3_SetConfig+0xba>
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab58:	613b      	str	r3, [r7, #16]
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab60:	613b      	str	r3, [r7, #16]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	613b      	str	r3, [r7, #16]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	605a      	str	r2, [r3, #4]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	61da      	str	r2, [r3, #28]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	621a      	str	r2, [r3, #32]
 800ab94:	bf00      	nop
 800ab96:	371c      	adds	r7, #28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	fffeff8f 	.word	0xfffeff8f
 800aba4:	40010000 	.word	0x40010000
 800aba8:	40010400 	.word	0x40010400

0800abac <TIM_OC4_SetConfig>:
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	621a      	str	r2, [r3, #32]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	617b      	str	r3, [r7, #20]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4b1e      	ldr	r3, [pc, #120]	@ (800ac50 <TIM_OC4_SetConfig+0xa4>)
 800abd8:	4013      	ands	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800abf6:	613b      	str	r3, [r7, #16]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	031b      	lsls	r3, r3, #12
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	613b      	str	r3, [r7, #16]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a13      	ldr	r2, [pc, #76]	@ (800ac54 <TIM_OC4_SetConfig+0xa8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_OC4_SetConfig+0x68>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a12      	ldr	r2, [pc, #72]	@ (800ac58 <TIM_OC4_SetConfig+0xac>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d109      	bne.n	800ac28 <TIM_OC4_SetConfig+0x7c>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	019b      	lsls	r3, r3, #6
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	605a      	str	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	61da      	str	r2, [r3, #28]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	641a      	str	r2, [r3, #64]	@ 0x40
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	621a      	str	r2, [r3, #32]
 800ac42:	bf00      	nop
 800ac44:	371c      	adds	r7, #28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	feff8fff 	.word	0xfeff8fff
 800ac54:	40010000 	.word	0x40010000
 800ac58:	40010400 	.word	0x40010400

0800ac5c <TIM_OC5_SetConfig>:
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a1b      	ldr	r3, [r3, #32]
 800ac70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	621a      	str	r2, [r3, #32]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4b1b      	ldr	r3, [pc, #108]	@ (800acf4 <TIM_OC5_SetConfig+0x98>)
 800ac88:	4013      	ands	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ac9c:	613b      	str	r3, [r7, #16]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	041b      	lsls	r3, r3, #16
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a12      	ldr	r2, [pc, #72]	@ (800acf8 <TIM_OC5_SetConfig+0x9c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d003      	beq.n	800acba <TIM_OC5_SetConfig+0x5e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a11      	ldr	r2, [pc, #68]	@ (800acfc <TIM_OC5_SetConfig+0xa0>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d109      	bne.n	800acce <TIM_OC5_SetConfig+0x72>
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	4313      	orrs	r3, r2
 800accc:	617b      	str	r3, [r7, #20]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	605a      	str	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	655a      	str	r2, [r3, #84]	@ 0x54
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	659a      	str	r2, [r3, #88]	@ 0x58
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	621a      	str	r2, [r3, #32]
 800ace8:	bf00      	nop
 800acea:	371c      	adds	r7, #28
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	fffeff8f 	.word	0xfffeff8f
 800acf8:	40010000 	.word	0x40010000
 800acfc:	40010400 	.word	0x40010400

0800ad00 <TIM_OC6_SetConfig>:
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	613b      	str	r3, [r7, #16]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	621a      	str	r2, [r3, #32]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ad9c <TIM_OC6_SetConfig+0x9c>)
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad42:	613b      	str	r3, [r7, #16]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	051b      	lsls	r3, r3, #20
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a13      	ldr	r2, [pc, #76]	@ (800ada0 <TIM_OC6_SetConfig+0xa0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d003      	beq.n	800ad60 <TIM_OC6_SetConfig+0x60>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a12      	ldr	r2, [pc, #72]	@ (800ada4 <TIM_OC6_SetConfig+0xa4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d109      	bne.n	800ad74 <TIM_OC6_SetConfig+0x74>
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	029b      	lsls	r3, r3, #10
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	605a      	str	r2, [r3, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	655a      	str	r2, [r3, #84]	@ 0x54
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	621a      	str	r2, [r3, #32]
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	feff8fff 	.word	0xfeff8fff
 800ada0:	40010000 	.word	0x40010000
 800ada4:	40010400 	.word	0x40010400

0800ada8 <TIM_TI1_ConfigInputStage>:
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	617b      	str	r3, [r7, #20]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0201 	bic.w	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 030a 	bic.w	r3, r3, #10
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	619a      	str	r2, [r3, #24]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	621a      	str	r2, [r3, #32]
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <TIM_TI2_ConfigInputStage>:
 800ae06:	b480      	push	{r7}
 800ae08:	b087      	sub	sp, #28
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	f023 0210 	bic.w	r2, r3, #16
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	621a      	str	r2, [r3, #32]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	613b      	str	r3, [r7, #16]
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	031b      	lsls	r3, r3, #12
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	619a      	str	r2, [r3, #24]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	621a      	str	r2, [r3, #32]
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <TIM_ITRx_SetConfig>:
 800ae66:	b480      	push	{r7}
 800ae68:	b085      	sub	sp, #20
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	f043 0307 	orr.w	r3, r3, #7
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	609a      	str	r2, [r3, #8]
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <TIM_ETR_SetConfig>:
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	021a      	lsls	r2, r3, #8
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	609a      	str	r2, [r3, #8]
 800aed0:	bf00      	nop
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_TIMEx_MasterConfigSynchronization>:
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d101      	bne.n	800aef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef0:	2302      	movs	r3, #2
 800aef2:	e06d      	b.n	800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	60bb      	str	r3, [r7, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a30      	ldr	r2, [pc, #192]	@ (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d004      	beq.n	800af28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a2f      	ldr	r2, [pc, #188]	@ (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d108      	bne.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	605a      	str	r2, [r3, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a20      	ldr	r2, [pc, #128]	@ (800afdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d022      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af66:	d01d      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a1d      	ldr	r2, [pc, #116]	@ (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d018      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a1c      	ldr	r2, [pc, #112]	@ (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d013      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a1a      	ldr	r2, [pc, #104]	@ (800afec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00e      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a15      	ldr	r2, [pc, #84]	@ (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d009      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a16      	ldr	r2, [pc, #88]	@ (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d004      	beq.n	800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a15      	ldr	r2, [pc, #84]	@ (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d10c      	bne.n	800afbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afaa:	60bb      	str	r3, [r7, #8]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	60bb      	str	r3, [r7, #8]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	609a      	str	r2, [r3, #8]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800afce:	2300      	movs	r3, #0
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	40010000 	.word	0x40010000
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40000400 	.word	0x40000400
 800afe8:	40000800 	.word	0x40000800
 800afec:	40000c00 	.word	0x40000c00
 800aff0:	40014000 	.word	0x40014000
 800aff4:	40001800 	.word	0x40001800

0800aff8 <HAL_TIMEx_ConfigBreakDeadTime>:
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d101      	bne.n	800b014 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b010:	2302      	movs	r3, #2
 800b012:	e065      	b.n	800b0e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	4313      	orrs	r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4313      	orrs	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	4313      	orrs	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	041b      	lsls	r3, r3, #16
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a16      	ldr	r2, [pc, #88]	@ (800b0ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d004      	beq.n	800b0a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a14      	ldr	r2, [pc, #80]	@ (800b0f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d115      	bne.n	800b0ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ac:	051b      	lsls	r3, r3, #20
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	645a      	str	r2, [r3, #68]	@ 0x44
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	40010000 	.word	0x40010000
 800b0f0:	40010400 	.word	0x40010400

0800b0f4 <HAL_TIMEx_CommutCallback>:
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_TIMEx_BreakCallback>:
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_TIMEx_Break2Callback>:
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <HAL_UART_Init>:
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_UART_Init+0x12>
 800b13e:	2301      	movs	r3, #1
 800b140:	e040      	b.n	800b1c4 <HAL_UART_Init+0x94>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d106      	bne.n	800b158 <HAL_UART_Init+0x28>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7f9 f9cc 	bl	80044f0 <HAL_UART_MspInit>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2224      	movs	r2, #36	@ 0x24
 800b15c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0201 	bic.w	r2, r2, #1
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <HAL_UART_Init+0x4c>
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fe66 	bl	800be48 <UART_AdvFeatureConfig>
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fbff 	bl	800b980 <UART_SetConfig>
 800b182:	4603      	mov	r3, r0
 800b184:	2b01      	cmp	r3, #1
 800b186:	d101      	bne.n	800b18c <HAL_UART_Init+0x5c>
 800b188:	2301      	movs	r3, #1
 800b18a:	e01b      	b.n	800b1c4 <HAL_UART_Init+0x94>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b19a:	605a      	str	r2, [r3, #4]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1aa:	609a      	str	r2, [r3, #8]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f042 0201 	orr.w	r2, r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fee5 	bl	800bf8c <UART_CheckIdleState>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <HAL_UART_Transmit>:
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08a      	sub	sp, #40	@ 0x28
 800b1d0:	af02      	add	r7, sp, #8
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	80fb      	strh	r3, [r7, #6]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1e0:	2b20      	cmp	r3, #32
 800b1e2:	d177      	bne.n	800b2d4 <HAL_UART_Transmit+0x108>
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d002      	beq.n	800b1f0 <HAL_UART_Transmit+0x24>
 800b1ea:	88fb      	ldrh	r3, [r7, #6]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UART_Transmit+0x28>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e070      	b.n	800b2d6 <HAL_UART_Transmit+0x10a>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2221      	movs	r2, #33	@ 0x21
 800b200:	67da      	str	r2, [r3, #124]	@ 0x7c
 800b202:	f7f9 fa8f 	bl	8004724 <HAL_GetTick>
 800b206:	6178      	str	r0, [r7, #20]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	88fa      	ldrh	r2, [r7, #6]
 800b20c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	88fa      	ldrh	r2, [r7, #6]
 800b214:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b220:	d108      	bne.n	800b234 <HAL_UART_Transmit+0x68>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d104      	bne.n	800b234 <HAL_UART_Transmit+0x68>
 800b22a:	2300      	movs	r3, #0
 800b22c:	61fb      	str	r3, [r7, #28]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	61bb      	str	r3, [r7, #24]
 800b232:	e003      	b.n	800b23c <HAL_UART_Transmit+0x70>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	61fb      	str	r3, [r7, #28]
 800b238:	2300      	movs	r3, #0
 800b23a:	61bb      	str	r3, [r7, #24]
 800b23c:	e02f      	b.n	800b29e <HAL_UART_Transmit+0xd2>
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2200      	movs	r2, #0
 800b246:	2180      	movs	r1, #128	@ 0x80
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 fef6 	bl	800c03a <UART_WaitOnFlagUntilTimeout>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d004      	beq.n	800b25e <HAL_UART_Transmit+0x92>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	67da      	str	r2, [r3, #124]	@ 0x7c
 800b25a:	2303      	movs	r3, #3
 800b25c:	e03b      	b.n	800b2d6 <HAL_UART_Transmit+0x10a>
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10b      	bne.n	800b27c <HAL_UART_Transmit+0xb0>
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b272:	629a      	str	r2, [r3, #40]	@ 0x28
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	3302      	adds	r3, #2
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	e007      	b.n	800b28c <HAL_UART_Transmit+0xc0>
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	629a      	str	r2, [r3, #40]	@ 0x28
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	3301      	adds	r3, #1
 800b28a:	61fb      	str	r3, [r7, #28]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b292:	b29b      	uxth	r3, r3
 800b294:	3b01      	subs	r3, #1
 800b296:	b29a      	uxth	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1c9      	bne.n	800b23e <HAL_UART_Transmit+0x72>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2140      	movs	r1, #64	@ 0x40
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 fec0 	bl	800c03a <UART_WaitOnFlagUntilTimeout>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <HAL_UART_Transmit+0xfe>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	67da      	str	r2, [r3, #124]	@ 0x7c
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e005      	b.n	800b2d6 <HAL_UART_Transmit+0x10a>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e000      	b.n	800b2d6 <HAL_UART_Transmit+0x10a>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3720      	adds	r7, #32
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_UART_Receive_IT>:
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b08a      	sub	sp, #40	@ 0x28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	80fb      	strh	r3, [r7, #6]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f2:	2b20      	cmp	r3, #32
 800b2f4:	d132      	bne.n	800b35c <HAL_UART_Receive_IT+0x7e>
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <HAL_UART_Receive_IT+0x24>
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <HAL_UART_Receive_IT+0x28>
 800b302:	2301      	movs	r3, #1
 800b304:	e02b      	b.n	800b35e <HAL_UART_Receive_IT+0x80>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	661a      	str	r2, [r3, #96]	@ 0x60
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b316:	2b00      	cmp	r3, #0
 800b318:	d018      	beq.n	800b34c <HAL_UART_Receive_IT+0x6e>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b32e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	461a      	mov	r2, r3
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	623b      	str	r3, [r7, #32]
 800b33a:	61fa      	str	r2, [r7, #28]
 800b33c:	69f9      	ldr	r1, [r7, #28]
 800b33e:	6a3a      	ldr	r2, [r7, #32]
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	61bb      	str	r3, [r7, #24]
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e6      	bne.n	800b31a <HAL_UART_Receive_IT+0x3c>
 800b34c:	88fb      	ldrh	r3, [r7, #6]
 800b34e:	461a      	mov	r2, r3
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 fede 	bl	800c114 <UART_Start_Receive_IT>
 800b358:	4603      	mov	r3, r0
 800b35a:	e000      	b.n	800b35e <HAL_UART_Receive_IT+0x80>
 800b35c:	2302      	movs	r3, #2
 800b35e:	4618      	mov	r0, r3
 800b360:	3728      	adds	r7, #40	@ 0x28
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <HAL_UART_IRQHandler>:
 800b368:	b580      	push	{r7, lr}
 800b36a:	b0ba      	sub	sp, #232	@ 0xe8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b38e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b392:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b396:	4013      	ands	r3, r2
 800b398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b39c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d115      	bne.n	800b3d0 <HAL_UART_IRQHandler+0x68>
 800b3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00f      	beq.n	800b3d0 <HAL_UART_IRQHandler+0x68>
 800b3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d009      	beq.n	800b3d0 <HAL_UART_IRQHandler+0x68>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 82b1 	beq.w	800b928 <HAL_UART_IRQHandler+0x5c0>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
 800b3ce:	e2ab      	b.n	800b928 <HAL_UART_IRQHandler+0x5c0>
 800b3d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 8117 	beq.w	800b608 <HAL_UART_IRQHandler+0x2a0>
 800b3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <HAL_UART_IRQHandler+0x8c>
 800b3e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b3ea:	4b85      	ldr	r3, [pc, #532]	@ (800b600 <HAL_UART_IRQHandler+0x298>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 810a 	beq.w	800b608 <HAL_UART_IRQHandler+0x2a0>
 800b3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d011      	beq.n	800b424 <HAL_UART_IRQHandler+0xbc>
 800b400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00b      	beq.n	800b424 <HAL_UART_IRQHandler+0xbc>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2201      	movs	r2, #1
 800b412:	621a      	str	r2, [r3, #32]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b41a:	f043 0201 	orr.w	r2, r3, #1
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b428:	f003 0302 	and.w	r3, r3, #2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d011      	beq.n	800b454 <HAL_UART_IRQHandler+0xec>
 800b430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <HAL_UART_IRQHandler+0xec>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2202      	movs	r2, #2
 800b442:	621a      	str	r2, [r3, #32]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44a:	f043 0204 	orr.w	r2, r3, #4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d011      	beq.n	800b484 <HAL_UART_IRQHandler+0x11c>
 800b460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <HAL_UART_IRQHandler+0x11c>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2204      	movs	r2, #4
 800b472:	621a      	str	r2, [r3, #32]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b47a:	f043 0202 	orr.w	r2, r3, #2
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b488:	f003 0308 	and.w	r3, r3, #8
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d017      	beq.n	800b4c0 <HAL_UART_IRQHandler+0x158>
 800b490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b494:	f003 0320 	and.w	r3, r3, #32
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <HAL_UART_IRQHandler+0x140>
 800b49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <HAL_UART_IRQHandler+0x158>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	621a      	str	r2, [r3, #32]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4b6:	f043 0208 	orr.w	r2, r3, #8
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d012      	beq.n	800b4f2 <HAL_UART_IRQHandler+0x18a>
 800b4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00c      	beq.n	800b4f2 <HAL_UART_IRQHandler+0x18a>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4e0:	621a      	str	r2, [r3, #32]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4e8:	f043 0220 	orr.w	r2, r3, #32
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 8217 	beq.w	800b92c <HAL_UART_IRQHandler+0x5c4>
 800b4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b502:	f003 0320 	and.w	r3, r3, #32
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00d      	beq.n	800b526 <HAL_UART_IRQHandler+0x1be>
 800b50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d007      	beq.n	800b526 <HAL_UART_IRQHandler+0x1be>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <HAL_UART_IRQHandler+0x1be>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4798      	blx	r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b52c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53a:	2b40      	cmp	r3, #64	@ 0x40
 800b53c:	d005      	beq.n	800b54a <HAL_UART_IRQHandler+0x1e2>
 800b53e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b542:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	d04f      	beq.n	800b5ea <HAL_UART_IRQHandler+0x282>
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fea8 	bl	800c2a0 <UART_EndRxTransfer>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b55a:	2b40      	cmp	r3, #64	@ 0x40
 800b55c:	d141      	bne.n	800b5e2 <HAL_UART_IRQHandler+0x27a>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b568:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b574:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b57c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3308      	adds	r3, #8
 800b586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b58a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b58e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b5a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1d9      	bne.n	800b55e <HAL_UART_IRQHandler+0x1f6>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d013      	beq.n	800b5da <HAL_UART_IRQHandler+0x272>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5b6:	4a13      	ldr	r2, [pc, #76]	@ (800b604 <HAL_UART_IRQHandler+0x29c>)
 800b5b8:	651a      	str	r2, [r3, #80]	@ 0x50
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f9 fe96 	bl	80052f0 <HAL_DMA_Abort_IT>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d017      	beq.n	800b5fa <HAL_UART_IRQHandler+0x292>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	e00f      	b.n	800b5fa <HAL_UART_IRQHandler+0x292>
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f9ba 	bl	800b954 <HAL_UART_ErrorCallback>
 800b5e0:	e00b      	b.n	800b5fa <HAL_UART_IRQHandler+0x292>
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f9b6 	bl	800b954 <HAL_UART_ErrorCallback>
 800b5e8:	e007      	b.n	800b5fa <HAL_UART_IRQHandler+0x292>
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f9b2 	bl	800b954 <HAL_UART_ErrorCallback>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800b5f8:	e198      	b.n	800b92c <HAL_UART_IRQHandler+0x5c4>
 800b5fa:	bf00      	nop
 800b5fc:	e196      	b.n	800b92c <HAL_UART_IRQHandler+0x5c4>
 800b5fe:	bf00      	nop
 800b600:	04000120 	.word	0x04000120
 800b604:	0800c369 	.word	0x0800c369
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	f040 8166 	bne.w	800b8de <HAL_UART_IRQHandler+0x576>
 800b612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b616:	f003 0310 	and.w	r3, r3, #16
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 815f 	beq.w	800b8de <HAL_UART_IRQHandler+0x576>
 800b620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b624:	f003 0310 	and.w	r3, r3, #16
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 8158 	beq.w	800b8de <HAL_UART_IRQHandler+0x576>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2210      	movs	r2, #16
 800b634:	621a      	str	r2, [r3, #32]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b640:	2b40      	cmp	r3, #64	@ 0x40
 800b642:	f040 80d0 	bne.w	800b7e6 <HAL_UART_IRQHandler+0x47e>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 800b652:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 80ab 	beq.w	800b7b2 <HAL_UART_IRQHandler+0x44a>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b666:	429a      	cmp	r2, r3
 800b668:	f080 80a3 	bcs.w	800b7b2 <HAL_UART_IRQHandler+0x44a>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b672:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b680:	f000 8086 	beq.w	800b790 <HAL_UART_IRQHandler+0x428>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b68c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b690:	e853 3f00 	ldrex	r3, [r3]
 800b694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b69c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b6ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b6b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800b6b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b6ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b6be:	e841 2300 	strex	r3, r2, [r1]
 800b6c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1da      	bne.n	800b684 <HAL_UART_IRQHandler+0x31c>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	677b      	str	r3, [r7, #116]	@ 0x74
 800b6d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6e0:	f023 0301 	bic.w	r3, r3, #1
 800b6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b6f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b6f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6fe:	e841 2300 	strex	r3, r2, [r1]
 800b702:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1e1      	bne.n	800b6ce <HAL_UART_IRQHandler+0x366>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3308      	adds	r3, #8
 800b710:	663b      	str	r3, [r7, #96]	@ 0x60
 800b712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b714:	e853 3f00 	ldrex	r3, [r3]
 800b718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b71a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b71c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3308      	adds	r3, #8
 800b72a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b72e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b730:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b732:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b734:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b73c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e3      	bne.n	800b70a <HAL_UART_IRQHandler+0x3a2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2220      	movs	r2, #32
 800b746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	661a      	str	r2, [r3, #96]	@ 0x60
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b75e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b760:	f023 0310 	bic.w	r3, r3, #16
 800b764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b772:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b774:	657a      	str	r2, [r7, #84]	@ 0x54
 800b776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b778:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e4      	bne.n	800b750 <HAL_UART_IRQHandler+0x3e8>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f9 fd40 	bl	8005210 <HAL_DMA_Abort>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2202      	movs	r2, #2
 800b794:	665a      	str	r2, [r3, #100]	@ 0x64
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f8dc 	bl	800b968 <HAL_UARTEx_RxEventCallback>
 800b7b0:	e0be      	b.n	800b930 <HAL_UART_IRQHandler+0x5c8>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b7b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	f040 80b7 	bne.w	800b930 <HAL_UART_IRQHandler+0x5c8>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7cc:	f040 80b0 	bne.w	800b930 <HAL_UART_IRQHandler+0x5c8>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	665a      	str	r2, [r3, #100]	@ 0x64
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f8c2 	bl	800b968 <HAL_UARTEx_RxEventCallback>
 800b7e4:	e0a4      	b.n	800b930 <HAL_UART_IRQHandler+0x5c8>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b800:	b29b      	uxth	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	f000 8096 	beq.w	800b934 <HAL_UART_IRQHandler+0x5cc>
 800b808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 8091 	beq.w	800b934 <HAL_UART_IRQHandler+0x5cc>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b826:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b834:	647b      	str	r3, [r7, #68]	@ 0x44
 800b836:	643a      	str	r2, [r7, #64]	@ 0x40
 800b838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b83a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e4      	bne.n	800b812 <HAL_UART_IRQHandler+0x4aa>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	623b      	str	r3, [r7, #32]
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	f023 0301 	bic.w	r3, r3, #1
 800b85e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3308      	adds	r3, #8
 800b868:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b86c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b870:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b874:	e841 2300 	strex	r3, r2, [r1]
 800b878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e3      	bne.n	800b848 <HAL_UART_IRQHandler+0x4e0>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2220      	movs	r2, #32
 800b884:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	669a      	str	r2, [r3, #104]	@ 0x68
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	613b      	str	r3, [r7, #16]
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f023 0310 	bic.w	r3, r3, #16
 800b8a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8b6:	61fb      	str	r3, [r7, #28]
 800b8b8:	61ba      	str	r2, [r7, #24]
 800b8ba:	69b9      	ldr	r1, [r7, #24]
 800b8bc:	69fa      	ldr	r2, [r7, #28]
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e4      	bne.n	800b894 <HAL_UART_IRQHandler+0x52c>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	665a      	str	r2, [r3, #100]	@ 0x64
 800b8d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f846 	bl	800b968 <HAL_UARTEx_RxEventCallback>
 800b8dc:	e02a      	b.n	800b934 <HAL_UART_IRQHandler+0x5cc>
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00e      	beq.n	800b908 <HAL_UART_IRQHandler+0x5a0>
 800b8ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d008      	beq.n	800b908 <HAL_UART_IRQHandler+0x5a0>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01c      	beq.n	800b938 <HAL_UART_IRQHandler+0x5d0>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	4798      	blx	r3
 800b906:	e017      	b.n	800b938 <HAL_UART_IRQHandler+0x5d0>
 800b908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b910:	2b00      	cmp	r3, #0
 800b912:	d012      	beq.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00c      	beq.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fd33 	bl	800c38c <UART_EndTransmit_IT>
 800b926:	e008      	b.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b928:	bf00      	nop
 800b92a:	e006      	b.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b92c:	bf00      	nop
 800b92e:	e004      	b.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b930:	bf00      	nop
 800b932:	e002      	b.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b934:	bf00      	nop
 800b936:	e000      	b.n	800b93a <HAL_UART_IRQHandler+0x5d2>
 800b938:	bf00      	nop
 800b93a:	37e8      	adds	r7, #232	@ 0xe8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <HAL_UART_TxCpltCallback>:
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_UART_ErrorCallback>:
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_UARTEx_RxEventCallback>:
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	807b      	strh	r3, [r7, #2]
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <UART_SetConfig>:
 800b980:	b580      	push	{r7, lr}
 800b982:	b088      	sub	sp, #32
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	2300      	movs	r3, #0
 800b98a:	77bb      	strb	r3, [r7, #30]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689a      	ldr	r2, [r3, #8]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	431a      	orrs	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	431a      	orrs	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	617b      	str	r3, [r7, #20]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	4ba6      	ldr	r3, [pc, #664]	@ (800bc44 <UART_SetConfig+0x2c4>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	6812      	ldr	r2, [r2, #0]
 800b9b2:	6979      	ldr	r1, [r7, #20]
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	617b      	str	r3, [r7, #20]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a1b      	ldr	r3, [r3, #32]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	609a      	str	r2, [r3, #8]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a94      	ldr	r2, [pc, #592]	@ (800bc48 <UART_SetConfig+0x2c8>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d120      	bne.n	800ba3e <UART_SetConfig+0xbe>
 800b9fc:	4b93      	ldr	r3, [pc, #588]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800b9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d816      	bhi.n	800ba38 <UART_SetConfig+0xb8>
 800ba0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba10 <UART_SetConfig+0x90>)
 800ba0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba10:	0800ba21 	.word	0x0800ba21
 800ba14:	0800ba2d 	.word	0x0800ba2d
 800ba18:	0800ba27 	.word	0x0800ba27
 800ba1c:	0800ba33 	.word	0x0800ba33
 800ba20:	2301      	movs	r3, #1
 800ba22:	77fb      	strb	r3, [r7, #31]
 800ba24:	e150      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba26:	2302      	movs	r3, #2
 800ba28:	77fb      	strb	r3, [r7, #31]
 800ba2a:	e14d      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba2c:	2304      	movs	r3, #4
 800ba2e:	77fb      	strb	r3, [r7, #31]
 800ba30:	e14a      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba32:	2308      	movs	r3, #8
 800ba34:	77fb      	strb	r3, [r7, #31]
 800ba36:	e147      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	77fb      	strb	r3, [r7, #31]
 800ba3c:	e144      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a83      	ldr	r2, [pc, #524]	@ (800bc50 <UART_SetConfig+0x2d0>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d132      	bne.n	800baae <UART_SetConfig+0x12e>
 800ba48:	4b80      	ldr	r3, [pc, #512]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800ba4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba4e:	f003 030c 	and.w	r3, r3, #12
 800ba52:	2b0c      	cmp	r3, #12
 800ba54:	d828      	bhi.n	800baa8 <UART_SetConfig+0x128>
 800ba56:	a201      	add	r2, pc, #4	@ (adr r2, 800ba5c <UART_SetConfig+0xdc>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800ba91 	.word	0x0800ba91
 800ba60:	0800baa9 	.word	0x0800baa9
 800ba64:	0800baa9 	.word	0x0800baa9
 800ba68:	0800baa9 	.word	0x0800baa9
 800ba6c:	0800ba9d 	.word	0x0800ba9d
 800ba70:	0800baa9 	.word	0x0800baa9
 800ba74:	0800baa9 	.word	0x0800baa9
 800ba78:	0800baa9 	.word	0x0800baa9
 800ba7c:	0800ba97 	.word	0x0800ba97
 800ba80:	0800baa9 	.word	0x0800baa9
 800ba84:	0800baa9 	.word	0x0800baa9
 800ba88:	0800baa9 	.word	0x0800baa9
 800ba8c:	0800baa3 	.word	0x0800baa3
 800ba90:	2300      	movs	r3, #0
 800ba92:	77fb      	strb	r3, [r7, #31]
 800ba94:	e118      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba96:	2302      	movs	r3, #2
 800ba98:	77fb      	strb	r3, [r7, #31]
 800ba9a:	e115      	b.n	800bcc8 <UART_SetConfig+0x348>
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e112      	b.n	800bcc8 <UART_SetConfig+0x348>
 800baa2:	2308      	movs	r3, #8
 800baa4:	77fb      	strb	r3, [r7, #31]
 800baa6:	e10f      	b.n	800bcc8 <UART_SetConfig+0x348>
 800baa8:	2310      	movs	r3, #16
 800baaa:	77fb      	strb	r3, [r7, #31]
 800baac:	e10c      	b.n	800bcc8 <UART_SetConfig+0x348>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a68      	ldr	r2, [pc, #416]	@ (800bc54 <UART_SetConfig+0x2d4>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d120      	bne.n	800bafa <UART_SetConfig+0x17a>
 800bab8:	4b64      	ldr	r3, [pc, #400]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800baba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800babe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bac2:	2b30      	cmp	r3, #48	@ 0x30
 800bac4:	d013      	beq.n	800baee <UART_SetConfig+0x16e>
 800bac6:	2b30      	cmp	r3, #48	@ 0x30
 800bac8:	d814      	bhi.n	800baf4 <UART_SetConfig+0x174>
 800baca:	2b20      	cmp	r3, #32
 800bacc:	d009      	beq.n	800bae2 <UART_SetConfig+0x162>
 800bace:	2b20      	cmp	r3, #32
 800bad0:	d810      	bhi.n	800baf4 <UART_SetConfig+0x174>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <UART_SetConfig+0x15c>
 800bad6:	2b10      	cmp	r3, #16
 800bad8:	d006      	beq.n	800bae8 <UART_SetConfig+0x168>
 800bada:	e00b      	b.n	800baf4 <UART_SetConfig+0x174>
 800badc:	2300      	movs	r3, #0
 800bade:	77fb      	strb	r3, [r7, #31]
 800bae0:	e0f2      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bae2:	2302      	movs	r3, #2
 800bae4:	77fb      	strb	r3, [r7, #31]
 800bae6:	e0ef      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bae8:	2304      	movs	r3, #4
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e0ec      	b.n	800bcc8 <UART_SetConfig+0x348>
 800baee:	2308      	movs	r3, #8
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e0e9      	b.n	800bcc8 <UART_SetConfig+0x348>
 800baf4:	2310      	movs	r3, #16
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e0e6      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a56      	ldr	r2, [pc, #344]	@ (800bc58 <UART_SetConfig+0x2d8>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d120      	bne.n	800bb46 <UART_SetConfig+0x1c6>
 800bb04:	4b51      	ldr	r3, [pc, #324]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800bb06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bb0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb10:	d013      	beq.n	800bb3a <UART_SetConfig+0x1ba>
 800bb12:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb14:	d814      	bhi.n	800bb40 <UART_SetConfig+0x1c0>
 800bb16:	2b80      	cmp	r3, #128	@ 0x80
 800bb18:	d009      	beq.n	800bb2e <UART_SetConfig+0x1ae>
 800bb1a:	2b80      	cmp	r3, #128	@ 0x80
 800bb1c:	d810      	bhi.n	800bb40 <UART_SetConfig+0x1c0>
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d002      	beq.n	800bb28 <UART_SetConfig+0x1a8>
 800bb22:	2b40      	cmp	r3, #64	@ 0x40
 800bb24:	d006      	beq.n	800bb34 <UART_SetConfig+0x1b4>
 800bb26:	e00b      	b.n	800bb40 <UART_SetConfig+0x1c0>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	77fb      	strb	r3, [r7, #31]
 800bb2c:	e0cc      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	77fb      	strb	r3, [r7, #31]
 800bb32:	e0c9      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb34:	2304      	movs	r3, #4
 800bb36:	77fb      	strb	r3, [r7, #31]
 800bb38:	e0c6      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	77fb      	strb	r3, [r7, #31]
 800bb3e:	e0c3      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb40:	2310      	movs	r3, #16
 800bb42:	77fb      	strb	r3, [r7, #31]
 800bb44:	e0c0      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a44      	ldr	r2, [pc, #272]	@ (800bc5c <UART_SetConfig+0x2dc>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d125      	bne.n	800bb9c <UART_SetConfig+0x21c>
 800bb50:	4b3e      	ldr	r3, [pc, #248]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800bb52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb5e:	d017      	beq.n	800bb90 <UART_SetConfig+0x210>
 800bb60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb64:	d817      	bhi.n	800bb96 <UART_SetConfig+0x216>
 800bb66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb6a:	d00b      	beq.n	800bb84 <UART_SetConfig+0x204>
 800bb6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb70:	d811      	bhi.n	800bb96 <UART_SetConfig+0x216>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <UART_SetConfig+0x1fe>
 800bb76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb7a:	d006      	beq.n	800bb8a <UART_SetConfig+0x20a>
 800bb7c:	e00b      	b.n	800bb96 <UART_SetConfig+0x216>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	77fb      	strb	r3, [r7, #31]
 800bb82:	e0a1      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb84:	2302      	movs	r3, #2
 800bb86:	77fb      	strb	r3, [r7, #31]
 800bb88:	e09e      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb8a:	2304      	movs	r3, #4
 800bb8c:	77fb      	strb	r3, [r7, #31]
 800bb8e:	e09b      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb90:	2308      	movs	r3, #8
 800bb92:	77fb      	strb	r3, [r7, #31]
 800bb94:	e098      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb96:	2310      	movs	r3, #16
 800bb98:	77fb      	strb	r3, [r7, #31]
 800bb9a:	e095      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a2f      	ldr	r2, [pc, #188]	@ (800bc60 <UART_SetConfig+0x2e0>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d125      	bne.n	800bbf2 <UART_SetConfig+0x272>
 800bba6:	4b29      	ldr	r3, [pc, #164]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800bba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bbb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bbb4:	d017      	beq.n	800bbe6 <UART_SetConfig+0x266>
 800bbb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bbba:	d817      	bhi.n	800bbec <UART_SetConfig+0x26c>
 800bbbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbc0:	d00b      	beq.n	800bbda <UART_SetConfig+0x25a>
 800bbc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbc6:	d811      	bhi.n	800bbec <UART_SetConfig+0x26c>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d003      	beq.n	800bbd4 <UART_SetConfig+0x254>
 800bbcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbd0:	d006      	beq.n	800bbe0 <UART_SetConfig+0x260>
 800bbd2:	e00b      	b.n	800bbec <UART_SetConfig+0x26c>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	77fb      	strb	r3, [r7, #31]
 800bbd8:	e076      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	77fb      	strb	r3, [r7, #31]
 800bbde:	e073      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	77fb      	strb	r3, [r7, #31]
 800bbe4:	e070      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bbe6:	2308      	movs	r3, #8
 800bbe8:	77fb      	strb	r3, [r7, #31]
 800bbea:	e06d      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bbec:	2310      	movs	r3, #16
 800bbee:	77fb      	strb	r3, [r7, #31]
 800bbf0:	e06a      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800bc64 <UART_SetConfig+0x2e4>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d138      	bne.n	800bc6e <UART_SetConfig+0x2ee>
 800bbfc:	4b13      	ldr	r3, [pc, #76]	@ (800bc4c <UART_SetConfig+0x2cc>)
 800bbfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bc06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc0a:	d017      	beq.n	800bc3c <UART_SetConfig+0x2bc>
 800bc0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc10:	d82a      	bhi.n	800bc68 <UART_SetConfig+0x2e8>
 800bc12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc16:	d00b      	beq.n	800bc30 <UART_SetConfig+0x2b0>
 800bc18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc1c:	d824      	bhi.n	800bc68 <UART_SetConfig+0x2e8>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <UART_SetConfig+0x2aa>
 800bc22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc26:	d006      	beq.n	800bc36 <UART_SetConfig+0x2b6>
 800bc28:	e01e      	b.n	800bc68 <UART_SetConfig+0x2e8>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	77fb      	strb	r3, [r7, #31]
 800bc2e:	e04b      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bc30:	2302      	movs	r3, #2
 800bc32:	77fb      	strb	r3, [r7, #31]
 800bc34:	e048      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bc36:	2304      	movs	r3, #4
 800bc38:	77fb      	strb	r3, [r7, #31]
 800bc3a:	e045      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	77fb      	strb	r3, [r7, #31]
 800bc40:	e042      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bc42:	bf00      	nop
 800bc44:	efff69f3 	.word	0xefff69f3
 800bc48:	40011000 	.word	0x40011000
 800bc4c:	40023800 	.word	0x40023800
 800bc50:	40004400 	.word	0x40004400
 800bc54:	40004800 	.word	0x40004800
 800bc58:	40004c00 	.word	0x40004c00
 800bc5c:	40005000 	.word	0x40005000
 800bc60:	40011400 	.word	0x40011400
 800bc64:	40007800 	.word	0x40007800
 800bc68:	2310      	movs	r3, #16
 800bc6a:	77fb      	strb	r3, [r7, #31]
 800bc6c:	e02c      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a72      	ldr	r2, [pc, #456]	@ (800be3c <UART_SetConfig+0x4bc>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d125      	bne.n	800bcc4 <UART_SetConfig+0x344>
 800bc78:	4b71      	ldr	r3, [pc, #452]	@ (800be40 <UART_SetConfig+0x4c0>)
 800bc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bc82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bc86:	d017      	beq.n	800bcb8 <UART_SetConfig+0x338>
 800bc88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bc8c:	d817      	bhi.n	800bcbe <UART_SetConfig+0x33e>
 800bc8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc92:	d00b      	beq.n	800bcac <UART_SetConfig+0x32c>
 800bc94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc98:	d811      	bhi.n	800bcbe <UART_SetConfig+0x33e>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <UART_SetConfig+0x326>
 800bc9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bca2:	d006      	beq.n	800bcb2 <UART_SetConfig+0x332>
 800bca4:	e00b      	b.n	800bcbe <UART_SetConfig+0x33e>
 800bca6:	2300      	movs	r3, #0
 800bca8:	77fb      	strb	r3, [r7, #31]
 800bcaa:	e00d      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bcac:	2302      	movs	r3, #2
 800bcae:	77fb      	strb	r3, [r7, #31]
 800bcb0:	e00a      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bcb2:	2304      	movs	r3, #4
 800bcb4:	77fb      	strb	r3, [r7, #31]
 800bcb6:	e007      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bcb8:	2308      	movs	r3, #8
 800bcba:	77fb      	strb	r3, [r7, #31]
 800bcbc:	e004      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bcbe:	2310      	movs	r3, #16
 800bcc0:	77fb      	strb	r3, [r7, #31]
 800bcc2:	e001      	b.n	800bcc8 <UART_SetConfig+0x348>
 800bcc4:	2310      	movs	r3, #16
 800bcc6:	77fb      	strb	r3, [r7, #31]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcd0:	d15b      	bne.n	800bd8a <UART_SetConfig+0x40a>
 800bcd2:	7ffb      	ldrb	r3, [r7, #31]
 800bcd4:	2b08      	cmp	r3, #8
 800bcd6:	d828      	bhi.n	800bd2a <UART_SetConfig+0x3aa>
 800bcd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bce0 <UART_SetConfig+0x360>)
 800bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bd05 	.word	0x0800bd05
 800bce4:	0800bd0d 	.word	0x0800bd0d
 800bce8:	0800bd15 	.word	0x0800bd15
 800bcec:	0800bd2b 	.word	0x0800bd2b
 800bcf0:	0800bd1b 	.word	0x0800bd1b
 800bcf4:	0800bd2b 	.word	0x0800bd2b
 800bcf8:	0800bd2b 	.word	0x0800bd2b
 800bcfc:	0800bd2b 	.word	0x0800bd2b
 800bd00:	0800bd23 	.word	0x0800bd23
 800bd04:	f7fb fc32 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 800bd08:	61b8      	str	r0, [r7, #24]
 800bd0a:	e013      	b.n	800bd34 <UART_SetConfig+0x3b4>
 800bd0c:	f7fb fc42 	bl	8007594 <HAL_RCC_GetPCLK2Freq>
 800bd10:	61b8      	str	r0, [r7, #24]
 800bd12:	e00f      	b.n	800bd34 <UART_SetConfig+0x3b4>
 800bd14:	4b4b      	ldr	r3, [pc, #300]	@ (800be44 <UART_SetConfig+0x4c4>)
 800bd16:	61bb      	str	r3, [r7, #24]
 800bd18:	e00c      	b.n	800bd34 <UART_SetConfig+0x3b4>
 800bd1a:	f7fb fb55 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 800bd1e:	61b8      	str	r0, [r7, #24]
 800bd20:	e008      	b.n	800bd34 <UART_SetConfig+0x3b4>
 800bd22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd26:	61bb      	str	r3, [r7, #24]
 800bd28:	e004      	b.n	800bd34 <UART_SetConfig+0x3b4>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	61bb      	str	r3, [r7, #24]
 800bd2e:	2301      	movs	r3, #1
 800bd30:	77bb      	strb	r3, [r7, #30]
 800bd32:	bf00      	nop
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d074      	beq.n	800be24 <UART_SetConfig+0x4a4>
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	005a      	lsls	r2, r3, #1
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	085b      	lsrs	r3, r3, #1
 800bd44:	441a      	add	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4e:	613b      	str	r3, [r7, #16]
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	2b0f      	cmp	r3, #15
 800bd54:	d916      	bls.n	800bd84 <UART_SetConfig+0x404>
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd5c:	d212      	bcs.n	800bd84 <UART_SetConfig+0x404>
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f023 030f 	bic.w	r3, r3, #15
 800bd66:	81fb      	strh	r3, [r7, #14]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	085b      	lsrs	r3, r3, #1
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	f003 0307 	and.w	r3, r3, #7
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	89fb      	ldrh	r3, [r7, #14]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	81fb      	strh	r3, [r7, #14]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	89fa      	ldrh	r2, [r7, #14]
 800bd80:	60da      	str	r2, [r3, #12]
 800bd82:	e04f      	b.n	800be24 <UART_SetConfig+0x4a4>
 800bd84:	2301      	movs	r3, #1
 800bd86:	77bb      	strb	r3, [r7, #30]
 800bd88:	e04c      	b.n	800be24 <UART_SetConfig+0x4a4>
 800bd8a:	7ffb      	ldrb	r3, [r7, #31]
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d828      	bhi.n	800bde2 <UART_SetConfig+0x462>
 800bd90:	a201      	add	r2, pc, #4	@ (adr r2, 800bd98 <UART_SetConfig+0x418>)
 800bd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd96:	bf00      	nop
 800bd98:	0800bdbd 	.word	0x0800bdbd
 800bd9c:	0800bdc5 	.word	0x0800bdc5
 800bda0:	0800bdcd 	.word	0x0800bdcd
 800bda4:	0800bde3 	.word	0x0800bde3
 800bda8:	0800bdd3 	.word	0x0800bdd3
 800bdac:	0800bde3 	.word	0x0800bde3
 800bdb0:	0800bde3 	.word	0x0800bde3
 800bdb4:	0800bde3 	.word	0x0800bde3
 800bdb8:	0800bddb 	.word	0x0800bddb
 800bdbc:	f7fb fbd6 	bl	800756c <HAL_RCC_GetPCLK1Freq>
 800bdc0:	61b8      	str	r0, [r7, #24]
 800bdc2:	e013      	b.n	800bdec <UART_SetConfig+0x46c>
 800bdc4:	f7fb fbe6 	bl	8007594 <HAL_RCC_GetPCLK2Freq>
 800bdc8:	61b8      	str	r0, [r7, #24]
 800bdca:	e00f      	b.n	800bdec <UART_SetConfig+0x46c>
 800bdcc:	4b1d      	ldr	r3, [pc, #116]	@ (800be44 <UART_SetConfig+0x4c4>)
 800bdce:	61bb      	str	r3, [r7, #24]
 800bdd0:	e00c      	b.n	800bdec <UART_SetConfig+0x46c>
 800bdd2:	f7fb faf9 	bl	80073c8 <HAL_RCC_GetSysClockFreq>
 800bdd6:	61b8      	str	r0, [r7, #24]
 800bdd8:	e008      	b.n	800bdec <UART_SetConfig+0x46c>
 800bdda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	e004      	b.n	800bdec <UART_SetConfig+0x46c>
 800bde2:	2300      	movs	r3, #0
 800bde4:	61bb      	str	r3, [r7, #24]
 800bde6:	2301      	movs	r3, #1
 800bde8:	77bb      	strb	r3, [r7, #30]
 800bdea:	bf00      	nop
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d018      	beq.n	800be24 <UART_SetConfig+0x4a4>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	085a      	lsrs	r2, r3, #1
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	441a      	add	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	fbb2 f3f3 	udiv	r3, r2, r3
 800be04:	613b      	str	r3, [r7, #16]
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b0f      	cmp	r3, #15
 800be0a:	d909      	bls.n	800be20 <UART_SetConfig+0x4a0>
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be12:	d205      	bcs.n	800be20 <UART_SetConfig+0x4a0>
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	60da      	str	r2, [r3, #12]
 800be1e:	e001      	b.n	800be24 <UART_SetConfig+0x4a4>
 800be20:	2301      	movs	r3, #1
 800be22:	77bb      	strb	r3, [r7, #30]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	669a      	str	r2, [r3, #104]	@ 0x68
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800be30:	7fbb      	ldrb	r3, [r7, #30]
 800be32:	4618      	mov	r0, r3
 800be34:	3720      	adds	r7, #32
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	40007c00 	.word	0x40007c00
 800be40:	40023800 	.word	0x40023800
 800be44:	00f42400 	.word	0x00f42400

0800be48 <UART_AdvFeatureConfig>:
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be54:	f003 0308 	and.w	r3, r3, #8
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00a      	beq.n	800be72 <UART_AdvFeatureConfig+0x2a>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	430a      	orrs	r2, r1
 800be70:	605a      	str	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be76:	f003 0301 	and.w	r3, r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <UART_AdvFeatureConfig+0x4c>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	430a      	orrs	r2, r1
 800be92:	605a      	str	r2, [r3, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <UART_AdvFeatureConfig+0x6e>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	605a      	str	r2, [r3, #4]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00a      	beq.n	800bed8 <UART_AdvFeatureConfig+0x90>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	605a      	str	r2, [r3, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bedc:	f003 0310 	and.w	r3, r3, #16
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00a      	beq.n	800befa <UART_AdvFeatureConfig+0xb2>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	430a      	orrs	r2, r1
 800bef8:	609a      	str	r2, [r3, #8]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befe:	f003 0320 	and.w	r3, r3, #32
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <UART_AdvFeatureConfig+0xd4>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01a      	beq.n	800bf5e <UART_AdvFeatureConfig+0x116>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	605a      	str	r2, [r3, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf46:	d10a      	bne.n	800bf5e <UART_AdvFeatureConfig+0x116>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	605a      	str	r2, [r3, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00a      	beq.n	800bf80 <UART_AdvFeatureConfig+0x138>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	605a      	str	r2, [r3, #4]
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <UART_CheckIdleState>:
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08c      	sub	sp, #48	@ 0x30
 800bf90:	af02      	add	r7, sp, #8
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800bf9c:	f7f8 fbc2 	bl	8004724 <HAL_GetTick>
 800bfa0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0308 	and.w	r3, r3, #8
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	d12e      	bne.n	800c00e <UART_CheckIdleState+0x82>
 800bfb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f83b 	bl	800c03a <UART_WaitOnFlagUntilTimeout>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d021      	beq.n	800c00e <UART_CheckIdleState+0x82>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	613b      	str	r3, [r7, #16]
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfde:	623b      	str	r3, [r7, #32]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	61fb      	str	r3, [r7, #28]
 800bfea:	61ba      	str	r2, [r7, #24]
 800bfec:	69b9      	ldr	r1, [r7, #24]
 800bfee:	69fa      	ldr	r2, [r7, #28]
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e6      	bne.n	800bfca <UART_CheckIdleState+0x3e>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800c00a:	2303      	movs	r3, #3
 800c00c:	e011      	b.n	800c032 <UART_CheckIdleState+0xa6>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2220      	movs	r2, #32
 800c012:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2220      	movs	r2, #32
 800c018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	661a      	str	r2, [r3, #96]	@ 0x60
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	665a      	str	r2, [r3, #100]	@ 0x64
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800c030:	2300      	movs	r3, #0
 800c032:	4618      	mov	r0, r3
 800c034:	3728      	adds	r7, #40	@ 0x28
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <UART_WaitOnFlagUntilTimeout>:
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	603b      	str	r3, [r7, #0]
 800c046:	4613      	mov	r3, r2
 800c048:	71fb      	strb	r3, [r7, #7]
 800c04a:	e04f      	b.n	800c0ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c052:	d04b      	beq.n	800c0ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800c054:	f7f8 fb66 	bl	8004724 <HAL_GetTick>
 800c058:	4602      	mov	r2, r0
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	429a      	cmp	r2, r3
 800c062:	d302      	bcc.n	800c06a <UART_WaitOnFlagUntilTimeout+0x30>
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <UART_WaitOnFlagUntilTimeout+0x34>
 800c06a:	2303      	movs	r3, #3
 800c06c:	e04e      	b.n	800c10c <UART_WaitOnFlagUntilTimeout+0xd2>
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d037      	beq.n	800c0ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2b80      	cmp	r3, #128	@ 0x80
 800c080:	d034      	beq.n	800c0ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2b40      	cmp	r3, #64	@ 0x40
 800c086:	d031      	beq.n	800c0ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	f003 0308 	and.w	r3, r3, #8
 800c092:	2b08      	cmp	r3, #8
 800c094:	d110      	bne.n	800c0b8 <UART_WaitOnFlagUntilTimeout+0x7e>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2208      	movs	r2, #8
 800c09c:	621a      	str	r2, [r3, #32]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 f8fe 	bl	800c2a0 <UART_EndRxTransfer>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2208      	movs	r2, #8
 800c0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e029      	b.n	800c10c <UART_WaitOnFlagUntilTimeout+0xd2>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0c6:	d111      	bne.n	800c0ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0d0:	621a      	str	r2, [r3, #32]
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f000 f8e4 	bl	800c2a0 <UART_EndRxTransfer>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2220      	movs	r2, #32
 800c0dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	e00f      	b.n	800c10c <UART_WaitOnFlagUntilTimeout+0xd2>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	69da      	ldr	r2, [r3, #28]
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	bf0c      	ite	eq
 800c0fc:	2301      	moveq	r3, #1
 800c0fe:	2300      	movne	r3, #0
 800c100:	b2db      	uxtb	r3, r3
 800c102:	461a      	mov	r2, r3
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	429a      	cmp	r2, r3
 800c108:	d0a0      	beq.n	800c04c <UART_WaitOnFlagUntilTimeout+0x12>
 800c10a:	2300      	movs	r3, #0
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <UART_Start_Receive_IT>:
 800c114:	b480      	push	{r7}
 800c116:	b097      	sub	sp, #92	@ 0x5c
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	4613      	mov	r3, r2
 800c120:	80fb      	strh	r3, [r7, #6]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	655a      	str	r2, [r3, #84]	@ 0x54
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	88fa      	ldrh	r2, [r7, #6]
 800c12c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	88fa      	ldrh	r2, [r7, #6]
 800c134:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	669a      	str	r2, [r3, #104]	@ 0x68
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c146:	d10e      	bne.n	800c166 <UART_Start_Receive_IT+0x52>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d105      	bne.n	800c15c <UART_Start_Receive_IT+0x48>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c156:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c15a:	e02d      	b.n	800c1b8 <UART_Start_Receive_IT+0xa4>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	22ff      	movs	r2, #255	@ 0xff
 800c160:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c164:	e028      	b.n	800c1b8 <UART_Start_Receive_IT+0xa4>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10d      	bne.n	800c18a <UART_Start_Receive_IT+0x76>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d104      	bne.n	800c180 <UART_Start_Receive_IT+0x6c>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	22ff      	movs	r2, #255	@ 0xff
 800c17a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c17e:	e01b      	b.n	800c1b8 <UART_Start_Receive_IT+0xa4>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	227f      	movs	r2, #127	@ 0x7f
 800c184:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c188:	e016      	b.n	800c1b8 <UART_Start_Receive_IT+0xa4>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c192:	d10d      	bne.n	800c1b0 <UART_Start_Receive_IT+0x9c>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d104      	bne.n	800c1a6 <UART_Start_Receive_IT+0x92>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	227f      	movs	r2, #127	@ 0x7f
 800c1a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c1a4:	e008      	b.n	800c1b8 <UART_Start_Receive_IT+0xa4>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	223f      	movs	r2, #63	@ 0x3f
 800c1aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c1ae:	e003      	b.n	800c1b8 <UART_Start_Receive_IT+0xa4>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2222      	movs	r2, #34	@ 0x22
 800c1c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d2:	e853 3f00 	ldrex	r3, [r3]
 800c1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	f043 0301 	orr.w	r3, r3, #1
 800c1de:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c1ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1f0:	e841 2300 	strex	r3, r2, [r1]
 800c1f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e5      	bne.n	800c1c8 <UART_Start_Receive_IT+0xb4>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c204:	d107      	bne.n	800c216 <UART_Start_Receive_IT+0x102>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d103      	bne.n	800c216 <UART_Start_Receive_IT+0x102>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	4a21      	ldr	r2, [pc, #132]	@ (800c298 <UART_Start_Receive_IT+0x184>)
 800c212:	669a      	str	r2, [r3, #104]	@ 0x68
 800c214:	e002      	b.n	800c21c <UART_Start_Receive_IT+0x108>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4a20      	ldr	r2, [pc, #128]	@ (800c29c <UART_Start_Receive_IT+0x188>)
 800c21a:	669a      	str	r2, [r3, #104]	@ 0x68
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d019      	beq.n	800c258 <UART_Start_Receive_IT+0x144>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	e853 3f00 	ldrex	r3, [r3]
 800c230:	627b      	str	r3, [r7, #36]	@ 0x24
 800c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c234:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
 800c244:	633a      	str	r2, [r7, #48]	@ 0x30
 800c246:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e6      	bne.n	800c224 <UART_Start_Receive_IT+0x110>
 800c256:	e018      	b.n	800c28a <UART_Start_Receive_IT+0x176>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	617b      	str	r3, [r7, #20]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	613b      	str	r3, [r7, #16]
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	f043 0320 	orr.w	r3, r3, #32
 800c26c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c276:	623b      	str	r3, [r7, #32]
 800c278:	61fa      	str	r2, [r7, #28]
 800c27a:	69f9      	ldr	r1, [r7, #28]
 800c27c:	6a3a      	ldr	r2, [r7, #32]
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	61bb      	str	r3, [r7, #24]
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e6      	bne.n	800c258 <UART_Start_Receive_IT+0x144>
 800c28a:	2300      	movs	r3, #0
 800c28c:	4618      	mov	r0, r3
 800c28e:	375c      	adds	r7, #92	@ 0x5c
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	0800c589 	.word	0x0800c589
 800c29c:	0800c3e1 	.word	0x0800c3e1

0800c2a0 <UART_EndRxTransfer>:
 800c2a0:	b480      	push	{r7}
 800c2a2:	b095      	sub	sp, #84	@ 0x54
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c2ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e6      	bne.n	800c2a8 <UART_EndRxTransfer+0x8>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3308      	adds	r3, #8
 800c2e0:	623b      	str	r3, [r7, #32]
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	61fb      	str	r3, [r7, #28]
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	f023 0301 	bic.w	r3, r3, #1
 800c2f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	627b      	str	r3, [r7, #36]	@ 0x24
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e5      	bne.n	800c2da <UART_EndRxTransfer+0x3a>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c312:	2b01      	cmp	r3, #1
 800c314:	d118      	bne.n	800c348 <UART_EndRxTransfer+0xa8>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	60bb      	str	r3, [r7, #8]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	f023 0310 	bic.w	r3, r3, #16
 800c32a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c334:	61bb      	str	r3, [r7, #24]
 800c336:	617a      	str	r2, [r7, #20]
 800c338:	6979      	ldr	r1, [r7, #20]
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	613b      	str	r3, [r7, #16]
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e6      	bne.n	800c316 <UART_EndRxTransfer+0x76>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2220      	movs	r2, #32
 800c34c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	661a      	str	r2, [r3, #96]	@ 0x60
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	669a      	str	r2, [r3, #104]	@ 0x68
 800c35c:	bf00      	nop
 800c35e:	3754      	adds	r7, #84	@ 0x54
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <UART_DMAAbortOnError>:
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7ff fae8 	bl	800b954 <HAL_UART_ErrorCallback>
 800c384:	bf00      	nop
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <UART_EndTransmit_IT>:
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	60bb      	str	r3, [r7, #8]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	61bb      	str	r3, [r7, #24]
 800c3b4:	617a      	str	r2, [r7, #20]
 800c3b6:	6979      	ldr	r1, [r7, #20]
 800c3b8:	69ba      	ldr	r2, [r7, #24]
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	613b      	str	r3, [r7, #16]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e6      	bne.n	800c394 <UART_EndTransmit_IT+0x8>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff fab4 	bl	800b940 <HAL_UART_TxCpltCallback>
 800c3d8:	bf00      	nop
 800c3da:	3720      	adds	r7, #32
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <UART_RxISR_8BIT>:
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b09c      	sub	sp, #112	@ 0x70
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c3ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3f8:	2b22      	cmp	r3, #34	@ 0x22
 800c3fa:	f040 80b9 	bne.w	800c570 <UART_RxISR_8BIT+0x190>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c404:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c408:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c40c:	b2d9      	uxtb	r1, r3
 800c40e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c412:	b2da      	uxtb	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c418:	400a      	ands	r2, r1
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	655a      	str	r2, [r3, #84]	@ 0x54
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c440:	b29b      	uxth	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	f040 809c 	bne.w	800c580 <UART_RxISR_8BIT+0x1a0>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c44e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c450:	e853 3f00 	ldrex	r3, [r3]
 800c454:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c45c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c466:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c468:	657a      	str	r2, [r7, #84]	@ 0x54
 800c46a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c46c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c46e:	e841 2300 	strex	r3, r2, [r1]
 800c472:	653b      	str	r3, [r7, #80]	@ 0x50
 800c474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e6      	bne.n	800c448 <UART_RxISR_8BIT+0x68>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3308      	adds	r3, #8
 800c480:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c484:	e853 3f00 	ldrex	r3, [r3]
 800c488:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c48c:	f023 0301 	bic.w	r3, r3, #1
 800c490:	667b      	str	r3, [r7, #100]	@ 0x64
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3308      	adds	r3, #8
 800c498:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c49a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c49c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c49e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4a2:	e841 2300 	strex	r3, r2, [r1]
 800c4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1e5      	bne.n	800c47a <UART_RxISR_8BIT+0x9a>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2220      	movs	r2, #32
 800c4b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	669a      	str	r2, [r3, #104]	@ 0x68
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	665a      	str	r2, [r3, #100]	@ 0x64
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d018      	beq.n	800c502 <UART_RxISR_8BIT+0x122>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d8:	e853 3f00 	ldrex	r3, [r3]
 800c4dc:	623b      	str	r3, [r7, #32]
 800c4de:	6a3b      	ldr	r3, [r7, #32]
 800c4e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4f6:	e841 2300 	strex	r3, r2, [r1]
 800c4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1e6      	bne.n	800c4d0 <UART_RxISR_8BIT+0xf0>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c506:	2b01      	cmp	r3, #1
 800c508:	d12e      	bne.n	800c568 <UART_RxISR_8BIT+0x188>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	661a      	str	r2, [r3, #96]	@ 0x60
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	e853 3f00 	ldrex	r3, [r3]
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f023 0310 	bic.w	r3, r3, #16
 800c524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	61ba      	str	r2, [r7, #24]
 800c532:	69b9      	ldr	r1, [r7, #24]
 800c534:	69fa      	ldr	r2, [r7, #28]
 800c536:	e841 2300 	strex	r3, r2, [r1]
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1e6      	bne.n	800c510 <UART_RxISR_8BIT+0x130>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	69db      	ldr	r3, [r3, #28]
 800c548:	f003 0310 	and.w	r3, r3, #16
 800c54c:	2b10      	cmp	r3, #16
 800c54e:	d103      	bne.n	800c558 <UART_RxISR_8BIT+0x178>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2210      	movs	r2, #16
 800c556:	621a      	str	r2, [r3, #32]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c55e:	4619      	mov	r1, r3
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff fa01 	bl	800b968 <HAL_UARTEx_RxEventCallback>
 800c566:	e00b      	b.n	800c580 <UART_RxISR_8BIT+0x1a0>
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7f5 fd95 	bl	8002098 <HAL_UART_RxCpltCallback>
 800c56e:	e007      	b.n	800c580 <UART_RxISR_8BIT+0x1a0>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	699a      	ldr	r2, [r3, #24]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f042 0208 	orr.w	r2, r2, #8
 800c57e:	619a      	str	r2, [r3, #24]
 800c580:	bf00      	nop
 800c582:	3770      	adds	r7, #112	@ 0x70
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <UART_RxISR_16BIT>:
 800c588:	b580      	push	{r7, lr}
 800c58a:	b09c      	sub	sp, #112	@ 0x70
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c596:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5a0:	2b22      	cmp	r3, #34	@ 0x22
 800c5a2:	f040 80b9 	bne.w	800c718 <UART_RxISR_16BIT+0x190>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c5ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c5be:	4013      	ands	r3, r2
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5c4:	801a      	strh	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ca:	1c9a      	adds	r2, r3, #2
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	655a      	str	r2, [r3, #84]	@ 0x54
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f040 809c 	bne.w	800c728 <UART_RxISR_16BIT+0x1a0>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c604:	667b      	str	r3, [r7, #100]	@ 0x64
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c60e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c610:	653a      	str	r2, [r7, #80]	@ 0x50
 800c612:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e6      	bne.n	800c5f0 <UART_RxISR_16BIT+0x68>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3308      	adds	r3, #8
 800c628:	637b      	str	r3, [r7, #52]	@ 0x34
 800c62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	633b      	str	r3, [r7, #48]	@ 0x30
 800c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c634:	f023 0301 	bic.w	r3, r3, #1
 800c638:	663b      	str	r3, [r7, #96]	@ 0x60
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	3308      	adds	r3, #8
 800c640:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c642:	643a      	str	r2, [r7, #64]	@ 0x40
 800c644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e5      	bne.n	800c622 <UART_RxISR_16BIT+0x9a>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2220      	movs	r2, #32
 800c65a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	669a      	str	r2, [r3, #104]	@ 0x68
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	665a      	str	r2, [r3, #100]	@ 0x64
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c674:	2b00      	cmp	r3, #0
 800c676:	d018      	beq.n	800c6aa <UART_RxISR_16BIT+0x122>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	623b      	str	r3, [r7, #32]
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c698:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c69a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c69c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e6      	bne.n	800c678 <UART_RxISR_16BIT+0xf0>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d12e      	bne.n	800c710 <UART_RxISR_16BIT+0x188>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	661a      	str	r2, [r3, #96]	@ 0x60
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	60fb      	str	r3, [r7, #12]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	e853 3f00 	ldrex	r3, [r3]
 800c6c4:	60bb      	str	r3, [r7, #8]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f023 0310 	bic.w	r3, r3, #16
 800c6cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d6:	61bb      	str	r3, [r7, #24]
 800c6d8:	617a      	str	r2, [r7, #20]
 800c6da:	6979      	ldr	r1, [r7, #20]
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	e841 2300 	strex	r3, r2, [r1]
 800c6e2:	613b      	str	r3, [r7, #16]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1e6      	bne.n	800c6b8 <UART_RxISR_16BIT+0x130>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	69db      	ldr	r3, [r3, #28]
 800c6f0:	f003 0310 	and.w	r3, r3, #16
 800c6f4:	2b10      	cmp	r3, #16
 800c6f6:	d103      	bne.n	800c700 <UART_RxISR_16BIT+0x178>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2210      	movs	r2, #16
 800c6fe:	621a      	str	r2, [r3, #32]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff f92d 	bl	800b968 <HAL_UARTEx_RxEventCallback>
 800c70e:	e00b      	b.n	800c728 <UART_RxISR_16BIT+0x1a0>
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7f5 fcc1 	bl	8002098 <HAL_UART_RxCpltCallback>
 800c716:	e007      	b.n	800c728 <UART_RxISR_16BIT+0x1a0>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	699a      	ldr	r2, [r3, #24]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f042 0208 	orr.w	r2, r2, #8
 800c726:	619a      	str	r2, [r3, #24]
 800c728:	bf00      	nop
 800c72a:	3770      	adds	r7, #112	@ 0x70
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <FMC_SDRAM_Init>:
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d121      	bne.n	800c786 <FMC_SDRAM_Init+0x56>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	4b27      	ldr	r3, [pc, #156]	@ (800c7e4 <FMC_SDRAM_Init+0xb4>)
 800c748:	4013      	ands	r3, r2
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	6851      	ldr	r1, [r2, #4]
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	6892      	ldr	r2, [r2, #8]
 800c752:	4311      	orrs	r1, r2
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	68d2      	ldr	r2, [r2, #12]
 800c758:	4311      	orrs	r1, r2
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	6912      	ldr	r2, [r2, #16]
 800c75e:	4311      	orrs	r1, r2
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	6952      	ldr	r2, [r2, #20]
 800c764:	4311      	orrs	r1, r2
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	6992      	ldr	r2, [r2, #24]
 800c76a:	4311      	orrs	r1, r2
 800c76c:	683a      	ldr	r2, [r7, #0]
 800c76e:	69d2      	ldr	r2, [r2, #28]
 800c770:	4311      	orrs	r1, r2
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	6a12      	ldr	r2, [r2, #32]
 800c776:	4311      	orrs	r1, r2
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c77c:	430a      	orrs	r2, r1
 800c77e:	431a      	orrs	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	e026      	b.n	800c7d4 <FMC_SDRAM_Init+0xa4>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	69d9      	ldr	r1, [r3, #28]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	4319      	orrs	r1, r3
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c79c:	430b      	orrs	r3, r1
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e4 <FMC_SDRAM_Init+0xb4>)
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	6851      	ldr	r1, [r2, #4]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	6892      	ldr	r2, [r2, #8]
 800c7b4:	4311      	orrs	r1, r2
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	68d2      	ldr	r2, [r2, #12]
 800c7ba:	4311      	orrs	r1, r2
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	6912      	ldr	r2, [r2, #16]
 800c7c0:	4311      	orrs	r1, r2
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	6952      	ldr	r2, [r2, #20]
 800c7c6:	4311      	orrs	r1, r2
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	6992      	ldr	r2, [r2, #24]
 800c7cc:	430a      	orrs	r2, r1
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	605a      	str	r2, [r3, #4]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	ffff8000 	.word	0xffff8000

0800c7e8 <FMC_SDRAM_Timing_Init>:
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d128      	bne.n	800c84c <FMC_SDRAM_Timing_Init+0x64>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	1e59      	subs	r1, r3, #1
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	011b      	lsls	r3, r3, #4
 800c810:	4319      	orrs	r1, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	3b01      	subs	r3, #1
 800c818:	021b      	lsls	r3, r3, #8
 800c81a:	4319      	orrs	r1, r3
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	3b01      	subs	r3, #1
 800c822:	031b      	lsls	r3, r3, #12
 800c824:	4319      	orrs	r1, r3
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	041b      	lsls	r3, r3, #16
 800c82e:	4319      	orrs	r1, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	695b      	ldr	r3, [r3, #20]
 800c834:	3b01      	subs	r3, #1
 800c836:	051b      	lsls	r3, r3, #20
 800c838:	4319      	orrs	r1, r3
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	3b01      	subs	r3, #1
 800c840:	061b      	lsls	r3, r3, #24
 800c842:	430b      	orrs	r3, r1
 800c844:	431a      	orrs	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	609a      	str	r2, [r3, #8]
 800c84a:	e02d      	b.n	800c8a8 <FMC_SDRAM_Timing_Init+0xc0>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	689a      	ldr	r2, [r3, #8]
 800c850:	4b19      	ldr	r3, [pc, #100]	@ (800c8b8 <FMC_SDRAM_Timing_Init+0xd0>)
 800c852:	4013      	ands	r3, r2
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	68d2      	ldr	r2, [r2, #12]
 800c858:	3a01      	subs	r2, #1
 800c85a:	0311      	lsls	r1, r2, #12
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	6952      	ldr	r2, [r2, #20]
 800c860:	3a01      	subs	r2, #1
 800c862:	0512      	lsls	r2, r2, #20
 800c864:	430a      	orrs	r2, r1
 800c866:	431a      	orrs	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	609a      	str	r2, [r3, #8]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	1e59      	subs	r1, r3, #1
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	3b01      	subs	r3, #1
 800c880:	011b      	lsls	r3, r3, #4
 800c882:	4319      	orrs	r1, r3
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	3b01      	subs	r3, #1
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	4319      	orrs	r1, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	3b01      	subs	r3, #1
 800c894:	041b      	lsls	r3, r3, #16
 800c896:	4319      	orrs	r1, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	061b      	lsls	r3, r3, #24
 800c8a0:	430b      	orrs	r3, r1
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	60da      	str	r2, [r3, #12]
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	ff0f0fff 	.word	0xff0f0fff

0800c8bc <SDMMC_Init>:
 800c8bc:	b084      	sub	sp, #16
 800c8be:	b480      	push	{r7}
 800c8c0:	b085      	sub	sp, #20
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	f107 001c 	add.w	r0, r7, #28
 800c8ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	69fa      	ldr	r2, [r7, #28]
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	4b07      	ldr	r3, [pc, #28]	@ (800c910 <SDMMC_Init+0x54>)
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	605a      	str	r2, [r3, #4]
 800c8fe:	2300      	movs	r3, #0
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	b004      	add	sp, #16
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	ffff8100 	.word	0xffff8100

0800c914 <SDMMC_ReadFIFO>:
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c922:	4618      	mov	r0, r3
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <SDMMC_PowerState_ON>:
 800c92e:	b480      	push	{r7}
 800c930:	b083      	sub	sp, #12
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2203      	movs	r2, #3
 800c93a:	601a      	str	r2, [r3, #0]
 800c93c:	2300      	movs	r3, #0
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <SDMMC_GetPowerState>:
 800c94a:	b480      	push	{r7}
 800c94c:	b083      	sub	sp, #12
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 0303 	and.w	r3, r3, #3
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
	...

0800c968 <SDMMC_SendCommand>:
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
 800c972:	2300      	movs	r3, #0
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	609a      	str	r2, [r3, #8]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	431a      	orrs	r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	431a      	orrs	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	4313      	orrs	r3, r2
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	4313      	orrs	r3, r2
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68da      	ldr	r2, [r3, #12]
 800c99e:	4b06      	ldr	r3, [pc, #24]	@ (800c9b8 <SDMMC_SendCommand+0x50>)
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	431a      	orrs	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	60da      	str	r2, [r3, #12]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr
 800c9b8:	fffff000 	.word	0xfffff000

0800c9bc <SDMMC_GetCommandResponse>:
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <SDMMC_GetResponse>:
 800c9d6:	b480      	push	{r7}
 800c9d8:	b085      	sub	sp, #20
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	3314      	adds	r3, #20
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <SDMMC_ConfigData>:
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	625a      	str	r2, [r3, #36]	@ 0x24
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	689a      	ldr	r2, [r3, #8]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	431a      	orrs	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	60fb      	str	r3, [r7, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	431a      	orrs	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ca46:	2300      	movs	r3, #0
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <SDMMC_CmdBlockLength>:
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	60bb      	str	r3, [r7, #8]
 800ca62:	2310      	movs	r3, #16
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	2340      	movs	r3, #64	@ 0x40
 800ca68:	613b      	str	r3, [r7, #16]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
 800ca6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca72:	61bb      	str	r3, [r7, #24]
 800ca74:	f107 0308 	add.w	r3, r7, #8
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff ff74 	bl	800c968 <SDMMC_SendCommand>
 800ca80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca84:	2110      	movs	r1, #16
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa1a 	bl	800cec0 <SDMMC_GetCmdResp1>
 800ca8c:	61f8      	str	r0, [r7, #28]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	4618      	mov	r0, r3
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <SDMMC_CmdReadSingleBlock>:
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b088      	sub	sp, #32
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	60bb      	str	r3, [r7, #8]
 800caa6:	2311      	movs	r3, #17
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	2340      	movs	r3, #64	@ 0x40
 800caac:	613b      	str	r3, [r7, #16]
 800caae:	2300      	movs	r3, #0
 800cab0:	617b      	str	r3, [r7, #20]
 800cab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cab6:	61bb      	str	r3, [r7, #24]
 800cab8:	f107 0308 	add.w	r3, r7, #8
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff ff52 	bl	800c968 <SDMMC_SendCommand>
 800cac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cac8:	2111      	movs	r1, #17
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 f9f8 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cad0:	61f8      	str	r0, [r7, #28]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	4618      	mov	r0, r3
 800cad6:	3720      	adds	r7, #32
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <SDMMC_CmdReadMultiBlock>:
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	60bb      	str	r3, [r7, #8]
 800caea:	2312      	movs	r3, #18
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	2340      	movs	r3, #64	@ 0x40
 800caf0:	613b      	str	r3, [r7, #16]
 800caf2:	2300      	movs	r3, #0
 800caf4:	617b      	str	r3, [r7, #20]
 800caf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	f107 0308 	add.w	r3, r7, #8
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff ff30 	bl	800c968 <SDMMC_SendCommand>
 800cb08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb0c:	2112      	movs	r1, #18
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f9d6 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cb14:	61f8      	str	r0, [r7, #28]
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3720      	adds	r7, #32
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <SDMMC_CmdWriteSingleBlock>:
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	60bb      	str	r3, [r7, #8]
 800cb2e:	2318      	movs	r3, #24
 800cb30:	60fb      	str	r3, [r7, #12]
 800cb32:	2340      	movs	r3, #64	@ 0x40
 800cb34:	613b      	str	r3, [r7, #16]
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb3e:	61bb      	str	r3, [r7, #24]
 800cb40:	f107 0308 	add.w	r3, r7, #8
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ff0e 	bl	800c968 <SDMMC_SendCommand>
 800cb4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb50:	2118      	movs	r1, #24
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f9b4 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cb58:	61f8      	str	r0, [r7, #28]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <SDMMC_CmdWriteMultiBlock>:
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	60bb      	str	r3, [r7, #8]
 800cb72:	2319      	movs	r3, #25
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	2340      	movs	r3, #64	@ 0x40
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	617b      	str	r3, [r7, #20]
 800cb7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb82:	61bb      	str	r3, [r7, #24]
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff feec 	bl	800c968 <SDMMC_SendCommand>
 800cb90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb94:	2119      	movs	r1, #25
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f992 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cb9c:	61f8      	str	r0, [r7, #28]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	4618      	mov	r0, r3
 800cba2:	3720      	adds	r7, #32
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <SDMMC_CmdStopTransfer>:
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60bb      	str	r3, [r7, #8]
 800cbb4:	230c      	movs	r3, #12
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	2340      	movs	r3, #64	@ 0x40
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	f107 0308 	add.w	r3, r7, #8
 800cbca:	4619      	mov	r1, r3
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff fecb 	bl	800c968 <SDMMC_SendCommand>
 800cbd2:	4a05      	ldr	r2, [pc, #20]	@ (800cbe8 <SDMMC_CmdStopTransfer+0x40>)
 800cbd4:	210c      	movs	r1, #12
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f972 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cbdc:	61f8      	str	r0, [r7, #28]
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3720      	adds	r7, #32
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	05f5e100 	.word	0x05f5e100

0800cbec <SDMMC_CmdSelDesel>:
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	@ 0x28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	e9c7 2300 	strd	r2, r3, [r7]
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	2307      	movs	r3, #7
 800cbfe:	617b      	str	r3, [r7, #20]
 800cc00:	2340      	movs	r3, #64	@ 0x40
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	2300      	movs	r3, #0
 800cc06:	61fb      	str	r3, [r7, #28]
 800cc08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc0c:	623b      	str	r3, [r7, #32]
 800cc0e:	f107 0310 	add.w	r3, r7, #16
 800cc12:	4619      	mov	r1, r3
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fea7 	bl	800c968 <SDMMC_SendCommand>
 800cc1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc1e:	2107      	movs	r1, #7
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f000 f94d 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cc26:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3728      	adds	r7, #40	@ 0x28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <SDMMC_CmdGoIdleState>:
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b088      	sub	sp, #32
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60bb      	str	r3, [r7, #8]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	2300      	movs	r3, #0
 800cc44:	613b      	str	r3, [r7, #16]
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc4e:	61bb      	str	r3, [r7, #24]
 800cc50:	f107 0308 	add.w	r3, r7, #8
 800cc54:	4619      	mov	r1, r3
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff fe86 	bl	800c968 <SDMMC_SendCommand>
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fb67 	bl	800d330 <SDMMC_GetCmdError>
 800cc62:	61f8      	str	r0, [r7, #28]
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	4618      	mov	r0, r3
 800cc68:	3720      	adds	r7, #32
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <SDMMC_CmdOperCond>:
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b088      	sub	sp, #32
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cc7a:	60bb      	str	r3, [r7, #8]
 800cc7c:	2308      	movs	r3, #8
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	2340      	movs	r3, #64	@ 0x40
 800cc82:	613b      	str	r3, [r7, #16]
 800cc84:	2300      	movs	r3, #0
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	f107 0308 	add.w	r3, r7, #8
 800cc92:	4619      	mov	r1, r3
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff fe67 	bl	800c968 <SDMMC_SendCommand>
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fafa 	bl	800d294 <SDMMC_GetCmdResp7>
 800cca0:	61f8      	str	r0, [r7, #28]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <SDMMC_CmdAppCommand>:
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	60bb      	str	r3, [r7, #8]
 800ccba:	2337      	movs	r3, #55	@ 0x37
 800ccbc:	60fb      	str	r3, [r7, #12]
 800ccbe:	2340      	movs	r3, #64	@ 0x40
 800ccc0:	613b      	str	r3, [r7, #16]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccca:	61bb      	str	r3, [r7, #24]
 800cccc:	f107 0308 	add.w	r3, r7, #8
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff fe48 	bl	800c968 <SDMMC_SendCommand>
 800ccd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccdc:	2137      	movs	r1, #55	@ 0x37
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f8ee 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cce4:	61f8      	str	r0, [r7, #28]
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	4618      	mov	r0, r3
 800ccea:	3720      	adds	r7, #32
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <SDMMC_CmdAppOperCommand>:
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	4b0d      	ldr	r3, [pc, #52]	@ (800cd34 <SDMMC_CmdAppOperCommand+0x44>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	60bb      	str	r3, [r7, #8]
 800cd02:	2329      	movs	r3, #41	@ 0x29
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	2340      	movs	r3, #64	@ 0x40
 800cd08:	613b      	str	r3, [r7, #16]
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	617b      	str	r3, [r7, #20]
 800cd0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd12:	61bb      	str	r3, [r7, #24]
 800cd14:	f107 0308 	add.w	r3, r7, #8
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fe24 	bl	800c968 <SDMMC_SendCommand>
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fa03 	bl	800d12c <SDMMC_GetCmdResp3>
 800cd26:	61f8      	str	r0, [r7, #28]
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	80100000 	.word	0x80100000

0800cd38 <SDMMC_CmdBusWidth>:
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b088      	sub	sp, #32
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	60bb      	str	r3, [r7, #8]
 800cd46:	2306      	movs	r3, #6
 800cd48:	60fb      	str	r3, [r7, #12]
 800cd4a:	2340      	movs	r3, #64	@ 0x40
 800cd4c:	613b      	str	r3, [r7, #16]
 800cd4e:	2300      	movs	r3, #0
 800cd50:	617b      	str	r3, [r7, #20]
 800cd52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd56:	61bb      	str	r3, [r7, #24]
 800cd58:	f107 0308 	add.w	r3, r7, #8
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fe02 	bl	800c968 <SDMMC_SendCommand>
 800cd64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd68:	2106      	movs	r1, #6
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f8a8 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cd70:	61f8      	str	r0, [r7, #28]
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	4618      	mov	r0, r3
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <SDMMC_CmdSendSCR>:
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	2300      	movs	r3, #0
 800cd86:	60bb      	str	r3, [r7, #8]
 800cd88:	2333      	movs	r3, #51	@ 0x33
 800cd8a:	60fb      	str	r3, [r7, #12]
 800cd8c:	2340      	movs	r3, #64	@ 0x40
 800cd8e:	613b      	str	r3, [r7, #16]
 800cd90:	2300      	movs	r3, #0
 800cd92:	617b      	str	r3, [r7, #20]
 800cd94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	f107 0308 	add.w	r3, r7, #8
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff fde1 	bl	800c968 <SDMMC_SendCommand>
 800cda6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdaa:	2133      	movs	r1, #51	@ 0x33
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f887 	bl	800cec0 <SDMMC_GetCmdResp1>
 800cdb2:	61f8      	str	r0, [r7, #28]
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3720      	adds	r7, #32
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <SDMMC_CmdSendCID>:
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b088      	sub	sp, #32
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60bb      	str	r3, [r7, #8]
 800cdca:	2302      	movs	r3, #2
 800cdcc:	60fb      	str	r3, [r7, #12]
 800cdce:	23c0      	movs	r3, #192	@ 0xc0
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	617b      	str	r3, [r7, #20]
 800cdd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdda:	61bb      	str	r3, [r7, #24]
 800cddc:	f107 0308 	add.w	r3, r7, #8
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7ff fdc0 	bl	800c968 <SDMMC_SendCommand>
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f957 	bl	800d09c <SDMMC_GetCmdResp2>
 800cdee:	61f8      	str	r0, [r7, #28]
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3720      	adds	r7, #32
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <SDMMC_CmdSendCSD>:
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b088      	sub	sp, #32
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	6039      	str	r1, [r7, #0]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	60bb      	str	r3, [r7, #8]
 800ce08:	2309      	movs	r3, #9
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	23c0      	movs	r3, #192	@ 0xc0
 800ce0e:	613b      	str	r3, [r7, #16]
 800ce10:	2300      	movs	r3, #0
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce18:	61bb      	str	r3, [r7, #24]
 800ce1a:	f107 0308 	add.w	r3, r7, #8
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff fda1 	bl	800c968 <SDMMC_SendCommand>
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f938 	bl	800d09c <SDMMC_GetCmdResp2>
 800ce2c:	61f8      	str	r0, [r7, #28]
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3720      	adds	r7, #32
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <SDMMC_CmdSetRelAdd>:
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
 800ce42:	2300      	movs	r3, #0
 800ce44:	60bb      	str	r3, [r7, #8]
 800ce46:	2303      	movs	r3, #3
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	2340      	movs	r3, #64	@ 0x40
 800ce4c:	613b      	str	r3, [r7, #16]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	617b      	str	r3, [r7, #20]
 800ce52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce56:	61bb      	str	r3, [r7, #24]
 800ce58:	f107 0308 	add.w	r3, r7, #8
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7ff fd82 	bl	800c968 <SDMMC_SendCommand>
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	2103      	movs	r1, #3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 f99d 	bl	800d1a8 <SDMMC_GetCmdResp6>
 800ce6e:	61f8      	str	r0, [r7, #28]
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	4618      	mov	r0, r3
 800ce74:	3720      	adds	r7, #32
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <SDMMC_CmdSendStatus>:
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b088      	sub	sp, #32
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	6039      	str	r1, [r7, #0]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	60bb      	str	r3, [r7, #8]
 800ce88:	230d      	movs	r3, #13
 800ce8a:	60fb      	str	r3, [r7, #12]
 800ce8c:	2340      	movs	r3, #64	@ 0x40
 800ce8e:	613b      	str	r3, [r7, #16]
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	f107 0308 	add.w	r3, r7, #8
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff fd61 	bl	800c968 <SDMMC_SendCommand>
 800cea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ceaa:	210d      	movs	r1, #13
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f807 	bl	800cec0 <SDMMC_GetCmdResp1>
 800ceb2:	61f8      	str	r0, [r7, #28]
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3720      	adds	r7, #32
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <SDMMC_GetCmdResp1>:
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	460b      	mov	r3, r1
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	72fb      	strb	r3, [r7, #11]
 800cece:	4b70      	ldr	r3, [pc, #448]	@ (800d090 <SDMMC_GetCmdResp1+0x1d0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a70      	ldr	r2, [pc, #448]	@ (800d094 <SDMMC_GetCmdResp1+0x1d4>)
 800ced4:	fba2 2303 	umull	r2, r3, r2, r3
 800ced8:	0a5a      	lsrs	r2, r3, #9
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	fb02 f303 	mul.w	r3, r2, r3
 800cee0:	61fb      	str	r3, [r7, #28]
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	1e5a      	subs	r2, r3, #1
 800cee6:	61fa      	str	r2, [r7, #28]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <SDMMC_GetCmdResp1+0x32>
 800ceec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cef0:	e0c9      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef6:	61bb      	str	r3, [r7, #24]
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0ef      	beq.n	800cee2 <SDMMC_GetCmdResp1+0x22>
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1ea      	bne.n	800cee2 <SDMMC_GetCmdResp1+0x22>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <SDMMC_GetCmdResp1+0x62>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	639a      	str	r2, [r3, #56]	@ 0x38
 800cf1e:	2304      	movs	r3, #4
 800cf20:	e0b1      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d004      	beq.n	800cf38 <SDMMC_GetCmdResp1+0x78>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2201      	movs	r2, #1
 800cf32:	639a      	str	r2, [r3, #56]	@ 0x38
 800cf34:	2301      	movs	r3, #1
 800cf36:	e0a6      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	22c5      	movs	r2, #197	@ 0xc5
 800cf3c:	639a      	str	r2, [r3, #56]	@ 0x38
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f7ff fd3c 	bl	800c9bc <SDMMC_GetCommandResponse>
 800cf44:	4603      	mov	r3, r0
 800cf46:	461a      	mov	r2, r3
 800cf48:	7afb      	ldrb	r3, [r7, #11]
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d001      	beq.n	800cf52 <SDMMC_GetCmdResp1+0x92>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e099      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf52:	2100      	movs	r1, #0
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f7ff fd3e 	bl	800c9d6 <SDMMC_GetResponse>
 800cf5a:	6178      	str	r0, [r7, #20]
 800cf5c:	697a      	ldr	r2, [r7, #20]
 800cf5e:	4b4e      	ldr	r3, [pc, #312]	@ (800d098 <SDMMC_GetCmdResp1+0x1d8>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <SDMMC_GetCmdResp1+0xaa>
 800cf66:	2300      	movs	r3, #0
 800cf68:	e08d      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	da02      	bge.n	800cf76 <SDMMC_GetCmdResp1+0xb6>
 800cf70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cf74:	e087      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <SDMMC_GetCmdResp1+0xc4>
 800cf80:	2340      	movs	r3, #64	@ 0x40
 800cf82:	e080      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <SDMMC_GetCmdResp1+0xd2>
 800cf8e:	2380      	movs	r3, #128	@ 0x80
 800cf90:	e079      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <SDMMC_GetCmdResp1+0xe2>
 800cf9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfa0:	e071      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <SDMMC_GetCmdResp1+0xf2>
 800cfac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfb0:	e069      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SDMMC_GetCmdResp1+0x102>
 800cfbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfc0:	e061      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x112>
 800cfcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cfd0:	e059      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <SDMMC_GetCmdResp1+0x122>
 800cfdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfe0:	e051      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <SDMMC_GetCmdResp1+0x132>
 800cfec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cff0:	e049      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <SDMMC_GetCmdResp1+0x142>
 800cffc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d000:	e041      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <SDMMC_GetCmdResp1+0x152>
 800d00c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d010:	e039      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <SDMMC_GetCmdResp1+0x162>
 800d01c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d020:	e031      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <SDMMC_GetCmdResp1+0x172>
 800d02c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d030:	e029      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <SDMMC_GetCmdResp1+0x182>
 800d03c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d040:	e021      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <SDMMC_GetCmdResp1+0x192>
 800d04c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d050:	e019      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <SDMMC_GetCmdResp1+0x1a2>
 800d05c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d060:	e011      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d002      	beq.n	800d072 <SDMMC_GetCmdResp1+0x1b2>
 800d06c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d070:	e009      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f003 0308 	and.w	r3, r3, #8
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <SDMMC_GetCmdResp1+0x1c2>
 800d07c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d080:	e001      	b.n	800d086 <SDMMC_GetCmdResp1+0x1c6>
 800d082:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d086:	4618      	mov	r0, r3
 800d088:	3720      	adds	r7, #32
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	20000004 	.word	0x20000004
 800d094:	10624dd3 	.word	0x10624dd3
 800d098:	fdffe008 	.word	0xfdffe008

0800d09c <SDMMC_GetCmdResp2>:
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	4b1f      	ldr	r3, [pc, #124]	@ (800d124 <SDMMC_GetCmdResp2+0x88>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a1f      	ldr	r2, [pc, #124]	@ (800d128 <SDMMC_GetCmdResp2+0x8c>)
 800d0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ae:	0a5b      	lsrs	r3, r3, #9
 800d0b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0b4:	fb02 f303 	mul.w	r3, r2, r3
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	1e5a      	subs	r2, r3, #1
 800d0be:	60fa      	str	r2, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <SDMMC_GetCmdResp2+0x2e>
 800d0c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0c8:	e026      	b.n	800d118 <SDMMC_GetCmdResp2+0x7c>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0ce:	60bb      	str	r3, [r7, #8]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d0ef      	beq.n	800d0ba <SDMMC_GetCmdResp2+0x1e>
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1ea      	bne.n	800d0ba <SDMMC_GetCmdResp2+0x1e>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e8:	f003 0304 	and.w	r3, r3, #4
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d004      	beq.n	800d0fa <SDMMC_GetCmdResp2+0x5e>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2204      	movs	r2, #4
 800d0f4:	639a      	str	r2, [r3, #56]	@ 0x38
 800d0f6:	2304      	movs	r3, #4
 800d0f8:	e00e      	b.n	800d118 <SDMMC_GetCmdResp2+0x7c>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	d004      	beq.n	800d110 <SDMMC_GetCmdResp2+0x74>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d10c:	2301      	movs	r3, #1
 800d10e:	e003      	b.n	800d118 <SDMMC_GetCmdResp2+0x7c>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	22c5      	movs	r2, #197	@ 0xc5
 800d114:	639a      	str	r2, [r3, #56]	@ 0x38
 800d116:	2300      	movs	r3, #0
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	20000004 	.word	0x20000004
 800d128:	10624dd3 	.word	0x10624dd3

0800d12c <SDMMC_GetCmdResp3>:
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	4b1a      	ldr	r3, [pc, #104]	@ (800d1a0 <SDMMC_GetCmdResp3+0x74>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a1a      	ldr	r2, [pc, #104]	@ (800d1a4 <SDMMC_GetCmdResp3+0x78>)
 800d13a:	fba2 2303 	umull	r2, r3, r2, r3
 800d13e:	0a5b      	lsrs	r3, r3, #9
 800d140:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d144:	fb02 f303 	mul.w	r3, r2, r3
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	1e5a      	subs	r2, r3, #1
 800d14e:	60fa      	str	r2, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <SDMMC_GetCmdResp3+0x2e>
 800d154:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d158:	e01b      	b.n	800d192 <SDMMC_GetCmdResp3+0x66>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d166:	2b00      	cmp	r3, #0
 800d168:	d0ef      	beq.n	800d14a <SDMMC_GetCmdResp3+0x1e>
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1ea      	bne.n	800d14a <SDMMC_GetCmdResp3+0x1e>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d178:	f003 0304 	and.w	r3, r3, #4
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d004      	beq.n	800d18a <SDMMC_GetCmdResp3+0x5e>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2204      	movs	r2, #4
 800d184:	639a      	str	r2, [r3, #56]	@ 0x38
 800d186:	2304      	movs	r3, #4
 800d188:	e003      	b.n	800d192 <SDMMC_GetCmdResp3+0x66>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	22c5      	movs	r2, #197	@ 0xc5
 800d18e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d190:	2300      	movs	r3, #0
 800d192:	4618      	mov	r0, r3
 800d194:	3714      	adds	r7, #20
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	20000004 	.word	0x20000004
 800d1a4:	10624dd3 	.word	0x10624dd3

0800d1a8 <SDMMC_GetCmdResp6>:
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	72fb      	strb	r3, [r7, #11]
 800d1b6:	4b35      	ldr	r3, [pc, #212]	@ (800d28c <SDMMC_GetCmdResp6+0xe4>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a35      	ldr	r2, [pc, #212]	@ (800d290 <SDMMC_GetCmdResp6+0xe8>)
 800d1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c0:	0a5b      	lsrs	r3, r3, #9
 800d1c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1c6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ca:	61fb      	str	r3, [r7, #28]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	1e5a      	subs	r2, r3, #1
 800d1d0:	61fa      	str	r2, [r7, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d102      	bne.n	800d1dc <SDMMC_GetCmdResp6+0x34>
 800d1d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d1da:	e052      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1e0:	61bb      	str	r3, [r7, #24]
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d0ef      	beq.n	800d1cc <SDMMC_GetCmdResp6+0x24>
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1ea      	bne.n	800d1cc <SDMMC_GetCmdResp6+0x24>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1fa:	f003 0304 	and.w	r3, r3, #4
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d004      	beq.n	800d20c <SDMMC_GetCmdResp6+0x64>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2204      	movs	r2, #4
 800d206:	639a      	str	r2, [r3, #56]	@ 0x38
 800d208:	2304      	movs	r3, #4
 800d20a:	e03a      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <SDMMC_GetCmdResp6+0x7a>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2201      	movs	r2, #1
 800d21c:	639a      	str	r2, [r3, #56]	@ 0x38
 800d21e:	2301      	movs	r3, #1
 800d220:	e02f      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f7ff fbca 	bl	800c9bc <SDMMC_GetCommandResponse>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	7afb      	ldrb	r3, [r7, #11]
 800d22e:	4293      	cmp	r3, r2
 800d230:	d001      	beq.n	800d236 <SDMMC_GetCmdResp6+0x8e>
 800d232:	2301      	movs	r3, #1
 800d234:	e025      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	22c5      	movs	r2, #197	@ 0xc5
 800d23a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d23c:	2100      	movs	r1, #0
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f7ff fbc9 	bl	800c9d6 <SDMMC_GetResponse>
 800d244:	6178      	str	r0, [r7, #20]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <SDMMC_GetCmdResp6+0xb6>
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	0c1b      	lsrs	r3, r3, #16
 800d254:	b29a      	uxth	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	801a      	strh	r2, [r3, #0]
 800d25a:	2300      	movs	r3, #0
 800d25c:	e011      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <SDMMC_GetCmdResp6+0xc6>
 800d268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d26c:	e009      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <SDMMC_GetCmdResp6+0xd6>
 800d278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d27c:	e001      	b.n	800d282 <SDMMC_GetCmdResp6+0xda>
 800d27e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d282:	4618      	mov	r0, r3
 800d284:	3720      	adds	r7, #32
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	20000004 	.word	0x20000004
 800d290:	10624dd3 	.word	0x10624dd3

0800d294 <SDMMC_GetCmdResp7>:
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	4b22      	ldr	r3, [pc, #136]	@ (800d328 <SDMMC_GetCmdResp7+0x94>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a22      	ldr	r2, [pc, #136]	@ (800d32c <SDMMC_GetCmdResp7+0x98>)
 800d2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a6:	0a5b      	lsrs	r3, r3, #9
 800d2a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2ac:	fb02 f303 	mul.w	r3, r2, r3
 800d2b0:	60fb      	str	r3, [r7, #12]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	1e5a      	subs	r2, r3, #1
 800d2b6:	60fa      	str	r2, [r7, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <SDMMC_GetCmdResp7+0x2e>
 800d2bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d2c0:	e02c      	b.n	800d31c <SDMMC_GetCmdResp7+0x88>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c6:	60bb      	str	r3, [r7, #8]
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0ef      	beq.n	800d2b2 <SDMMC_GetCmdResp7+0x1e>
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1ea      	bne.n	800d2b2 <SDMMC_GetCmdResp7+0x1e>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d004      	beq.n	800d2f2 <SDMMC_GetCmdResp7+0x5e>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	639a      	str	r2, [r3, #56]	@ 0x38
 800d2ee:	2304      	movs	r3, #4
 800d2f0:	e014      	b.n	800d31c <SDMMC_GetCmdResp7+0x88>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f6:	f003 0301 	and.w	r3, r3, #1
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <SDMMC_GetCmdResp7+0x74>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	639a      	str	r2, [r3, #56]	@ 0x38
 800d304:	2301      	movs	r3, #1
 800d306:	e009      	b.n	800d31c <SDMMC_GetCmdResp7+0x88>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <SDMMC_GetCmdResp7+0x86>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2240      	movs	r2, #64	@ 0x40
 800d318:	639a      	str	r2, [r3, #56]	@ 0x38
 800d31a:	2300      	movs	r3, #0
 800d31c:	4618      	mov	r0, r3
 800d31e:	3714      	adds	r7, #20
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	20000004 	.word	0x20000004
 800d32c:	10624dd3 	.word	0x10624dd3

0800d330 <SDMMC_GetCmdError>:
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	4b11      	ldr	r3, [pc, #68]	@ (800d380 <SDMMC_GetCmdError+0x50>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a11      	ldr	r2, [pc, #68]	@ (800d384 <SDMMC_GetCmdError+0x54>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	0a5b      	lsrs	r3, r3, #9
 800d344:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d348:	fb02 f303 	mul.w	r3, r2, r3
 800d34c:	60fb      	str	r3, [r7, #12]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	1e5a      	subs	r2, r3, #1
 800d352:	60fa      	str	r2, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <SDMMC_GetCmdError+0x2e>
 800d358:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d35c:	e009      	b.n	800d372 <SDMMC_GetCmdError+0x42>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0f1      	beq.n	800d34e <SDMMC_GetCmdError+0x1e>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	22c5      	movs	r2, #197	@ 0xc5
 800d36e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d370:	2300      	movs	r3, #0
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	20000004 	.word	0x20000004
 800d384:	10624dd3 	.word	0x10624dd3

0800d388 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d38c:	4904      	ldr	r1, [pc, #16]	@ (800d3a0 <MX_FATFS_Init+0x18>)
 800d38e:	4805      	ldr	r0, [pc, #20]	@ (800d3a4 <MX_FATFS_Init+0x1c>)
 800d390:	f000 fa96 	bl	800d8c0 <FATFS_LinkDriver>
 800d394:	4603      	mov	r3, r0
 800d396:	461a      	mov	r2, r3
 800d398:	4b03      	ldr	r3, [pc, #12]	@ (800d3a8 <MX_FATFS_Init+0x20>)
 800d39a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d39c:	bf00      	nop
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20001078 	.word	0x20001078
 800d3a4:	08014e84 	.word	0x08014e84
 800d3a8:	20001074 	.word	0x20001074

0800d3ac <BSP_SD_Init>:
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	71fb      	strb	r3, [r7, #7]
 800d3b6:	f000 f87b 	bl	800d4b0 <BSP_SD_IsDetected>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d001      	beq.n	800d3c4 <BSP_SD_Init+0x18>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e012      	b.n	800d3ea <BSP_SD_Init+0x3e>
 800d3c4:	480b      	ldr	r0, [pc, #44]	@ (800d3f4 <BSP_SD_Init+0x48>)
 800d3c6:	f7fb fbe3 	bl	8008b90 <HAL_SD_Init>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	71fb      	strb	r3, [r7, #7]
 800d3ce:	79fb      	ldrb	r3, [r7, #7]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d109      	bne.n	800d3e8 <BSP_SD_Init+0x3c>
 800d3d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d3d8:	4806      	ldr	r0, [pc, #24]	@ (800d3f4 <BSP_SD_Init+0x48>)
 800d3da:	f7fc f82b 	bl	8009434 <HAL_SD_ConfigWideBusOperation>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <BSP_SD_Init+0x3c>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	71fb      	strb	r3, [r7, #7]
 800d3e8:	79fb      	ldrb	r3, [r7, #7]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20000c14 	.word	0x20000c14

0800d3f8 <BSP_SD_ReadBlocks_DMA>:
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	2300      	movs	r3, #0
 800d406:	75fb      	strb	r3, [r7, #23]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	68f9      	ldr	r1, [r7, #12]
 800d40e:	4806      	ldr	r0, [pc, #24]	@ (800d428 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d410:	f7fb fc6e 	bl	8008cf0 <HAL_SD_ReadBlocks_DMA>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <BSP_SD_ReadBlocks_DMA+0x26>
 800d41a:	2301      	movs	r3, #1
 800d41c:	75fb      	strb	r3, [r7, #23]
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	20000c14 	.word	0x20000c14

0800d42c <BSP_SD_WriteBlocks_DMA>:
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
 800d438:	2300      	movs	r3, #0
 800d43a:	75fb      	strb	r3, [r7, #23]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	68f9      	ldr	r1, [r7, #12]
 800d442:	4806      	ldr	r0, [pc, #24]	@ (800d45c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d444:	f7fb fd36 	bl	8008eb4 <HAL_SD_WriteBlocks_DMA>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <BSP_SD_WriteBlocks_DMA+0x26>
 800d44e:	2301      	movs	r3, #1
 800d450:	75fb      	strb	r3, [r7, #23]
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	4618      	mov	r0, r3
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000c14 	.word	0x20000c14

0800d460 <BSP_SD_GetCardState>:
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
 800d464:	4805      	ldr	r0, [pc, #20]	@ (800d47c <BSP_SD_GetCardState+0x1c>)
 800d466:	f7fc f87f 	bl	8009568 <HAL_SD_GetCardState>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b04      	cmp	r3, #4
 800d46e:	bf14      	ite	ne
 800d470:	2301      	movne	r3, #1
 800d472:	2300      	moveq	r3, #0
 800d474:	b2db      	uxtb	r3, r3
 800d476:	4618      	mov	r0, r3
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20000c14 	.word	0x20000c14

0800d480 <BSP_SD_GetCardInfo>:
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	4803      	ldr	r0, [pc, #12]	@ (800d498 <BSP_SD_GetCardInfo+0x18>)
 800d48c:	f7fb ffa6 	bl	80093dc <HAL_SD_GetCardInfo>
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000c14 	.word	0x20000c14

0800d49c <HAL_SD_RxCpltCallback>:
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	f000 f9b2 	bl	800d80c <BSP_SD_ReadCpltCallback>
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <BSP_SD_IsDetected>:
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	71fb      	strb	r3, [r7, #7]
 800d4ba:	f000 f80b 	bl	800d4d4 <BSP_PlatformIsDetected>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <BSP_SD_IsDetected+0x18>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	71fb      	strb	r3, [r7, #7]
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <BSP_PlatformIsDetected>:
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	2301      	movs	r3, #1
 800d4dc:	71fb      	strb	r3, [r7, #7]
 800d4de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d4e2:	4806      	ldr	r0, [pc, #24]	@ (800d4fc <BSP_PlatformIsDetected+0x28>)
 800d4e4:	f7f8 fe46 	bl	8006174 <HAL_GPIO_ReadPin>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <BSP_PlatformIsDetected+0x1e>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	71fb      	strb	r3, [r7, #7]
 800d4f2:	79fb      	ldrb	r3, [r7, #7]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	40020800 	.word	0x40020800

0800d500 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d508:	f000 fa26 	bl	800d958 <osKernelSysTick>
 800d50c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d50e:	e006      	b.n	800d51e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d510:	f7ff ffa6 	bl	800d460 <BSP_SD_GetCardState>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	e009      	b.n	800d532 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d51e:	f000 fa1b 	bl	800d958 <osKernelSysTick>
 800d522:	4602      	mov	r2, r0
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d8f0      	bhi.n	800d510 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d52e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	4603      	mov	r3, r0
 800d544:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d546:	4b0b      	ldr	r3, [pc, #44]	@ (800d574 <SD_CheckStatus+0x38>)
 800d548:	2201      	movs	r2, #1
 800d54a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d54c:	f7ff ff88 	bl	800d460 <BSP_SD_GetCardState>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d107      	bne.n	800d566 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d556:	4b07      	ldr	r3, [pc, #28]	@ (800d574 <SD_CheckStatus+0x38>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	f023 0301 	bic.w	r3, r3, #1
 800d560:	b2da      	uxtb	r2, r3
 800d562:	4b04      	ldr	r3, [pc, #16]	@ (800d574 <SD_CheckStatus+0x38>)
 800d564:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d566:	4b03      	ldr	r3, [pc, #12]	@ (800d574 <SD_CheckStatus+0x38>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	b2db      	uxtb	r3, r3
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	2000000d 	.word	0x2000000d

0800d578 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d578:	b590      	push	{r4, r7, lr}
 800d57a:	b087      	sub	sp, #28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d582:	4b20      	ldr	r3, [pc, #128]	@ (800d604 <SD_initialize+0x8c>)
 800d584:	2201      	movs	r2, #1
 800d586:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d588:	f000 f9da 	bl	800d940 <osKernelRunning>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d030      	beq.n	800d5f4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d592:	f7ff ff0b 	bl	800d3ac <BSP_SD_Init>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d107      	bne.n	800d5ac <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff ffcc 	bl	800d53c <SD_CheckStatus>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	4b16      	ldr	r3, [pc, #88]	@ (800d604 <SD_initialize+0x8c>)
 800d5aa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d5ac:	4b15      	ldr	r3, [pc, #84]	@ (800d604 <SD_initialize+0x8c>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d01e      	beq.n	800d5f4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d5b6:	4b14      	ldr	r3, [pc, #80]	@ (800d608 <SD_initialize+0x90>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10e      	bne.n	800d5dc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d5be:	4b13      	ldr	r3, [pc, #76]	@ (800d60c <SD_initialize+0x94>)
 800d5c0:	f107 0408 	add.w	r4, r7, #8
 800d5c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d5c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 fa31 	bl	800da38 <osMessageCreate>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	4a0b      	ldr	r2, [pc, #44]	@ (800d608 <SD_initialize+0x90>)
 800d5da:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d608 <SD_initialize+0x90>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d107      	bne.n	800d5f4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d5e4:	4b07      	ldr	r3, [pc, #28]	@ (800d604 <SD_initialize+0x8c>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	f043 0301 	orr.w	r3, r3, #1
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	4b04      	ldr	r3, [pc, #16]	@ (800d604 <SD_initialize+0x8c>)
 800d5f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d5f4:	4b03      	ldr	r3, [pc, #12]	@ (800d604 <SD_initialize+0x8c>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b2db      	uxtb	r3, r3
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	371c      	adds	r7, #28
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd90      	pop	{r4, r7, pc}
 800d602:	bf00      	nop
 800d604:	2000000d 	.word	0x2000000d
 800d608:	2000107c 	.word	0x2000107c
 800d60c:	08014e54 	.word	0x08014e54

0800d610 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff ff8d 	bl	800d53c <SD_CheckStatus>
 800d622:	4603      	mov	r3, r0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08a      	sub	sp, #40	@ 0x28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	607a      	str	r2, [r7, #4]
 800d636:	603b      	str	r3, [r7, #0]
 800d638:	4603      	mov	r3, r0
 800d63a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d642:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d646:	f7ff ff5b 	bl	800d500 <SD_CheckStatusWithTimeout>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	da02      	bge.n	800d656 <SD_read+0x2a>
  {
    return res;
 800d650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d654:	e032      	b.n	800d6bc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	6879      	ldr	r1, [r7, #4]
 800d65a:	68b8      	ldr	r0, [r7, #8]
 800d65c:	f7ff fecc 	bl	800d3f8 <BSP_SD_ReadBlocks_DMA>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800d666:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d124      	bne.n	800d6b8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d66e:	4b15      	ldr	r3, [pc, #84]	@ (800d6c4 <SD_read+0x98>)
 800d670:	6819      	ldr	r1, [r3, #0]
 800d672:	f107 0314 	add.w	r3, r7, #20
 800d676:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 fa44 	bl	800db08 <osMessageGet>

    if (event.status == osEventMessage)
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	2b10      	cmp	r3, #16
 800d684:	d118      	bne.n	800d6b8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d115      	bne.n	800d6b8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d68c:	f000 f964 	bl	800d958 <osKernelSysTick>
 800d690:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d692:	e008      	b.n	800d6a6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d694:	f7ff fee4 	bl	800d460 <BSP_SD_GetCardState>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d103      	bne.n	800d6a6 <SD_read+0x7a>
              {
                res = RES_OK;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d6a4:	e008      	b.n	800d6b8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d6a6:	f000 f957 	bl	800d958 <osKernelSysTick>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d9ed      	bls.n	800d694 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3728      	adds	r7, #40	@ 0x28
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	2000107c 	.word	0x2000107c

0800d6c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08a      	sub	sp, #40	@ 0x28
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60b9      	str	r1, [r7, #8]
 800d6d0:	607a      	str	r2, [r7, #4]
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d6de:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d6e2:	f7ff ff0d 	bl	800d500 <SD_CheckStatusWithTimeout>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	da02      	bge.n	800d6f2 <SD_write+0x2a>
  {
    return res;
 800d6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6f0:	e02e      	b.n	800d750 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	68b8      	ldr	r0, [r7, #8]
 800d6f8:	f7ff fe98 	bl	800d42c <BSP_SD_WriteBlocks_DMA>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d124      	bne.n	800d74c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d702:	4b15      	ldr	r3, [pc, #84]	@ (800d758 <SD_write+0x90>)
 800d704:	6819      	ldr	r1, [r3, #0]
 800d706:	f107 0314 	add.w	r3, r7, #20
 800d70a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 f9fa 	bl	800db08 <osMessageGet>

    if (event.status == osEventMessage)
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b10      	cmp	r3, #16
 800d718:	d118      	bne.n	800d74c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d115      	bne.n	800d74c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d720:	f000 f91a 	bl	800d958 <osKernelSysTick>
 800d724:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d726:	e008      	b.n	800d73a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d728:	f7ff fe9a 	bl	800d460 <BSP_SD_GetCardState>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d103      	bne.n	800d73a <SD_write+0x72>
          {
            res = RES_OK;
 800d732:	2300      	movs	r3, #0
 800d734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d738:	e008      	b.n	800d74c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d73a:	f000 f90d 	bl	800d958 <osKernelSysTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d748:	4293      	cmp	r3, r2
 800d74a:	d9ed      	bls.n	800d728 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d74c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d750:	4618      	mov	r0, r3
 800d752:	3728      	adds	r7, #40	@ 0x28
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	2000107c 	.word	0x2000107c

0800d75c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08c      	sub	sp, #48	@ 0x30
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	603a      	str	r2, [r7, #0]
 800d766:	71fb      	strb	r3, [r7, #7]
 800d768:	460b      	mov	r3, r1
 800d76a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d772:	4b25      	ldr	r3, [pc, #148]	@ (800d808 <SD_ioctl+0xac>)
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f003 0301 	and.w	r3, r3, #1
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <SD_ioctl+0x28>
 800d780:	2303      	movs	r3, #3
 800d782:	e03c      	b.n	800d7fe <SD_ioctl+0xa2>

  switch (cmd)
 800d784:	79bb      	ldrb	r3, [r7, #6]
 800d786:	2b03      	cmp	r3, #3
 800d788:	d834      	bhi.n	800d7f4 <SD_ioctl+0x98>
 800d78a:	a201      	add	r2, pc, #4	@ (adr r2, 800d790 <SD_ioctl+0x34>)
 800d78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d790:	0800d7a1 	.word	0x0800d7a1
 800d794:	0800d7a9 	.word	0x0800d7a9
 800d798:	0800d7c1 	.word	0x0800d7c1
 800d79c:	0800d7db 	.word	0x0800d7db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d7a6:	e028      	b.n	800d7fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7a8:	f107 030c 	add.w	r3, r7, #12
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7ff fe67 	bl	800d480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d7b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d7be:	e01c      	b.n	800d7fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff fe5b 	bl	800d480 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d7d8:	e00f      	b.n	800d7fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7da:	f107 030c 	add.w	r3, r7, #12
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fe4e 	bl	800d480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e6:	0a5a      	lsrs	r2, r3, #9
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d7f2:	e002      	b.n	800d7fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d7f4:	2304      	movs	r3, #4
 800d7f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3730      	adds	r7, #48	@ 0x30
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	2000000d 	.word	0x2000000d

0800d80c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d810:	4b04      	ldr	r3, [pc, #16]	@ (800d824 <BSP_SD_ReadCpltCallback+0x18>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2200      	movs	r2, #0
 800d816:	2101      	movs	r1, #1
 800d818:	4618      	mov	r0, r3
 800d81a:	f000 f935 	bl	800da88 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800d81e:	bf00      	nop
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	2000107c 	.word	0x2000107c

0800d828 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d836:	2301      	movs	r3, #1
 800d838:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d83e:	4b1f      	ldr	r3, [pc, #124]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d840:	7a5b      	ldrb	r3, [r3, #9]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d131      	bne.n	800d8ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d848:	4b1c      	ldr	r3, [pc, #112]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d84a:	7a5b      	ldrb	r3, [r3, #9]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	461a      	mov	r2, r3
 800d850:	4b1a      	ldr	r3, [pc, #104]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d852:	2100      	movs	r1, #0
 800d854:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d856:	4b19      	ldr	r3, [pc, #100]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d858:	7a5b      	ldrb	r3, [r3, #9]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	4a17      	ldr	r2, [pc, #92]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d866:	4b15      	ldr	r3, [pc, #84]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d868:	7a5b      	ldrb	r3, [r3, #9]
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	461a      	mov	r2, r3
 800d86e:	4b13      	ldr	r3, [pc, #76]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d870:	4413      	add	r3, r2
 800d872:	79fa      	ldrb	r2, [r7, #7]
 800d874:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d876:	4b11      	ldr	r3, [pc, #68]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d878:	7a5b      	ldrb	r3, [r3, #9]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	1c5a      	adds	r2, r3, #1
 800d87e:	b2d1      	uxtb	r1, r2
 800d880:	4a0e      	ldr	r2, [pc, #56]	@ (800d8bc <FATFS_LinkDriverEx+0x94>)
 800d882:	7251      	strb	r1, [r2, #9]
 800d884:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d886:	7dbb      	ldrb	r3, [r7, #22]
 800d888:	3330      	adds	r3, #48	@ 0x30
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	3301      	adds	r3, #1
 800d894:	223a      	movs	r2, #58	@ 0x3a
 800d896:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	3302      	adds	r3, #2
 800d89c:	222f      	movs	r2, #47	@ 0x2f
 800d89e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	3303      	adds	r3, #3
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	371c      	adds	r7, #28
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	20001080 	.word	0x20001080

0800d8c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff ffaa 	bl	800d828 <FATFS_LinkDriverEx>
 800d8d4:	4603      	mov	r3, r0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3708      	adds	r7, #8
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	b085      	sub	sp, #20
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d8ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8f0:	2b84      	cmp	r3, #132	@ 0x84
 800d8f2:	d005      	beq.n	800d900 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d8f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	3303      	adds	r3, #3
 800d8fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d900:	68fb      	ldr	r3, [r7, #12]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr

0800d90e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d90e:	b480      	push	{r7}
 800d910:	b083      	sub	sp, #12
 800d912:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d914:	f3ef 8305 	mrs	r3, IPSR
 800d918:	607b      	str	r3, [r7, #4]
  return(result);
 800d91a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	bf14      	ite	ne
 800d920:	2301      	movne	r3, #1
 800d922:	2300      	moveq	r3, #0
 800d924:	b2db      	uxtb	r3, r3
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d936:	f001 fb4b 	bl	800efd0 <vTaskStartScheduler>
  
  return osOK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d944:	f001 ff9a 	bl	800f87c <xTaskGetSchedulerState>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d101      	bne.n	800d952 <osKernelRunning+0x12>
    return 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	e000      	b.n	800d954 <osKernelRunning+0x14>
  else
    return 1;
 800d952:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d954:	4618      	mov	r0, r3
 800d956:	bd80      	pop	{r7, pc}

0800d958 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d95c:	f7ff ffd7 	bl	800d90e <inHandlerMode>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d966:	f001 fc5f 	bl	800f228 <xTaskGetTickCountFromISR>
 800d96a:	4603      	mov	r3, r0
 800d96c:	e002      	b.n	800d974 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d96e:	f001 fc4b 	bl	800f208 <xTaskGetTickCount>
 800d972:	4603      	mov	r3, r0
  }
}
 800d974:	4618      	mov	r0, r3
 800d976:	bd80      	pop	{r7, pc}

0800d978 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97a:	b089      	sub	sp, #36	@ 0x24
 800d97c:	af04      	add	r7, sp, #16
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	695b      	ldr	r3, [r3, #20]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d020      	beq.n	800d9cc <osThreadCreate+0x54>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d01c      	beq.n	800d9cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685c      	ldr	r4, [r3, #4]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	691e      	ldr	r6, [r3, #16]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff ff9a 	bl	800d8de <makeFreeRtosPriority>
 800d9aa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9b4:	9202      	str	r2, [sp, #8]
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	9100      	str	r1, [sp, #0]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	4632      	mov	r2, r6
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f001 f915 	bl	800ebf0 <xTaskCreateStatic>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	e01c      	b.n	800da06 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685c      	ldr	r4, [r3, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9d8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff ff7c 	bl	800d8de <makeFreeRtosPriority>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	f107 030c 	add.w	r3, r7, #12
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	9200      	str	r2, [sp, #0]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	4632      	mov	r2, r6
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f001 f960 	bl	800ecbc <xTaskCreate>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d001      	beq.n	800da06 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	e000      	b.n	800da08 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800da06:	68fb      	ldr	r3, [r7, #12]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <osDelay+0x16>
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	e000      	b.n	800da28 <osDelay+0x18>
 800da26:	2301      	movs	r3, #1
 800da28:	4618      	mov	r0, r3
 800da2a:	f001 fa99 	bl	800ef60 <vTaskDelay>
  
  return osOK;
 800da2e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800da38:	b590      	push	{r4, r7, lr}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d011      	beq.n	800da6e <osMessageCreate+0x36>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d00d      	beq.n	800da6e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6859      	ldr	r1, [r3, #4]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689a      	ldr	r2, [r3, #8]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	2400      	movs	r4, #0
 800da64:	9400      	str	r4, [sp, #0]
 800da66:	f000 f9e3 	bl	800de30 <xQueueGenericCreateStatic>
 800da6a:	4603      	mov	r3, r0
 800da6c:	e008      	b.n	800da80 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6818      	ldr	r0, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	4619      	mov	r1, r3
 800da7a:	f000 fa60 	bl	800df3e <xQueueGenericCreate>
 800da7e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	bd90      	pop	{r4, r7, pc}

0800da88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800da94:	2300      	movs	r3, #0
 800da96:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <osMessagePut+0x1e>
    ticks = 1;
 800daa2:	2301      	movs	r3, #1
 800daa4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800daa6:	f7ff ff32 	bl	800d90e <inHandlerMode>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d018      	beq.n	800dae2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800dab0:	f107 0210 	add.w	r2, r7, #16
 800dab4:	f107 0108 	add.w	r1, r7, #8
 800dab8:	2300      	movs	r3, #0
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 fbac 	bl	800e218 <xQueueGenericSendFromISR>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d001      	beq.n	800daca <osMessagePut+0x42>
      return osErrorOS;
 800dac6:	23ff      	movs	r3, #255	@ 0xff
 800dac8:	e018      	b.n	800dafc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d014      	beq.n	800dafa <osMessagePut+0x72>
 800dad0:	4b0c      	ldr	r3, [pc, #48]	@ (800db04 <osMessagePut+0x7c>)
 800dad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	f3bf 8f6f 	isb	sy
 800dae0:	e00b      	b.n	800dafa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800dae2:	f107 0108 	add.w	r1, r7, #8
 800dae6:	2300      	movs	r3, #0
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 fa8a 	bl	800e004 <xQueueGenericSend>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d001      	beq.n	800dafa <osMessagePut+0x72>
      return osErrorOS;
 800daf6:	23ff      	movs	r3, #255	@ 0xff
 800daf8:	e000      	b.n	800dafc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3718      	adds	r7, #24
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	e000ed04 	.word	0xe000ed04

0800db08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800db08:	b590      	push	{r4, r7, lr}
 800db0a:	b08b      	sub	sp, #44	@ 0x2c
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10a      	bne.n	800db38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800db22:	2380      	movs	r3, #128	@ 0x80
 800db24:	617b      	str	r3, [r7, #20]
    return event;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	461c      	mov	r4, r3
 800db2a:	f107 0314 	add.w	r3, r7, #20
 800db2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db36:	e054      	b.n	800dbe2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800db38:	2300      	movs	r3, #0
 800db3a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db46:	d103      	bne.n	800db50 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800db48:	f04f 33ff 	mov.w	r3, #4294967295
 800db4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800db4e:	e009      	b.n	800db64 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d006      	beq.n	800db64 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800db5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <osMessageGet+0x5c>
      ticks = 1;
 800db60:	2301      	movs	r3, #1
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800db64:	f7ff fed3 	bl	800d90e <inHandlerMode>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d01c      	beq.n	800dba8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800db6e:	f107 0220 	add.w	r2, r7, #32
 800db72:	f107 0314 	add.w	r3, r7, #20
 800db76:	3304      	adds	r3, #4
 800db78:	4619      	mov	r1, r3
 800db7a:	68b8      	ldr	r0, [r7, #8]
 800db7c:	f000 fe88 	bl	800e890 <xQueueReceiveFromISR>
 800db80:	4603      	mov	r3, r0
 800db82:	2b01      	cmp	r3, #1
 800db84:	d102      	bne.n	800db8c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800db86:	2310      	movs	r3, #16
 800db88:	617b      	str	r3, [r7, #20]
 800db8a:	e001      	b.n	800db90 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d01d      	beq.n	800dbd2 <osMessageGet+0xca>
 800db96:	4b15      	ldr	r3, [pc, #84]	@ (800dbec <osMessageGet+0xe4>)
 800db98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	e014      	b.n	800dbd2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dba8:	f107 0314 	add.w	r3, r7, #20
 800dbac:	3304      	adds	r3, #4
 800dbae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	68b8      	ldr	r0, [r7, #8]
 800dbb4:	f000 fc6c 	bl	800e490 <xQueueReceive>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d102      	bne.n	800dbc4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800dbbe:	2310      	movs	r3, #16
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	e006      	b.n	800dbd2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d101      	bne.n	800dbce <osMessageGet+0xc6>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e000      	b.n	800dbd0 <osMessageGet+0xc8>
 800dbce:	2340      	movs	r3, #64	@ 0x40
 800dbd0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	461c      	mov	r4, r3
 800dbd6:	f107 0314 	add.w	r3, r7, #20
 800dbda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dbde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	372c      	adds	r7, #44	@ 0x2c
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd90      	pop	{r4, r7, pc}
 800dbea:	bf00      	nop
 800dbec:	e000ed04 	.word	0xe000ed04

0800dbf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f103 0208 	add.w	r2, r3, #8
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f04f 32ff 	mov.w	r2, #4294967295
 800dc08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f103 0208 	add.w	r2, r3, #8
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f103 0208 	add.w	r2, r3, #8
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc3e:	bf00      	nop
 800dc40:	370c      	adds	r7, #12
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	601a      	str	r2, [r3, #0]
}
 800dc86:	bf00      	nop
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc92:	b480      	push	{r7}
 800dc94:	b085      	sub	sp, #20
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca8:	d103      	bne.n	800dcb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	e00c      	b.n	800dccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3308      	adds	r3, #8
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	e002      	b.n	800dcc0 <vListInsert+0x2e>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	60fb      	str	r3, [r7, #12]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d2f6      	bcs.n	800dcba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	685a      	ldr	r2, [r3, #4]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	601a      	str	r2, [r3, #0]
}
 800dcf8:	bf00      	nop
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	6892      	ldr	r2, [r2, #8]
 800dd1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	6852      	ldr	r2, [r2, #4]
 800dd24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d103      	bne.n	800dd38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	689a      	ldr	r2, [r3, #8]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	1e5a      	subs	r2, r3, #1
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d10d      	bne.n	800dd88 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd70:	b672      	cpsid	i
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	b662      	cpsie	i
 800dd80:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	e7fd      	b.n	800dd84 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dd88:	f002 f8c8 	bl	800ff1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd94:	68f9      	ldr	r1, [r7, #12]
 800dd96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dd98:	fb01 f303 	mul.w	r3, r1, r3
 800dd9c:	441a      	add	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	68f9      	ldr	r1, [r7, #12]
 800ddbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ddbe:	fb01 f303 	mul.w	r3, r1, r3
 800ddc2:	441a      	add	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	22ff      	movs	r2, #255	@ 0xff
 800ddcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	22ff      	movs	r2, #255	@ 0xff
 800ddd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d114      	bne.n	800de08 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01a      	beq.n	800de1c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3310      	adds	r3, #16
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 fb78 	bl	800f4e0 <xTaskRemoveFromEventList>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d012      	beq.n	800de1c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ddf6:	4b0d      	ldr	r3, [pc, #52]	@ (800de2c <xQueueGenericReset+0xd4>)
 800ddf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	e009      	b.n	800de1c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3310      	adds	r3, #16
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff feef 	bl	800dbf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3324      	adds	r3, #36	@ 0x24
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff feea 	bl	800dbf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de1c:	f002 f8b4 	bl	800ff88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de20:	2301      	movs	r3, #1
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	e000ed04 	.word	0xe000ed04

0800de30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de30:	b580      	push	{r7, lr}
 800de32:	b08e      	sub	sp, #56	@ 0x38
 800de34:	af02      	add	r7, sp, #8
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10d      	bne.n	800de60 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de48:	b672      	cpsid	i
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	b662      	cpsie	i
 800de58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800de5a:	bf00      	nop
 800de5c:	bf00      	nop
 800de5e:	e7fd      	b.n	800de5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10d      	bne.n	800de82 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6a:	b672      	cpsid	i
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	b662      	cpsie	i
 800de7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800de7c:	bf00      	nop
 800de7e:	bf00      	nop
 800de80:	e7fd      	b.n	800de7e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <xQueueGenericCreateStatic+0x5e>
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <xQueueGenericCreateStatic+0x62>
 800de8e:	2301      	movs	r3, #1
 800de90:	e000      	b.n	800de94 <xQueueGenericCreateStatic+0x64>
 800de92:	2300      	movs	r3, #0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10d      	bne.n	800deb4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9c:	b672      	cpsid	i
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	b662      	cpsie	i
 800deac:	623b      	str	r3, [r7, #32]
}
 800deae:	bf00      	nop
 800deb0:	bf00      	nop
 800deb2:	e7fd      	b.n	800deb0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d102      	bne.n	800dec0 <xQueueGenericCreateStatic+0x90>
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <xQueueGenericCreateStatic+0x94>
 800dec0:	2301      	movs	r3, #1
 800dec2:	e000      	b.n	800dec6 <xQueueGenericCreateStatic+0x96>
 800dec4:	2300      	movs	r3, #0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d10d      	bne.n	800dee6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dece:	b672      	cpsid	i
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	b662      	cpsie	i
 800dede:	61fb      	str	r3, [r7, #28]
}
 800dee0:	bf00      	nop
 800dee2:	bf00      	nop
 800dee4:	e7fd      	b.n	800dee2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dee6:	2348      	movs	r3, #72	@ 0x48
 800dee8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	2b48      	cmp	r3, #72	@ 0x48
 800deee:	d00d      	beq.n	800df0c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def4:	b672      	cpsid	i
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	b662      	cpsie	i
 800df04:	61bb      	str	r3, [r7, #24]
}
 800df06:	bf00      	nop
 800df08:	bf00      	nop
 800df0a:	e7fd      	b.n	800df08 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00d      	beq.n	800df34 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	4613      	mov	r3, r2
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	68b9      	ldr	r1, [r7, #8]
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f848 	bl	800dfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800df36:	4618      	mov	r0, r3
 800df38:	3730      	adds	r7, #48	@ 0x30
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b08a      	sub	sp, #40	@ 0x28
 800df42:	af02      	add	r7, sp, #8
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	60b9      	str	r1, [r7, #8]
 800df48:	4613      	mov	r3, r2
 800df4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10d      	bne.n	800df6e <xQueueGenericCreate+0x30>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df56:	b672      	cpsid	i
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	b662      	cpsie	i
 800df66:	613b      	str	r3, [r7, #16]
}
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
 800df6c:	e7fd      	b.n	800df6a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d102      	bne.n	800df7a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800df74:	2300      	movs	r3, #0
 800df76:	61fb      	str	r3, [r7, #28]
 800df78:	e004      	b.n	800df84 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
 800df82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	3348      	adds	r3, #72	@ 0x48
 800df88:	4618      	mov	r0, r3
 800df8a:	f002 f8f5 	bl	8010178 <pvPortMalloc>
 800df8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d011      	beq.n	800dfba <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	3348      	adds	r3, #72	@ 0x48
 800df9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfa8:	79fa      	ldrb	r2, [r7, #7]
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	68b9      	ldr	r1, [r7, #8]
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f000 f805 	bl	800dfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfba:	69bb      	ldr	r3, [r7, #24]
	}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3720      	adds	r7, #32
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
 800dfd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d103      	bne.n	800dfe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	69ba      	ldr	r2, [r7, #24]
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	e002      	b.n	800dfe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dff2:	2101      	movs	r1, #1
 800dff4:	69b8      	ldr	r0, [r7, #24]
 800dff6:	f7ff feaf 	bl	800dd58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
	...

0800e004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08e      	sub	sp, #56	@ 0x38
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
 800e010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e012:	2300      	movs	r3, #0
 800e014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10d      	bne.n	800e03c <xQueueGenericSend+0x38>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e024:	b672      	cpsid	i
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	b662      	cpsie	i
 800e034:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e036:	bf00      	nop
 800e038:	bf00      	nop
 800e03a:	e7fd      	b.n	800e038 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d103      	bne.n	800e04a <xQueueGenericSend+0x46>
 800e042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e046:	2b00      	cmp	r3, #0
 800e048:	d101      	bne.n	800e04e <xQueueGenericSend+0x4a>
 800e04a:	2301      	movs	r3, #1
 800e04c:	e000      	b.n	800e050 <xQueueGenericSend+0x4c>
 800e04e:	2300      	movs	r3, #0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10d      	bne.n	800e070 <xQueueGenericSend+0x6c>
	__asm volatile
 800e054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e058:	b672      	cpsid	i
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	b662      	cpsie	i
 800e068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e06a:	bf00      	nop
 800e06c:	bf00      	nop
 800e06e:	e7fd      	b.n	800e06c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	2b02      	cmp	r3, #2
 800e074:	d103      	bne.n	800e07e <xQueueGenericSend+0x7a>
 800e076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d101      	bne.n	800e082 <xQueueGenericSend+0x7e>
 800e07e:	2301      	movs	r3, #1
 800e080:	e000      	b.n	800e084 <xQueueGenericSend+0x80>
 800e082:	2300      	movs	r3, #0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10d      	bne.n	800e0a4 <xQueueGenericSend+0xa0>
	__asm volatile
 800e088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08c:	b672      	cpsid	i
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	b662      	cpsie	i
 800e09c:	623b      	str	r3, [r7, #32]
}
 800e09e:	bf00      	nop
 800e0a0:	bf00      	nop
 800e0a2:	e7fd      	b.n	800e0a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0a4:	f001 fbea 	bl	800f87c <xTaskGetSchedulerState>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d102      	bne.n	800e0b4 <xQueueGenericSend+0xb0>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <xQueueGenericSend+0xb4>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e000      	b.n	800e0ba <xQueueGenericSend+0xb6>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10d      	bne.n	800e0da <xQueueGenericSend+0xd6>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c2:	b672      	cpsid	i
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	b662      	cpsie	i
 800e0d2:	61fb      	str	r3, [r7, #28]
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	e7fd      	b.n	800e0d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0da:	f001 ff1f 	bl	800ff1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d302      	bcc.n	800e0f0 <xQueueGenericSend+0xec>
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d129      	bne.n	800e144 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	68b9      	ldr	r1, [r7, #8]
 800e0f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0f6:	f000 fc6b 	bl	800e9d0 <prvCopyDataToQueue>
 800e0fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e100:	2b00      	cmp	r3, #0
 800e102:	d010      	beq.n	800e126 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e106:	3324      	adds	r3, #36	@ 0x24
 800e108:	4618      	mov	r0, r3
 800e10a:	f001 f9e9 	bl	800f4e0 <xTaskRemoveFromEventList>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d013      	beq.n	800e13c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e114:	4b3f      	ldr	r3, [pc, #252]	@ (800e214 <xQueueGenericSend+0x210>)
 800e116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	e00a      	b.n	800e13c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d007      	beq.n	800e13c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e12c:	4b39      	ldr	r3, [pc, #228]	@ (800e214 <xQueueGenericSend+0x210>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e13c:	f001 ff24 	bl	800ff88 <vPortExitCritical>
				return pdPASS;
 800e140:	2301      	movs	r3, #1
 800e142:	e063      	b.n	800e20c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d103      	bne.n	800e152 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e14a:	f001 ff1d 	bl	800ff88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e14e:	2300      	movs	r3, #0
 800e150:	e05c      	b.n	800e20c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e154:	2b00      	cmp	r3, #0
 800e156:	d106      	bne.n	800e166 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e158:	f107 0314 	add.w	r3, r7, #20
 800e15c:	4618      	mov	r0, r3
 800e15e:	f001 fa25 	bl	800f5ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e162:	2301      	movs	r3, #1
 800e164:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e166:	f001 ff0f 	bl	800ff88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e16a:	f000 ff9f 	bl	800f0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e16e:	f001 fed5 	bl	800ff1c <vPortEnterCritical>
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e178:	b25b      	sxtb	r3, r3
 800e17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e17e:	d103      	bne.n	800e188 <xQueueGenericSend+0x184>
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e18e:	b25b      	sxtb	r3, r3
 800e190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e194:	d103      	bne.n	800e19e <xQueueGenericSend+0x19a>
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	2200      	movs	r2, #0
 800e19a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e19e:	f001 fef3 	bl	800ff88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1a2:	1d3a      	adds	r2, r7, #4
 800e1a4:	f107 0314 	add.w	r3, r7, #20
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f001 fa14 	bl	800f5d8 <xTaskCheckForTimeOut>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d124      	bne.n	800e200 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1b8:	f000 fd02 	bl	800ebc0 <prvIsQueueFull>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d018      	beq.n	800e1f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c4:	3310      	adds	r3, #16
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f001 f960 	bl	800f490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1d2:	f000 fc8d 	bl	800eaf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1d6:	f000 ff77 	bl	800f0c8 <xTaskResumeAll>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f47f af7c 	bne.w	800e0da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e214 <xQueueGenericSend+0x210>)
 800e1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	e772      	b.n	800e0da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1f6:	f000 fc7b 	bl	800eaf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1fa:	f000 ff65 	bl	800f0c8 <xTaskResumeAll>
 800e1fe:	e76c      	b.n	800e0da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e202:	f000 fc75 	bl	800eaf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e206:	f000 ff5f 	bl	800f0c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e20a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3738      	adds	r7, #56	@ 0x38
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	e000ed04 	.word	0xe000ed04

0800e218 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b08e      	sub	sp, #56	@ 0x38
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
 800e224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10d      	bne.n	800e24c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e234:	b672      	cpsid	i
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	b662      	cpsie	i
 800e244:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e246:	bf00      	nop
 800e248:	bf00      	nop
 800e24a:	e7fd      	b.n	800e248 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d103      	bne.n	800e25a <xQueueGenericSendFromISR+0x42>
 800e252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e256:	2b00      	cmp	r3, #0
 800e258:	d101      	bne.n	800e25e <xQueueGenericSendFromISR+0x46>
 800e25a:	2301      	movs	r3, #1
 800e25c:	e000      	b.n	800e260 <xQueueGenericSendFromISR+0x48>
 800e25e:	2300      	movs	r3, #0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10d      	bne.n	800e280 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e268:	b672      	cpsid	i
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	b662      	cpsie	i
 800e278:	623b      	str	r3, [r7, #32]
}
 800e27a:	bf00      	nop
 800e27c:	bf00      	nop
 800e27e:	e7fd      	b.n	800e27c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d103      	bne.n	800e28e <xQueueGenericSendFromISR+0x76>
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <xQueueGenericSendFromISR+0x7a>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueGenericSendFromISR+0x7c>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10d      	bne.n	800e2b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29c:	b672      	cpsid	i
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	b662      	cpsie	i
 800e2ac:	61fb      	str	r3, [r7, #28]
}
 800e2ae:	bf00      	nop
 800e2b0:	bf00      	nop
 800e2b2:	e7fd      	b.n	800e2b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2b4:	f001 ff1a 	bl	80100ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e2b8:	f3ef 8211 	mrs	r2, BASEPRI
 800e2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c0:	b672      	cpsid	i
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	b662      	cpsie	i
 800e2d0:	61ba      	str	r2, [r7, #24]
 800e2d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d302      	bcc.n	800e2ea <xQueueGenericSendFromISR+0xd2>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d12c      	bne.n	800e344 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	68b9      	ldr	r1, [r7, #8]
 800e2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e2fa:	f000 fb69 	bl	800e9d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e306:	d112      	bne.n	800e32e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d016      	beq.n	800e33e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e312:	3324      	adds	r3, #36	@ 0x24
 800e314:	4618      	mov	r0, r3
 800e316:	f001 f8e3 	bl	800f4e0 <xTaskRemoveFromEventList>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00e      	beq.n	800e33e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00b      	beq.n	800e33e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2201      	movs	r2, #1
 800e32a:	601a      	str	r2, [r3, #0]
 800e32c:	e007      	b.n	800e33e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e32e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e332:	3301      	adds	r3, #1
 800e334:	b2db      	uxtb	r3, r3
 800e336:	b25a      	sxtb	r2, r3
 800e338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e33e:	2301      	movs	r3, #1
 800e340:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e342:	e001      	b.n	800e348 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e344:	2300      	movs	r3, #0
 800e346:	637b      	str	r3, [r7, #52]	@ 0x34
 800e348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e352:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e356:	4618      	mov	r0, r3
 800e358:	3738      	adds	r7, #56	@ 0x38
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b08e      	sub	sp, #56	@ 0x38
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10d      	bne.n	800e38e <xQueueGiveFromISR+0x30>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e376:	b672      	cpsid	i
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	b662      	cpsie	i
 800e386:	623b      	str	r3, [r7, #32]
}
 800e388:	bf00      	nop
 800e38a:	bf00      	nop
 800e38c:	e7fd      	b.n	800e38a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00d      	beq.n	800e3b2 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39a:	b672      	cpsid	i
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	b662      	cpsie	i
 800e3aa:	61fb      	str	r3, [r7, #28]
}
 800e3ac:	bf00      	nop
 800e3ae:	bf00      	nop
 800e3b0:	e7fd      	b.n	800e3ae <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d103      	bne.n	800e3c2 <xQueueGiveFromISR+0x64>
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d101      	bne.n	800e3c6 <xQueueGiveFromISR+0x68>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e000      	b.n	800e3c8 <xQueueGiveFromISR+0x6a>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10d      	bne.n	800e3e8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d0:	b672      	cpsid	i
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	b662      	cpsie	i
 800e3e0:	61bb      	str	r3, [r7, #24]
}
 800e3e2:	bf00      	nop
 800e3e4:	bf00      	nop
 800e3e6:	e7fd      	b.n	800e3e4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3e8:	f001 fe80 	bl	80100ec <vPortValidateInterruptPriority>
	__asm volatile
 800e3ec:	f3ef 8211 	mrs	r2, BASEPRI
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	b672      	cpsid	i
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	b662      	cpsie	i
 800e404:	617a      	str	r2, [r7, #20]
 800e406:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e408:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e40e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e410:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e418:	429a      	cmp	r2, r3
 800e41a:	d22b      	bcs.n	800e474 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e428:	1c5a      	adds	r2, r3, #1
 800e42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e42e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e436:	d112      	bne.n	800e45e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d016      	beq.n	800e46e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e442:	3324      	adds	r3, #36	@ 0x24
 800e444:	4618      	mov	r0, r3
 800e446:	f001 f84b 	bl	800f4e0 <xTaskRemoveFromEventList>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00e      	beq.n	800e46e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00b      	beq.n	800e46e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2201      	movs	r2, #1
 800e45a:	601a      	str	r2, [r3, #0]
 800e45c:	e007      	b.n	800e46e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e45e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e462:	3301      	adds	r3, #1
 800e464:	b2db      	uxtb	r3, r3
 800e466:	b25a      	sxtb	r2, r3
 800e468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e46e:	2301      	movs	r3, #1
 800e470:	637b      	str	r3, [r7, #52]	@ 0x34
 800e472:	e001      	b.n	800e478 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e474:	2300      	movs	r3, #0
 800e476:	637b      	str	r3, [r7, #52]	@ 0x34
 800e478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f383 8811 	msr	BASEPRI, r3
}
 800e482:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e486:	4618      	mov	r0, r3
 800e488:	3738      	adds	r7, #56	@ 0x38
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08c      	sub	sp, #48	@ 0x30
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e49c:	2300      	movs	r3, #0
 800e49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10d      	bne.n	800e4c6 <xQueueReceive+0x36>
	__asm volatile
 800e4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ae:	b672      	cpsid	i
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	b662      	cpsie	i
 800e4be:	623b      	str	r3, [r7, #32]
}
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	e7fd      	b.n	800e4c2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d103      	bne.n	800e4d4 <xQueueReceive+0x44>
 800e4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d101      	bne.n	800e4d8 <xQueueReceive+0x48>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e000      	b.n	800e4da <xQueueReceive+0x4a>
 800e4d8:	2300      	movs	r3, #0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10d      	bne.n	800e4fa <xQueueReceive+0x6a>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e2:	b672      	cpsid	i
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	b662      	cpsie	i
 800e4f2:	61fb      	str	r3, [r7, #28]
}
 800e4f4:	bf00      	nop
 800e4f6:	bf00      	nop
 800e4f8:	e7fd      	b.n	800e4f6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4fa:	f001 f9bf 	bl	800f87c <xTaskGetSchedulerState>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d102      	bne.n	800e50a <xQueueReceive+0x7a>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <xQueueReceive+0x7e>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e000      	b.n	800e510 <xQueueReceive+0x80>
 800e50e:	2300      	movs	r3, #0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10d      	bne.n	800e530 <xQueueReceive+0xa0>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e518:	b672      	cpsid	i
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	b662      	cpsie	i
 800e528:	61bb      	str	r3, [r7, #24]
}
 800e52a:	bf00      	nop
 800e52c:	bf00      	nop
 800e52e:	e7fd      	b.n	800e52c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e530:	f001 fcf4 	bl	800ff1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e538:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d01f      	beq.n	800e580 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e540:	68b9      	ldr	r1, [r7, #8]
 800e542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e544:	f000 faae 	bl	800eaa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54a:	1e5a      	subs	r2, r3, #1
 800e54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00f      	beq.n	800e578 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e55a:	3310      	adds	r3, #16
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 ffbf 	bl	800f4e0 <xTaskRemoveFromEventList>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d007      	beq.n	800e578 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e568:	4b3c      	ldr	r3, [pc, #240]	@ (800e65c <xQueueReceive+0x1cc>)
 800e56a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e578:	f001 fd06 	bl	800ff88 <vPortExitCritical>
				return pdPASS;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e069      	b.n	800e654 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e586:	f001 fcff 	bl	800ff88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e58a:	2300      	movs	r3, #0
 800e58c:	e062      	b.n	800e654 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e590:	2b00      	cmp	r3, #0
 800e592:	d106      	bne.n	800e5a2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e594:	f107 0310 	add.w	r3, r7, #16
 800e598:	4618      	mov	r0, r3
 800e59a:	f001 f807 	bl	800f5ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5a2:	f001 fcf1 	bl	800ff88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5a6:	f000 fd81 	bl	800f0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5aa:	f001 fcb7 	bl	800ff1c <vPortEnterCritical>
 800e5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5b4:	b25b      	sxtb	r3, r3
 800e5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ba:	d103      	bne.n	800e5c4 <xQueueReceive+0x134>
 800e5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5ca:	b25b      	sxtb	r3, r3
 800e5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d0:	d103      	bne.n	800e5da <xQueueReceive+0x14a>
 800e5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5da:	f001 fcd5 	bl	800ff88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5de:	1d3a      	adds	r2, r7, #4
 800e5e0:	f107 0310 	add.w	r3, r7, #16
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f000 fff6 	bl	800f5d8 <xTaskCheckForTimeOut>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d123      	bne.n	800e63a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e5f4:	f000 face 	bl	800eb94 <prvIsQueueEmpty>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d017      	beq.n	800e62e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e600:	3324      	adds	r3, #36	@ 0x24
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f000 ff42 	bl	800f490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e60c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e60e:	f000 fa6f 	bl	800eaf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e612:	f000 fd59 	bl	800f0c8 <xTaskResumeAll>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d189      	bne.n	800e530 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e61c:	4b0f      	ldr	r3, [pc, #60]	@ (800e65c <xQueueReceive+0x1cc>)
 800e61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	e780      	b.n	800e530 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e630:	f000 fa5e 	bl	800eaf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e634:	f000 fd48 	bl	800f0c8 <xTaskResumeAll>
 800e638:	e77a      	b.n	800e530 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e63a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e63c:	f000 fa58 	bl	800eaf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e640:	f000 fd42 	bl	800f0c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e644:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e646:	f000 faa5 	bl	800eb94 <prvIsQueueEmpty>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f43f af6f 	beq.w	800e530 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e652:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e654:	4618      	mov	r0, r3
 800e656:	3730      	adds	r7, #48	@ 0x30
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	e000ed04 	.word	0xe000ed04

0800e660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b08e      	sub	sp, #56	@ 0x38
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e672:	2300      	movs	r3, #0
 800e674:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10d      	bne.n	800e698 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e680:	b672      	cpsid	i
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	b662      	cpsie	i
 800e690:	623b      	str	r3, [r7, #32]
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	e7fd      	b.n	800e694 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00d      	beq.n	800e6bc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a4:	b672      	cpsid	i
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	b662      	cpsie	i
 800e6b4:	61fb      	str	r3, [r7, #28]
}
 800e6b6:	bf00      	nop
 800e6b8:	bf00      	nop
 800e6ba:	e7fd      	b.n	800e6b8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6bc:	f001 f8de 	bl	800f87c <xTaskGetSchedulerState>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d102      	bne.n	800e6cc <xQueueSemaphoreTake+0x6c>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <xQueueSemaphoreTake+0x70>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e000      	b.n	800e6d2 <xQueueSemaphoreTake+0x72>
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10d      	bne.n	800e6f2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	b672      	cpsid	i
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	b662      	cpsie	i
 800e6ea:	61bb      	str	r3, [r7, #24]
}
 800e6ec:	bf00      	nop
 800e6ee:	bf00      	nop
 800e6f0:	e7fd      	b.n	800e6ee <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6f2:	f001 fc13 	bl	800ff1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d024      	beq.n	800e74c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e704:	1e5a      	subs	r2, r3, #1
 800e706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e708:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d104      	bne.n	800e71c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e712:	f001 fa7d 	bl	800fc10 <pvTaskIncrementMutexHeldCount>
 800e716:	4602      	mov	r2, r0
 800e718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71e:	691b      	ldr	r3, [r3, #16]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00f      	beq.n	800e744 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e726:	3310      	adds	r3, #16
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fed9 	bl	800f4e0 <xTaskRemoveFromEventList>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d007      	beq.n	800e744 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e734:	4b55      	ldr	r3, [pc, #340]	@ (800e88c <xQueueSemaphoreTake+0x22c>)
 800e736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e744:	f001 fc20 	bl	800ff88 <vPortExitCritical>
				return pdPASS;
 800e748:	2301      	movs	r3, #1
 800e74a:	e09a      	b.n	800e882 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d114      	bne.n	800e77c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00d      	beq.n	800e774 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75c:	b672      	cpsid	i
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	b662      	cpsie	i
 800e76c:	617b      	str	r3, [r7, #20]
}
 800e76e:	bf00      	nop
 800e770:	bf00      	nop
 800e772:	e7fd      	b.n	800e770 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e774:	f001 fc08 	bl	800ff88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e778:	2300      	movs	r3, #0
 800e77a:	e082      	b.n	800e882 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e782:	f107 030c 	add.w	r3, r7, #12
 800e786:	4618      	mov	r0, r3
 800e788:	f000 ff10 	bl	800f5ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e78c:	2301      	movs	r3, #1
 800e78e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e790:	f001 fbfa 	bl	800ff88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e794:	f000 fc8a 	bl	800f0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e798:	f001 fbc0 	bl	800ff1c <vPortEnterCritical>
 800e79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e7a2:	b25b      	sxtb	r3, r3
 800e7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a8:	d103      	bne.n	800e7b2 <xQueueSemaphoreTake+0x152>
 800e7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7b8:	b25b      	sxtb	r3, r3
 800e7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7be:	d103      	bne.n	800e7c8 <xQueueSemaphoreTake+0x168>
 800e7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7c8:	f001 fbde 	bl	800ff88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7cc:	463a      	mov	r2, r7
 800e7ce:	f107 030c 	add.w	r3, r7, #12
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f000 feff 	bl	800f5d8 <xTaskCheckForTimeOut>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d132      	bne.n	800e846 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e7e2:	f000 f9d7 	bl	800eb94 <prvIsQueueEmpty>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d026      	beq.n	800e83a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d109      	bne.n	800e808 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e7f4:	f001 fb92 	bl	800ff1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f001 f85b 	bl	800f8b8 <xTaskPriorityInherit>
 800e802:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e804:	f001 fbc0 	bl	800ff88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e80a:	3324      	adds	r3, #36	@ 0x24
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	4611      	mov	r1, r2
 800e810:	4618      	mov	r0, r3
 800e812:	f000 fe3d 	bl	800f490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e818:	f000 f96a 	bl	800eaf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e81c:	f000 fc54 	bl	800f0c8 <xTaskResumeAll>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	f47f af65 	bne.w	800e6f2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e828:	4b18      	ldr	r3, [pc, #96]	@ (800e88c <xQueueSemaphoreTake+0x22c>)
 800e82a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e82e:	601a      	str	r2, [r3, #0]
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	e75b      	b.n	800e6f2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e83a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e83c:	f000 f958 	bl	800eaf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e840:	f000 fc42 	bl	800f0c8 <xTaskResumeAll>
 800e844:	e755      	b.n	800e6f2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e848:	f000 f952 	bl	800eaf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e84c:	f000 fc3c 	bl	800f0c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e850:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e852:	f000 f99f 	bl	800eb94 <prvIsQueueEmpty>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f43f af4a 	beq.w	800e6f2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00d      	beq.n	800e880 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e864:	f001 fb5a 	bl	800ff1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e86a:	f000 f899 	bl	800e9a0 <prvGetDisinheritPriorityAfterTimeout>
 800e86e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e876:	4618      	mov	r0, r3
 800e878:	f001 f92a 	bl	800fad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e87c:	f001 fb84 	bl	800ff88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e882:	4618      	mov	r0, r3
 800e884:	3738      	adds	r7, #56	@ 0x38
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	e000ed04 	.word	0xe000ed04

0800e890 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08e      	sub	sp, #56	@ 0x38
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10d      	bne.n	800e8c2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	b672      	cpsid	i
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	b662      	cpsie	i
 800e8ba:	623b      	str	r3, [r7, #32]
}
 800e8bc:	bf00      	nop
 800e8be:	bf00      	nop
 800e8c0:	e7fd      	b.n	800e8be <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d103      	bne.n	800e8d0 <xQueueReceiveFromISR+0x40>
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d101      	bne.n	800e8d4 <xQueueReceiveFromISR+0x44>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e000      	b.n	800e8d6 <xQueueReceiveFromISR+0x46>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10d      	bne.n	800e8f6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8de:	b672      	cpsid	i
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	b662      	cpsie	i
 800e8ee:	61fb      	str	r3, [r7, #28]
}
 800e8f0:	bf00      	nop
 800e8f2:	bf00      	nop
 800e8f4:	e7fd      	b.n	800e8f2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8f6:	f001 fbf9 	bl	80100ec <vPortValidateInterruptPriority>
	__asm volatile
 800e8fa:	f3ef 8211 	mrs	r2, BASEPRI
 800e8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e902:	b672      	cpsid	i
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	b662      	cpsie	i
 800e912:	61ba      	str	r2, [r7, #24]
 800e914:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e916:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e918:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e91e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e922:	2b00      	cmp	r3, #0
 800e924:	d02f      	beq.n	800e986 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e92c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e930:	68b9      	ldr	r1, [r7, #8]
 800e932:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e934:	f000 f8b6 	bl	800eaa4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93a:	1e5a      	subs	r2, r3, #1
 800e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e940:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e948:	d112      	bne.n	800e970 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d016      	beq.n	800e980 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e954:	3310      	adds	r3, #16
 800e956:	4618      	mov	r0, r3
 800e958:	f000 fdc2 	bl	800f4e0 <xTaskRemoveFromEventList>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00e      	beq.n	800e980 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00b      	beq.n	800e980 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	601a      	str	r2, [r3, #0]
 800e96e:	e007      	b.n	800e980 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e974:	3301      	adds	r3, #1
 800e976:	b2db      	uxtb	r3, r3
 800e978:	b25a      	sxtb	r2, r3
 800e97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e980:	2301      	movs	r3, #1
 800e982:	637b      	str	r3, [r7, #52]	@ 0x34
 800e984:	e001      	b.n	800e98a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e986:	2300      	movs	r3, #0
 800e988:	637b      	str	r3, [r7, #52]	@ 0x34
 800e98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	f383 8811 	msr	BASEPRI, r3
}
 800e994:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3738      	adds	r7, #56	@ 0x38
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d006      	beq.n	800e9be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f1c3 0307 	rsb	r3, r3, #7
 800e9ba:	60fb      	str	r3, [r7, #12]
 800e9bc:	e001      	b.n	800e9c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
	}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10d      	bne.n	800ea0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d14d      	bne.n	800ea92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 ffdc 	bl	800f9b8 <xTaskPriorityDisinherit>
 800ea00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	609a      	str	r2, [r3, #8]
 800ea08:	e043      	b.n	800ea92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d119      	bne.n	800ea44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6858      	ldr	r0, [r3, #4]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea18:	461a      	mov	r2, r3
 800ea1a:	68b9      	ldr	r1, [r7, #8]
 800ea1c:	f003 fc83 	bl	8012326 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea28:	441a      	add	r2, r3
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	685a      	ldr	r2, [r3, #4]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d32b      	bcc.n	800ea92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	605a      	str	r2, [r3, #4]
 800ea42:	e026      	b.n	800ea92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	68d8      	ldr	r0, [r3, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	68b9      	ldr	r1, [r7, #8]
 800ea50:	f003 fc69 	bl	8012326 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	68da      	ldr	r2, [r3, #12]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea5c:	425b      	negs	r3, r3
 800ea5e:	441a      	add	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	68da      	ldr	r2, [r3, #12]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d207      	bcs.n	800ea80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	689a      	ldr	r2, [r3, #8]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea78:	425b      	negs	r3, r3
 800ea7a:	441a      	add	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	d105      	bne.n	800ea92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ea9a:	697b      	ldr	r3, [r7, #20]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d018      	beq.n	800eae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	68da      	ldr	r2, [r3, #12]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eabe:	441a      	add	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	68da      	ldr	r2, [r3, #12]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d303      	bcc.n	800ead8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68d9      	ldr	r1, [r3, #12]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae0:	461a      	mov	r2, r3
 800eae2:	6838      	ldr	r0, [r7, #0]
 800eae4:	f003 fc1f 	bl	8012326 <memcpy>
	}
}
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eaf8:	f001 fa10 	bl	800ff1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb04:	e011      	b.n	800eb2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d012      	beq.n	800eb34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3324      	adds	r3, #36	@ 0x24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fce4 	bl	800f4e0 <xTaskRemoveFromEventList>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb1e:	f000 fdc3 	bl	800f6a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	dce9      	bgt.n	800eb06 <prvUnlockQueue+0x16>
 800eb32:	e000      	b.n	800eb36 <prvUnlockQueue+0x46>
					break;
 800eb34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	22ff      	movs	r2, #255	@ 0xff
 800eb3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eb3e:	f001 fa23 	bl	800ff88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb42:	f001 f9eb 	bl	800ff1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb4e:	e011      	b.n	800eb74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	691b      	ldr	r3, [r3, #16]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d012      	beq.n	800eb7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3310      	adds	r3, #16
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 fcbf 	bl	800f4e0 <xTaskRemoveFromEventList>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eb68:	f000 fd9e 	bl	800f6a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eb6c:	7bbb      	ldrb	r3, [r7, #14]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	dce9      	bgt.n	800eb50 <prvUnlockQueue+0x60>
 800eb7c:	e000      	b.n	800eb80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eb7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	22ff      	movs	r2, #255	@ 0xff
 800eb84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800eb88:	f001 f9fe 	bl	800ff88 <vPortExitCritical>
}
 800eb8c:	bf00      	nop
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb9c:	f001 f9be 	bl	800ff1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d102      	bne.n	800ebae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	e001      	b.n	800ebb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebb2:	f001 f9e9 	bl	800ff88 <vPortExitCritical>

	return xReturn;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebc8:	f001 f9a8 	bl	800ff1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d102      	bne.n	800ebde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	e001      	b.n	800ebe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebe2:	f001 f9d1 	bl	800ff88 <vPortExitCritical>

	return xReturn;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08e      	sub	sp, #56	@ 0x38
 800ebf4:	af04      	add	r7, sp, #16
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ebfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10d      	bne.n	800ec20 <xTaskCreateStatic+0x30>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec08:	b672      	cpsid	i
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	b662      	cpsie	i
 800ec18:	623b      	str	r3, [r7, #32]
}
 800ec1a:	bf00      	nop
 800ec1c:	bf00      	nop
 800ec1e:	e7fd      	b.n	800ec1c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ec20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10d      	bne.n	800ec42 <xTaskCreateStatic+0x52>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2a:	b672      	cpsid	i
 800ec2c:	f383 8811 	msr	BASEPRI, r3
 800ec30:	f3bf 8f6f 	isb	sy
 800ec34:	f3bf 8f4f 	dsb	sy
 800ec38:	b662      	cpsie	i
 800ec3a:	61fb      	str	r3, [r7, #28]
}
 800ec3c:	bf00      	nop
 800ec3e:	bf00      	nop
 800ec40:	e7fd      	b.n	800ec3e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec42:	23a0      	movs	r3, #160	@ 0xa0
 800ec44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	2ba0      	cmp	r3, #160	@ 0xa0
 800ec4a:	d00d      	beq.n	800ec68 <xTaskCreateStatic+0x78>
	__asm volatile
 800ec4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec50:	b672      	cpsid	i
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	b662      	cpsie	i
 800ec60:	61bb      	str	r3, [r7, #24]
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	e7fd      	b.n	800ec64 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d01e      	beq.n	800ecae <xTaskCreateStatic+0xbe>
 800ec70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d01b      	beq.n	800ecae <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec82:	2202      	movs	r2, #2
 800ec84:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec88:	2300      	movs	r3, #0
 800ec8a:	9303      	str	r3, [sp, #12]
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec8e:	9302      	str	r3, [sp, #8]
 800ec90:	f107 0314 	add.w	r3, r7, #20
 800ec94:	9301      	str	r3, [sp, #4]
 800ec96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	68b9      	ldr	r1, [r7, #8]
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f000 f851 	bl	800ed48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eca8:	f000 f8f0 	bl	800ee8c <prvAddNewTaskToReadyList>
 800ecac:	e001      	b.n	800ecb2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ecb2:	697b      	ldr	r3, [r7, #20]
	}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3728      	adds	r7, #40	@ 0x28
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08c      	sub	sp, #48	@ 0x30
 800ecc0:	af04      	add	r7, sp, #16
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eccc:	88fb      	ldrh	r3, [r7, #6]
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f001 fa51 	bl	8010178 <pvPortMalloc>
 800ecd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00e      	beq.n	800ecfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ecde:	20a0      	movs	r0, #160	@ 0xa0
 800ece0:	f001 fa4a 	bl	8010178 <pvPortMalloc>
 800ece4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d003      	beq.n	800ecf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ecf2:	e005      	b.n	800ed00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ecf4:	6978      	ldr	r0, [r7, #20]
 800ecf6:	f001 fb0d 	bl	8010314 <vPortFree>
 800ecfa:	e001      	b.n	800ed00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d017      	beq.n	800ed36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed0e:	88fa      	ldrh	r2, [r7, #6]
 800ed10:	2300      	movs	r3, #0
 800ed12:	9303      	str	r3, [sp, #12]
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	9302      	str	r3, [sp, #8]
 800ed18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed1a:	9301      	str	r3, [sp, #4]
 800ed1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	68b9      	ldr	r1, [r7, #8]
 800ed24:	68f8      	ldr	r0, [r7, #12]
 800ed26:	f000 f80f 	bl	800ed48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed2a:	69f8      	ldr	r0, [r7, #28]
 800ed2c:	f000 f8ae 	bl	800ee8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed30:	2301      	movs	r3, #1
 800ed32:	61bb      	str	r3, [r7, #24]
 800ed34:	e002      	b.n	800ed3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed36:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed3c:	69bb      	ldr	r3, [r7, #24]
	}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3720      	adds	r7, #32
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
	...

0800ed48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b088      	sub	sp, #32
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed5a:	6879      	ldr	r1, [r7, #4]
 800ed5c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ed60:	440b      	add	r3, r1
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	4413      	add	r3, r2
 800ed66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	f023 0307 	bic.w	r3, r3, #7
 800ed6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00d      	beq.n	800ed96 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7e:	b672      	cpsid	i
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	b662      	cpsie	i
 800ed8e:	617b      	str	r3, [r7, #20]
}
 800ed90:	bf00      	nop
 800ed92:	bf00      	nop
 800ed94:	e7fd      	b.n	800ed92 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d01f      	beq.n	800eddc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	61fb      	str	r3, [r7, #28]
 800eda0:	e012      	b.n	800edc8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	4413      	add	r3, r2
 800eda8:	7819      	ldrb	r1, [r3, #0]
 800edaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	4413      	add	r3, r2
 800edb0:	3334      	adds	r3, #52	@ 0x34
 800edb2:	460a      	mov	r2, r1
 800edb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	4413      	add	r3, r2
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d006      	beq.n	800edd0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	3301      	adds	r3, #1
 800edc6:	61fb      	str	r3, [r7, #28]
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2b0f      	cmp	r3, #15
 800edcc:	d9e9      	bls.n	800eda2 <prvInitialiseNewTask+0x5a>
 800edce:	e000      	b.n	800edd2 <prvInitialiseNewTask+0x8a>
			{
				break;
 800edd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800edd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800edda:	e003      	b.n	800ede4 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ede4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede6:	2b06      	cmp	r3, #6
 800ede8:	d901      	bls.n	800edee <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800edea:	2306      	movs	r3, #6
 800edec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edf8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800edfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edfc:	2200      	movs	r2, #0
 800edfe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ee00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee02:	3304      	adds	r3, #4
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe ff13 	bl	800dc30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0c:	3318      	adds	r3, #24
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe ff0e 	bl	800dc30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1c:	f1c3 0207 	rsb	r2, r3, #7
 800ee20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3c:	334c      	adds	r3, #76	@ 0x4c
 800ee3e:	224c      	movs	r2, #76	@ 0x4c
 800ee40:	2100      	movs	r1, #0
 800ee42:	4618      	mov	r0, r3
 800ee44:	f003 f916 	bl	8012074 <memset>
 800ee48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee4a:	4a0d      	ldr	r2, [pc, #52]	@ (800ee80 <prvInitialiseNewTask+0x138>)
 800ee4c:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee50:	4a0c      	ldr	r2, [pc, #48]	@ (800ee84 <prvInitialiseNewTask+0x13c>)
 800ee52:	655a      	str	r2, [r3, #84]	@ 0x54
 800ee54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee56:	4a0c      	ldr	r2, [pc, #48]	@ (800ee88 <prvInitialiseNewTask+0x140>)
 800ee58:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee5a:	683a      	ldr	r2, [r7, #0]
 800ee5c:	68f9      	ldr	r1, [r7, #12]
 800ee5e:	69b8      	ldr	r0, [r7, #24]
 800ee60:	f000 ff50 	bl	800fd04 <pxPortInitialiseStack>
 800ee64:	4602      	mov	r2, r0
 800ee66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d002      	beq.n	800ee76 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee76:	bf00      	nop
 800ee78:	3720      	adds	r7, #32
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	200091d8 	.word	0x200091d8
 800ee84:	20009240 	.word	0x20009240
 800ee88:	200092a8 	.word	0x200092a8

0800ee8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee94:	f001 f842 	bl	800ff1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee98:	4b2a      	ldr	r3, [pc, #168]	@ (800ef44 <prvAddNewTaskToReadyList+0xb8>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	4a29      	ldr	r2, [pc, #164]	@ (800ef44 <prvAddNewTaskToReadyList+0xb8>)
 800eea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eea2:	4b29      	ldr	r3, [pc, #164]	@ (800ef48 <prvAddNewTaskToReadyList+0xbc>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d109      	bne.n	800eebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eeaa:	4a27      	ldr	r2, [pc, #156]	@ (800ef48 <prvAddNewTaskToReadyList+0xbc>)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eeb0:	4b24      	ldr	r3, [pc, #144]	@ (800ef44 <prvAddNewTaskToReadyList+0xb8>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d110      	bne.n	800eeda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eeb8:	f000 fc1a 	bl	800f6f0 <prvInitialiseTaskLists>
 800eebc:	e00d      	b.n	800eeda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eebe:	4b23      	ldr	r3, [pc, #140]	@ (800ef4c <prvAddNewTaskToReadyList+0xc0>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d109      	bne.n	800eeda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eec6:	4b20      	ldr	r3, [pc, #128]	@ (800ef48 <prvAddNewTaskToReadyList+0xbc>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d802      	bhi.n	800eeda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eed4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef48 <prvAddNewTaskToReadyList+0xbc>)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eeda:	4b1d      	ldr	r3, [pc, #116]	@ (800ef50 <prvAddNewTaskToReadyList+0xc4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	3301      	adds	r3, #1
 800eee0:	4a1b      	ldr	r2, [pc, #108]	@ (800ef50 <prvAddNewTaskToReadyList+0xc4>)
 800eee2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee8:	2201      	movs	r2, #1
 800eeea:	409a      	lsls	r2, r3
 800eeec:	4b19      	ldr	r3, [pc, #100]	@ (800ef54 <prvAddNewTaskToReadyList+0xc8>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	4a18      	ldr	r2, [pc, #96]	@ (800ef54 <prvAddNewTaskToReadyList+0xc8>)
 800eef4:	6013      	str	r3, [r2, #0]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eefa:	4613      	mov	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4a15      	ldr	r2, [pc, #84]	@ (800ef58 <prvAddNewTaskToReadyList+0xcc>)
 800ef04:	441a      	add	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	3304      	adds	r3, #4
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	f7fe fe9c 	bl	800dc4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef12:	f001 f839 	bl	800ff88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef16:	4b0d      	ldr	r3, [pc, #52]	@ (800ef4c <prvAddNewTaskToReadyList+0xc0>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00e      	beq.n	800ef3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ef48 <prvAddNewTaskToReadyList+0xbc>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d207      	bcs.n	800ef3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef5c <prvAddNewTaskToReadyList+0xd0>)
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef3c:	bf00      	nop
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	2000118c 	.word	0x2000118c
 800ef48:	2000108c 	.word	0x2000108c
 800ef4c:	20001198 	.word	0x20001198
 800ef50:	200011a8 	.word	0x200011a8
 800ef54:	20001194 	.word	0x20001194
 800ef58:	20001090 	.word	0x20001090
 800ef5c:	e000ed04 	.word	0xe000ed04

0800ef60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d01a      	beq.n	800efa8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef72:	4b15      	ldr	r3, [pc, #84]	@ (800efc8 <vTaskDelay+0x68>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00d      	beq.n	800ef96 <vTaskDelay+0x36>
	__asm volatile
 800ef7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef7e:	b672      	cpsid	i
 800ef80:	f383 8811 	msr	BASEPRI, r3
 800ef84:	f3bf 8f6f 	isb	sy
 800ef88:	f3bf 8f4f 	dsb	sy
 800ef8c:	b662      	cpsie	i
 800ef8e:	60bb      	str	r3, [r7, #8]
}
 800ef90:	bf00      	nop
 800ef92:	bf00      	nop
 800ef94:	e7fd      	b.n	800ef92 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ef96:	f000 f889 	bl	800f0ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 fe4b 	bl	800fc38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800efa2:	f000 f891 	bl	800f0c8 <xTaskResumeAll>
 800efa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d107      	bne.n	800efbe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800efae:	4b07      	ldr	r3, [pc, #28]	@ (800efcc <vTaskDelay+0x6c>)
 800efb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efbe:	bf00      	nop
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	200011b4 	.word	0x200011b4
 800efcc:	e000ed04 	.word	0xe000ed04

0800efd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b08a      	sub	sp, #40	@ 0x28
 800efd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800efd6:	2300      	movs	r3, #0
 800efd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800efda:	2300      	movs	r3, #0
 800efdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800efde:	463a      	mov	r2, r7
 800efe0:	1d39      	adds	r1, r7, #4
 800efe2:	f107 0308 	add.w	r3, r7, #8
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f2 fc42 	bl	8001870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68ba      	ldr	r2, [r7, #8]
 800eff2:	9202      	str	r2, [sp, #8]
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	2300      	movs	r3, #0
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	2300      	movs	r3, #0
 800effc:	460a      	mov	r2, r1
 800effe:	4923      	ldr	r1, [pc, #140]	@ (800f08c <vTaskStartScheduler+0xbc>)
 800f000:	4823      	ldr	r0, [pc, #140]	@ (800f090 <vTaskStartScheduler+0xc0>)
 800f002:	f7ff fdf5 	bl	800ebf0 <xTaskCreateStatic>
 800f006:	4603      	mov	r3, r0
 800f008:	4a22      	ldr	r2, [pc, #136]	@ (800f094 <vTaskStartScheduler+0xc4>)
 800f00a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f00c:	4b21      	ldr	r3, [pc, #132]	@ (800f094 <vTaskStartScheduler+0xc4>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f014:	2301      	movs	r3, #1
 800f016:	617b      	str	r3, [r7, #20]
 800f018:	e001      	b.n	800f01e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f01a:	2300      	movs	r3, #0
 800f01c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d11d      	bne.n	800f060 <vTaskStartScheduler+0x90>
	__asm volatile
 800f024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f028:	b672      	cpsid	i
 800f02a:	f383 8811 	msr	BASEPRI, r3
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	b662      	cpsie	i
 800f038:	613b      	str	r3, [r7, #16]
}
 800f03a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f03c:	4b16      	ldr	r3, [pc, #88]	@ (800f098 <vTaskStartScheduler+0xc8>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	334c      	adds	r3, #76	@ 0x4c
 800f042:	4a16      	ldr	r2, [pc, #88]	@ (800f09c <vTaskStartScheduler+0xcc>)
 800f044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f046:	4b16      	ldr	r3, [pc, #88]	@ (800f0a0 <vTaskStartScheduler+0xd0>)
 800f048:	f04f 32ff 	mov.w	r2, #4294967295
 800f04c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f04e:	4b15      	ldr	r3, [pc, #84]	@ (800f0a4 <vTaskStartScheduler+0xd4>)
 800f050:	2201      	movs	r2, #1
 800f052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f054:	4b14      	ldr	r3, [pc, #80]	@ (800f0a8 <vTaskStartScheduler+0xd8>)
 800f056:	2200      	movs	r2, #0
 800f058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f05a:	f000 fee1 	bl	800fe20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f05e:	e011      	b.n	800f084 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d10d      	bne.n	800f084 <vTaskStartScheduler+0xb4>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06c:	b672      	cpsid	i
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	b662      	cpsie	i
 800f07c:	60fb      	str	r3, [r7, #12]
}
 800f07e:	bf00      	nop
 800f080:	bf00      	nop
 800f082:	e7fd      	b.n	800f080 <vTaskStartScheduler+0xb0>
}
 800f084:	bf00      	nop
 800f086:	3718      	adds	r7, #24
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	08014e64 	.word	0x08014e64
 800f090:	0800f6c1 	.word	0x0800f6c1
 800f094:	200011b0 	.word	0x200011b0
 800f098:	2000108c 	.word	0x2000108c
 800f09c:	2000018c 	.word	0x2000018c
 800f0a0:	200011ac 	.word	0x200011ac
 800f0a4:	20001198 	.word	0x20001198
 800f0a8:	20001190 	.word	0x20001190

0800f0ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f0b0:	4b04      	ldr	r3, [pc, #16]	@ (800f0c4 <vTaskSuspendAll+0x18>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	4a03      	ldr	r2, [pc, #12]	@ (800f0c4 <vTaskSuspendAll+0x18>)
 800f0b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f0ba:	bf00      	nop
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr
 800f0c4:	200011b4 	.word	0x200011b4

0800f0c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f0d6:	4b43      	ldr	r3, [pc, #268]	@ (800f1e4 <xTaskResumeAll+0x11c>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10d      	bne.n	800f0fa <xTaskResumeAll+0x32>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e2:	b672      	cpsid	i
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	b662      	cpsie	i
 800f0f2:	603b      	str	r3, [r7, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	bf00      	nop
 800f0f8:	e7fd      	b.n	800f0f6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f0fa:	f000 ff0f 	bl	800ff1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f0fe:	4b39      	ldr	r3, [pc, #228]	@ (800f1e4 <xTaskResumeAll+0x11c>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3b01      	subs	r3, #1
 800f104:	4a37      	ldr	r2, [pc, #220]	@ (800f1e4 <xTaskResumeAll+0x11c>)
 800f106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f108:	4b36      	ldr	r3, [pc, #216]	@ (800f1e4 <xTaskResumeAll+0x11c>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d161      	bne.n	800f1d4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f110:	4b35      	ldr	r3, [pc, #212]	@ (800f1e8 <xTaskResumeAll+0x120>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d05d      	beq.n	800f1d4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f118:	e02e      	b.n	800f178 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f11a:	4b34      	ldr	r3, [pc, #208]	@ (800f1ec <xTaskResumeAll+0x124>)
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3318      	adds	r3, #24
 800f126:	4618      	mov	r0, r3
 800f128:	f7fe fdec 	bl	800dd04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	3304      	adds	r3, #4
 800f130:	4618      	mov	r0, r3
 800f132:	f7fe fde7 	bl	800dd04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f13a:	2201      	movs	r2, #1
 800f13c:	409a      	lsls	r2, r3
 800f13e:	4b2c      	ldr	r3, [pc, #176]	@ (800f1f0 <xTaskResumeAll+0x128>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4313      	orrs	r3, r2
 800f144:	4a2a      	ldr	r2, [pc, #168]	@ (800f1f0 <xTaskResumeAll+0x128>)
 800f146:	6013      	str	r3, [r2, #0]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f14c:	4613      	mov	r3, r2
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	4413      	add	r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4a27      	ldr	r2, [pc, #156]	@ (800f1f4 <xTaskResumeAll+0x12c>)
 800f156:	441a      	add	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	3304      	adds	r3, #4
 800f15c:	4619      	mov	r1, r3
 800f15e:	4610      	mov	r0, r2
 800f160:	f7fe fd73 	bl	800dc4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f168:	4b23      	ldr	r3, [pc, #140]	@ (800f1f8 <xTaskResumeAll+0x130>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f16e:	429a      	cmp	r2, r3
 800f170:	d302      	bcc.n	800f178 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f172:	4b22      	ldr	r3, [pc, #136]	@ (800f1fc <xTaskResumeAll+0x134>)
 800f174:	2201      	movs	r2, #1
 800f176:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f178:	4b1c      	ldr	r3, [pc, #112]	@ (800f1ec <xTaskResumeAll+0x124>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1cc      	bne.n	800f11a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d001      	beq.n	800f18a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f186:	f000 fb59 	bl	800f83c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f18a:	4b1d      	ldr	r3, [pc, #116]	@ (800f200 <xTaskResumeAll+0x138>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d010      	beq.n	800f1b8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f196:	f000 f859 	bl	800f24c <xTaskIncrementTick>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d002      	beq.n	800f1a6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f1a0:	4b16      	ldr	r3, [pc, #88]	@ (800f1fc <xTaskResumeAll+0x134>)
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1f1      	bne.n	800f196 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f1b2:	4b13      	ldr	r3, [pc, #76]	@ (800f200 <xTaskResumeAll+0x138>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1b8:	4b10      	ldr	r3, [pc, #64]	@ (800f1fc <xTaskResumeAll+0x134>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d009      	beq.n	800f1d4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1c4:	4b0f      	ldr	r3, [pc, #60]	@ (800f204 <xTaskResumeAll+0x13c>)
 800f1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1d4:	f000 fed8 	bl	800ff88 <vPortExitCritical>

	return xAlreadyYielded;
 800f1d8:	68bb      	ldr	r3, [r7, #8]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	200011b4 	.word	0x200011b4
 800f1e8:	2000118c 	.word	0x2000118c
 800f1ec:	2000114c 	.word	0x2000114c
 800f1f0:	20001194 	.word	0x20001194
 800f1f4:	20001090 	.word	0x20001090
 800f1f8:	2000108c 	.word	0x2000108c
 800f1fc:	200011a0 	.word	0x200011a0
 800f200:	2000119c 	.word	0x2000119c
 800f204:	e000ed04 	.word	0xe000ed04

0800f208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f20e:	4b05      	ldr	r3, [pc, #20]	@ (800f224 <xTaskGetTickCount+0x1c>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f214:	687b      	ldr	r3, [r7, #4]
}
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	20001190 	.word	0x20001190

0800f228 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f22e:	f000 ff5d 	bl	80100ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f232:	2300      	movs	r3, #0
 800f234:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f236:	4b04      	ldr	r3, [pc, #16]	@ (800f248 <xTaskGetTickCountFromISR+0x20>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f23c:	683b      	ldr	r3, [r7, #0]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	20001190 	.word	0x20001190

0800f24c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f252:	2300      	movs	r3, #0
 800f254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f256:	4b50      	ldr	r3, [pc, #320]	@ (800f398 <xTaskIncrementTick+0x14c>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f040 808b 	bne.w	800f376 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f260:	4b4e      	ldr	r3, [pc, #312]	@ (800f39c <xTaskIncrementTick+0x150>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f268:	4a4c      	ldr	r2, [pc, #304]	@ (800f39c <xTaskIncrementTick+0x150>)
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d123      	bne.n	800f2bc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f274:	4b4a      	ldr	r3, [pc, #296]	@ (800f3a0 <xTaskIncrementTick+0x154>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00d      	beq.n	800f29a <xTaskIncrementTick+0x4e>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f282:	b672      	cpsid	i
 800f284:	f383 8811 	msr	BASEPRI, r3
 800f288:	f3bf 8f6f 	isb	sy
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	b662      	cpsie	i
 800f292:	603b      	str	r3, [r7, #0]
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	e7fd      	b.n	800f296 <xTaskIncrementTick+0x4a>
 800f29a:	4b41      	ldr	r3, [pc, #260]	@ (800f3a0 <xTaskIncrementTick+0x154>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	4b40      	ldr	r3, [pc, #256]	@ (800f3a4 <xTaskIncrementTick+0x158>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a3e      	ldr	r2, [pc, #248]	@ (800f3a0 <xTaskIncrementTick+0x154>)
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	4a3e      	ldr	r2, [pc, #248]	@ (800f3a4 <xTaskIncrementTick+0x158>)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6013      	str	r3, [r2, #0]
 800f2ae:	4b3e      	ldr	r3, [pc, #248]	@ (800f3a8 <xTaskIncrementTick+0x15c>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	4a3c      	ldr	r2, [pc, #240]	@ (800f3a8 <xTaskIncrementTick+0x15c>)
 800f2b6:	6013      	str	r3, [r2, #0]
 800f2b8:	f000 fac0 	bl	800f83c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f2bc:	4b3b      	ldr	r3, [pc, #236]	@ (800f3ac <xTaskIncrementTick+0x160>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d348      	bcc.n	800f358 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2c6:	4b36      	ldr	r3, [pc, #216]	@ (800f3a0 <xTaskIncrementTick+0x154>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d104      	bne.n	800f2da <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2d0:	4b36      	ldr	r3, [pc, #216]	@ (800f3ac <xTaskIncrementTick+0x160>)
 800f2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d6:	601a      	str	r2, [r3, #0]
					break;
 800f2d8:	e03e      	b.n	800f358 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2da:	4b31      	ldr	r3, [pc, #196]	@ (800f3a0 <xTaskIncrementTick+0x154>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f2ea:	693a      	ldr	r2, [r7, #16]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d203      	bcs.n	800f2fa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f2f2:	4a2e      	ldr	r2, [pc, #184]	@ (800f3ac <xTaskIncrementTick+0x160>)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f2f8:	e02e      	b.n	800f358 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe fd00 	bl	800dd04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	3318      	adds	r3, #24
 800f310:	4618      	mov	r0, r3
 800f312:	f7fe fcf7 	bl	800dd04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f31a:	2201      	movs	r2, #1
 800f31c:	409a      	lsls	r2, r3
 800f31e:	4b24      	ldr	r3, [pc, #144]	@ (800f3b0 <xTaskIncrementTick+0x164>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4313      	orrs	r3, r2
 800f324:	4a22      	ldr	r2, [pc, #136]	@ (800f3b0 <xTaskIncrementTick+0x164>)
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f32c:	4613      	mov	r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	4413      	add	r3, r2
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	4a1f      	ldr	r2, [pc, #124]	@ (800f3b4 <xTaskIncrementTick+0x168>)
 800f336:	441a      	add	r2, r3
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	3304      	adds	r3, #4
 800f33c:	4619      	mov	r1, r3
 800f33e:	4610      	mov	r0, r2
 800f340:	f7fe fc83 	bl	800dc4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f348:	4b1b      	ldr	r3, [pc, #108]	@ (800f3b8 <xTaskIncrementTick+0x16c>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f34e:	429a      	cmp	r2, r3
 800f350:	d3b9      	bcc.n	800f2c6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f352:	2301      	movs	r3, #1
 800f354:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f356:	e7b6      	b.n	800f2c6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f358:	4b17      	ldr	r3, [pc, #92]	@ (800f3b8 <xTaskIncrementTick+0x16c>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f35e:	4915      	ldr	r1, [pc, #84]	@ (800f3b4 <xTaskIncrementTick+0x168>)
 800f360:	4613      	mov	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4413      	add	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	440b      	add	r3, r1
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d907      	bls.n	800f380 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	e004      	b.n	800f380 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f376:	4b11      	ldr	r3, [pc, #68]	@ (800f3bc <xTaskIncrementTick+0x170>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	3301      	adds	r3, #1
 800f37c:	4a0f      	ldr	r2, [pc, #60]	@ (800f3bc <xTaskIncrementTick+0x170>)
 800f37e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f380:	4b0f      	ldr	r3, [pc, #60]	@ (800f3c0 <xTaskIncrementTick+0x174>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f388:	2301      	movs	r3, #1
 800f38a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f38c:	697b      	ldr	r3, [r7, #20]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3718      	adds	r7, #24
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	200011b4 	.word	0x200011b4
 800f39c:	20001190 	.word	0x20001190
 800f3a0:	20001144 	.word	0x20001144
 800f3a4:	20001148 	.word	0x20001148
 800f3a8:	200011a4 	.word	0x200011a4
 800f3ac:	200011ac 	.word	0x200011ac
 800f3b0:	20001194 	.word	0x20001194
 800f3b4:	20001090 	.word	0x20001090
 800f3b8:	2000108c 	.word	0x2000108c
 800f3bc:	2000119c 	.word	0x2000119c
 800f3c0:	200011a0 	.word	0x200011a0

0800f3c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800f478 <vTaskSwitchContext+0xb4>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f3d2:	4b2a      	ldr	r3, [pc, #168]	@ (800f47c <vTaskSwitchContext+0xb8>)
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f3d8:	e047      	b.n	800f46a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f3da:	4b28      	ldr	r3, [pc, #160]	@ (800f47c <vTaskSwitchContext+0xb8>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e0:	4b27      	ldr	r3, [pc, #156]	@ (800f480 <vTaskSwitchContext+0xbc>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	fab3 f383 	clz	r3, r3
 800f3ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f3ee:	7afb      	ldrb	r3, [r7, #11]
 800f3f0:	f1c3 031f 	rsb	r3, r3, #31
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	4923      	ldr	r1, [pc, #140]	@ (800f484 <vTaskSwitchContext+0xc0>)
 800f3f8:	697a      	ldr	r2, [r7, #20]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	4413      	add	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	440b      	add	r3, r1
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10d      	bne.n	800f426 <vTaskSwitchContext+0x62>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40e:	b672      	cpsid	i
 800f410:	f383 8811 	msr	BASEPRI, r3
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	b662      	cpsie	i
 800f41e:	607b      	str	r3, [r7, #4]
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	e7fd      	b.n	800f422 <vTaskSwitchContext+0x5e>
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	4613      	mov	r3, r2
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4413      	add	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4a14      	ldr	r2, [pc, #80]	@ (800f484 <vTaskSwitchContext+0xc0>)
 800f432:	4413      	add	r3, r2
 800f434:	613b      	str	r3, [r7, #16]
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	605a      	str	r2, [r3, #4]
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	3308      	adds	r3, #8
 800f448:	429a      	cmp	r2, r3
 800f44a:	d104      	bne.n	800f456 <vTaskSwitchContext+0x92>
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	605a      	str	r2, [r3, #4]
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	4a0a      	ldr	r2, [pc, #40]	@ (800f488 <vTaskSwitchContext+0xc4>)
 800f45e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f460:	4b09      	ldr	r3, [pc, #36]	@ (800f488 <vTaskSwitchContext+0xc4>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	334c      	adds	r3, #76	@ 0x4c
 800f466:	4a09      	ldr	r2, [pc, #36]	@ (800f48c <vTaskSwitchContext+0xc8>)
 800f468:	6013      	str	r3, [r2, #0]
}
 800f46a:	bf00      	nop
 800f46c:	371c      	adds	r7, #28
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr
 800f476:	bf00      	nop
 800f478:	200011b4 	.word	0x200011b4
 800f47c:	200011a0 	.word	0x200011a0
 800f480:	20001194 	.word	0x20001194
 800f484:	20001090 	.word	0x20001090
 800f488:	2000108c 	.word	0x2000108c
 800f48c:	2000018c 	.word	0x2000018c

0800f490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10d      	bne.n	800f4bc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a4:	b672      	cpsid	i
 800f4a6:	f383 8811 	msr	BASEPRI, r3
 800f4aa:	f3bf 8f6f 	isb	sy
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	b662      	cpsie	i
 800f4b4:	60fb      	str	r3, [r7, #12]
}
 800f4b6:	bf00      	nop
 800f4b8:	bf00      	nop
 800f4ba:	e7fd      	b.n	800f4b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4bc:	4b07      	ldr	r3, [pc, #28]	@ (800f4dc <vTaskPlaceOnEventList+0x4c>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	3318      	adds	r3, #24
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7fe fbe4 	bl	800dc92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f4ca:	2101      	movs	r1, #1
 800f4cc:	6838      	ldr	r0, [r7, #0]
 800f4ce:	f000 fbb3 	bl	800fc38 <prvAddCurrentTaskToDelayedList>
}
 800f4d2:	bf00      	nop
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	2000108c 	.word	0x2000108c

0800f4e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10d      	bne.n	800f512 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4fa:	b672      	cpsid	i
 800f4fc:	f383 8811 	msr	BASEPRI, r3
 800f500:	f3bf 8f6f 	isb	sy
 800f504:	f3bf 8f4f 	dsb	sy
 800f508:	b662      	cpsie	i
 800f50a:	60fb      	str	r3, [r7, #12]
}
 800f50c:	bf00      	nop
 800f50e:	bf00      	nop
 800f510:	e7fd      	b.n	800f50e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	3318      	adds	r3, #24
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe fbf4 	bl	800dd04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f51c:	4b1d      	ldr	r3, [pc, #116]	@ (800f594 <xTaskRemoveFromEventList+0xb4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d11c      	bne.n	800f55e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	3304      	adds	r3, #4
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fe fbeb 	bl	800dd04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f532:	2201      	movs	r2, #1
 800f534:	409a      	lsls	r2, r3
 800f536:	4b18      	ldr	r3, [pc, #96]	@ (800f598 <xTaskRemoveFromEventList+0xb8>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	4a16      	ldr	r2, [pc, #88]	@ (800f598 <xTaskRemoveFromEventList+0xb8>)
 800f53e:	6013      	str	r3, [r2, #0]
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f544:	4613      	mov	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	4a13      	ldr	r2, [pc, #76]	@ (800f59c <xTaskRemoveFromEventList+0xbc>)
 800f54e:	441a      	add	r2, r3
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	3304      	adds	r3, #4
 800f554:	4619      	mov	r1, r3
 800f556:	4610      	mov	r0, r2
 800f558:	f7fe fb77 	bl	800dc4a <vListInsertEnd>
 800f55c:	e005      	b.n	800f56a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	3318      	adds	r3, #24
 800f562:	4619      	mov	r1, r3
 800f564:	480e      	ldr	r0, [pc, #56]	@ (800f5a0 <xTaskRemoveFromEventList+0xc0>)
 800f566:	f7fe fb70 	bl	800dc4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f56e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5a4 <xTaskRemoveFromEventList+0xc4>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f574:	429a      	cmp	r2, r3
 800f576:	d905      	bls.n	800f584 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f578:	2301      	movs	r3, #1
 800f57a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f57c:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a8 <xTaskRemoveFromEventList+0xc8>)
 800f57e:	2201      	movs	r2, #1
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	e001      	b.n	800f588 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f584:	2300      	movs	r3, #0
 800f586:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f588:	697b      	ldr	r3, [r7, #20]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3718      	adds	r7, #24
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	200011b4 	.word	0x200011b4
 800f598:	20001194 	.word	0x20001194
 800f59c:	20001090 	.word	0x20001090
 800f5a0:	2000114c 	.word	0x2000114c
 800f5a4:	2000108c 	.word	0x2000108c
 800f5a8:	200011a0 	.word	0x200011a0

0800f5ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5b4:	4b06      	ldr	r3, [pc, #24]	@ (800f5d0 <vTaskInternalSetTimeOutState+0x24>)
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5bc:	4b05      	ldr	r3, [pc, #20]	@ (800f5d4 <vTaskInternalSetTimeOutState+0x28>)
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	605a      	str	r2, [r3, #4]
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	200011a4 	.word	0x200011a4
 800f5d4:	20001190 	.word	0x20001190

0800f5d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b088      	sub	sp, #32
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10d      	bne.n	800f604 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ec:	b672      	cpsid	i
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	b662      	cpsie	i
 800f5fc:	613b      	str	r3, [r7, #16]
}
 800f5fe:	bf00      	nop
 800f600:	bf00      	nop
 800f602:	e7fd      	b.n	800f600 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10d      	bne.n	800f626 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f60e:	b672      	cpsid	i
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	b662      	cpsie	i
 800f61e:	60fb      	str	r3, [r7, #12]
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	e7fd      	b.n	800f622 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f626:	f000 fc79 	bl	800ff1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f62a:	4b1d      	ldr	r3, [pc, #116]	@ (800f6a0 <xTaskCheckForTimeOut+0xc8>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	69ba      	ldr	r2, [r7, #24]
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f642:	d102      	bne.n	800f64a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f644:	2300      	movs	r3, #0
 800f646:	61fb      	str	r3, [r7, #28]
 800f648:	e023      	b.n	800f692 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	4b15      	ldr	r3, [pc, #84]	@ (800f6a4 <xTaskCheckForTimeOut+0xcc>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	429a      	cmp	r2, r3
 800f654:	d007      	beq.n	800f666 <xTaskCheckForTimeOut+0x8e>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	69ba      	ldr	r2, [r7, #24]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d302      	bcc.n	800f666 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f660:	2301      	movs	r3, #1
 800f662:	61fb      	str	r3, [r7, #28]
 800f664:	e015      	b.n	800f692 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	697a      	ldr	r2, [r7, #20]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d20b      	bcs.n	800f688 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	1ad2      	subs	r2, r2, r3
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff ff95 	bl	800f5ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f682:	2300      	movs	r3, #0
 800f684:	61fb      	str	r3, [r7, #28]
 800f686:	e004      	b.n	800f692 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f68e:	2301      	movs	r3, #1
 800f690:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f692:	f000 fc79 	bl	800ff88 <vPortExitCritical>

	return xReturn;
 800f696:	69fb      	ldr	r3, [r7, #28]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3720      	adds	r7, #32
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	20001190 	.word	0x20001190
 800f6a4:	200011a4 	.word	0x200011a4

0800f6a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6ac:	4b03      	ldr	r3, [pc, #12]	@ (800f6bc <vTaskMissedYield+0x14>)
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	601a      	str	r2, [r3, #0]
}
 800f6b2:	bf00      	nop
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	200011a0 	.word	0x200011a0

0800f6c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6c8:	f000 f852 	bl	800f770 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6cc:	4b06      	ldr	r3, [pc, #24]	@ (800f6e8 <prvIdleTask+0x28>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d9f9      	bls.n	800f6c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f6d4:	4b05      	ldr	r3, [pc, #20]	@ (800f6ec <prvIdleTask+0x2c>)
 800f6d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f6e4:	e7f0      	b.n	800f6c8 <prvIdleTask+0x8>
 800f6e6:	bf00      	nop
 800f6e8:	20001090 	.word	0x20001090
 800f6ec:	e000ed04 	.word	0xe000ed04

0800f6f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	607b      	str	r3, [r7, #4]
 800f6fa:	e00c      	b.n	800f716 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	4613      	mov	r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	4413      	add	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4a12      	ldr	r2, [pc, #72]	@ (800f750 <prvInitialiseTaskLists+0x60>)
 800f708:	4413      	add	r3, r2
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fe fa70 	bl	800dbf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	3301      	adds	r3, #1
 800f714:	607b      	str	r3, [r7, #4]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b06      	cmp	r3, #6
 800f71a:	d9ef      	bls.n	800f6fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f71c:	480d      	ldr	r0, [pc, #52]	@ (800f754 <prvInitialiseTaskLists+0x64>)
 800f71e:	f7fe fa67 	bl	800dbf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f722:	480d      	ldr	r0, [pc, #52]	@ (800f758 <prvInitialiseTaskLists+0x68>)
 800f724:	f7fe fa64 	bl	800dbf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f728:	480c      	ldr	r0, [pc, #48]	@ (800f75c <prvInitialiseTaskLists+0x6c>)
 800f72a:	f7fe fa61 	bl	800dbf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f72e:	480c      	ldr	r0, [pc, #48]	@ (800f760 <prvInitialiseTaskLists+0x70>)
 800f730:	f7fe fa5e 	bl	800dbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f734:	480b      	ldr	r0, [pc, #44]	@ (800f764 <prvInitialiseTaskLists+0x74>)
 800f736:	f7fe fa5b 	bl	800dbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f73a:	4b0b      	ldr	r3, [pc, #44]	@ (800f768 <prvInitialiseTaskLists+0x78>)
 800f73c:	4a05      	ldr	r2, [pc, #20]	@ (800f754 <prvInitialiseTaskLists+0x64>)
 800f73e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f740:	4b0a      	ldr	r3, [pc, #40]	@ (800f76c <prvInitialiseTaskLists+0x7c>)
 800f742:	4a05      	ldr	r2, [pc, #20]	@ (800f758 <prvInitialiseTaskLists+0x68>)
 800f744:	601a      	str	r2, [r3, #0]
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	20001090 	.word	0x20001090
 800f754:	2000111c 	.word	0x2000111c
 800f758:	20001130 	.word	0x20001130
 800f75c:	2000114c 	.word	0x2000114c
 800f760:	20001160 	.word	0x20001160
 800f764:	20001178 	.word	0x20001178
 800f768:	20001144 	.word	0x20001144
 800f76c:	20001148 	.word	0x20001148

0800f770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f776:	e019      	b.n	800f7ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f778:	f000 fbd0 	bl	800ff1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f77c:	4b10      	ldr	r3, [pc, #64]	@ (800f7c0 <prvCheckTasksWaitingTermination+0x50>)
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	3304      	adds	r3, #4
 800f788:	4618      	mov	r0, r3
 800f78a:	f7fe fabb 	bl	800dd04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f78e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c4 <prvCheckTasksWaitingTermination+0x54>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3b01      	subs	r3, #1
 800f794:	4a0b      	ldr	r2, [pc, #44]	@ (800f7c4 <prvCheckTasksWaitingTermination+0x54>)
 800f796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f798:	4b0b      	ldr	r3, [pc, #44]	@ (800f7c8 <prvCheckTasksWaitingTermination+0x58>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3b01      	subs	r3, #1
 800f79e:	4a0a      	ldr	r2, [pc, #40]	@ (800f7c8 <prvCheckTasksWaitingTermination+0x58>)
 800f7a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7a2:	f000 fbf1 	bl	800ff88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f810 	bl	800f7cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7ac:	4b06      	ldr	r3, [pc, #24]	@ (800f7c8 <prvCheckTasksWaitingTermination+0x58>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1e1      	bne.n	800f778 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	20001160 	.word	0x20001160
 800f7c4:	2000118c 	.word	0x2000118c
 800f7c8:	20001174 	.word	0x20001174

0800f7cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	334c      	adds	r3, #76	@ 0x4c
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f002 fce3 	bl	80121a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d108      	bne.n	800f7fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 fd91 	bl	8010314 <vPortFree>
				vPortFree( pxTCB );
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 fd8e 	bl	8010314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f7f8:	e01b      	b.n	800f832 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f800:	2b01      	cmp	r3, #1
 800f802:	d103      	bne.n	800f80c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 fd85 	bl	8010314 <vPortFree>
	}
 800f80a:	e012      	b.n	800f832 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f812:	2b02      	cmp	r3, #2
 800f814:	d00d      	beq.n	800f832 <prvDeleteTCB+0x66>
	__asm volatile
 800f816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f81a:	b672      	cpsid	i
 800f81c:	f383 8811 	msr	BASEPRI, r3
 800f820:	f3bf 8f6f 	isb	sy
 800f824:	f3bf 8f4f 	dsb	sy
 800f828:	b662      	cpsie	i
 800f82a:	60fb      	str	r3, [r7, #12]
}
 800f82c:	bf00      	nop
 800f82e:	bf00      	nop
 800f830:	e7fd      	b.n	800f82e <prvDeleteTCB+0x62>
	}
 800f832:	bf00      	nop
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
	...

0800f83c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f842:	4b0c      	ldr	r3, [pc, #48]	@ (800f874 <prvResetNextTaskUnblockTime+0x38>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d104      	bne.n	800f856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f84c:	4b0a      	ldr	r3, [pc, #40]	@ (800f878 <prvResetNextTaskUnblockTime+0x3c>)
 800f84e:	f04f 32ff 	mov.w	r2, #4294967295
 800f852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f854:	e008      	b.n	800f868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f856:	4b07      	ldr	r3, [pc, #28]	@ (800f874 <prvResetNextTaskUnblockTime+0x38>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	4a04      	ldr	r2, [pc, #16]	@ (800f878 <prvResetNextTaskUnblockTime+0x3c>)
 800f866:	6013      	str	r3, [r2, #0]
}
 800f868:	bf00      	nop
 800f86a:	370c      	adds	r7, #12
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	20001144 	.word	0x20001144
 800f878:	200011ac 	.word	0x200011ac

0800f87c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f882:	4b0b      	ldr	r3, [pc, #44]	@ (800f8b0 <xTaskGetSchedulerState+0x34>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f88a:	2301      	movs	r3, #1
 800f88c:	607b      	str	r3, [r7, #4]
 800f88e:	e008      	b.n	800f8a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f890:	4b08      	ldr	r3, [pc, #32]	@ (800f8b4 <xTaskGetSchedulerState+0x38>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d102      	bne.n	800f89e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f898:	2302      	movs	r3, #2
 800f89a:	607b      	str	r3, [r7, #4]
 800f89c:	e001      	b.n	800f8a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f8a2:	687b      	ldr	r3, [r7, #4]
	}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	20001198 	.word	0x20001198
 800f8b4:	200011b4 	.word	0x200011b4

0800f8b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d069      	beq.n	800f9a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8d2:	4b36      	ldr	r3, [pc, #216]	@ (800f9ac <xTaskPriorityInherit+0xf4>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d259      	bcs.n	800f990 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	699b      	ldr	r3, [r3, #24]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	db06      	blt.n	800f8f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8e4:	4b31      	ldr	r3, [pc, #196]	@ (800f9ac <xTaskPriorityInherit+0xf4>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ea:	f1c3 0207 	rsb	r2, r3, #7
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	6959      	ldr	r1, [r3, #20]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4a2b      	ldr	r2, [pc, #172]	@ (800f9b0 <xTaskPriorityInherit+0xf8>)
 800f904:	4413      	add	r3, r2
 800f906:	4299      	cmp	r1, r3
 800f908:	d13a      	bne.n	800f980 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	3304      	adds	r3, #4
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe f9f8 	bl	800dd04 <uxListRemove>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d115      	bne.n	800f946 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f91e:	4924      	ldr	r1, [pc, #144]	@ (800f9b0 <xTaskPriorityInherit+0xf8>)
 800f920:	4613      	mov	r3, r2
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	4413      	add	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	440b      	add	r3, r1
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10a      	bne.n	800f946 <xTaskPriorityInherit+0x8e>
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f934:	2201      	movs	r2, #1
 800f936:	fa02 f303 	lsl.w	r3, r2, r3
 800f93a:	43da      	mvns	r2, r3
 800f93c:	4b1d      	ldr	r3, [pc, #116]	@ (800f9b4 <xTaskPriorityInherit+0xfc>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4013      	ands	r3, r2
 800f942:	4a1c      	ldr	r2, [pc, #112]	@ (800f9b4 <xTaskPriorityInherit+0xfc>)
 800f944:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f946:	4b19      	ldr	r3, [pc, #100]	@ (800f9ac <xTaskPriorityInherit+0xf4>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f954:	2201      	movs	r2, #1
 800f956:	409a      	lsls	r2, r3
 800f958:	4b16      	ldr	r3, [pc, #88]	@ (800f9b4 <xTaskPriorityInherit+0xfc>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4313      	orrs	r3, r2
 800f95e:	4a15      	ldr	r2, [pc, #84]	@ (800f9b4 <xTaskPriorityInherit+0xfc>)
 800f960:	6013      	str	r3, [r2, #0]
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f966:	4613      	mov	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4a10      	ldr	r2, [pc, #64]	@ (800f9b0 <xTaskPriorityInherit+0xf8>)
 800f970:	441a      	add	r2, r3
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	3304      	adds	r3, #4
 800f976:	4619      	mov	r1, r3
 800f978:	4610      	mov	r0, r2
 800f97a:	f7fe f966 	bl	800dc4a <vListInsertEnd>
 800f97e:	e004      	b.n	800f98a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f980:	4b0a      	ldr	r3, [pc, #40]	@ (800f9ac <xTaskPriorityInherit+0xf4>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f98a:	2301      	movs	r3, #1
 800f98c:	60fb      	str	r3, [r7, #12]
 800f98e:	e008      	b.n	800f9a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f994:	4b05      	ldr	r3, [pc, #20]	@ (800f9ac <xTaskPriorityInherit+0xf4>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d201      	bcs.n	800f9a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
	}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	2000108c 	.word	0x2000108c
 800f9b0:	20001090 	.word	0x20001090
 800f9b4:	20001194 	.word	0x20001194

0800f9b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d074      	beq.n	800fab8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f9ce:	4b3d      	ldr	r3, [pc, #244]	@ (800fac4 <xTaskPriorityDisinherit+0x10c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d00d      	beq.n	800f9f4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9dc:	b672      	cpsid	i
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	b662      	cpsie	i
 800f9ec:	60fb      	str	r3, [r7, #12]
}
 800f9ee:	bf00      	nop
 800f9f0:	bf00      	nop
 800f9f2:	e7fd      	b.n	800f9f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d10d      	bne.n	800fa18 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa00:	b672      	cpsid	i
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	b662      	cpsie	i
 800fa10:	60bb      	str	r3, [r7, #8]
}
 800fa12:	bf00      	nop
 800fa14:	bf00      	nop
 800fa16:	e7fd      	b.n	800fa14 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa1c:	1e5a      	subs	r2, r3, #1
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d044      	beq.n	800fab8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d140      	bne.n	800fab8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fe f962 	bl	800dd04 <uxListRemove>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d115      	bne.n	800fa72 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa4a:	491f      	ldr	r1, [pc, #124]	@ (800fac8 <xTaskPriorityDisinherit+0x110>)
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	4413      	add	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	440b      	add	r3, r1
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d10a      	bne.n	800fa72 <xTaskPriorityDisinherit+0xba>
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa60:	2201      	movs	r2, #1
 800fa62:	fa02 f303 	lsl.w	r3, r2, r3
 800fa66:	43da      	mvns	r2, r3
 800fa68:	4b18      	ldr	r3, [pc, #96]	@ (800facc <xTaskPriorityDisinherit+0x114>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4013      	ands	r3, r2
 800fa6e:	4a17      	ldr	r2, [pc, #92]	@ (800facc <xTaskPriorityDisinherit+0x114>)
 800fa70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa7e:	f1c3 0207 	rsb	r2, r3, #7
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	409a      	lsls	r2, r3
 800fa8e:	4b0f      	ldr	r3, [pc, #60]	@ (800facc <xTaskPriorityDisinherit+0x114>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	4a0d      	ldr	r2, [pc, #52]	@ (800facc <xTaskPriorityDisinherit+0x114>)
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa9c:	4613      	mov	r3, r2
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	4413      	add	r3, r2
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	4a08      	ldr	r2, [pc, #32]	@ (800fac8 <xTaskPriorityDisinherit+0x110>)
 800faa6:	441a      	add	r2, r3
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	3304      	adds	r3, #4
 800faac:	4619      	mov	r1, r3
 800faae:	4610      	mov	r0, r2
 800fab0:	f7fe f8cb 	bl	800dc4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fab4:	2301      	movs	r3, #1
 800fab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fab8:	697b      	ldr	r3, [r7, #20]
	}
 800faba:	4618      	mov	r0, r3
 800fabc:	3718      	adds	r7, #24
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	2000108c 	.word	0x2000108c
 800fac8:	20001090 	.word	0x20001090
 800facc:	20001194 	.word	0x20001194

0800fad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b088      	sub	sp, #32
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fade:	2301      	movs	r3, #1
 800fae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f000 8089 	beq.w	800fbfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10d      	bne.n	800fb0e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800faf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf6:	b672      	cpsid	i
 800faf8:	f383 8811 	msr	BASEPRI, r3
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	b662      	cpsie	i
 800fb06:	60fb      	str	r3, [r7, #12]
}
 800fb08:	bf00      	nop
 800fb0a:	bf00      	nop
 800fb0c:	e7fd      	b.n	800fb0a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d902      	bls.n	800fb1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	61fb      	str	r3, [r7, #28]
 800fb1c:	e002      	b.n	800fb24 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb28:	69fa      	ldr	r2, [r7, #28]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d066      	beq.n	800fbfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb32:	697a      	ldr	r2, [r7, #20]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d161      	bne.n	800fbfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fb38:	4b32      	ldr	r3, [pc, #200]	@ (800fc04 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	69ba      	ldr	r2, [r7, #24]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d10d      	bne.n	800fb5e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb46:	b672      	cpsid	i
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	b662      	cpsie	i
 800fb56:	60bb      	str	r3, [r7, #8]
}
 800fb58:	bf00      	nop
 800fb5a:	bf00      	nop
 800fb5c:	e7fd      	b.n	800fb5a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb62:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	69fa      	ldr	r2, [r7, #28]
 800fb68:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	db04      	blt.n	800fb7c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	f1c3 0207 	rsb	r2, r3, #7
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	6959      	ldr	r1, [r3, #20]
 800fb80:	693a      	ldr	r2, [r7, #16]
 800fb82:	4613      	mov	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	4413      	add	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	4a1f      	ldr	r2, [pc, #124]	@ (800fc08 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fb8c:	4413      	add	r3, r2
 800fb8e:	4299      	cmp	r1, r3
 800fb90:	d134      	bne.n	800fbfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb92:	69bb      	ldr	r3, [r7, #24]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe f8b4 	bl	800dd04 <uxListRemove>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d115      	bne.n	800fbce <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fba2:	69bb      	ldr	r3, [r7, #24]
 800fba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fba6:	4918      	ldr	r1, [pc, #96]	@ (800fc08 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fba8:	4613      	mov	r3, r2
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	4413      	add	r3, r2
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	440b      	add	r3, r1
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d10a      	bne.n	800fbce <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc2:	43da      	mvns	r2, r3
 800fbc4:	4b11      	ldr	r3, [pc, #68]	@ (800fc0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4013      	ands	r3, r2
 800fbca:	4a10      	ldr	r2, [pc, #64]	@ (800fc0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fbcc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	409a      	lsls	r2, r3
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fc0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	4a0b      	ldr	r2, [pc, #44]	@ (800fc0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800fbde:	6013      	str	r3, [r2, #0]
 800fbe0:	69bb      	ldr	r3, [r7, #24]
 800fbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	4413      	add	r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	4a06      	ldr	r2, [pc, #24]	@ (800fc08 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fbee:	441a      	add	r2, r3
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	3304      	adds	r3, #4
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	4610      	mov	r0, r2
 800fbf8:	f7fe f827 	bl	800dc4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fbfc:	bf00      	nop
 800fbfe:	3720      	adds	r7, #32
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	2000108c 	.word	0x2000108c
 800fc08:	20001090 	.word	0x20001090
 800fc0c:	20001194 	.word	0x20001194

0800fc10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fc14:	4b07      	ldr	r3, [pc, #28]	@ (800fc34 <pvTaskIncrementMutexHeldCount+0x24>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d004      	beq.n	800fc26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fc1c:	4b05      	ldr	r3, [pc, #20]	@ (800fc34 <pvTaskIncrementMutexHeldCount+0x24>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fc22:	3201      	adds	r2, #1
 800fc24:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800fc26:	4b03      	ldr	r3, [pc, #12]	@ (800fc34 <pvTaskIncrementMutexHeldCount+0x24>)
 800fc28:	681b      	ldr	r3, [r3, #0]
	}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	2000108c 	.word	0x2000108c

0800fc38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fc42:	4b29      	ldr	r3, [pc, #164]	@ (800fce8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc48:	4b28      	ldr	r3, [pc, #160]	@ (800fcec <prvAddCurrentTaskToDelayedList+0xb4>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fe f858 	bl	800dd04 <uxListRemove>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d10b      	bne.n	800fc72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fc5a:	4b24      	ldr	r3, [pc, #144]	@ (800fcec <prvAddCurrentTaskToDelayedList+0xb4>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc60:	2201      	movs	r2, #1
 800fc62:	fa02 f303 	lsl.w	r3, r2, r3
 800fc66:	43da      	mvns	r2, r3
 800fc68:	4b21      	ldr	r3, [pc, #132]	@ (800fcf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	4a20      	ldr	r2, [pc, #128]	@ (800fcf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fc70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc78:	d10a      	bne.n	800fc90 <prvAddCurrentTaskToDelayedList+0x58>
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d007      	beq.n	800fc90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fc80:	4b1a      	ldr	r3, [pc, #104]	@ (800fcec <prvAddCurrentTaskToDelayedList+0xb4>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	3304      	adds	r3, #4
 800fc86:	4619      	mov	r1, r3
 800fc88:	481a      	ldr	r0, [pc, #104]	@ (800fcf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fc8a:	f7fd ffde 	bl	800dc4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fc8e:	e026      	b.n	800fcde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4413      	add	r3, r2
 800fc96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fc98:	4b14      	ldr	r3, [pc, #80]	@ (800fcec <prvAddCurrentTaskToDelayedList+0xb4>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d209      	bcs.n	800fcbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fca8:	4b13      	ldr	r3, [pc, #76]	@ (800fcf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	4b0f      	ldr	r3, [pc, #60]	@ (800fcec <prvAddCurrentTaskToDelayedList+0xb4>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3304      	adds	r3, #4
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4610      	mov	r0, r2
 800fcb6:	f7fd ffec 	bl	800dc92 <vListInsert>
}
 800fcba:	e010      	b.n	800fcde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcbc:	4b0f      	ldr	r3, [pc, #60]	@ (800fcfc <prvAddCurrentTaskToDelayedList+0xc4>)
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	4b0a      	ldr	r3, [pc, #40]	@ (800fcec <prvAddCurrentTaskToDelayedList+0xb4>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	4610      	mov	r0, r2
 800fcca:	f7fd ffe2 	bl	800dc92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fcce:	4b0c      	ldr	r3, [pc, #48]	@ (800fd00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d202      	bcs.n	800fcde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fcd8:	4a09      	ldr	r2, [pc, #36]	@ (800fd00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	6013      	str	r3, [r2, #0]
}
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	20001190 	.word	0x20001190
 800fcec:	2000108c 	.word	0x2000108c
 800fcf0:	20001194 	.word	0x20001194
 800fcf4:	20001178 	.word	0x20001178
 800fcf8:	20001148 	.word	0x20001148
 800fcfc:	20001144 	.word	0x20001144
 800fd00:	200011ac 	.word	0x200011ac

0800fd04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	3b04      	subs	r3, #4
 800fd14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fd1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	3b04      	subs	r3, #4
 800fd22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	f023 0201 	bic.w	r2, r3, #1
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	3b04      	subs	r3, #4
 800fd32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fd34:	4a0c      	ldr	r2, [pc, #48]	@ (800fd68 <pxPortInitialiseStack+0x64>)
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	3b14      	subs	r3, #20
 800fd3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3b04      	subs	r3, #4
 800fd4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f06f 0202 	mvn.w	r2, #2
 800fd52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	3b20      	subs	r3, #32
 800fd58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3714      	adds	r7, #20
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr
 800fd68:	0800fd6d 	.word	0x0800fd6d

0800fd6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b085      	sub	sp, #20
 800fd70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd76:	4b15      	ldr	r3, [pc, #84]	@ (800fdcc <prvTaskExitError+0x60>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd7e:	d00d      	beq.n	800fd9c <prvTaskExitError+0x30>
	__asm volatile
 800fd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd84:	b672      	cpsid	i
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	b662      	cpsie	i
 800fd94:	60fb      	str	r3, [r7, #12]
}
 800fd96:	bf00      	nop
 800fd98:	bf00      	nop
 800fd9a:	e7fd      	b.n	800fd98 <prvTaskExitError+0x2c>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda0:	b672      	cpsid	i
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	b662      	cpsie	i
 800fdb0:	60bb      	str	r3, [r7, #8]
}
 800fdb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fdb4:	bf00      	nop
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d0fc      	beq.n	800fdb6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fdbc:	bf00      	nop
 800fdbe:	bf00      	nop
 800fdc0:	3714      	adds	r7, #20
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	20000010 	.word	0x20000010

0800fdd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fdd0:	4b07      	ldr	r3, [pc, #28]	@ (800fdf0 <pxCurrentTCBConst2>)
 800fdd2:	6819      	ldr	r1, [r3, #0]
 800fdd4:	6808      	ldr	r0, [r1, #0]
 800fdd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdda:	f380 8809 	msr	PSP, r0
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f04f 0000 	mov.w	r0, #0
 800fde6:	f380 8811 	msr	BASEPRI, r0
 800fdea:	4770      	bx	lr
 800fdec:	f3af 8000 	nop.w

0800fdf0 <pxCurrentTCBConst2>:
 800fdf0:	2000108c 	.word	0x2000108c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fdf4:	bf00      	nop
 800fdf6:	bf00      	nop

0800fdf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fdf8:	4808      	ldr	r0, [pc, #32]	@ (800fe1c <prvPortStartFirstTask+0x24>)
 800fdfa:	6800      	ldr	r0, [r0, #0]
 800fdfc:	6800      	ldr	r0, [r0, #0]
 800fdfe:	f380 8808 	msr	MSP, r0
 800fe02:	f04f 0000 	mov.w	r0, #0
 800fe06:	f380 8814 	msr	CONTROL, r0
 800fe0a:	b662      	cpsie	i
 800fe0c:	b661      	cpsie	f
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	df00      	svc	0
 800fe18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fe1a:	bf00      	nop
 800fe1c:	e000ed08 	.word	0xe000ed08

0800fe20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fe26:	4b37      	ldr	r3, [pc, #220]	@ (800ff04 <xPortStartScheduler+0xe4>)
 800fe28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	22ff      	movs	r2, #255	@ 0xff
 800fe36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe40:	78fb      	ldrb	r3, [r7, #3]
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fe48:	b2da      	uxtb	r2, r3
 800fe4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ff08 <xPortStartScheduler+0xe8>)
 800fe4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe4e:	4b2f      	ldr	r3, [pc, #188]	@ (800ff0c <xPortStartScheduler+0xec>)
 800fe50:	2207      	movs	r2, #7
 800fe52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe54:	e009      	b.n	800fe6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fe56:	4b2d      	ldr	r3, [pc, #180]	@ (800ff0c <xPortStartScheduler+0xec>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	4a2b      	ldr	r2, [pc, #172]	@ (800ff0c <xPortStartScheduler+0xec>)
 800fe5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe60:	78fb      	ldrb	r3, [r7, #3]
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe6a:	78fb      	ldrb	r3, [r7, #3]
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe72:	2b80      	cmp	r3, #128	@ 0x80
 800fe74:	d0ef      	beq.n	800fe56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe76:	4b25      	ldr	r3, [pc, #148]	@ (800ff0c <xPortStartScheduler+0xec>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f1c3 0307 	rsb	r3, r3, #7
 800fe7e:	2b04      	cmp	r3, #4
 800fe80:	d00d      	beq.n	800fe9e <xPortStartScheduler+0x7e>
	__asm volatile
 800fe82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe86:	b672      	cpsid	i
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	b662      	cpsie	i
 800fe96:	60bb      	str	r3, [r7, #8]
}
 800fe98:	bf00      	nop
 800fe9a:	bf00      	nop
 800fe9c:	e7fd      	b.n	800fe9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ff0c <xPortStartScheduler+0xec>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	021b      	lsls	r3, r3, #8
 800fea4:	4a19      	ldr	r2, [pc, #100]	@ (800ff0c <xPortStartScheduler+0xec>)
 800fea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fea8:	4b18      	ldr	r3, [pc, #96]	@ (800ff0c <xPortStartScheduler+0xec>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800feb0:	4a16      	ldr	r2, [pc, #88]	@ (800ff0c <xPortStartScheduler+0xec>)
 800feb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800febc:	4b14      	ldr	r3, [pc, #80]	@ (800ff10 <xPortStartScheduler+0xf0>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a13      	ldr	r2, [pc, #76]	@ (800ff10 <xPortStartScheduler+0xf0>)
 800fec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fec8:	4b11      	ldr	r3, [pc, #68]	@ (800ff10 <xPortStartScheduler+0xf0>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4a10      	ldr	r2, [pc, #64]	@ (800ff10 <xPortStartScheduler+0xf0>)
 800fece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fed4:	f000 f8dc 	bl	8010090 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fed8:	4b0e      	ldr	r3, [pc, #56]	@ (800ff14 <xPortStartScheduler+0xf4>)
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fede:	f000 f8fb 	bl	80100d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fee2:	4b0d      	ldr	r3, [pc, #52]	@ (800ff18 <xPortStartScheduler+0xf8>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a0c      	ldr	r2, [pc, #48]	@ (800ff18 <xPortStartScheduler+0xf8>)
 800fee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800feec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800feee:	f7ff ff83 	bl	800fdf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fef2:	f7ff fa67 	bl	800f3c4 <vTaskSwitchContext>
	prvTaskExitError();
 800fef6:	f7ff ff39 	bl	800fd6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	e000e400 	.word	0xe000e400
 800ff08:	200011b8 	.word	0x200011b8
 800ff0c:	200011bc 	.word	0x200011bc
 800ff10:	e000ed20 	.word	0xe000ed20
 800ff14:	20000010 	.word	0x20000010
 800ff18:	e000ef34 	.word	0xe000ef34

0800ff1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
	__asm volatile
 800ff22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff26:	b672      	cpsid	i
 800ff28:	f383 8811 	msr	BASEPRI, r3
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	b662      	cpsie	i
 800ff36:	607b      	str	r3, [r7, #4]
}
 800ff38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff3a:	4b11      	ldr	r3, [pc, #68]	@ (800ff80 <vPortEnterCritical+0x64>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	3301      	adds	r3, #1
 800ff40:	4a0f      	ldr	r2, [pc, #60]	@ (800ff80 <vPortEnterCritical+0x64>)
 800ff42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff44:	4b0e      	ldr	r3, [pc, #56]	@ (800ff80 <vPortEnterCritical+0x64>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d112      	bne.n	800ff72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff84 <vPortEnterCritical+0x68>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00d      	beq.n	800ff72 <vPortEnterCritical+0x56>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff5a:	b672      	cpsid	i
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	b662      	cpsie	i
 800ff6a:	603b      	str	r3, [r7, #0]
}
 800ff6c:	bf00      	nop
 800ff6e:	bf00      	nop
 800ff70:	e7fd      	b.n	800ff6e <vPortEnterCritical+0x52>
	}
}
 800ff72:	bf00      	nop
 800ff74:	370c      	adds	r7, #12
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr
 800ff7e:	bf00      	nop
 800ff80:	20000010 	.word	0x20000010
 800ff84:	e000ed04 	.word	0xe000ed04

0800ff88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff8e:	4b13      	ldr	r3, [pc, #76]	@ (800ffdc <vPortExitCritical+0x54>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d10d      	bne.n	800ffb2 <vPortExitCritical+0x2a>
	__asm volatile
 800ff96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff9a:	b672      	cpsid	i
 800ff9c:	f383 8811 	msr	BASEPRI, r3
 800ffa0:	f3bf 8f6f 	isb	sy
 800ffa4:	f3bf 8f4f 	dsb	sy
 800ffa8:	b662      	cpsie	i
 800ffaa:	607b      	str	r3, [r7, #4]
}
 800ffac:	bf00      	nop
 800ffae:	bf00      	nop
 800ffb0:	e7fd      	b.n	800ffae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ffb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ffdc <vPortExitCritical+0x54>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	4a08      	ldr	r2, [pc, #32]	@ (800ffdc <vPortExitCritical+0x54>)
 800ffba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ffbc:	4b07      	ldr	r3, [pc, #28]	@ (800ffdc <vPortExitCritical+0x54>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d105      	bne.n	800ffd0 <vPortExitCritical+0x48>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	f383 8811 	msr	BASEPRI, r3
}
 800ffce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	20000010 	.word	0x20000010

0800ffe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffe0:	f3ef 8009 	mrs	r0, PSP
 800ffe4:	f3bf 8f6f 	isb	sy
 800ffe8:	4b15      	ldr	r3, [pc, #84]	@ (8010040 <pxCurrentTCBConst>)
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	f01e 0f10 	tst.w	lr, #16
 800fff0:	bf08      	it	eq
 800fff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffa:	6010      	str	r0, [r2, #0]
 800fffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010004:	b672      	cpsid	i
 8010006:	f380 8811 	msr	BASEPRI, r0
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	f3bf 8f6f 	isb	sy
 8010012:	b662      	cpsie	i
 8010014:	f7ff f9d6 	bl	800f3c4 <vTaskSwitchContext>
 8010018:	f04f 0000 	mov.w	r0, #0
 801001c:	f380 8811 	msr	BASEPRI, r0
 8010020:	bc09      	pop	{r0, r3}
 8010022:	6819      	ldr	r1, [r3, #0]
 8010024:	6808      	ldr	r0, [r1, #0]
 8010026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002a:	f01e 0f10 	tst.w	lr, #16
 801002e:	bf08      	it	eq
 8010030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010034:	f380 8809 	msr	PSP, r0
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop

08010040 <pxCurrentTCBConst>:
 8010040:	2000108c 	.word	0x2000108c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010044:	bf00      	nop
 8010046:	bf00      	nop

08010048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010052:	b672      	cpsid	i
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	b662      	cpsie	i
 8010062:	607b      	str	r3, [r7, #4]
}
 8010064:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010066:	f7ff f8f1 	bl	800f24c <xTaskIncrementTick>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d003      	beq.n	8010078 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010070:	4b06      	ldr	r3, [pc, #24]	@ (801008c <SysTick_Handler+0x44>)
 8010072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010076:	601a      	str	r2, [r3, #0]
 8010078:	2300      	movs	r3, #0
 801007a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	f383 8811 	msr	BASEPRI, r3
}
 8010082:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	e000ed04 	.word	0xe000ed04

08010090 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010090:	b480      	push	{r7}
 8010092:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010094:	4b0b      	ldr	r3, [pc, #44]	@ (80100c4 <vPortSetupTimerInterrupt+0x34>)
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801009a:	4b0b      	ldr	r3, [pc, #44]	@ (80100c8 <vPortSetupTimerInterrupt+0x38>)
 801009c:	2200      	movs	r2, #0
 801009e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80100a0:	4b0a      	ldr	r3, [pc, #40]	@ (80100cc <vPortSetupTimerInterrupt+0x3c>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a0a      	ldr	r2, [pc, #40]	@ (80100d0 <vPortSetupTimerInterrupt+0x40>)
 80100a6:	fba2 2303 	umull	r2, r3, r2, r3
 80100aa:	099b      	lsrs	r3, r3, #6
 80100ac:	4a09      	ldr	r2, [pc, #36]	@ (80100d4 <vPortSetupTimerInterrupt+0x44>)
 80100ae:	3b01      	subs	r3, #1
 80100b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80100b2:	4b04      	ldr	r3, [pc, #16]	@ (80100c4 <vPortSetupTimerInterrupt+0x34>)
 80100b4:	2207      	movs	r2, #7
 80100b6:	601a      	str	r2, [r3, #0]
}
 80100b8:	bf00      	nop
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop
 80100c4:	e000e010 	.word	0xe000e010
 80100c8:	e000e018 	.word	0xe000e018
 80100cc:	20000004 	.word	0x20000004
 80100d0:	10624dd3 	.word	0x10624dd3
 80100d4:	e000e014 	.word	0xe000e014

080100d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80100d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80100e8 <vPortEnableVFP+0x10>
 80100dc:	6801      	ldr	r1, [r0, #0]
 80100de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80100e2:	6001      	str	r1, [r0, #0]
 80100e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100e6:	bf00      	nop
 80100e8:	e000ed88 	.word	0xe000ed88

080100ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100f2:	f3ef 8305 	mrs	r3, IPSR
 80100f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2b0f      	cmp	r3, #15
 80100fc:	d917      	bls.n	801012e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100fe:	4a1a      	ldr	r2, [pc, #104]	@ (8010168 <vPortValidateInterruptPriority+0x7c>)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	4413      	add	r3, r2
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010108:	4b18      	ldr	r3, [pc, #96]	@ (801016c <vPortValidateInterruptPriority+0x80>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	7afa      	ldrb	r2, [r7, #11]
 801010e:	429a      	cmp	r2, r3
 8010110:	d20d      	bcs.n	801012e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010116:	b672      	cpsid	i
 8010118:	f383 8811 	msr	BASEPRI, r3
 801011c:	f3bf 8f6f 	isb	sy
 8010120:	f3bf 8f4f 	dsb	sy
 8010124:	b662      	cpsie	i
 8010126:	607b      	str	r3, [r7, #4]
}
 8010128:	bf00      	nop
 801012a:	bf00      	nop
 801012c:	e7fd      	b.n	801012a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801012e:	4b10      	ldr	r3, [pc, #64]	@ (8010170 <vPortValidateInterruptPriority+0x84>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010136:	4b0f      	ldr	r3, [pc, #60]	@ (8010174 <vPortValidateInterruptPriority+0x88>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	429a      	cmp	r2, r3
 801013c:	d90d      	bls.n	801015a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010142:	b672      	cpsid	i
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	b662      	cpsie	i
 8010152:	603b      	str	r3, [r7, #0]
}
 8010154:	bf00      	nop
 8010156:	bf00      	nop
 8010158:	e7fd      	b.n	8010156 <vPortValidateInterruptPriority+0x6a>
	}
 801015a:	bf00      	nop
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	e000e3f0 	.word	0xe000e3f0
 801016c:	200011b8 	.word	0x200011b8
 8010170:	e000ed0c 	.word	0xe000ed0c
 8010174:	200011bc 	.word	0x200011bc

08010178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b08a      	sub	sp, #40	@ 0x28
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010180:	2300      	movs	r3, #0
 8010182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010184:	f7fe ff92 	bl	800f0ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010188:	4b5d      	ldr	r3, [pc, #372]	@ (8010300 <pvPortMalloc+0x188>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d101      	bne.n	8010194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010190:	f000 f920 	bl	80103d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010194:	4b5b      	ldr	r3, [pc, #364]	@ (8010304 <pvPortMalloc+0x18c>)
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	4013      	ands	r3, r2
 801019c:	2b00      	cmp	r3, #0
 801019e:	f040 8094 	bne.w	80102ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d020      	beq.n	80101ea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80101a8:	2208      	movs	r2, #8
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4413      	add	r3, r2
 80101ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f003 0307 	and.w	r3, r3, #7
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d017      	beq.n	80101ea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f023 0307 	bic.w	r3, r3, #7
 80101c0:	3308      	adds	r3, #8
 80101c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00d      	beq.n	80101ea <pvPortMalloc+0x72>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d2:	b672      	cpsid	i
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	b662      	cpsie	i
 80101e2:	617b      	str	r3, [r7, #20]
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop
 80101e8:	e7fd      	b.n	80101e6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d06c      	beq.n	80102ca <pvPortMalloc+0x152>
 80101f0:	4b45      	ldr	r3, [pc, #276]	@ (8010308 <pvPortMalloc+0x190>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d867      	bhi.n	80102ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101fa:	4b44      	ldr	r3, [pc, #272]	@ (801030c <pvPortMalloc+0x194>)
 80101fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101fe:	4b43      	ldr	r3, [pc, #268]	@ (801030c <pvPortMalloc+0x194>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010204:	e004      	b.n	8010210 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801020a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	429a      	cmp	r2, r3
 8010218:	d903      	bls.n	8010222 <pvPortMalloc+0xaa>
 801021a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1f1      	bne.n	8010206 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010222:	4b37      	ldr	r3, [pc, #220]	@ (8010300 <pvPortMalloc+0x188>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010228:	429a      	cmp	r2, r3
 801022a:	d04e      	beq.n	80102ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801022c:	6a3b      	ldr	r3, [r7, #32]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2208      	movs	r2, #8
 8010232:	4413      	add	r3, r2
 8010234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801023e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	1ad2      	subs	r2, r2, r3
 8010246:	2308      	movs	r3, #8
 8010248:	005b      	lsls	r3, r3, #1
 801024a:	429a      	cmp	r2, r3
 801024c:	d922      	bls.n	8010294 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801024e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4413      	add	r3, r2
 8010254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	f003 0307 	and.w	r3, r3, #7
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00d      	beq.n	801027c <pvPortMalloc+0x104>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010264:	b672      	cpsid	i
 8010266:	f383 8811 	msr	BASEPRI, r3
 801026a:	f3bf 8f6f 	isb	sy
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	b662      	cpsie	i
 8010274:	613b      	str	r3, [r7, #16]
}
 8010276:	bf00      	nop
 8010278:	bf00      	nop
 801027a:	e7fd      	b.n	8010278 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801027c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027e:	685a      	ldr	r2, [r3, #4]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	1ad2      	subs	r2, r2, r3
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801028e:	69b8      	ldr	r0, [r7, #24]
 8010290:	f000 f902 	bl	8010498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010294:	4b1c      	ldr	r3, [pc, #112]	@ (8010308 <pvPortMalloc+0x190>)
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	4a1a      	ldr	r2, [pc, #104]	@ (8010308 <pvPortMalloc+0x190>)
 80102a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80102a2:	4b19      	ldr	r3, [pc, #100]	@ (8010308 <pvPortMalloc+0x190>)
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	4b1a      	ldr	r3, [pc, #104]	@ (8010310 <pvPortMalloc+0x198>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d203      	bcs.n	80102b6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80102ae:	4b16      	ldr	r3, [pc, #88]	@ (8010308 <pvPortMalloc+0x190>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4a17      	ldr	r2, [pc, #92]	@ (8010310 <pvPortMalloc+0x198>)
 80102b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80102b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b8:	685a      	ldr	r2, [r3, #4]
 80102ba:	4b12      	ldr	r3, [pc, #72]	@ (8010304 <pvPortMalloc+0x18c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	431a      	orrs	r2, r3
 80102c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80102c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c6:	2200      	movs	r2, #0
 80102c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80102ca:	f7fe fefd 	bl	800f0c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	f003 0307 	and.w	r3, r3, #7
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00d      	beq.n	80102f4 <pvPortMalloc+0x17c>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102dc:	b672      	cpsid	i
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	b662      	cpsie	i
 80102ec:	60fb      	str	r3, [r7, #12]
}
 80102ee:	bf00      	nop
 80102f0:	bf00      	nop
 80102f2:	e7fd      	b.n	80102f0 <pvPortMalloc+0x178>
	return pvReturn;
 80102f4:	69fb      	ldr	r3, [r7, #28]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3728      	adds	r7, #40	@ 0x28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	200091c8 	.word	0x200091c8
 8010304:	200091d4 	.word	0x200091d4
 8010308:	200091cc 	.word	0x200091cc
 801030c:	200091c0 	.word	0x200091c0
 8010310:	200091d0 	.word	0x200091d0

08010314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b086      	sub	sp, #24
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d04e      	beq.n	80103c4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010326:	2308      	movs	r3, #8
 8010328:	425b      	negs	r3, r3
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	4413      	add	r3, r2
 801032e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	685a      	ldr	r2, [r3, #4]
 8010338:	4b24      	ldr	r3, [pc, #144]	@ (80103cc <vPortFree+0xb8>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4013      	ands	r3, r2
 801033e:	2b00      	cmp	r3, #0
 8010340:	d10d      	bne.n	801035e <vPortFree+0x4a>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010346:	b672      	cpsid	i
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	b662      	cpsie	i
 8010356:	60fb      	str	r3, [r7, #12]
}
 8010358:	bf00      	nop
 801035a:	bf00      	nop
 801035c:	e7fd      	b.n	801035a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00d      	beq.n	8010382 <vPortFree+0x6e>
	__asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801036a:	b672      	cpsid	i
 801036c:	f383 8811 	msr	BASEPRI, r3
 8010370:	f3bf 8f6f 	isb	sy
 8010374:	f3bf 8f4f 	dsb	sy
 8010378:	b662      	cpsie	i
 801037a:	60bb      	str	r3, [r7, #8]
}
 801037c:	bf00      	nop
 801037e:	bf00      	nop
 8010380:	e7fd      	b.n	801037e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	685a      	ldr	r2, [r3, #4]
 8010386:	4b11      	ldr	r3, [pc, #68]	@ (80103cc <vPortFree+0xb8>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4013      	ands	r3, r2
 801038c:	2b00      	cmp	r3, #0
 801038e:	d019      	beq.n	80103c4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d115      	bne.n	80103c4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	685a      	ldr	r2, [r3, #4]
 801039c:	4b0b      	ldr	r3, [pc, #44]	@ (80103cc <vPortFree+0xb8>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	43db      	mvns	r3, r3
 80103a2:	401a      	ands	r2, r3
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80103a8:	f7fe fe80 	bl	800f0ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	685a      	ldr	r2, [r3, #4]
 80103b0:	4b07      	ldr	r3, [pc, #28]	@ (80103d0 <vPortFree+0xbc>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4413      	add	r3, r2
 80103b6:	4a06      	ldr	r2, [pc, #24]	@ (80103d0 <vPortFree+0xbc>)
 80103b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80103ba:	6938      	ldr	r0, [r7, #16]
 80103bc:	f000 f86c 	bl	8010498 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80103c0:	f7fe fe82 	bl	800f0c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80103c4:	bf00      	nop
 80103c6:	3718      	adds	r7, #24
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	200091d4 	.word	0x200091d4
 80103d0:	200091cc 	.word	0x200091cc

080103d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80103da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80103de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103e0:	4b27      	ldr	r3, [pc, #156]	@ (8010480 <prvHeapInit+0xac>)
 80103e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f003 0307 	and.w	r3, r3, #7
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00c      	beq.n	8010408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	3307      	adds	r3, #7
 80103f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f023 0307 	bic.w	r3, r3, #7
 80103fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103fc:	68ba      	ldr	r2, [r7, #8]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	1ad3      	subs	r3, r2, r3
 8010402:	4a1f      	ldr	r2, [pc, #124]	@ (8010480 <prvHeapInit+0xac>)
 8010404:	4413      	add	r3, r2
 8010406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801040c:	4a1d      	ldr	r2, [pc, #116]	@ (8010484 <prvHeapInit+0xb0>)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010412:	4b1c      	ldr	r3, [pc, #112]	@ (8010484 <prvHeapInit+0xb0>)
 8010414:	2200      	movs	r2, #0
 8010416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	68ba      	ldr	r2, [r7, #8]
 801041c:	4413      	add	r3, r2
 801041e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010420:	2208      	movs	r2, #8
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	1a9b      	subs	r3, r3, r2
 8010426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f023 0307 	bic.w	r3, r3, #7
 801042e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4a15      	ldr	r2, [pc, #84]	@ (8010488 <prvHeapInit+0xb4>)
 8010434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010436:	4b14      	ldr	r3, [pc, #80]	@ (8010488 <prvHeapInit+0xb4>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2200      	movs	r2, #0
 801043c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801043e:	4b12      	ldr	r3, [pc, #72]	@ (8010488 <prvHeapInit+0xb4>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2200      	movs	r2, #0
 8010444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	1ad2      	subs	r2, r2, r3
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010454:	4b0c      	ldr	r3, [pc, #48]	@ (8010488 <prvHeapInit+0xb4>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	4a0a      	ldr	r2, [pc, #40]	@ (801048c <prvHeapInit+0xb8>)
 8010462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	4a09      	ldr	r2, [pc, #36]	@ (8010490 <prvHeapInit+0xbc>)
 801046a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801046c:	4b09      	ldr	r3, [pc, #36]	@ (8010494 <prvHeapInit+0xc0>)
 801046e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010472:	601a      	str	r2, [r3, #0]
}
 8010474:	bf00      	nop
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	200011c0 	.word	0x200011c0
 8010484:	200091c0 	.word	0x200091c0
 8010488:	200091c8 	.word	0x200091c8
 801048c:	200091d0 	.word	0x200091d0
 8010490:	200091cc 	.word	0x200091cc
 8010494:	200091d4 	.word	0x200091d4

08010498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80104a0:	4b28      	ldr	r3, [pc, #160]	@ (8010544 <prvInsertBlockIntoFreeList+0xac>)
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	e002      	b.n	80104ac <prvInsertBlockIntoFreeList+0x14>
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	60fb      	str	r3, [r7, #12]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d8f7      	bhi.n	80104a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	68ba      	ldr	r2, [r7, #8]
 80104c0:	4413      	add	r3, r2
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d108      	bne.n	80104da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	685a      	ldr	r2, [r3, #4]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	441a      	add	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	68ba      	ldr	r2, [r7, #8]
 80104e4:	441a      	add	r2, r3
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d118      	bne.n	8010520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	4b15      	ldr	r3, [pc, #84]	@ (8010548 <prvInsertBlockIntoFreeList+0xb0>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d00d      	beq.n	8010516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	685a      	ldr	r2, [r3, #4]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	441a      	add	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]
 8010514:	e008      	b.n	8010528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010516:	4b0c      	ldr	r3, [pc, #48]	@ (8010548 <prvInsertBlockIntoFreeList+0xb0>)
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	e003      	b.n	8010528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	429a      	cmp	r2, r3
 801052e:	d002      	beq.n	8010536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	687a      	ldr	r2, [r7, #4]
 8010534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010536:	bf00      	nop
 8010538:	3714      	adds	r7, #20
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	200091c0 	.word	0x200091c0
 8010548:	200091c8 	.word	0x200091c8

0801054c <atof>:
 801054c:	2100      	movs	r1, #0
 801054e:	f000 be07 	b.w	8011160 <strtod>

08010552 <atoi>:
 8010552:	220a      	movs	r2, #10
 8010554:	2100      	movs	r1, #0
 8010556:	f000 beed 	b.w	8011334 <strtol>

0801055a <sulp>:
 801055a:	b570      	push	{r4, r5, r6, lr}
 801055c:	4604      	mov	r4, r0
 801055e:	460d      	mov	r5, r1
 8010560:	ec45 4b10 	vmov	d0, r4, r5
 8010564:	4616      	mov	r6, r2
 8010566:	f003 fd2b 	bl	8013fc0 <__ulp>
 801056a:	ec51 0b10 	vmov	r0, r1, d0
 801056e:	b17e      	cbz	r6, 8010590 <sulp+0x36>
 8010570:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010574:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010578:	2b00      	cmp	r3, #0
 801057a:	dd09      	ble.n	8010590 <sulp+0x36>
 801057c:	051b      	lsls	r3, r3, #20
 801057e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010582:	2400      	movs	r4, #0
 8010584:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010588:	4622      	mov	r2, r4
 801058a:	462b      	mov	r3, r5
 801058c:	f7f0 f854 	bl	8000638 <__aeabi_dmul>
 8010590:	ec41 0b10 	vmov	d0, r0, r1
 8010594:	bd70      	pop	{r4, r5, r6, pc}
	...

08010598 <_strtod_l>:
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	b09f      	sub	sp, #124	@ 0x7c
 801059e:	460c      	mov	r4, r1
 80105a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80105a2:	2200      	movs	r2, #0
 80105a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80105a6:	9005      	str	r0, [sp, #20]
 80105a8:	f04f 0a00 	mov.w	sl, #0
 80105ac:	f04f 0b00 	mov.w	fp, #0
 80105b0:	460a      	mov	r2, r1
 80105b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80105b4:	7811      	ldrb	r1, [r2, #0]
 80105b6:	292b      	cmp	r1, #43	@ 0x2b
 80105b8:	d04a      	beq.n	8010650 <_strtod_l+0xb8>
 80105ba:	d838      	bhi.n	801062e <_strtod_l+0x96>
 80105bc:	290d      	cmp	r1, #13
 80105be:	d832      	bhi.n	8010626 <_strtod_l+0x8e>
 80105c0:	2908      	cmp	r1, #8
 80105c2:	d832      	bhi.n	801062a <_strtod_l+0x92>
 80105c4:	2900      	cmp	r1, #0
 80105c6:	d03b      	beq.n	8010640 <_strtod_l+0xa8>
 80105c8:	2200      	movs	r2, #0
 80105ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80105cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80105ce:	782a      	ldrb	r2, [r5, #0]
 80105d0:	2a30      	cmp	r2, #48	@ 0x30
 80105d2:	f040 80b2 	bne.w	801073a <_strtod_l+0x1a2>
 80105d6:	786a      	ldrb	r2, [r5, #1]
 80105d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80105dc:	2a58      	cmp	r2, #88	@ 0x58
 80105de:	d16e      	bne.n	80106be <_strtod_l+0x126>
 80105e0:	9302      	str	r3, [sp, #8]
 80105e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105e4:	9301      	str	r3, [sp, #4]
 80105e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	4a8f      	ldr	r2, [pc, #572]	@ (8010828 <_strtod_l+0x290>)
 80105ec:	9805      	ldr	r0, [sp, #20]
 80105ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80105f0:	a919      	add	r1, sp, #100	@ 0x64
 80105f2:	f002 fddf 	bl	80131b4 <__gethex>
 80105f6:	f010 060f 	ands.w	r6, r0, #15
 80105fa:	4604      	mov	r4, r0
 80105fc:	d005      	beq.n	801060a <_strtod_l+0x72>
 80105fe:	2e06      	cmp	r6, #6
 8010600:	d128      	bne.n	8010654 <_strtod_l+0xbc>
 8010602:	3501      	adds	r5, #1
 8010604:	2300      	movs	r3, #0
 8010606:	9519      	str	r5, [sp, #100]	@ 0x64
 8010608:	930e      	str	r3, [sp, #56]	@ 0x38
 801060a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801060c:	2b00      	cmp	r3, #0
 801060e:	f040 858e 	bne.w	801112e <_strtod_l+0xb96>
 8010612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010614:	b1cb      	cbz	r3, 801064a <_strtod_l+0xb2>
 8010616:	4652      	mov	r2, sl
 8010618:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801061c:	ec43 2b10 	vmov	d0, r2, r3
 8010620:	b01f      	add	sp, #124	@ 0x7c
 8010622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010626:	2920      	cmp	r1, #32
 8010628:	d1ce      	bne.n	80105c8 <_strtod_l+0x30>
 801062a:	3201      	adds	r2, #1
 801062c:	e7c1      	b.n	80105b2 <_strtod_l+0x1a>
 801062e:	292d      	cmp	r1, #45	@ 0x2d
 8010630:	d1ca      	bne.n	80105c8 <_strtod_l+0x30>
 8010632:	2101      	movs	r1, #1
 8010634:	910e      	str	r1, [sp, #56]	@ 0x38
 8010636:	1c51      	adds	r1, r2, #1
 8010638:	9119      	str	r1, [sp, #100]	@ 0x64
 801063a:	7852      	ldrb	r2, [r2, #1]
 801063c:	2a00      	cmp	r2, #0
 801063e:	d1c5      	bne.n	80105cc <_strtod_l+0x34>
 8010640:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010642:	9419      	str	r4, [sp, #100]	@ 0x64
 8010644:	2b00      	cmp	r3, #0
 8010646:	f040 8570 	bne.w	801112a <_strtod_l+0xb92>
 801064a:	4652      	mov	r2, sl
 801064c:	465b      	mov	r3, fp
 801064e:	e7e5      	b.n	801061c <_strtod_l+0x84>
 8010650:	2100      	movs	r1, #0
 8010652:	e7ef      	b.n	8010634 <_strtod_l+0x9c>
 8010654:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010656:	b13a      	cbz	r2, 8010668 <_strtod_l+0xd0>
 8010658:	2135      	movs	r1, #53	@ 0x35
 801065a:	a81c      	add	r0, sp, #112	@ 0x70
 801065c:	f003 fdaa 	bl	80141b4 <__copybits>
 8010660:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010662:	9805      	ldr	r0, [sp, #20]
 8010664:	f003 f980 	bl	8013968 <_Bfree>
 8010668:	3e01      	subs	r6, #1
 801066a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801066c:	2e04      	cmp	r6, #4
 801066e:	d806      	bhi.n	801067e <_strtod_l+0xe6>
 8010670:	e8df f006 	tbb	[pc, r6]
 8010674:	201d0314 	.word	0x201d0314
 8010678:	14          	.byte	0x14
 8010679:	00          	.byte	0x00
 801067a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801067e:	05e1      	lsls	r1, r4, #23
 8010680:	bf48      	it	mi
 8010682:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801068a:	0d1b      	lsrs	r3, r3, #20
 801068c:	051b      	lsls	r3, r3, #20
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1bb      	bne.n	801060a <_strtod_l+0x72>
 8010692:	f001 fe1b 	bl	80122cc <__errno>
 8010696:	2322      	movs	r3, #34	@ 0x22
 8010698:	6003      	str	r3, [r0, #0]
 801069a:	e7b6      	b.n	801060a <_strtod_l+0x72>
 801069c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80106a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80106a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80106a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80106ac:	e7e7      	b.n	801067e <_strtod_l+0xe6>
 80106ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010830 <_strtod_l+0x298>
 80106b2:	e7e4      	b.n	801067e <_strtod_l+0xe6>
 80106b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80106b8:	f04f 3aff 	mov.w	sl, #4294967295
 80106bc:	e7df      	b.n	801067e <_strtod_l+0xe6>
 80106be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106c0:	1c5a      	adds	r2, r3, #1
 80106c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80106c4:	785b      	ldrb	r3, [r3, #1]
 80106c6:	2b30      	cmp	r3, #48	@ 0x30
 80106c8:	d0f9      	beq.n	80106be <_strtod_l+0x126>
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d09d      	beq.n	801060a <_strtod_l+0x72>
 80106ce:	2301      	movs	r3, #1
 80106d0:	2700      	movs	r7, #0
 80106d2:	9308      	str	r3, [sp, #32]
 80106d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80106d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80106da:	46b9      	mov	r9, r7
 80106dc:	220a      	movs	r2, #10
 80106de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80106e0:	7805      	ldrb	r5, [r0, #0]
 80106e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80106e6:	b2d9      	uxtb	r1, r3
 80106e8:	2909      	cmp	r1, #9
 80106ea:	d928      	bls.n	801073e <_strtod_l+0x1a6>
 80106ec:	494f      	ldr	r1, [pc, #316]	@ (801082c <_strtod_l+0x294>)
 80106ee:	2201      	movs	r2, #1
 80106f0:	f001 fcd5 	bl	801209e <strncmp>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d032      	beq.n	801075e <_strtod_l+0x1c6>
 80106f8:	2000      	movs	r0, #0
 80106fa:	462a      	mov	r2, r5
 80106fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80106fe:	464d      	mov	r5, r9
 8010700:	4603      	mov	r3, r0
 8010702:	2a65      	cmp	r2, #101	@ 0x65
 8010704:	d001      	beq.n	801070a <_strtod_l+0x172>
 8010706:	2a45      	cmp	r2, #69	@ 0x45
 8010708:	d114      	bne.n	8010734 <_strtod_l+0x19c>
 801070a:	b91d      	cbnz	r5, 8010714 <_strtod_l+0x17c>
 801070c:	9a08      	ldr	r2, [sp, #32]
 801070e:	4302      	orrs	r2, r0
 8010710:	d096      	beq.n	8010640 <_strtod_l+0xa8>
 8010712:	2500      	movs	r5, #0
 8010714:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010716:	1c62      	adds	r2, r4, #1
 8010718:	9219      	str	r2, [sp, #100]	@ 0x64
 801071a:	7862      	ldrb	r2, [r4, #1]
 801071c:	2a2b      	cmp	r2, #43	@ 0x2b
 801071e:	d07a      	beq.n	8010816 <_strtod_l+0x27e>
 8010720:	2a2d      	cmp	r2, #45	@ 0x2d
 8010722:	d07e      	beq.n	8010822 <_strtod_l+0x28a>
 8010724:	f04f 0c00 	mov.w	ip, #0
 8010728:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801072c:	2909      	cmp	r1, #9
 801072e:	f240 8085 	bls.w	801083c <_strtod_l+0x2a4>
 8010732:	9419      	str	r4, [sp, #100]	@ 0x64
 8010734:	f04f 0800 	mov.w	r8, #0
 8010738:	e0a5      	b.n	8010886 <_strtod_l+0x2ee>
 801073a:	2300      	movs	r3, #0
 801073c:	e7c8      	b.n	80106d0 <_strtod_l+0x138>
 801073e:	f1b9 0f08 	cmp.w	r9, #8
 8010742:	bfd8      	it	le
 8010744:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010746:	f100 0001 	add.w	r0, r0, #1
 801074a:	bfda      	itte	le
 801074c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010750:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010752:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010756:	f109 0901 	add.w	r9, r9, #1
 801075a:	9019      	str	r0, [sp, #100]	@ 0x64
 801075c:	e7bf      	b.n	80106de <_strtod_l+0x146>
 801075e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010760:	1c5a      	adds	r2, r3, #1
 8010762:	9219      	str	r2, [sp, #100]	@ 0x64
 8010764:	785a      	ldrb	r2, [r3, #1]
 8010766:	f1b9 0f00 	cmp.w	r9, #0
 801076a:	d03b      	beq.n	80107e4 <_strtod_l+0x24c>
 801076c:	900a      	str	r0, [sp, #40]	@ 0x28
 801076e:	464d      	mov	r5, r9
 8010770:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010774:	2b09      	cmp	r3, #9
 8010776:	d912      	bls.n	801079e <_strtod_l+0x206>
 8010778:	2301      	movs	r3, #1
 801077a:	e7c2      	b.n	8010702 <_strtod_l+0x16a>
 801077c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801077e:	1c5a      	adds	r2, r3, #1
 8010780:	9219      	str	r2, [sp, #100]	@ 0x64
 8010782:	785a      	ldrb	r2, [r3, #1]
 8010784:	3001      	adds	r0, #1
 8010786:	2a30      	cmp	r2, #48	@ 0x30
 8010788:	d0f8      	beq.n	801077c <_strtod_l+0x1e4>
 801078a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801078e:	2b08      	cmp	r3, #8
 8010790:	f200 84d2 	bhi.w	8011138 <_strtod_l+0xba0>
 8010794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010796:	900a      	str	r0, [sp, #40]	@ 0x28
 8010798:	2000      	movs	r0, #0
 801079a:	930c      	str	r3, [sp, #48]	@ 0x30
 801079c:	4605      	mov	r5, r0
 801079e:	3a30      	subs	r2, #48	@ 0x30
 80107a0:	f100 0301 	add.w	r3, r0, #1
 80107a4:	d018      	beq.n	80107d8 <_strtod_l+0x240>
 80107a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107a8:	4419      	add	r1, r3
 80107aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80107ac:	462e      	mov	r6, r5
 80107ae:	f04f 0e0a 	mov.w	lr, #10
 80107b2:	1c71      	adds	r1, r6, #1
 80107b4:	eba1 0c05 	sub.w	ip, r1, r5
 80107b8:	4563      	cmp	r3, ip
 80107ba:	dc15      	bgt.n	80107e8 <_strtod_l+0x250>
 80107bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80107c0:	182b      	adds	r3, r5, r0
 80107c2:	2b08      	cmp	r3, #8
 80107c4:	f105 0501 	add.w	r5, r5, #1
 80107c8:	4405      	add	r5, r0
 80107ca:	dc1a      	bgt.n	8010802 <_strtod_l+0x26a>
 80107cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80107ce:	230a      	movs	r3, #10
 80107d0:	fb03 2301 	mla	r3, r3, r1, r2
 80107d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107d6:	2300      	movs	r3, #0
 80107d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107da:	1c51      	adds	r1, r2, #1
 80107dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80107de:	7852      	ldrb	r2, [r2, #1]
 80107e0:	4618      	mov	r0, r3
 80107e2:	e7c5      	b.n	8010770 <_strtod_l+0x1d8>
 80107e4:	4648      	mov	r0, r9
 80107e6:	e7ce      	b.n	8010786 <_strtod_l+0x1ee>
 80107e8:	2e08      	cmp	r6, #8
 80107ea:	dc05      	bgt.n	80107f8 <_strtod_l+0x260>
 80107ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80107ee:	fb0e f606 	mul.w	r6, lr, r6
 80107f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80107f4:	460e      	mov	r6, r1
 80107f6:	e7dc      	b.n	80107b2 <_strtod_l+0x21a>
 80107f8:	2910      	cmp	r1, #16
 80107fa:	bfd8      	it	le
 80107fc:	fb0e f707 	mulle.w	r7, lr, r7
 8010800:	e7f8      	b.n	80107f4 <_strtod_l+0x25c>
 8010802:	2b0f      	cmp	r3, #15
 8010804:	bfdc      	itt	le
 8010806:	230a      	movle	r3, #10
 8010808:	fb03 2707 	mlale	r7, r3, r7, r2
 801080c:	e7e3      	b.n	80107d6 <_strtod_l+0x23e>
 801080e:	2300      	movs	r3, #0
 8010810:	930a      	str	r3, [sp, #40]	@ 0x28
 8010812:	2301      	movs	r3, #1
 8010814:	e77a      	b.n	801070c <_strtod_l+0x174>
 8010816:	f04f 0c00 	mov.w	ip, #0
 801081a:	1ca2      	adds	r2, r4, #2
 801081c:	9219      	str	r2, [sp, #100]	@ 0x64
 801081e:	78a2      	ldrb	r2, [r4, #2]
 8010820:	e782      	b.n	8010728 <_strtod_l+0x190>
 8010822:	f04f 0c01 	mov.w	ip, #1
 8010826:	e7f8      	b.n	801081a <_strtod_l+0x282>
 8010828:	080150d8 	.word	0x080150d8
 801082c:	08014e98 	.word	0x08014e98
 8010830:	7ff00000 	.word	0x7ff00000
 8010834:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010836:	1c51      	adds	r1, r2, #1
 8010838:	9119      	str	r1, [sp, #100]	@ 0x64
 801083a:	7852      	ldrb	r2, [r2, #1]
 801083c:	2a30      	cmp	r2, #48	@ 0x30
 801083e:	d0f9      	beq.n	8010834 <_strtod_l+0x29c>
 8010840:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010844:	2908      	cmp	r1, #8
 8010846:	f63f af75 	bhi.w	8010734 <_strtod_l+0x19c>
 801084a:	3a30      	subs	r2, #48	@ 0x30
 801084c:	9209      	str	r2, [sp, #36]	@ 0x24
 801084e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010850:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010852:	f04f 080a 	mov.w	r8, #10
 8010856:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010858:	1c56      	adds	r6, r2, #1
 801085a:	9619      	str	r6, [sp, #100]	@ 0x64
 801085c:	7852      	ldrb	r2, [r2, #1]
 801085e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010862:	f1be 0f09 	cmp.w	lr, #9
 8010866:	d939      	bls.n	80108dc <_strtod_l+0x344>
 8010868:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801086a:	1a76      	subs	r6, r6, r1
 801086c:	2e08      	cmp	r6, #8
 801086e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010872:	dc03      	bgt.n	801087c <_strtod_l+0x2e4>
 8010874:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010876:	4588      	cmp	r8, r1
 8010878:	bfa8      	it	ge
 801087a:	4688      	movge	r8, r1
 801087c:	f1bc 0f00 	cmp.w	ip, #0
 8010880:	d001      	beq.n	8010886 <_strtod_l+0x2ee>
 8010882:	f1c8 0800 	rsb	r8, r8, #0
 8010886:	2d00      	cmp	r5, #0
 8010888:	d14e      	bne.n	8010928 <_strtod_l+0x390>
 801088a:	9908      	ldr	r1, [sp, #32]
 801088c:	4308      	orrs	r0, r1
 801088e:	f47f aebc 	bne.w	801060a <_strtod_l+0x72>
 8010892:	2b00      	cmp	r3, #0
 8010894:	f47f aed4 	bne.w	8010640 <_strtod_l+0xa8>
 8010898:	2a69      	cmp	r2, #105	@ 0x69
 801089a:	d028      	beq.n	80108ee <_strtod_l+0x356>
 801089c:	dc25      	bgt.n	80108ea <_strtod_l+0x352>
 801089e:	2a49      	cmp	r2, #73	@ 0x49
 80108a0:	d025      	beq.n	80108ee <_strtod_l+0x356>
 80108a2:	2a4e      	cmp	r2, #78	@ 0x4e
 80108a4:	f47f aecc 	bne.w	8010640 <_strtod_l+0xa8>
 80108a8:	499a      	ldr	r1, [pc, #616]	@ (8010b14 <_strtod_l+0x57c>)
 80108aa:	a819      	add	r0, sp, #100	@ 0x64
 80108ac:	f002 fea4 	bl	80135f8 <__match>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	f43f aec5 	beq.w	8010640 <_strtod_l+0xa8>
 80108b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2b28      	cmp	r3, #40	@ 0x28
 80108bc:	d12e      	bne.n	801091c <_strtod_l+0x384>
 80108be:	4996      	ldr	r1, [pc, #600]	@ (8010b18 <_strtod_l+0x580>)
 80108c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80108c2:	a819      	add	r0, sp, #100	@ 0x64
 80108c4:	f002 feac 	bl	8013620 <__hexnan>
 80108c8:	2805      	cmp	r0, #5
 80108ca:	d127      	bne.n	801091c <_strtod_l+0x384>
 80108cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80108ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80108d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80108d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80108da:	e696      	b.n	801060a <_strtod_l+0x72>
 80108dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108de:	fb08 2101 	mla	r1, r8, r1, r2
 80108e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80108e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80108e8:	e7b5      	b.n	8010856 <_strtod_l+0x2be>
 80108ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80108ec:	e7da      	b.n	80108a4 <_strtod_l+0x30c>
 80108ee:	498b      	ldr	r1, [pc, #556]	@ (8010b1c <_strtod_l+0x584>)
 80108f0:	a819      	add	r0, sp, #100	@ 0x64
 80108f2:	f002 fe81 	bl	80135f8 <__match>
 80108f6:	2800      	cmp	r0, #0
 80108f8:	f43f aea2 	beq.w	8010640 <_strtod_l+0xa8>
 80108fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108fe:	4988      	ldr	r1, [pc, #544]	@ (8010b20 <_strtod_l+0x588>)
 8010900:	3b01      	subs	r3, #1
 8010902:	a819      	add	r0, sp, #100	@ 0x64
 8010904:	9319      	str	r3, [sp, #100]	@ 0x64
 8010906:	f002 fe77 	bl	80135f8 <__match>
 801090a:	b910      	cbnz	r0, 8010912 <_strtod_l+0x37a>
 801090c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801090e:	3301      	adds	r3, #1
 8010910:	9319      	str	r3, [sp, #100]	@ 0x64
 8010912:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010b30 <_strtod_l+0x598>
 8010916:	f04f 0a00 	mov.w	sl, #0
 801091a:	e676      	b.n	801060a <_strtod_l+0x72>
 801091c:	4881      	ldr	r0, [pc, #516]	@ (8010b24 <_strtod_l+0x58c>)
 801091e:	f001 fd13 	bl	8012348 <nan>
 8010922:	ec5b ab10 	vmov	sl, fp, d0
 8010926:	e670      	b.n	801060a <_strtod_l+0x72>
 8010928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801092a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801092c:	eba8 0303 	sub.w	r3, r8, r3
 8010930:	f1b9 0f00 	cmp.w	r9, #0
 8010934:	bf08      	it	eq
 8010936:	46a9      	moveq	r9, r5
 8010938:	2d10      	cmp	r5, #16
 801093a:	9309      	str	r3, [sp, #36]	@ 0x24
 801093c:	462c      	mov	r4, r5
 801093e:	bfa8      	it	ge
 8010940:	2410      	movge	r4, #16
 8010942:	f7ef fdff 	bl	8000544 <__aeabi_ui2d>
 8010946:	2d09      	cmp	r5, #9
 8010948:	4682      	mov	sl, r0
 801094a:	468b      	mov	fp, r1
 801094c:	dc13      	bgt.n	8010976 <_strtod_l+0x3de>
 801094e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010950:	2b00      	cmp	r3, #0
 8010952:	f43f ae5a 	beq.w	801060a <_strtod_l+0x72>
 8010956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010958:	dd78      	ble.n	8010a4c <_strtod_l+0x4b4>
 801095a:	2b16      	cmp	r3, #22
 801095c:	dc5f      	bgt.n	8010a1e <_strtod_l+0x486>
 801095e:	4972      	ldr	r1, [pc, #456]	@ (8010b28 <_strtod_l+0x590>)
 8010960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010968:	4652      	mov	r2, sl
 801096a:	465b      	mov	r3, fp
 801096c:	f7ef fe64 	bl	8000638 <__aeabi_dmul>
 8010970:	4682      	mov	sl, r0
 8010972:	468b      	mov	fp, r1
 8010974:	e649      	b.n	801060a <_strtod_l+0x72>
 8010976:	4b6c      	ldr	r3, [pc, #432]	@ (8010b28 <_strtod_l+0x590>)
 8010978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801097c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010980:	f7ef fe5a 	bl	8000638 <__aeabi_dmul>
 8010984:	4682      	mov	sl, r0
 8010986:	4638      	mov	r0, r7
 8010988:	468b      	mov	fp, r1
 801098a:	f7ef fddb 	bl	8000544 <__aeabi_ui2d>
 801098e:	4602      	mov	r2, r0
 8010990:	460b      	mov	r3, r1
 8010992:	4650      	mov	r0, sl
 8010994:	4659      	mov	r1, fp
 8010996:	f7ef fc99 	bl	80002cc <__adddf3>
 801099a:	2d0f      	cmp	r5, #15
 801099c:	4682      	mov	sl, r0
 801099e:	468b      	mov	fp, r1
 80109a0:	ddd5      	ble.n	801094e <_strtod_l+0x3b6>
 80109a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109a4:	1b2c      	subs	r4, r5, r4
 80109a6:	441c      	add	r4, r3
 80109a8:	2c00      	cmp	r4, #0
 80109aa:	f340 8093 	ble.w	8010ad4 <_strtod_l+0x53c>
 80109ae:	f014 030f 	ands.w	r3, r4, #15
 80109b2:	d00a      	beq.n	80109ca <_strtod_l+0x432>
 80109b4:	495c      	ldr	r1, [pc, #368]	@ (8010b28 <_strtod_l+0x590>)
 80109b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80109ba:	4652      	mov	r2, sl
 80109bc:	465b      	mov	r3, fp
 80109be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109c2:	f7ef fe39 	bl	8000638 <__aeabi_dmul>
 80109c6:	4682      	mov	sl, r0
 80109c8:	468b      	mov	fp, r1
 80109ca:	f034 040f 	bics.w	r4, r4, #15
 80109ce:	d073      	beq.n	8010ab8 <_strtod_l+0x520>
 80109d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80109d4:	dd49      	ble.n	8010a6a <_strtod_l+0x4d2>
 80109d6:	2400      	movs	r4, #0
 80109d8:	46a0      	mov	r8, r4
 80109da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80109dc:	46a1      	mov	r9, r4
 80109de:	9a05      	ldr	r2, [sp, #20]
 80109e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010b30 <_strtod_l+0x598>
 80109e4:	2322      	movs	r3, #34	@ 0x22
 80109e6:	6013      	str	r3, [r2, #0]
 80109e8:	f04f 0a00 	mov.w	sl, #0
 80109ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f43f ae0b 	beq.w	801060a <_strtod_l+0x72>
 80109f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80109f6:	9805      	ldr	r0, [sp, #20]
 80109f8:	f002 ffb6 	bl	8013968 <_Bfree>
 80109fc:	9805      	ldr	r0, [sp, #20]
 80109fe:	4649      	mov	r1, r9
 8010a00:	f002 ffb2 	bl	8013968 <_Bfree>
 8010a04:	9805      	ldr	r0, [sp, #20]
 8010a06:	4641      	mov	r1, r8
 8010a08:	f002 ffae 	bl	8013968 <_Bfree>
 8010a0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010a0e:	9805      	ldr	r0, [sp, #20]
 8010a10:	f002 ffaa 	bl	8013968 <_Bfree>
 8010a14:	9805      	ldr	r0, [sp, #20]
 8010a16:	4621      	mov	r1, r4
 8010a18:	f002 ffa6 	bl	8013968 <_Bfree>
 8010a1c:	e5f5      	b.n	801060a <_strtod_l+0x72>
 8010a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010a24:	4293      	cmp	r3, r2
 8010a26:	dbbc      	blt.n	80109a2 <_strtod_l+0x40a>
 8010a28:	4c3f      	ldr	r4, [pc, #252]	@ (8010b28 <_strtod_l+0x590>)
 8010a2a:	f1c5 050f 	rsb	r5, r5, #15
 8010a2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010a32:	4652      	mov	r2, sl
 8010a34:	465b      	mov	r3, fp
 8010a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a3a:	f7ef fdfd 	bl	8000638 <__aeabi_dmul>
 8010a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a40:	1b5d      	subs	r5, r3, r5
 8010a42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010a46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010a4a:	e78f      	b.n	801096c <_strtod_l+0x3d4>
 8010a4c:	3316      	adds	r3, #22
 8010a4e:	dba8      	blt.n	80109a2 <_strtod_l+0x40a>
 8010a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a52:	eba3 0808 	sub.w	r8, r3, r8
 8010a56:	4b34      	ldr	r3, [pc, #208]	@ (8010b28 <_strtod_l+0x590>)
 8010a58:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010a5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010a60:	4650      	mov	r0, sl
 8010a62:	4659      	mov	r1, fp
 8010a64:	f7ef ff12 	bl	800088c <__aeabi_ddiv>
 8010a68:	e782      	b.n	8010970 <_strtod_l+0x3d8>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4f2f      	ldr	r7, [pc, #188]	@ (8010b2c <_strtod_l+0x594>)
 8010a6e:	1124      	asrs	r4, r4, #4
 8010a70:	4650      	mov	r0, sl
 8010a72:	4659      	mov	r1, fp
 8010a74:	461e      	mov	r6, r3
 8010a76:	2c01      	cmp	r4, #1
 8010a78:	dc21      	bgt.n	8010abe <_strtod_l+0x526>
 8010a7a:	b10b      	cbz	r3, 8010a80 <_strtod_l+0x4e8>
 8010a7c:	4682      	mov	sl, r0
 8010a7e:	468b      	mov	fp, r1
 8010a80:	492a      	ldr	r1, [pc, #168]	@ (8010b2c <_strtod_l+0x594>)
 8010a82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010a86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010a8a:	4652      	mov	r2, sl
 8010a8c:	465b      	mov	r3, fp
 8010a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a92:	f7ef fdd1 	bl	8000638 <__aeabi_dmul>
 8010a96:	4b26      	ldr	r3, [pc, #152]	@ (8010b30 <_strtod_l+0x598>)
 8010a98:	460a      	mov	r2, r1
 8010a9a:	400b      	ands	r3, r1
 8010a9c:	4925      	ldr	r1, [pc, #148]	@ (8010b34 <_strtod_l+0x59c>)
 8010a9e:	428b      	cmp	r3, r1
 8010aa0:	4682      	mov	sl, r0
 8010aa2:	d898      	bhi.n	80109d6 <_strtod_l+0x43e>
 8010aa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010aa8:	428b      	cmp	r3, r1
 8010aaa:	bf86      	itte	hi
 8010aac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010b38 <_strtod_l+0x5a0>
 8010ab0:	f04f 3aff 	movhi.w	sl, #4294967295
 8010ab4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010ab8:	2300      	movs	r3, #0
 8010aba:	9308      	str	r3, [sp, #32]
 8010abc:	e076      	b.n	8010bac <_strtod_l+0x614>
 8010abe:	07e2      	lsls	r2, r4, #31
 8010ac0:	d504      	bpl.n	8010acc <_strtod_l+0x534>
 8010ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ac6:	f7ef fdb7 	bl	8000638 <__aeabi_dmul>
 8010aca:	2301      	movs	r3, #1
 8010acc:	3601      	adds	r6, #1
 8010ace:	1064      	asrs	r4, r4, #1
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	e7d0      	b.n	8010a76 <_strtod_l+0x4de>
 8010ad4:	d0f0      	beq.n	8010ab8 <_strtod_l+0x520>
 8010ad6:	4264      	negs	r4, r4
 8010ad8:	f014 020f 	ands.w	r2, r4, #15
 8010adc:	d00a      	beq.n	8010af4 <_strtod_l+0x55c>
 8010ade:	4b12      	ldr	r3, [pc, #72]	@ (8010b28 <_strtod_l+0x590>)
 8010ae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ae4:	4650      	mov	r0, sl
 8010ae6:	4659      	mov	r1, fp
 8010ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aec:	f7ef fece 	bl	800088c <__aeabi_ddiv>
 8010af0:	4682      	mov	sl, r0
 8010af2:	468b      	mov	fp, r1
 8010af4:	1124      	asrs	r4, r4, #4
 8010af6:	d0df      	beq.n	8010ab8 <_strtod_l+0x520>
 8010af8:	2c1f      	cmp	r4, #31
 8010afa:	dd1f      	ble.n	8010b3c <_strtod_l+0x5a4>
 8010afc:	2400      	movs	r4, #0
 8010afe:	46a0      	mov	r8, r4
 8010b00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010b02:	46a1      	mov	r9, r4
 8010b04:	9a05      	ldr	r2, [sp, #20]
 8010b06:	2322      	movs	r3, #34	@ 0x22
 8010b08:	f04f 0a00 	mov.w	sl, #0
 8010b0c:	f04f 0b00 	mov.w	fp, #0
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	e76b      	b.n	80109ec <_strtod_l+0x454>
 8010b14:	08014ea7 	.word	0x08014ea7
 8010b18:	080150c4 	.word	0x080150c4
 8010b1c:	08014e9f 	.word	0x08014e9f
 8010b20:	08014f86 	.word	0x08014f86
 8010b24:	08014f82 	.word	0x08014f82
 8010b28:	08015250 	.word	0x08015250
 8010b2c:	08015228 	.word	0x08015228
 8010b30:	7ff00000 	.word	0x7ff00000
 8010b34:	7ca00000 	.word	0x7ca00000
 8010b38:	7fefffff 	.word	0x7fefffff
 8010b3c:	f014 0310 	ands.w	r3, r4, #16
 8010b40:	bf18      	it	ne
 8010b42:	236a      	movne	r3, #106	@ 0x6a
 8010b44:	4ea9      	ldr	r6, [pc, #676]	@ (8010dec <_strtod_l+0x854>)
 8010b46:	9308      	str	r3, [sp, #32]
 8010b48:	4650      	mov	r0, sl
 8010b4a:	4659      	mov	r1, fp
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	07e7      	lsls	r7, r4, #31
 8010b50:	d504      	bpl.n	8010b5c <_strtod_l+0x5c4>
 8010b52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b56:	f7ef fd6f 	bl	8000638 <__aeabi_dmul>
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	1064      	asrs	r4, r4, #1
 8010b5e:	f106 0608 	add.w	r6, r6, #8
 8010b62:	d1f4      	bne.n	8010b4e <_strtod_l+0x5b6>
 8010b64:	b10b      	cbz	r3, 8010b6a <_strtod_l+0x5d2>
 8010b66:	4682      	mov	sl, r0
 8010b68:	468b      	mov	fp, r1
 8010b6a:	9b08      	ldr	r3, [sp, #32]
 8010b6c:	b1b3      	cbz	r3, 8010b9c <_strtod_l+0x604>
 8010b6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010b72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	4659      	mov	r1, fp
 8010b7a:	dd0f      	ble.n	8010b9c <_strtod_l+0x604>
 8010b7c:	2b1f      	cmp	r3, #31
 8010b7e:	dd56      	ble.n	8010c2e <_strtod_l+0x696>
 8010b80:	2b34      	cmp	r3, #52	@ 0x34
 8010b82:	bfde      	ittt	le
 8010b84:	f04f 33ff 	movle.w	r3, #4294967295
 8010b88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010b8c:	4093      	lslle	r3, r2
 8010b8e:	f04f 0a00 	mov.w	sl, #0
 8010b92:	bfcc      	ite	gt
 8010b94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010b98:	ea03 0b01 	andle.w	fp, r3, r1
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	4650      	mov	r0, sl
 8010ba2:	4659      	mov	r1, fp
 8010ba4:	f7ef ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d1a7      	bne.n	8010afc <_strtod_l+0x564>
 8010bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010bb2:	9805      	ldr	r0, [sp, #20]
 8010bb4:	462b      	mov	r3, r5
 8010bb6:	464a      	mov	r2, r9
 8010bb8:	f002 ff3e 	bl	8013a38 <__s2b>
 8010bbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	f43f af09 	beq.w	80109d6 <_strtod_l+0x43e>
 8010bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bc8:	2a00      	cmp	r2, #0
 8010bca:	eba3 0308 	sub.w	r3, r3, r8
 8010bce:	bfa8      	it	ge
 8010bd0:	2300      	movge	r3, #0
 8010bd2:	9312      	str	r3, [sp, #72]	@ 0x48
 8010bd4:	2400      	movs	r4, #0
 8010bd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010bda:	9316      	str	r3, [sp, #88]	@ 0x58
 8010bdc:	46a0      	mov	r8, r4
 8010bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010be0:	9805      	ldr	r0, [sp, #20]
 8010be2:	6859      	ldr	r1, [r3, #4]
 8010be4:	f002 fe80 	bl	80138e8 <_Balloc>
 8010be8:	4681      	mov	r9, r0
 8010bea:	2800      	cmp	r0, #0
 8010bec:	f43f aef7 	beq.w	80109de <_strtod_l+0x446>
 8010bf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bf2:	691a      	ldr	r2, [r3, #16]
 8010bf4:	3202      	adds	r2, #2
 8010bf6:	f103 010c 	add.w	r1, r3, #12
 8010bfa:	0092      	lsls	r2, r2, #2
 8010bfc:	300c      	adds	r0, #12
 8010bfe:	f001 fb92 	bl	8012326 <memcpy>
 8010c02:	ec4b ab10 	vmov	d0, sl, fp
 8010c06:	9805      	ldr	r0, [sp, #20]
 8010c08:	aa1c      	add	r2, sp, #112	@ 0x70
 8010c0a:	a91b      	add	r1, sp, #108	@ 0x6c
 8010c0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010c10:	f003 fa46 	bl	80140a0 <__d2b>
 8010c14:	901a      	str	r0, [sp, #104]	@ 0x68
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f43f aee1 	beq.w	80109de <_strtod_l+0x446>
 8010c1c:	9805      	ldr	r0, [sp, #20]
 8010c1e:	2101      	movs	r1, #1
 8010c20:	f002 ffa0 	bl	8013b64 <__i2b>
 8010c24:	4680      	mov	r8, r0
 8010c26:	b948      	cbnz	r0, 8010c3c <_strtod_l+0x6a4>
 8010c28:	f04f 0800 	mov.w	r8, #0
 8010c2c:	e6d7      	b.n	80109de <_strtod_l+0x446>
 8010c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c32:	fa02 f303 	lsl.w	r3, r2, r3
 8010c36:	ea03 0a0a 	and.w	sl, r3, sl
 8010c3a:	e7af      	b.n	8010b9c <_strtod_l+0x604>
 8010c3c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010c3e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010c40:	2d00      	cmp	r5, #0
 8010c42:	bfab      	itete	ge
 8010c44:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010c46:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010c48:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010c4a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010c4c:	bfac      	ite	ge
 8010c4e:	18ef      	addge	r7, r5, r3
 8010c50:	1b5e      	sublt	r6, r3, r5
 8010c52:	9b08      	ldr	r3, [sp, #32]
 8010c54:	1aed      	subs	r5, r5, r3
 8010c56:	4415      	add	r5, r2
 8010c58:	4b65      	ldr	r3, [pc, #404]	@ (8010df0 <_strtod_l+0x858>)
 8010c5a:	3d01      	subs	r5, #1
 8010c5c:	429d      	cmp	r5, r3
 8010c5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010c62:	da50      	bge.n	8010d06 <_strtod_l+0x76e>
 8010c64:	1b5b      	subs	r3, r3, r5
 8010c66:	2b1f      	cmp	r3, #31
 8010c68:	eba2 0203 	sub.w	r2, r2, r3
 8010c6c:	f04f 0101 	mov.w	r1, #1
 8010c70:	dc3d      	bgt.n	8010cee <_strtod_l+0x756>
 8010c72:	fa01 f303 	lsl.w	r3, r1, r3
 8010c76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c78:	2300      	movs	r3, #0
 8010c7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c7c:	18bd      	adds	r5, r7, r2
 8010c7e:	9b08      	ldr	r3, [sp, #32]
 8010c80:	42af      	cmp	r7, r5
 8010c82:	4416      	add	r6, r2
 8010c84:	441e      	add	r6, r3
 8010c86:	463b      	mov	r3, r7
 8010c88:	bfa8      	it	ge
 8010c8a:	462b      	movge	r3, r5
 8010c8c:	42b3      	cmp	r3, r6
 8010c8e:	bfa8      	it	ge
 8010c90:	4633      	movge	r3, r6
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bfc2      	ittt	gt
 8010c96:	1aed      	subgt	r5, r5, r3
 8010c98:	1af6      	subgt	r6, r6, r3
 8010c9a:	1aff      	subgt	r7, r7, r3
 8010c9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	dd16      	ble.n	8010cd0 <_strtod_l+0x738>
 8010ca2:	4641      	mov	r1, r8
 8010ca4:	9805      	ldr	r0, [sp, #20]
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	f003 f814 	bl	8013cd4 <__pow5mult>
 8010cac:	4680      	mov	r8, r0
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d0ba      	beq.n	8010c28 <_strtod_l+0x690>
 8010cb2:	4601      	mov	r1, r0
 8010cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010cb6:	9805      	ldr	r0, [sp, #20]
 8010cb8:	f002 ff6a 	bl	8013b90 <__multiply>
 8010cbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	f43f ae8d 	beq.w	80109de <_strtod_l+0x446>
 8010cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010cc6:	9805      	ldr	r0, [sp, #20]
 8010cc8:	f002 fe4e 	bl	8013968 <_Bfree>
 8010ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010cce:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	dc1d      	bgt.n	8010d10 <_strtod_l+0x778>
 8010cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	dd23      	ble.n	8010d22 <_strtod_l+0x78a>
 8010cda:	4649      	mov	r1, r9
 8010cdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010cde:	9805      	ldr	r0, [sp, #20]
 8010ce0:	f002 fff8 	bl	8013cd4 <__pow5mult>
 8010ce4:	4681      	mov	r9, r0
 8010ce6:	b9e0      	cbnz	r0, 8010d22 <_strtod_l+0x78a>
 8010ce8:	f04f 0900 	mov.w	r9, #0
 8010cec:	e677      	b.n	80109de <_strtod_l+0x446>
 8010cee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010cf2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010cf6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010cfa:	35e2      	adds	r5, #226	@ 0xe2
 8010cfc:	fa01 f305 	lsl.w	r3, r1, r5
 8010d00:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010d04:	e7ba      	b.n	8010c7c <_strtod_l+0x6e4>
 8010d06:	2300      	movs	r3, #0
 8010d08:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010d0e:	e7b5      	b.n	8010c7c <_strtod_l+0x6e4>
 8010d10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d12:	9805      	ldr	r0, [sp, #20]
 8010d14:	462a      	mov	r2, r5
 8010d16:	f003 f837 	bl	8013d88 <__lshift>
 8010d1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d1d9      	bne.n	8010cd4 <_strtod_l+0x73c>
 8010d20:	e65d      	b.n	80109de <_strtod_l+0x446>
 8010d22:	2e00      	cmp	r6, #0
 8010d24:	dd07      	ble.n	8010d36 <_strtod_l+0x79e>
 8010d26:	4649      	mov	r1, r9
 8010d28:	9805      	ldr	r0, [sp, #20]
 8010d2a:	4632      	mov	r2, r6
 8010d2c:	f003 f82c 	bl	8013d88 <__lshift>
 8010d30:	4681      	mov	r9, r0
 8010d32:	2800      	cmp	r0, #0
 8010d34:	d0d8      	beq.n	8010ce8 <_strtod_l+0x750>
 8010d36:	2f00      	cmp	r7, #0
 8010d38:	dd08      	ble.n	8010d4c <_strtod_l+0x7b4>
 8010d3a:	4641      	mov	r1, r8
 8010d3c:	9805      	ldr	r0, [sp, #20]
 8010d3e:	463a      	mov	r2, r7
 8010d40:	f003 f822 	bl	8013d88 <__lshift>
 8010d44:	4680      	mov	r8, r0
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f43f ae49 	beq.w	80109de <_strtod_l+0x446>
 8010d4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d4e:	9805      	ldr	r0, [sp, #20]
 8010d50:	464a      	mov	r2, r9
 8010d52:	f003 f8a1 	bl	8013e98 <__mdiff>
 8010d56:	4604      	mov	r4, r0
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	f43f ae40 	beq.w	80109de <_strtod_l+0x446>
 8010d5e:	68c3      	ldr	r3, [r0, #12]
 8010d60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d62:	2300      	movs	r3, #0
 8010d64:	60c3      	str	r3, [r0, #12]
 8010d66:	4641      	mov	r1, r8
 8010d68:	f003 f87a 	bl	8013e60 <__mcmp>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	da45      	bge.n	8010dfc <_strtod_l+0x864>
 8010d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d72:	ea53 030a 	orrs.w	r3, r3, sl
 8010d76:	d16b      	bne.n	8010e50 <_strtod_l+0x8b8>
 8010d78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d167      	bne.n	8010e50 <_strtod_l+0x8b8>
 8010d80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d84:	0d1b      	lsrs	r3, r3, #20
 8010d86:	051b      	lsls	r3, r3, #20
 8010d88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d8c:	d960      	bls.n	8010e50 <_strtod_l+0x8b8>
 8010d8e:	6963      	ldr	r3, [r4, #20]
 8010d90:	b913      	cbnz	r3, 8010d98 <_strtod_l+0x800>
 8010d92:	6923      	ldr	r3, [r4, #16]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	dd5b      	ble.n	8010e50 <_strtod_l+0x8b8>
 8010d98:	4621      	mov	r1, r4
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	9805      	ldr	r0, [sp, #20]
 8010d9e:	f002 fff3 	bl	8013d88 <__lshift>
 8010da2:	4641      	mov	r1, r8
 8010da4:	4604      	mov	r4, r0
 8010da6:	f003 f85b 	bl	8013e60 <__mcmp>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	dd50      	ble.n	8010e50 <_strtod_l+0x8b8>
 8010dae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010db2:	9a08      	ldr	r2, [sp, #32]
 8010db4:	0d1b      	lsrs	r3, r3, #20
 8010db6:	051b      	lsls	r3, r3, #20
 8010db8:	2a00      	cmp	r2, #0
 8010dba:	d06a      	beq.n	8010e92 <_strtod_l+0x8fa>
 8010dbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010dc0:	d867      	bhi.n	8010e92 <_strtod_l+0x8fa>
 8010dc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010dc6:	f67f ae9d 	bls.w	8010b04 <_strtod_l+0x56c>
 8010dca:	4b0a      	ldr	r3, [pc, #40]	@ (8010df4 <_strtod_l+0x85c>)
 8010dcc:	4650      	mov	r0, sl
 8010dce:	4659      	mov	r1, fp
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f7ef fc31 	bl	8000638 <__aeabi_dmul>
 8010dd6:	4b08      	ldr	r3, [pc, #32]	@ (8010df8 <_strtod_l+0x860>)
 8010dd8:	400b      	ands	r3, r1
 8010dda:	4682      	mov	sl, r0
 8010ddc:	468b      	mov	fp, r1
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f47f ae08 	bne.w	80109f4 <_strtod_l+0x45c>
 8010de4:	9a05      	ldr	r2, [sp, #20]
 8010de6:	2322      	movs	r3, #34	@ 0x22
 8010de8:	6013      	str	r3, [r2, #0]
 8010dea:	e603      	b.n	80109f4 <_strtod_l+0x45c>
 8010dec:	080150f0 	.word	0x080150f0
 8010df0:	fffffc02 	.word	0xfffffc02
 8010df4:	39500000 	.word	0x39500000
 8010df8:	7ff00000 	.word	0x7ff00000
 8010dfc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010e00:	d165      	bne.n	8010ece <_strtod_l+0x936>
 8010e02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e08:	b35a      	cbz	r2, 8010e62 <_strtod_l+0x8ca>
 8010e0a:	4a9f      	ldr	r2, [pc, #636]	@ (8011088 <_strtod_l+0xaf0>)
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d12b      	bne.n	8010e68 <_strtod_l+0x8d0>
 8010e10:	9b08      	ldr	r3, [sp, #32]
 8010e12:	4651      	mov	r1, sl
 8010e14:	b303      	cbz	r3, 8010e58 <_strtod_l+0x8c0>
 8010e16:	4b9d      	ldr	r3, [pc, #628]	@ (801108c <_strtod_l+0xaf4>)
 8010e18:	465a      	mov	r2, fp
 8010e1a:	4013      	ands	r3, r2
 8010e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010e20:	f04f 32ff 	mov.w	r2, #4294967295
 8010e24:	d81b      	bhi.n	8010e5e <_strtod_l+0x8c6>
 8010e26:	0d1b      	lsrs	r3, r3, #20
 8010e28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e30:	4299      	cmp	r1, r3
 8010e32:	d119      	bne.n	8010e68 <_strtod_l+0x8d0>
 8010e34:	4b96      	ldr	r3, [pc, #600]	@ (8011090 <_strtod_l+0xaf8>)
 8010e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d102      	bne.n	8010e42 <_strtod_l+0x8aa>
 8010e3c:	3101      	adds	r1, #1
 8010e3e:	f43f adce 	beq.w	80109de <_strtod_l+0x446>
 8010e42:	4b92      	ldr	r3, [pc, #584]	@ (801108c <_strtod_l+0xaf4>)
 8010e44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e46:	401a      	ands	r2, r3
 8010e48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010e4c:	f04f 0a00 	mov.w	sl, #0
 8010e50:	9b08      	ldr	r3, [sp, #32]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d1b9      	bne.n	8010dca <_strtod_l+0x832>
 8010e56:	e5cd      	b.n	80109f4 <_strtod_l+0x45c>
 8010e58:	f04f 33ff 	mov.w	r3, #4294967295
 8010e5c:	e7e8      	b.n	8010e30 <_strtod_l+0x898>
 8010e5e:	4613      	mov	r3, r2
 8010e60:	e7e6      	b.n	8010e30 <_strtod_l+0x898>
 8010e62:	ea53 030a 	orrs.w	r3, r3, sl
 8010e66:	d0a2      	beq.n	8010dae <_strtod_l+0x816>
 8010e68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e6a:	b1db      	cbz	r3, 8010ea4 <_strtod_l+0x90c>
 8010e6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e6e:	4213      	tst	r3, r2
 8010e70:	d0ee      	beq.n	8010e50 <_strtod_l+0x8b8>
 8010e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e74:	9a08      	ldr	r2, [sp, #32]
 8010e76:	4650      	mov	r0, sl
 8010e78:	4659      	mov	r1, fp
 8010e7a:	b1bb      	cbz	r3, 8010eac <_strtod_l+0x914>
 8010e7c:	f7ff fb6d 	bl	801055a <sulp>
 8010e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e84:	ec53 2b10 	vmov	r2, r3, d0
 8010e88:	f7ef fa20 	bl	80002cc <__adddf3>
 8010e8c:	4682      	mov	sl, r0
 8010e8e:	468b      	mov	fp, r1
 8010e90:	e7de      	b.n	8010e50 <_strtod_l+0x8b8>
 8010e92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010e96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e9e:	f04f 3aff 	mov.w	sl, #4294967295
 8010ea2:	e7d5      	b.n	8010e50 <_strtod_l+0x8b8>
 8010ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010ea6:	ea13 0f0a 	tst.w	r3, sl
 8010eaa:	e7e1      	b.n	8010e70 <_strtod_l+0x8d8>
 8010eac:	f7ff fb55 	bl	801055a <sulp>
 8010eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010eb4:	ec53 2b10 	vmov	r2, r3, d0
 8010eb8:	f7ef fa06 	bl	80002c8 <__aeabi_dsub>
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	4682      	mov	sl, r0
 8010ec2:	468b      	mov	fp, r1
 8010ec4:	f7ef fe20 	bl	8000b08 <__aeabi_dcmpeq>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d0c1      	beq.n	8010e50 <_strtod_l+0x8b8>
 8010ecc:	e61a      	b.n	8010b04 <_strtod_l+0x56c>
 8010ece:	4641      	mov	r1, r8
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f003 f93d 	bl	8014150 <__ratio>
 8010ed6:	ec57 6b10 	vmov	r6, r7, d0
 8010eda:	2200      	movs	r2, #0
 8010edc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	4639      	mov	r1, r7
 8010ee4:	f7ef fe24 	bl	8000b30 <__aeabi_dcmple>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d06f      	beq.n	8010fcc <_strtod_l+0xa34>
 8010eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d17a      	bne.n	8010fe8 <_strtod_l+0xa50>
 8010ef2:	f1ba 0f00 	cmp.w	sl, #0
 8010ef6:	d158      	bne.n	8010faa <_strtod_l+0xa12>
 8010ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d15a      	bne.n	8010fb8 <_strtod_l+0xa20>
 8010f02:	4b64      	ldr	r3, [pc, #400]	@ (8011094 <_strtod_l+0xafc>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	4630      	mov	r0, r6
 8010f08:	4639      	mov	r1, r7
 8010f0a:	f7ef fe07 	bl	8000b1c <__aeabi_dcmplt>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d159      	bne.n	8010fc6 <_strtod_l+0xa2e>
 8010f12:	4630      	mov	r0, r6
 8010f14:	4639      	mov	r1, r7
 8010f16:	4b60      	ldr	r3, [pc, #384]	@ (8011098 <_strtod_l+0xb00>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	f7ef fb8d 	bl	8000638 <__aeabi_dmul>
 8010f1e:	4606      	mov	r6, r0
 8010f20:	460f      	mov	r7, r1
 8010f22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010f26:	9606      	str	r6, [sp, #24]
 8010f28:	9307      	str	r3, [sp, #28]
 8010f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f2e:	4d57      	ldr	r5, [pc, #348]	@ (801108c <_strtod_l+0xaf4>)
 8010f30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f36:	401d      	ands	r5, r3
 8010f38:	4b58      	ldr	r3, [pc, #352]	@ (801109c <_strtod_l+0xb04>)
 8010f3a:	429d      	cmp	r5, r3
 8010f3c:	f040 80b2 	bne.w	80110a4 <_strtod_l+0xb0c>
 8010f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010f46:	ec4b ab10 	vmov	d0, sl, fp
 8010f4a:	f003 f839 	bl	8013fc0 <__ulp>
 8010f4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f52:	ec51 0b10 	vmov	r0, r1, d0
 8010f56:	f7ef fb6f 	bl	8000638 <__aeabi_dmul>
 8010f5a:	4652      	mov	r2, sl
 8010f5c:	465b      	mov	r3, fp
 8010f5e:	f7ef f9b5 	bl	80002cc <__adddf3>
 8010f62:	460b      	mov	r3, r1
 8010f64:	4949      	ldr	r1, [pc, #292]	@ (801108c <_strtod_l+0xaf4>)
 8010f66:	4a4e      	ldr	r2, [pc, #312]	@ (80110a0 <_strtod_l+0xb08>)
 8010f68:	4019      	ands	r1, r3
 8010f6a:	4291      	cmp	r1, r2
 8010f6c:	4682      	mov	sl, r0
 8010f6e:	d942      	bls.n	8010ff6 <_strtod_l+0xa5e>
 8010f70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010f72:	4b47      	ldr	r3, [pc, #284]	@ (8011090 <_strtod_l+0xaf8>)
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d103      	bne.n	8010f80 <_strtod_l+0x9e8>
 8010f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	f43f ad2f 	beq.w	80109de <_strtod_l+0x446>
 8010f80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011090 <_strtod_l+0xaf8>
 8010f84:	f04f 3aff 	mov.w	sl, #4294967295
 8010f88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f8a:	9805      	ldr	r0, [sp, #20]
 8010f8c:	f002 fcec 	bl	8013968 <_Bfree>
 8010f90:	9805      	ldr	r0, [sp, #20]
 8010f92:	4649      	mov	r1, r9
 8010f94:	f002 fce8 	bl	8013968 <_Bfree>
 8010f98:	9805      	ldr	r0, [sp, #20]
 8010f9a:	4641      	mov	r1, r8
 8010f9c:	f002 fce4 	bl	8013968 <_Bfree>
 8010fa0:	9805      	ldr	r0, [sp, #20]
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	f002 fce0 	bl	8013968 <_Bfree>
 8010fa8:	e619      	b.n	8010bde <_strtod_l+0x646>
 8010faa:	f1ba 0f01 	cmp.w	sl, #1
 8010fae:	d103      	bne.n	8010fb8 <_strtod_l+0xa20>
 8010fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f43f ada6 	beq.w	8010b04 <_strtod_l+0x56c>
 8010fb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011068 <_strtod_l+0xad0>
 8010fbc:	4f35      	ldr	r7, [pc, #212]	@ (8011094 <_strtod_l+0xafc>)
 8010fbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010fc2:	2600      	movs	r6, #0
 8010fc4:	e7b1      	b.n	8010f2a <_strtod_l+0x992>
 8010fc6:	4f34      	ldr	r7, [pc, #208]	@ (8011098 <_strtod_l+0xb00>)
 8010fc8:	2600      	movs	r6, #0
 8010fca:	e7aa      	b.n	8010f22 <_strtod_l+0x98a>
 8010fcc:	4b32      	ldr	r3, [pc, #200]	@ (8011098 <_strtod_l+0xb00>)
 8010fce:	4630      	mov	r0, r6
 8010fd0:	4639      	mov	r1, r7
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f7ef fb30 	bl	8000638 <__aeabi_dmul>
 8010fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460f      	mov	r7, r1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d09f      	beq.n	8010f22 <_strtod_l+0x98a>
 8010fe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010fe6:	e7a0      	b.n	8010f2a <_strtod_l+0x992>
 8010fe8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011070 <_strtod_l+0xad8>
 8010fec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ff0:	ec57 6b17 	vmov	r6, r7, d7
 8010ff4:	e799      	b.n	8010f2a <_strtod_l+0x992>
 8010ff6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010ffa:	9b08      	ldr	r3, [sp, #32]
 8010ffc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011000:	2b00      	cmp	r3, #0
 8011002:	d1c1      	bne.n	8010f88 <_strtod_l+0x9f0>
 8011004:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011008:	0d1b      	lsrs	r3, r3, #20
 801100a:	051b      	lsls	r3, r3, #20
 801100c:	429d      	cmp	r5, r3
 801100e:	d1bb      	bne.n	8010f88 <_strtod_l+0x9f0>
 8011010:	4630      	mov	r0, r6
 8011012:	4639      	mov	r1, r7
 8011014:	f7ef fe70 	bl	8000cf8 <__aeabi_d2lz>
 8011018:	f7ef fae0 	bl	80005dc <__aeabi_l2d>
 801101c:	4602      	mov	r2, r0
 801101e:	460b      	mov	r3, r1
 8011020:	4630      	mov	r0, r6
 8011022:	4639      	mov	r1, r7
 8011024:	f7ef f950 	bl	80002c8 <__aeabi_dsub>
 8011028:	460b      	mov	r3, r1
 801102a:	4602      	mov	r2, r0
 801102c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011030:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011036:	ea46 060a 	orr.w	r6, r6, sl
 801103a:	431e      	orrs	r6, r3
 801103c:	d06f      	beq.n	801111e <_strtod_l+0xb86>
 801103e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011078 <_strtod_l+0xae0>)
 8011040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011044:	f7ef fd6a 	bl	8000b1c <__aeabi_dcmplt>
 8011048:	2800      	cmp	r0, #0
 801104a:	f47f acd3 	bne.w	80109f4 <_strtod_l+0x45c>
 801104e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011080 <_strtod_l+0xae8>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011058:	f7ef fd7e 	bl	8000b58 <__aeabi_dcmpgt>
 801105c:	2800      	cmp	r0, #0
 801105e:	d093      	beq.n	8010f88 <_strtod_l+0x9f0>
 8011060:	e4c8      	b.n	80109f4 <_strtod_l+0x45c>
 8011062:	bf00      	nop
 8011064:	f3af 8000 	nop.w
 8011068:	00000000 	.word	0x00000000
 801106c:	bff00000 	.word	0xbff00000
 8011070:	00000000 	.word	0x00000000
 8011074:	3ff00000 	.word	0x3ff00000
 8011078:	94a03595 	.word	0x94a03595
 801107c:	3fdfffff 	.word	0x3fdfffff
 8011080:	35afe535 	.word	0x35afe535
 8011084:	3fe00000 	.word	0x3fe00000
 8011088:	000fffff 	.word	0x000fffff
 801108c:	7ff00000 	.word	0x7ff00000
 8011090:	7fefffff 	.word	0x7fefffff
 8011094:	3ff00000 	.word	0x3ff00000
 8011098:	3fe00000 	.word	0x3fe00000
 801109c:	7fe00000 	.word	0x7fe00000
 80110a0:	7c9fffff 	.word	0x7c9fffff
 80110a4:	9b08      	ldr	r3, [sp, #32]
 80110a6:	b323      	cbz	r3, 80110f2 <_strtod_l+0xb5a>
 80110a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80110ac:	d821      	bhi.n	80110f2 <_strtod_l+0xb5a>
 80110ae:	a328      	add	r3, pc, #160	@ (adr r3, 8011150 <_strtod_l+0xbb8>)
 80110b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b4:	4630      	mov	r0, r6
 80110b6:	4639      	mov	r1, r7
 80110b8:	f7ef fd3a 	bl	8000b30 <__aeabi_dcmple>
 80110bc:	b1a0      	cbz	r0, 80110e8 <_strtod_l+0xb50>
 80110be:	4639      	mov	r1, r7
 80110c0:	4630      	mov	r0, r6
 80110c2:	f7ef fd91 	bl	8000be8 <__aeabi_d2uiz>
 80110c6:	2801      	cmp	r0, #1
 80110c8:	bf38      	it	cc
 80110ca:	2001      	movcc	r0, #1
 80110cc:	f7ef fa3a 	bl	8000544 <__aeabi_ui2d>
 80110d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110d2:	4606      	mov	r6, r0
 80110d4:	460f      	mov	r7, r1
 80110d6:	b9fb      	cbnz	r3, 8011118 <_strtod_l+0xb80>
 80110d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80110dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80110de:	9315      	str	r3, [sp, #84]	@ 0x54
 80110e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80110e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80110e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80110ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80110ee:	1b5b      	subs	r3, r3, r5
 80110f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80110f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80110f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80110fa:	f002 ff61 	bl	8013fc0 <__ulp>
 80110fe:	4650      	mov	r0, sl
 8011100:	ec53 2b10 	vmov	r2, r3, d0
 8011104:	4659      	mov	r1, fp
 8011106:	f7ef fa97 	bl	8000638 <__aeabi_dmul>
 801110a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801110e:	f7ef f8dd 	bl	80002cc <__adddf3>
 8011112:	4682      	mov	sl, r0
 8011114:	468b      	mov	fp, r1
 8011116:	e770      	b.n	8010ffa <_strtod_l+0xa62>
 8011118:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801111c:	e7e0      	b.n	80110e0 <_strtod_l+0xb48>
 801111e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011158 <_strtod_l+0xbc0>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef fcfa 	bl	8000b1c <__aeabi_dcmplt>
 8011128:	e798      	b.n	801105c <_strtod_l+0xac4>
 801112a:	2300      	movs	r3, #0
 801112c:	930e      	str	r3, [sp, #56]	@ 0x38
 801112e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011132:	6013      	str	r3, [r2, #0]
 8011134:	f7ff ba6d 	b.w	8010612 <_strtod_l+0x7a>
 8011138:	2a65      	cmp	r2, #101	@ 0x65
 801113a:	f43f ab68 	beq.w	801080e <_strtod_l+0x276>
 801113e:	2a45      	cmp	r2, #69	@ 0x45
 8011140:	f43f ab65 	beq.w	801080e <_strtod_l+0x276>
 8011144:	2301      	movs	r3, #1
 8011146:	f7ff bba0 	b.w	801088a <_strtod_l+0x2f2>
 801114a:	bf00      	nop
 801114c:	f3af 8000 	nop.w
 8011150:	ffc00000 	.word	0xffc00000
 8011154:	41dfffff 	.word	0x41dfffff
 8011158:	94a03595 	.word	0x94a03595
 801115c:	3fcfffff 	.word	0x3fcfffff

08011160 <strtod>:
 8011160:	460a      	mov	r2, r1
 8011162:	4601      	mov	r1, r0
 8011164:	4802      	ldr	r0, [pc, #8]	@ (8011170 <strtod+0x10>)
 8011166:	4b03      	ldr	r3, [pc, #12]	@ (8011174 <strtod+0x14>)
 8011168:	6800      	ldr	r0, [r0, #0]
 801116a:	f7ff ba15 	b.w	8010598 <_strtod_l>
 801116e:	bf00      	nop
 8011170:	2000018c 	.word	0x2000018c
 8011174:	20000020 	.word	0x20000020

08011178 <strtof>:
 8011178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801117c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801123c <strtof+0xc4>
 8011180:	4b29      	ldr	r3, [pc, #164]	@ (8011228 <strtof+0xb0>)
 8011182:	460a      	mov	r2, r1
 8011184:	ed2d 8b02 	vpush	{d8}
 8011188:	4601      	mov	r1, r0
 801118a:	f8d8 0000 	ldr.w	r0, [r8]
 801118e:	f7ff fa03 	bl	8010598 <_strtod_l>
 8011192:	ec55 4b10 	vmov	r4, r5, d0
 8011196:	4622      	mov	r2, r4
 8011198:	462b      	mov	r3, r5
 801119a:	4620      	mov	r0, r4
 801119c:	4629      	mov	r1, r5
 801119e:	f7ef fce5 	bl	8000b6c <__aeabi_dcmpun>
 80111a2:	b190      	cbz	r0, 80111ca <strtof+0x52>
 80111a4:	2d00      	cmp	r5, #0
 80111a6:	4821      	ldr	r0, [pc, #132]	@ (801122c <strtof+0xb4>)
 80111a8:	da09      	bge.n	80111be <strtof+0x46>
 80111aa:	f001 f8d5 	bl	8012358 <nanf>
 80111ae:	eeb1 8a40 	vneg.f32	s16, s0
 80111b2:	eeb0 0a48 	vmov.f32	s0, s16
 80111b6:	ecbd 8b02 	vpop	{d8}
 80111ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111be:	ecbd 8b02 	vpop	{d8}
 80111c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111c6:	f001 b8c7 	b.w	8012358 <nanf>
 80111ca:	4620      	mov	r0, r4
 80111cc:	4629      	mov	r1, r5
 80111ce:	f7ef fd2b 	bl	8000c28 <__aeabi_d2f>
 80111d2:	ee08 0a10 	vmov	s16, r0
 80111d6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8011230 <strtof+0xb8>
 80111da:	eeb0 7ac8 	vabs.f32	s14, s16
 80111de:	eeb4 7a67 	vcmp.f32	s14, s15
 80111e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e6:	dd11      	ble.n	801120c <strtof+0x94>
 80111e8:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80111ec:	4b11      	ldr	r3, [pc, #68]	@ (8011234 <strtof+0xbc>)
 80111ee:	f04f 32ff 	mov.w	r2, #4294967295
 80111f2:	4620      	mov	r0, r4
 80111f4:	4639      	mov	r1, r7
 80111f6:	f7ef fcb9 	bl	8000b6c <__aeabi_dcmpun>
 80111fa:	b980      	cbnz	r0, 801121e <strtof+0xa6>
 80111fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011234 <strtof+0xbc>)
 80111fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011202:	4620      	mov	r0, r4
 8011204:	4639      	mov	r1, r7
 8011206:	f7ef fc93 	bl	8000b30 <__aeabi_dcmple>
 801120a:	b940      	cbnz	r0, 801121e <strtof+0xa6>
 801120c:	ee18 3a10 	vmov	r3, s16
 8011210:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011214:	d1cd      	bne.n	80111b2 <strtof+0x3a>
 8011216:	4b08      	ldr	r3, [pc, #32]	@ (8011238 <strtof+0xc0>)
 8011218:	402b      	ands	r3, r5
 801121a:	2b00      	cmp	r3, #0
 801121c:	d0c9      	beq.n	80111b2 <strtof+0x3a>
 801121e:	f8d8 3000 	ldr.w	r3, [r8]
 8011222:	2222      	movs	r2, #34	@ 0x22
 8011224:	601a      	str	r2, [r3, #0]
 8011226:	e7c4      	b.n	80111b2 <strtof+0x3a>
 8011228:	20000020 	.word	0x20000020
 801122c:	08014f82 	.word	0x08014f82
 8011230:	7f7fffff 	.word	0x7f7fffff
 8011234:	7fefffff 	.word	0x7fefffff
 8011238:	7ff00000 	.word	0x7ff00000
 801123c:	2000018c 	.word	0x2000018c

08011240 <_strtol_l.isra.0>:
 8011240:	2b24      	cmp	r3, #36	@ 0x24
 8011242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011246:	4686      	mov	lr, r0
 8011248:	4690      	mov	r8, r2
 801124a:	d801      	bhi.n	8011250 <_strtol_l.isra.0+0x10>
 801124c:	2b01      	cmp	r3, #1
 801124e:	d106      	bne.n	801125e <_strtol_l.isra.0+0x1e>
 8011250:	f001 f83c 	bl	80122cc <__errno>
 8011254:	2316      	movs	r3, #22
 8011256:	6003      	str	r3, [r0, #0]
 8011258:	2000      	movs	r0, #0
 801125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801125e:	4834      	ldr	r0, [pc, #208]	@ (8011330 <_strtol_l.isra.0+0xf0>)
 8011260:	460d      	mov	r5, r1
 8011262:	462a      	mov	r2, r5
 8011264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011268:	5d06      	ldrb	r6, [r0, r4]
 801126a:	f016 0608 	ands.w	r6, r6, #8
 801126e:	d1f8      	bne.n	8011262 <_strtol_l.isra.0+0x22>
 8011270:	2c2d      	cmp	r4, #45	@ 0x2d
 8011272:	d110      	bne.n	8011296 <_strtol_l.isra.0+0x56>
 8011274:	782c      	ldrb	r4, [r5, #0]
 8011276:	2601      	movs	r6, #1
 8011278:	1c95      	adds	r5, r2, #2
 801127a:	f033 0210 	bics.w	r2, r3, #16
 801127e:	d115      	bne.n	80112ac <_strtol_l.isra.0+0x6c>
 8011280:	2c30      	cmp	r4, #48	@ 0x30
 8011282:	d10d      	bne.n	80112a0 <_strtol_l.isra.0+0x60>
 8011284:	782a      	ldrb	r2, [r5, #0]
 8011286:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801128a:	2a58      	cmp	r2, #88	@ 0x58
 801128c:	d108      	bne.n	80112a0 <_strtol_l.isra.0+0x60>
 801128e:	786c      	ldrb	r4, [r5, #1]
 8011290:	3502      	adds	r5, #2
 8011292:	2310      	movs	r3, #16
 8011294:	e00a      	b.n	80112ac <_strtol_l.isra.0+0x6c>
 8011296:	2c2b      	cmp	r4, #43	@ 0x2b
 8011298:	bf04      	itt	eq
 801129a:	782c      	ldrbeq	r4, [r5, #0]
 801129c:	1c95      	addeq	r5, r2, #2
 801129e:	e7ec      	b.n	801127a <_strtol_l.isra.0+0x3a>
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d1f6      	bne.n	8011292 <_strtol_l.isra.0+0x52>
 80112a4:	2c30      	cmp	r4, #48	@ 0x30
 80112a6:	bf14      	ite	ne
 80112a8:	230a      	movne	r3, #10
 80112aa:	2308      	moveq	r3, #8
 80112ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80112b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80112b4:	2200      	movs	r2, #0
 80112b6:	fbbc f9f3 	udiv	r9, ip, r3
 80112ba:	4610      	mov	r0, r2
 80112bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80112c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80112c4:	2f09      	cmp	r7, #9
 80112c6:	d80f      	bhi.n	80112e8 <_strtol_l.isra.0+0xa8>
 80112c8:	463c      	mov	r4, r7
 80112ca:	42a3      	cmp	r3, r4
 80112cc:	dd1b      	ble.n	8011306 <_strtol_l.isra.0+0xc6>
 80112ce:	1c57      	adds	r7, r2, #1
 80112d0:	d007      	beq.n	80112e2 <_strtol_l.isra.0+0xa2>
 80112d2:	4581      	cmp	r9, r0
 80112d4:	d314      	bcc.n	8011300 <_strtol_l.isra.0+0xc0>
 80112d6:	d101      	bne.n	80112dc <_strtol_l.isra.0+0x9c>
 80112d8:	45a2      	cmp	sl, r4
 80112da:	db11      	blt.n	8011300 <_strtol_l.isra.0+0xc0>
 80112dc:	fb00 4003 	mla	r0, r0, r3, r4
 80112e0:	2201      	movs	r2, #1
 80112e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112e6:	e7eb      	b.n	80112c0 <_strtol_l.isra.0+0x80>
 80112e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80112ec:	2f19      	cmp	r7, #25
 80112ee:	d801      	bhi.n	80112f4 <_strtol_l.isra.0+0xb4>
 80112f0:	3c37      	subs	r4, #55	@ 0x37
 80112f2:	e7ea      	b.n	80112ca <_strtol_l.isra.0+0x8a>
 80112f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80112f8:	2f19      	cmp	r7, #25
 80112fa:	d804      	bhi.n	8011306 <_strtol_l.isra.0+0xc6>
 80112fc:	3c57      	subs	r4, #87	@ 0x57
 80112fe:	e7e4      	b.n	80112ca <_strtol_l.isra.0+0x8a>
 8011300:	f04f 32ff 	mov.w	r2, #4294967295
 8011304:	e7ed      	b.n	80112e2 <_strtol_l.isra.0+0xa2>
 8011306:	1c53      	adds	r3, r2, #1
 8011308:	d108      	bne.n	801131c <_strtol_l.isra.0+0xdc>
 801130a:	2322      	movs	r3, #34	@ 0x22
 801130c:	f8ce 3000 	str.w	r3, [lr]
 8011310:	4660      	mov	r0, ip
 8011312:	f1b8 0f00 	cmp.w	r8, #0
 8011316:	d0a0      	beq.n	801125a <_strtol_l.isra.0+0x1a>
 8011318:	1e69      	subs	r1, r5, #1
 801131a:	e006      	b.n	801132a <_strtol_l.isra.0+0xea>
 801131c:	b106      	cbz	r6, 8011320 <_strtol_l.isra.0+0xe0>
 801131e:	4240      	negs	r0, r0
 8011320:	f1b8 0f00 	cmp.w	r8, #0
 8011324:	d099      	beq.n	801125a <_strtol_l.isra.0+0x1a>
 8011326:	2a00      	cmp	r2, #0
 8011328:	d1f6      	bne.n	8011318 <_strtol_l.isra.0+0xd8>
 801132a:	f8c8 1000 	str.w	r1, [r8]
 801132e:	e794      	b.n	801125a <_strtol_l.isra.0+0x1a>
 8011330:	08015119 	.word	0x08015119

08011334 <strtol>:
 8011334:	4613      	mov	r3, r2
 8011336:	460a      	mov	r2, r1
 8011338:	4601      	mov	r1, r0
 801133a:	4802      	ldr	r0, [pc, #8]	@ (8011344 <strtol+0x10>)
 801133c:	6800      	ldr	r0, [r0, #0]
 801133e:	f7ff bf7f 	b.w	8011240 <_strtol_l.isra.0>
 8011342:	bf00      	nop
 8011344:	2000018c 	.word	0x2000018c

08011348 <__cvt>:
 8011348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801134c:	ec57 6b10 	vmov	r6, r7, d0
 8011350:	2f00      	cmp	r7, #0
 8011352:	460c      	mov	r4, r1
 8011354:	4619      	mov	r1, r3
 8011356:	463b      	mov	r3, r7
 8011358:	bfbb      	ittet	lt
 801135a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801135e:	461f      	movlt	r7, r3
 8011360:	2300      	movge	r3, #0
 8011362:	232d      	movlt	r3, #45	@ 0x2d
 8011364:	700b      	strb	r3, [r1, #0]
 8011366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011368:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801136c:	4691      	mov	r9, r2
 801136e:	f023 0820 	bic.w	r8, r3, #32
 8011372:	bfbc      	itt	lt
 8011374:	4632      	movlt	r2, r6
 8011376:	4616      	movlt	r6, r2
 8011378:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801137c:	d005      	beq.n	801138a <__cvt+0x42>
 801137e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011382:	d100      	bne.n	8011386 <__cvt+0x3e>
 8011384:	3401      	adds	r4, #1
 8011386:	2102      	movs	r1, #2
 8011388:	e000      	b.n	801138c <__cvt+0x44>
 801138a:	2103      	movs	r1, #3
 801138c:	ab03      	add	r3, sp, #12
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	ab02      	add	r3, sp, #8
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	ec47 6b10 	vmov	d0, r6, r7
 8011398:	4653      	mov	r3, sl
 801139a:	4622      	mov	r2, r4
 801139c:	f001 f888 	bl	80124b0 <_dtoa_r>
 80113a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80113a4:	4605      	mov	r5, r0
 80113a6:	d119      	bne.n	80113dc <__cvt+0x94>
 80113a8:	f019 0f01 	tst.w	r9, #1
 80113ac:	d00e      	beq.n	80113cc <__cvt+0x84>
 80113ae:	eb00 0904 	add.w	r9, r0, r4
 80113b2:	2200      	movs	r2, #0
 80113b4:	2300      	movs	r3, #0
 80113b6:	4630      	mov	r0, r6
 80113b8:	4639      	mov	r1, r7
 80113ba:	f7ef fba5 	bl	8000b08 <__aeabi_dcmpeq>
 80113be:	b108      	cbz	r0, 80113c4 <__cvt+0x7c>
 80113c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80113c4:	2230      	movs	r2, #48	@ 0x30
 80113c6:	9b03      	ldr	r3, [sp, #12]
 80113c8:	454b      	cmp	r3, r9
 80113ca:	d31e      	bcc.n	801140a <__cvt+0xc2>
 80113cc:	9b03      	ldr	r3, [sp, #12]
 80113ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113d0:	1b5b      	subs	r3, r3, r5
 80113d2:	4628      	mov	r0, r5
 80113d4:	6013      	str	r3, [r2, #0]
 80113d6:	b004      	add	sp, #16
 80113d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80113e0:	eb00 0904 	add.w	r9, r0, r4
 80113e4:	d1e5      	bne.n	80113b2 <__cvt+0x6a>
 80113e6:	7803      	ldrb	r3, [r0, #0]
 80113e8:	2b30      	cmp	r3, #48	@ 0x30
 80113ea:	d10a      	bne.n	8011402 <__cvt+0xba>
 80113ec:	2200      	movs	r2, #0
 80113ee:	2300      	movs	r3, #0
 80113f0:	4630      	mov	r0, r6
 80113f2:	4639      	mov	r1, r7
 80113f4:	f7ef fb88 	bl	8000b08 <__aeabi_dcmpeq>
 80113f8:	b918      	cbnz	r0, 8011402 <__cvt+0xba>
 80113fa:	f1c4 0401 	rsb	r4, r4, #1
 80113fe:	f8ca 4000 	str.w	r4, [sl]
 8011402:	f8da 3000 	ldr.w	r3, [sl]
 8011406:	4499      	add	r9, r3
 8011408:	e7d3      	b.n	80113b2 <__cvt+0x6a>
 801140a:	1c59      	adds	r1, r3, #1
 801140c:	9103      	str	r1, [sp, #12]
 801140e:	701a      	strb	r2, [r3, #0]
 8011410:	e7d9      	b.n	80113c6 <__cvt+0x7e>

08011412 <__exponent>:
 8011412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011414:	2900      	cmp	r1, #0
 8011416:	bfba      	itte	lt
 8011418:	4249      	neglt	r1, r1
 801141a:	232d      	movlt	r3, #45	@ 0x2d
 801141c:	232b      	movge	r3, #43	@ 0x2b
 801141e:	2909      	cmp	r1, #9
 8011420:	7002      	strb	r2, [r0, #0]
 8011422:	7043      	strb	r3, [r0, #1]
 8011424:	dd29      	ble.n	801147a <__exponent+0x68>
 8011426:	f10d 0307 	add.w	r3, sp, #7
 801142a:	461d      	mov	r5, r3
 801142c:	270a      	movs	r7, #10
 801142e:	461a      	mov	r2, r3
 8011430:	fbb1 f6f7 	udiv	r6, r1, r7
 8011434:	fb07 1416 	mls	r4, r7, r6, r1
 8011438:	3430      	adds	r4, #48	@ 0x30
 801143a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801143e:	460c      	mov	r4, r1
 8011440:	2c63      	cmp	r4, #99	@ 0x63
 8011442:	f103 33ff 	add.w	r3, r3, #4294967295
 8011446:	4631      	mov	r1, r6
 8011448:	dcf1      	bgt.n	801142e <__exponent+0x1c>
 801144a:	3130      	adds	r1, #48	@ 0x30
 801144c:	1e94      	subs	r4, r2, #2
 801144e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011452:	1c41      	adds	r1, r0, #1
 8011454:	4623      	mov	r3, r4
 8011456:	42ab      	cmp	r3, r5
 8011458:	d30a      	bcc.n	8011470 <__exponent+0x5e>
 801145a:	f10d 0309 	add.w	r3, sp, #9
 801145e:	1a9b      	subs	r3, r3, r2
 8011460:	42ac      	cmp	r4, r5
 8011462:	bf88      	it	hi
 8011464:	2300      	movhi	r3, #0
 8011466:	3302      	adds	r3, #2
 8011468:	4403      	add	r3, r0
 801146a:	1a18      	subs	r0, r3, r0
 801146c:	b003      	add	sp, #12
 801146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011470:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011474:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011478:	e7ed      	b.n	8011456 <__exponent+0x44>
 801147a:	2330      	movs	r3, #48	@ 0x30
 801147c:	3130      	adds	r1, #48	@ 0x30
 801147e:	7083      	strb	r3, [r0, #2]
 8011480:	70c1      	strb	r1, [r0, #3]
 8011482:	1d03      	adds	r3, r0, #4
 8011484:	e7f1      	b.n	801146a <__exponent+0x58>
	...

08011488 <_printf_float>:
 8011488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801148c:	b08d      	sub	sp, #52	@ 0x34
 801148e:	460c      	mov	r4, r1
 8011490:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011494:	4616      	mov	r6, r2
 8011496:	461f      	mov	r7, r3
 8011498:	4605      	mov	r5, r0
 801149a:	f000 fe6f 	bl	801217c <_localeconv_r>
 801149e:	6803      	ldr	r3, [r0, #0]
 80114a0:	9304      	str	r3, [sp, #16]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ee ff04 	bl	80002b0 <strlen>
 80114a8:	2300      	movs	r3, #0
 80114aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80114ac:	f8d8 3000 	ldr.w	r3, [r8]
 80114b0:	9005      	str	r0, [sp, #20]
 80114b2:	3307      	adds	r3, #7
 80114b4:	f023 0307 	bic.w	r3, r3, #7
 80114b8:	f103 0208 	add.w	r2, r3, #8
 80114bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80114c0:	f8d4 b000 	ldr.w	fp, [r4]
 80114c4:	f8c8 2000 	str.w	r2, [r8]
 80114c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80114cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80114d0:	9307      	str	r3, [sp, #28]
 80114d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80114d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80114da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114de:	4b9c      	ldr	r3, [pc, #624]	@ (8011750 <_printf_float+0x2c8>)
 80114e0:	f04f 32ff 	mov.w	r2, #4294967295
 80114e4:	f7ef fb42 	bl	8000b6c <__aeabi_dcmpun>
 80114e8:	bb70      	cbnz	r0, 8011548 <_printf_float+0xc0>
 80114ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114ee:	4b98      	ldr	r3, [pc, #608]	@ (8011750 <_printf_float+0x2c8>)
 80114f0:	f04f 32ff 	mov.w	r2, #4294967295
 80114f4:	f7ef fb1c 	bl	8000b30 <__aeabi_dcmple>
 80114f8:	bb30      	cbnz	r0, 8011548 <_printf_float+0xc0>
 80114fa:	2200      	movs	r2, #0
 80114fc:	2300      	movs	r3, #0
 80114fe:	4640      	mov	r0, r8
 8011500:	4649      	mov	r1, r9
 8011502:	f7ef fb0b 	bl	8000b1c <__aeabi_dcmplt>
 8011506:	b110      	cbz	r0, 801150e <_printf_float+0x86>
 8011508:	232d      	movs	r3, #45	@ 0x2d
 801150a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801150e:	4a91      	ldr	r2, [pc, #580]	@ (8011754 <_printf_float+0x2cc>)
 8011510:	4b91      	ldr	r3, [pc, #580]	@ (8011758 <_printf_float+0x2d0>)
 8011512:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011516:	bf8c      	ite	hi
 8011518:	4690      	movhi	r8, r2
 801151a:	4698      	movls	r8, r3
 801151c:	2303      	movs	r3, #3
 801151e:	6123      	str	r3, [r4, #16]
 8011520:	f02b 0304 	bic.w	r3, fp, #4
 8011524:	6023      	str	r3, [r4, #0]
 8011526:	f04f 0900 	mov.w	r9, #0
 801152a:	9700      	str	r7, [sp, #0]
 801152c:	4633      	mov	r3, r6
 801152e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011530:	4621      	mov	r1, r4
 8011532:	4628      	mov	r0, r5
 8011534:	f000 f9d2 	bl	80118dc <_printf_common>
 8011538:	3001      	adds	r0, #1
 801153a:	f040 808d 	bne.w	8011658 <_printf_float+0x1d0>
 801153e:	f04f 30ff 	mov.w	r0, #4294967295
 8011542:	b00d      	add	sp, #52	@ 0x34
 8011544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011548:	4642      	mov	r2, r8
 801154a:	464b      	mov	r3, r9
 801154c:	4640      	mov	r0, r8
 801154e:	4649      	mov	r1, r9
 8011550:	f7ef fb0c 	bl	8000b6c <__aeabi_dcmpun>
 8011554:	b140      	cbz	r0, 8011568 <_printf_float+0xe0>
 8011556:	464b      	mov	r3, r9
 8011558:	2b00      	cmp	r3, #0
 801155a:	bfbc      	itt	lt
 801155c:	232d      	movlt	r3, #45	@ 0x2d
 801155e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011562:	4a7e      	ldr	r2, [pc, #504]	@ (801175c <_printf_float+0x2d4>)
 8011564:	4b7e      	ldr	r3, [pc, #504]	@ (8011760 <_printf_float+0x2d8>)
 8011566:	e7d4      	b.n	8011512 <_printf_float+0x8a>
 8011568:	6863      	ldr	r3, [r4, #4]
 801156a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801156e:	9206      	str	r2, [sp, #24]
 8011570:	1c5a      	adds	r2, r3, #1
 8011572:	d13b      	bne.n	80115ec <_printf_float+0x164>
 8011574:	2306      	movs	r3, #6
 8011576:	6063      	str	r3, [r4, #4]
 8011578:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801157c:	2300      	movs	r3, #0
 801157e:	6022      	str	r2, [r4, #0]
 8011580:	9303      	str	r3, [sp, #12]
 8011582:	ab0a      	add	r3, sp, #40	@ 0x28
 8011584:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011588:	ab09      	add	r3, sp, #36	@ 0x24
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	6861      	ldr	r1, [r4, #4]
 801158e:	ec49 8b10 	vmov	d0, r8, r9
 8011592:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011596:	4628      	mov	r0, r5
 8011598:	f7ff fed6 	bl	8011348 <__cvt>
 801159c:	9b06      	ldr	r3, [sp, #24]
 801159e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80115a0:	2b47      	cmp	r3, #71	@ 0x47
 80115a2:	4680      	mov	r8, r0
 80115a4:	d129      	bne.n	80115fa <_printf_float+0x172>
 80115a6:	1cc8      	adds	r0, r1, #3
 80115a8:	db02      	blt.n	80115b0 <_printf_float+0x128>
 80115aa:	6863      	ldr	r3, [r4, #4]
 80115ac:	4299      	cmp	r1, r3
 80115ae:	dd41      	ble.n	8011634 <_printf_float+0x1ac>
 80115b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80115b4:	fa5f fa8a 	uxtb.w	sl, sl
 80115b8:	3901      	subs	r1, #1
 80115ba:	4652      	mov	r2, sl
 80115bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80115c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80115c2:	f7ff ff26 	bl	8011412 <__exponent>
 80115c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80115c8:	1813      	adds	r3, r2, r0
 80115ca:	2a01      	cmp	r2, #1
 80115cc:	4681      	mov	r9, r0
 80115ce:	6123      	str	r3, [r4, #16]
 80115d0:	dc02      	bgt.n	80115d8 <_printf_float+0x150>
 80115d2:	6822      	ldr	r2, [r4, #0]
 80115d4:	07d2      	lsls	r2, r2, #31
 80115d6:	d501      	bpl.n	80115dc <_printf_float+0x154>
 80115d8:	3301      	adds	r3, #1
 80115da:	6123      	str	r3, [r4, #16]
 80115dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d0a2      	beq.n	801152a <_printf_float+0xa2>
 80115e4:	232d      	movs	r3, #45	@ 0x2d
 80115e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115ea:	e79e      	b.n	801152a <_printf_float+0xa2>
 80115ec:	9a06      	ldr	r2, [sp, #24]
 80115ee:	2a47      	cmp	r2, #71	@ 0x47
 80115f0:	d1c2      	bne.n	8011578 <_printf_float+0xf0>
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1c0      	bne.n	8011578 <_printf_float+0xf0>
 80115f6:	2301      	movs	r3, #1
 80115f8:	e7bd      	b.n	8011576 <_printf_float+0xee>
 80115fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80115fe:	d9db      	bls.n	80115b8 <_printf_float+0x130>
 8011600:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011604:	d118      	bne.n	8011638 <_printf_float+0x1b0>
 8011606:	2900      	cmp	r1, #0
 8011608:	6863      	ldr	r3, [r4, #4]
 801160a:	dd0b      	ble.n	8011624 <_printf_float+0x19c>
 801160c:	6121      	str	r1, [r4, #16]
 801160e:	b913      	cbnz	r3, 8011616 <_printf_float+0x18e>
 8011610:	6822      	ldr	r2, [r4, #0]
 8011612:	07d0      	lsls	r0, r2, #31
 8011614:	d502      	bpl.n	801161c <_printf_float+0x194>
 8011616:	3301      	adds	r3, #1
 8011618:	440b      	add	r3, r1
 801161a:	6123      	str	r3, [r4, #16]
 801161c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801161e:	f04f 0900 	mov.w	r9, #0
 8011622:	e7db      	b.n	80115dc <_printf_float+0x154>
 8011624:	b913      	cbnz	r3, 801162c <_printf_float+0x1a4>
 8011626:	6822      	ldr	r2, [r4, #0]
 8011628:	07d2      	lsls	r2, r2, #31
 801162a:	d501      	bpl.n	8011630 <_printf_float+0x1a8>
 801162c:	3302      	adds	r3, #2
 801162e:	e7f4      	b.n	801161a <_printf_float+0x192>
 8011630:	2301      	movs	r3, #1
 8011632:	e7f2      	b.n	801161a <_printf_float+0x192>
 8011634:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801163a:	4299      	cmp	r1, r3
 801163c:	db05      	blt.n	801164a <_printf_float+0x1c2>
 801163e:	6823      	ldr	r3, [r4, #0]
 8011640:	6121      	str	r1, [r4, #16]
 8011642:	07d8      	lsls	r0, r3, #31
 8011644:	d5ea      	bpl.n	801161c <_printf_float+0x194>
 8011646:	1c4b      	adds	r3, r1, #1
 8011648:	e7e7      	b.n	801161a <_printf_float+0x192>
 801164a:	2900      	cmp	r1, #0
 801164c:	bfd4      	ite	le
 801164e:	f1c1 0202 	rsble	r2, r1, #2
 8011652:	2201      	movgt	r2, #1
 8011654:	4413      	add	r3, r2
 8011656:	e7e0      	b.n	801161a <_printf_float+0x192>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	055a      	lsls	r2, r3, #21
 801165c:	d407      	bmi.n	801166e <_printf_float+0x1e6>
 801165e:	6923      	ldr	r3, [r4, #16]
 8011660:	4642      	mov	r2, r8
 8011662:	4631      	mov	r1, r6
 8011664:	4628      	mov	r0, r5
 8011666:	47b8      	blx	r7
 8011668:	3001      	adds	r0, #1
 801166a:	d12b      	bne.n	80116c4 <_printf_float+0x23c>
 801166c:	e767      	b.n	801153e <_printf_float+0xb6>
 801166e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011672:	f240 80dd 	bls.w	8011830 <_printf_float+0x3a8>
 8011676:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801167a:	2200      	movs	r2, #0
 801167c:	2300      	movs	r3, #0
 801167e:	f7ef fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8011682:	2800      	cmp	r0, #0
 8011684:	d033      	beq.n	80116ee <_printf_float+0x266>
 8011686:	4a37      	ldr	r2, [pc, #220]	@ (8011764 <_printf_float+0x2dc>)
 8011688:	2301      	movs	r3, #1
 801168a:	4631      	mov	r1, r6
 801168c:	4628      	mov	r0, r5
 801168e:	47b8      	blx	r7
 8011690:	3001      	adds	r0, #1
 8011692:	f43f af54 	beq.w	801153e <_printf_float+0xb6>
 8011696:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801169a:	4543      	cmp	r3, r8
 801169c:	db02      	blt.n	80116a4 <_printf_float+0x21c>
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	07d8      	lsls	r0, r3, #31
 80116a2:	d50f      	bpl.n	80116c4 <_printf_float+0x23c>
 80116a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116a8:	4631      	mov	r1, r6
 80116aa:	4628      	mov	r0, r5
 80116ac:	47b8      	blx	r7
 80116ae:	3001      	adds	r0, #1
 80116b0:	f43f af45 	beq.w	801153e <_printf_float+0xb6>
 80116b4:	f04f 0900 	mov.w	r9, #0
 80116b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80116bc:	f104 0a1a 	add.w	sl, r4, #26
 80116c0:	45c8      	cmp	r8, r9
 80116c2:	dc09      	bgt.n	80116d8 <_printf_float+0x250>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	079b      	lsls	r3, r3, #30
 80116c8:	f100 8103 	bmi.w	80118d2 <_printf_float+0x44a>
 80116cc:	68e0      	ldr	r0, [r4, #12]
 80116ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116d0:	4298      	cmp	r0, r3
 80116d2:	bfb8      	it	lt
 80116d4:	4618      	movlt	r0, r3
 80116d6:	e734      	b.n	8011542 <_printf_float+0xba>
 80116d8:	2301      	movs	r3, #1
 80116da:	4652      	mov	r2, sl
 80116dc:	4631      	mov	r1, r6
 80116de:	4628      	mov	r0, r5
 80116e0:	47b8      	blx	r7
 80116e2:	3001      	adds	r0, #1
 80116e4:	f43f af2b 	beq.w	801153e <_printf_float+0xb6>
 80116e8:	f109 0901 	add.w	r9, r9, #1
 80116ec:	e7e8      	b.n	80116c0 <_printf_float+0x238>
 80116ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	dc39      	bgt.n	8011768 <_printf_float+0x2e0>
 80116f4:	4a1b      	ldr	r2, [pc, #108]	@ (8011764 <_printf_float+0x2dc>)
 80116f6:	2301      	movs	r3, #1
 80116f8:	4631      	mov	r1, r6
 80116fa:	4628      	mov	r0, r5
 80116fc:	47b8      	blx	r7
 80116fe:	3001      	adds	r0, #1
 8011700:	f43f af1d 	beq.w	801153e <_printf_float+0xb6>
 8011704:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011708:	ea59 0303 	orrs.w	r3, r9, r3
 801170c:	d102      	bne.n	8011714 <_printf_float+0x28c>
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	07d9      	lsls	r1, r3, #31
 8011712:	d5d7      	bpl.n	80116c4 <_printf_float+0x23c>
 8011714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011718:	4631      	mov	r1, r6
 801171a:	4628      	mov	r0, r5
 801171c:	47b8      	blx	r7
 801171e:	3001      	adds	r0, #1
 8011720:	f43f af0d 	beq.w	801153e <_printf_float+0xb6>
 8011724:	f04f 0a00 	mov.w	sl, #0
 8011728:	f104 0b1a 	add.w	fp, r4, #26
 801172c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801172e:	425b      	negs	r3, r3
 8011730:	4553      	cmp	r3, sl
 8011732:	dc01      	bgt.n	8011738 <_printf_float+0x2b0>
 8011734:	464b      	mov	r3, r9
 8011736:	e793      	b.n	8011660 <_printf_float+0x1d8>
 8011738:	2301      	movs	r3, #1
 801173a:	465a      	mov	r2, fp
 801173c:	4631      	mov	r1, r6
 801173e:	4628      	mov	r0, r5
 8011740:	47b8      	blx	r7
 8011742:	3001      	adds	r0, #1
 8011744:	f43f aefb 	beq.w	801153e <_printf_float+0xb6>
 8011748:	f10a 0a01 	add.w	sl, sl, #1
 801174c:	e7ee      	b.n	801172c <_printf_float+0x2a4>
 801174e:	bf00      	nop
 8011750:	7fefffff 	.word	0x7fefffff
 8011754:	08014e9e 	.word	0x08014e9e
 8011758:	08014e9a 	.word	0x08014e9a
 801175c:	08014ea6 	.word	0x08014ea6
 8011760:	08014ea2 	.word	0x08014ea2
 8011764:	08014eaa 	.word	0x08014eaa
 8011768:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801176a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801176e:	4553      	cmp	r3, sl
 8011770:	bfa8      	it	ge
 8011772:	4653      	movge	r3, sl
 8011774:	2b00      	cmp	r3, #0
 8011776:	4699      	mov	r9, r3
 8011778:	dc36      	bgt.n	80117e8 <_printf_float+0x360>
 801177a:	f04f 0b00 	mov.w	fp, #0
 801177e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011782:	f104 021a 	add.w	r2, r4, #26
 8011786:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011788:	9306      	str	r3, [sp, #24]
 801178a:	eba3 0309 	sub.w	r3, r3, r9
 801178e:	455b      	cmp	r3, fp
 8011790:	dc31      	bgt.n	80117f6 <_printf_float+0x36e>
 8011792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011794:	459a      	cmp	sl, r3
 8011796:	dc3a      	bgt.n	801180e <_printf_float+0x386>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	07da      	lsls	r2, r3, #31
 801179c:	d437      	bmi.n	801180e <_printf_float+0x386>
 801179e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a0:	ebaa 0903 	sub.w	r9, sl, r3
 80117a4:	9b06      	ldr	r3, [sp, #24]
 80117a6:	ebaa 0303 	sub.w	r3, sl, r3
 80117aa:	4599      	cmp	r9, r3
 80117ac:	bfa8      	it	ge
 80117ae:	4699      	movge	r9, r3
 80117b0:	f1b9 0f00 	cmp.w	r9, #0
 80117b4:	dc33      	bgt.n	801181e <_printf_float+0x396>
 80117b6:	f04f 0800 	mov.w	r8, #0
 80117ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80117be:	f104 0b1a 	add.w	fp, r4, #26
 80117c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117c4:	ebaa 0303 	sub.w	r3, sl, r3
 80117c8:	eba3 0309 	sub.w	r3, r3, r9
 80117cc:	4543      	cmp	r3, r8
 80117ce:	f77f af79 	ble.w	80116c4 <_printf_float+0x23c>
 80117d2:	2301      	movs	r3, #1
 80117d4:	465a      	mov	r2, fp
 80117d6:	4631      	mov	r1, r6
 80117d8:	4628      	mov	r0, r5
 80117da:	47b8      	blx	r7
 80117dc:	3001      	adds	r0, #1
 80117de:	f43f aeae 	beq.w	801153e <_printf_float+0xb6>
 80117e2:	f108 0801 	add.w	r8, r8, #1
 80117e6:	e7ec      	b.n	80117c2 <_printf_float+0x33a>
 80117e8:	4642      	mov	r2, r8
 80117ea:	4631      	mov	r1, r6
 80117ec:	4628      	mov	r0, r5
 80117ee:	47b8      	blx	r7
 80117f0:	3001      	adds	r0, #1
 80117f2:	d1c2      	bne.n	801177a <_printf_float+0x2f2>
 80117f4:	e6a3      	b.n	801153e <_printf_float+0xb6>
 80117f6:	2301      	movs	r3, #1
 80117f8:	4631      	mov	r1, r6
 80117fa:	4628      	mov	r0, r5
 80117fc:	9206      	str	r2, [sp, #24]
 80117fe:	47b8      	blx	r7
 8011800:	3001      	adds	r0, #1
 8011802:	f43f ae9c 	beq.w	801153e <_printf_float+0xb6>
 8011806:	9a06      	ldr	r2, [sp, #24]
 8011808:	f10b 0b01 	add.w	fp, fp, #1
 801180c:	e7bb      	b.n	8011786 <_printf_float+0x2fe>
 801180e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011812:	4631      	mov	r1, r6
 8011814:	4628      	mov	r0, r5
 8011816:	47b8      	blx	r7
 8011818:	3001      	adds	r0, #1
 801181a:	d1c0      	bne.n	801179e <_printf_float+0x316>
 801181c:	e68f      	b.n	801153e <_printf_float+0xb6>
 801181e:	9a06      	ldr	r2, [sp, #24]
 8011820:	464b      	mov	r3, r9
 8011822:	4442      	add	r2, r8
 8011824:	4631      	mov	r1, r6
 8011826:	4628      	mov	r0, r5
 8011828:	47b8      	blx	r7
 801182a:	3001      	adds	r0, #1
 801182c:	d1c3      	bne.n	80117b6 <_printf_float+0x32e>
 801182e:	e686      	b.n	801153e <_printf_float+0xb6>
 8011830:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011834:	f1ba 0f01 	cmp.w	sl, #1
 8011838:	dc01      	bgt.n	801183e <_printf_float+0x3b6>
 801183a:	07db      	lsls	r3, r3, #31
 801183c:	d536      	bpl.n	80118ac <_printf_float+0x424>
 801183e:	2301      	movs	r3, #1
 8011840:	4642      	mov	r2, r8
 8011842:	4631      	mov	r1, r6
 8011844:	4628      	mov	r0, r5
 8011846:	47b8      	blx	r7
 8011848:	3001      	adds	r0, #1
 801184a:	f43f ae78 	beq.w	801153e <_printf_float+0xb6>
 801184e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011852:	4631      	mov	r1, r6
 8011854:	4628      	mov	r0, r5
 8011856:	47b8      	blx	r7
 8011858:	3001      	adds	r0, #1
 801185a:	f43f ae70 	beq.w	801153e <_printf_float+0xb6>
 801185e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011862:	2200      	movs	r2, #0
 8011864:	2300      	movs	r3, #0
 8011866:	f10a 3aff 	add.w	sl, sl, #4294967295
 801186a:	f7ef f94d 	bl	8000b08 <__aeabi_dcmpeq>
 801186e:	b9c0      	cbnz	r0, 80118a2 <_printf_float+0x41a>
 8011870:	4653      	mov	r3, sl
 8011872:	f108 0201 	add.w	r2, r8, #1
 8011876:	4631      	mov	r1, r6
 8011878:	4628      	mov	r0, r5
 801187a:	47b8      	blx	r7
 801187c:	3001      	adds	r0, #1
 801187e:	d10c      	bne.n	801189a <_printf_float+0x412>
 8011880:	e65d      	b.n	801153e <_printf_float+0xb6>
 8011882:	2301      	movs	r3, #1
 8011884:	465a      	mov	r2, fp
 8011886:	4631      	mov	r1, r6
 8011888:	4628      	mov	r0, r5
 801188a:	47b8      	blx	r7
 801188c:	3001      	adds	r0, #1
 801188e:	f43f ae56 	beq.w	801153e <_printf_float+0xb6>
 8011892:	f108 0801 	add.w	r8, r8, #1
 8011896:	45d0      	cmp	r8, sl
 8011898:	dbf3      	blt.n	8011882 <_printf_float+0x3fa>
 801189a:	464b      	mov	r3, r9
 801189c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80118a0:	e6df      	b.n	8011662 <_printf_float+0x1da>
 80118a2:	f04f 0800 	mov.w	r8, #0
 80118a6:	f104 0b1a 	add.w	fp, r4, #26
 80118aa:	e7f4      	b.n	8011896 <_printf_float+0x40e>
 80118ac:	2301      	movs	r3, #1
 80118ae:	4642      	mov	r2, r8
 80118b0:	e7e1      	b.n	8011876 <_printf_float+0x3ee>
 80118b2:	2301      	movs	r3, #1
 80118b4:	464a      	mov	r2, r9
 80118b6:	4631      	mov	r1, r6
 80118b8:	4628      	mov	r0, r5
 80118ba:	47b8      	blx	r7
 80118bc:	3001      	adds	r0, #1
 80118be:	f43f ae3e 	beq.w	801153e <_printf_float+0xb6>
 80118c2:	f108 0801 	add.w	r8, r8, #1
 80118c6:	68e3      	ldr	r3, [r4, #12]
 80118c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80118ca:	1a5b      	subs	r3, r3, r1
 80118cc:	4543      	cmp	r3, r8
 80118ce:	dcf0      	bgt.n	80118b2 <_printf_float+0x42a>
 80118d0:	e6fc      	b.n	80116cc <_printf_float+0x244>
 80118d2:	f04f 0800 	mov.w	r8, #0
 80118d6:	f104 0919 	add.w	r9, r4, #25
 80118da:	e7f4      	b.n	80118c6 <_printf_float+0x43e>

080118dc <_printf_common>:
 80118dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e0:	4616      	mov	r6, r2
 80118e2:	4698      	mov	r8, r3
 80118e4:	688a      	ldr	r2, [r1, #8]
 80118e6:	690b      	ldr	r3, [r1, #16]
 80118e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80118ec:	4293      	cmp	r3, r2
 80118ee:	bfb8      	it	lt
 80118f0:	4613      	movlt	r3, r2
 80118f2:	6033      	str	r3, [r6, #0]
 80118f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80118f8:	4607      	mov	r7, r0
 80118fa:	460c      	mov	r4, r1
 80118fc:	b10a      	cbz	r2, 8011902 <_printf_common+0x26>
 80118fe:	3301      	adds	r3, #1
 8011900:	6033      	str	r3, [r6, #0]
 8011902:	6823      	ldr	r3, [r4, #0]
 8011904:	0699      	lsls	r1, r3, #26
 8011906:	bf42      	ittt	mi
 8011908:	6833      	ldrmi	r3, [r6, #0]
 801190a:	3302      	addmi	r3, #2
 801190c:	6033      	strmi	r3, [r6, #0]
 801190e:	6825      	ldr	r5, [r4, #0]
 8011910:	f015 0506 	ands.w	r5, r5, #6
 8011914:	d106      	bne.n	8011924 <_printf_common+0x48>
 8011916:	f104 0a19 	add.w	sl, r4, #25
 801191a:	68e3      	ldr	r3, [r4, #12]
 801191c:	6832      	ldr	r2, [r6, #0]
 801191e:	1a9b      	subs	r3, r3, r2
 8011920:	42ab      	cmp	r3, r5
 8011922:	dc26      	bgt.n	8011972 <_printf_common+0x96>
 8011924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011928:	6822      	ldr	r2, [r4, #0]
 801192a:	3b00      	subs	r3, #0
 801192c:	bf18      	it	ne
 801192e:	2301      	movne	r3, #1
 8011930:	0692      	lsls	r2, r2, #26
 8011932:	d42b      	bmi.n	801198c <_printf_common+0xb0>
 8011934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011938:	4641      	mov	r1, r8
 801193a:	4638      	mov	r0, r7
 801193c:	47c8      	blx	r9
 801193e:	3001      	adds	r0, #1
 8011940:	d01e      	beq.n	8011980 <_printf_common+0xa4>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	6922      	ldr	r2, [r4, #16]
 8011946:	f003 0306 	and.w	r3, r3, #6
 801194a:	2b04      	cmp	r3, #4
 801194c:	bf02      	ittt	eq
 801194e:	68e5      	ldreq	r5, [r4, #12]
 8011950:	6833      	ldreq	r3, [r6, #0]
 8011952:	1aed      	subeq	r5, r5, r3
 8011954:	68a3      	ldr	r3, [r4, #8]
 8011956:	bf0c      	ite	eq
 8011958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801195c:	2500      	movne	r5, #0
 801195e:	4293      	cmp	r3, r2
 8011960:	bfc4      	itt	gt
 8011962:	1a9b      	subgt	r3, r3, r2
 8011964:	18ed      	addgt	r5, r5, r3
 8011966:	2600      	movs	r6, #0
 8011968:	341a      	adds	r4, #26
 801196a:	42b5      	cmp	r5, r6
 801196c:	d11a      	bne.n	80119a4 <_printf_common+0xc8>
 801196e:	2000      	movs	r0, #0
 8011970:	e008      	b.n	8011984 <_printf_common+0xa8>
 8011972:	2301      	movs	r3, #1
 8011974:	4652      	mov	r2, sl
 8011976:	4641      	mov	r1, r8
 8011978:	4638      	mov	r0, r7
 801197a:	47c8      	blx	r9
 801197c:	3001      	adds	r0, #1
 801197e:	d103      	bne.n	8011988 <_printf_common+0xac>
 8011980:	f04f 30ff 	mov.w	r0, #4294967295
 8011984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011988:	3501      	adds	r5, #1
 801198a:	e7c6      	b.n	801191a <_printf_common+0x3e>
 801198c:	18e1      	adds	r1, r4, r3
 801198e:	1c5a      	adds	r2, r3, #1
 8011990:	2030      	movs	r0, #48	@ 0x30
 8011992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011996:	4422      	add	r2, r4
 8011998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801199c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80119a0:	3302      	adds	r3, #2
 80119a2:	e7c7      	b.n	8011934 <_printf_common+0x58>
 80119a4:	2301      	movs	r3, #1
 80119a6:	4622      	mov	r2, r4
 80119a8:	4641      	mov	r1, r8
 80119aa:	4638      	mov	r0, r7
 80119ac:	47c8      	blx	r9
 80119ae:	3001      	adds	r0, #1
 80119b0:	d0e6      	beq.n	8011980 <_printf_common+0xa4>
 80119b2:	3601      	adds	r6, #1
 80119b4:	e7d9      	b.n	801196a <_printf_common+0x8e>
	...

080119b8 <_printf_i>:
 80119b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119bc:	7e0f      	ldrb	r7, [r1, #24]
 80119be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80119c0:	2f78      	cmp	r7, #120	@ 0x78
 80119c2:	4691      	mov	r9, r2
 80119c4:	4680      	mov	r8, r0
 80119c6:	460c      	mov	r4, r1
 80119c8:	469a      	mov	sl, r3
 80119ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80119ce:	d807      	bhi.n	80119e0 <_printf_i+0x28>
 80119d0:	2f62      	cmp	r7, #98	@ 0x62
 80119d2:	d80a      	bhi.n	80119ea <_printf_i+0x32>
 80119d4:	2f00      	cmp	r7, #0
 80119d6:	f000 80d1 	beq.w	8011b7c <_printf_i+0x1c4>
 80119da:	2f58      	cmp	r7, #88	@ 0x58
 80119dc:	f000 80b8 	beq.w	8011b50 <_printf_i+0x198>
 80119e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80119e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80119e8:	e03a      	b.n	8011a60 <_printf_i+0xa8>
 80119ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80119ee:	2b15      	cmp	r3, #21
 80119f0:	d8f6      	bhi.n	80119e0 <_printf_i+0x28>
 80119f2:	a101      	add	r1, pc, #4	@ (adr r1, 80119f8 <_printf_i+0x40>)
 80119f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80119f8:	08011a51 	.word	0x08011a51
 80119fc:	08011a65 	.word	0x08011a65
 8011a00:	080119e1 	.word	0x080119e1
 8011a04:	080119e1 	.word	0x080119e1
 8011a08:	080119e1 	.word	0x080119e1
 8011a0c:	080119e1 	.word	0x080119e1
 8011a10:	08011a65 	.word	0x08011a65
 8011a14:	080119e1 	.word	0x080119e1
 8011a18:	080119e1 	.word	0x080119e1
 8011a1c:	080119e1 	.word	0x080119e1
 8011a20:	080119e1 	.word	0x080119e1
 8011a24:	08011b63 	.word	0x08011b63
 8011a28:	08011a8f 	.word	0x08011a8f
 8011a2c:	08011b1d 	.word	0x08011b1d
 8011a30:	080119e1 	.word	0x080119e1
 8011a34:	080119e1 	.word	0x080119e1
 8011a38:	08011b85 	.word	0x08011b85
 8011a3c:	080119e1 	.word	0x080119e1
 8011a40:	08011a8f 	.word	0x08011a8f
 8011a44:	080119e1 	.word	0x080119e1
 8011a48:	080119e1 	.word	0x080119e1
 8011a4c:	08011b25 	.word	0x08011b25
 8011a50:	6833      	ldr	r3, [r6, #0]
 8011a52:	1d1a      	adds	r2, r3, #4
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	6032      	str	r2, [r6, #0]
 8011a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011a60:	2301      	movs	r3, #1
 8011a62:	e09c      	b.n	8011b9e <_printf_i+0x1e6>
 8011a64:	6833      	ldr	r3, [r6, #0]
 8011a66:	6820      	ldr	r0, [r4, #0]
 8011a68:	1d19      	adds	r1, r3, #4
 8011a6a:	6031      	str	r1, [r6, #0]
 8011a6c:	0606      	lsls	r6, r0, #24
 8011a6e:	d501      	bpl.n	8011a74 <_printf_i+0xbc>
 8011a70:	681d      	ldr	r5, [r3, #0]
 8011a72:	e003      	b.n	8011a7c <_printf_i+0xc4>
 8011a74:	0645      	lsls	r5, r0, #25
 8011a76:	d5fb      	bpl.n	8011a70 <_printf_i+0xb8>
 8011a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011a7c:	2d00      	cmp	r5, #0
 8011a7e:	da03      	bge.n	8011a88 <_printf_i+0xd0>
 8011a80:	232d      	movs	r3, #45	@ 0x2d
 8011a82:	426d      	negs	r5, r5
 8011a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a88:	4858      	ldr	r0, [pc, #352]	@ (8011bec <_printf_i+0x234>)
 8011a8a:	230a      	movs	r3, #10
 8011a8c:	e011      	b.n	8011ab2 <_printf_i+0xfa>
 8011a8e:	6821      	ldr	r1, [r4, #0]
 8011a90:	6833      	ldr	r3, [r6, #0]
 8011a92:	0608      	lsls	r0, r1, #24
 8011a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8011a98:	d402      	bmi.n	8011aa0 <_printf_i+0xe8>
 8011a9a:	0649      	lsls	r1, r1, #25
 8011a9c:	bf48      	it	mi
 8011a9e:	b2ad      	uxthmi	r5, r5
 8011aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011aa2:	4852      	ldr	r0, [pc, #328]	@ (8011bec <_printf_i+0x234>)
 8011aa4:	6033      	str	r3, [r6, #0]
 8011aa6:	bf14      	ite	ne
 8011aa8:	230a      	movne	r3, #10
 8011aaa:	2308      	moveq	r3, #8
 8011aac:	2100      	movs	r1, #0
 8011aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011ab2:	6866      	ldr	r6, [r4, #4]
 8011ab4:	60a6      	str	r6, [r4, #8]
 8011ab6:	2e00      	cmp	r6, #0
 8011ab8:	db05      	blt.n	8011ac6 <_printf_i+0x10e>
 8011aba:	6821      	ldr	r1, [r4, #0]
 8011abc:	432e      	orrs	r6, r5
 8011abe:	f021 0104 	bic.w	r1, r1, #4
 8011ac2:	6021      	str	r1, [r4, #0]
 8011ac4:	d04b      	beq.n	8011b5e <_printf_i+0x1a6>
 8011ac6:	4616      	mov	r6, r2
 8011ac8:	fbb5 f1f3 	udiv	r1, r5, r3
 8011acc:	fb03 5711 	mls	r7, r3, r1, r5
 8011ad0:	5dc7      	ldrb	r7, [r0, r7]
 8011ad2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ad6:	462f      	mov	r7, r5
 8011ad8:	42bb      	cmp	r3, r7
 8011ada:	460d      	mov	r5, r1
 8011adc:	d9f4      	bls.n	8011ac8 <_printf_i+0x110>
 8011ade:	2b08      	cmp	r3, #8
 8011ae0:	d10b      	bne.n	8011afa <_printf_i+0x142>
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	07df      	lsls	r7, r3, #31
 8011ae6:	d508      	bpl.n	8011afa <_printf_i+0x142>
 8011ae8:	6923      	ldr	r3, [r4, #16]
 8011aea:	6861      	ldr	r1, [r4, #4]
 8011aec:	4299      	cmp	r1, r3
 8011aee:	bfde      	ittt	le
 8011af0:	2330      	movle	r3, #48	@ 0x30
 8011af2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011af6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011afa:	1b92      	subs	r2, r2, r6
 8011afc:	6122      	str	r2, [r4, #16]
 8011afe:	f8cd a000 	str.w	sl, [sp]
 8011b02:	464b      	mov	r3, r9
 8011b04:	aa03      	add	r2, sp, #12
 8011b06:	4621      	mov	r1, r4
 8011b08:	4640      	mov	r0, r8
 8011b0a:	f7ff fee7 	bl	80118dc <_printf_common>
 8011b0e:	3001      	adds	r0, #1
 8011b10:	d14a      	bne.n	8011ba8 <_printf_i+0x1f0>
 8011b12:	f04f 30ff 	mov.w	r0, #4294967295
 8011b16:	b004      	add	sp, #16
 8011b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	f043 0320 	orr.w	r3, r3, #32
 8011b22:	6023      	str	r3, [r4, #0]
 8011b24:	4832      	ldr	r0, [pc, #200]	@ (8011bf0 <_printf_i+0x238>)
 8011b26:	2778      	movs	r7, #120	@ 0x78
 8011b28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011b2c:	6823      	ldr	r3, [r4, #0]
 8011b2e:	6831      	ldr	r1, [r6, #0]
 8011b30:	061f      	lsls	r7, r3, #24
 8011b32:	f851 5b04 	ldr.w	r5, [r1], #4
 8011b36:	d402      	bmi.n	8011b3e <_printf_i+0x186>
 8011b38:	065f      	lsls	r7, r3, #25
 8011b3a:	bf48      	it	mi
 8011b3c:	b2ad      	uxthmi	r5, r5
 8011b3e:	6031      	str	r1, [r6, #0]
 8011b40:	07d9      	lsls	r1, r3, #31
 8011b42:	bf44      	itt	mi
 8011b44:	f043 0320 	orrmi.w	r3, r3, #32
 8011b48:	6023      	strmi	r3, [r4, #0]
 8011b4a:	b11d      	cbz	r5, 8011b54 <_printf_i+0x19c>
 8011b4c:	2310      	movs	r3, #16
 8011b4e:	e7ad      	b.n	8011aac <_printf_i+0xf4>
 8011b50:	4826      	ldr	r0, [pc, #152]	@ (8011bec <_printf_i+0x234>)
 8011b52:	e7e9      	b.n	8011b28 <_printf_i+0x170>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	f023 0320 	bic.w	r3, r3, #32
 8011b5a:	6023      	str	r3, [r4, #0]
 8011b5c:	e7f6      	b.n	8011b4c <_printf_i+0x194>
 8011b5e:	4616      	mov	r6, r2
 8011b60:	e7bd      	b.n	8011ade <_printf_i+0x126>
 8011b62:	6833      	ldr	r3, [r6, #0]
 8011b64:	6825      	ldr	r5, [r4, #0]
 8011b66:	6961      	ldr	r1, [r4, #20]
 8011b68:	1d18      	adds	r0, r3, #4
 8011b6a:	6030      	str	r0, [r6, #0]
 8011b6c:	062e      	lsls	r6, r5, #24
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	d501      	bpl.n	8011b76 <_printf_i+0x1be>
 8011b72:	6019      	str	r1, [r3, #0]
 8011b74:	e002      	b.n	8011b7c <_printf_i+0x1c4>
 8011b76:	0668      	lsls	r0, r5, #25
 8011b78:	d5fb      	bpl.n	8011b72 <_printf_i+0x1ba>
 8011b7a:	8019      	strh	r1, [r3, #0]
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	6123      	str	r3, [r4, #16]
 8011b80:	4616      	mov	r6, r2
 8011b82:	e7bc      	b.n	8011afe <_printf_i+0x146>
 8011b84:	6833      	ldr	r3, [r6, #0]
 8011b86:	1d1a      	adds	r2, r3, #4
 8011b88:	6032      	str	r2, [r6, #0]
 8011b8a:	681e      	ldr	r6, [r3, #0]
 8011b8c:	6862      	ldr	r2, [r4, #4]
 8011b8e:	2100      	movs	r1, #0
 8011b90:	4630      	mov	r0, r6
 8011b92:	f7ee fb3d 	bl	8000210 <memchr>
 8011b96:	b108      	cbz	r0, 8011b9c <_printf_i+0x1e4>
 8011b98:	1b80      	subs	r0, r0, r6
 8011b9a:	6060      	str	r0, [r4, #4]
 8011b9c:	6863      	ldr	r3, [r4, #4]
 8011b9e:	6123      	str	r3, [r4, #16]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ba6:	e7aa      	b.n	8011afe <_printf_i+0x146>
 8011ba8:	6923      	ldr	r3, [r4, #16]
 8011baa:	4632      	mov	r2, r6
 8011bac:	4649      	mov	r1, r9
 8011bae:	4640      	mov	r0, r8
 8011bb0:	47d0      	blx	sl
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	d0ad      	beq.n	8011b12 <_printf_i+0x15a>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	079b      	lsls	r3, r3, #30
 8011bba:	d413      	bmi.n	8011be4 <_printf_i+0x22c>
 8011bbc:	68e0      	ldr	r0, [r4, #12]
 8011bbe:	9b03      	ldr	r3, [sp, #12]
 8011bc0:	4298      	cmp	r0, r3
 8011bc2:	bfb8      	it	lt
 8011bc4:	4618      	movlt	r0, r3
 8011bc6:	e7a6      	b.n	8011b16 <_printf_i+0x15e>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	4632      	mov	r2, r6
 8011bcc:	4649      	mov	r1, r9
 8011bce:	4640      	mov	r0, r8
 8011bd0:	47d0      	blx	sl
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	d09d      	beq.n	8011b12 <_printf_i+0x15a>
 8011bd6:	3501      	adds	r5, #1
 8011bd8:	68e3      	ldr	r3, [r4, #12]
 8011bda:	9903      	ldr	r1, [sp, #12]
 8011bdc:	1a5b      	subs	r3, r3, r1
 8011bde:	42ab      	cmp	r3, r5
 8011be0:	dcf2      	bgt.n	8011bc8 <_printf_i+0x210>
 8011be2:	e7eb      	b.n	8011bbc <_printf_i+0x204>
 8011be4:	2500      	movs	r5, #0
 8011be6:	f104 0619 	add.w	r6, r4, #25
 8011bea:	e7f5      	b.n	8011bd8 <_printf_i+0x220>
 8011bec:	08014eac 	.word	0x08014eac
 8011bf0:	08014ebd 	.word	0x08014ebd

08011bf4 <std>:
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	b510      	push	{r4, lr}
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8011bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c02:	6083      	str	r3, [r0, #8]
 8011c04:	8181      	strh	r1, [r0, #12]
 8011c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c08:	81c2      	strh	r2, [r0, #14]
 8011c0a:	6183      	str	r3, [r0, #24]
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	2208      	movs	r2, #8
 8011c10:	305c      	adds	r0, #92	@ 0x5c
 8011c12:	f000 fa2f 	bl	8012074 <memset>
 8011c16:	4b0d      	ldr	r3, [pc, #52]	@ (8011c4c <std+0x58>)
 8011c18:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011c50 <std+0x5c>)
 8011c1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c54 <std+0x60>)
 8011c20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c22:	4b0d      	ldr	r3, [pc, #52]	@ (8011c58 <std+0x64>)
 8011c24:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c26:	4b0d      	ldr	r3, [pc, #52]	@ (8011c5c <std+0x68>)
 8011c28:	6224      	str	r4, [r4, #32]
 8011c2a:	429c      	cmp	r4, r3
 8011c2c:	d006      	beq.n	8011c3c <std+0x48>
 8011c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c32:	4294      	cmp	r4, r2
 8011c34:	d002      	beq.n	8011c3c <std+0x48>
 8011c36:	33d0      	adds	r3, #208	@ 0xd0
 8011c38:	429c      	cmp	r4, r3
 8011c3a:	d105      	bne.n	8011c48 <std+0x54>
 8011c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c44:	f000 bb6c 	b.w	8012320 <__retarget_lock_init_recursive>
 8011c48:	bd10      	pop	{r4, pc}
 8011c4a:	bf00      	nop
 8011c4c:	08011ec5 	.word	0x08011ec5
 8011c50:	08011ee7 	.word	0x08011ee7
 8011c54:	08011f1f 	.word	0x08011f1f
 8011c58:	08011f43 	.word	0x08011f43
 8011c5c:	200091d8 	.word	0x200091d8

08011c60 <stdio_exit_handler>:
 8011c60:	4a02      	ldr	r2, [pc, #8]	@ (8011c6c <stdio_exit_handler+0xc>)
 8011c62:	4903      	ldr	r1, [pc, #12]	@ (8011c70 <stdio_exit_handler+0x10>)
 8011c64:	4803      	ldr	r0, [pc, #12]	@ (8011c74 <stdio_exit_handler+0x14>)
 8011c66:	f000 b869 	b.w	8011d3c <_fwalk_sglue>
 8011c6a:	bf00      	nop
 8011c6c:	20000014 	.word	0x20000014
 8011c70:	08014891 	.word	0x08014891
 8011c74:	20000190 	.word	0x20000190

08011c78 <cleanup_stdio>:
 8011c78:	6841      	ldr	r1, [r0, #4]
 8011c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8011cac <cleanup_stdio+0x34>)
 8011c7c:	4299      	cmp	r1, r3
 8011c7e:	b510      	push	{r4, lr}
 8011c80:	4604      	mov	r4, r0
 8011c82:	d001      	beq.n	8011c88 <cleanup_stdio+0x10>
 8011c84:	f002 fe04 	bl	8014890 <_fflush_r>
 8011c88:	68a1      	ldr	r1, [r4, #8]
 8011c8a:	4b09      	ldr	r3, [pc, #36]	@ (8011cb0 <cleanup_stdio+0x38>)
 8011c8c:	4299      	cmp	r1, r3
 8011c8e:	d002      	beq.n	8011c96 <cleanup_stdio+0x1e>
 8011c90:	4620      	mov	r0, r4
 8011c92:	f002 fdfd 	bl	8014890 <_fflush_r>
 8011c96:	68e1      	ldr	r1, [r4, #12]
 8011c98:	4b06      	ldr	r3, [pc, #24]	@ (8011cb4 <cleanup_stdio+0x3c>)
 8011c9a:	4299      	cmp	r1, r3
 8011c9c:	d004      	beq.n	8011ca8 <cleanup_stdio+0x30>
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ca4:	f002 bdf4 	b.w	8014890 <_fflush_r>
 8011ca8:	bd10      	pop	{r4, pc}
 8011caa:	bf00      	nop
 8011cac:	200091d8 	.word	0x200091d8
 8011cb0:	20009240 	.word	0x20009240
 8011cb4:	200092a8 	.word	0x200092a8

08011cb8 <global_stdio_init.part.0>:
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	4b0b      	ldr	r3, [pc, #44]	@ (8011ce8 <global_stdio_init.part.0+0x30>)
 8011cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8011cec <global_stdio_init.part.0+0x34>)
 8011cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8011cf0 <global_stdio_init.part.0+0x38>)
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	2104      	movs	r1, #4
 8011cc8:	f7ff ff94 	bl	8011bf4 <std>
 8011ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	2109      	movs	r1, #9
 8011cd4:	f7ff ff8e 	bl	8011bf4 <std>
 8011cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011cdc:	2202      	movs	r2, #2
 8011cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ce2:	2112      	movs	r1, #18
 8011ce4:	f7ff bf86 	b.w	8011bf4 <std>
 8011ce8:	20009310 	.word	0x20009310
 8011cec:	200091d8 	.word	0x200091d8
 8011cf0:	08011c61 	.word	0x08011c61

08011cf4 <__sfp_lock_acquire>:
 8011cf4:	4801      	ldr	r0, [pc, #4]	@ (8011cfc <__sfp_lock_acquire+0x8>)
 8011cf6:	f000 bb14 	b.w	8012322 <__retarget_lock_acquire_recursive>
 8011cfa:	bf00      	nop
 8011cfc:	20009319 	.word	0x20009319

08011d00 <__sfp_lock_release>:
 8011d00:	4801      	ldr	r0, [pc, #4]	@ (8011d08 <__sfp_lock_release+0x8>)
 8011d02:	f000 bb0f 	b.w	8012324 <__retarget_lock_release_recursive>
 8011d06:	bf00      	nop
 8011d08:	20009319 	.word	0x20009319

08011d0c <__sinit>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	4604      	mov	r4, r0
 8011d10:	f7ff fff0 	bl	8011cf4 <__sfp_lock_acquire>
 8011d14:	6a23      	ldr	r3, [r4, #32]
 8011d16:	b11b      	cbz	r3, 8011d20 <__sinit+0x14>
 8011d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d1c:	f7ff bff0 	b.w	8011d00 <__sfp_lock_release>
 8011d20:	4b04      	ldr	r3, [pc, #16]	@ (8011d34 <__sinit+0x28>)
 8011d22:	6223      	str	r3, [r4, #32]
 8011d24:	4b04      	ldr	r3, [pc, #16]	@ (8011d38 <__sinit+0x2c>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1f5      	bne.n	8011d18 <__sinit+0xc>
 8011d2c:	f7ff ffc4 	bl	8011cb8 <global_stdio_init.part.0>
 8011d30:	e7f2      	b.n	8011d18 <__sinit+0xc>
 8011d32:	bf00      	nop
 8011d34:	08011c79 	.word	0x08011c79
 8011d38:	20009310 	.word	0x20009310

08011d3c <_fwalk_sglue>:
 8011d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d40:	4607      	mov	r7, r0
 8011d42:	4688      	mov	r8, r1
 8011d44:	4614      	mov	r4, r2
 8011d46:	2600      	movs	r6, #0
 8011d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8011d50:	d505      	bpl.n	8011d5e <_fwalk_sglue+0x22>
 8011d52:	6824      	ldr	r4, [r4, #0]
 8011d54:	2c00      	cmp	r4, #0
 8011d56:	d1f7      	bne.n	8011d48 <_fwalk_sglue+0xc>
 8011d58:	4630      	mov	r0, r6
 8011d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d5e:	89ab      	ldrh	r3, [r5, #12]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d907      	bls.n	8011d74 <_fwalk_sglue+0x38>
 8011d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	d003      	beq.n	8011d74 <_fwalk_sglue+0x38>
 8011d6c:	4629      	mov	r1, r5
 8011d6e:	4638      	mov	r0, r7
 8011d70:	47c0      	blx	r8
 8011d72:	4306      	orrs	r6, r0
 8011d74:	3568      	adds	r5, #104	@ 0x68
 8011d76:	e7e9      	b.n	8011d4c <_fwalk_sglue+0x10>

08011d78 <iprintf>:
 8011d78:	b40f      	push	{r0, r1, r2, r3}
 8011d7a:	b507      	push	{r0, r1, r2, lr}
 8011d7c:	4906      	ldr	r1, [pc, #24]	@ (8011d98 <iprintf+0x20>)
 8011d7e:	ab04      	add	r3, sp, #16
 8011d80:	6808      	ldr	r0, [r1, #0]
 8011d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d86:	6881      	ldr	r1, [r0, #8]
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	f002 fbe5 	bl	8014558 <_vfiprintf_r>
 8011d8e:	b003      	add	sp, #12
 8011d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d94:	b004      	add	sp, #16
 8011d96:	4770      	bx	lr
 8011d98:	2000018c 	.word	0x2000018c

08011d9c <_puts_r>:
 8011d9c:	6a03      	ldr	r3, [r0, #32]
 8011d9e:	b570      	push	{r4, r5, r6, lr}
 8011da0:	6884      	ldr	r4, [r0, #8]
 8011da2:	4605      	mov	r5, r0
 8011da4:	460e      	mov	r6, r1
 8011da6:	b90b      	cbnz	r3, 8011dac <_puts_r+0x10>
 8011da8:	f7ff ffb0 	bl	8011d0c <__sinit>
 8011dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011dae:	07db      	lsls	r3, r3, #31
 8011db0:	d405      	bmi.n	8011dbe <_puts_r+0x22>
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	0598      	lsls	r0, r3, #22
 8011db6:	d402      	bmi.n	8011dbe <_puts_r+0x22>
 8011db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dba:	f000 fab2 	bl	8012322 <__retarget_lock_acquire_recursive>
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	0719      	lsls	r1, r3, #28
 8011dc2:	d502      	bpl.n	8011dca <_puts_r+0x2e>
 8011dc4:	6923      	ldr	r3, [r4, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d135      	bne.n	8011e36 <_puts_r+0x9a>
 8011dca:	4621      	mov	r1, r4
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f000 f8fb 	bl	8011fc8 <__swsetup_r>
 8011dd2:	b380      	cbz	r0, 8011e36 <_puts_r+0x9a>
 8011dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8011dd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011dda:	07da      	lsls	r2, r3, #31
 8011ddc:	d405      	bmi.n	8011dea <_puts_r+0x4e>
 8011dde:	89a3      	ldrh	r3, [r4, #12]
 8011de0:	059b      	lsls	r3, r3, #22
 8011de2:	d402      	bmi.n	8011dea <_puts_r+0x4e>
 8011de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011de6:	f000 fa9d 	bl	8012324 <__retarget_lock_release_recursive>
 8011dea:	4628      	mov	r0, r5
 8011dec:	bd70      	pop	{r4, r5, r6, pc}
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	da04      	bge.n	8011dfc <_puts_r+0x60>
 8011df2:	69a2      	ldr	r2, [r4, #24]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	dc17      	bgt.n	8011e28 <_puts_r+0x8c>
 8011df8:	290a      	cmp	r1, #10
 8011dfa:	d015      	beq.n	8011e28 <_puts_r+0x8c>
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	1c5a      	adds	r2, r3, #1
 8011e00:	6022      	str	r2, [r4, #0]
 8011e02:	7019      	strb	r1, [r3, #0]
 8011e04:	68a3      	ldr	r3, [r4, #8]
 8011e06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	60a3      	str	r3, [r4, #8]
 8011e0e:	2900      	cmp	r1, #0
 8011e10:	d1ed      	bne.n	8011dee <_puts_r+0x52>
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	da11      	bge.n	8011e3a <_puts_r+0x9e>
 8011e16:	4622      	mov	r2, r4
 8011e18:	210a      	movs	r1, #10
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	f000 f895 	bl	8011f4a <__swbuf_r>
 8011e20:	3001      	adds	r0, #1
 8011e22:	d0d7      	beq.n	8011dd4 <_puts_r+0x38>
 8011e24:	250a      	movs	r5, #10
 8011e26:	e7d7      	b.n	8011dd8 <_puts_r+0x3c>
 8011e28:	4622      	mov	r2, r4
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f000 f88d 	bl	8011f4a <__swbuf_r>
 8011e30:	3001      	adds	r0, #1
 8011e32:	d1e7      	bne.n	8011e04 <_puts_r+0x68>
 8011e34:	e7ce      	b.n	8011dd4 <_puts_r+0x38>
 8011e36:	3e01      	subs	r6, #1
 8011e38:	e7e4      	b.n	8011e04 <_puts_r+0x68>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	1c5a      	adds	r2, r3, #1
 8011e3e:	6022      	str	r2, [r4, #0]
 8011e40:	220a      	movs	r2, #10
 8011e42:	701a      	strb	r2, [r3, #0]
 8011e44:	e7ee      	b.n	8011e24 <_puts_r+0x88>
	...

08011e48 <puts>:
 8011e48:	4b02      	ldr	r3, [pc, #8]	@ (8011e54 <puts+0xc>)
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	6818      	ldr	r0, [r3, #0]
 8011e4e:	f7ff bfa5 	b.w	8011d9c <_puts_r>
 8011e52:	bf00      	nop
 8011e54:	2000018c 	.word	0x2000018c

08011e58 <sniprintf>:
 8011e58:	b40c      	push	{r2, r3}
 8011e5a:	b530      	push	{r4, r5, lr}
 8011e5c:	4b18      	ldr	r3, [pc, #96]	@ (8011ec0 <sniprintf+0x68>)
 8011e5e:	1e0c      	subs	r4, r1, #0
 8011e60:	681d      	ldr	r5, [r3, #0]
 8011e62:	b09d      	sub	sp, #116	@ 0x74
 8011e64:	da08      	bge.n	8011e78 <sniprintf+0x20>
 8011e66:	238b      	movs	r3, #139	@ 0x8b
 8011e68:	602b      	str	r3, [r5, #0]
 8011e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e6e:	b01d      	add	sp, #116	@ 0x74
 8011e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e74:	b002      	add	sp, #8
 8011e76:	4770      	bx	lr
 8011e78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011e7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e80:	f04f 0300 	mov.w	r3, #0
 8011e84:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011e86:	bf14      	ite	ne
 8011e88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011e8c:	4623      	moveq	r3, r4
 8011e8e:	9304      	str	r3, [sp, #16]
 8011e90:	9307      	str	r3, [sp, #28]
 8011e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e96:	9002      	str	r0, [sp, #8]
 8011e98:	9006      	str	r0, [sp, #24]
 8011e9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011ea0:	ab21      	add	r3, sp, #132	@ 0x84
 8011ea2:	a902      	add	r1, sp, #8
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	9301      	str	r3, [sp, #4]
 8011ea8:	f002 fa30 	bl	801430c <_svfiprintf_r>
 8011eac:	1c43      	adds	r3, r0, #1
 8011eae:	bfbc      	itt	lt
 8011eb0:	238b      	movlt	r3, #139	@ 0x8b
 8011eb2:	602b      	strlt	r3, [r5, #0]
 8011eb4:	2c00      	cmp	r4, #0
 8011eb6:	d0da      	beq.n	8011e6e <sniprintf+0x16>
 8011eb8:	9b02      	ldr	r3, [sp, #8]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	701a      	strb	r2, [r3, #0]
 8011ebe:	e7d6      	b.n	8011e6e <sniprintf+0x16>
 8011ec0:	2000018c 	.word	0x2000018c

08011ec4 <__sread>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	460c      	mov	r4, r1
 8011ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ecc:	f000 f9da 	bl	8012284 <_read_r>
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	bfab      	itete	ge
 8011ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ed8:	181b      	addge	r3, r3, r0
 8011eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011ede:	bfac      	ite	ge
 8011ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011ee2:	81a3      	strhlt	r3, [r4, #12]
 8011ee4:	bd10      	pop	{r4, pc}

08011ee6 <__swrite>:
 8011ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eea:	461f      	mov	r7, r3
 8011eec:	898b      	ldrh	r3, [r1, #12]
 8011eee:	05db      	lsls	r3, r3, #23
 8011ef0:	4605      	mov	r5, r0
 8011ef2:	460c      	mov	r4, r1
 8011ef4:	4616      	mov	r6, r2
 8011ef6:	d505      	bpl.n	8011f04 <__swrite+0x1e>
 8011ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011efc:	2302      	movs	r3, #2
 8011efe:	2200      	movs	r2, #0
 8011f00:	f000 f9ae 	bl	8012260 <_lseek_r>
 8011f04:	89a3      	ldrh	r3, [r4, #12]
 8011f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011f0e:	81a3      	strh	r3, [r4, #12]
 8011f10:	4632      	mov	r2, r6
 8011f12:	463b      	mov	r3, r7
 8011f14:	4628      	mov	r0, r5
 8011f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1a:	f000 b9c5 	b.w	80122a8 <_write_r>

08011f1e <__sseek>:
 8011f1e:	b510      	push	{r4, lr}
 8011f20:	460c      	mov	r4, r1
 8011f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f26:	f000 f99b 	bl	8012260 <_lseek_r>
 8011f2a:	1c43      	adds	r3, r0, #1
 8011f2c:	89a3      	ldrh	r3, [r4, #12]
 8011f2e:	bf15      	itete	ne
 8011f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011f3a:	81a3      	strheq	r3, [r4, #12]
 8011f3c:	bf18      	it	ne
 8011f3e:	81a3      	strhne	r3, [r4, #12]
 8011f40:	bd10      	pop	{r4, pc}

08011f42 <__sclose>:
 8011f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f46:	f000 b91d 	b.w	8012184 <_close_r>

08011f4a <__swbuf_r>:
 8011f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4c:	460e      	mov	r6, r1
 8011f4e:	4614      	mov	r4, r2
 8011f50:	4605      	mov	r5, r0
 8011f52:	b118      	cbz	r0, 8011f5c <__swbuf_r+0x12>
 8011f54:	6a03      	ldr	r3, [r0, #32]
 8011f56:	b90b      	cbnz	r3, 8011f5c <__swbuf_r+0x12>
 8011f58:	f7ff fed8 	bl	8011d0c <__sinit>
 8011f5c:	69a3      	ldr	r3, [r4, #24]
 8011f5e:	60a3      	str	r3, [r4, #8]
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	071a      	lsls	r2, r3, #28
 8011f64:	d501      	bpl.n	8011f6a <__swbuf_r+0x20>
 8011f66:	6923      	ldr	r3, [r4, #16]
 8011f68:	b943      	cbnz	r3, 8011f7c <__swbuf_r+0x32>
 8011f6a:	4621      	mov	r1, r4
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f000 f82b 	bl	8011fc8 <__swsetup_r>
 8011f72:	b118      	cbz	r0, 8011f7c <__swbuf_r+0x32>
 8011f74:	f04f 37ff 	mov.w	r7, #4294967295
 8011f78:	4638      	mov	r0, r7
 8011f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	6922      	ldr	r2, [r4, #16]
 8011f80:	1a98      	subs	r0, r3, r2
 8011f82:	6963      	ldr	r3, [r4, #20]
 8011f84:	b2f6      	uxtb	r6, r6
 8011f86:	4283      	cmp	r3, r0
 8011f88:	4637      	mov	r7, r6
 8011f8a:	dc05      	bgt.n	8011f98 <__swbuf_r+0x4e>
 8011f8c:	4621      	mov	r1, r4
 8011f8e:	4628      	mov	r0, r5
 8011f90:	f002 fc7e 	bl	8014890 <_fflush_r>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d1ed      	bne.n	8011f74 <__swbuf_r+0x2a>
 8011f98:	68a3      	ldr	r3, [r4, #8]
 8011f9a:	3b01      	subs	r3, #1
 8011f9c:	60a3      	str	r3, [r4, #8]
 8011f9e:	6823      	ldr	r3, [r4, #0]
 8011fa0:	1c5a      	adds	r2, r3, #1
 8011fa2:	6022      	str	r2, [r4, #0]
 8011fa4:	701e      	strb	r6, [r3, #0]
 8011fa6:	6962      	ldr	r2, [r4, #20]
 8011fa8:	1c43      	adds	r3, r0, #1
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d004      	beq.n	8011fb8 <__swbuf_r+0x6e>
 8011fae:	89a3      	ldrh	r3, [r4, #12]
 8011fb0:	07db      	lsls	r3, r3, #31
 8011fb2:	d5e1      	bpl.n	8011f78 <__swbuf_r+0x2e>
 8011fb4:	2e0a      	cmp	r6, #10
 8011fb6:	d1df      	bne.n	8011f78 <__swbuf_r+0x2e>
 8011fb8:	4621      	mov	r1, r4
 8011fba:	4628      	mov	r0, r5
 8011fbc:	f002 fc68 	bl	8014890 <_fflush_r>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d0d9      	beq.n	8011f78 <__swbuf_r+0x2e>
 8011fc4:	e7d6      	b.n	8011f74 <__swbuf_r+0x2a>
	...

08011fc8 <__swsetup_r>:
 8011fc8:	b538      	push	{r3, r4, r5, lr}
 8011fca:	4b29      	ldr	r3, [pc, #164]	@ (8012070 <__swsetup_r+0xa8>)
 8011fcc:	4605      	mov	r5, r0
 8011fce:	6818      	ldr	r0, [r3, #0]
 8011fd0:	460c      	mov	r4, r1
 8011fd2:	b118      	cbz	r0, 8011fdc <__swsetup_r+0x14>
 8011fd4:	6a03      	ldr	r3, [r0, #32]
 8011fd6:	b90b      	cbnz	r3, 8011fdc <__swsetup_r+0x14>
 8011fd8:	f7ff fe98 	bl	8011d0c <__sinit>
 8011fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fe0:	0719      	lsls	r1, r3, #28
 8011fe2:	d422      	bmi.n	801202a <__swsetup_r+0x62>
 8011fe4:	06da      	lsls	r2, r3, #27
 8011fe6:	d407      	bmi.n	8011ff8 <__swsetup_r+0x30>
 8011fe8:	2209      	movs	r2, #9
 8011fea:	602a      	str	r2, [r5, #0]
 8011fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ff0:	81a3      	strh	r3, [r4, #12]
 8011ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff6:	e033      	b.n	8012060 <__swsetup_r+0x98>
 8011ff8:	0758      	lsls	r0, r3, #29
 8011ffa:	d512      	bpl.n	8012022 <__swsetup_r+0x5a>
 8011ffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ffe:	b141      	cbz	r1, 8012012 <__swsetup_r+0x4a>
 8012000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012004:	4299      	cmp	r1, r3
 8012006:	d002      	beq.n	801200e <__swsetup_r+0x46>
 8012008:	4628      	mov	r0, r5
 801200a:	f001 f821 	bl	8013050 <_free_r>
 801200e:	2300      	movs	r3, #0
 8012010:	6363      	str	r3, [r4, #52]	@ 0x34
 8012012:	89a3      	ldrh	r3, [r4, #12]
 8012014:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012018:	81a3      	strh	r3, [r4, #12]
 801201a:	2300      	movs	r3, #0
 801201c:	6063      	str	r3, [r4, #4]
 801201e:	6923      	ldr	r3, [r4, #16]
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	f043 0308 	orr.w	r3, r3, #8
 8012028:	81a3      	strh	r3, [r4, #12]
 801202a:	6923      	ldr	r3, [r4, #16]
 801202c:	b94b      	cbnz	r3, 8012042 <__swsetup_r+0x7a>
 801202e:	89a3      	ldrh	r3, [r4, #12]
 8012030:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012038:	d003      	beq.n	8012042 <__swsetup_r+0x7a>
 801203a:	4621      	mov	r1, r4
 801203c:	4628      	mov	r0, r5
 801203e:	f002 fc87 	bl	8014950 <__smakebuf_r>
 8012042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012046:	f013 0201 	ands.w	r2, r3, #1
 801204a:	d00a      	beq.n	8012062 <__swsetup_r+0x9a>
 801204c:	2200      	movs	r2, #0
 801204e:	60a2      	str	r2, [r4, #8]
 8012050:	6962      	ldr	r2, [r4, #20]
 8012052:	4252      	negs	r2, r2
 8012054:	61a2      	str	r2, [r4, #24]
 8012056:	6922      	ldr	r2, [r4, #16]
 8012058:	b942      	cbnz	r2, 801206c <__swsetup_r+0xa4>
 801205a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801205e:	d1c5      	bne.n	8011fec <__swsetup_r+0x24>
 8012060:	bd38      	pop	{r3, r4, r5, pc}
 8012062:	0799      	lsls	r1, r3, #30
 8012064:	bf58      	it	pl
 8012066:	6962      	ldrpl	r2, [r4, #20]
 8012068:	60a2      	str	r2, [r4, #8]
 801206a:	e7f4      	b.n	8012056 <__swsetup_r+0x8e>
 801206c:	2000      	movs	r0, #0
 801206e:	e7f7      	b.n	8012060 <__swsetup_r+0x98>
 8012070:	2000018c 	.word	0x2000018c

08012074 <memset>:
 8012074:	4402      	add	r2, r0
 8012076:	4603      	mov	r3, r0
 8012078:	4293      	cmp	r3, r2
 801207a:	d100      	bne.n	801207e <memset+0xa>
 801207c:	4770      	bx	lr
 801207e:	f803 1b01 	strb.w	r1, [r3], #1
 8012082:	e7f9      	b.n	8012078 <memset+0x4>

08012084 <strchr>:
 8012084:	b2c9      	uxtb	r1, r1
 8012086:	4603      	mov	r3, r0
 8012088:	4618      	mov	r0, r3
 801208a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801208e:	b112      	cbz	r2, 8012096 <strchr+0x12>
 8012090:	428a      	cmp	r2, r1
 8012092:	d1f9      	bne.n	8012088 <strchr+0x4>
 8012094:	4770      	bx	lr
 8012096:	2900      	cmp	r1, #0
 8012098:	bf18      	it	ne
 801209a:	2000      	movne	r0, #0
 801209c:	4770      	bx	lr

0801209e <strncmp>:
 801209e:	b510      	push	{r4, lr}
 80120a0:	b16a      	cbz	r2, 80120be <strncmp+0x20>
 80120a2:	3901      	subs	r1, #1
 80120a4:	1884      	adds	r4, r0, r2
 80120a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d103      	bne.n	80120ba <strncmp+0x1c>
 80120b2:	42a0      	cmp	r0, r4
 80120b4:	d001      	beq.n	80120ba <strncmp+0x1c>
 80120b6:	2a00      	cmp	r2, #0
 80120b8:	d1f5      	bne.n	80120a6 <strncmp+0x8>
 80120ba:	1ad0      	subs	r0, r2, r3
 80120bc:	bd10      	pop	{r4, pc}
 80120be:	4610      	mov	r0, r2
 80120c0:	e7fc      	b.n	80120bc <strncmp+0x1e>
	...

080120c4 <strtok>:
 80120c4:	4b16      	ldr	r3, [pc, #88]	@ (8012120 <strtok+0x5c>)
 80120c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ca:	681f      	ldr	r7, [r3, #0]
 80120cc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80120ce:	4605      	mov	r5, r0
 80120d0:	460e      	mov	r6, r1
 80120d2:	b9ec      	cbnz	r4, 8012110 <strtok+0x4c>
 80120d4:	2050      	movs	r0, #80	@ 0x50
 80120d6:	f001 fb3f 	bl	8013758 <malloc>
 80120da:	4602      	mov	r2, r0
 80120dc:	6478      	str	r0, [r7, #68]	@ 0x44
 80120de:	b920      	cbnz	r0, 80120ea <strtok+0x26>
 80120e0:	4b10      	ldr	r3, [pc, #64]	@ (8012124 <strtok+0x60>)
 80120e2:	4811      	ldr	r0, [pc, #68]	@ (8012128 <strtok+0x64>)
 80120e4:	215b      	movs	r1, #91	@ 0x5b
 80120e6:	f000 f93d 	bl	8012364 <__assert_func>
 80120ea:	e9c0 4400 	strd	r4, r4, [r0]
 80120ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80120f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80120f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80120fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80120fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8012102:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8012106:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801210a:	6184      	str	r4, [r0, #24]
 801210c:	7704      	strb	r4, [r0, #28]
 801210e:	6244      	str	r4, [r0, #36]	@ 0x24
 8012110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012112:	4631      	mov	r1, r6
 8012114:	4628      	mov	r0, r5
 8012116:	2301      	movs	r3, #1
 8012118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801211c:	f000 b806 	b.w	801212c <__strtok_r>
 8012120:	2000018c 	.word	0x2000018c
 8012124:	08014ece 	.word	0x08014ece
 8012128:	08014ee5 	.word	0x08014ee5

0801212c <__strtok_r>:
 801212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801212e:	4604      	mov	r4, r0
 8012130:	b908      	cbnz	r0, 8012136 <__strtok_r+0xa>
 8012132:	6814      	ldr	r4, [r2, #0]
 8012134:	b144      	cbz	r4, 8012148 <__strtok_r+0x1c>
 8012136:	4620      	mov	r0, r4
 8012138:	f814 5b01 	ldrb.w	r5, [r4], #1
 801213c:	460f      	mov	r7, r1
 801213e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012142:	b91e      	cbnz	r6, 801214c <__strtok_r+0x20>
 8012144:	b965      	cbnz	r5, 8012160 <__strtok_r+0x34>
 8012146:	6015      	str	r5, [r2, #0]
 8012148:	2000      	movs	r0, #0
 801214a:	e005      	b.n	8012158 <__strtok_r+0x2c>
 801214c:	42b5      	cmp	r5, r6
 801214e:	d1f6      	bne.n	801213e <__strtok_r+0x12>
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1f0      	bne.n	8012136 <__strtok_r+0xa>
 8012154:	6014      	str	r4, [r2, #0]
 8012156:	7003      	strb	r3, [r0, #0]
 8012158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801215a:	461c      	mov	r4, r3
 801215c:	e00c      	b.n	8012178 <__strtok_r+0x4c>
 801215e:	b91d      	cbnz	r5, 8012168 <__strtok_r+0x3c>
 8012160:	4627      	mov	r7, r4
 8012162:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012166:	460e      	mov	r6, r1
 8012168:	f816 5b01 	ldrb.w	r5, [r6], #1
 801216c:	42ab      	cmp	r3, r5
 801216e:	d1f6      	bne.n	801215e <__strtok_r+0x32>
 8012170:	2b00      	cmp	r3, #0
 8012172:	d0f2      	beq.n	801215a <__strtok_r+0x2e>
 8012174:	2300      	movs	r3, #0
 8012176:	703b      	strb	r3, [r7, #0]
 8012178:	6014      	str	r4, [r2, #0]
 801217a:	e7ed      	b.n	8012158 <__strtok_r+0x2c>

0801217c <_localeconv_r>:
 801217c:	4800      	ldr	r0, [pc, #0]	@ (8012180 <_localeconv_r+0x4>)
 801217e:	4770      	bx	lr
 8012180:	20000110 	.word	0x20000110

08012184 <_close_r>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	4d06      	ldr	r5, [pc, #24]	@ (80121a0 <_close_r+0x1c>)
 8012188:	2300      	movs	r3, #0
 801218a:	4604      	mov	r4, r0
 801218c:	4608      	mov	r0, r1
 801218e:	602b      	str	r3, [r5, #0]
 8012190:	f7f1 fcca 	bl	8003b28 <_close>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	d102      	bne.n	801219e <_close_r+0x1a>
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	b103      	cbz	r3, 801219e <_close_r+0x1a>
 801219c:	6023      	str	r3, [r4, #0]
 801219e:	bd38      	pop	{r3, r4, r5, pc}
 80121a0:	20009314 	.word	0x20009314

080121a4 <_reclaim_reent>:
 80121a4:	4b2d      	ldr	r3, [pc, #180]	@ (801225c <_reclaim_reent+0xb8>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4283      	cmp	r3, r0
 80121aa:	b570      	push	{r4, r5, r6, lr}
 80121ac:	4604      	mov	r4, r0
 80121ae:	d053      	beq.n	8012258 <_reclaim_reent+0xb4>
 80121b0:	69c3      	ldr	r3, [r0, #28]
 80121b2:	b31b      	cbz	r3, 80121fc <_reclaim_reent+0x58>
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	b163      	cbz	r3, 80121d2 <_reclaim_reent+0x2e>
 80121b8:	2500      	movs	r5, #0
 80121ba:	69e3      	ldr	r3, [r4, #28]
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	5959      	ldr	r1, [r3, r5]
 80121c0:	b9b1      	cbnz	r1, 80121f0 <_reclaim_reent+0x4c>
 80121c2:	3504      	adds	r5, #4
 80121c4:	2d80      	cmp	r5, #128	@ 0x80
 80121c6:	d1f8      	bne.n	80121ba <_reclaim_reent+0x16>
 80121c8:	69e3      	ldr	r3, [r4, #28]
 80121ca:	4620      	mov	r0, r4
 80121cc:	68d9      	ldr	r1, [r3, #12]
 80121ce:	f000 ff3f 	bl	8013050 <_free_r>
 80121d2:	69e3      	ldr	r3, [r4, #28]
 80121d4:	6819      	ldr	r1, [r3, #0]
 80121d6:	b111      	cbz	r1, 80121de <_reclaim_reent+0x3a>
 80121d8:	4620      	mov	r0, r4
 80121da:	f000 ff39 	bl	8013050 <_free_r>
 80121de:	69e3      	ldr	r3, [r4, #28]
 80121e0:	689d      	ldr	r5, [r3, #8]
 80121e2:	b15d      	cbz	r5, 80121fc <_reclaim_reent+0x58>
 80121e4:	4629      	mov	r1, r5
 80121e6:	4620      	mov	r0, r4
 80121e8:	682d      	ldr	r5, [r5, #0]
 80121ea:	f000 ff31 	bl	8013050 <_free_r>
 80121ee:	e7f8      	b.n	80121e2 <_reclaim_reent+0x3e>
 80121f0:	680e      	ldr	r6, [r1, #0]
 80121f2:	4620      	mov	r0, r4
 80121f4:	f000 ff2c 	bl	8013050 <_free_r>
 80121f8:	4631      	mov	r1, r6
 80121fa:	e7e1      	b.n	80121c0 <_reclaim_reent+0x1c>
 80121fc:	6961      	ldr	r1, [r4, #20]
 80121fe:	b111      	cbz	r1, 8012206 <_reclaim_reent+0x62>
 8012200:	4620      	mov	r0, r4
 8012202:	f000 ff25 	bl	8013050 <_free_r>
 8012206:	69e1      	ldr	r1, [r4, #28]
 8012208:	b111      	cbz	r1, 8012210 <_reclaim_reent+0x6c>
 801220a:	4620      	mov	r0, r4
 801220c:	f000 ff20 	bl	8013050 <_free_r>
 8012210:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012212:	b111      	cbz	r1, 801221a <_reclaim_reent+0x76>
 8012214:	4620      	mov	r0, r4
 8012216:	f000 ff1b 	bl	8013050 <_free_r>
 801221a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801221c:	b111      	cbz	r1, 8012224 <_reclaim_reent+0x80>
 801221e:	4620      	mov	r0, r4
 8012220:	f000 ff16 	bl	8013050 <_free_r>
 8012224:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012226:	b111      	cbz	r1, 801222e <_reclaim_reent+0x8a>
 8012228:	4620      	mov	r0, r4
 801222a:	f000 ff11 	bl	8013050 <_free_r>
 801222e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012230:	b111      	cbz	r1, 8012238 <_reclaim_reent+0x94>
 8012232:	4620      	mov	r0, r4
 8012234:	f000 ff0c 	bl	8013050 <_free_r>
 8012238:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801223a:	b111      	cbz	r1, 8012242 <_reclaim_reent+0x9e>
 801223c:	4620      	mov	r0, r4
 801223e:	f000 ff07 	bl	8013050 <_free_r>
 8012242:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012244:	b111      	cbz	r1, 801224c <_reclaim_reent+0xa8>
 8012246:	4620      	mov	r0, r4
 8012248:	f000 ff02 	bl	8013050 <_free_r>
 801224c:	6a23      	ldr	r3, [r4, #32]
 801224e:	b11b      	cbz	r3, 8012258 <_reclaim_reent+0xb4>
 8012250:	4620      	mov	r0, r4
 8012252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012256:	4718      	bx	r3
 8012258:	bd70      	pop	{r4, r5, r6, pc}
 801225a:	bf00      	nop
 801225c:	2000018c 	.word	0x2000018c

08012260 <_lseek_r>:
 8012260:	b538      	push	{r3, r4, r5, lr}
 8012262:	4d07      	ldr	r5, [pc, #28]	@ (8012280 <_lseek_r+0x20>)
 8012264:	4604      	mov	r4, r0
 8012266:	4608      	mov	r0, r1
 8012268:	4611      	mov	r1, r2
 801226a:	2200      	movs	r2, #0
 801226c:	602a      	str	r2, [r5, #0]
 801226e:	461a      	mov	r2, r3
 8012270:	f7f1 fc81 	bl	8003b76 <_lseek>
 8012274:	1c43      	adds	r3, r0, #1
 8012276:	d102      	bne.n	801227e <_lseek_r+0x1e>
 8012278:	682b      	ldr	r3, [r5, #0]
 801227a:	b103      	cbz	r3, 801227e <_lseek_r+0x1e>
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	bd38      	pop	{r3, r4, r5, pc}
 8012280:	20009314 	.word	0x20009314

08012284 <_read_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d07      	ldr	r5, [pc, #28]	@ (80122a4 <_read_r+0x20>)
 8012288:	4604      	mov	r4, r0
 801228a:	4608      	mov	r0, r1
 801228c:	4611      	mov	r1, r2
 801228e:	2200      	movs	r2, #0
 8012290:	602a      	str	r2, [r5, #0]
 8012292:	461a      	mov	r2, r3
 8012294:	f7f1 fc0f 	bl	8003ab6 <_read>
 8012298:	1c43      	adds	r3, r0, #1
 801229a:	d102      	bne.n	80122a2 <_read_r+0x1e>
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	b103      	cbz	r3, 80122a2 <_read_r+0x1e>
 80122a0:	6023      	str	r3, [r4, #0]
 80122a2:	bd38      	pop	{r3, r4, r5, pc}
 80122a4:	20009314 	.word	0x20009314

080122a8 <_write_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4d07      	ldr	r5, [pc, #28]	@ (80122c8 <_write_r+0x20>)
 80122ac:	4604      	mov	r4, r0
 80122ae:	4608      	mov	r0, r1
 80122b0:	4611      	mov	r1, r2
 80122b2:	2200      	movs	r2, #0
 80122b4:	602a      	str	r2, [r5, #0]
 80122b6:	461a      	mov	r2, r3
 80122b8:	f7f1 fc1a 	bl	8003af0 <_write>
 80122bc:	1c43      	adds	r3, r0, #1
 80122be:	d102      	bne.n	80122c6 <_write_r+0x1e>
 80122c0:	682b      	ldr	r3, [r5, #0]
 80122c2:	b103      	cbz	r3, 80122c6 <_write_r+0x1e>
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	bd38      	pop	{r3, r4, r5, pc}
 80122c8:	20009314 	.word	0x20009314

080122cc <__errno>:
 80122cc:	4b01      	ldr	r3, [pc, #4]	@ (80122d4 <__errno+0x8>)
 80122ce:	6818      	ldr	r0, [r3, #0]
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop
 80122d4:	2000018c 	.word	0x2000018c

080122d8 <__libc_init_array>:
 80122d8:	b570      	push	{r4, r5, r6, lr}
 80122da:	4d0d      	ldr	r5, [pc, #52]	@ (8012310 <__libc_init_array+0x38>)
 80122dc:	4c0d      	ldr	r4, [pc, #52]	@ (8012314 <__libc_init_array+0x3c>)
 80122de:	1b64      	subs	r4, r4, r5
 80122e0:	10a4      	asrs	r4, r4, #2
 80122e2:	2600      	movs	r6, #0
 80122e4:	42a6      	cmp	r6, r4
 80122e6:	d109      	bne.n	80122fc <__libc_init_array+0x24>
 80122e8:	4d0b      	ldr	r5, [pc, #44]	@ (8012318 <__libc_init_array+0x40>)
 80122ea:	4c0c      	ldr	r4, [pc, #48]	@ (801231c <__libc_init_array+0x44>)
 80122ec:	f002 fc4e 	bl	8014b8c <_init>
 80122f0:	1b64      	subs	r4, r4, r5
 80122f2:	10a4      	asrs	r4, r4, #2
 80122f4:	2600      	movs	r6, #0
 80122f6:	42a6      	cmp	r6, r4
 80122f8:	d105      	bne.n	8012306 <__libc_init_array+0x2e>
 80122fa:	bd70      	pop	{r4, r5, r6, pc}
 80122fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012300:	4798      	blx	r3
 8012302:	3601      	adds	r6, #1
 8012304:	e7ee      	b.n	80122e4 <__libc_init_array+0xc>
 8012306:	f855 3b04 	ldr.w	r3, [r5], #4
 801230a:	4798      	blx	r3
 801230c:	3601      	adds	r6, #1
 801230e:	e7f2      	b.n	80122f6 <__libc_init_array+0x1e>
 8012310:	08015320 	.word	0x08015320
 8012314:	08015320 	.word	0x08015320
 8012318:	08015320 	.word	0x08015320
 801231c:	08015324 	.word	0x08015324

08012320 <__retarget_lock_init_recursive>:
 8012320:	4770      	bx	lr

08012322 <__retarget_lock_acquire_recursive>:
 8012322:	4770      	bx	lr

08012324 <__retarget_lock_release_recursive>:
 8012324:	4770      	bx	lr

08012326 <memcpy>:
 8012326:	440a      	add	r2, r1
 8012328:	4291      	cmp	r1, r2
 801232a:	f100 33ff 	add.w	r3, r0, #4294967295
 801232e:	d100      	bne.n	8012332 <memcpy+0xc>
 8012330:	4770      	bx	lr
 8012332:	b510      	push	{r4, lr}
 8012334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012338:	f803 4f01 	strb.w	r4, [r3, #1]!
 801233c:	4291      	cmp	r1, r2
 801233e:	d1f9      	bne.n	8012334 <memcpy+0xe>
 8012340:	bd10      	pop	{r4, pc}
 8012342:	0000      	movs	r0, r0
 8012344:	0000      	movs	r0, r0
	...

08012348 <nan>:
 8012348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012350 <nan+0x8>
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop
 8012350:	00000000 	.word	0x00000000
 8012354:	7ff80000 	.word	0x7ff80000

08012358 <nanf>:
 8012358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012360 <nanf+0x8>
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop
 8012360:	7fc00000 	.word	0x7fc00000

08012364 <__assert_func>:
 8012364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012366:	4614      	mov	r4, r2
 8012368:	461a      	mov	r2, r3
 801236a:	4b09      	ldr	r3, [pc, #36]	@ (8012390 <__assert_func+0x2c>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4605      	mov	r5, r0
 8012370:	68d8      	ldr	r0, [r3, #12]
 8012372:	b14c      	cbz	r4, 8012388 <__assert_func+0x24>
 8012374:	4b07      	ldr	r3, [pc, #28]	@ (8012394 <__assert_func+0x30>)
 8012376:	9100      	str	r1, [sp, #0]
 8012378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801237c:	4906      	ldr	r1, [pc, #24]	@ (8012398 <__assert_func+0x34>)
 801237e:	462b      	mov	r3, r5
 8012380:	f002 faae 	bl	80148e0 <fiprintf>
 8012384:	f002 fb6c 	bl	8014a60 <abort>
 8012388:	4b04      	ldr	r3, [pc, #16]	@ (801239c <__assert_func+0x38>)
 801238a:	461c      	mov	r4, r3
 801238c:	e7f3      	b.n	8012376 <__assert_func+0x12>
 801238e:	bf00      	nop
 8012390:	2000018c 	.word	0x2000018c
 8012394:	08014f47 	.word	0x08014f47
 8012398:	08014f54 	.word	0x08014f54
 801239c:	08014f82 	.word	0x08014f82

080123a0 <quorem>:
 80123a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a4:	6903      	ldr	r3, [r0, #16]
 80123a6:	690c      	ldr	r4, [r1, #16]
 80123a8:	42a3      	cmp	r3, r4
 80123aa:	4607      	mov	r7, r0
 80123ac:	db7e      	blt.n	80124ac <quorem+0x10c>
 80123ae:	3c01      	subs	r4, #1
 80123b0:	f101 0814 	add.w	r8, r1, #20
 80123b4:	00a3      	lsls	r3, r4, #2
 80123b6:	f100 0514 	add.w	r5, r0, #20
 80123ba:	9300      	str	r3, [sp, #0]
 80123bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123c0:	9301      	str	r3, [sp, #4]
 80123c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80123c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123ca:	3301      	adds	r3, #1
 80123cc:	429a      	cmp	r2, r3
 80123ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80123d6:	d32e      	bcc.n	8012436 <quorem+0x96>
 80123d8:	f04f 0a00 	mov.w	sl, #0
 80123dc:	46c4      	mov	ip, r8
 80123de:	46ae      	mov	lr, r5
 80123e0:	46d3      	mov	fp, sl
 80123e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80123e6:	b298      	uxth	r0, r3
 80123e8:	fb06 a000 	mla	r0, r6, r0, sl
 80123ec:	0c02      	lsrs	r2, r0, #16
 80123ee:	0c1b      	lsrs	r3, r3, #16
 80123f0:	fb06 2303 	mla	r3, r6, r3, r2
 80123f4:	f8de 2000 	ldr.w	r2, [lr]
 80123f8:	b280      	uxth	r0, r0
 80123fa:	b292      	uxth	r2, r2
 80123fc:	1a12      	subs	r2, r2, r0
 80123fe:	445a      	add	r2, fp
 8012400:	f8de 0000 	ldr.w	r0, [lr]
 8012404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012408:	b29b      	uxth	r3, r3
 801240a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801240e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012412:	b292      	uxth	r2, r2
 8012414:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012418:	45e1      	cmp	r9, ip
 801241a:	f84e 2b04 	str.w	r2, [lr], #4
 801241e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012422:	d2de      	bcs.n	80123e2 <quorem+0x42>
 8012424:	9b00      	ldr	r3, [sp, #0]
 8012426:	58eb      	ldr	r3, [r5, r3]
 8012428:	b92b      	cbnz	r3, 8012436 <quorem+0x96>
 801242a:	9b01      	ldr	r3, [sp, #4]
 801242c:	3b04      	subs	r3, #4
 801242e:	429d      	cmp	r5, r3
 8012430:	461a      	mov	r2, r3
 8012432:	d32f      	bcc.n	8012494 <quorem+0xf4>
 8012434:	613c      	str	r4, [r7, #16]
 8012436:	4638      	mov	r0, r7
 8012438:	f001 fd12 	bl	8013e60 <__mcmp>
 801243c:	2800      	cmp	r0, #0
 801243e:	db25      	blt.n	801248c <quorem+0xec>
 8012440:	4629      	mov	r1, r5
 8012442:	2000      	movs	r0, #0
 8012444:	f858 2b04 	ldr.w	r2, [r8], #4
 8012448:	f8d1 c000 	ldr.w	ip, [r1]
 801244c:	fa1f fe82 	uxth.w	lr, r2
 8012450:	fa1f f38c 	uxth.w	r3, ip
 8012454:	eba3 030e 	sub.w	r3, r3, lr
 8012458:	4403      	add	r3, r0
 801245a:	0c12      	lsrs	r2, r2, #16
 801245c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012460:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012464:	b29b      	uxth	r3, r3
 8012466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801246a:	45c1      	cmp	r9, r8
 801246c:	f841 3b04 	str.w	r3, [r1], #4
 8012470:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012474:	d2e6      	bcs.n	8012444 <quorem+0xa4>
 8012476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801247a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801247e:	b922      	cbnz	r2, 801248a <quorem+0xea>
 8012480:	3b04      	subs	r3, #4
 8012482:	429d      	cmp	r5, r3
 8012484:	461a      	mov	r2, r3
 8012486:	d30b      	bcc.n	80124a0 <quorem+0x100>
 8012488:	613c      	str	r4, [r7, #16]
 801248a:	3601      	adds	r6, #1
 801248c:	4630      	mov	r0, r6
 801248e:	b003      	add	sp, #12
 8012490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012494:	6812      	ldr	r2, [r2, #0]
 8012496:	3b04      	subs	r3, #4
 8012498:	2a00      	cmp	r2, #0
 801249a:	d1cb      	bne.n	8012434 <quorem+0x94>
 801249c:	3c01      	subs	r4, #1
 801249e:	e7c6      	b.n	801242e <quorem+0x8e>
 80124a0:	6812      	ldr	r2, [r2, #0]
 80124a2:	3b04      	subs	r3, #4
 80124a4:	2a00      	cmp	r2, #0
 80124a6:	d1ef      	bne.n	8012488 <quorem+0xe8>
 80124a8:	3c01      	subs	r4, #1
 80124aa:	e7ea      	b.n	8012482 <quorem+0xe2>
 80124ac:	2000      	movs	r0, #0
 80124ae:	e7ee      	b.n	801248e <quorem+0xee>

080124b0 <_dtoa_r>:
 80124b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b4:	69c7      	ldr	r7, [r0, #28]
 80124b6:	b097      	sub	sp, #92	@ 0x5c
 80124b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80124bc:	ec55 4b10 	vmov	r4, r5, d0
 80124c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80124c2:	9107      	str	r1, [sp, #28]
 80124c4:	4681      	mov	r9, r0
 80124c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80124c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80124ca:	b97f      	cbnz	r7, 80124ec <_dtoa_r+0x3c>
 80124cc:	2010      	movs	r0, #16
 80124ce:	f001 f943 	bl	8013758 <malloc>
 80124d2:	4602      	mov	r2, r0
 80124d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80124d8:	b920      	cbnz	r0, 80124e4 <_dtoa_r+0x34>
 80124da:	4ba9      	ldr	r3, [pc, #676]	@ (8012780 <_dtoa_r+0x2d0>)
 80124dc:	21ef      	movs	r1, #239	@ 0xef
 80124de:	48a9      	ldr	r0, [pc, #676]	@ (8012784 <_dtoa_r+0x2d4>)
 80124e0:	f7ff ff40 	bl	8012364 <__assert_func>
 80124e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80124e8:	6007      	str	r7, [r0, #0]
 80124ea:	60c7      	str	r7, [r0, #12]
 80124ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80124f0:	6819      	ldr	r1, [r3, #0]
 80124f2:	b159      	cbz	r1, 801250c <_dtoa_r+0x5c>
 80124f4:	685a      	ldr	r2, [r3, #4]
 80124f6:	604a      	str	r2, [r1, #4]
 80124f8:	2301      	movs	r3, #1
 80124fa:	4093      	lsls	r3, r2
 80124fc:	608b      	str	r3, [r1, #8]
 80124fe:	4648      	mov	r0, r9
 8012500:	f001 fa32 	bl	8013968 <_Bfree>
 8012504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012508:	2200      	movs	r2, #0
 801250a:	601a      	str	r2, [r3, #0]
 801250c:	1e2b      	subs	r3, r5, #0
 801250e:	bfb9      	ittee	lt
 8012510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012514:	9305      	strlt	r3, [sp, #20]
 8012516:	2300      	movge	r3, #0
 8012518:	6033      	strge	r3, [r6, #0]
 801251a:	9f05      	ldr	r7, [sp, #20]
 801251c:	4b9a      	ldr	r3, [pc, #616]	@ (8012788 <_dtoa_r+0x2d8>)
 801251e:	bfbc      	itt	lt
 8012520:	2201      	movlt	r2, #1
 8012522:	6032      	strlt	r2, [r6, #0]
 8012524:	43bb      	bics	r3, r7
 8012526:	d112      	bne.n	801254e <_dtoa_r+0x9e>
 8012528:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801252a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801252e:	6013      	str	r3, [r2, #0]
 8012530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012534:	4323      	orrs	r3, r4
 8012536:	f000 855a 	beq.w	8012fee <_dtoa_r+0xb3e>
 801253a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801253c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801279c <_dtoa_r+0x2ec>
 8012540:	2b00      	cmp	r3, #0
 8012542:	f000 855c 	beq.w	8012ffe <_dtoa_r+0xb4e>
 8012546:	f10a 0303 	add.w	r3, sl, #3
 801254a:	f000 bd56 	b.w	8012ffa <_dtoa_r+0xb4a>
 801254e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012552:	2200      	movs	r2, #0
 8012554:	ec51 0b17 	vmov	r0, r1, d7
 8012558:	2300      	movs	r3, #0
 801255a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801255e:	f7ee fad3 	bl	8000b08 <__aeabi_dcmpeq>
 8012562:	4680      	mov	r8, r0
 8012564:	b158      	cbz	r0, 801257e <_dtoa_r+0xce>
 8012566:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012568:	2301      	movs	r3, #1
 801256a:	6013      	str	r3, [r2, #0]
 801256c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801256e:	b113      	cbz	r3, 8012576 <_dtoa_r+0xc6>
 8012570:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012572:	4b86      	ldr	r3, [pc, #536]	@ (801278c <_dtoa_r+0x2dc>)
 8012574:	6013      	str	r3, [r2, #0]
 8012576:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80127a0 <_dtoa_r+0x2f0>
 801257a:	f000 bd40 	b.w	8012ffe <_dtoa_r+0xb4e>
 801257e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8012582:	aa14      	add	r2, sp, #80	@ 0x50
 8012584:	a915      	add	r1, sp, #84	@ 0x54
 8012586:	4648      	mov	r0, r9
 8012588:	f001 fd8a 	bl	80140a0 <__d2b>
 801258c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012590:	9002      	str	r0, [sp, #8]
 8012592:	2e00      	cmp	r6, #0
 8012594:	d078      	beq.n	8012688 <_dtoa_r+0x1d8>
 8012596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012598:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80125a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80125a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80125ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80125b0:	4619      	mov	r1, r3
 80125b2:	2200      	movs	r2, #0
 80125b4:	4b76      	ldr	r3, [pc, #472]	@ (8012790 <_dtoa_r+0x2e0>)
 80125b6:	f7ed fe87 	bl	80002c8 <__aeabi_dsub>
 80125ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8012768 <_dtoa_r+0x2b8>)
 80125bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c0:	f7ee f83a 	bl	8000638 <__aeabi_dmul>
 80125c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8012770 <_dtoa_r+0x2c0>)
 80125c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ca:	f7ed fe7f 	bl	80002cc <__adddf3>
 80125ce:	4604      	mov	r4, r0
 80125d0:	4630      	mov	r0, r6
 80125d2:	460d      	mov	r5, r1
 80125d4:	f7ed ffc6 	bl	8000564 <__aeabi_i2d>
 80125d8:	a367      	add	r3, pc, #412	@ (adr r3, 8012778 <_dtoa_r+0x2c8>)
 80125da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125de:	f7ee f82b 	bl	8000638 <__aeabi_dmul>
 80125e2:	4602      	mov	r2, r0
 80125e4:	460b      	mov	r3, r1
 80125e6:	4620      	mov	r0, r4
 80125e8:	4629      	mov	r1, r5
 80125ea:	f7ed fe6f 	bl	80002cc <__adddf3>
 80125ee:	4604      	mov	r4, r0
 80125f0:	460d      	mov	r5, r1
 80125f2:	f7ee fad1 	bl	8000b98 <__aeabi_d2iz>
 80125f6:	2200      	movs	r2, #0
 80125f8:	4607      	mov	r7, r0
 80125fa:	2300      	movs	r3, #0
 80125fc:	4620      	mov	r0, r4
 80125fe:	4629      	mov	r1, r5
 8012600:	f7ee fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8012604:	b140      	cbz	r0, 8012618 <_dtoa_r+0x168>
 8012606:	4638      	mov	r0, r7
 8012608:	f7ed ffac 	bl	8000564 <__aeabi_i2d>
 801260c:	4622      	mov	r2, r4
 801260e:	462b      	mov	r3, r5
 8012610:	f7ee fa7a 	bl	8000b08 <__aeabi_dcmpeq>
 8012614:	b900      	cbnz	r0, 8012618 <_dtoa_r+0x168>
 8012616:	3f01      	subs	r7, #1
 8012618:	2f16      	cmp	r7, #22
 801261a:	d852      	bhi.n	80126c2 <_dtoa_r+0x212>
 801261c:	4b5d      	ldr	r3, [pc, #372]	@ (8012794 <_dtoa_r+0x2e4>)
 801261e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801262a:	f7ee fa77 	bl	8000b1c <__aeabi_dcmplt>
 801262e:	2800      	cmp	r0, #0
 8012630:	d049      	beq.n	80126c6 <_dtoa_r+0x216>
 8012632:	3f01      	subs	r7, #1
 8012634:	2300      	movs	r3, #0
 8012636:	9310      	str	r3, [sp, #64]	@ 0x40
 8012638:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801263a:	1b9b      	subs	r3, r3, r6
 801263c:	1e5a      	subs	r2, r3, #1
 801263e:	bf45      	ittet	mi
 8012640:	f1c3 0301 	rsbmi	r3, r3, #1
 8012644:	9300      	strmi	r3, [sp, #0]
 8012646:	2300      	movpl	r3, #0
 8012648:	2300      	movmi	r3, #0
 801264a:	9206      	str	r2, [sp, #24]
 801264c:	bf54      	ite	pl
 801264e:	9300      	strpl	r3, [sp, #0]
 8012650:	9306      	strmi	r3, [sp, #24]
 8012652:	2f00      	cmp	r7, #0
 8012654:	db39      	blt.n	80126ca <_dtoa_r+0x21a>
 8012656:	9b06      	ldr	r3, [sp, #24]
 8012658:	970d      	str	r7, [sp, #52]	@ 0x34
 801265a:	443b      	add	r3, r7
 801265c:	9306      	str	r3, [sp, #24]
 801265e:	2300      	movs	r3, #0
 8012660:	9308      	str	r3, [sp, #32]
 8012662:	9b07      	ldr	r3, [sp, #28]
 8012664:	2b09      	cmp	r3, #9
 8012666:	d863      	bhi.n	8012730 <_dtoa_r+0x280>
 8012668:	2b05      	cmp	r3, #5
 801266a:	bfc4      	itt	gt
 801266c:	3b04      	subgt	r3, #4
 801266e:	9307      	strgt	r3, [sp, #28]
 8012670:	9b07      	ldr	r3, [sp, #28]
 8012672:	f1a3 0302 	sub.w	r3, r3, #2
 8012676:	bfcc      	ite	gt
 8012678:	2400      	movgt	r4, #0
 801267a:	2401      	movle	r4, #1
 801267c:	2b03      	cmp	r3, #3
 801267e:	d863      	bhi.n	8012748 <_dtoa_r+0x298>
 8012680:	e8df f003 	tbb	[pc, r3]
 8012684:	2b375452 	.word	0x2b375452
 8012688:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801268c:	441e      	add	r6, r3
 801268e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012692:	2b20      	cmp	r3, #32
 8012694:	bfc1      	itttt	gt
 8012696:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801269a:	409f      	lslgt	r7, r3
 801269c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80126a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80126a4:	bfd6      	itet	le
 80126a6:	f1c3 0320 	rsble	r3, r3, #32
 80126aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80126ae:	fa04 f003 	lslle.w	r0, r4, r3
 80126b2:	f7ed ff47 	bl	8000544 <__aeabi_ui2d>
 80126b6:	2201      	movs	r2, #1
 80126b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80126bc:	3e01      	subs	r6, #1
 80126be:	9212      	str	r2, [sp, #72]	@ 0x48
 80126c0:	e776      	b.n	80125b0 <_dtoa_r+0x100>
 80126c2:	2301      	movs	r3, #1
 80126c4:	e7b7      	b.n	8012636 <_dtoa_r+0x186>
 80126c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80126c8:	e7b6      	b.n	8012638 <_dtoa_r+0x188>
 80126ca:	9b00      	ldr	r3, [sp, #0]
 80126cc:	1bdb      	subs	r3, r3, r7
 80126ce:	9300      	str	r3, [sp, #0]
 80126d0:	427b      	negs	r3, r7
 80126d2:	9308      	str	r3, [sp, #32]
 80126d4:	2300      	movs	r3, #0
 80126d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80126d8:	e7c3      	b.n	8012662 <_dtoa_r+0x1b2>
 80126da:	2301      	movs	r3, #1
 80126dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80126de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126e0:	eb07 0b03 	add.w	fp, r7, r3
 80126e4:	f10b 0301 	add.w	r3, fp, #1
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	9303      	str	r3, [sp, #12]
 80126ec:	bfb8      	it	lt
 80126ee:	2301      	movlt	r3, #1
 80126f0:	e006      	b.n	8012700 <_dtoa_r+0x250>
 80126f2:	2301      	movs	r3, #1
 80126f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80126f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	dd28      	ble.n	801274e <_dtoa_r+0x29e>
 80126fc:	469b      	mov	fp, r3
 80126fe:	9303      	str	r3, [sp, #12]
 8012700:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8012704:	2100      	movs	r1, #0
 8012706:	2204      	movs	r2, #4
 8012708:	f102 0514 	add.w	r5, r2, #20
 801270c:	429d      	cmp	r5, r3
 801270e:	d926      	bls.n	801275e <_dtoa_r+0x2ae>
 8012710:	6041      	str	r1, [r0, #4]
 8012712:	4648      	mov	r0, r9
 8012714:	f001 f8e8 	bl	80138e8 <_Balloc>
 8012718:	4682      	mov	sl, r0
 801271a:	2800      	cmp	r0, #0
 801271c:	d142      	bne.n	80127a4 <_dtoa_r+0x2f4>
 801271e:	4b1e      	ldr	r3, [pc, #120]	@ (8012798 <_dtoa_r+0x2e8>)
 8012720:	4602      	mov	r2, r0
 8012722:	f240 11af 	movw	r1, #431	@ 0x1af
 8012726:	e6da      	b.n	80124de <_dtoa_r+0x2e>
 8012728:	2300      	movs	r3, #0
 801272a:	e7e3      	b.n	80126f4 <_dtoa_r+0x244>
 801272c:	2300      	movs	r3, #0
 801272e:	e7d5      	b.n	80126dc <_dtoa_r+0x22c>
 8012730:	2401      	movs	r4, #1
 8012732:	2300      	movs	r3, #0
 8012734:	9307      	str	r3, [sp, #28]
 8012736:	9409      	str	r4, [sp, #36]	@ 0x24
 8012738:	f04f 3bff 	mov.w	fp, #4294967295
 801273c:	2200      	movs	r2, #0
 801273e:	f8cd b00c 	str.w	fp, [sp, #12]
 8012742:	2312      	movs	r3, #18
 8012744:	920c      	str	r2, [sp, #48]	@ 0x30
 8012746:	e7db      	b.n	8012700 <_dtoa_r+0x250>
 8012748:	2301      	movs	r3, #1
 801274a:	9309      	str	r3, [sp, #36]	@ 0x24
 801274c:	e7f4      	b.n	8012738 <_dtoa_r+0x288>
 801274e:	f04f 0b01 	mov.w	fp, #1
 8012752:	f8cd b00c 	str.w	fp, [sp, #12]
 8012756:	465b      	mov	r3, fp
 8012758:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801275c:	e7d0      	b.n	8012700 <_dtoa_r+0x250>
 801275e:	3101      	adds	r1, #1
 8012760:	0052      	lsls	r2, r2, #1
 8012762:	e7d1      	b.n	8012708 <_dtoa_r+0x258>
 8012764:	f3af 8000 	nop.w
 8012768:	636f4361 	.word	0x636f4361
 801276c:	3fd287a7 	.word	0x3fd287a7
 8012770:	8b60c8b3 	.word	0x8b60c8b3
 8012774:	3fc68a28 	.word	0x3fc68a28
 8012778:	509f79fb 	.word	0x509f79fb
 801277c:	3fd34413 	.word	0x3fd34413
 8012780:	08014ece 	.word	0x08014ece
 8012784:	08014f90 	.word	0x08014f90
 8012788:	7ff00000 	.word	0x7ff00000
 801278c:	08014eab 	.word	0x08014eab
 8012790:	3ff80000 	.word	0x3ff80000
 8012794:	08015250 	.word	0x08015250
 8012798:	08014fe8 	.word	0x08014fe8
 801279c:	08014f8c 	.word	0x08014f8c
 80127a0:	08014eaa 	.word	0x08014eaa
 80127a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80127a8:	6018      	str	r0, [r3, #0]
 80127aa:	9b03      	ldr	r3, [sp, #12]
 80127ac:	2b0e      	cmp	r3, #14
 80127ae:	f200 80a1 	bhi.w	80128f4 <_dtoa_r+0x444>
 80127b2:	2c00      	cmp	r4, #0
 80127b4:	f000 809e 	beq.w	80128f4 <_dtoa_r+0x444>
 80127b8:	2f00      	cmp	r7, #0
 80127ba:	dd33      	ble.n	8012824 <_dtoa_r+0x374>
 80127bc:	4b9c      	ldr	r3, [pc, #624]	@ (8012a30 <_dtoa_r+0x580>)
 80127be:	f007 020f 	and.w	r2, r7, #15
 80127c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127c6:	ed93 7b00 	vldr	d7, [r3]
 80127ca:	05f8      	lsls	r0, r7, #23
 80127cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80127d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80127d4:	d516      	bpl.n	8012804 <_dtoa_r+0x354>
 80127d6:	4b97      	ldr	r3, [pc, #604]	@ (8012a34 <_dtoa_r+0x584>)
 80127d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80127dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127e0:	f7ee f854 	bl	800088c <__aeabi_ddiv>
 80127e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127e8:	f004 040f 	and.w	r4, r4, #15
 80127ec:	2603      	movs	r6, #3
 80127ee:	4d91      	ldr	r5, [pc, #580]	@ (8012a34 <_dtoa_r+0x584>)
 80127f0:	b954      	cbnz	r4, 8012808 <_dtoa_r+0x358>
 80127f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80127f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80127fa:	f7ee f847 	bl	800088c <__aeabi_ddiv>
 80127fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012802:	e028      	b.n	8012856 <_dtoa_r+0x3a6>
 8012804:	2602      	movs	r6, #2
 8012806:	e7f2      	b.n	80127ee <_dtoa_r+0x33e>
 8012808:	07e1      	lsls	r1, r4, #31
 801280a:	d508      	bpl.n	801281e <_dtoa_r+0x36e>
 801280c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012814:	f7ed ff10 	bl	8000638 <__aeabi_dmul>
 8012818:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801281c:	3601      	adds	r6, #1
 801281e:	1064      	asrs	r4, r4, #1
 8012820:	3508      	adds	r5, #8
 8012822:	e7e5      	b.n	80127f0 <_dtoa_r+0x340>
 8012824:	f000 80af 	beq.w	8012986 <_dtoa_r+0x4d6>
 8012828:	427c      	negs	r4, r7
 801282a:	4b81      	ldr	r3, [pc, #516]	@ (8012a30 <_dtoa_r+0x580>)
 801282c:	4d81      	ldr	r5, [pc, #516]	@ (8012a34 <_dtoa_r+0x584>)
 801282e:	f004 020f 	and.w	r2, r4, #15
 8012832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801283e:	f7ed fefb 	bl	8000638 <__aeabi_dmul>
 8012842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012846:	1124      	asrs	r4, r4, #4
 8012848:	2300      	movs	r3, #0
 801284a:	2602      	movs	r6, #2
 801284c:	2c00      	cmp	r4, #0
 801284e:	f040 808f 	bne.w	8012970 <_dtoa_r+0x4c0>
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1d3      	bne.n	80127fe <_dtoa_r+0x34e>
 8012856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012858:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801285c:	2b00      	cmp	r3, #0
 801285e:	f000 8094 	beq.w	801298a <_dtoa_r+0x4da>
 8012862:	4b75      	ldr	r3, [pc, #468]	@ (8012a38 <_dtoa_r+0x588>)
 8012864:	2200      	movs	r2, #0
 8012866:	4620      	mov	r0, r4
 8012868:	4629      	mov	r1, r5
 801286a:	f7ee f957 	bl	8000b1c <__aeabi_dcmplt>
 801286e:	2800      	cmp	r0, #0
 8012870:	f000 808b 	beq.w	801298a <_dtoa_r+0x4da>
 8012874:	9b03      	ldr	r3, [sp, #12]
 8012876:	2b00      	cmp	r3, #0
 8012878:	f000 8087 	beq.w	801298a <_dtoa_r+0x4da>
 801287c:	f1bb 0f00 	cmp.w	fp, #0
 8012880:	dd34      	ble.n	80128ec <_dtoa_r+0x43c>
 8012882:	4620      	mov	r0, r4
 8012884:	4b6d      	ldr	r3, [pc, #436]	@ (8012a3c <_dtoa_r+0x58c>)
 8012886:	2200      	movs	r2, #0
 8012888:	4629      	mov	r1, r5
 801288a:	f7ed fed5 	bl	8000638 <__aeabi_dmul>
 801288e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012892:	f107 38ff 	add.w	r8, r7, #4294967295
 8012896:	3601      	adds	r6, #1
 8012898:	465c      	mov	r4, fp
 801289a:	4630      	mov	r0, r6
 801289c:	f7ed fe62 	bl	8000564 <__aeabi_i2d>
 80128a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128a4:	f7ed fec8 	bl	8000638 <__aeabi_dmul>
 80128a8:	4b65      	ldr	r3, [pc, #404]	@ (8012a40 <_dtoa_r+0x590>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	f7ed fd0e 	bl	80002cc <__adddf3>
 80128b0:	4605      	mov	r5, r0
 80128b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80128b6:	2c00      	cmp	r4, #0
 80128b8:	d16a      	bne.n	8012990 <_dtoa_r+0x4e0>
 80128ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128be:	4b61      	ldr	r3, [pc, #388]	@ (8012a44 <_dtoa_r+0x594>)
 80128c0:	2200      	movs	r2, #0
 80128c2:	f7ed fd01 	bl	80002c8 <__aeabi_dsub>
 80128c6:	4602      	mov	r2, r0
 80128c8:	460b      	mov	r3, r1
 80128ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80128ce:	462a      	mov	r2, r5
 80128d0:	4633      	mov	r3, r6
 80128d2:	f7ee f941 	bl	8000b58 <__aeabi_dcmpgt>
 80128d6:	2800      	cmp	r0, #0
 80128d8:	f040 8298 	bne.w	8012e0c <_dtoa_r+0x95c>
 80128dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128e0:	462a      	mov	r2, r5
 80128e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80128e6:	f7ee f919 	bl	8000b1c <__aeabi_dcmplt>
 80128ea:	bb38      	cbnz	r0, 801293c <_dtoa_r+0x48c>
 80128ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80128f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80128f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f2c0 8157 	blt.w	8012baa <_dtoa_r+0x6fa>
 80128fc:	2f0e      	cmp	r7, #14
 80128fe:	f300 8154 	bgt.w	8012baa <_dtoa_r+0x6fa>
 8012902:	4b4b      	ldr	r3, [pc, #300]	@ (8012a30 <_dtoa_r+0x580>)
 8012904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012908:	ed93 7b00 	vldr	d7, [r3]
 801290c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801290e:	2b00      	cmp	r3, #0
 8012910:	ed8d 7b00 	vstr	d7, [sp]
 8012914:	f280 80e5 	bge.w	8012ae2 <_dtoa_r+0x632>
 8012918:	9b03      	ldr	r3, [sp, #12]
 801291a:	2b00      	cmp	r3, #0
 801291c:	f300 80e1 	bgt.w	8012ae2 <_dtoa_r+0x632>
 8012920:	d10c      	bne.n	801293c <_dtoa_r+0x48c>
 8012922:	4b48      	ldr	r3, [pc, #288]	@ (8012a44 <_dtoa_r+0x594>)
 8012924:	2200      	movs	r2, #0
 8012926:	ec51 0b17 	vmov	r0, r1, d7
 801292a:	f7ed fe85 	bl	8000638 <__aeabi_dmul>
 801292e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012932:	f7ee f907 	bl	8000b44 <__aeabi_dcmpge>
 8012936:	2800      	cmp	r0, #0
 8012938:	f000 8266 	beq.w	8012e08 <_dtoa_r+0x958>
 801293c:	2400      	movs	r4, #0
 801293e:	4625      	mov	r5, r4
 8012940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012942:	4656      	mov	r6, sl
 8012944:	ea6f 0803 	mvn.w	r8, r3
 8012948:	2700      	movs	r7, #0
 801294a:	4621      	mov	r1, r4
 801294c:	4648      	mov	r0, r9
 801294e:	f001 f80b 	bl	8013968 <_Bfree>
 8012952:	2d00      	cmp	r5, #0
 8012954:	f000 80bd 	beq.w	8012ad2 <_dtoa_r+0x622>
 8012958:	b12f      	cbz	r7, 8012966 <_dtoa_r+0x4b6>
 801295a:	42af      	cmp	r7, r5
 801295c:	d003      	beq.n	8012966 <_dtoa_r+0x4b6>
 801295e:	4639      	mov	r1, r7
 8012960:	4648      	mov	r0, r9
 8012962:	f001 f801 	bl	8013968 <_Bfree>
 8012966:	4629      	mov	r1, r5
 8012968:	4648      	mov	r0, r9
 801296a:	f000 fffd 	bl	8013968 <_Bfree>
 801296e:	e0b0      	b.n	8012ad2 <_dtoa_r+0x622>
 8012970:	07e2      	lsls	r2, r4, #31
 8012972:	d505      	bpl.n	8012980 <_dtoa_r+0x4d0>
 8012974:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012978:	f7ed fe5e 	bl	8000638 <__aeabi_dmul>
 801297c:	3601      	adds	r6, #1
 801297e:	2301      	movs	r3, #1
 8012980:	1064      	asrs	r4, r4, #1
 8012982:	3508      	adds	r5, #8
 8012984:	e762      	b.n	801284c <_dtoa_r+0x39c>
 8012986:	2602      	movs	r6, #2
 8012988:	e765      	b.n	8012856 <_dtoa_r+0x3a6>
 801298a:	9c03      	ldr	r4, [sp, #12]
 801298c:	46b8      	mov	r8, r7
 801298e:	e784      	b.n	801289a <_dtoa_r+0x3ea>
 8012990:	4b27      	ldr	r3, [pc, #156]	@ (8012a30 <_dtoa_r+0x580>)
 8012992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012994:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801299c:	4454      	add	r4, sl
 801299e:	2900      	cmp	r1, #0
 80129a0:	d054      	beq.n	8012a4c <_dtoa_r+0x59c>
 80129a2:	4929      	ldr	r1, [pc, #164]	@ (8012a48 <_dtoa_r+0x598>)
 80129a4:	2000      	movs	r0, #0
 80129a6:	f7ed ff71 	bl	800088c <__aeabi_ddiv>
 80129aa:	4633      	mov	r3, r6
 80129ac:	462a      	mov	r2, r5
 80129ae:	f7ed fc8b 	bl	80002c8 <__aeabi_dsub>
 80129b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80129b6:	4656      	mov	r6, sl
 80129b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129bc:	f7ee f8ec 	bl	8000b98 <__aeabi_d2iz>
 80129c0:	4605      	mov	r5, r0
 80129c2:	f7ed fdcf 	bl	8000564 <__aeabi_i2d>
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129ce:	f7ed fc7b 	bl	80002c8 <__aeabi_dsub>
 80129d2:	3530      	adds	r5, #48	@ 0x30
 80129d4:	4602      	mov	r2, r0
 80129d6:	460b      	mov	r3, r1
 80129d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80129dc:	f806 5b01 	strb.w	r5, [r6], #1
 80129e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80129e4:	f7ee f89a 	bl	8000b1c <__aeabi_dcmplt>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	d172      	bne.n	8012ad2 <_dtoa_r+0x622>
 80129ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129f0:	4911      	ldr	r1, [pc, #68]	@ (8012a38 <_dtoa_r+0x588>)
 80129f2:	2000      	movs	r0, #0
 80129f4:	f7ed fc68 	bl	80002c8 <__aeabi_dsub>
 80129f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80129fc:	f7ee f88e 	bl	8000b1c <__aeabi_dcmplt>
 8012a00:	2800      	cmp	r0, #0
 8012a02:	f040 80b4 	bne.w	8012b6e <_dtoa_r+0x6be>
 8012a06:	42a6      	cmp	r6, r4
 8012a08:	f43f af70 	beq.w	80128ec <_dtoa_r+0x43c>
 8012a0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012a10:	4b0a      	ldr	r3, [pc, #40]	@ (8012a3c <_dtoa_r+0x58c>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	f7ed fe10 	bl	8000638 <__aeabi_dmul>
 8012a18:	4b08      	ldr	r3, [pc, #32]	@ (8012a3c <_dtoa_r+0x58c>)
 8012a1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012a1e:	2200      	movs	r2, #0
 8012a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a24:	f7ed fe08 	bl	8000638 <__aeabi_dmul>
 8012a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a2c:	e7c4      	b.n	80129b8 <_dtoa_r+0x508>
 8012a2e:	bf00      	nop
 8012a30:	08015250 	.word	0x08015250
 8012a34:	08015228 	.word	0x08015228
 8012a38:	3ff00000 	.word	0x3ff00000
 8012a3c:	40240000 	.word	0x40240000
 8012a40:	401c0000 	.word	0x401c0000
 8012a44:	40140000 	.word	0x40140000
 8012a48:	3fe00000 	.word	0x3fe00000
 8012a4c:	4631      	mov	r1, r6
 8012a4e:	4628      	mov	r0, r5
 8012a50:	f7ed fdf2 	bl	8000638 <__aeabi_dmul>
 8012a54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012a58:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012a5a:	4656      	mov	r6, sl
 8012a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a60:	f7ee f89a 	bl	8000b98 <__aeabi_d2iz>
 8012a64:	4605      	mov	r5, r0
 8012a66:	f7ed fd7d 	bl	8000564 <__aeabi_i2d>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a72:	f7ed fc29 	bl	80002c8 <__aeabi_dsub>
 8012a76:	3530      	adds	r5, #48	@ 0x30
 8012a78:	f806 5b01 	strb.w	r5, [r6], #1
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	42a6      	cmp	r6, r4
 8012a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a86:	f04f 0200 	mov.w	r2, #0
 8012a8a:	d124      	bne.n	8012ad6 <_dtoa_r+0x626>
 8012a8c:	4baf      	ldr	r3, [pc, #700]	@ (8012d4c <_dtoa_r+0x89c>)
 8012a8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012a92:	f7ed fc1b 	bl	80002cc <__adddf3>
 8012a96:	4602      	mov	r2, r0
 8012a98:	460b      	mov	r3, r1
 8012a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a9e:	f7ee f85b 	bl	8000b58 <__aeabi_dcmpgt>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d163      	bne.n	8012b6e <_dtoa_r+0x6be>
 8012aa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012aaa:	49a8      	ldr	r1, [pc, #672]	@ (8012d4c <_dtoa_r+0x89c>)
 8012aac:	2000      	movs	r0, #0
 8012aae:	f7ed fc0b 	bl	80002c8 <__aeabi_dsub>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	460b      	mov	r3, r1
 8012ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012aba:	f7ee f82f 	bl	8000b1c <__aeabi_dcmplt>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	f43f af14 	beq.w	80128ec <_dtoa_r+0x43c>
 8012ac4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012ac6:	1e73      	subs	r3, r6, #1
 8012ac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012aca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012ace:	2b30      	cmp	r3, #48	@ 0x30
 8012ad0:	d0f8      	beq.n	8012ac4 <_dtoa_r+0x614>
 8012ad2:	4647      	mov	r7, r8
 8012ad4:	e03b      	b.n	8012b4e <_dtoa_r+0x69e>
 8012ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8012d50 <_dtoa_r+0x8a0>)
 8012ad8:	f7ed fdae 	bl	8000638 <__aeabi_dmul>
 8012adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ae0:	e7bc      	b.n	8012a5c <_dtoa_r+0x5ac>
 8012ae2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012ae6:	4656      	mov	r6, sl
 8012ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012aec:	4620      	mov	r0, r4
 8012aee:	4629      	mov	r1, r5
 8012af0:	f7ed fecc 	bl	800088c <__aeabi_ddiv>
 8012af4:	f7ee f850 	bl	8000b98 <__aeabi_d2iz>
 8012af8:	4680      	mov	r8, r0
 8012afa:	f7ed fd33 	bl	8000564 <__aeabi_i2d>
 8012afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b02:	f7ed fd99 	bl	8000638 <__aeabi_dmul>
 8012b06:	4602      	mov	r2, r0
 8012b08:	460b      	mov	r3, r1
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012b12:	f7ed fbd9 	bl	80002c8 <__aeabi_dsub>
 8012b16:	f806 4b01 	strb.w	r4, [r6], #1
 8012b1a:	9d03      	ldr	r5, [sp, #12]
 8012b1c:	eba6 040a 	sub.w	r4, r6, sl
 8012b20:	42a5      	cmp	r5, r4
 8012b22:	4602      	mov	r2, r0
 8012b24:	460b      	mov	r3, r1
 8012b26:	d133      	bne.n	8012b90 <_dtoa_r+0x6e0>
 8012b28:	f7ed fbd0 	bl	80002cc <__adddf3>
 8012b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b30:	4604      	mov	r4, r0
 8012b32:	460d      	mov	r5, r1
 8012b34:	f7ee f810 	bl	8000b58 <__aeabi_dcmpgt>
 8012b38:	b9c0      	cbnz	r0, 8012b6c <_dtoa_r+0x6bc>
 8012b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b3e:	4620      	mov	r0, r4
 8012b40:	4629      	mov	r1, r5
 8012b42:	f7ed ffe1 	bl	8000b08 <__aeabi_dcmpeq>
 8012b46:	b110      	cbz	r0, 8012b4e <_dtoa_r+0x69e>
 8012b48:	f018 0f01 	tst.w	r8, #1
 8012b4c:	d10e      	bne.n	8012b6c <_dtoa_r+0x6bc>
 8012b4e:	9902      	ldr	r1, [sp, #8]
 8012b50:	4648      	mov	r0, r9
 8012b52:	f000 ff09 	bl	8013968 <_Bfree>
 8012b56:	2300      	movs	r3, #0
 8012b58:	7033      	strb	r3, [r6, #0]
 8012b5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012b5c:	3701      	adds	r7, #1
 8012b5e:	601f      	str	r7, [r3, #0]
 8012b60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 824b 	beq.w	8012ffe <_dtoa_r+0xb4e>
 8012b68:	601e      	str	r6, [r3, #0]
 8012b6a:	e248      	b.n	8012ffe <_dtoa_r+0xb4e>
 8012b6c:	46b8      	mov	r8, r7
 8012b6e:	4633      	mov	r3, r6
 8012b70:	461e      	mov	r6, r3
 8012b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b76:	2a39      	cmp	r2, #57	@ 0x39
 8012b78:	d106      	bne.n	8012b88 <_dtoa_r+0x6d8>
 8012b7a:	459a      	cmp	sl, r3
 8012b7c:	d1f8      	bne.n	8012b70 <_dtoa_r+0x6c0>
 8012b7e:	2230      	movs	r2, #48	@ 0x30
 8012b80:	f108 0801 	add.w	r8, r8, #1
 8012b84:	f88a 2000 	strb.w	r2, [sl]
 8012b88:	781a      	ldrb	r2, [r3, #0]
 8012b8a:	3201      	adds	r2, #1
 8012b8c:	701a      	strb	r2, [r3, #0]
 8012b8e:	e7a0      	b.n	8012ad2 <_dtoa_r+0x622>
 8012b90:	4b6f      	ldr	r3, [pc, #444]	@ (8012d50 <_dtoa_r+0x8a0>)
 8012b92:	2200      	movs	r2, #0
 8012b94:	f7ed fd50 	bl	8000638 <__aeabi_dmul>
 8012b98:	2200      	movs	r2, #0
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	460d      	mov	r5, r1
 8012ba0:	f7ed ffb2 	bl	8000b08 <__aeabi_dcmpeq>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d09f      	beq.n	8012ae8 <_dtoa_r+0x638>
 8012ba8:	e7d1      	b.n	8012b4e <_dtoa_r+0x69e>
 8012baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	f000 80ea 	beq.w	8012d86 <_dtoa_r+0x8d6>
 8012bb2:	9a07      	ldr	r2, [sp, #28]
 8012bb4:	2a01      	cmp	r2, #1
 8012bb6:	f300 80cd 	bgt.w	8012d54 <_dtoa_r+0x8a4>
 8012bba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012bbc:	2a00      	cmp	r2, #0
 8012bbe:	f000 80c1 	beq.w	8012d44 <_dtoa_r+0x894>
 8012bc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012bc6:	9c08      	ldr	r4, [sp, #32]
 8012bc8:	9e00      	ldr	r6, [sp, #0]
 8012bca:	9a00      	ldr	r2, [sp, #0]
 8012bcc:	441a      	add	r2, r3
 8012bce:	9200      	str	r2, [sp, #0]
 8012bd0:	9a06      	ldr	r2, [sp, #24]
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	441a      	add	r2, r3
 8012bd6:	4648      	mov	r0, r9
 8012bd8:	9206      	str	r2, [sp, #24]
 8012bda:	f000 ffc3 	bl	8013b64 <__i2b>
 8012bde:	4605      	mov	r5, r0
 8012be0:	b166      	cbz	r6, 8012bfc <_dtoa_r+0x74c>
 8012be2:	9b06      	ldr	r3, [sp, #24]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	dd09      	ble.n	8012bfc <_dtoa_r+0x74c>
 8012be8:	42b3      	cmp	r3, r6
 8012bea:	9a00      	ldr	r2, [sp, #0]
 8012bec:	bfa8      	it	ge
 8012bee:	4633      	movge	r3, r6
 8012bf0:	1ad2      	subs	r2, r2, r3
 8012bf2:	9200      	str	r2, [sp, #0]
 8012bf4:	9a06      	ldr	r2, [sp, #24]
 8012bf6:	1af6      	subs	r6, r6, r3
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	9306      	str	r3, [sp, #24]
 8012bfc:	9b08      	ldr	r3, [sp, #32]
 8012bfe:	b30b      	cbz	r3, 8012c44 <_dtoa_r+0x794>
 8012c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 80c6 	beq.w	8012d94 <_dtoa_r+0x8e4>
 8012c08:	2c00      	cmp	r4, #0
 8012c0a:	f000 80c0 	beq.w	8012d8e <_dtoa_r+0x8de>
 8012c0e:	4629      	mov	r1, r5
 8012c10:	4622      	mov	r2, r4
 8012c12:	4648      	mov	r0, r9
 8012c14:	f001 f85e 	bl	8013cd4 <__pow5mult>
 8012c18:	9a02      	ldr	r2, [sp, #8]
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	4648      	mov	r0, r9
 8012c20:	f000 ffb6 	bl	8013b90 <__multiply>
 8012c24:	9902      	ldr	r1, [sp, #8]
 8012c26:	4680      	mov	r8, r0
 8012c28:	4648      	mov	r0, r9
 8012c2a:	f000 fe9d 	bl	8013968 <_Bfree>
 8012c2e:	9b08      	ldr	r3, [sp, #32]
 8012c30:	1b1b      	subs	r3, r3, r4
 8012c32:	9308      	str	r3, [sp, #32]
 8012c34:	f000 80b1 	beq.w	8012d9a <_dtoa_r+0x8ea>
 8012c38:	9a08      	ldr	r2, [sp, #32]
 8012c3a:	4641      	mov	r1, r8
 8012c3c:	4648      	mov	r0, r9
 8012c3e:	f001 f849 	bl	8013cd4 <__pow5mult>
 8012c42:	9002      	str	r0, [sp, #8]
 8012c44:	2101      	movs	r1, #1
 8012c46:	4648      	mov	r0, r9
 8012c48:	f000 ff8c 	bl	8013b64 <__i2b>
 8012c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c4e:	4604      	mov	r4, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f000 81d8 	beq.w	8013006 <_dtoa_r+0xb56>
 8012c56:	461a      	mov	r2, r3
 8012c58:	4601      	mov	r1, r0
 8012c5a:	4648      	mov	r0, r9
 8012c5c:	f001 f83a 	bl	8013cd4 <__pow5mult>
 8012c60:	9b07      	ldr	r3, [sp, #28]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	4604      	mov	r4, r0
 8012c66:	f300 809f 	bgt.w	8012da8 <_dtoa_r+0x8f8>
 8012c6a:	9b04      	ldr	r3, [sp, #16]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f040 8097 	bne.w	8012da0 <_dtoa_r+0x8f0>
 8012c72:	9b05      	ldr	r3, [sp, #20]
 8012c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f040 8093 	bne.w	8012da4 <_dtoa_r+0x8f4>
 8012c7e:	9b05      	ldr	r3, [sp, #20]
 8012c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c84:	0d1b      	lsrs	r3, r3, #20
 8012c86:	051b      	lsls	r3, r3, #20
 8012c88:	b133      	cbz	r3, 8012c98 <_dtoa_r+0x7e8>
 8012c8a:	9b00      	ldr	r3, [sp, #0]
 8012c8c:	3301      	adds	r3, #1
 8012c8e:	9300      	str	r3, [sp, #0]
 8012c90:	9b06      	ldr	r3, [sp, #24]
 8012c92:	3301      	adds	r3, #1
 8012c94:	9306      	str	r3, [sp, #24]
 8012c96:	2301      	movs	r3, #1
 8012c98:	9308      	str	r3, [sp, #32]
 8012c9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	f000 81b8 	beq.w	8013012 <_dtoa_r+0xb62>
 8012ca2:	6923      	ldr	r3, [r4, #16]
 8012ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012ca8:	6918      	ldr	r0, [r3, #16]
 8012caa:	f000 ff0f 	bl	8013acc <__hi0bits>
 8012cae:	f1c0 0020 	rsb	r0, r0, #32
 8012cb2:	9b06      	ldr	r3, [sp, #24]
 8012cb4:	4418      	add	r0, r3
 8012cb6:	f010 001f 	ands.w	r0, r0, #31
 8012cba:	f000 8082 	beq.w	8012dc2 <_dtoa_r+0x912>
 8012cbe:	f1c0 0320 	rsb	r3, r0, #32
 8012cc2:	2b04      	cmp	r3, #4
 8012cc4:	dd73      	ble.n	8012dae <_dtoa_r+0x8fe>
 8012cc6:	9b00      	ldr	r3, [sp, #0]
 8012cc8:	f1c0 001c 	rsb	r0, r0, #28
 8012ccc:	4403      	add	r3, r0
 8012cce:	9300      	str	r3, [sp, #0]
 8012cd0:	9b06      	ldr	r3, [sp, #24]
 8012cd2:	4403      	add	r3, r0
 8012cd4:	4406      	add	r6, r0
 8012cd6:	9306      	str	r3, [sp, #24]
 8012cd8:	9b00      	ldr	r3, [sp, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	dd05      	ble.n	8012cea <_dtoa_r+0x83a>
 8012cde:	9902      	ldr	r1, [sp, #8]
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	4648      	mov	r0, r9
 8012ce4:	f001 f850 	bl	8013d88 <__lshift>
 8012ce8:	9002      	str	r0, [sp, #8]
 8012cea:	9b06      	ldr	r3, [sp, #24]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	dd05      	ble.n	8012cfc <_dtoa_r+0x84c>
 8012cf0:	4621      	mov	r1, r4
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	4648      	mov	r0, r9
 8012cf6:	f001 f847 	bl	8013d88 <__lshift>
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d061      	beq.n	8012dc6 <_dtoa_r+0x916>
 8012d02:	9802      	ldr	r0, [sp, #8]
 8012d04:	4621      	mov	r1, r4
 8012d06:	f001 f8ab 	bl	8013e60 <__mcmp>
 8012d0a:	2800      	cmp	r0, #0
 8012d0c:	da5b      	bge.n	8012dc6 <_dtoa_r+0x916>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	9902      	ldr	r1, [sp, #8]
 8012d12:	220a      	movs	r2, #10
 8012d14:	4648      	mov	r0, r9
 8012d16:	f000 fe49 	bl	80139ac <__multadd>
 8012d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d1c:	9002      	str	r0, [sp, #8]
 8012d1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f000 8177 	beq.w	8013016 <_dtoa_r+0xb66>
 8012d28:	4629      	mov	r1, r5
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	220a      	movs	r2, #10
 8012d2e:	4648      	mov	r0, r9
 8012d30:	f000 fe3c 	bl	80139ac <__multadd>
 8012d34:	f1bb 0f00 	cmp.w	fp, #0
 8012d38:	4605      	mov	r5, r0
 8012d3a:	dc6f      	bgt.n	8012e1c <_dtoa_r+0x96c>
 8012d3c:	9b07      	ldr	r3, [sp, #28]
 8012d3e:	2b02      	cmp	r3, #2
 8012d40:	dc49      	bgt.n	8012dd6 <_dtoa_r+0x926>
 8012d42:	e06b      	b.n	8012e1c <_dtoa_r+0x96c>
 8012d44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012d4a:	e73c      	b.n	8012bc6 <_dtoa_r+0x716>
 8012d4c:	3fe00000 	.word	0x3fe00000
 8012d50:	40240000 	.word	0x40240000
 8012d54:	9b03      	ldr	r3, [sp, #12]
 8012d56:	1e5c      	subs	r4, r3, #1
 8012d58:	9b08      	ldr	r3, [sp, #32]
 8012d5a:	42a3      	cmp	r3, r4
 8012d5c:	db09      	blt.n	8012d72 <_dtoa_r+0x8c2>
 8012d5e:	1b1c      	subs	r4, r3, r4
 8012d60:	9b03      	ldr	r3, [sp, #12]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f6bf af30 	bge.w	8012bc8 <_dtoa_r+0x718>
 8012d68:	9b00      	ldr	r3, [sp, #0]
 8012d6a:	9a03      	ldr	r2, [sp, #12]
 8012d6c:	1a9e      	subs	r6, r3, r2
 8012d6e:	2300      	movs	r3, #0
 8012d70:	e72b      	b.n	8012bca <_dtoa_r+0x71a>
 8012d72:	9b08      	ldr	r3, [sp, #32]
 8012d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d76:	9408      	str	r4, [sp, #32]
 8012d78:	1ae3      	subs	r3, r4, r3
 8012d7a:	441a      	add	r2, r3
 8012d7c:	9e00      	ldr	r6, [sp, #0]
 8012d7e:	9b03      	ldr	r3, [sp, #12]
 8012d80:	920d      	str	r2, [sp, #52]	@ 0x34
 8012d82:	2400      	movs	r4, #0
 8012d84:	e721      	b.n	8012bca <_dtoa_r+0x71a>
 8012d86:	9c08      	ldr	r4, [sp, #32]
 8012d88:	9e00      	ldr	r6, [sp, #0]
 8012d8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012d8c:	e728      	b.n	8012be0 <_dtoa_r+0x730>
 8012d8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012d92:	e751      	b.n	8012c38 <_dtoa_r+0x788>
 8012d94:	9a08      	ldr	r2, [sp, #32]
 8012d96:	9902      	ldr	r1, [sp, #8]
 8012d98:	e750      	b.n	8012c3c <_dtoa_r+0x78c>
 8012d9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8012d9e:	e751      	b.n	8012c44 <_dtoa_r+0x794>
 8012da0:	2300      	movs	r3, #0
 8012da2:	e779      	b.n	8012c98 <_dtoa_r+0x7e8>
 8012da4:	9b04      	ldr	r3, [sp, #16]
 8012da6:	e777      	b.n	8012c98 <_dtoa_r+0x7e8>
 8012da8:	2300      	movs	r3, #0
 8012daa:	9308      	str	r3, [sp, #32]
 8012dac:	e779      	b.n	8012ca2 <_dtoa_r+0x7f2>
 8012dae:	d093      	beq.n	8012cd8 <_dtoa_r+0x828>
 8012db0:	9a00      	ldr	r2, [sp, #0]
 8012db2:	331c      	adds	r3, #28
 8012db4:	441a      	add	r2, r3
 8012db6:	9200      	str	r2, [sp, #0]
 8012db8:	9a06      	ldr	r2, [sp, #24]
 8012dba:	441a      	add	r2, r3
 8012dbc:	441e      	add	r6, r3
 8012dbe:	9206      	str	r2, [sp, #24]
 8012dc0:	e78a      	b.n	8012cd8 <_dtoa_r+0x828>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	e7f4      	b.n	8012db0 <_dtoa_r+0x900>
 8012dc6:	9b03      	ldr	r3, [sp, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	46b8      	mov	r8, r7
 8012dcc:	dc20      	bgt.n	8012e10 <_dtoa_r+0x960>
 8012dce:	469b      	mov	fp, r3
 8012dd0:	9b07      	ldr	r3, [sp, #28]
 8012dd2:	2b02      	cmp	r3, #2
 8012dd4:	dd1e      	ble.n	8012e14 <_dtoa_r+0x964>
 8012dd6:	f1bb 0f00 	cmp.w	fp, #0
 8012dda:	f47f adb1 	bne.w	8012940 <_dtoa_r+0x490>
 8012dde:	4621      	mov	r1, r4
 8012de0:	465b      	mov	r3, fp
 8012de2:	2205      	movs	r2, #5
 8012de4:	4648      	mov	r0, r9
 8012de6:	f000 fde1 	bl	80139ac <__multadd>
 8012dea:	4601      	mov	r1, r0
 8012dec:	4604      	mov	r4, r0
 8012dee:	9802      	ldr	r0, [sp, #8]
 8012df0:	f001 f836 	bl	8013e60 <__mcmp>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	f77f ada3 	ble.w	8012940 <_dtoa_r+0x490>
 8012dfa:	4656      	mov	r6, sl
 8012dfc:	2331      	movs	r3, #49	@ 0x31
 8012dfe:	f806 3b01 	strb.w	r3, [r6], #1
 8012e02:	f108 0801 	add.w	r8, r8, #1
 8012e06:	e59f      	b.n	8012948 <_dtoa_r+0x498>
 8012e08:	9c03      	ldr	r4, [sp, #12]
 8012e0a:	46b8      	mov	r8, r7
 8012e0c:	4625      	mov	r5, r4
 8012e0e:	e7f4      	b.n	8012dfa <_dtoa_r+0x94a>
 8012e10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f000 8101 	beq.w	801301e <_dtoa_r+0xb6e>
 8012e1c:	2e00      	cmp	r6, #0
 8012e1e:	dd05      	ble.n	8012e2c <_dtoa_r+0x97c>
 8012e20:	4629      	mov	r1, r5
 8012e22:	4632      	mov	r2, r6
 8012e24:	4648      	mov	r0, r9
 8012e26:	f000 ffaf 	bl	8013d88 <__lshift>
 8012e2a:	4605      	mov	r5, r0
 8012e2c:	9b08      	ldr	r3, [sp, #32]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d05c      	beq.n	8012eec <_dtoa_r+0xa3c>
 8012e32:	6869      	ldr	r1, [r5, #4]
 8012e34:	4648      	mov	r0, r9
 8012e36:	f000 fd57 	bl	80138e8 <_Balloc>
 8012e3a:	4606      	mov	r6, r0
 8012e3c:	b928      	cbnz	r0, 8012e4a <_dtoa_r+0x99a>
 8012e3e:	4b82      	ldr	r3, [pc, #520]	@ (8013048 <_dtoa_r+0xb98>)
 8012e40:	4602      	mov	r2, r0
 8012e42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012e46:	f7ff bb4a 	b.w	80124de <_dtoa_r+0x2e>
 8012e4a:	692a      	ldr	r2, [r5, #16]
 8012e4c:	3202      	adds	r2, #2
 8012e4e:	0092      	lsls	r2, r2, #2
 8012e50:	f105 010c 	add.w	r1, r5, #12
 8012e54:	300c      	adds	r0, #12
 8012e56:	f7ff fa66 	bl	8012326 <memcpy>
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	4648      	mov	r0, r9
 8012e60:	f000 ff92 	bl	8013d88 <__lshift>
 8012e64:	f10a 0301 	add.w	r3, sl, #1
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	eb0a 030b 	add.w	r3, sl, fp
 8012e6e:	9308      	str	r3, [sp, #32]
 8012e70:	9b04      	ldr	r3, [sp, #16]
 8012e72:	f003 0301 	and.w	r3, r3, #1
 8012e76:	462f      	mov	r7, r5
 8012e78:	9306      	str	r3, [sp, #24]
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	9b00      	ldr	r3, [sp, #0]
 8012e7e:	9802      	ldr	r0, [sp, #8]
 8012e80:	4621      	mov	r1, r4
 8012e82:	f103 3bff 	add.w	fp, r3, #4294967295
 8012e86:	f7ff fa8b 	bl	80123a0 <quorem>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	3330      	adds	r3, #48	@ 0x30
 8012e8e:	9003      	str	r0, [sp, #12]
 8012e90:	4639      	mov	r1, r7
 8012e92:	9802      	ldr	r0, [sp, #8]
 8012e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e96:	f000 ffe3 	bl	8013e60 <__mcmp>
 8012e9a:	462a      	mov	r2, r5
 8012e9c:	9004      	str	r0, [sp, #16]
 8012e9e:	4621      	mov	r1, r4
 8012ea0:	4648      	mov	r0, r9
 8012ea2:	f000 fff9 	bl	8013e98 <__mdiff>
 8012ea6:	68c2      	ldr	r2, [r0, #12]
 8012ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eaa:	4606      	mov	r6, r0
 8012eac:	bb02      	cbnz	r2, 8012ef0 <_dtoa_r+0xa40>
 8012eae:	4601      	mov	r1, r0
 8012eb0:	9802      	ldr	r0, [sp, #8]
 8012eb2:	f000 ffd5 	bl	8013e60 <__mcmp>
 8012eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eb8:	4602      	mov	r2, r0
 8012eba:	4631      	mov	r1, r6
 8012ebc:	4648      	mov	r0, r9
 8012ebe:	920c      	str	r2, [sp, #48]	@ 0x30
 8012ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ec2:	f000 fd51 	bl	8013968 <_Bfree>
 8012ec6:	9b07      	ldr	r3, [sp, #28]
 8012ec8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012eca:	9e00      	ldr	r6, [sp, #0]
 8012ecc:	ea42 0103 	orr.w	r1, r2, r3
 8012ed0:	9b06      	ldr	r3, [sp, #24]
 8012ed2:	4319      	orrs	r1, r3
 8012ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ed6:	d10d      	bne.n	8012ef4 <_dtoa_r+0xa44>
 8012ed8:	2b39      	cmp	r3, #57	@ 0x39
 8012eda:	d027      	beq.n	8012f2c <_dtoa_r+0xa7c>
 8012edc:	9a04      	ldr	r2, [sp, #16]
 8012ede:	2a00      	cmp	r2, #0
 8012ee0:	dd01      	ble.n	8012ee6 <_dtoa_r+0xa36>
 8012ee2:	9b03      	ldr	r3, [sp, #12]
 8012ee4:	3331      	adds	r3, #49	@ 0x31
 8012ee6:	f88b 3000 	strb.w	r3, [fp]
 8012eea:	e52e      	b.n	801294a <_dtoa_r+0x49a>
 8012eec:	4628      	mov	r0, r5
 8012eee:	e7b9      	b.n	8012e64 <_dtoa_r+0x9b4>
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	e7e2      	b.n	8012eba <_dtoa_r+0xa0a>
 8012ef4:	9904      	ldr	r1, [sp, #16]
 8012ef6:	2900      	cmp	r1, #0
 8012ef8:	db04      	blt.n	8012f04 <_dtoa_r+0xa54>
 8012efa:	9807      	ldr	r0, [sp, #28]
 8012efc:	4301      	orrs	r1, r0
 8012efe:	9806      	ldr	r0, [sp, #24]
 8012f00:	4301      	orrs	r1, r0
 8012f02:	d120      	bne.n	8012f46 <_dtoa_r+0xa96>
 8012f04:	2a00      	cmp	r2, #0
 8012f06:	ddee      	ble.n	8012ee6 <_dtoa_r+0xa36>
 8012f08:	9902      	ldr	r1, [sp, #8]
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	4648      	mov	r0, r9
 8012f10:	f000 ff3a 	bl	8013d88 <__lshift>
 8012f14:	4621      	mov	r1, r4
 8012f16:	9002      	str	r0, [sp, #8]
 8012f18:	f000 ffa2 	bl	8013e60 <__mcmp>
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	9b00      	ldr	r3, [sp, #0]
 8012f20:	dc02      	bgt.n	8012f28 <_dtoa_r+0xa78>
 8012f22:	d1e0      	bne.n	8012ee6 <_dtoa_r+0xa36>
 8012f24:	07da      	lsls	r2, r3, #31
 8012f26:	d5de      	bpl.n	8012ee6 <_dtoa_r+0xa36>
 8012f28:	2b39      	cmp	r3, #57	@ 0x39
 8012f2a:	d1da      	bne.n	8012ee2 <_dtoa_r+0xa32>
 8012f2c:	2339      	movs	r3, #57	@ 0x39
 8012f2e:	f88b 3000 	strb.w	r3, [fp]
 8012f32:	4633      	mov	r3, r6
 8012f34:	461e      	mov	r6, r3
 8012f36:	3b01      	subs	r3, #1
 8012f38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012f3c:	2a39      	cmp	r2, #57	@ 0x39
 8012f3e:	d04e      	beq.n	8012fde <_dtoa_r+0xb2e>
 8012f40:	3201      	adds	r2, #1
 8012f42:	701a      	strb	r2, [r3, #0]
 8012f44:	e501      	b.n	801294a <_dtoa_r+0x49a>
 8012f46:	2a00      	cmp	r2, #0
 8012f48:	dd03      	ble.n	8012f52 <_dtoa_r+0xaa2>
 8012f4a:	2b39      	cmp	r3, #57	@ 0x39
 8012f4c:	d0ee      	beq.n	8012f2c <_dtoa_r+0xa7c>
 8012f4e:	3301      	adds	r3, #1
 8012f50:	e7c9      	b.n	8012ee6 <_dtoa_r+0xa36>
 8012f52:	9a00      	ldr	r2, [sp, #0]
 8012f54:	9908      	ldr	r1, [sp, #32]
 8012f56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012f5a:	428a      	cmp	r2, r1
 8012f5c:	d028      	beq.n	8012fb0 <_dtoa_r+0xb00>
 8012f5e:	9902      	ldr	r1, [sp, #8]
 8012f60:	2300      	movs	r3, #0
 8012f62:	220a      	movs	r2, #10
 8012f64:	4648      	mov	r0, r9
 8012f66:	f000 fd21 	bl	80139ac <__multadd>
 8012f6a:	42af      	cmp	r7, r5
 8012f6c:	9002      	str	r0, [sp, #8]
 8012f6e:	f04f 0300 	mov.w	r3, #0
 8012f72:	f04f 020a 	mov.w	r2, #10
 8012f76:	4639      	mov	r1, r7
 8012f78:	4648      	mov	r0, r9
 8012f7a:	d107      	bne.n	8012f8c <_dtoa_r+0xadc>
 8012f7c:	f000 fd16 	bl	80139ac <__multadd>
 8012f80:	4607      	mov	r7, r0
 8012f82:	4605      	mov	r5, r0
 8012f84:	9b00      	ldr	r3, [sp, #0]
 8012f86:	3301      	adds	r3, #1
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	e777      	b.n	8012e7c <_dtoa_r+0x9cc>
 8012f8c:	f000 fd0e 	bl	80139ac <__multadd>
 8012f90:	4629      	mov	r1, r5
 8012f92:	4607      	mov	r7, r0
 8012f94:	2300      	movs	r3, #0
 8012f96:	220a      	movs	r2, #10
 8012f98:	4648      	mov	r0, r9
 8012f9a:	f000 fd07 	bl	80139ac <__multadd>
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	e7f0      	b.n	8012f84 <_dtoa_r+0xad4>
 8012fa2:	f1bb 0f00 	cmp.w	fp, #0
 8012fa6:	bfcc      	ite	gt
 8012fa8:	465e      	movgt	r6, fp
 8012faa:	2601      	movle	r6, #1
 8012fac:	4456      	add	r6, sl
 8012fae:	2700      	movs	r7, #0
 8012fb0:	9902      	ldr	r1, [sp, #8]
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	4648      	mov	r0, r9
 8012fb8:	f000 fee6 	bl	8013d88 <__lshift>
 8012fbc:	4621      	mov	r1, r4
 8012fbe:	9002      	str	r0, [sp, #8]
 8012fc0:	f000 ff4e 	bl	8013e60 <__mcmp>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	dcb4      	bgt.n	8012f32 <_dtoa_r+0xa82>
 8012fc8:	d102      	bne.n	8012fd0 <_dtoa_r+0xb20>
 8012fca:	9b00      	ldr	r3, [sp, #0]
 8012fcc:	07db      	lsls	r3, r3, #31
 8012fce:	d4b0      	bmi.n	8012f32 <_dtoa_r+0xa82>
 8012fd0:	4633      	mov	r3, r6
 8012fd2:	461e      	mov	r6, r3
 8012fd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fd8:	2a30      	cmp	r2, #48	@ 0x30
 8012fda:	d0fa      	beq.n	8012fd2 <_dtoa_r+0xb22>
 8012fdc:	e4b5      	b.n	801294a <_dtoa_r+0x49a>
 8012fde:	459a      	cmp	sl, r3
 8012fe0:	d1a8      	bne.n	8012f34 <_dtoa_r+0xa84>
 8012fe2:	2331      	movs	r3, #49	@ 0x31
 8012fe4:	f108 0801 	add.w	r8, r8, #1
 8012fe8:	f88a 3000 	strb.w	r3, [sl]
 8012fec:	e4ad      	b.n	801294a <_dtoa_r+0x49a>
 8012fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012ff0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801304c <_dtoa_r+0xb9c>
 8012ff4:	b11b      	cbz	r3, 8012ffe <_dtoa_r+0xb4e>
 8012ff6:	f10a 0308 	add.w	r3, sl, #8
 8012ffa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012ffc:	6013      	str	r3, [r2, #0]
 8012ffe:	4650      	mov	r0, sl
 8013000:	b017      	add	sp, #92	@ 0x5c
 8013002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013006:	9b07      	ldr	r3, [sp, #28]
 8013008:	2b01      	cmp	r3, #1
 801300a:	f77f ae2e 	ble.w	8012c6a <_dtoa_r+0x7ba>
 801300e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013010:	9308      	str	r3, [sp, #32]
 8013012:	2001      	movs	r0, #1
 8013014:	e64d      	b.n	8012cb2 <_dtoa_r+0x802>
 8013016:	f1bb 0f00 	cmp.w	fp, #0
 801301a:	f77f aed9 	ble.w	8012dd0 <_dtoa_r+0x920>
 801301e:	4656      	mov	r6, sl
 8013020:	9802      	ldr	r0, [sp, #8]
 8013022:	4621      	mov	r1, r4
 8013024:	f7ff f9bc 	bl	80123a0 <quorem>
 8013028:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801302c:	f806 3b01 	strb.w	r3, [r6], #1
 8013030:	eba6 020a 	sub.w	r2, r6, sl
 8013034:	4593      	cmp	fp, r2
 8013036:	ddb4      	ble.n	8012fa2 <_dtoa_r+0xaf2>
 8013038:	9902      	ldr	r1, [sp, #8]
 801303a:	2300      	movs	r3, #0
 801303c:	220a      	movs	r2, #10
 801303e:	4648      	mov	r0, r9
 8013040:	f000 fcb4 	bl	80139ac <__multadd>
 8013044:	9002      	str	r0, [sp, #8]
 8013046:	e7eb      	b.n	8013020 <_dtoa_r+0xb70>
 8013048:	08014fe8 	.word	0x08014fe8
 801304c:	08014f83 	.word	0x08014f83

08013050 <_free_r>:
 8013050:	b538      	push	{r3, r4, r5, lr}
 8013052:	4605      	mov	r5, r0
 8013054:	2900      	cmp	r1, #0
 8013056:	d041      	beq.n	80130dc <_free_r+0x8c>
 8013058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801305c:	1f0c      	subs	r4, r1, #4
 801305e:	2b00      	cmp	r3, #0
 8013060:	bfb8      	it	lt
 8013062:	18e4      	addlt	r4, r4, r3
 8013064:	f000 fc34 	bl	80138d0 <__malloc_lock>
 8013068:	4a1d      	ldr	r2, [pc, #116]	@ (80130e0 <_free_r+0x90>)
 801306a:	6813      	ldr	r3, [r2, #0]
 801306c:	b933      	cbnz	r3, 801307c <_free_r+0x2c>
 801306e:	6063      	str	r3, [r4, #4]
 8013070:	6014      	str	r4, [r2, #0]
 8013072:	4628      	mov	r0, r5
 8013074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013078:	f000 bc30 	b.w	80138dc <__malloc_unlock>
 801307c:	42a3      	cmp	r3, r4
 801307e:	d908      	bls.n	8013092 <_free_r+0x42>
 8013080:	6820      	ldr	r0, [r4, #0]
 8013082:	1821      	adds	r1, r4, r0
 8013084:	428b      	cmp	r3, r1
 8013086:	bf01      	itttt	eq
 8013088:	6819      	ldreq	r1, [r3, #0]
 801308a:	685b      	ldreq	r3, [r3, #4]
 801308c:	1809      	addeq	r1, r1, r0
 801308e:	6021      	streq	r1, [r4, #0]
 8013090:	e7ed      	b.n	801306e <_free_r+0x1e>
 8013092:	461a      	mov	r2, r3
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	b10b      	cbz	r3, 801309c <_free_r+0x4c>
 8013098:	42a3      	cmp	r3, r4
 801309a:	d9fa      	bls.n	8013092 <_free_r+0x42>
 801309c:	6811      	ldr	r1, [r2, #0]
 801309e:	1850      	adds	r0, r2, r1
 80130a0:	42a0      	cmp	r0, r4
 80130a2:	d10b      	bne.n	80130bc <_free_r+0x6c>
 80130a4:	6820      	ldr	r0, [r4, #0]
 80130a6:	4401      	add	r1, r0
 80130a8:	1850      	adds	r0, r2, r1
 80130aa:	4283      	cmp	r3, r0
 80130ac:	6011      	str	r1, [r2, #0]
 80130ae:	d1e0      	bne.n	8013072 <_free_r+0x22>
 80130b0:	6818      	ldr	r0, [r3, #0]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	6053      	str	r3, [r2, #4]
 80130b6:	4408      	add	r0, r1
 80130b8:	6010      	str	r0, [r2, #0]
 80130ba:	e7da      	b.n	8013072 <_free_r+0x22>
 80130bc:	d902      	bls.n	80130c4 <_free_r+0x74>
 80130be:	230c      	movs	r3, #12
 80130c0:	602b      	str	r3, [r5, #0]
 80130c2:	e7d6      	b.n	8013072 <_free_r+0x22>
 80130c4:	6820      	ldr	r0, [r4, #0]
 80130c6:	1821      	adds	r1, r4, r0
 80130c8:	428b      	cmp	r3, r1
 80130ca:	bf04      	itt	eq
 80130cc:	6819      	ldreq	r1, [r3, #0]
 80130ce:	685b      	ldreq	r3, [r3, #4]
 80130d0:	6063      	str	r3, [r4, #4]
 80130d2:	bf04      	itt	eq
 80130d4:	1809      	addeq	r1, r1, r0
 80130d6:	6021      	streq	r1, [r4, #0]
 80130d8:	6054      	str	r4, [r2, #4]
 80130da:	e7ca      	b.n	8013072 <_free_r+0x22>
 80130dc:	bd38      	pop	{r3, r4, r5, pc}
 80130de:	bf00      	nop
 80130e0:	20009320 	.word	0x20009320

080130e4 <rshift>:
 80130e4:	6903      	ldr	r3, [r0, #16]
 80130e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80130ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80130f2:	f100 0414 	add.w	r4, r0, #20
 80130f6:	dd45      	ble.n	8013184 <rshift+0xa0>
 80130f8:	f011 011f 	ands.w	r1, r1, #31
 80130fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013100:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013104:	d10c      	bne.n	8013120 <rshift+0x3c>
 8013106:	f100 0710 	add.w	r7, r0, #16
 801310a:	4629      	mov	r1, r5
 801310c:	42b1      	cmp	r1, r6
 801310e:	d334      	bcc.n	801317a <rshift+0x96>
 8013110:	1a9b      	subs	r3, r3, r2
 8013112:	009b      	lsls	r3, r3, #2
 8013114:	1eea      	subs	r2, r5, #3
 8013116:	4296      	cmp	r6, r2
 8013118:	bf38      	it	cc
 801311a:	2300      	movcc	r3, #0
 801311c:	4423      	add	r3, r4
 801311e:	e015      	b.n	801314c <rshift+0x68>
 8013120:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013124:	f1c1 0820 	rsb	r8, r1, #32
 8013128:	40cf      	lsrs	r7, r1
 801312a:	f105 0e04 	add.w	lr, r5, #4
 801312e:	46a1      	mov	r9, r4
 8013130:	4576      	cmp	r6, lr
 8013132:	46f4      	mov	ip, lr
 8013134:	d815      	bhi.n	8013162 <rshift+0x7e>
 8013136:	1a9a      	subs	r2, r3, r2
 8013138:	0092      	lsls	r2, r2, #2
 801313a:	3a04      	subs	r2, #4
 801313c:	3501      	adds	r5, #1
 801313e:	42ae      	cmp	r6, r5
 8013140:	bf38      	it	cc
 8013142:	2200      	movcc	r2, #0
 8013144:	18a3      	adds	r3, r4, r2
 8013146:	50a7      	str	r7, [r4, r2]
 8013148:	b107      	cbz	r7, 801314c <rshift+0x68>
 801314a:	3304      	adds	r3, #4
 801314c:	1b1a      	subs	r2, r3, r4
 801314e:	42a3      	cmp	r3, r4
 8013150:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013154:	bf08      	it	eq
 8013156:	2300      	moveq	r3, #0
 8013158:	6102      	str	r2, [r0, #16]
 801315a:	bf08      	it	eq
 801315c:	6143      	streq	r3, [r0, #20]
 801315e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013162:	f8dc c000 	ldr.w	ip, [ip]
 8013166:	fa0c fc08 	lsl.w	ip, ip, r8
 801316a:	ea4c 0707 	orr.w	r7, ip, r7
 801316e:	f849 7b04 	str.w	r7, [r9], #4
 8013172:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013176:	40cf      	lsrs	r7, r1
 8013178:	e7da      	b.n	8013130 <rshift+0x4c>
 801317a:	f851 cb04 	ldr.w	ip, [r1], #4
 801317e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013182:	e7c3      	b.n	801310c <rshift+0x28>
 8013184:	4623      	mov	r3, r4
 8013186:	e7e1      	b.n	801314c <rshift+0x68>

08013188 <__hexdig_fun>:
 8013188:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801318c:	2b09      	cmp	r3, #9
 801318e:	d802      	bhi.n	8013196 <__hexdig_fun+0xe>
 8013190:	3820      	subs	r0, #32
 8013192:	b2c0      	uxtb	r0, r0
 8013194:	4770      	bx	lr
 8013196:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801319a:	2b05      	cmp	r3, #5
 801319c:	d801      	bhi.n	80131a2 <__hexdig_fun+0x1a>
 801319e:	3847      	subs	r0, #71	@ 0x47
 80131a0:	e7f7      	b.n	8013192 <__hexdig_fun+0xa>
 80131a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80131a6:	2b05      	cmp	r3, #5
 80131a8:	d801      	bhi.n	80131ae <__hexdig_fun+0x26>
 80131aa:	3827      	subs	r0, #39	@ 0x27
 80131ac:	e7f1      	b.n	8013192 <__hexdig_fun+0xa>
 80131ae:	2000      	movs	r0, #0
 80131b0:	4770      	bx	lr
	...

080131b4 <__gethex>:
 80131b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b8:	b085      	sub	sp, #20
 80131ba:	468a      	mov	sl, r1
 80131bc:	9302      	str	r3, [sp, #8]
 80131be:	680b      	ldr	r3, [r1, #0]
 80131c0:	9001      	str	r0, [sp, #4]
 80131c2:	4690      	mov	r8, r2
 80131c4:	1c9c      	adds	r4, r3, #2
 80131c6:	46a1      	mov	r9, r4
 80131c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80131cc:	2830      	cmp	r0, #48	@ 0x30
 80131ce:	d0fa      	beq.n	80131c6 <__gethex+0x12>
 80131d0:	eba9 0303 	sub.w	r3, r9, r3
 80131d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80131d8:	f7ff ffd6 	bl	8013188 <__hexdig_fun>
 80131dc:	4605      	mov	r5, r0
 80131de:	2800      	cmp	r0, #0
 80131e0:	d168      	bne.n	80132b4 <__gethex+0x100>
 80131e2:	49a0      	ldr	r1, [pc, #640]	@ (8013464 <__gethex+0x2b0>)
 80131e4:	2201      	movs	r2, #1
 80131e6:	4648      	mov	r0, r9
 80131e8:	f7fe ff59 	bl	801209e <strncmp>
 80131ec:	4607      	mov	r7, r0
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d167      	bne.n	80132c2 <__gethex+0x10e>
 80131f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80131f6:	4626      	mov	r6, r4
 80131f8:	f7ff ffc6 	bl	8013188 <__hexdig_fun>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	d062      	beq.n	80132c6 <__gethex+0x112>
 8013200:	4623      	mov	r3, r4
 8013202:	7818      	ldrb	r0, [r3, #0]
 8013204:	2830      	cmp	r0, #48	@ 0x30
 8013206:	4699      	mov	r9, r3
 8013208:	f103 0301 	add.w	r3, r3, #1
 801320c:	d0f9      	beq.n	8013202 <__gethex+0x4e>
 801320e:	f7ff ffbb 	bl	8013188 <__hexdig_fun>
 8013212:	fab0 f580 	clz	r5, r0
 8013216:	096d      	lsrs	r5, r5, #5
 8013218:	f04f 0b01 	mov.w	fp, #1
 801321c:	464a      	mov	r2, r9
 801321e:	4616      	mov	r6, r2
 8013220:	3201      	adds	r2, #1
 8013222:	7830      	ldrb	r0, [r6, #0]
 8013224:	f7ff ffb0 	bl	8013188 <__hexdig_fun>
 8013228:	2800      	cmp	r0, #0
 801322a:	d1f8      	bne.n	801321e <__gethex+0x6a>
 801322c:	498d      	ldr	r1, [pc, #564]	@ (8013464 <__gethex+0x2b0>)
 801322e:	2201      	movs	r2, #1
 8013230:	4630      	mov	r0, r6
 8013232:	f7fe ff34 	bl	801209e <strncmp>
 8013236:	2800      	cmp	r0, #0
 8013238:	d13f      	bne.n	80132ba <__gethex+0x106>
 801323a:	b944      	cbnz	r4, 801324e <__gethex+0x9a>
 801323c:	1c74      	adds	r4, r6, #1
 801323e:	4622      	mov	r2, r4
 8013240:	4616      	mov	r6, r2
 8013242:	3201      	adds	r2, #1
 8013244:	7830      	ldrb	r0, [r6, #0]
 8013246:	f7ff ff9f 	bl	8013188 <__hexdig_fun>
 801324a:	2800      	cmp	r0, #0
 801324c:	d1f8      	bne.n	8013240 <__gethex+0x8c>
 801324e:	1ba4      	subs	r4, r4, r6
 8013250:	00a7      	lsls	r7, r4, #2
 8013252:	7833      	ldrb	r3, [r6, #0]
 8013254:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013258:	2b50      	cmp	r3, #80	@ 0x50
 801325a:	d13e      	bne.n	80132da <__gethex+0x126>
 801325c:	7873      	ldrb	r3, [r6, #1]
 801325e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013260:	d033      	beq.n	80132ca <__gethex+0x116>
 8013262:	2b2d      	cmp	r3, #45	@ 0x2d
 8013264:	d034      	beq.n	80132d0 <__gethex+0x11c>
 8013266:	1c71      	adds	r1, r6, #1
 8013268:	2400      	movs	r4, #0
 801326a:	7808      	ldrb	r0, [r1, #0]
 801326c:	f7ff ff8c 	bl	8013188 <__hexdig_fun>
 8013270:	1e43      	subs	r3, r0, #1
 8013272:	b2db      	uxtb	r3, r3
 8013274:	2b18      	cmp	r3, #24
 8013276:	d830      	bhi.n	80132da <__gethex+0x126>
 8013278:	f1a0 0210 	sub.w	r2, r0, #16
 801327c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013280:	f7ff ff82 	bl	8013188 <__hexdig_fun>
 8013284:	f100 3cff 	add.w	ip, r0, #4294967295
 8013288:	fa5f fc8c 	uxtb.w	ip, ip
 801328c:	f1bc 0f18 	cmp.w	ip, #24
 8013290:	f04f 030a 	mov.w	r3, #10
 8013294:	d91e      	bls.n	80132d4 <__gethex+0x120>
 8013296:	b104      	cbz	r4, 801329a <__gethex+0xe6>
 8013298:	4252      	negs	r2, r2
 801329a:	4417      	add	r7, r2
 801329c:	f8ca 1000 	str.w	r1, [sl]
 80132a0:	b1ed      	cbz	r5, 80132de <__gethex+0x12a>
 80132a2:	f1bb 0f00 	cmp.w	fp, #0
 80132a6:	bf0c      	ite	eq
 80132a8:	2506      	moveq	r5, #6
 80132aa:	2500      	movne	r5, #0
 80132ac:	4628      	mov	r0, r5
 80132ae:	b005      	add	sp, #20
 80132b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b4:	2500      	movs	r5, #0
 80132b6:	462c      	mov	r4, r5
 80132b8:	e7b0      	b.n	801321c <__gethex+0x68>
 80132ba:	2c00      	cmp	r4, #0
 80132bc:	d1c7      	bne.n	801324e <__gethex+0x9a>
 80132be:	4627      	mov	r7, r4
 80132c0:	e7c7      	b.n	8013252 <__gethex+0x9e>
 80132c2:	464e      	mov	r6, r9
 80132c4:	462f      	mov	r7, r5
 80132c6:	2501      	movs	r5, #1
 80132c8:	e7c3      	b.n	8013252 <__gethex+0x9e>
 80132ca:	2400      	movs	r4, #0
 80132cc:	1cb1      	adds	r1, r6, #2
 80132ce:	e7cc      	b.n	801326a <__gethex+0xb6>
 80132d0:	2401      	movs	r4, #1
 80132d2:	e7fb      	b.n	80132cc <__gethex+0x118>
 80132d4:	fb03 0002 	mla	r0, r3, r2, r0
 80132d8:	e7ce      	b.n	8013278 <__gethex+0xc4>
 80132da:	4631      	mov	r1, r6
 80132dc:	e7de      	b.n	801329c <__gethex+0xe8>
 80132de:	eba6 0309 	sub.w	r3, r6, r9
 80132e2:	3b01      	subs	r3, #1
 80132e4:	4629      	mov	r1, r5
 80132e6:	2b07      	cmp	r3, #7
 80132e8:	dc0a      	bgt.n	8013300 <__gethex+0x14c>
 80132ea:	9801      	ldr	r0, [sp, #4]
 80132ec:	f000 fafc 	bl	80138e8 <_Balloc>
 80132f0:	4604      	mov	r4, r0
 80132f2:	b940      	cbnz	r0, 8013306 <__gethex+0x152>
 80132f4:	4b5c      	ldr	r3, [pc, #368]	@ (8013468 <__gethex+0x2b4>)
 80132f6:	4602      	mov	r2, r0
 80132f8:	21e4      	movs	r1, #228	@ 0xe4
 80132fa:	485c      	ldr	r0, [pc, #368]	@ (801346c <__gethex+0x2b8>)
 80132fc:	f7ff f832 	bl	8012364 <__assert_func>
 8013300:	3101      	adds	r1, #1
 8013302:	105b      	asrs	r3, r3, #1
 8013304:	e7ef      	b.n	80132e6 <__gethex+0x132>
 8013306:	f100 0a14 	add.w	sl, r0, #20
 801330a:	2300      	movs	r3, #0
 801330c:	4655      	mov	r5, sl
 801330e:	469b      	mov	fp, r3
 8013310:	45b1      	cmp	r9, r6
 8013312:	d337      	bcc.n	8013384 <__gethex+0x1d0>
 8013314:	f845 bb04 	str.w	fp, [r5], #4
 8013318:	eba5 050a 	sub.w	r5, r5, sl
 801331c:	10ad      	asrs	r5, r5, #2
 801331e:	6125      	str	r5, [r4, #16]
 8013320:	4658      	mov	r0, fp
 8013322:	f000 fbd3 	bl	8013acc <__hi0bits>
 8013326:	016d      	lsls	r5, r5, #5
 8013328:	f8d8 6000 	ldr.w	r6, [r8]
 801332c:	1a2d      	subs	r5, r5, r0
 801332e:	42b5      	cmp	r5, r6
 8013330:	dd54      	ble.n	80133dc <__gethex+0x228>
 8013332:	1bad      	subs	r5, r5, r6
 8013334:	4629      	mov	r1, r5
 8013336:	4620      	mov	r0, r4
 8013338:	f000 ff5f 	bl	80141fa <__any_on>
 801333c:	4681      	mov	r9, r0
 801333e:	b178      	cbz	r0, 8013360 <__gethex+0x1ac>
 8013340:	1e6b      	subs	r3, r5, #1
 8013342:	1159      	asrs	r1, r3, #5
 8013344:	f003 021f 	and.w	r2, r3, #31
 8013348:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801334c:	f04f 0901 	mov.w	r9, #1
 8013350:	fa09 f202 	lsl.w	r2, r9, r2
 8013354:	420a      	tst	r2, r1
 8013356:	d003      	beq.n	8013360 <__gethex+0x1ac>
 8013358:	454b      	cmp	r3, r9
 801335a:	dc36      	bgt.n	80133ca <__gethex+0x216>
 801335c:	f04f 0902 	mov.w	r9, #2
 8013360:	4629      	mov	r1, r5
 8013362:	4620      	mov	r0, r4
 8013364:	f7ff febe 	bl	80130e4 <rshift>
 8013368:	442f      	add	r7, r5
 801336a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801336e:	42bb      	cmp	r3, r7
 8013370:	da42      	bge.n	80133f8 <__gethex+0x244>
 8013372:	9801      	ldr	r0, [sp, #4]
 8013374:	4621      	mov	r1, r4
 8013376:	f000 faf7 	bl	8013968 <_Bfree>
 801337a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801337c:	2300      	movs	r3, #0
 801337e:	6013      	str	r3, [r2, #0]
 8013380:	25a3      	movs	r5, #163	@ 0xa3
 8013382:	e793      	b.n	80132ac <__gethex+0xf8>
 8013384:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013388:	2a2e      	cmp	r2, #46	@ 0x2e
 801338a:	d012      	beq.n	80133b2 <__gethex+0x1fe>
 801338c:	2b20      	cmp	r3, #32
 801338e:	d104      	bne.n	801339a <__gethex+0x1e6>
 8013390:	f845 bb04 	str.w	fp, [r5], #4
 8013394:	f04f 0b00 	mov.w	fp, #0
 8013398:	465b      	mov	r3, fp
 801339a:	7830      	ldrb	r0, [r6, #0]
 801339c:	9303      	str	r3, [sp, #12]
 801339e:	f7ff fef3 	bl	8013188 <__hexdig_fun>
 80133a2:	9b03      	ldr	r3, [sp, #12]
 80133a4:	f000 000f 	and.w	r0, r0, #15
 80133a8:	4098      	lsls	r0, r3
 80133aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80133ae:	3304      	adds	r3, #4
 80133b0:	e7ae      	b.n	8013310 <__gethex+0x15c>
 80133b2:	45b1      	cmp	r9, r6
 80133b4:	d8ea      	bhi.n	801338c <__gethex+0x1d8>
 80133b6:	492b      	ldr	r1, [pc, #172]	@ (8013464 <__gethex+0x2b0>)
 80133b8:	9303      	str	r3, [sp, #12]
 80133ba:	2201      	movs	r2, #1
 80133bc:	4630      	mov	r0, r6
 80133be:	f7fe fe6e 	bl	801209e <strncmp>
 80133c2:	9b03      	ldr	r3, [sp, #12]
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d1e1      	bne.n	801338c <__gethex+0x1d8>
 80133c8:	e7a2      	b.n	8013310 <__gethex+0x15c>
 80133ca:	1ea9      	subs	r1, r5, #2
 80133cc:	4620      	mov	r0, r4
 80133ce:	f000 ff14 	bl	80141fa <__any_on>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d0c2      	beq.n	801335c <__gethex+0x1a8>
 80133d6:	f04f 0903 	mov.w	r9, #3
 80133da:	e7c1      	b.n	8013360 <__gethex+0x1ac>
 80133dc:	da09      	bge.n	80133f2 <__gethex+0x23e>
 80133de:	1b75      	subs	r5, r6, r5
 80133e0:	4621      	mov	r1, r4
 80133e2:	9801      	ldr	r0, [sp, #4]
 80133e4:	462a      	mov	r2, r5
 80133e6:	f000 fccf 	bl	8013d88 <__lshift>
 80133ea:	1b7f      	subs	r7, r7, r5
 80133ec:	4604      	mov	r4, r0
 80133ee:	f100 0a14 	add.w	sl, r0, #20
 80133f2:	f04f 0900 	mov.w	r9, #0
 80133f6:	e7b8      	b.n	801336a <__gethex+0x1b6>
 80133f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80133fc:	42bd      	cmp	r5, r7
 80133fe:	dd6f      	ble.n	80134e0 <__gethex+0x32c>
 8013400:	1bed      	subs	r5, r5, r7
 8013402:	42ae      	cmp	r6, r5
 8013404:	dc34      	bgt.n	8013470 <__gethex+0x2bc>
 8013406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801340a:	2b02      	cmp	r3, #2
 801340c:	d022      	beq.n	8013454 <__gethex+0x2a0>
 801340e:	2b03      	cmp	r3, #3
 8013410:	d024      	beq.n	801345c <__gethex+0x2a8>
 8013412:	2b01      	cmp	r3, #1
 8013414:	d115      	bne.n	8013442 <__gethex+0x28e>
 8013416:	42ae      	cmp	r6, r5
 8013418:	d113      	bne.n	8013442 <__gethex+0x28e>
 801341a:	2e01      	cmp	r6, #1
 801341c:	d10b      	bne.n	8013436 <__gethex+0x282>
 801341e:	9a02      	ldr	r2, [sp, #8]
 8013420:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013424:	6013      	str	r3, [r2, #0]
 8013426:	2301      	movs	r3, #1
 8013428:	6123      	str	r3, [r4, #16]
 801342a:	f8ca 3000 	str.w	r3, [sl]
 801342e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013430:	2562      	movs	r5, #98	@ 0x62
 8013432:	601c      	str	r4, [r3, #0]
 8013434:	e73a      	b.n	80132ac <__gethex+0xf8>
 8013436:	1e71      	subs	r1, r6, #1
 8013438:	4620      	mov	r0, r4
 801343a:	f000 fede 	bl	80141fa <__any_on>
 801343e:	2800      	cmp	r0, #0
 8013440:	d1ed      	bne.n	801341e <__gethex+0x26a>
 8013442:	9801      	ldr	r0, [sp, #4]
 8013444:	4621      	mov	r1, r4
 8013446:	f000 fa8f 	bl	8013968 <_Bfree>
 801344a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801344c:	2300      	movs	r3, #0
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	2550      	movs	r5, #80	@ 0x50
 8013452:	e72b      	b.n	80132ac <__gethex+0xf8>
 8013454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013456:	2b00      	cmp	r3, #0
 8013458:	d1f3      	bne.n	8013442 <__gethex+0x28e>
 801345a:	e7e0      	b.n	801341e <__gethex+0x26a>
 801345c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801345e:	2b00      	cmp	r3, #0
 8013460:	d1dd      	bne.n	801341e <__gethex+0x26a>
 8013462:	e7ee      	b.n	8013442 <__gethex+0x28e>
 8013464:	08014e98 	.word	0x08014e98
 8013468:	08014fe8 	.word	0x08014fe8
 801346c:	08014ff9 	.word	0x08014ff9
 8013470:	1e6f      	subs	r7, r5, #1
 8013472:	f1b9 0f00 	cmp.w	r9, #0
 8013476:	d130      	bne.n	80134da <__gethex+0x326>
 8013478:	b127      	cbz	r7, 8013484 <__gethex+0x2d0>
 801347a:	4639      	mov	r1, r7
 801347c:	4620      	mov	r0, r4
 801347e:	f000 febc 	bl	80141fa <__any_on>
 8013482:	4681      	mov	r9, r0
 8013484:	117a      	asrs	r2, r7, #5
 8013486:	2301      	movs	r3, #1
 8013488:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801348c:	f007 071f 	and.w	r7, r7, #31
 8013490:	40bb      	lsls	r3, r7
 8013492:	4213      	tst	r3, r2
 8013494:	4629      	mov	r1, r5
 8013496:	4620      	mov	r0, r4
 8013498:	bf18      	it	ne
 801349a:	f049 0902 	orrne.w	r9, r9, #2
 801349e:	f7ff fe21 	bl	80130e4 <rshift>
 80134a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80134a6:	1b76      	subs	r6, r6, r5
 80134a8:	2502      	movs	r5, #2
 80134aa:	f1b9 0f00 	cmp.w	r9, #0
 80134ae:	d047      	beq.n	8013540 <__gethex+0x38c>
 80134b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134b4:	2b02      	cmp	r3, #2
 80134b6:	d015      	beq.n	80134e4 <__gethex+0x330>
 80134b8:	2b03      	cmp	r3, #3
 80134ba:	d017      	beq.n	80134ec <__gethex+0x338>
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d109      	bne.n	80134d4 <__gethex+0x320>
 80134c0:	f019 0f02 	tst.w	r9, #2
 80134c4:	d006      	beq.n	80134d4 <__gethex+0x320>
 80134c6:	f8da 3000 	ldr.w	r3, [sl]
 80134ca:	ea49 0903 	orr.w	r9, r9, r3
 80134ce:	f019 0f01 	tst.w	r9, #1
 80134d2:	d10e      	bne.n	80134f2 <__gethex+0x33e>
 80134d4:	f045 0510 	orr.w	r5, r5, #16
 80134d8:	e032      	b.n	8013540 <__gethex+0x38c>
 80134da:	f04f 0901 	mov.w	r9, #1
 80134de:	e7d1      	b.n	8013484 <__gethex+0x2d0>
 80134e0:	2501      	movs	r5, #1
 80134e2:	e7e2      	b.n	80134aa <__gethex+0x2f6>
 80134e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134e6:	f1c3 0301 	rsb	r3, r3, #1
 80134ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80134ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d0f0      	beq.n	80134d4 <__gethex+0x320>
 80134f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80134f6:	f104 0314 	add.w	r3, r4, #20
 80134fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80134fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013502:	f04f 0c00 	mov.w	ip, #0
 8013506:	4618      	mov	r0, r3
 8013508:	f853 2b04 	ldr.w	r2, [r3], #4
 801350c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013510:	d01b      	beq.n	801354a <__gethex+0x396>
 8013512:	3201      	adds	r2, #1
 8013514:	6002      	str	r2, [r0, #0]
 8013516:	2d02      	cmp	r5, #2
 8013518:	f104 0314 	add.w	r3, r4, #20
 801351c:	d13c      	bne.n	8013598 <__gethex+0x3e4>
 801351e:	f8d8 2000 	ldr.w	r2, [r8]
 8013522:	3a01      	subs	r2, #1
 8013524:	42b2      	cmp	r2, r6
 8013526:	d109      	bne.n	801353c <__gethex+0x388>
 8013528:	1171      	asrs	r1, r6, #5
 801352a:	2201      	movs	r2, #1
 801352c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013530:	f006 061f 	and.w	r6, r6, #31
 8013534:	fa02 f606 	lsl.w	r6, r2, r6
 8013538:	421e      	tst	r6, r3
 801353a:	d13a      	bne.n	80135b2 <__gethex+0x3fe>
 801353c:	f045 0520 	orr.w	r5, r5, #32
 8013540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013542:	601c      	str	r4, [r3, #0]
 8013544:	9b02      	ldr	r3, [sp, #8]
 8013546:	601f      	str	r7, [r3, #0]
 8013548:	e6b0      	b.n	80132ac <__gethex+0xf8>
 801354a:	4299      	cmp	r1, r3
 801354c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013550:	d8d9      	bhi.n	8013506 <__gethex+0x352>
 8013552:	68a3      	ldr	r3, [r4, #8]
 8013554:	459b      	cmp	fp, r3
 8013556:	db17      	blt.n	8013588 <__gethex+0x3d4>
 8013558:	6861      	ldr	r1, [r4, #4]
 801355a:	9801      	ldr	r0, [sp, #4]
 801355c:	3101      	adds	r1, #1
 801355e:	f000 f9c3 	bl	80138e8 <_Balloc>
 8013562:	4681      	mov	r9, r0
 8013564:	b918      	cbnz	r0, 801356e <__gethex+0x3ba>
 8013566:	4b1a      	ldr	r3, [pc, #104]	@ (80135d0 <__gethex+0x41c>)
 8013568:	4602      	mov	r2, r0
 801356a:	2184      	movs	r1, #132	@ 0x84
 801356c:	e6c5      	b.n	80132fa <__gethex+0x146>
 801356e:	6922      	ldr	r2, [r4, #16]
 8013570:	3202      	adds	r2, #2
 8013572:	f104 010c 	add.w	r1, r4, #12
 8013576:	0092      	lsls	r2, r2, #2
 8013578:	300c      	adds	r0, #12
 801357a:	f7fe fed4 	bl	8012326 <memcpy>
 801357e:	4621      	mov	r1, r4
 8013580:	9801      	ldr	r0, [sp, #4]
 8013582:	f000 f9f1 	bl	8013968 <_Bfree>
 8013586:	464c      	mov	r4, r9
 8013588:	6923      	ldr	r3, [r4, #16]
 801358a:	1c5a      	adds	r2, r3, #1
 801358c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013590:	6122      	str	r2, [r4, #16]
 8013592:	2201      	movs	r2, #1
 8013594:	615a      	str	r2, [r3, #20]
 8013596:	e7be      	b.n	8013516 <__gethex+0x362>
 8013598:	6922      	ldr	r2, [r4, #16]
 801359a:	455a      	cmp	r2, fp
 801359c:	dd0b      	ble.n	80135b6 <__gethex+0x402>
 801359e:	2101      	movs	r1, #1
 80135a0:	4620      	mov	r0, r4
 80135a2:	f7ff fd9f 	bl	80130e4 <rshift>
 80135a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135aa:	3701      	adds	r7, #1
 80135ac:	42bb      	cmp	r3, r7
 80135ae:	f6ff aee0 	blt.w	8013372 <__gethex+0x1be>
 80135b2:	2501      	movs	r5, #1
 80135b4:	e7c2      	b.n	801353c <__gethex+0x388>
 80135b6:	f016 061f 	ands.w	r6, r6, #31
 80135ba:	d0fa      	beq.n	80135b2 <__gethex+0x3fe>
 80135bc:	4453      	add	r3, sl
 80135be:	f1c6 0620 	rsb	r6, r6, #32
 80135c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80135c6:	f000 fa81 	bl	8013acc <__hi0bits>
 80135ca:	42b0      	cmp	r0, r6
 80135cc:	dbe7      	blt.n	801359e <__gethex+0x3ea>
 80135ce:	e7f0      	b.n	80135b2 <__gethex+0x3fe>
 80135d0:	08014fe8 	.word	0x08014fe8

080135d4 <L_shift>:
 80135d4:	f1c2 0208 	rsb	r2, r2, #8
 80135d8:	0092      	lsls	r2, r2, #2
 80135da:	b570      	push	{r4, r5, r6, lr}
 80135dc:	f1c2 0620 	rsb	r6, r2, #32
 80135e0:	6843      	ldr	r3, [r0, #4]
 80135e2:	6804      	ldr	r4, [r0, #0]
 80135e4:	fa03 f506 	lsl.w	r5, r3, r6
 80135e8:	432c      	orrs	r4, r5
 80135ea:	40d3      	lsrs	r3, r2
 80135ec:	6004      	str	r4, [r0, #0]
 80135ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80135f2:	4288      	cmp	r0, r1
 80135f4:	d3f4      	bcc.n	80135e0 <L_shift+0xc>
 80135f6:	bd70      	pop	{r4, r5, r6, pc}

080135f8 <__match>:
 80135f8:	b530      	push	{r4, r5, lr}
 80135fa:	6803      	ldr	r3, [r0, #0]
 80135fc:	3301      	adds	r3, #1
 80135fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013602:	b914      	cbnz	r4, 801360a <__match+0x12>
 8013604:	6003      	str	r3, [r0, #0]
 8013606:	2001      	movs	r0, #1
 8013608:	bd30      	pop	{r4, r5, pc}
 801360a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801360e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013612:	2d19      	cmp	r5, #25
 8013614:	bf98      	it	ls
 8013616:	3220      	addls	r2, #32
 8013618:	42a2      	cmp	r2, r4
 801361a:	d0f0      	beq.n	80135fe <__match+0x6>
 801361c:	2000      	movs	r0, #0
 801361e:	e7f3      	b.n	8013608 <__match+0x10>

08013620 <__hexnan>:
 8013620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013624:	680b      	ldr	r3, [r1, #0]
 8013626:	6801      	ldr	r1, [r0, #0]
 8013628:	115e      	asrs	r6, r3, #5
 801362a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801362e:	f013 031f 	ands.w	r3, r3, #31
 8013632:	b087      	sub	sp, #28
 8013634:	bf18      	it	ne
 8013636:	3604      	addne	r6, #4
 8013638:	2500      	movs	r5, #0
 801363a:	1f37      	subs	r7, r6, #4
 801363c:	4682      	mov	sl, r0
 801363e:	4690      	mov	r8, r2
 8013640:	9301      	str	r3, [sp, #4]
 8013642:	f846 5c04 	str.w	r5, [r6, #-4]
 8013646:	46b9      	mov	r9, r7
 8013648:	463c      	mov	r4, r7
 801364a:	9502      	str	r5, [sp, #8]
 801364c:	46ab      	mov	fp, r5
 801364e:	784a      	ldrb	r2, [r1, #1]
 8013650:	1c4b      	adds	r3, r1, #1
 8013652:	9303      	str	r3, [sp, #12]
 8013654:	b342      	cbz	r2, 80136a8 <__hexnan+0x88>
 8013656:	4610      	mov	r0, r2
 8013658:	9105      	str	r1, [sp, #20]
 801365a:	9204      	str	r2, [sp, #16]
 801365c:	f7ff fd94 	bl	8013188 <__hexdig_fun>
 8013660:	2800      	cmp	r0, #0
 8013662:	d151      	bne.n	8013708 <__hexnan+0xe8>
 8013664:	9a04      	ldr	r2, [sp, #16]
 8013666:	9905      	ldr	r1, [sp, #20]
 8013668:	2a20      	cmp	r2, #32
 801366a:	d818      	bhi.n	801369e <__hexnan+0x7e>
 801366c:	9b02      	ldr	r3, [sp, #8]
 801366e:	459b      	cmp	fp, r3
 8013670:	dd13      	ble.n	801369a <__hexnan+0x7a>
 8013672:	454c      	cmp	r4, r9
 8013674:	d206      	bcs.n	8013684 <__hexnan+0x64>
 8013676:	2d07      	cmp	r5, #7
 8013678:	dc04      	bgt.n	8013684 <__hexnan+0x64>
 801367a:	462a      	mov	r2, r5
 801367c:	4649      	mov	r1, r9
 801367e:	4620      	mov	r0, r4
 8013680:	f7ff ffa8 	bl	80135d4 <L_shift>
 8013684:	4544      	cmp	r4, r8
 8013686:	d952      	bls.n	801372e <__hexnan+0x10e>
 8013688:	2300      	movs	r3, #0
 801368a:	f1a4 0904 	sub.w	r9, r4, #4
 801368e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013692:	f8cd b008 	str.w	fp, [sp, #8]
 8013696:	464c      	mov	r4, r9
 8013698:	461d      	mov	r5, r3
 801369a:	9903      	ldr	r1, [sp, #12]
 801369c:	e7d7      	b.n	801364e <__hexnan+0x2e>
 801369e:	2a29      	cmp	r2, #41	@ 0x29
 80136a0:	d157      	bne.n	8013752 <__hexnan+0x132>
 80136a2:	3102      	adds	r1, #2
 80136a4:	f8ca 1000 	str.w	r1, [sl]
 80136a8:	f1bb 0f00 	cmp.w	fp, #0
 80136ac:	d051      	beq.n	8013752 <__hexnan+0x132>
 80136ae:	454c      	cmp	r4, r9
 80136b0:	d206      	bcs.n	80136c0 <__hexnan+0xa0>
 80136b2:	2d07      	cmp	r5, #7
 80136b4:	dc04      	bgt.n	80136c0 <__hexnan+0xa0>
 80136b6:	462a      	mov	r2, r5
 80136b8:	4649      	mov	r1, r9
 80136ba:	4620      	mov	r0, r4
 80136bc:	f7ff ff8a 	bl	80135d4 <L_shift>
 80136c0:	4544      	cmp	r4, r8
 80136c2:	d936      	bls.n	8013732 <__hexnan+0x112>
 80136c4:	f1a8 0204 	sub.w	r2, r8, #4
 80136c8:	4623      	mov	r3, r4
 80136ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80136ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80136d2:	429f      	cmp	r7, r3
 80136d4:	d2f9      	bcs.n	80136ca <__hexnan+0xaa>
 80136d6:	1b3b      	subs	r3, r7, r4
 80136d8:	f023 0303 	bic.w	r3, r3, #3
 80136dc:	3304      	adds	r3, #4
 80136de:	3401      	adds	r4, #1
 80136e0:	3e03      	subs	r6, #3
 80136e2:	42b4      	cmp	r4, r6
 80136e4:	bf88      	it	hi
 80136e6:	2304      	movhi	r3, #4
 80136e8:	4443      	add	r3, r8
 80136ea:	2200      	movs	r2, #0
 80136ec:	f843 2b04 	str.w	r2, [r3], #4
 80136f0:	429f      	cmp	r7, r3
 80136f2:	d2fb      	bcs.n	80136ec <__hexnan+0xcc>
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	b91b      	cbnz	r3, 8013700 <__hexnan+0xe0>
 80136f8:	4547      	cmp	r7, r8
 80136fa:	d128      	bne.n	801374e <__hexnan+0x12e>
 80136fc:	2301      	movs	r3, #1
 80136fe:	603b      	str	r3, [r7, #0]
 8013700:	2005      	movs	r0, #5
 8013702:	b007      	add	sp, #28
 8013704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013708:	3501      	adds	r5, #1
 801370a:	2d08      	cmp	r5, #8
 801370c:	f10b 0b01 	add.w	fp, fp, #1
 8013710:	dd06      	ble.n	8013720 <__hexnan+0x100>
 8013712:	4544      	cmp	r4, r8
 8013714:	d9c1      	bls.n	801369a <__hexnan+0x7a>
 8013716:	2300      	movs	r3, #0
 8013718:	f844 3c04 	str.w	r3, [r4, #-4]
 801371c:	2501      	movs	r5, #1
 801371e:	3c04      	subs	r4, #4
 8013720:	6822      	ldr	r2, [r4, #0]
 8013722:	f000 000f 	and.w	r0, r0, #15
 8013726:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801372a:	6020      	str	r0, [r4, #0]
 801372c:	e7b5      	b.n	801369a <__hexnan+0x7a>
 801372e:	2508      	movs	r5, #8
 8013730:	e7b3      	b.n	801369a <__hexnan+0x7a>
 8013732:	9b01      	ldr	r3, [sp, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d0dd      	beq.n	80136f4 <__hexnan+0xd4>
 8013738:	f1c3 0320 	rsb	r3, r3, #32
 801373c:	f04f 32ff 	mov.w	r2, #4294967295
 8013740:	40da      	lsrs	r2, r3
 8013742:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013746:	4013      	ands	r3, r2
 8013748:	f846 3c04 	str.w	r3, [r6, #-4]
 801374c:	e7d2      	b.n	80136f4 <__hexnan+0xd4>
 801374e:	3f04      	subs	r7, #4
 8013750:	e7d0      	b.n	80136f4 <__hexnan+0xd4>
 8013752:	2004      	movs	r0, #4
 8013754:	e7d5      	b.n	8013702 <__hexnan+0xe2>
	...

08013758 <malloc>:
 8013758:	4b02      	ldr	r3, [pc, #8]	@ (8013764 <malloc+0xc>)
 801375a:	4601      	mov	r1, r0
 801375c:	6818      	ldr	r0, [r3, #0]
 801375e:	f000 b825 	b.w	80137ac <_malloc_r>
 8013762:	bf00      	nop
 8013764:	2000018c 	.word	0x2000018c

08013768 <sbrk_aligned>:
 8013768:	b570      	push	{r4, r5, r6, lr}
 801376a:	4e0f      	ldr	r6, [pc, #60]	@ (80137a8 <sbrk_aligned+0x40>)
 801376c:	460c      	mov	r4, r1
 801376e:	6831      	ldr	r1, [r6, #0]
 8013770:	4605      	mov	r5, r0
 8013772:	b911      	cbnz	r1, 801377a <sbrk_aligned+0x12>
 8013774:	f001 f964 	bl	8014a40 <_sbrk_r>
 8013778:	6030      	str	r0, [r6, #0]
 801377a:	4621      	mov	r1, r4
 801377c:	4628      	mov	r0, r5
 801377e:	f001 f95f 	bl	8014a40 <_sbrk_r>
 8013782:	1c43      	adds	r3, r0, #1
 8013784:	d103      	bne.n	801378e <sbrk_aligned+0x26>
 8013786:	f04f 34ff 	mov.w	r4, #4294967295
 801378a:	4620      	mov	r0, r4
 801378c:	bd70      	pop	{r4, r5, r6, pc}
 801378e:	1cc4      	adds	r4, r0, #3
 8013790:	f024 0403 	bic.w	r4, r4, #3
 8013794:	42a0      	cmp	r0, r4
 8013796:	d0f8      	beq.n	801378a <sbrk_aligned+0x22>
 8013798:	1a21      	subs	r1, r4, r0
 801379a:	4628      	mov	r0, r5
 801379c:	f001 f950 	bl	8014a40 <_sbrk_r>
 80137a0:	3001      	adds	r0, #1
 80137a2:	d1f2      	bne.n	801378a <sbrk_aligned+0x22>
 80137a4:	e7ef      	b.n	8013786 <sbrk_aligned+0x1e>
 80137a6:	bf00      	nop
 80137a8:	2000931c 	.word	0x2000931c

080137ac <_malloc_r>:
 80137ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137b0:	1ccd      	adds	r5, r1, #3
 80137b2:	f025 0503 	bic.w	r5, r5, #3
 80137b6:	3508      	adds	r5, #8
 80137b8:	2d0c      	cmp	r5, #12
 80137ba:	bf38      	it	cc
 80137bc:	250c      	movcc	r5, #12
 80137be:	2d00      	cmp	r5, #0
 80137c0:	4606      	mov	r6, r0
 80137c2:	db01      	blt.n	80137c8 <_malloc_r+0x1c>
 80137c4:	42a9      	cmp	r1, r5
 80137c6:	d904      	bls.n	80137d2 <_malloc_r+0x26>
 80137c8:	230c      	movs	r3, #12
 80137ca:	6033      	str	r3, [r6, #0]
 80137cc:	2000      	movs	r0, #0
 80137ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80138a8 <_malloc_r+0xfc>
 80137d6:	f000 f87b 	bl	80138d0 <__malloc_lock>
 80137da:	f8d8 3000 	ldr.w	r3, [r8]
 80137de:	461c      	mov	r4, r3
 80137e0:	bb44      	cbnz	r4, 8013834 <_malloc_r+0x88>
 80137e2:	4629      	mov	r1, r5
 80137e4:	4630      	mov	r0, r6
 80137e6:	f7ff ffbf 	bl	8013768 <sbrk_aligned>
 80137ea:	1c43      	adds	r3, r0, #1
 80137ec:	4604      	mov	r4, r0
 80137ee:	d158      	bne.n	80138a2 <_malloc_r+0xf6>
 80137f0:	f8d8 4000 	ldr.w	r4, [r8]
 80137f4:	4627      	mov	r7, r4
 80137f6:	2f00      	cmp	r7, #0
 80137f8:	d143      	bne.n	8013882 <_malloc_r+0xd6>
 80137fa:	2c00      	cmp	r4, #0
 80137fc:	d04b      	beq.n	8013896 <_malloc_r+0xea>
 80137fe:	6823      	ldr	r3, [r4, #0]
 8013800:	4639      	mov	r1, r7
 8013802:	4630      	mov	r0, r6
 8013804:	eb04 0903 	add.w	r9, r4, r3
 8013808:	f001 f91a 	bl	8014a40 <_sbrk_r>
 801380c:	4581      	cmp	r9, r0
 801380e:	d142      	bne.n	8013896 <_malloc_r+0xea>
 8013810:	6821      	ldr	r1, [r4, #0]
 8013812:	1a6d      	subs	r5, r5, r1
 8013814:	4629      	mov	r1, r5
 8013816:	4630      	mov	r0, r6
 8013818:	f7ff ffa6 	bl	8013768 <sbrk_aligned>
 801381c:	3001      	adds	r0, #1
 801381e:	d03a      	beq.n	8013896 <_malloc_r+0xea>
 8013820:	6823      	ldr	r3, [r4, #0]
 8013822:	442b      	add	r3, r5
 8013824:	6023      	str	r3, [r4, #0]
 8013826:	f8d8 3000 	ldr.w	r3, [r8]
 801382a:	685a      	ldr	r2, [r3, #4]
 801382c:	bb62      	cbnz	r2, 8013888 <_malloc_r+0xdc>
 801382e:	f8c8 7000 	str.w	r7, [r8]
 8013832:	e00f      	b.n	8013854 <_malloc_r+0xa8>
 8013834:	6822      	ldr	r2, [r4, #0]
 8013836:	1b52      	subs	r2, r2, r5
 8013838:	d420      	bmi.n	801387c <_malloc_r+0xd0>
 801383a:	2a0b      	cmp	r2, #11
 801383c:	d917      	bls.n	801386e <_malloc_r+0xc2>
 801383e:	1961      	adds	r1, r4, r5
 8013840:	42a3      	cmp	r3, r4
 8013842:	6025      	str	r5, [r4, #0]
 8013844:	bf18      	it	ne
 8013846:	6059      	strne	r1, [r3, #4]
 8013848:	6863      	ldr	r3, [r4, #4]
 801384a:	bf08      	it	eq
 801384c:	f8c8 1000 	streq.w	r1, [r8]
 8013850:	5162      	str	r2, [r4, r5]
 8013852:	604b      	str	r3, [r1, #4]
 8013854:	4630      	mov	r0, r6
 8013856:	f000 f841 	bl	80138dc <__malloc_unlock>
 801385a:	f104 000b 	add.w	r0, r4, #11
 801385e:	1d23      	adds	r3, r4, #4
 8013860:	f020 0007 	bic.w	r0, r0, #7
 8013864:	1ac2      	subs	r2, r0, r3
 8013866:	bf1c      	itt	ne
 8013868:	1a1b      	subne	r3, r3, r0
 801386a:	50a3      	strne	r3, [r4, r2]
 801386c:	e7af      	b.n	80137ce <_malloc_r+0x22>
 801386e:	6862      	ldr	r2, [r4, #4]
 8013870:	42a3      	cmp	r3, r4
 8013872:	bf0c      	ite	eq
 8013874:	f8c8 2000 	streq.w	r2, [r8]
 8013878:	605a      	strne	r2, [r3, #4]
 801387a:	e7eb      	b.n	8013854 <_malloc_r+0xa8>
 801387c:	4623      	mov	r3, r4
 801387e:	6864      	ldr	r4, [r4, #4]
 8013880:	e7ae      	b.n	80137e0 <_malloc_r+0x34>
 8013882:	463c      	mov	r4, r7
 8013884:	687f      	ldr	r7, [r7, #4]
 8013886:	e7b6      	b.n	80137f6 <_malloc_r+0x4a>
 8013888:	461a      	mov	r2, r3
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	42a3      	cmp	r3, r4
 801388e:	d1fb      	bne.n	8013888 <_malloc_r+0xdc>
 8013890:	2300      	movs	r3, #0
 8013892:	6053      	str	r3, [r2, #4]
 8013894:	e7de      	b.n	8013854 <_malloc_r+0xa8>
 8013896:	230c      	movs	r3, #12
 8013898:	6033      	str	r3, [r6, #0]
 801389a:	4630      	mov	r0, r6
 801389c:	f000 f81e 	bl	80138dc <__malloc_unlock>
 80138a0:	e794      	b.n	80137cc <_malloc_r+0x20>
 80138a2:	6005      	str	r5, [r0, #0]
 80138a4:	e7d6      	b.n	8013854 <_malloc_r+0xa8>
 80138a6:	bf00      	nop
 80138a8:	20009320 	.word	0x20009320

080138ac <__ascii_mbtowc>:
 80138ac:	b082      	sub	sp, #8
 80138ae:	b901      	cbnz	r1, 80138b2 <__ascii_mbtowc+0x6>
 80138b0:	a901      	add	r1, sp, #4
 80138b2:	b142      	cbz	r2, 80138c6 <__ascii_mbtowc+0x1a>
 80138b4:	b14b      	cbz	r3, 80138ca <__ascii_mbtowc+0x1e>
 80138b6:	7813      	ldrb	r3, [r2, #0]
 80138b8:	600b      	str	r3, [r1, #0]
 80138ba:	7812      	ldrb	r2, [r2, #0]
 80138bc:	1e10      	subs	r0, r2, #0
 80138be:	bf18      	it	ne
 80138c0:	2001      	movne	r0, #1
 80138c2:	b002      	add	sp, #8
 80138c4:	4770      	bx	lr
 80138c6:	4610      	mov	r0, r2
 80138c8:	e7fb      	b.n	80138c2 <__ascii_mbtowc+0x16>
 80138ca:	f06f 0001 	mvn.w	r0, #1
 80138ce:	e7f8      	b.n	80138c2 <__ascii_mbtowc+0x16>

080138d0 <__malloc_lock>:
 80138d0:	4801      	ldr	r0, [pc, #4]	@ (80138d8 <__malloc_lock+0x8>)
 80138d2:	f7fe bd26 	b.w	8012322 <__retarget_lock_acquire_recursive>
 80138d6:	bf00      	nop
 80138d8:	20009318 	.word	0x20009318

080138dc <__malloc_unlock>:
 80138dc:	4801      	ldr	r0, [pc, #4]	@ (80138e4 <__malloc_unlock+0x8>)
 80138de:	f7fe bd21 	b.w	8012324 <__retarget_lock_release_recursive>
 80138e2:	bf00      	nop
 80138e4:	20009318 	.word	0x20009318

080138e8 <_Balloc>:
 80138e8:	b570      	push	{r4, r5, r6, lr}
 80138ea:	69c6      	ldr	r6, [r0, #28]
 80138ec:	4604      	mov	r4, r0
 80138ee:	460d      	mov	r5, r1
 80138f0:	b976      	cbnz	r6, 8013910 <_Balloc+0x28>
 80138f2:	2010      	movs	r0, #16
 80138f4:	f7ff ff30 	bl	8013758 <malloc>
 80138f8:	4602      	mov	r2, r0
 80138fa:	61e0      	str	r0, [r4, #28]
 80138fc:	b920      	cbnz	r0, 8013908 <_Balloc+0x20>
 80138fe:	4b18      	ldr	r3, [pc, #96]	@ (8013960 <_Balloc+0x78>)
 8013900:	4818      	ldr	r0, [pc, #96]	@ (8013964 <_Balloc+0x7c>)
 8013902:	216b      	movs	r1, #107	@ 0x6b
 8013904:	f7fe fd2e 	bl	8012364 <__assert_func>
 8013908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801390c:	6006      	str	r6, [r0, #0]
 801390e:	60c6      	str	r6, [r0, #12]
 8013910:	69e6      	ldr	r6, [r4, #28]
 8013912:	68f3      	ldr	r3, [r6, #12]
 8013914:	b183      	cbz	r3, 8013938 <_Balloc+0x50>
 8013916:	69e3      	ldr	r3, [r4, #28]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801391e:	b9b8      	cbnz	r0, 8013950 <_Balloc+0x68>
 8013920:	2101      	movs	r1, #1
 8013922:	fa01 f605 	lsl.w	r6, r1, r5
 8013926:	1d72      	adds	r2, r6, #5
 8013928:	0092      	lsls	r2, r2, #2
 801392a:	4620      	mov	r0, r4
 801392c:	f001 f89f 	bl	8014a6e <_calloc_r>
 8013930:	b160      	cbz	r0, 801394c <_Balloc+0x64>
 8013932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013936:	e00e      	b.n	8013956 <_Balloc+0x6e>
 8013938:	2221      	movs	r2, #33	@ 0x21
 801393a:	2104      	movs	r1, #4
 801393c:	4620      	mov	r0, r4
 801393e:	f001 f896 	bl	8014a6e <_calloc_r>
 8013942:	69e3      	ldr	r3, [r4, #28]
 8013944:	60f0      	str	r0, [r6, #12]
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1e4      	bne.n	8013916 <_Balloc+0x2e>
 801394c:	2000      	movs	r0, #0
 801394e:	bd70      	pop	{r4, r5, r6, pc}
 8013950:	6802      	ldr	r2, [r0, #0]
 8013952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013956:	2300      	movs	r3, #0
 8013958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801395c:	e7f7      	b.n	801394e <_Balloc+0x66>
 801395e:	bf00      	nop
 8013960:	08014ece 	.word	0x08014ece
 8013964:	08015059 	.word	0x08015059

08013968 <_Bfree>:
 8013968:	b570      	push	{r4, r5, r6, lr}
 801396a:	69c6      	ldr	r6, [r0, #28]
 801396c:	4605      	mov	r5, r0
 801396e:	460c      	mov	r4, r1
 8013970:	b976      	cbnz	r6, 8013990 <_Bfree+0x28>
 8013972:	2010      	movs	r0, #16
 8013974:	f7ff fef0 	bl	8013758 <malloc>
 8013978:	4602      	mov	r2, r0
 801397a:	61e8      	str	r0, [r5, #28]
 801397c:	b920      	cbnz	r0, 8013988 <_Bfree+0x20>
 801397e:	4b09      	ldr	r3, [pc, #36]	@ (80139a4 <_Bfree+0x3c>)
 8013980:	4809      	ldr	r0, [pc, #36]	@ (80139a8 <_Bfree+0x40>)
 8013982:	218f      	movs	r1, #143	@ 0x8f
 8013984:	f7fe fcee 	bl	8012364 <__assert_func>
 8013988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801398c:	6006      	str	r6, [r0, #0]
 801398e:	60c6      	str	r6, [r0, #12]
 8013990:	b13c      	cbz	r4, 80139a2 <_Bfree+0x3a>
 8013992:	69eb      	ldr	r3, [r5, #28]
 8013994:	6862      	ldr	r2, [r4, #4]
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801399c:	6021      	str	r1, [r4, #0]
 801399e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80139a2:	bd70      	pop	{r4, r5, r6, pc}
 80139a4:	08014ece 	.word	0x08014ece
 80139a8:	08015059 	.word	0x08015059

080139ac <__multadd>:
 80139ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b0:	690d      	ldr	r5, [r1, #16]
 80139b2:	4607      	mov	r7, r0
 80139b4:	460c      	mov	r4, r1
 80139b6:	461e      	mov	r6, r3
 80139b8:	f101 0c14 	add.w	ip, r1, #20
 80139bc:	2000      	movs	r0, #0
 80139be:	f8dc 3000 	ldr.w	r3, [ip]
 80139c2:	b299      	uxth	r1, r3
 80139c4:	fb02 6101 	mla	r1, r2, r1, r6
 80139c8:	0c1e      	lsrs	r6, r3, #16
 80139ca:	0c0b      	lsrs	r3, r1, #16
 80139cc:	fb02 3306 	mla	r3, r2, r6, r3
 80139d0:	b289      	uxth	r1, r1
 80139d2:	3001      	adds	r0, #1
 80139d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139d8:	4285      	cmp	r5, r0
 80139da:	f84c 1b04 	str.w	r1, [ip], #4
 80139de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139e2:	dcec      	bgt.n	80139be <__multadd+0x12>
 80139e4:	b30e      	cbz	r6, 8013a2a <__multadd+0x7e>
 80139e6:	68a3      	ldr	r3, [r4, #8]
 80139e8:	42ab      	cmp	r3, r5
 80139ea:	dc19      	bgt.n	8013a20 <__multadd+0x74>
 80139ec:	6861      	ldr	r1, [r4, #4]
 80139ee:	4638      	mov	r0, r7
 80139f0:	3101      	adds	r1, #1
 80139f2:	f7ff ff79 	bl	80138e8 <_Balloc>
 80139f6:	4680      	mov	r8, r0
 80139f8:	b928      	cbnz	r0, 8013a06 <__multadd+0x5a>
 80139fa:	4602      	mov	r2, r0
 80139fc:	4b0c      	ldr	r3, [pc, #48]	@ (8013a30 <__multadd+0x84>)
 80139fe:	480d      	ldr	r0, [pc, #52]	@ (8013a34 <__multadd+0x88>)
 8013a00:	21ba      	movs	r1, #186	@ 0xba
 8013a02:	f7fe fcaf 	bl	8012364 <__assert_func>
 8013a06:	6922      	ldr	r2, [r4, #16]
 8013a08:	3202      	adds	r2, #2
 8013a0a:	f104 010c 	add.w	r1, r4, #12
 8013a0e:	0092      	lsls	r2, r2, #2
 8013a10:	300c      	adds	r0, #12
 8013a12:	f7fe fc88 	bl	8012326 <memcpy>
 8013a16:	4621      	mov	r1, r4
 8013a18:	4638      	mov	r0, r7
 8013a1a:	f7ff ffa5 	bl	8013968 <_Bfree>
 8013a1e:	4644      	mov	r4, r8
 8013a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a24:	3501      	adds	r5, #1
 8013a26:	615e      	str	r6, [r3, #20]
 8013a28:	6125      	str	r5, [r4, #16]
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a30:	08014fe8 	.word	0x08014fe8
 8013a34:	08015059 	.word	0x08015059

08013a38 <__s2b>:
 8013a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a3c:	460c      	mov	r4, r1
 8013a3e:	4615      	mov	r5, r2
 8013a40:	461f      	mov	r7, r3
 8013a42:	2209      	movs	r2, #9
 8013a44:	3308      	adds	r3, #8
 8013a46:	4606      	mov	r6, r0
 8013a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	2201      	movs	r2, #1
 8013a50:	429a      	cmp	r2, r3
 8013a52:	db09      	blt.n	8013a68 <__s2b+0x30>
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7ff ff47 	bl	80138e8 <_Balloc>
 8013a5a:	b940      	cbnz	r0, 8013a6e <__s2b+0x36>
 8013a5c:	4602      	mov	r2, r0
 8013a5e:	4b19      	ldr	r3, [pc, #100]	@ (8013ac4 <__s2b+0x8c>)
 8013a60:	4819      	ldr	r0, [pc, #100]	@ (8013ac8 <__s2b+0x90>)
 8013a62:	21d3      	movs	r1, #211	@ 0xd3
 8013a64:	f7fe fc7e 	bl	8012364 <__assert_func>
 8013a68:	0052      	lsls	r2, r2, #1
 8013a6a:	3101      	adds	r1, #1
 8013a6c:	e7f0      	b.n	8013a50 <__s2b+0x18>
 8013a6e:	9b08      	ldr	r3, [sp, #32]
 8013a70:	6143      	str	r3, [r0, #20]
 8013a72:	2d09      	cmp	r5, #9
 8013a74:	f04f 0301 	mov.w	r3, #1
 8013a78:	6103      	str	r3, [r0, #16]
 8013a7a:	dd16      	ble.n	8013aaa <__s2b+0x72>
 8013a7c:	f104 0909 	add.w	r9, r4, #9
 8013a80:	46c8      	mov	r8, r9
 8013a82:	442c      	add	r4, r5
 8013a84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013a88:	4601      	mov	r1, r0
 8013a8a:	3b30      	subs	r3, #48	@ 0x30
 8013a8c:	220a      	movs	r2, #10
 8013a8e:	4630      	mov	r0, r6
 8013a90:	f7ff ff8c 	bl	80139ac <__multadd>
 8013a94:	45a0      	cmp	r8, r4
 8013a96:	d1f5      	bne.n	8013a84 <__s2b+0x4c>
 8013a98:	f1a5 0408 	sub.w	r4, r5, #8
 8013a9c:	444c      	add	r4, r9
 8013a9e:	1b2d      	subs	r5, r5, r4
 8013aa0:	1963      	adds	r3, r4, r5
 8013aa2:	42bb      	cmp	r3, r7
 8013aa4:	db04      	blt.n	8013ab0 <__s2b+0x78>
 8013aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aaa:	340a      	adds	r4, #10
 8013aac:	2509      	movs	r5, #9
 8013aae:	e7f6      	b.n	8013a9e <__s2b+0x66>
 8013ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ab4:	4601      	mov	r1, r0
 8013ab6:	3b30      	subs	r3, #48	@ 0x30
 8013ab8:	220a      	movs	r2, #10
 8013aba:	4630      	mov	r0, r6
 8013abc:	f7ff ff76 	bl	80139ac <__multadd>
 8013ac0:	e7ee      	b.n	8013aa0 <__s2b+0x68>
 8013ac2:	bf00      	nop
 8013ac4:	08014fe8 	.word	0x08014fe8
 8013ac8:	08015059 	.word	0x08015059

08013acc <__hi0bits>:
 8013acc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	bf36      	itet	cc
 8013ad4:	0403      	lslcc	r3, r0, #16
 8013ad6:	2000      	movcs	r0, #0
 8013ad8:	2010      	movcc	r0, #16
 8013ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013ade:	bf3c      	itt	cc
 8013ae0:	021b      	lslcc	r3, r3, #8
 8013ae2:	3008      	addcc	r0, #8
 8013ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ae8:	bf3c      	itt	cc
 8013aea:	011b      	lslcc	r3, r3, #4
 8013aec:	3004      	addcc	r0, #4
 8013aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013af2:	bf3c      	itt	cc
 8013af4:	009b      	lslcc	r3, r3, #2
 8013af6:	3002      	addcc	r0, #2
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	db05      	blt.n	8013b08 <__hi0bits+0x3c>
 8013afc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013b00:	f100 0001 	add.w	r0, r0, #1
 8013b04:	bf08      	it	eq
 8013b06:	2020      	moveq	r0, #32
 8013b08:	4770      	bx	lr

08013b0a <__lo0bits>:
 8013b0a:	6803      	ldr	r3, [r0, #0]
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	f013 0007 	ands.w	r0, r3, #7
 8013b12:	d00b      	beq.n	8013b2c <__lo0bits+0x22>
 8013b14:	07d9      	lsls	r1, r3, #31
 8013b16:	d421      	bmi.n	8013b5c <__lo0bits+0x52>
 8013b18:	0798      	lsls	r0, r3, #30
 8013b1a:	bf49      	itett	mi
 8013b1c:	085b      	lsrmi	r3, r3, #1
 8013b1e:	089b      	lsrpl	r3, r3, #2
 8013b20:	2001      	movmi	r0, #1
 8013b22:	6013      	strmi	r3, [r2, #0]
 8013b24:	bf5c      	itt	pl
 8013b26:	6013      	strpl	r3, [r2, #0]
 8013b28:	2002      	movpl	r0, #2
 8013b2a:	4770      	bx	lr
 8013b2c:	b299      	uxth	r1, r3
 8013b2e:	b909      	cbnz	r1, 8013b34 <__lo0bits+0x2a>
 8013b30:	0c1b      	lsrs	r3, r3, #16
 8013b32:	2010      	movs	r0, #16
 8013b34:	b2d9      	uxtb	r1, r3
 8013b36:	b909      	cbnz	r1, 8013b3c <__lo0bits+0x32>
 8013b38:	3008      	adds	r0, #8
 8013b3a:	0a1b      	lsrs	r3, r3, #8
 8013b3c:	0719      	lsls	r1, r3, #28
 8013b3e:	bf04      	itt	eq
 8013b40:	091b      	lsreq	r3, r3, #4
 8013b42:	3004      	addeq	r0, #4
 8013b44:	0799      	lsls	r1, r3, #30
 8013b46:	bf04      	itt	eq
 8013b48:	089b      	lsreq	r3, r3, #2
 8013b4a:	3002      	addeq	r0, #2
 8013b4c:	07d9      	lsls	r1, r3, #31
 8013b4e:	d403      	bmi.n	8013b58 <__lo0bits+0x4e>
 8013b50:	085b      	lsrs	r3, r3, #1
 8013b52:	f100 0001 	add.w	r0, r0, #1
 8013b56:	d003      	beq.n	8013b60 <__lo0bits+0x56>
 8013b58:	6013      	str	r3, [r2, #0]
 8013b5a:	4770      	bx	lr
 8013b5c:	2000      	movs	r0, #0
 8013b5e:	4770      	bx	lr
 8013b60:	2020      	movs	r0, #32
 8013b62:	4770      	bx	lr

08013b64 <__i2b>:
 8013b64:	b510      	push	{r4, lr}
 8013b66:	460c      	mov	r4, r1
 8013b68:	2101      	movs	r1, #1
 8013b6a:	f7ff febd 	bl	80138e8 <_Balloc>
 8013b6e:	4602      	mov	r2, r0
 8013b70:	b928      	cbnz	r0, 8013b7e <__i2b+0x1a>
 8013b72:	4b05      	ldr	r3, [pc, #20]	@ (8013b88 <__i2b+0x24>)
 8013b74:	4805      	ldr	r0, [pc, #20]	@ (8013b8c <__i2b+0x28>)
 8013b76:	f240 1145 	movw	r1, #325	@ 0x145
 8013b7a:	f7fe fbf3 	bl	8012364 <__assert_func>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	6144      	str	r4, [r0, #20]
 8013b82:	6103      	str	r3, [r0, #16]
 8013b84:	bd10      	pop	{r4, pc}
 8013b86:	bf00      	nop
 8013b88:	08014fe8 	.word	0x08014fe8
 8013b8c:	08015059 	.word	0x08015059

08013b90 <__multiply>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	4617      	mov	r7, r2
 8013b96:	690a      	ldr	r2, [r1, #16]
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	bfa8      	it	ge
 8013b9e:	463b      	movge	r3, r7
 8013ba0:	4689      	mov	r9, r1
 8013ba2:	bfa4      	itt	ge
 8013ba4:	460f      	movge	r7, r1
 8013ba6:	4699      	movge	r9, r3
 8013ba8:	693d      	ldr	r5, [r7, #16]
 8013baa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	6879      	ldr	r1, [r7, #4]
 8013bb2:	eb05 060a 	add.w	r6, r5, sl
 8013bb6:	42b3      	cmp	r3, r6
 8013bb8:	b085      	sub	sp, #20
 8013bba:	bfb8      	it	lt
 8013bbc:	3101      	addlt	r1, #1
 8013bbe:	f7ff fe93 	bl	80138e8 <_Balloc>
 8013bc2:	b930      	cbnz	r0, 8013bd2 <__multiply+0x42>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	4b41      	ldr	r3, [pc, #260]	@ (8013ccc <__multiply+0x13c>)
 8013bc8:	4841      	ldr	r0, [pc, #260]	@ (8013cd0 <__multiply+0x140>)
 8013bca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013bce:	f7fe fbc9 	bl	8012364 <__assert_func>
 8013bd2:	f100 0414 	add.w	r4, r0, #20
 8013bd6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013bda:	4623      	mov	r3, r4
 8013bdc:	2200      	movs	r2, #0
 8013bde:	4573      	cmp	r3, lr
 8013be0:	d320      	bcc.n	8013c24 <__multiply+0x94>
 8013be2:	f107 0814 	add.w	r8, r7, #20
 8013be6:	f109 0114 	add.w	r1, r9, #20
 8013bea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013bee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013bf2:	9302      	str	r3, [sp, #8]
 8013bf4:	1beb      	subs	r3, r5, r7
 8013bf6:	3b15      	subs	r3, #21
 8013bf8:	f023 0303 	bic.w	r3, r3, #3
 8013bfc:	3304      	adds	r3, #4
 8013bfe:	3715      	adds	r7, #21
 8013c00:	42bd      	cmp	r5, r7
 8013c02:	bf38      	it	cc
 8013c04:	2304      	movcc	r3, #4
 8013c06:	9301      	str	r3, [sp, #4]
 8013c08:	9b02      	ldr	r3, [sp, #8]
 8013c0a:	9103      	str	r1, [sp, #12]
 8013c0c:	428b      	cmp	r3, r1
 8013c0e:	d80c      	bhi.n	8013c2a <__multiply+0x9a>
 8013c10:	2e00      	cmp	r6, #0
 8013c12:	dd03      	ble.n	8013c1c <__multiply+0x8c>
 8013c14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d055      	beq.n	8013cc8 <__multiply+0x138>
 8013c1c:	6106      	str	r6, [r0, #16]
 8013c1e:	b005      	add	sp, #20
 8013c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c24:	f843 2b04 	str.w	r2, [r3], #4
 8013c28:	e7d9      	b.n	8013bde <__multiply+0x4e>
 8013c2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013c2e:	f1ba 0f00 	cmp.w	sl, #0
 8013c32:	d01f      	beq.n	8013c74 <__multiply+0xe4>
 8013c34:	46c4      	mov	ip, r8
 8013c36:	46a1      	mov	r9, r4
 8013c38:	2700      	movs	r7, #0
 8013c3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013c3e:	f8d9 3000 	ldr.w	r3, [r9]
 8013c42:	fa1f fb82 	uxth.w	fp, r2
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	fb0a 330b 	mla	r3, sl, fp, r3
 8013c4c:	443b      	add	r3, r7
 8013c4e:	f8d9 7000 	ldr.w	r7, [r9]
 8013c52:	0c12      	lsrs	r2, r2, #16
 8013c54:	0c3f      	lsrs	r7, r7, #16
 8013c56:	fb0a 7202 	mla	r2, sl, r2, r7
 8013c5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013c5e:	b29b      	uxth	r3, r3
 8013c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c64:	4565      	cmp	r5, ip
 8013c66:	f849 3b04 	str.w	r3, [r9], #4
 8013c6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013c6e:	d8e4      	bhi.n	8013c3a <__multiply+0xaa>
 8013c70:	9b01      	ldr	r3, [sp, #4]
 8013c72:	50e7      	str	r7, [r4, r3]
 8013c74:	9b03      	ldr	r3, [sp, #12]
 8013c76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013c7a:	3104      	adds	r1, #4
 8013c7c:	f1b9 0f00 	cmp.w	r9, #0
 8013c80:	d020      	beq.n	8013cc4 <__multiply+0x134>
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	4647      	mov	r7, r8
 8013c86:	46a4      	mov	ip, r4
 8013c88:	f04f 0a00 	mov.w	sl, #0
 8013c8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8013c90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013c94:	fb09 220b 	mla	r2, r9, fp, r2
 8013c98:	4452      	add	r2, sl
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ca0:	f84c 3b04 	str.w	r3, [ip], #4
 8013ca4:	f857 3b04 	ldr.w	r3, [r7], #4
 8013ca8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013cac:	f8bc 3000 	ldrh.w	r3, [ip]
 8013cb0:	fb09 330a 	mla	r3, r9, sl, r3
 8013cb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013cb8:	42bd      	cmp	r5, r7
 8013cba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013cbe:	d8e5      	bhi.n	8013c8c <__multiply+0xfc>
 8013cc0:	9a01      	ldr	r2, [sp, #4]
 8013cc2:	50a3      	str	r3, [r4, r2]
 8013cc4:	3404      	adds	r4, #4
 8013cc6:	e79f      	b.n	8013c08 <__multiply+0x78>
 8013cc8:	3e01      	subs	r6, #1
 8013cca:	e7a1      	b.n	8013c10 <__multiply+0x80>
 8013ccc:	08014fe8 	.word	0x08014fe8
 8013cd0:	08015059 	.word	0x08015059

08013cd4 <__pow5mult>:
 8013cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cd8:	4615      	mov	r5, r2
 8013cda:	f012 0203 	ands.w	r2, r2, #3
 8013cde:	4607      	mov	r7, r0
 8013ce0:	460e      	mov	r6, r1
 8013ce2:	d007      	beq.n	8013cf4 <__pow5mult+0x20>
 8013ce4:	4c25      	ldr	r4, [pc, #148]	@ (8013d7c <__pow5mult+0xa8>)
 8013ce6:	3a01      	subs	r2, #1
 8013ce8:	2300      	movs	r3, #0
 8013cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cee:	f7ff fe5d 	bl	80139ac <__multadd>
 8013cf2:	4606      	mov	r6, r0
 8013cf4:	10ad      	asrs	r5, r5, #2
 8013cf6:	d03d      	beq.n	8013d74 <__pow5mult+0xa0>
 8013cf8:	69fc      	ldr	r4, [r7, #28]
 8013cfa:	b97c      	cbnz	r4, 8013d1c <__pow5mult+0x48>
 8013cfc:	2010      	movs	r0, #16
 8013cfe:	f7ff fd2b 	bl	8013758 <malloc>
 8013d02:	4602      	mov	r2, r0
 8013d04:	61f8      	str	r0, [r7, #28]
 8013d06:	b928      	cbnz	r0, 8013d14 <__pow5mult+0x40>
 8013d08:	4b1d      	ldr	r3, [pc, #116]	@ (8013d80 <__pow5mult+0xac>)
 8013d0a:	481e      	ldr	r0, [pc, #120]	@ (8013d84 <__pow5mult+0xb0>)
 8013d0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013d10:	f7fe fb28 	bl	8012364 <__assert_func>
 8013d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d18:	6004      	str	r4, [r0, #0]
 8013d1a:	60c4      	str	r4, [r0, #12]
 8013d1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d24:	b94c      	cbnz	r4, 8013d3a <__pow5mult+0x66>
 8013d26:	f240 2171 	movw	r1, #625	@ 0x271
 8013d2a:	4638      	mov	r0, r7
 8013d2c:	f7ff ff1a 	bl	8013b64 <__i2b>
 8013d30:	2300      	movs	r3, #0
 8013d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d36:	4604      	mov	r4, r0
 8013d38:	6003      	str	r3, [r0, #0]
 8013d3a:	f04f 0900 	mov.w	r9, #0
 8013d3e:	07eb      	lsls	r3, r5, #31
 8013d40:	d50a      	bpl.n	8013d58 <__pow5mult+0x84>
 8013d42:	4631      	mov	r1, r6
 8013d44:	4622      	mov	r2, r4
 8013d46:	4638      	mov	r0, r7
 8013d48:	f7ff ff22 	bl	8013b90 <__multiply>
 8013d4c:	4631      	mov	r1, r6
 8013d4e:	4680      	mov	r8, r0
 8013d50:	4638      	mov	r0, r7
 8013d52:	f7ff fe09 	bl	8013968 <_Bfree>
 8013d56:	4646      	mov	r6, r8
 8013d58:	106d      	asrs	r5, r5, #1
 8013d5a:	d00b      	beq.n	8013d74 <__pow5mult+0xa0>
 8013d5c:	6820      	ldr	r0, [r4, #0]
 8013d5e:	b938      	cbnz	r0, 8013d70 <__pow5mult+0x9c>
 8013d60:	4622      	mov	r2, r4
 8013d62:	4621      	mov	r1, r4
 8013d64:	4638      	mov	r0, r7
 8013d66:	f7ff ff13 	bl	8013b90 <__multiply>
 8013d6a:	6020      	str	r0, [r4, #0]
 8013d6c:	f8c0 9000 	str.w	r9, [r0]
 8013d70:	4604      	mov	r4, r0
 8013d72:	e7e4      	b.n	8013d3e <__pow5mult+0x6a>
 8013d74:	4630      	mov	r0, r6
 8013d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d7a:	bf00      	nop
 8013d7c:	0801521c 	.word	0x0801521c
 8013d80:	08014ece 	.word	0x08014ece
 8013d84:	08015059 	.word	0x08015059

08013d88 <__lshift>:
 8013d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d8c:	460c      	mov	r4, r1
 8013d8e:	6849      	ldr	r1, [r1, #4]
 8013d90:	6923      	ldr	r3, [r4, #16]
 8013d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013d96:	68a3      	ldr	r3, [r4, #8]
 8013d98:	4607      	mov	r7, r0
 8013d9a:	4691      	mov	r9, r2
 8013d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013da0:	f108 0601 	add.w	r6, r8, #1
 8013da4:	42b3      	cmp	r3, r6
 8013da6:	db0b      	blt.n	8013dc0 <__lshift+0x38>
 8013da8:	4638      	mov	r0, r7
 8013daa:	f7ff fd9d 	bl	80138e8 <_Balloc>
 8013dae:	4605      	mov	r5, r0
 8013db0:	b948      	cbnz	r0, 8013dc6 <__lshift+0x3e>
 8013db2:	4602      	mov	r2, r0
 8013db4:	4b28      	ldr	r3, [pc, #160]	@ (8013e58 <__lshift+0xd0>)
 8013db6:	4829      	ldr	r0, [pc, #164]	@ (8013e5c <__lshift+0xd4>)
 8013db8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013dbc:	f7fe fad2 	bl	8012364 <__assert_func>
 8013dc0:	3101      	adds	r1, #1
 8013dc2:	005b      	lsls	r3, r3, #1
 8013dc4:	e7ee      	b.n	8013da4 <__lshift+0x1c>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	f100 0114 	add.w	r1, r0, #20
 8013dcc:	f100 0210 	add.w	r2, r0, #16
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	4553      	cmp	r3, sl
 8013dd4:	db33      	blt.n	8013e3e <__lshift+0xb6>
 8013dd6:	6920      	ldr	r0, [r4, #16]
 8013dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ddc:	f104 0314 	add.w	r3, r4, #20
 8013de0:	f019 091f 	ands.w	r9, r9, #31
 8013de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013de8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013dec:	d02b      	beq.n	8013e46 <__lshift+0xbe>
 8013dee:	f1c9 0e20 	rsb	lr, r9, #32
 8013df2:	468a      	mov	sl, r1
 8013df4:	2200      	movs	r2, #0
 8013df6:	6818      	ldr	r0, [r3, #0]
 8013df8:	fa00 f009 	lsl.w	r0, r0, r9
 8013dfc:	4310      	orrs	r0, r2
 8013dfe:	f84a 0b04 	str.w	r0, [sl], #4
 8013e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e06:	459c      	cmp	ip, r3
 8013e08:	fa22 f20e 	lsr.w	r2, r2, lr
 8013e0c:	d8f3      	bhi.n	8013df6 <__lshift+0x6e>
 8013e0e:	ebac 0304 	sub.w	r3, ip, r4
 8013e12:	3b15      	subs	r3, #21
 8013e14:	f023 0303 	bic.w	r3, r3, #3
 8013e18:	3304      	adds	r3, #4
 8013e1a:	f104 0015 	add.w	r0, r4, #21
 8013e1e:	4560      	cmp	r0, ip
 8013e20:	bf88      	it	hi
 8013e22:	2304      	movhi	r3, #4
 8013e24:	50ca      	str	r2, [r1, r3]
 8013e26:	b10a      	cbz	r2, 8013e2c <__lshift+0xa4>
 8013e28:	f108 0602 	add.w	r6, r8, #2
 8013e2c:	3e01      	subs	r6, #1
 8013e2e:	4638      	mov	r0, r7
 8013e30:	612e      	str	r6, [r5, #16]
 8013e32:	4621      	mov	r1, r4
 8013e34:	f7ff fd98 	bl	8013968 <_Bfree>
 8013e38:	4628      	mov	r0, r5
 8013e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e42:	3301      	adds	r3, #1
 8013e44:	e7c5      	b.n	8013dd2 <__lshift+0x4a>
 8013e46:	3904      	subs	r1, #4
 8013e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e50:	459c      	cmp	ip, r3
 8013e52:	d8f9      	bhi.n	8013e48 <__lshift+0xc0>
 8013e54:	e7ea      	b.n	8013e2c <__lshift+0xa4>
 8013e56:	bf00      	nop
 8013e58:	08014fe8 	.word	0x08014fe8
 8013e5c:	08015059 	.word	0x08015059

08013e60 <__mcmp>:
 8013e60:	690a      	ldr	r2, [r1, #16]
 8013e62:	4603      	mov	r3, r0
 8013e64:	6900      	ldr	r0, [r0, #16]
 8013e66:	1a80      	subs	r0, r0, r2
 8013e68:	b530      	push	{r4, r5, lr}
 8013e6a:	d10e      	bne.n	8013e8a <__mcmp+0x2a>
 8013e6c:	3314      	adds	r3, #20
 8013e6e:	3114      	adds	r1, #20
 8013e70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013e74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013e78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013e7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e80:	4295      	cmp	r5, r2
 8013e82:	d003      	beq.n	8013e8c <__mcmp+0x2c>
 8013e84:	d205      	bcs.n	8013e92 <__mcmp+0x32>
 8013e86:	f04f 30ff 	mov.w	r0, #4294967295
 8013e8a:	bd30      	pop	{r4, r5, pc}
 8013e8c:	42a3      	cmp	r3, r4
 8013e8e:	d3f3      	bcc.n	8013e78 <__mcmp+0x18>
 8013e90:	e7fb      	b.n	8013e8a <__mcmp+0x2a>
 8013e92:	2001      	movs	r0, #1
 8013e94:	e7f9      	b.n	8013e8a <__mcmp+0x2a>
	...

08013e98 <__mdiff>:
 8013e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e9c:	4689      	mov	r9, r1
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	4611      	mov	r1, r2
 8013ea2:	4648      	mov	r0, r9
 8013ea4:	4614      	mov	r4, r2
 8013ea6:	f7ff ffdb 	bl	8013e60 <__mcmp>
 8013eaa:	1e05      	subs	r5, r0, #0
 8013eac:	d112      	bne.n	8013ed4 <__mdiff+0x3c>
 8013eae:	4629      	mov	r1, r5
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f7ff fd19 	bl	80138e8 <_Balloc>
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	b928      	cbnz	r0, 8013ec6 <__mdiff+0x2e>
 8013eba:	4b3f      	ldr	r3, [pc, #252]	@ (8013fb8 <__mdiff+0x120>)
 8013ebc:	f240 2137 	movw	r1, #567	@ 0x237
 8013ec0:	483e      	ldr	r0, [pc, #248]	@ (8013fbc <__mdiff+0x124>)
 8013ec2:	f7fe fa4f 	bl	8012364 <__assert_func>
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ecc:	4610      	mov	r0, r2
 8013ece:	b003      	add	sp, #12
 8013ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed4:	bfbc      	itt	lt
 8013ed6:	464b      	movlt	r3, r9
 8013ed8:	46a1      	movlt	r9, r4
 8013eda:	4630      	mov	r0, r6
 8013edc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013ee0:	bfba      	itte	lt
 8013ee2:	461c      	movlt	r4, r3
 8013ee4:	2501      	movlt	r5, #1
 8013ee6:	2500      	movge	r5, #0
 8013ee8:	f7ff fcfe 	bl	80138e8 <_Balloc>
 8013eec:	4602      	mov	r2, r0
 8013eee:	b918      	cbnz	r0, 8013ef8 <__mdiff+0x60>
 8013ef0:	4b31      	ldr	r3, [pc, #196]	@ (8013fb8 <__mdiff+0x120>)
 8013ef2:	f240 2145 	movw	r1, #581	@ 0x245
 8013ef6:	e7e3      	b.n	8013ec0 <__mdiff+0x28>
 8013ef8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013efc:	6926      	ldr	r6, [r4, #16]
 8013efe:	60c5      	str	r5, [r0, #12]
 8013f00:	f109 0310 	add.w	r3, r9, #16
 8013f04:	f109 0514 	add.w	r5, r9, #20
 8013f08:	f104 0e14 	add.w	lr, r4, #20
 8013f0c:	f100 0b14 	add.w	fp, r0, #20
 8013f10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013f14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	46d9      	mov	r9, fp
 8013f1c:	f04f 0c00 	mov.w	ip, #0
 8013f20:	9b01      	ldr	r3, [sp, #4]
 8013f22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013f26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013f2a:	9301      	str	r3, [sp, #4]
 8013f2c:	fa1f f38a 	uxth.w	r3, sl
 8013f30:	4619      	mov	r1, r3
 8013f32:	b283      	uxth	r3, r0
 8013f34:	1acb      	subs	r3, r1, r3
 8013f36:	0c00      	lsrs	r0, r0, #16
 8013f38:	4463      	add	r3, ip
 8013f3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013f3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013f48:	4576      	cmp	r6, lr
 8013f4a:	f849 3b04 	str.w	r3, [r9], #4
 8013f4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f52:	d8e5      	bhi.n	8013f20 <__mdiff+0x88>
 8013f54:	1b33      	subs	r3, r6, r4
 8013f56:	3b15      	subs	r3, #21
 8013f58:	f023 0303 	bic.w	r3, r3, #3
 8013f5c:	3415      	adds	r4, #21
 8013f5e:	3304      	adds	r3, #4
 8013f60:	42a6      	cmp	r6, r4
 8013f62:	bf38      	it	cc
 8013f64:	2304      	movcc	r3, #4
 8013f66:	441d      	add	r5, r3
 8013f68:	445b      	add	r3, fp
 8013f6a:	461e      	mov	r6, r3
 8013f6c:	462c      	mov	r4, r5
 8013f6e:	4544      	cmp	r4, r8
 8013f70:	d30e      	bcc.n	8013f90 <__mdiff+0xf8>
 8013f72:	f108 0103 	add.w	r1, r8, #3
 8013f76:	1b49      	subs	r1, r1, r5
 8013f78:	f021 0103 	bic.w	r1, r1, #3
 8013f7c:	3d03      	subs	r5, #3
 8013f7e:	45a8      	cmp	r8, r5
 8013f80:	bf38      	it	cc
 8013f82:	2100      	movcc	r1, #0
 8013f84:	440b      	add	r3, r1
 8013f86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f8a:	b191      	cbz	r1, 8013fb2 <__mdiff+0x11a>
 8013f8c:	6117      	str	r7, [r2, #16]
 8013f8e:	e79d      	b.n	8013ecc <__mdiff+0x34>
 8013f90:	f854 1b04 	ldr.w	r1, [r4], #4
 8013f94:	46e6      	mov	lr, ip
 8013f96:	0c08      	lsrs	r0, r1, #16
 8013f98:	fa1c fc81 	uxtah	ip, ip, r1
 8013f9c:	4471      	add	r1, lr
 8013f9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013fa2:	b289      	uxth	r1, r1
 8013fa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013fa8:	f846 1b04 	str.w	r1, [r6], #4
 8013fac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013fb0:	e7dd      	b.n	8013f6e <__mdiff+0xd6>
 8013fb2:	3f01      	subs	r7, #1
 8013fb4:	e7e7      	b.n	8013f86 <__mdiff+0xee>
 8013fb6:	bf00      	nop
 8013fb8:	08014fe8 	.word	0x08014fe8
 8013fbc:	08015059 	.word	0x08015059

08013fc0 <__ulp>:
 8013fc0:	b082      	sub	sp, #8
 8013fc2:	ed8d 0b00 	vstr	d0, [sp]
 8013fc6:	9a01      	ldr	r2, [sp, #4]
 8013fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8014008 <__ulp+0x48>)
 8013fca:	4013      	ands	r3, r2
 8013fcc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	dc08      	bgt.n	8013fe6 <__ulp+0x26>
 8013fd4:	425b      	negs	r3, r3
 8013fd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013fda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013fde:	da04      	bge.n	8013fea <__ulp+0x2a>
 8013fe0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013fe4:	4113      	asrs	r3, r2
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	e008      	b.n	8013ffc <__ulp+0x3c>
 8013fea:	f1a2 0314 	sub.w	r3, r2, #20
 8013fee:	2b1e      	cmp	r3, #30
 8013ff0:	bfda      	itte	le
 8013ff2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013ff6:	40da      	lsrle	r2, r3
 8013ff8:	2201      	movgt	r2, #1
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	4610      	mov	r0, r2
 8014000:	ec41 0b10 	vmov	d0, r0, r1
 8014004:	b002      	add	sp, #8
 8014006:	4770      	bx	lr
 8014008:	7ff00000 	.word	0x7ff00000

0801400c <__b2d>:
 801400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014010:	6906      	ldr	r6, [r0, #16]
 8014012:	f100 0814 	add.w	r8, r0, #20
 8014016:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801401a:	1f37      	subs	r7, r6, #4
 801401c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014020:	4610      	mov	r0, r2
 8014022:	f7ff fd53 	bl	8013acc <__hi0bits>
 8014026:	f1c0 0320 	rsb	r3, r0, #32
 801402a:	280a      	cmp	r0, #10
 801402c:	600b      	str	r3, [r1, #0]
 801402e:	491b      	ldr	r1, [pc, #108]	@ (801409c <__b2d+0x90>)
 8014030:	dc15      	bgt.n	801405e <__b2d+0x52>
 8014032:	f1c0 0c0b 	rsb	ip, r0, #11
 8014036:	fa22 f30c 	lsr.w	r3, r2, ip
 801403a:	45b8      	cmp	r8, r7
 801403c:	ea43 0501 	orr.w	r5, r3, r1
 8014040:	bf34      	ite	cc
 8014042:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014046:	2300      	movcs	r3, #0
 8014048:	3015      	adds	r0, #21
 801404a:	fa02 f000 	lsl.w	r0, r2, r0
 801404e:	fa23 f30c 	lsr.w	r3, r3, ip
 8014052:	4303      	orrs	r3, r0
 8014054:	461c      	mov	r4, r3
 8014056:	ec45 4b10 	vmov	d0, r4, r5
 801405a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801405e:	45b8      	cmp	r8, r7
 8014060:	bf3a      	itte	cc
 8014062:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014066:	f1a6 0708 	subcc.w	r7, r6, #8
 801406a:	2300      	movcs	r3, #0
 801406c:	380b      	subs	r0, #11
 801406e:	d012      	beq.n	8014096 <__b2d+0x8a>
 8014070:	f1c0 0120 	rsb	r1, r0, #32
 8014074:	fa23 f401 	lsr.w	r4, r3, r1
 8014078:	4082      	lsls	r2, r0
 801407a:	4322      	orrs	r2, r4
 801407c:	4547      	cmp	r7, r8
 801407e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014082:	bf8c      	ite	hi
 8014084:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014088:	2200      	movls	r2, #0
 801408a:	4083      	lsls	r3, r0
 801408c:	40ca      	lsrs	r2, r1
 801408e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014092:	4313      	orrs	r3, r2
 8014094:	e7de      	b.n	8014054 <__b2d+0x48>
 8014096:	ea42 0501 	orr.w	r5, r2, r1
 801409a:	e7db      	b.n	8014054 <__b2d+0x48>
 801409c:	3ff00000 	.word	0x3ff00000

080140a0 <__d2b>:
 80140a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80140a4:	460f      	mov	r7, r1
 80140a6:	2101      	movs	r1, #1
 80140a8:	ec59 8b10 	vmov	r8, r9, d0
 80140ac:	4616      	mov	r6, r2
 80140ae:	f7ff fc1b 	bl	80138e8 <_Balloc>
 80140b2:	4604      	mov	r4, r0
 80140b4:	b930      	cbnz	r0, 80140c4 <__d2b+0x24>
 80140b6:	4602      	mov	r2, r0
 80140b8:	4b23      	ldr	r3, [pc, #140]	@ (8014148 <__d2b+0xa8>)
 80140ba:	4824      	ldr	r0, [pc, #144]	@ (801414c <__d2b+0xac>)
 80140bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80140c0:	f7fe f950 	bl	8012364 <__assert_func>
 80140c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80140c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140cc:	b10d      	cbz	r5, 80140d2 <__d2b+0x32>
 80140ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80140d2:	9301      	str	r3, [sp, #4]
 80140d4:	f1b8 0300 	subs.w	r3, r8, #0
 80140d8:	d023      	beq.n	8014122 <__d2b+0x82>
 80140da:	4668      	mov	r0, sp
 80140dc:	9300      	str	r3, [sp, #0]
 80140de:	f7ff fd14 	bl	8013b0a <__lo0bits>
 80140e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80140e6:	b1d0      	cbz	r0, 801411e <__d2b+0x7e>
 80140e8:	f1c0 0320 	rsb	r3, r0, #32
 80140ec:	fa02 f303 	lsl.w	r3, r2, r3
 80140f0:	430b      	orrs	r3, r1
 80140f2:	40c2      	lsrs	r2, r0
 80140f4:	6163      	str	r3, [r4, #20]
 80140f6:	9201      	str	r2, [sp, #4]
 80140f8:	9b01      	ldr	r3, [sp, #4]
 80140fa:	61a3      	str	r3, [r4, #24]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	bf0c      	ite	eq
 8014100:	2201      	moveq	r2, #1
 8014102:	2202      	movne	r2, #2
 8014104:	6122      	str	r2, [r4, #16]
 8014106:	b1a5      	cbz	r5, 8014132 <__d2b+0x92>
 8014108:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801410c:	4405      	add	r5, r0
 801410e:	603d      	str	r5, [r7, #0]
 8014110:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014114:	6030      	str	r0, [r6, #0]
 8014116:	4620      	mov	r0, r4
 8014118:	b003      	add	sp, #12
 801411a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801411e:	6161      	str	r1, [r4, #20]
 8014120:	e7ea      	b.n	80140f8 <__d2b+0x58>
 8014122:	a801      	add	r0, sp, #4
 8014124:	f7ff fcf1 	bl	8013b0a <__lo0bits>
 8014128:	9b01      	ldr	r3, [sp, #4]
 801412a:	6163      	str	r3, [r4, #20]
 801412c:	3020      	adds	r0, #32
 801412e:	2201      	movs	r2, #1
 8014130:	e7e8      	b.n	8014104 <__d2b+0x64>
 8014132:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014136:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801413a:	6038      	str	r0, [r7, #0]
 801413c:	6918      	ldr	r0, [r3, #16]
 801413e:	f7ff fcc5 	bl	8013acc <__hi0bits>
 8014142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014146:	e7e5      	b.n	8014114 <__d2b+0x74>
 8014148:	08014fe8 	.word	0x08014fe8
 801414c:	08015059 	.word	0x08015059

08014150 <__ratio>:
 8014150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014154:	b085      	sub	sp, #20
 8014156:	e9cd 1000 	strd	r1, r0, [sp]
 801415a:	a902      	add	r1, sp, #8
 801415c:	f7ff ff56 	bl	801400c <__b2d>
 8014160:	9800      	ldr	r0, [sp, #0]
 8014162:	a903      	add	r1, sp, #12
 8014164:	ec55 4b10 	vmov	r4, r5, d0
 8014168:	f7ff ff50 	bl	801400c <__b2d>
 801416c:	9b01      	ldr	r3, [sp, #4]
 801416e:	6919      	ldr	r1, [r3, #16]
 8014170:	9b00      	ldr	r3, [sp, #0]
 8014172:	691b      	ldr	r3, [r3, #16]
 8014174:	1ac9      	subs	r1, r1, r3
 8014176:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801417a:	1a9b      	subs	r3, r3, r2
 801417c:	ec5b ab10 	vmov	sl, fp, d0
 8014180:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014184:	2b00      	cmp	r3, #0
 8014186:	bfce      	itee	gt
 8014188:	462a      	movgt	r2, r5
 801418a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801418e:	465a      	movle	r2, fp
 8014190:	462f      	mov	r7, r5
 8014192:	46d9      	mov	r9, fp
 8014194:	bfcc      	ite	gt
 8014196:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801419a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801419e:	464b      	mov	r3, r9
 80141a0:	4652      	mov	r2, sl
 80141a2:	4620      	mov	r0, r4
 80141a4:	4639      	mov	r1, r7
 80141a6:	f7ec fb71 	bl	800088c <__aeabi_ddiv>
 80141aa:	ec41 0b10 	vmov	d0, r0, r1
 80141ae:	b005      	add	sp, #20
 80141b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141b4 <__copybits>:
 80141b4:	3901      	subs	r1, #1
 80141b6:	b570      	push	{r4, r5, r6, lr}
 80141b8:	1149      	asrs	r1, r1, #5
 80141ba:	6914      	ldr	r4, [r2, #16]
 80141bc:	3101      	adds	r1, #1
 80141be:	f102 0314 	add.w	r3, r2, #20
 80141c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80141c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80141ca:	1f05      	subs	r5, r0, #4
 80141cc:	42a3      	cmp	r3, r4
 80141ce:	d30c      	bcc.n	80141ea <__copybits+0x36>
 80141d0:	1aa3      	subs	r3, r4, r2
 80141d2:	3b11      	subs	r3, #17
 80141d4:	f023 0303 	bic.w	r3, r3, #3
 80141d8:	3211      	adds	r2, #17
 80141da:	42a2      	cmp	r2, r4
 80141dc:	bf88      	it	hi
 80141de:	2300      	movhi	r3, #0
 80141e0:	4418      	add	r0, r3
 80141e2:	2300      	movs	r3, #0
 80141e4:	4288      	cmp	r0, r1
 80141e6:	d305      	bcc.n	80141f4 <__copybits+0x40>
 80141e8:	bd70      	pop	{r4, r5, r6, pc}
 80141ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80141ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80141f2:	e7eb      	b.n	80141cc <__copybits+0x18>
 80141f4:	f840 3b04 	str.w	r3, [r0], #4
 80141f8:	e7f4      	b.n	80141e4 <__copybits+0x30>

080141fa <__any_on>:
 80141fa:	f100 0214 	add.w	r2, r0, #20
 80141fe:	6900      	ldr	r0, [r0, #16]
 8014200:	114b      	asrs	r3, r1, #5
 8014202:	4298      	cmp	r0, r3
 8014204:	b510      	push	{r4, lr}
 8014206:	db11      	blt.n	801422c <__any_on+0x32>
 8014208:	dd0a      	ble.n	8014220 <__any_on+0x26>
 801420a:	f011 011f 	ands.w	r1, r1, #31
 801420e:	d007      	beq.n	8014220 <__any_on+0x26>
 8014210:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014214:	fa24 f001 	lsr.w	r0, r4, r1
 8014218:	fa00 f101 	lsl.w	r1, r0, r1
 801421c:	428c      	cmp	r4, r1
 801421e:	d10b      	bne.n	8014238 <__any_on+0x3e>
 8014220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014224:	4293      	cmp	r3, r2
 8014226:	d803      	bhi.n	8014230 <__any_on+0x36>
 8014228:	2000      	movs	r0, #0
 801422a:	bd10      	pop	{r4, pc}
 801422c:	4603      	mov	r3, r0
 801422e:	e7f7      	b.n	8014220 <__any_on+0x26>
 8014230:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014234:	2900      	cmp	r1, #0
 8014236:	d0f5      	beq.n	8014224 <__any_on+0x2a>
 8014238:	2001      	movs	r0, #1
 801423a:	e7f6      	b.n	801422a <__any_on+0x30>

0801423c <__ascii_wctomb>:
 801423c:	4603      	mov	r3, r0
 801423e:	4608      	mov	r0, r1
 8014240:	b141      	cbz	r1, 8014254 <__ascii_wctomb+0x18>
 8014242:	2aff      	cmp	r2, #255	@ 0xff
 8014244:	d904      	bls.n	8014250 <__ascii_wctomb+0x14>
 8014246:	228a      	movs	r2, #138	@ 0x8a
 8014248:	601a      	str	r2, [r3, #0]
 801424a:	f04f 30ff 	mov.w	r0, #4294967295
 801424e:	4770      	bx	lr
 8014250:	700a      	strb	r2, [r1, #0]
 8014252:	2001      	movs	r0, #1
 8014254:	4770      	bx	lr

08014256 <__ssputs_r>:
 8014256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801425a:	688e      	ldr	r6, [r1, #8]
 801425c:	461f      	mov	r7, r3
 801425e:	42be      	cmp	r6, r7
 8014260:	680b      	ldr	r3, [r1, #0]
 8014262:	4682      	mov	sl, r0
 8014264:	460c      	mov	r4, r1
 8014266:	4690      	mov	r8, r2
 8014268:	d82d      	bhi.n	80142c6 <__ssputs_r+0x70>
 801426a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801426e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014272:	d026      	beq.n	80142c2 <__ssputs_r+0x6c>
 8014274:	6965      	ldr	r5, [r4, #20]
 8014276:	6909      	ldr	r1, [r1, #16]
 8014278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801427c:	eba3 0901 	sub.w	r9, r3, r1
 8014280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014284:	1c7b      	adds	r3, r7, #1
 8014286:	444b      	add	r3, r9
 8014288:	106d      	asrs	r5, r5, #1
 801428a:	429d      	cmp	r5, r3
 801428c:	bf38      	it	cc
 801428e:	461d      	movcc	r5, r3
 8014290:	0553      	lsls	r3, r2, #21
 8014292:	d527      	bpl.n	80142e4 <__ssputs_r+0x8e>
 8014294:	4629      	mov	r1, r5
 8014296:	f7ff fa89 	bl	80137ac <_malloc_r>
 801429a:	4606      	mov	r6, r0
 801429c:	b360      	cbz	r0, 80142f8 <__ssputs_r+0xa2>
 801429e:	6921      	ldr	r1, [r4, #16]
 80142a0:	464a      	mov	r2, r9
 80142a2:	f7fe f840 	bl	8012326 <memcpy>
 80142a6:	89a3      	ldrh	r3, [r4, #12]
 80142a8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80142ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80142b0:	81a3      	strh	r3, [r4, #12]
 80142b2:	6126      	str	r6, [r4, #16]
 80142b4:	6165      	str	r5, [r4, #20]
 80142b6:	444e      	add	r6, r9
 80142b8:	eba5 0509 	sub.w	r5, r5, r9
 80142bc:	6026      	str	r6, [r4, #0]
 80142be:	60a5      	str	r5, [r4, #8]
 80142c0:	463e      	mov	r6, r7
 80142c2:	42be      	cmp	r6, r7
 80142c4:	d900      	bls.n	80142c8 <__ssputs_r+0x72>
 80142c6:	463e      	mov	r6, r7
 80142c8:	6820      	ldr	r0, [r4, #0]
 80142ca:	4632      	mov	r2, r6
 80142cc:	4641      	mov	r1, r8
 80142ce:	f000 fb7b 	bl	80149c8 <memmove>
 80142d2:	68a3      	ldr	r3, [r4, #8]
 80142d4:	1b9b      	subs	r3, r3, r6
 80142d6:	60a3      	str	r3, [r4, #8]
 80142d8:	6823      	ldr	r3, [r4, #0]
 80142da:	4433      	add	r3, r6
 80142dc:	6023      	str	r3, [r4, #0]
 80142de:	2000      	movs	r0, #0
 80142e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e4:	462a      	mov	r2, r5
 80142e6:	f000 fbd6 	bl	8014a96 <_realloc_r>
 80142ea:	4606      	mov	r6, r0
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d1e0      	bne.n	80142b2 <__ssputs_r+0x5c>
 80142f0:	6921      	ldr	r1, [r4, #16]
 80142f2:	4650      	mov	r0, sl
 80142f4:	f7fe feac 	bl	8013050 <_free_r>
 80142f8:	230c      	movs	r3, #12
 80142fa:	f8ca 3000 	str.w	r3, [sl]
 80142fe:	89a3      	ldrh	r3, [r4, #12]
 8014300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014304:	81a3      	strh	r3, [r4, #12]
 8014306:	f04f 30ff 	mov.w	r0, #4294967295
 801430a:	e7e9      	b.n	80142e0 <__ssputs_r+0x8a>

0801430c <_svfiprintf_r>:
 801430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014310:	4698      	mov	r8, r3
 8014312:	898b      	ldrh	r3, [r1, #12]
 8014314:	061b      	lsls	r3, r3, #24
 8014316:	b09d      	sub	sp, #116	@ 0x74
 8014318:	4607      	mov	r7, r0
 801431a:	460d      	mov	r5, r1
 801431c:	4614      	mov	r4, r2
 801431e:	d510      	bpl.n	8014342 <_svfiprintf_r+0x36>
 8014320:	690b      	ldr	r3, [r1, #16]
 8014322:	b973      	cbnz	r3, 8014342 <_svfiprintf_r+0x36>
 8014324:	2140      	movs	r1, #64	@ 0x40
 8014326:	f7ff fa41 	bl	80137ac <_malloc_r>
 801432a:	6028      	str	r0, [r5, #0]
 801432c:	6128      	str	r0, [r5, #16]
 801432e:	b930      	cbnz	r0, 801433e <_svfiprintf_r+0x32>
 8014330:	230c      	movs	r3, #12
 8014332:	603b      	str	r3, [r7, #0]
 8014334:	f04f 30ff 	mov.w	r0, #4294967295
 8014338:	b01d      	add	sp, #116	@ 0x74
 801433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801433e:	2340      	movs	r3, #64	@ 0x40
 8014340:	616b      	str	r3, [r5, #20]
 8014342:	2300      	movs	r3, #0
 8014344:	9309      	str	r3, [sp, #36]	@ 0x24
 8014346:	2320      	movs	r3, #32
 8014348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801434c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014350:	2330      	movs	r3, #48	@ 0x30
 8014352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80144f0 <_svfiprintf_r+0x1e4>
 8014356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801435a:	f04f 0901 	mov.w	r9, #1
 801435e:	4623      	mov	r3, r4
 8014360:	469a      	mov	sl, r3
 8014362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014366:	b10a      	cbz	r2, 801436c <_svfiprintf_r+0x60>
 8014368:	2a25      	cmp	r2, #37	@ 0x25
 801436a:	d1f9      	bne.n	8014360 <_svfiprintf_r+0x54>
 801436c:	ebba 0b04 	subs.w	fp, sl, r4
 8014370:	d00b      	beq.n	801438a <_svfiprintf_r+0x7e>
 8014372:	465b      	mov	r3, fp
 8014374:	4622      	mov	r2, r4
 8014376:	4629      	mov	r1, r5
 8014378:	4638      	mov	r0, r7
 801437a:	f7ff ff6c 	bl	8014256 <__ssputs_r>
 801437e:	3001      	adds	r0, #1
 8014380:	f000 80a7 	beq.w	80144d2 <_svfiprintf_r+0x1c6>
 8014384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014386:	445a      	add	r2, fp
 8014388:	9209      	str	r2, [sp, #36]	@ 0x24
 801438a:	f89a 3000 	ldrb.w	r3, [sl]
 801438e:	2b00      	cmp	r3, #0
 8014390:	f000 809f 	beq.w	80144d2 <_svfiprintf_r+0x1c6>
 8014394:	2300      	movs	r3, #0
 8014396:	f04f 32ff 	mov.w	r2, #4294967295
 801439a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801439e:	f10a 0a01 	add.w	sl, sl, #1
 80143a2:	9304      	str	r3, [sp, #16]
 80143a4:	9307      	str	r3, [sp, #28]
 80143a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80143ac:	4654      	mov	r4, sl
 80143ae:	2205      	movs	r2, #5
 80143b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143b4:	484e      	ldr	r0, [pc, #312]	@ (80144f0 <_svfiprintf_r+0x1e4>)
 80143b6:	f7eb ff2b 	bl	8000210 <memchr>
 80143ba:	9a04      	ldr	r2, [sp, #16]
 80143bc:	b9d8      	cbnz	r0, 80143f6 <_svfiprintf_r+0xea>
 80143be:	06d0      	lsls	r0, r2, #27
 80143c0:	bf44      	itt	mi
 80143c2:	2320      	movmi	r3, #32
 80143c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143c8:	0711      	lsls	r1, r2, #28
 80143ca:	bf44      	itt	mi
 80143cc:	232b      	movmi	r3, #43	@ 0x2b
 80143ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143d2:	f89a 3000 	ldrb.w	r3, [sl]
 80143d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80143d8:	d015      	beq.n	8014406 <_svfiprintf_r+0xfa>
 80143da:	9a07      	ldr	r2, [sp, #28]
 80143dc:	4654      	mov	r4, sl
 80143de:	2000      	movs	r0, #0
 80143e0:	f04f 0c0a 	mov.w	ip, #10
 80143e4:	4621      	mov	r1, r4
 80143e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143ea:	3b30      	subs	r3, #48	@ 0x30
 80143ec:	2b09      	cmp	r3, #9
 80143ee:	d94b      	bls.n	8014488 <_svfiprintf_r+0x17c>
 80143f0:	b1b0      	cbz	r0, 8014420 <_svfiprintf_r+0x114>
 80143f2:	9207      	str	r2, [sp, #28]
 80143f4:	e014      	b.n	8014420 <_svfiprintf_r+0x114>
 80143f6:	eba0 0308 	sub.w	r3, r0, r8
 80143fa:	fa09 f303 	lsl.w	r3, r9, r3
 80143fe:	4313      	orrs	r3, r2
 8014400:	9304      	str	r3, [sp, #16]
 8014402:	46a2      	mov	sl, r4
 8014404:	e7d2      	b.n	80143ac <_svfiprintf_r+0xa0>
 8014406:	9b03      	ldr	r3, [sp, #12]
 8014408:	1d19      	adds	r1, r3, #4
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	9103      	str	r1, [sp, #12]
 801440e:	2b00      	cmp	r3, #0
 8014410:	bfbb      	ittet	lt
 8014412:	425b      	neglt	r3, r3
 8014414:	f042 0202 	orrlt.w	r2, r2, #2
 8014418:	9307      	strge	r3, [sp, #28]
 801441a:	9307      	strlt	r3, [sp, #28]
 801441c:	bfb8      	it	lt
 801441e:	9204      	strlt	r2, [sp, #16]
 8014420:	7823      	ldrb	r3, [r4, #0]
 8014422:	2b2e      	cmp	r3, #46	@ 0x2e
 8014424:	d10a      	bne.n	801443c <_svfiprintf_r+0x130>
 8014426:	7863      	ldrb	r3, [r4, #1]
 8014428:	2b2a      	cmp	r3, #42	@ 0x2a
 801442a:	d132      	bne.n	8014492 <_svfiprintf_r+0x186>
 801442c:	9b03      	ldr	r3, [sp, #12]
 801442e:	1d1a      	adds	r2, r3, #4
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	9203      	str	r2, [sp, #12]
 8014434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014438:	3402      	adds	r4, #2
 801443a:	9305      	str	r3, [sp, #20]
 801443c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014500 <_svfiprintf_r+0x1f4>
 8014440:	7821      	ldrb	r1, [r4, #0]
 8014442:	2203      	movs	r2, #3
 8014444:	4650      	mov	r0, sl
 8014446:	f7eb fee3 	bl	8000210 <memchr>
 801444a:	b138      	cbz	r0, 801445c <_svfiprintf_r+0x150>
 801444c:	9b04      	ldr	r3, [sp, #16]
 801444e:	eba0 000a 	sub.w	r0, r0, sl
 8014452:	2240      	movs	r2, #64	@ 0x40
 8014454:	4082      	lsls	r2, r0
 8014456:	4313      	orrs	r3, r2
 8014458:	3401      	adds	r4, #1
 801445a:	9304      	str	r3, [sp, #16]
 801445c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014460:	4824      	ldr	r0, [pc, #144]	@ (80144f4 <_svfiprintf_r+0x1e8>)
 8014462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014466:	2206      	movs	r2, #6
 8014468:	f7eb fed2 	bl	8000210 <memchr>
 801446c:	2800      	cmp	r0, #0
 801446e:	d036      	beq.n	80144de <_svfiprintf_r+0x1d2>
 8014470:	4b21      	ldr	r3, [pc, #132]	@ (80144f8 <_svfiprintf_r+0x1ec>)
 8014472:	bb1b      	cbnz	r3, 80144bc <_svfiprintf_r+0x1b0>
 8014474:	9b03      	ldr	r3, [sp, #12]
 8014476:	3307      	adds	r3, #7
 8014478:	f023 0307 	bic.w	r3, r3, #7
 801447c:	3308      	adds	r3, #8
 801447e:	9303      	str	r3, [sp, #12]
 8014480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014482:	4433      	add	r3, r6
 8014484:	9309      	str	r3, [sp, #36]	@ 0x24
 8014486:	e76a      	b.n	801435e <_svfiprintf_r+0x52>
 8014488:	fb0c 3202 	mla	r2, ip, r2, r3
 801448c:	460c      	mov	r4, r1
 801448e:	2001      	movs	r0, #1
 8014490:	e7a8      	b.n	80143e4 <_svfiprintf_r+0xd8>
 8014492:	2300      	movs	r3, #0
 8014494:	3401      	adds	r4, #1
 8014496:	9305      	str	r3, [sp, #20]
 8014498:	4619      	mov	r1, r3
 801449a:	f04f 0c0a 	mov.w	ip, #10
 801449e:	4620      	mov	r0, r4
 80144a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144a4:	3a30      	subs	r2, #48	@ 0x30
 80144a6:	2a09      	cmp	r2, #9
 80144a8:	d903      	bls.n	80144b2 <_svfiprintf_r+0x1a6>
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d0c6      	beq.n	801443c <_svfiprintf_r+0x130>
 80144ae:	9105      	str	r1, [sp, #20]
 80144b0:	e7c4      	b.n	801443c <_svfiprintf_r+0x130>
 80144b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80144b6:	4604      	mov	r4, r0
 80144b8:	2301      	movs	r3, #1
 80144ba:	e7f0      	b.n	801449e <_svfiprintf_r+0x192>
 80144bc:	ab03      	add	r3, sp, #12
 80144be:	9300      	str	r3, [sp, #0]
 80144c0:	462a      	mov	r2, r5
 80144c2:	4b0e      	ldr	r3, [pc, #56]	@ (80144fc <_svfiprintf_r+0x1f0>)
 80144c4:	a904      	add	r1, sp, #16
 80144c6:	4638      	mov	r0, r7
 80144c8:	f7fc ffde 	bl	8011488 <_printf_float>
 80144cc:	1c42      	adds	r2, r0, #1
 80144ce:	4606      	mov	r6, r0
 80144d0:	d1d6      	bne.n	8014480 <_svfiprintf_r+0x174>
 80144d2:	89ab      	ldrh	r3, [r5, #12]
 80144d4:	065b      	lsls	r3, r3, #25
 80144d6:	f53f af2d 	bmi.w	8014334 <_svfiprintf_r+0x28>
 80144da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144dc:	e72c      	b.n	8014338 <_svfiprintf_r+0x2c>
 80144de:	ab03      	add	r3, sp, #12
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	462a      	mov	r2, r5
 80144e4:	4b05      	ldr	r3, [pc, #20]	@ (80144fc <_svfiprintf_r+0x1f0>)
 80144e6:	a904      	add	r1, sp, #16
 80144e8:	4638      	mov	r0, r7
 80144ea:	f7fd fa65 	bl	80119b8 <_printf_i>
 80144ee:	e7ed      	b.n	80144cc <_svfiprintf_r+0x1c0>
 80144f0:	080150b2 	.word	0x080150b2
 80144f4:	080150bc 	.word	0x080150bc
 80144f8:	08011489 	.word	0x08011489
 80144fc:	08014257 	.word	0x08014257
 8014500:	080150b8 	.word	0x080150b8

08014504 <__sfputc_r>:
 8014504:	6893      	ldr	r3, [r2, #8]
 8014506:	3b01      	subs	r3, #1
 8014508:	2b00      	cmp	r3, #0
 801450a:	b410      	push	{r4}
 801450c:	6093      	str	r3, [r2, #8]
 801450e:	da08      	bge.n	8014522 <__sfputc_r+0x1e>
 8014510:	6994      	ldr	r4, [r2, #24]
 8014512:	42a3      	cmp	r3, r4
 8014514:	db01      	blt.n	801451a <__sfputc_r+0x16>
 8014516:	290a      	cmp	r1, #10
 8014518:	d103      	bne.n	8014522 <__sfputc_r+0x1e>
 801451a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801451e:	f7fd bd14 	b.w	8011f4a <__swbuf_r>
 8014522:	6813      	ldr	r3, [r2, #0]
 8014524:	1c58      	adds	r0, r3, #1
 8014526:	6010      	str	r0, [r2, #0]
 8014528:	7019      	strb	r1, [r3, #0]
 801452a:	4608      	mov	r0, r1
 801452c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014530:	4770      	bx	lr

08014532 <__sfputs_r>:
 8014532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014534:	4606      	mov	r6, r0
 8014536:	460f      	mov	r7, r1
 8014538:	4614      	mov	r4, r2
 801453a:	18d5      	adds	r5, r2, r3
 801453c:	42ac      	cmp	r4, r5
 801453e:	d101      	bne.n	8014544 <__sfputs_r+0x12>
 8014540:	2000      	movs	r0, #0
 8014542:	e007      	b.n	8014554 <__sfputs_r+0x22>
 8014544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014548:	463a      	mov	r2, r7
 801454a:	4630      	mov	r0, r6
 801454c:	f7ff ffda 	bl	8014504 <__sfputc_r>
 8014550:	1c43      	adds	r3, r0, #1
 8014552:	d1f3      	bne.n	801453c <__sfputs_r+0xa>
 8014554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014558 <_vfiprintf_r>:
 8014558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801455c:	460d      	mov	r5, r1
 801455e:	b09d      	sub	sp, #116	@ 0x74
 8014560:	4614      	mov	r4, r2
 8014562:	4698      	mov	r8, r3
 8014564:	4606      	mov	r6, r0
 8014566:	b118      	cbz	r0, 8014570 <_vfiprintf_r+0x18>
 8014568:	6a03      	ldr	r3, [r0, #32]
 801456a:	b90b      	cbnz	r3, 8014570 <_vfiprintf_r+0x18>
 801456c:	f7fd fbce 	bl	8011d0c <__sinit>
 8014570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014572:	07d9      	lsls	r1, r3, #31
 8014574:	d405      	bmi.n	8014582 <_vfiprintf_r+0x2a>
 8014576:	89ab      	ldrh	r3, [r5, #12]
 8014578:	059a      	lsls	r2, r3, #22
 801457a:	d402      	bmi.n	8014582 <_vfiprintf_r+0x2a>
 801457c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801457e:	f7fd fed0 	bl	8012322 <__retarget_lock_acquire_recursive>
 8014582:	89ab      	ldrh	r3, [r5, #12]
 8014584:	071b      	lsls	r3, r3, #28
 8014586:	d501      	bpl.n	801458c <_vfiprintf_r+0x34>
 8014588:	692b      	ldr	r3, [r5, #16]
 801458a:	b99b      	cbnz	r3, 80145b4 <_vfiprintf_r+0x5c>
 801458c:	4629      	mov	r1, r5
 801458e:	4630      	mov	r0, r6
 8014590:	f7fd fd1a 	bl	8011fc8 <__swsetup_r>
 8014594:	b170      	cbz	r0, 80145b4 <_vfiprintf_r+0x5c>
 8014596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014598:	07dc      	lsls	r4, r3, #31
 801459a:	d504      	bpl.n	80145a6 <_vfiprintf_r+0x4e>
 801459c:	f04f 30ff 	mov.w	r0, #4294967295
 80145a0:	b01d      	add	sp, #116	@ 0x74
 80145a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a6:	89ab      	ldrh	r3, [r5, #12]
 80145a8:	0598      	lsls	r0, r3, #22
 80145aa:	d4f7      	bmi.n	801459c <_vfiprintf_r+0x44>
 80145ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145ae:	f7fd feb9 	bl	8012324 <__retarget_lock_release_recursive>
 80145b2:	e7f3      	b.n	801459c <_vfiprintf_r+0x44>
 80145b4:	2300      	movs	r3, #0
 80145b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80145b8:	2320      	movs	r3, #32
 80145ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80145be:	f8cd 800c 	str.w	r8, [sp, #12]
 80145c2:	2330      	movs	r3, #48	@ 0x30
 80145c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014774 <_vfiprintf_r+0x21c>
 80145c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80145cc:	f04f 0901 	mov.w	r9, #1
 80145d0:	4623      	mov	r3, r4
 80145d2:	469a      	mov	sl, r3
 80145d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145d8:	b10a      	cbz	r2, 80145de <_vfiprintf_r+0x86>
 80145da:	2a25      	cmp	r2, #37	@ 0x25
 80145dc:	d1f9      	bne.n	80145d2 <_vfiprintf_r+0x7a>
 80145de:	ebba 0b04 	subs.w	fp, sl, r4
 80145e2:	d00b      	beq.n	80145fc <_vfiprintf_r+0xa4>
 80145e4:	465b      	mov	r3, fp
 80145e6:	4622      	mov	r2, r4
 80145e8:	4629      	mov	r1, r5
 80145ea:	4630      	mov	r0, r6
 80145ec:	f7ff ffa1 	bl	8014532 <__sfputs_r>
 80145f0:	3001      	adds	r0, #1
 80145f2:	f000 80a7 	beq.w	8014744 <_vfiprintf_r+0x1ec>
 80145f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145f8:	445a      	add	r2, fp
 80145fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80145fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014600:	2b00      	cmp	r3, #0
 8014602:	f000 809f 	beq.w	8014744 <_vfiprintf_r+0x1ec>
 8014606:	2300      	movs	r3, #0
 8014608:	f04f 32ff 	mov.w	r2, #4294967295
 801460c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014610:	f10a 0a01 	add.w	sl, sl, #1
 8014614:	9304      	str	r3, [sp, #16]
 8014616:	9307      	str	r3, [sp, #28]
 8014618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801461c:	931a      	str	r3, [sp, #104]	@ 0x68
 801461e:	4654      	mov	r4, sl
 8014620:	2205      	movs	r2, #5
 8014622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014626:	4853      	ldr	r0, [pc, #332]	@ (8014774 <_vfiprintf_r+0x21c>)
 8014628:	f7eb fdf2 	bl	8000210 <memchr>
 801462c:	9a04      	ldr	r2, [sp, #16]
 801462e:	b9d8      	cbnz	r0, 8014668 <_vfiprintf_r+0x110>
 8014630:	06d1      	lsls	r1, r2, #27
 8014632:	bf44      	itt	mi
 8014634:	2320      	movmi	r3, #32
 8014636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801463a:	0713      	lsls	r3, r2, #28
 801463c:	bf44      	itt	mi
 801463e:	232b      	movmi	r3, #43	@ 0x2b
 8014640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014644:	f89a 3000 	ldrb.w	r3, [sl]
 8014648:	2b2a      	cmp	r3, #42	@ 0x2a
 801464a:	d015      	beq.n	8014678 <_vfiprintf_r+0x120>
 801464c:	9a07      	ldr	r2, [sp, #28]
 801464e:	4654      	mov	r4, sl
 8014650:	2000      	movs	r0, #0
 8014652:	f04f 0c0a 	mov.w	ip, #10
 8014656:	4621      	mov	r1, r4
 8014658:	f811 3b01 	ldrb.w	r3, [r1], #1
 801465c:	3b30      	subs	r3, #48	@ 0x30
 801465e:	2b09      	cmp	r3, #9
 8014660:	d94b      	bls.n	80146fa <_vfiprintf_r+0x1a2>
 8014662:	b1b0      	cbz	r0, 8014692 <_vfiprintf_r+0x13a>
 8014664:	9207      	str	r2, [sp, #28]
 8014666:	e014      	b.n	8014692 <_vfiprintf_r+0x13a>
 8014668:	eba0 0308 	sub.w	r3, r0, r8
 801466c:	fa09 f303 	lsl.w	r3, r9, r3
 8014670:	4313      	orrs	r3, r2
 8014672:	9304      	str	r3, [sp, #16]
 8014674:	46a2      	mov	sl, r4
 8014676:	e7d2      	b.n	801461e <_vfiprintf_r+0xc6>
 8014678:	9b03      	ldr	r3, [sp, #12]
 801467a:	1d19      	adds	r1, r3, #4
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	9103      	str	r1, [sp, #12]
 8014680:	2b00      	cmp	r3, #0
 8014682:	bfbb      	ittet	lt
 8014684:	425b      	neglt	r3, r3
 8014686:	f042 0202 	orrlt.w	r2, r2, #2
 801468a:	9307      	strge	r3, [sp, #28]
 801468c:	9307      	strlt	r3, [sp, #28]
 801468e:	bfb8      	it	lt
 8014690:	9204      	strlt	r2, [sp, #16]
 8014692:	7823      	ldrb	r3, [r4, #0]
 8014694:	2b2e      	cmp	r3, #46	@ 0x2e
 8014696:	d10a      	bne.n	80146ae <_vfiprintf_r+0x156>
 8014698:	7863      	ldrb	r3, [r4, #1]
 801469a:	2b2a      	cmp	r3, #42	@ 0x2a
 801469c:	d132      	bne.n	8014704 <_vfiprintf_r+0x1ac>
 801469e:	9b03      	ldr	r3, [sp, #12]
 80146a0:	1d1a      	adds	r2, r3, #4
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	9203      	str	r2, [sp, #12]
 80146a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80146aa:	3402      	adds	r4, #2
 80146ac:	9305      	str	r3, [sp, #20]
 80146ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014784 <_vfiprintf_r+0x22c>
 80146b2:	7821      	ldrb	r1, [r4, #0]
 80146b4:	2203      	movs	r2, #3
 80146b6:	4650      	mov	r0, sl
 80146b8:	f7eb fdaa 	bl	8000210 <memchr>
 80146bc:	b138      	cbz	r0, 80146ce <_vfiprintf_r+0x176>
 80146be:	9b04      	ldr	r3, [sp, #16]
 80146c0:	eba0 000a 	sub.w	r0, r0, sl
 80146c4:	2240      	movs	r2, #64	@ 0x40
 80146c6:	4082      	lsls	r2, r0
 80146c8:	4313      	orrs	r3, r2
 80146ca:	3401      	adds	r4, #1
 80146cc:	9304      	str	r3, [sp, #16]
 80146ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146d2:	4829      	ldr	r0, [pc, #164]	@ (8014778 <_vfiprintf_r+0x220>)
 80146d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80146d8:	2206      	movs	r2, #6
 80146da:	f7eb fd99 	bl	8000210 <memchr>
 80146de:	2800      	cmp	r0, #0
 80146e0:	d03f      	beq.n	8014762 <_vfiprintf_r+0x20a>
 80146e2:	4b26      	ldr	r3, [pc, #152]	@ (801477c <_vfiprintf_r+0x224>)
 80146e4:	bb1b      	cbnz	r3, 801472e <_vfiprintf_r+0x1d6>
 80146e6:	9b03      	ldr	r3, [sp, #12]
 80146e8:	3307      	adds	r3, #7
 80146ea:	f023 0307 	bic.w	r3, r3, #7
 80146ee:	3308      	adds	r3, #8
 80146f0:	9303      	str	r3, [sp, #12]
 80146f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146f4:	443b      	add	r3, r7
 80146f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80146f8:	e76a      	b.n	80145d0 <_vfiprintf_r+0x78>
 80146fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80146fe:	460c      	mov	r4, r1
 8014700:	2001      	movs	r0, #1
 8014702:	e7a8      	b.n	8014656 <_vfiprintf_r+0xfe>
 8014704:	2300      	movs	r3, #0
 8014706:	3401      	adds	r4, #1
 8014708:	9305      	str	r3, [sp, #20]
 801470a:	4619      	mov	r1, r3
 801470c:	f04f 0c0a 	mov.w	ip, #10
 8014710:	4620      	mov	r0, r4
 8014712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014716:	3a30      	subs	r2, #48	@ 0x30
 8014718:	2a09      	cmp	r2, #9
 801471a:	d903      	bls.n	8014724 <_vfiprintf_r+0x1cc>
 801471c:	2b00      	cmp	r3, #0
 801471e:	d0c6      	beq.n	80146ae <_vfiprintf_r+0x156>
 8014720:	9105      	str	r1, [sp, #20]
 8014722:	e7c4      	b.n	80146ae <_vfiprintf_r+0x156>
 8014724:	fb0c 2101 	mla	r1, ip, r1, r2
 8014728:	4604      	mov	r4, r0
 801472a:	2301      	movs	r3, #1
 801472c:	e7f0      	b.n	8014710 <_vfiprintf_r+0x1b8>
 801472e:	ab03      	add	r3, sp, #12
 8014730:	9300      	str	r3, [sp, #0]
 8014732:	462a      	mov	r2, r5
 8014734:	4b12      	ldr	r3, [pc, #72]	@ (8014780 <_vfiprintf_r+0x228>)
 8014736:	a904      	add	r1, sp, #16
 8014738:	4630      	mov	r0, r6
 801473a:	f7fc fea5 	bl	8011488 <_printf_float>
 801473e:	4607      	mov	r7, r0
 8014740:	1c78      	adds	r0, r7, #1
 8014742:	d1d6      	bne.n	80146f2 <_vfiprintf_r+0x19a>
 8014744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014746:	07d9      	lsls	r1, r3, #31
 8014748:	d405      	bmi.n	8014756 <_vfiprintf_r+0x1fe>
 801474a:	89ab      	ldrh	r3, [r5, #12]
 801474c:	059a      	lsls	r2, r3, #22
 801474e:	d402      	bmi.n	8014756 <_vfiprintf_r+0x1fe>
 8014750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014752:	f7fd fde7 	bl	8012324 <__retarget_lock_release_recursive>
 8014756:	89ab      	ldrh	r3, [r5, #12]
 8014758:	065b      	lsls	r3, r3, #25
 801475a:	f53f af1f 	bmi.w	801459c <_vfiprintf_r+0x44>
 801475e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014760:	e71e      	b.n	80145a0 <_vfiprintf_r+0x48>
 8014762:	ab03      	add	r3, sp, #12
 8014764:	9300      	str	r3, [sp, #0]
 8014766:	462a      	mov	r2, r5
 8014768:	4b05      	ldr	r3, [pc, #20]	@ (8014780 <_vfiprintf_r+0x228>)
 801476a:	a904      	add	r1, sp, #16
 801476c:	4630      	mov	r0, r6
 801476e:	f7fd f923 	bl	80119b8 <_printf_i>
 8014772:	e7e4      	b.n	801473e <_vfiprintf_r+0x1e6>
 8014774:	080150b2 	.word	0x080150b2
 8014778:	080150bc 	.word	0x080150bc
 801477c:	08011489 	.word	0x08011489
 8014780:	08014533 	.word	0x08014533
 8014784:	080150b8 	.word	0x080150b8

08014788 <__sflush_r>:
 8014788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801478c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014790:	0716      	lsls	r6, r2, #28
 8014792:	4605      	mov	r5, r0
 8014794:	460c      	mov	r4, r1
 8014796:	d454      	bmi.n	8014842 <__sflush_r+0xba>
 8014798:	684b      	ldr	r3, [r1, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	dc02      	bgt.n	80147a4 <__sflush_r+0x1c>
 801479e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	dd48      	ble.n	8014836 <__sflush_r+0xae>
 80147a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80147a6:	2e00      	cmp	r6, #0
 80147a8:	d045      	beq.n	8014836 <__sflush_r+0xae>
 80147aa:	2300      	movs	r3, #0
 80147ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80147b0:	682f      	ldr	r7, [r5, #0]
 80147b2:	6a21      	ldr	r1, [r4, #32]
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	d030      	beq.n	801481a <__sflush_r+0x92>
 80147b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80147ba:	89a3      	ldrh	r3, [r4, #12]
 80147bc:	0759      	lsls	r1, r3, #29
 80147be:	d505      	bpl.n	80147cc <__sflush_r+0x44>
 80147c0:	6863      	ldr	r3, [r4, #4]
 80147c2:	1ad2      	subs	r2, r2, r3
 80147c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80147c6:	b10b      	cbz	r3, 80147cc <__sflush_r+0x44>
 80147c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80147ca:	1ad2      	subs	r2, r2, r3
 80147cc:	2300      	movs	r3, #0
 80147ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80147d0:	6a21      	ldr	r1, [r4, #32]
 80147d2:	4628      	mov	r0, r5
 80147d4:	47b0      	blx	r6
 80147d6:	1c43      	adds	r3, r0, #1
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	d106      	bne.n	80147ea <__sflush_r+0x62>
 80147dc:	6829      	ldr	r1, [r5, #0]
 80147de:	291d      	cmp	r1, #29
 80147e0:	d82b      	bhi.n	801483a <__sflush_r+0xb2>
 80147e2:	4a2a      	ldr	r2, [pc, #168]	@ (801488c <__sflush_r+0x104>)
 80147e4:	40ca      	lsrs	r2, r1
 80147e6:	07d6      	lsls	r6, r2, #31
 80147e8:	d527      	bpl.n	801483a <__sflush_r+0xb2>
 80147ea:	2200      	movs	r2, #0
 80147ec:	6062      	str	r2, [r4, #4]
 80147ee:	04d9      	lsls	r1, r3, #19
 80147f0:	6922      	ldr	r2, [r4, #16]
 80147f2:	6022      	str	r2, [r4, #0]
 80147f4:	d504      	bpl.n	8014800 <__sflush_r+0x78>
 80147f6:	1c42      	adds	r2, r0, #1
 80147f8:	d101      	bne.n	80147fe <__sflush_r+0x76>
 80147fa:	682b      	ldr	r3, [r5, #0]
 80147fc:	b903      	cbnz	r3, 8014800 <__sflush_r+0x78>
 80147fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8014800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014802:	602f      	str	r7, [r5, #0]
 8014804:	b1b9      	cbz	r1, 8014836 <__sflush_r+0xae>
 8014806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801480a:	4299      	cmp	r1, r3
 801480c:	d002      	beq.n	8014814 <__sflush_r+0x8c>
 801480e:	4628      	mov	r0, r5
 8014810:	f7fe fc1e 	bl	8013050 <_free_r>
 8014814:	2300      	movs	r3, #0
 8014816:	6363      	str	r3, [r4, #52]	@ 0x34
 8014818:	e00d      	b.n	8014836 <__sflush_r+0xae>
 801481a:	2301      	movs	r3, #1
 801481c:	4628      	mov	r0, r5
 801481e:	47b0      	blx	r6
 8014820:	4602      	mov	r2, r0
 8014822:	1c50      	adds	r0, r2, #1
 8014824:	d1c9      	bne.n	80147ba <__sflush_r+0x32>
 8014826:	682b      	ldr	r3, [r5, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d0c6      	beq.n	80147ba <__sflush_r+0x32>
 801482c:	2b1d      	cmp	r3, #29
 801482e:	d001      	beq.n	8014834 <__sflush_r+0xac>
 8014830:	2b16      	cmp	r3, #22
 8014832:	d11e      	bne.n	8014872 <__sflush_r+0xea>
 8014834:	602f      	str	r7, [r5, #0]
 8014836:	2000      	movs	r0, #0
 8014838:	e022      	b.n	8014880 <__sflush_r+0xf8>
 801483a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801483e:	b21b      	sxth	r3, r3
 8014840:	e01b      	b.n	801487a <__sflush_r+0xf2>
 8014842:	690f      	ldr	r7, [r1, #16]
 8014844:	2f00      	cmp	r7, #0
 8014846:	d0f6      	beq.n	8014836 <__sflush_r+0xae>
 8014848:	0793      	lsls	r3, r2, #30
 801484a:	680e      	ldr	r6, [r1, #0]
 801484c:	bf08      	it	eq
 801484e:	694b      	ldreq	r3, [r1, #20]
 8014850:	600f      	str	r7, [r1, #0]
 8014852:	bf18      	it	ne
 8014854:	2300      	movne	r3, #0
 8014856:	eba6 0807 	sub.w	r8, r6, r7
 801485a:	608b      	str	r3, [r1, #8]
 801485c:	f1b8 0f00 	cmp.w	r8, #0
 8014860:	dde9      	ble.n	8014836 <__sflush_r+0xae>
 8014862:	6a21      	ldr	r1, [r4, #32]
 8014864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014866:	4643      	mov	r3, r8
 8014868:	463a      	mov	r2, r7
 801486a:	4628      	mov	r0, r5
 801486c:	47b0      	blx	r6
 801486e:	2800      	cmp	r0, #0
 8014870:	dc08      	bgt.n	8014884 <__sflush_r+0xfc>
 8014872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801487a:	81a3      	strh	r3, [r4, #12]
 801487c:	f04f 30ff 	mov.w	r0, #4294967295
 8014880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014884:	4407      	add	r7, r0
 8014886:	eba8 0800 	sub.w	r8, r8, r0
 801488a:	e7e7      	b.n	801485c <__sflush_r+0xd4>
 801488c:	20400001 	.word	0x20400001

08014890 <_fflush_r>:
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	690b      	ldr	r3, [r1, #16]
 8014894:	4605      	mov	r5, r0
 8014896:	460c      	mov	r4, r1
 8014898:	b913      	cbnz	r3, 80148a0 <_fflush_r+0x10>
 801489a:	2500      	movs	r5, #0
 801489c:	4628      	mov	r0, r5
 801489e:	bd38      	pop	{r3, r4, r5, pc}
 80148a0:	b118      	cbz	r0, 80148aa <_fflush_r+0x1a>
 80148a2:	6a03      	ldr	r3, [r0, #32]
 80148a4:	b90b      	cbnz	r3, 80148aa <_fflush_r+0x1a>
 80148a6:	f7fd fa31 	bl	8011d0c <__sinit>
 80148aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d0f3      	beq.n	801489a <_fflush_r+0xa>
 80148b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80148b4:	07d0      	lsls	r0, r2, #31
 80148b6:	d404      	bmi.n	80148c2 <_fflush_r+0x32>
 80148b8:	0599      	lsls	r1, r3, #22
 80148ba:	d402      	bmi.n	80148c2 <_fflush_r+0x32>
 80148bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148be:	f7fd fd30 	bl	8012322 <__retarget_lock_acquire_recursive>
 80148c2:	4628      	mov	r0, r5
 80148c4:	4621      	mov	r1, r4
 80148c6:	f7ff ff5f 	bl	8014788 <__sflush_r>
 80148ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80148cc:	07da      	lsls	r2, r3, #31
 80148ce:	4605      	mov	r5, r0
 80148d0:	d4e4      	bmi.n	801489c <_fflush_r+0xc>
 80148d2:	89a3      	ldrh	r3, [r4, #12]
 80148d4:	059b      	lsls	r3, r3, #22
 80148d6:	d4e1      	bmi.n	801489c <_fflush_r+0xc>
 80148d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148da:	f7fd fd23 	bl	8012324 <__retarget_lock_release_recursive>
 80148de:	e7dd      	b.n	801489c <_fflush_r+0xc>

080148e0 <fiprintf>:
 80148e0:	b40e      	push	{r1, r2, r3}
 80148e2:	b503      	push	{r0, r1, lr}
 80148e4:	4601      	mov	r1, r0
 80148e6:	ab03      	add	r3, sp, #12
 80148e8:	4805      	ldr	r0, [pc, #20]	@ (8014900 <fiprintf+0x20>)
 80148ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80148ee:	6800      	ldr	r0, [r0, #0]
 80148f0:	9301      	str	r3, [sp, #4]
 80148f2:	f7ff fe31 	bl	8014558 <_vfiprintf_r>
 80148f6:	b002      	add	sp, #8
 80148f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80148fc:	b003      	add	sp, #12
 80148fe:	4770      	bx	lr
 8014900:	2000018c 	.word	0x2000018c

08014904 <__swhatbuf_r>:
 8014904:	b570      	push	{r4, r5, r6, lr}
 8014906:	460c      	mov	r4, r1
 8014908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801490c:	2900      	cmp	r1, #0
 801490e:	b096      	sub	sp, #88	@ 0x58
 8014910:	4615      	mov	r5, r2
 8014912:	461e      	mov	r6, r3
 8014914:	da0d      	bge.n	8014932 <__swhatbuf_r+0x2e>
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801491c:	f04f 0100 	mov.w	r1, #0
 8014920:	bf14      	ite	ne
 8014922:	2340      	movne	r3, #64	@ 0x40
 8014924:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014928:	2000      	movs	r0, #0
 801492a:	6031      	str	r1, [r6, #0]
 801492c:	602b      	str	r3, [r5, #0]
 801492e:	b016      	add	sp, #88	@ 0x58
 8014930:	bd70      	pop	{r4, r5, r6, pc}
 8014932:	466a      	mov	r2, sp
 8014934:	f000 f862 	bl	80149fc <_fstat_r>
 8014938:	2800      	cmp	r0, #0
 801493a:	dbec      	blt.n	8014916 <__swhatbuf_r+0x12>
 801493c:	9901      	ldr	r1, [sp, #4]
 801493e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014942:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014946:	4259      	negs	r1, r3
 8014948:	4159      	adcs	r1, r3
 801494a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801494e:	e7eb      	b.n	8014928 <__swhatbuf_r+0x24>

08014950 <__smakebuf_r>:
 8014950:	898b      	ldrh	r3, [r1, #12]
 8014952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014954:	079d      	lsls	r5, r3, #30
 8014956:	4606      	mov	r6, r0
 8014958:	460c      	mov	r4, r1
 801495a:	d507      	bpl.n	801496c <__smakebuf_r+0x1c>
 801495c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014960:	6023      	str	r3, [r4, #0]
 8014962:	6123      	str	r3, [r4, #16]
 8014964:	2301      	movs	r3, #1
 8014966:	6163      	str	r3, [r4, #20]
 8014968:	b003      	add	sp, #12
 801496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801496c:	ab01      	add	r3, sp, #4
 801496e:	466a      	mov	r2, sp
 8014970:	f7ff ffc8 	bl	8014904 <__swhatbuf_r>
 8014974:	9f00      	ldr	r7, [sp, #0]
 8014976:	4605      	mov	r5, r0
 8014978:	4639      	mov	r1, r7
 801497a:	4630      	mov	r0, r6
 801497c:	f7fe ff16 	bl	80137ac <_malloc_r>
 8014980:	b948      	cbnz	r0, 8014996 <__smakebuf_r+0x46>
 8014982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014986:	059a      	lsls	r2, r3, #22
 8014988:	d4ee      	bmi.n	8014968 <__smakebuf_r+0x18>
 801498a:	f023 0303 	bic.w	r3, r3, #3
 801498e:	f043 0302 	orr.w	r3, r3, #2
 8014992:	81a3      	strh	r3, [r4, #12]
 8014994:	e7e2      	b.n	801495c <__smakebuf_r+0xc>
 8014996:	89a3      	ldrh	r3, [r4, #12]
 8014998:	6020      	str	r0, [r4, #0]
 801499a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801499e:	81a3      	strh	r3, [r4, #12]
 80149a0:	9b01      	ldr	r3, [sp, #4]
 80149a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80149a6:	b15b      	cbz	r3, 80149c0 <__smakebuf_r+0x70>
 80149a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149ac:	4630      	mov	r0, r6
 80149ae:	f000 f837 	bl	8014a20 <_isatty_r>
 80149b2:	b128      	cbz	r0, 80149c0 <__smakebuf_r+0x70>
 80149b4:	89a3      	ldrh	r3, [r4, #12]
 80149b6:	f023 0303 	bic.w	r3, r3, #3
 80149ba:	f043 0301 	orr.w	r3, r3, #1
 80149be:	81a3      	strh	r3, [r4, #12]
 80149c0:	89a3      	ldrh	r3, [r4, #12]
 80149c2:	431d      	orrs	r5, r3
 80149c4:	81a5      	strh	r5, [r4, #12]
 80149c6:	e7cf      	b.n	8014968 <__smakebuf_r+0x18>

080149c8 <memmove>:
 80149c8:	4288      	cmp	r0, r1
 80149ca:	b510      	push	{r4, lr}
 80149cc:	eb01 0402 	add.w	r4, r1, r2
 80149d0:	d902      	bls.n	80149d8 <memmove+0x10>
 80149d2:	4284      	cmp	r4, r0
 80149d4:	4623      	mov	r3, r4
 80149d6:	d807      	bhi.n	80149e8 <memmove+0x20>
 80149d8:	1e43      	subs	r3, r0, #1
 80149da:	42a1      	cmp	r1, r4
 80149dc:	d008      	beq.n	80149f0 <memmove+0x28>
 80149de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80149e6:	e7f8      	b.n	80149da <memmove+0x12>
 80149e8:	4402      	add	r2, r0
 80149ea:	4601      	mov	r1, r0
 80149ec:	428a      	cmp	r2, r1
 80149ee:	d100      	bne.n	80149f2 <memmove+0x2a>
 80149f0:	bd10      	pop	{r4, pc}
 80149f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80149f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80149fa:	e7f7      	b.n	80149ec <memmove+0x24>

080149fc <_fstat_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4d07      	ldr	r5, [pc, #28]	@ (8014a1c <_fstat_r+0x20>)
 8014a00:	2300      	movs	r3, #0
 8014a02:	4604      	mov	r4, r0
 8014a04:	4608      	mov	r0, r1
 8014a06:	4611      	mov	r1, r2
 8014a08:	602b      	str	r3, [r5, #0]
 8014a0a:	f7ef f899 	bl	8003b40 <_fstat>
 8014a0e:	1c43      	adds	r3, r0, #1
 8014a10:	d102      	bne.n	8014a18 <_fstat_r+0x1c>
 8014a12:	682b      	ldr	r3, [r5, #0]
 8014a14:	b103      	cbz	r3, 8014a18 <_fstat_r+0x1c>
 8014a16:	6023      	str	r3, [r4, #0]
 8014a18:	bd38      	pop	{r3, r4, r5, pc}
 8014a1a:	bf00      	nop
 8014a1c:	20009314 	.word	0x20009314

08014a20 <_isatty_r>:
 8014a20:	b538      	push	{r3, r4, r5, lr}
 8014a22:	4d06      	ldr	r5, [pc, #24]	@ (8014a3c <_isatty_r+0x1c>)
 8014a24:	2300      	movs	r3, #0
 8014a26:	4604      	mov	r4, r0
 8014a28:	4608      	mov	r0, r1
 8014a2a:	602b      	str	r3, [r5, #0]
 8014a2c:	f7ef f898 	bl	8003b60 <_isatty>
 8014a30:	1c43      	adds	r3, r0, #1
 8014a32:	d102      	bne.n	8014a3a <_isatty_r+0x1a>
 8014a34:	682b      	ldr	r3, [r5, #0]
 8014a36:	b103      	cbz	r3, 8014a3a <_isatty_r+0x1a>
 8014a38:	6023      	str	r3, [r4, #0]
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
 8014a3c:	20009314 	.word	0x20009314

08014a40 <_sbrk_r>:
 8014a40:	b538      	push	{r3, r4, r5, lr}
 8014a42:	4d06      	ldr	r5, [pc, #24]	@ (8014a5c <_sbrk_r+0x1c>)
 8014a44:	2300      	movs	r3, #0
 8014a46:	4604      	mov	r4, r0
 8014a48:	4608      	mov	r0, r1
 8014a4a:	602b      	str	r3, [r5, #0]
 8014a4c:	f7ef f8a0 	bl	8003b90 <_sbrk>
 8014a50:	1c43      	adds	r3, r0, #1
 8014a52:	d102      	bne.n	8014a5a <_sbrk_r+0x1a>
 8014a54:	682b      	ldr	r3, [r5, #0]
 8014a56:	b103      	cbz	r3, 8014a5a <_sbrk_r+0x1a>
 8014a58:	6023      	str	r3, [r4, #0]
 8014a5a:	bd38      	pop	{r3, r4, r5, pc}
 8014a5c:	20009314 	.word	0x20009314

08014a60 <abort>:
 8014a60:	b508      	push	{r3, lr}
 8014a62:	2006      	movs	r0, #6
 8014a64:	f000 f86e 	bl	8014b44 <raise>
 8014a68:	2001      	movs	r0, #1
 8014a6a:	f7ef f819 	bl	8003aa0 <_exit>

08014a6e <_calloc_r>:
 8014a6e:	b570      	push	{r4, r5, r6, lr}
 8014a70:	fba1 5402 	umull	r5, r4, r1, r2
 8014a74:	b934      	cbnz	r4, 8014a84 <_calloc_r+0x16>
 8014a76:	4629      	mov	r1, r5
 8014a78:	f7fe fe98 	bl	80137ac <_malloc_r>
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	b928      	cbnz	r0, 8014a8c <_calloc_r+0x1e>
 8014a80:	4630      	mov	r0, r6
 8014a82:	bd70      	pop	{r4, r5, r6, pc}
 8014a84:	220c      	movs	r2, #12
 8014a86:	6002      	str	r2, [r0, #0]
 8014a88:	2600      	movs	r6, #0
 8014a8a:	e7f9      	b.n	8014a80 <_calloc_r+0x12>
 8014a8c:	462a      	mov	r2, r5
 8014a8e:	4621      	mov	r1, r4
 8014a90:	f7fd faf0 	bl	8012074 <memset>
 8014a94:	e7f4      	b.n	8014a80 <_calloc_r+0x12>

08014a96 <_realloc_r>:
 8014a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a9a:	4607      	mov	r7, r0
 8014a9c:	4614      	mov	r4, r2
 8014a9e:	460d      	mov	r5, r1
 8014aa0:	b921      	cbnz	r1, 8014aac <_realloc_r+0x16>
 8014aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa6:	4611      	mov	r1, r2
 8014aa8:	f7fe be80 	b.w	80137ac <_malloc_r>
 8014aac:	b92a      	cbnz	r2, 8014aba <_realloc_r+0x24>
 8014aae:	f7fe facf 	bl	8013050 <_free_r>
 8014ab2:	4625      	mov	r5, r4
 8014ab4:	4628      	mov	r0, r5
 8014ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aba:	f000 f85f 	bl	8014b7c <_malloc_usable_size_r>
 8014abe:	4284      	cmp	r4, r0
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	d802      	bhi.n	8014aca <_realloc_r+0x34>
 8014ac4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ac8:	d8f4      	bhi.n	8014ab4 <_realloc_r+0x1e>
 8014aca:	4621      	mov	r1, r4
 8014acc:	4638      	mov	r0, r7
 8014ace:	f7fe fe6d 	bl	80137ac <_malloc_r>
 8014ad2:	4680      	mov	r8, r0
 8014ad4:	b908      	cbnz	r0, 8014ada <_realloc_r+0x44>
 8014ad6:	4645      	mov	r5, r8
 8014ad8:	e7ec      	b.n	8014ab4 <_realloc_r+0x1e>
 8014ada:	42b4      	cmp	r4, r6
 8014adc:	4622      	mov	r2, r4
 8014ade:	4629      	mov	r1, r5
 8014ae0:	bf28      	it	cs
 8014ae2:	4632      	movcs	r2, r6
 8014ae4:	f7fd fc1f 	bl	8012326 <memcpy>
 8014ae8:	4629      	mov	r1, r5
 8014aea:	4638      	mov	r0, r7
 8014aec:	f7fe fab0 	bl	8013050 <_free_r>
 8014af0:	e7f1      	b.n	8014ad6 <_realloc_r+0x40>

08014af2 <_raise_r>:
 8014af2:	291f      	cmp	r1, #31
 8014af4:	b538      	push	{r3, r4, r5, lr}
 8014af6:	4605      	mov	r5, r0
 8014af8:	460c      	mov	r4, r1
 8014afa:	d904      	bls.n	8014b06 <_raise_r+0x14>
 8014afc:	2316      	movs	r3, #22
 8014afe:	6003      	str	r3, [r0, #0]
 8014b00:	f04f 30ff 	mov.w	r0, #4294967295
 8014b04:	bd38      	pop	{r3, r4, r5, pc}
 8014b06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014b08:	b112      	cbz	r2, 8014b10 <_raise_r+0x1e>
 8014b0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b0e:	b94b      	cbnz	r3, 8014b24 <_raise_r+0x32>
 8014b10:	4628      	mov	r0, r5
 8014b12:	f000 f831 	bl	8014b78 <_getpid_r>
 8014b16:	4622      	mov	r2, r4
 8014b18:	4601      	mov	r1, r0
 8014b1a:	4628      	mov	r0, r5
 8014b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b20:	f000 b818 	b.w	8014b54 <_kill_r>
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d00a      	beq.n	8014b3e <_raise_r+0x4c>
 8014b28:	1c59      	adds	r1, r3, #1
 8014b2a:	d103      	bne.n	8014b34 <_raise_r+0x42>
 8014b2c:	2316      	movs	r3, #22
 8014b2e:	6003      	str	r3, [r0, #0]
 8014b30:	2001      	movs	r0, #1
 8014b32:	e7e7      	b.n	8014b04 <_raise_r+0x12>
 8014b34:	2100      	movs	r1, #0
 8014b36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	4798      	blx	r3
 8014b3e:	2000      	movs	r0, #0
 8014b40:	e7e0      	b.n	8014b04 <_raise_r+0x12>
	...

08014b44 <raise>:
 8014b44:	4b02      	ldr	r3, [pc, #8]	@ (8014b50 <raise+0xc>)
 8014b46:	4601      	mov	r1, r0
 8014b48:	6818      	ldr	r0, [r3, #0]
 8014b4a:	f7ff bfd2 	b.w	8014af2 <_raise_r>
 8014b4e:	bf00      	nop
 8014b50:	2000018c 	.word	0x2000018c

08014b54 <_kill_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4d07      	ldr	r5, [pc, #28]	@ (8014b74 <_kill_r+0x20>)
 8014b58:	2300      	movs	r3, #0
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	4608      	mov	r0, r1
 8014b5e:	4611      	mov	r1, r2
 8014b60:	602b      	str	r3, [r5, #0]
 8014b62:	f7ee ff8d 	bl	8003a80 <_kill>
 8014b66:	1c43      	adds	r3, r0, #1
 8014b68:	d102      	bne.n	8014b70 <_kill_r+0x1c>
 8014b6a:	682b      	ldr	r3, [r5, #0]
 8014b6c:	b103      	cbz	r3, 8014b70 <_kill_r+0x1c>
 8014b6e:	6023      	str	r3, [r4, #0]
 8014b70:	bd38      	pop	{r3, r4, r5, pc}
 8014b72:	bf00      	nop
 8014b74:	20009314 	.word	0x20009314

08014b78 <_getpid_r>:
 8014b78:	f7ee bf7a 	b.w	8003a70 <_getpid>

08014b7c <_malloc_usable_size_r>:
 8014b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b80:	1f18      	subs	r0, r3, #4
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	bfbc      	itt	lt
 8014b86:	580b      	ldrlt	r3, [r1, r0]
 8014b88:	18c0      	addlt	r0, r0, r3
 8014b8a:	4770      	bx	lr

08014b8c <_init>:
 8014b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b8e:	bf00      	nop
 8014b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b92:	bc08      	pop	{r3}
 8014b94:	469e      	mov	lr, r3
 8014b96:	4770      	bx	lr

08014b98 <_fini>:
 8014b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b9a:	bf00      	nop
 8014b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b9e:	bc08      	pop	{r3}
 8014ba0:	469e      	mov	lr, r3
 8014ba2:	4770      	bx	lr
