
LoRa+GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001752c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08017700  08017700  00018700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017f40  08017f40  0001931c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017f40  08017f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017f48  08017f48  0001931c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017f48  08017f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017f4c  08017f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08017f50  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  0801812c  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  080181cc  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000e214  20000320  0801826c  00019320  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000e534  0801826c  00019534  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001931c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e399  00000000  00000000  0001934c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000096ba  00000000  00000000  000576e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003260  00000000  00000000  00060da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000026bb  00000000  00000000  00064000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037d10  00000000  00000000  000666bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047a7e  00000000  00000000  0009e3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012c35f  00000000  00000000  000e5e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002121a8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e730  00000000  00000000  002121ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  0022091c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080176e4 	.word	0x080176e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	080176e4 	.word	0x080176e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001060:	b4b0      	push	{r4, r5, r7}
 8001062:	b08f      	sub	sp, #60	@ 0x3c
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001068:	f240 13b1 	movw	r3, #433	@ 0x1b1
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800106e:	2307      	movs	r3, #7
 8001070:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001074:	2307      	movs	r3, #7
 8001076:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8001080:	23ff      	movs	r3, #255	@ 0xff
 8001082:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800108c:	2308      	movs	r3, #8
 800108e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	461d      	mov	r5, r3
 8001094:	f107 040c 	add.w	r4, r7, #12
 8001098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	373c      	adds	r7, #60	@ 0x3c
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bcb0      	pop	{r4, r5, r7}
 80010b0:	4770      	bx	lr

080010b2 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80010bc:	2101      	movs	r1, #1
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f9ff 	bl	80014c2 <LoRa_read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	f023 0307 	bic.w	r3, r3, #7
 80010d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
 80010e0:	e03e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10c      	bne.n	8001102 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	61da      	str	r2, [r3, #28]
 8001100:	e02e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d10c      	bne.n	8001122 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800110c:	f023 0307 	bic.w	r3, r3, #7
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f043 0303 	orr.w	r3, r3, #3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	61da      	str	r2, [r3, #28]
 8001120:	e01e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d10c      	bne.n	8001142 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800112c:	f023 0307 	bic.w	r3, r3, #7
 8001130:	b25b      	sxtb	r3, r3
 8001132:	f043 0305 	orr.w	r3, r3, #5
 8001136:	b25b      	sxtb	r3, r3
 8001138:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	61da      	str	r2, [r3, #28]
 8001140:	e00e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b06      	cmp	r3, #6
 8001146:	d10b      	bne.n	8001160 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800114c:	f023 0307 	bic.w	r3, r3, #7
 8001150:	b25b      	sxtb	r3, r3
 8001152:	f043 0306 	orr.w	r3, r3, #6
 8001156:	b25b      	sxtb	r3, r3
 8001158:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2206      	movs	r2, #6
 800115e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	461a      	mov	r2, r3
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9c5 	bl	80014f6 <LoRa_write>
	//HAL_Delay(10);
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	889b      	ldrh	r3, [r3, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f006 f94c 	bl	800742c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6998      	ldr	r0, [r3, #24]
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	f00a fcff 	bl	800bba2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011a4:	bf00      	nop
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00b f9c6 	bl	800c53c <HAL_SPI_GetState>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d1f7      	bne.n	80011a6 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6998      	ldr	r0, [r3, #24]
 80011ba:	8b3a      	ldrh	r2, [r7, #24]
 80011bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	f00a fe64 	bl	800be8e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011c6:	bf00      	nop
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b f9b5 	bl	800c53c <HAL_SPI_GetState>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d1f7      	bne.n	80011c8 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	f006 f922 	bl	800742c <HAL_GPIO_WritePin>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	889b      	ldrh	r3, [r3, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f006 f90e 	bl	800742c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6998      	ldr	r0, [r3, #24]
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	f00a fcc1 	bl	800bba2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001220:	bf00      	nop
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4618      	mov	r0, r3
 8001228:	f00b f988 	bl	800c53c <HAL_SPI_GetState>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d1f7      	bne.n	8001222 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6998      	ldr	r0, [r3, #24]
 8001236:	8b3a      	ldrh	r2, [r7, #24]
 8001238:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	f00a fcb0 	bl	800bba2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001242:	bf00      	nop
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4618      	mov	r0, r3
 800124a:	f00b f977 	bl	800c53c <HAL_SPI_GetState>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d1f7      	bne.n	8001244 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	889b      	ldrh	r3, [r3, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	f006 f8e4 	bl	800742c <HAL_GPIO_WritePin>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001278:	2126      	movs	r1, #38	@ 0x26
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f921 	bl	80014c2 <LoRa_read>
 8001280:	4603      	mov	r3, r0
 8001282:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e003      	b.n	800129c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	f023 0308 	bic.w	r3, r3, #8
 800129a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	461a      	mov	r2, r3
 80012a0:	2126      	movs	r1, #38	@ 0x26
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f927 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f004 fb8b 	bl	80059c4 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b096      	sub	sp, #88	@ 0x58
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80012c0:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <LoRa_setAutoLDO+0x68>)
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4611      	mov	r1, r2
 80012c8:	2250      	movs	r2, #80	@ 0x50
 80012ca:	4618      	mov	r0, r3
 80012cc:	f013 fdd7 	bl	8014e7e <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012d6:	461a      	mov	r2, r3
 80012d8:	2301      	movs	r3, #1
 80012da:	4093      	lsls	r3, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f941 	bl	8000564 <__aeabi_i2d>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	3358      	adds	r3, #88	@ 0x58
 80012ec:	443b      	add	r3, r7
 80012ee:	3b50      	subs	r3, #80	@ 0x50
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff faca 	bl	800088c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc4a 	bl	8000b98 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	2b10      	cmp	r3, #16
 8001308:	bfcc      	ite	gt
 800130a:	2301      	movgt	r3, #1
 800130c:	2300      	movle	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffaa 	bl	800126c <LoRa_setLowDaraRateOptimization>
}
 8001318:	bf00      	nop
 800131a:	3758      	adds	r7, #88	@ 0x58
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08017700 	.word	0x08017700

08001324 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	04db      	lsls	r3, r3, #19
 8001332:	115b      	asrs	r3, r3, #5
 8001334:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	461a      	mov	r2, r3
 8001340:	2106      	movs	r1, #6
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f8d7 	bl	80014f6 <LoRa_write>
	HAL_Delay(5);
 8001348:	2005      	movs	r0, #5
 800134a:	f004 fb3b 	bl	80059c4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	461a      	mov	r2, r3
 8001358:	2107      	movs	r1, #7
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8cb 	bl	80014f6 <LoRa_write>
	HAL_Delay(5);
 8001360:	2005      	movs	r0, #5
 8001362:	f004 fb2f 	bl	80059c4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	461a      	mov	r2, r3
 800136e:	2108      	movs	r1, #8
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8c0 	bl	80014f6 <LoRa_write>
	HAL_Delay(5);
 8001376:	2005      	movs	r0, #5
 8001378:	f004 fb24 	bl	80059c4 <HAL_Delay>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	dd01      	ble.n	8001398 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001394:	230c      	movs	r3, #12
 8001396:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b06      	cmp	r3, #6
 800139c:	dc01      	bgt.n	80013a2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800139e:	2307      	movs	r3, #7
 80013a0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013a2:	211e      	movs	r1, #30
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f88c 	bl	80014c2 <LoRa_read>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f004 fb08 	bl	80059c4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	461a      	mov	r2, r3
 80013cc:	211e      	movs	r1, #30
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f891 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 80013d4:	200a      	movs	r0, #10
 80013d6:	f004 faf5 	bl	80059c4 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff6c 	bl	80012b8 <LoRa_setAutoLDO>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2109      	movs	r1, #9
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f87b 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 8001400:	200a      	movs	r0, #10
 8001402:	f004 fadf 	bl	80059c4 <HAL_Delay>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	2b2c      	cmp	r3, #44	@ 0x2c
 8001424:	d801      	bhi.n	800142a <LoRa_setOCP+0x1a>
		current = 45;
 8001426:	232d      	movs	r3, #45	@ 0x2d
 8001428:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2bf0      	cmp	r3, #240	@ 0xf0
 800142e:	d901      	bls.n	8001434 <LoRa_setOCP+0x24>
		current = 240;
 8001430:	23f0      	movs	r3, #240	@ 0xf0
 8001432:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b78      	cmp	r3, #120	@ 0x78
 8001438:	d809      	bhi.n	800144e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	3b2d      	subs	r3, #45	@ 0x2d
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <LoRa_setOCP+0x78>)
 8001440:	fb82 1203 	smull	r1, r2, r2, r3
 8001444:	1052      	asrs	r2, r2, #1
 8001446:	17db      	asrs	r3, r3, #31
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e00b      	b.n	8001466 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2bf0      	cmp	r3, #240	@ 0xf0
 8001452:	d808      	bhi.n	8001466 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	331e      	adds	r3, #30
 8001458:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <LoRa_setOCP+0x78>)
 800145a:	fb82 1203 	smull	r1, r2, r2, r3
 800145e:	1092      	asrs	r2, r2, #2
 8001460:	17db      	asrs	r3, r3, #31
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3320      	adds	r3, #32
 800146a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	461a      	mov	r2, r3
 8001470:	210b      	movs	r1, #11
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f83f 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 8001478:	200a      	movs	r0, #10
 800147a:	f004 faa3 	bl	80059c4 <HAL_Delay>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	66666667 	.word	0x66666667

0800148c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001494:	211e      	movs	r1, #30
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f813 	bl	80014c2 <LoRa_read>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f043 0307 	orr.w	r3, r3, #7
 80014a6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	461a      	mov	r2, r3
 80014ac:	211e      	movs	r1, #30
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f821 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f004 fa85 	bl	80059c4 <HAL_Delay>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014d8:	f107 030f 	add.w	r3, r7, #15
 80014dc:	f107 010e 	add.w	r1, r7, #14
 80014e0:	2201      	movs	r2, #1
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe44 	bl	8001174 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001510:	78bb      	ldrb	r3, [r7, #2]
 8001512:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001514:	f107 030f 	add.w	r3, r7, #15
 8001518:	f107 010e 	add.w	r1, r7, #14
 800151c:	2201      	movs	r2, #1
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fe64 	bl	80011f0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	72fb      	strb	r3, [r7, #11]
 8001540:	4613      	mov	r3, r2
 8001542:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800154a:	b2db      	uxtb	r3, r3
 800154c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	889b      	ldrh	r3, [r3, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	f005 ff67 	bl	800742c <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6998      	ldr	r0, [r3, #24]
 8001562:	f107 0117 	add.w	r1, r7, #23
 8001566:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800156a:	2201      	movs	r2, #1
 800156c:	f00a fb19 	bl	800bba2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001570:	bf00      	nop
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4618      	mov	r0, r3
 8001578:	f00a ffe0 	bl	800c53c <HAL_SPI_GetState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1f7      	bne.n	8001572 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6998      	ldr	r0, [r3, #24]
 8001586:	7abb      	ldrb	r3, [r7, #10]
 8001588:	b29a      	uxth	r2, r3
 800158a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f00a fb07 	bl	800bba2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001594:	bf00      	nop
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4618      	mov	r0, r3
 800159c:	f00a ffce 	bl	800c53c <HAL_SPI_GetState>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d1f7      	bne.n	8001596 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	889b      	ldrh	r3, [r3, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4619      	mov	r1, r3
 80015b2:	f005 ff3b 	bl	800742c <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]

	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	460b      	mov	r3, r1
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015f0:	2101      	movs	r1, #1
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fd5d 	bl	80010b2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80015f8:	210e      	movs	r1, #14
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff ff61 	bl	80014c2 <LoRa_read>
 8001600:	4603      	mov	r3, r0
 8001602:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	461a      	mov	r2, r3
 8001608:	210d      	movs	r1, #13
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff ff73 	bl	80014f6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	461a      	mov	r2, r3
 8001614:	2122      	movs	r1, #34	@ 0x22
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ff6d 	bl	80014f6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	2100      	movs	r1, #0
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff84 	bl	8001530 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001628:	2103      	movs	r1, #3
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fd41 	bl	80010b2 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001630:	2112      	movs	r1, #18
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff ff45 	bl	80014c2 <LoRa_read>
 8001638:	4603      	mov	r3, r0
 800163a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001646:	22ff      	movs	r2, #255	@ 0xff
 8001648:	2112      	movs	r1, #18
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff ff53 	bl	80014f6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001650:	6979      	ldr	r1, [r7, #20]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fd2d 	bl	80010b2 <LoRa_gotoMode>
			return 1;
 8001658:	2301      	movs	r3, #1
 800165a:	e00f      	b.n	800167c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800165c:	88bb      	ldrh	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	80bb      	strh	r3, [r7, #4]
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001668:	6979      	ldr	r1, [r7, #20]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fd21 	bl	80010b2 <LoRa_gotoMode>
				return 0;
 8001670:	2300      	movs	r3, #0
 8001672:	e003      	b.n	800167c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f004 f9a5 	bl	80059c4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800167a:	e7d9      	b.n	8001630 <LoRa_transmit+0x5c>
	}
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff96 	bl	80015be <LoRa_isvalid>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8096 	beq.w	80017c6 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800169a:	2100      	movs	r1, #0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fd08 	bl	80010b2 <LoRa_gotoMode>
			HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f004 f98e 	bl	80059c4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff09 	bl	80014c2 <LoRa_read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f004 f985 	bl	80059c4 <HAL_Delay>
			data = read | 0x80;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016c0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	461a      	mov	r2, r3
 80016c6:	2101      	movs	r1, #1
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff14 	bl	80014f6 <LoRa_write>
			HAL_Delay(100);
 80016ce:	2064      	movs	r0, #100	@ 0x64
 80016d0:	f004 f978 	bl	80059c4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fe22 	bl	8001324 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fe7d 	bl	80013e8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fe8a 	bl	8001410 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016fc:	2223      	movs	r2, #35	@ 0x23
 80016fe:	210c      	movs	r1, #12
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fef8 	bl	80014f6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fec0 	bl	800148c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe35 	bl	8001384 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800171a:	22ff      	movs	r2, #255	@ 0xff
 800171c:	211f      	movs	r1, #31
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fee9 	bl	80014f6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	461a      	mov	r2, r3
 8001744:	211d      	movs	r1, #29
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fed5 	bl	80014f6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fdb3 	bl	80012b8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	b29b      	uxth	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	2120      	movs	r1, #32
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fec8 	bl	80014f6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	2121      	movs	r1, #33	@ 0x21
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fec0 	bl	80014f6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001776:	2140      	movs	r1, #64	@ 0x40
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fea2 	bl	80014c2 <LoRa_read>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001788:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	461a      	mov	r2, r3
 800178e:	2140      	movs	r1, #64	@ 0x40
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff feb0 	bl	80014f6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001796:	2101      	movs	r1, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc8a 	bl	80010b2 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f004 f90d 	bl	80059c4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017aa:	2142      	movs	r1, #66	@ 0x42
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe88 	bl	80014c2 <LoRa_read>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d101      	bne.n	80017c0 <LoRa_init+0x13c>
				return LORA_OK;
 80017bc:	23c8      	movs	r3, #200	@ 0xc8
 80017be:	e004      	b.n	80017ca <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80017c0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80017c4:	e001      	b.n	80017ca <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80017c6:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <MX_ADC3_Init+0x98>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <MX_ADC3_Init+0x9c>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	@ (800186c <MX_ADC3_Init+0x98>)
 80017ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <MX_ADC3_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <MX_ADC3_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <MX_ADC3_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	@ (800186c <MX_ADC3_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b17      	ldr	r3, [pc, #92]	@ (800186c <MX_ADC3_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <MX_ADC3_Init+0x98>)
 8001816:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <MX_ADC3_Init+0xa0>)
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_ADC3_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_ADC3_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_ADC3_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_ADC3_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	@ (800186c <MX_ADC3_Init+0x98>)
 8001836:	f004 f8e9 	bl	8005a0c <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001840:	f002 fd66 	bl	8004310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001844:	2304      	movs	r3, #4
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_ADC3_Init+0x98>)
 8001856:	f004 f91d 	bl	8005a94 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001860:	f002 fd56 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000033c 	.word	0x2000033c
 8001870:	40012200 	.word	0x40012200
 8001874:	0f000001 	.word	0x0f000001

08001878 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a15      	ldr	r2, [pc, #84]	@ (80018ec <HAL_ADC_MspInit+0x74>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d123      	bne.n	80018e2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin;
 80018ca:	23c0      	movs	r3, #192	@ 0xc0
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <HAL_ADC_MspInit+0x7c>)
 80018de:	f005 fbe1 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	@ 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012200 	.word	0x40012200
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021400 	.word	0x40021400

080018f8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <MX_CRC_Init+0x3c>)
 80018fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <MX_CRC_Init+0x40>)
 8001900:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001904:	2200      	movs	r2, #0
 8001906:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <MX_CRC_Init+0x3c>)
 800190a:	2200      	movs	r2, #0
 800190c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_CRC_Init+0x3c>)
 800191c:	2201      	movs	r2, #1
 800191e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001922:	f004 fbed 	bl	8006100 <HAL_CRC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800192c:	f002 fcf0 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000384 	.word	0x20000384
 8001938:	40023000 	.word	0x40023000

0800193c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_CRC_MspInit+0x38>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10b      	bne.n	8001966 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_CRC_MspInit+0x3c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_CRC_MspInit+0x3c>)
 8001954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <HAL_CRC_MspInit+0x3c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023000 	.word	0x40023000
 8001978:	40023800 	.word	0x40023800

0800197c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_DCMI_Init+0x60>)
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <MX_DCMI_Init+0x64>)
 8001984:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_DCMI_Init+0x60>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_DCMI_Init+0x60>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <MX_DCMI_Init+0x60>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001998:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <MX_DCMI_Init+0x60>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019be:	2200      	movs	r2, #0
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019ca:	f004 fc8b 	bl	80062e4 <HAL_DCMI_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80019d4:	f002 fc9c 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200003a8 	.word	0x200003a8
 80019e0:	50050000 	.word	0x50050000

080019e4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	@ 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a50      	ldr	r2, [pc, #320]	@ (8001b44 <HAL_DCMI_MspInit+0x160>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f040 809a 	bne.w	8001b3c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001a08:	4b4f      	ldr	r3, [pc, #316]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6353      	str	r3, [r2, #52]	@ 0x34
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a20:	4b49      	ldr	r3, [pc, #292]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	4a48      	ldr	r2, [pc, #288]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2c:	4b46      	ldr	r3, [pc, #280]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	4a42      	ldr	r2, [pc, #264]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a44:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a50:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a3c      	ldr	r2, [pc, #240]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a68:	4b37      	ldr	r3, [pc, #220]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a74:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	4a30      	ldr	r2, [pc, #192]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001a98:	2360      	movs	r3, #96	@ 0x60
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001aa8:	230d      	movs	r3, #13
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4826      	ldr	r0, [pc, #152]	@ (8001b4c <HAL_DCMI_MspInit+0x168>)
 8001ab4:	f005 faf6 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ac8:	230d      	movs	r3, #13
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481f      	ldr	r0, [pc, #124]	@ (8001b50 <HAL_DCMI_MspInit+0x16c>)
 8001ad4:	f005 fae6 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001aea:	230d      	movs	r3, #13
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4817      	ldr	r0, [pc, #92]	@ (8001b54 <HAL_DCMI_MspInit+0x170>)
 8001af6:	f005 fad5 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001afa:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b0c:	230d      	movs	r3, #13
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4810      	ldr	r0, [pc, #64]	@ (8001b58 <HAL_DCMI_MspInit+0x174>)
 8001b18:	f005 fac4 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001b1c:	2350      	movs	r3, #80	@ 0x50
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <HAL_DCMI_MspInit+0x178>)
 8001b38:	f005 fab4 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3738      	adds	r7, #56	@ 0x38
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	50050000 	.word	0x50050000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021800 	.word	0x40021800
 8001b58:	40021c00 	.word	0x40021c00
 8001b5c:	40020000 	.word	0x40020000

08001b60 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <MX_DMA2D_Init+0x60>)
 8001b68:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b96:	f004 fd4b 	bl	8006630 <HAL_DMA2D_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001ba0:	f002 fbb6 	bl	8004310 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001ba8:	f004 fe9c 	bl	80068e4 <HAL_DMA2D_ConfigLayer>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001bb2:	f002 fbad 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003f8 	.word	0x200003f8
 8001bc0:	4002b000 	.word	0x4002b000

08001bc4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_DMA2D_MspInit+0x44>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d113      	bne.n	8001bfe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001bdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	205a      	movs	r0, #90	@ 0x5a
 8001bf4:	f004 fa5a 	bl	80060ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bf8:	205a      	movs	r0, #90	@ 0x5a
 8001bfa:	f004 fa73 	bl	80060e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	4002b000 	.word	0x4002b000
 8001c0c:	40023800 	.word	0x40023800

08001c10 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c16:	4a20      	ldr	r2, [pc, #128]	@ (8001c98 <MX_ETH_Init+0x88>)
 8001c18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c22:	2280      	movs	r2, #128	@ 0x80
 8001c24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c28:	22e1      	movs	r2, #225	@ 0xe1
 8001c2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c40:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c4a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <MX_ETH_Init+0x90>)
 8001c50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <MX_ETH_Init+0x94>)
 8001c56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c5a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001c5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c62:	f004 fed1 	bl	8006a08 <HAL_ETH_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f002 fb50 	bl	8004310 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001c70:	2238      	movs	r2, #56	@ 0x38
 8001c72:	2100      	movs	r1, #0
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c76:	f012 ffa9 	bl	8014bcc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c7c:	2221      	movs	r2, #33	@ 0x21
 8001c7e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c82:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001c86:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000470 	.word	0x20000470
 8001c98:	40028000 	.word	0x40028000
 8001c9c:	20000520 	.word	0x20000520
 8001ca0:	2000027c 	.word	0x2000027c
 8001ca4:	200001dc 	.word	0x200001dc
 8001ca8:	20000438 	.word	0x20000438

08001cac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc8 <HAL_ETH_MspInit+0x11c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d178      	bne.n	8001dc0 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cce:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a38      	ldr	r2, [pc, #224]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d16:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a20      	ldr	r2, [pc, #128]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001d5e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d70:	230b      	movs	r3, #11
 8001d72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4815      	ldr	r0, [pc, #84]	@ (8001dd0 <HAL_ETH_MspInit+0x124>)
 8001d7c:	f005 f992 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d80:	2332      	movs	r3, #50	@ 0x32
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d90:	230b      	movs	r3, #11
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480e      	ldr	r0, [pc, #56]	@ (8001dd4 <HAL_ETH_MspInit+0x128>)
 8001d9c:	f005 f982 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001da0:	2386      	movs	r3, #134	@ 0x86
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db0:	230b      	movs	r3, #11
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4807      	ldr	r0, [pc, #28]	@ (8001dd8 <HAL_ETH_MspInit+0x12c>)
 8001dbc:	f005 f972 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3738      	adds	r7, #56	@ 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40028000 	.word	0x40028000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001df6:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <MX_FMC_Init+0x9c>)
 8001df8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e08:	2204      	movs	r2, #4
 8001e0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e0e:	2210      	movs	r2, #16
 8001e10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001e40:	2307      	movs	r3, #7
 8001e42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001e44:	2304      	movs	r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e5e:	f009 fd64 	bl	800b92a <HAL_SDRAM_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001e68:	f002 fa52 	bl	8004310 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000528 	.word	0x20000528
 8001e78:	a0000140 	.word	0xa0000140

08001e7c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <HAL_FMC_MspInit+0x100>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d16d      	bne.n	8001f74 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001e98:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_FMC_MspInit+0x100>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_FMC_MspInit+0x104>)
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea2:	4a37      	ldr	r2, [pc, #220]	@ (8001f80 <HAL_FMC_MspInit+0x104>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_FMC_MspInit+0x104>)
 8001eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001eb6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001eba:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec8:	230c      	movs	r3, #12
 8001eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	482c      	ldr	r0, [pc, #176]	@ (8001f84 <HAL_FMC_MspInit+0x108>)
 8001ed2:	f005 f8e7 	bl	80070a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001ed6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001eda:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4825      	ldr	r0, [pc, #148]	@ (8001f88 <HAL_FMC_MspInit+0x10c>)
 8001ef2:	f005 f8d7 	bl	80070a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001ef6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001efa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <HAL_FMC_MspInit+0x110>)
 8001f12:	f005 f8c7 	bl	80070a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001f16:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001f1a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4817      	ldr	r0, [pc, #92]	@ (8001f90 <HAL_FMC_MspInit+0x114>)
 8001f32:	f005 f8b7 	bl	80070a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001f36:	2328      	movs	r3, #40	@ 0x28
 8001f38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f46:	230c      	movs	r3, #12
 8001f48:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <HAL_FMC_MspInit+0x118>)
 8001f50:	f005 f8a8 	bl	80070a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001f54:	2308      	movs	r3, #8
 8001f56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f64:	230c      	movs	r3, #12
 8001f66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480a      	ldr	r0, [pc, #40]	@ (8001f98 <HAL_FMC_MspInit+0x11c>)
 8001f6e:	f005 f899 	bl	80070a4 <HAL_GPIO_Init>
 8001f72:	e000      	b.n	8001f76 <HAL_FMC_MspInit+0xfa>
    return;
 8001f74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000055c 	.word	0x2000055c
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021c00 	.word	0x40021c00
 8001f98:	40020800 	.word	0x40020800

08001f9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fa4:	f7ff ff6a 	bl	8001e7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <stm32_i2c_read>:
/* TDK Driver Instance */
static inv_imu_device_t imu_dev;

/* I2C read/write/delay hooks */

static int stm32_i2c_read(uint8_t reg, uint8_t *buf, uint32_t len) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af04      	add	r7, sp, #16
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	73fb      	strb	r3, [r7, #15]
	return (HAL_I2C_Mem_Read(&hi2c1, (0x68 << 1), reg, I2C_MEMADD_SIZE_8BIT,
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fca:	9102      	str	r1, [sp, #8]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	21d0      	movs	r1, #208	@ 0xd0
 8001fd6:	4807      	ldr	r0, [pc, #28]	@ (8001ff4 <stm32_i2c_read+0x44>)
 8001fd8:	f005 fbf2 	bl	80077c0 <HAL_I2C_Mem_Read>
 8001fdc:	4603      	mov	r3, r0
			buf, len, HAL_MAX_DELAY) == HAL_OK) ? 0 : -1;
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <stm32_i2c_read+0x36>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e001      	b.n	8001fea <stm32_i2c_read+0x3a>
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20005b5c 	.word	0x20005b5c

08001ff8 <stm32_i2c_write>:

static int stm32_i2c_write(uint8_t reg, const uint8_t *buf, uint32_t len) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af04      	add	r7, sp, #16
 8001ffe:	4603      	mov	r3, r0
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	73fb      	strb	r3, [r7, #15]
	return (HAL_I2C_Mem_Write(&hi2c1, (0x68 << 1), reg, I2C_MEMADD_SIZE_8BIT,
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	b29a      	uxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	b29b      	uxth	r3, r3
 800200e:	f04f 31ff 	mov.w	r1, #4294967295
 8002012:	9102      	str	r1, [sp, #8]
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2301      	movs	r3, #1
 800201c:	21d0      	movs	r1, #208	@ 0xd0
 800201e:	4807      	ldr	r0, [pc, #28]	@ (800203c <stm32_i2c_write+0x44>)
 8002020:	f005 faba 	bl	8007598 <HAL_I2C_Mem_Write>
 8002024:	4603      	mov	r3, r0
			(uint8_t*) buf, len, HAL_MAX_DELAY) == HAL_OK) ? 0 : -1;
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <stm32_i2c_write+0x36>
 800202a:	2300      	movs	r3, #0
 800202c:	e001      	b.n	8002032 <stm32_i2c_write+0x3a>
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20005b5c 	.word	0x20005b5c

08002040 <stm32_delay_us>:

static void stm32_delay_us(uint32_t us) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if (!(DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk)) {
 8002048:	4b10      	ldr	r3, [pc, #64]	@ (800208c <stm32_delay_us+0x4c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d016      	beq.n	8002082 <stm32_delay_us+0x42>
		// DWT not enabled
		return;
	}

	uint32_t start = DWT->CYCCNT;
 8002054:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <stm32_delay_us+0x4c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	60fb      	str	r3, [r7, #12]
	uint32_t cycles = us * (HAL_RCC_GetHCLKFreq() / 1000000U);
 800205a:	f007 f8af 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 800205e:	4603      	mov	r3, r0
 8002060:	4a0b      	ldr	r2, [pc, #44]	@ (8002090 <stm32_delay_us+0x50>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9a      	lsrs	r2, r3, #18
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60bb      	str	r3, [r7, #8]
	while ((DWT->CYCCNT - start) < cycles)
 8002070:	bf00      	nop
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <stm32_delay_us+0x4c>)
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f8      	bhi.n	8002072 <stm32_delay_us+0x32>
 8002080:	e000      	b.n	8002084 <stm32_delay_us+0x44>
		return;
 8002082:	bf00      	nop
		;
}
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e0001000 	.word	0xe0001000
 8002090:	431bde83 	.word	0x431bde83

08002094 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void) {
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void) {
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80020d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <vApplicationGetIdleTaskMemory+0x30>)
 80020de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	@ 0x80
 80020e4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20005778 	.word	0x20005778
 80020f8:	2000581c 	.word	0x2000581c

080020fc <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b09e      	sub	sp, #120	@ 0x78
 8002100:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* definition and creation of printf_mutex */
	osMutexStaticDef(printf_mutex, &printf_mutexControlBlock);
 8002102:	2300      	movs	r3, #0
 8002104:	673b      	str	r3, [r7, #112]	@ 0x70
 8002106:	4b37      	ldr	r3, [pc, #220]	@ (80021e4 <MX_FREERTOS_Init+0xe8>)
 8002108:	677b      	str	r3, [r7, #116]	@ 0x74
	printf_mutexHandle = osMutexCreate(osMutex(printf_mutex));
 800210a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800210e:	4618      	mov	r0, r3
 8002110:	f00e f9a6 	bl	8010460 <osMutexCreate>
 8002114:	4603      	mov	r3, r0
 8002116:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <MX_FREERTOS_Init+0xec>)
 8002118:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024,
 800211a:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <MX_FREERTOS_Init+0xf0>)
 800211c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002120:	461d      	mov	r5, r3
 8002122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002126:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800212a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			defaultTaskBuffer, &defaultTaskControlBlock);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800212e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f00e f933 	bl	80103a0 <osThreadCreate>
 800213a:	4603      	mov	r3, r0
 800213c:	4a2c      	ldr	r2, [pc, #176]	@ (80021f0 <MX_FREERTOS_Init+0xf4>)
 800213e:	6013      	str	r3, [r2, #0]

	/* definition and creation of LoRa_init */
	osThreadStaticDef(LoRa_init, LoRa_init_Task, osPriorityHigh, 0, 4096,
 8002140:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <MX_FREERTOS_Init+0xf8>)
 8002142:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002146:	461d      	mov	r5, r3
 8002148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			LoRa_initBuffer, &LoRa_initControlBlock);
	LoRa_initHandle = osThreadCreate(osThread(LoRa_init), NULL);
 8002154:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f00e f920 	bl	80103a0 <osThreadCreate>
 8002160:	4603      	mov	r3, r0
 8002162:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <MX_FREERTOS_Init+0xfc>)
 8002164:	6013      	str	r3, [r2, #0]

	/* definition and creation of Gyro_Init */
	osThreadDef(Gyro_Init, StartTask03, osPriorityIdle, 0, 4096);
 8002166:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <MX_FREERTOS_Init+0x100>)
 8002168:	f107 041c 	add.w	r4, r7, #28
 800216c:	461d      	mov	r5, r3
 800216e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002172:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Gyro_InitHandle = osThreadCreate(osThread(Gyro_Init), NULL);
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f00e f90d 	bl	80103a0 <osThreadCreate>
 8002186:	4603      	mov	r3, r0
 8002188:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <MX_FREERTOS_Init+0x104>)
 800218a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	if (LoRa_initHandle == NULL) {
 800218c:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <MX_FREERTOS_Init+0xfc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <MX_FREERTOS_Init+0xa0>
		printf("LoRa creation FAILED\r\n");
 8002194:	481b      	ldr	r0, [pc, #108]	@ (8002204 <MX_FREERTOS_Init+0x108>)
 8002196:	f012 fc03 	bl	80149a0 <puts>
 800219a:	e002      	b.n	80021a2 <MX_FREERTOS_Init+0xa6>
	} else {
		printf("LoRa created OK\r\n");
 800219c:	481a      	ldr	r0, [pc, #104]	@ (8002208 <MX_FREERTOS_Init+0x10c>)
 800219e:	f012 fbff 	bl	80149a0 <puts>
	}

	osThreadDef(gpsTask, L76_Task, osPriorityHigh, 0, 2048);
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <MX_FREERTOS_Init+0x110>)
 80021a4:	463c      	mov	r4, r7
 80021a6:	461d      	mov	r5, r3
 80021a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gpsTaskHandle = osThreadCreate(osThread(gpsTask), &huart6);
 80021b4:	463b      	mov	r3, r7
 80021b6:	4916      	ldr	r1, [pc, #88]	@ (8002210 <MX_FREERTOS_Init+0x114>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f00e f8f1 	bl	80103a0 <osThreadCreate>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a14      	ldr	r2, [pc, #80]	@ (8002214 <MX_FREERTOS_Init+0x118>)
 80021c2:	6013      	str	r3, [r2, #0]
	if (gpsTaskHandle == NULL) {
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <MX_FREERTOS_Init+0x118>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d103      	bne.n	80021d4 <MX_FREERTOS_Init+0xd8>
		printf("gpsTask creation FAILED\r\n");
 80021cc:	4812      	ldr	r0, [pc, #72]	@ (8002218 <MX_FREERTOS_Init+0x11c>)
 80021ce:	f012 fbe7 	bl	80149a0 <puts>
		printf("gpsTask created OK\r\n");
	}

	/* USER CODE END RTOS_THREADS */

}
 80021d2:	e002      	b.n	80021da <MX_FREERTOS_Init+0xde>
		printf("gpsTask created OK\r\n");
 80021d4:	4811      	ldr	r0, [pc, #68]	@ (800221c <MX_FREERTOS_Init+0x120>)
 80021d6:	f012 fbe3 	bl	80149a0 <puts>
}
 80021da:	bf00      	nop
 80021dc:	3778      	adds	r7, #120	@ 0x78
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20005730 	.word	0x20005730
 80021e8:	2000572c 	.word	0x2000572c
 80021ec:	080177b8 	.word	0x080177b8
 80021f0:	200005d8 	.word	0x200005d8
 80021f4:	080177e0 	.word	0x080177e0
 80021f8:	20001680 	.word	0x20001680
 80021fc:	08017808 	.word	0x08017808
 8002200:	20005728 	.word	0x20005728
 8002204:	08017750 	.word	0x08017750
 8002208:	08017768 	.word	0x08017768
 800220c:	0801782c 	.word	0x0801782c
 8002210:	200061f8 	.word	0x200061f8
 8002214:	200005d4 	.word	0x200005d4
 8002218:	0801777c 	.word	0x0801777c
 800221c:	08017798 	.word	0x08017798

08002220 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {

		osDelay(2000);
 8002228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800222c:	f00e f904 	bl	8010438 <osDelay>
 8002230:	e7fa      	b.n	8002228 <StartDefaultTask+0x8>
	...

08002234 <LoRa_init_Task>:
 * @brief Function implementing the LoRa_init thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LoRa_init_Task */
void LoRa_init_Task(void const *argument) {
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	b0db      	sub	sp, #364	@ 0x16c
 800223a:	af10      	add	r7, sp, #64	@ 0x40
 800223c:	6578      	str	r0, [r7, #84]	@ 0x54
	/* USER CODE BEGIN LoRa_init_Task */
	inv_imu_sensor_data_t data;
	L76_GPS_Data_t gps;
	uint8_t whoami = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	uint32_t counter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	char lora_buf[128];

	osDelay(500);
 800224a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800224e:	f00e f8f3 	bl	8010438 <osDelay>
	printf("Init ICM45605...\r\n");
 8002252:	4888      	ldr	r0, [pc, #544]	@ (8002474 <LoRa_init_Task+0x240>)
 8002254:	f012 fba4 	bl	80149a0 <puts>

	imu_dev.transport.read_reg = stm32_i2c_read;
 8002258:	4b87      	ldr	r3, [pc, #540]	@ (8002478 <LoRa_init_Task+0x244>)
 800225a:	4a88      	ldr	r2, [pc, #544]	@ (800247c <LoRa_init_Task+0x248>)
 800225c:	601a      	str	r2, [r3, #0]
	imu_dev.transport.write_reg = stm32_i2c_write;
 800225e:	4b86      	ldr	r3, [pc, #536]	@ (8002478 <LoRa_init_Task+0x244>)
 8002260:	4a87      	ldr	r2, [pc, #540]	@ (8002480 <LoRa_init_Task+0x24c>)
 8002262:	605a      	str	r2, [r3, #4]
	imu_dev.transport.sleep_us = stm32_delay_us;
 8002264:	4b84      	ldr	r3, [pc, #528]	@ (8002478 <LoRa_init_Task+0x244>)
 8002266:	4a87      	ldr	r2, [pc, #540]	@ (8002484 <LoRa_init_Task+0x250>)
 8002268:	60da      	str	r2, [r3, #12]
	imu_dev.transport.serif_type = UI_I2C;
 800226a:	4b83      	ldr	r3, [pc, #524]	@ (8002478 <LoRa_init_Task+0x244>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]

	if (inv_imu_get_who_am_i(&imu_dev, &whoami) != 0 || whoami != 0xE5) {
 8002270:	f107 03df 	add.w	r3, r7, #223	@ 0xdf
 8002274:	4619      	mov	r1, r3
 8002276:	4880      	ldr	r0, [pc, #512]	@ (8002478 <LoRa_init_Task+0x244>)
 8002278:	f001 fa0e 	bl	8003698 <inv_imu_get_who_am_i>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <LoRa_init_Task+0x56>
 8002282:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002286:	2be5      	cmp	r3, #229	@ 0xe5
 8002288:	d005      	beq.n	8002296 <LoRa_init_Task+0x62>
		printf("WHO_AM_I FAIL: 0x%02X\r\n", whoami);
 800228a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800228e:	4619      	mov	r1, r3
 8002290:	487d      	ldr	r0, [pc, #500]	@ (8002488 <LoRa_init_Task+0x254>)
 8002292:	f012 fb1d 	bl	80148d0 <iprintf>
		//osThreadExit();
	}
	printf("WHO_AM_I: 0x%02X OK\r\n", whoami);
 8002296:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800229a:	4619      	mov	r1, r3
 800229c:	487b      	ldr	r0, [pc, #492]	@ (800248c <LoRa_init_Task+0x258>)
 800229e:	f012 fb17 	bl	80148d0 <iprintf>

	inv_imu_soft_reset(&imu_dev);
 80022a2:	4875      	ldr	r0, [pc, #468]	@ (8002478 <LoRa_init_Task+0x244>)
 80022a4:	f001 f997 	bl	80035d6 <inv_imu_soft_reset>
	inv_imu_set_accel_mode(&imu_dev, PWR_MGMT0_ACCEL_MODE_LN);
 80022a8:	2103      	movs	r1, #3
 80022aa:	4873      	ldr	r0, [pc, #460]	@ (8002478 <LoRa_init_Task+0x244>)
 80022ac:	f001 fa13 	bl	80036d6 <inv_imu_set_accel_mode>
	inv_imu_set_gyro_mode(&imu_dev, PWR_MGMT0_GYRO_MODE_LN);
 80022b0:	2103      	movs	r1, #3
 80022b2:	4871      	ldr	r0, [pc, #452]	@ (8002478 <LoRa_init_Task+0x244>)
 80022b4:	f001 fa41 	bl	800373a <inv_imu_set_gyro_mode>
	inv_imu_set_accel_frequency(&imu_dev, ACCEL_CONFIG0_ACCEL_ODR_200_HZ);
 80022b8:	2108      	movs	r1, #8
 80022ba:	486f      	ldr	r0, [pc, #444]	@ (8002478 <LoRa_init_Task+0x244>)
 80022bc:	f001 fa6f 	bl	800379e <inv_imu_set_accel_frequency>
	inv_imu_set_gyro_frequency(&imu_dev, GYRO_CONFIG0_GYRO_ODR_200_HZ);
 80022c0:	2108      	movs	r1, #8
 80022c2:	486d      	ldr	r0, [pc, #436]	@ (8002478 <LoRa_init_Task+0x244>)
 80022c4:	f001 fa96 	bl	80037f4 <inv_imu_set_gyro_frequency>
	inv_imu_set_accel_fsr(&imu_dev, ACCEL_CONFIG0_ACCEL_UI_FS_SEL_16_G);
 80022c8:	2101      	movs	r1, #1
 80022ca:	486b      	ldr	r0, [pc, #428]	@ (8002478 <LoRa_init_Task+0x244>)
 80022cc:	f001 fabd 	bl	800384a <inv_imu_set_accel_fsr>
	inv_imu_set_gyro_fsr(&imu_dev, GYRO_CONFIG0_GYRO_UI_FS_SEL_2000_DPS);
 80022d0:	2101      	movs	r1, #1
 80022d2:	4869      	ldr	r0, [pc, #420]	@ (8002478 <LoRa_init_Task+0x244>)
 80022d4:	f001 fae4 	bl	80038a0 <inv_imu_set_gyro_fsr>
	printf("ICM45605 OK\r\n");
 80022d8:	486d      	ldr	r0, [pc, #436]	@ (8002490 <LoRa_init_Task+0x25c>)
 80022da:	f012 fb61 	bl	80149a0 <puts>

	myLoRa = newLoRa();
 80022de:	4c6d      	ldr	r4, [pc, #436]	@ (8002494 <LoRa_init_Task+0x260>)
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe febb 	bl	8001060 <newLoRa>
 80022ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80022ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022f2:	461d      	mov	r5, r3
 80022f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myLoRa.CS_port = GPIOI;
 8002304:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <LoRa_init_Task+0x260>)
 8002306:	4a64      	ldr	r2, [pc, #400]	@ (8002498 <LoRa_init_Task+0x264>)
 8002308:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = GPIO_PIN_0;
 800230a:	4b62      	ldr	r3, [pc, #392]	@ (8002494 <LoRa_init_Task+0x260>)
 800230c:	2201      	movs	r2, #1
 800230e:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOF;
 8002310:	4b60      	ldr	r3, [pc, #384]	@ (8002494 <LoRa_init_Task+0x260>)
 8002312:	4a62      	ldr	r2, [pc, #392]	@ (800249c <LoRa_init_Task+0x268>)
 8002314:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = GPIO_PIN_8;
 8002316:	4b5f      	ldr	r3, [pc, #380]	@ (8002494 <LoRa_init_Task+0x260>)
 8002318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800231c:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = GPIOI;
 800231e:	4b5d      	ldr	r3, [pc, #372]	@ (8002494 <LoRa_init_Task+0x260>)
 8002320:	4a5d      	ldr	r2, [pc, #372]	@ (8002498 <LoRa_init_Task+0x264>)
 8002322:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = GPIO_PIN_3;
 8002324:	4b5b      	ldr	r3, [pc, #364]	@ (8002494 <LoRa_init_Task+0x260>)
 8002326:	2208      	movs	r2, #8
 8002328:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi2;
 800232a:	4b5a      	ldr	r3, [pc, #360]	@ (8002494 <LoRa_init_Task+0x260>)
 800232c:	4a5c      	ldr	r2, [pc, #368]	@ (80024a0 <LoRa_init_Task+0x26c>)
 800232e:	619a      	str	r2, [r3, #24]
	myLoRa.frequency = 433;
 8002330:	4b58      	ldr	r3, [pc, #352]	@ (8002494 <LoRa_init_Task+0x260>)
 8002332:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8002336:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;
 8002338:	4b56      	ldr	r3, [pc, #344]	@ (8002494 <LoRa_init_Task+0x260>)
 800233a:	2207      	movs	r2, #7
 800233c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth = BW_125KHz;
 8002340:	4b54      	ldr	r3, [pc, #336]	@ (8002494 <LoRa_init_Task+0x260>)
 8002342:	2207      	movs	r2, #7
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate = CR_4_5;
 8002348:	4b52      	ldr	r3, [pc, #328]	@ (8002494 <LoRa_init_Task+0x260>)
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.preamble = 8;
 8002350:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <LoRa_init_Task+0x260>)
 8002352:	2208      	movs	r2, #8
 8002354:	851a      	strh	r2, [r3, #40]	@ 0x28
	myLoRa.power = POWER_20db;
 8002356:	4b4f      	ldr	r3, [pc, #316]	@ (8002494 <LoRa_init_Task+0x260>)
 8002358:	22ff      	movs	r2, #255	@ 0xff
 800235a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	if (LoRa_init(&myLoRa) != LORA_OK) {
 800235e:	484d      	ldr	r0, [pc, #308]	@ (8002494 <LoRa_init_Task+0x260>)
 8002360:	f7ff f990 	bl	8001684 <LoRa_init>
 8002364:	4603      	mov	r3, r0
 8002366:	2bc8      	cmp	r3, #200	@ 0xc8
 8002368:	d002      	beq.n	8002370 <LoRa_init_Task+0x13c>
		printf("LoRa INIT FAILED\n");
 800236a:	484e      	ldr	r0, [pc, #312]	@ (80024a4 <LoRa_init_Task+0x270>)
 800236c:	f012 fb18 	bl	80149a0 <puts>
		//osThreadExit();
	}
	printf("LoRa OK\n");
 8002370:	484d      	ldr	r0, [pc, #308]	@ (80024a8 <LoRa_init_Task+0x274>)
 8002372:	f012 fb15 	bl	80149a0 <puts>
	/* Infinite loop */
	for (;;) {
		L76_PrintExample();
 8002376:	f000 fb4d 	bl	8002a14 <L76_PrintExample>
		L76_GetData(&gps);
 800237a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb2e 	bl	80029e0 <L76_GetData>
		if (inv_imu_get_register_data(&imu_dev, &data) != 0) {
 8002384:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002388:	4619      	mov	r1, r3
 800238a:	483b      	ldr	r0, [pc, #236]	@ (8002478 <LoRa_init_Task+0x244>)
 800238c:	f001 fab3 	bl	80038f6 <inv_imu_get_register_data>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <LoRa_init_Task+0x170>
			printf("IMU read FAIL\r\n");
 8002396:	4845      	ldr	r0, [pc, #276]	@ (80024ac <LoRa_init_Task+0x278>)
 8002398:	f012 fb02 	bl	80149a0 <puts>
			osDelay(100);
 800239c:	2064      	movs	r0, #100	@ 0x64
 800239e:	f00e f84b 	bl	8010438 <osDelay>
			continue;
 80023a2:	e066      	b.n	8002472 <LoRa_init_Task+0x23e>
		}

		// Message LoRa : Gyro + Accel + GPS
		int len = snprintf(lora_buf, sizeof(lora_buf),
				"%d,%d,%d,%d,%d,%d,%.5f,%.5f,%.1f,%d,%d,%.2f",
				data.gyro_data[0], data.gyro_data[1], data.gyro_data[2],
 80023a4:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	@ 0x116
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023a8:	61fb      	str	r3, [r7, #28]
				data.gyro_data[0], data.gyro_data[1], data.gyro_data[2],
 80023aa:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023ae:	61bb      	str	r3, [r7, #24]
				data.gyro_data[0], data.gyro_data[1], data.gyro_data[2],
 80023b0:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	@ 0x11a
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023b4:	617b      	str	r3, [r7, #20]
				data.accel_data[0], data.accel_data[1], data.accel_data[2],
 80023b6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023ba:	613b      	str	r3, [r7, #16]
				data.accel_data[0], data.accel_data[1], data.accel_data[2],
 80023bc:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	@ 0x112
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023c0:	60fb      	str	r3, [r7, #12]
				data.accel_data[0], data.accel_data[1], data.accel_data[2],
 80023c2:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	@ 0x114
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80023cc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
				gps.latitude, gps.longitude, gps.altitude, gps.satellites,
 80023d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f8d7 	bl	8000588 <__aeabi_f2d>
 80023da:	4682      	mov	sl, r0
 80023dc:	468b      	mov	fp, r1
				gps.latitude, gps.longitude, gps.altitude, gps.satellites,
 80023de:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023e2:	607b      	str	r3, [r7, #4]
				gps.fix_quality, gps.speed);
 80023e4:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023e8:	461e      	mov	r6, r3
				gps.fix_quality, gps.speed);
 80023ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
		int len = snprintf(lora_buf, sizeof(lora_buf),
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8ca 	bl	8000588 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80023fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8002400:	960d      	str	r6, [sp, #52]	@ 0x34
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	920c      	str	r2, [sp, #48]	@ 0x30
 8002406:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 800240a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800240e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	9204      	str	r2, [sp, #16]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	9203      	str	r2, [sp, #12]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	9202      	str	r2, [sp, #8]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	9201      	str	r2, [sp, #4]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	9200      	str	r2, [sp, #0]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <LoRa_init_Task+0x27c>)
 800242a:	2180      	movs	r1, #128	@ 0x80
 800242c:	f012 fac0 	bl	80149b0 <sniprintf>
 8002430:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

		if (LoRa_transmit(&myLoRa, (uint8_t*) lora_buf, len, 100)) {
 8002434:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002438:	b2da      	uxtb	r2, r3
 800243a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800243e:	2364      	movs	r3, #100	@ 0x64
 8002440:	4814      	ldr	r0, [pc, #80]	@ (8002494 <LoRa_init_Task+0x260>)
 8002442:	f7ff f8c7 	bl	80015d4 <LoRa_transmit>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <LoRa_init_Task+0x226>
			printf("LoRa: %s\r\n", lora_buf);
 800244c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002450:	4619      	mov	r1, r3
 8002452:	4818      	ldr	r0, [pc, #96]	@ (80024b4 <LoRa_init_Task+0x280>)
 8002454:	f012 fa3c 	bl	80148d0 <iprintf>
 8002458:	e002      	b.n	8002460 <LoRa_init_Task+0x22c>
		} else {
			printf("LoRa TIMEOUT\r\n");
 800245a:	4817      	ldr	r0, [pc, #92]	@ (80024b8 <LoRa_init_Task+0x284>)
 800245c:	f012 faa0 	bl	80149a0 <puts>
		}

		counter++;
 8002460:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002464:	3301      	adds	r3, #1
 8002466:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		osDelay(500);
 800246a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800246e:	f00d ffe3 	bl	8010438 <osDelay>
	for (;;) {
 8002472:	e780      	b.n	8002376 <LoRa_init_Task+0x142>
 8002474:	08017848 	.word	0x08017848
 8002478:	20000560 	.word	0x20000560
 800247c:	08001fb1 	.word	0x08001fb1
 8002480:	08001ff9 	.word	0x08001ff9
 8002484:	08002041 	.word	0x08002041
 8002488:	0801785c 	.word	0x0801785c
 800248c:	08017874 	.word	0x08017874
 8002490:	0801788c 	.word	0x0801788c
 8002494:	200005a8 	.word	0x200005a8
 8002498:	40022000 	.word	0x40022000
 800249c:	40021400 	.word	0x40021400
 80024a0:	20005ef4 	.word	0x20005ef4
 80024a4:	0801789c 	.word	0x0801789c
 80024a8:	080178b0 	.word	0x080178b0
 80024ac:	080178b8 	.word	0x080178b8
 80024b0:	080178c8 	.word	0x080178c8
 80024b4:	080178f4 	.word	0x080178f4
 80024b8:	08017900 	.word	0x08017900

080024bc <StartTask03>:
 * @brief Function implementing the Gyro_Init thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f00d ffb7 	bl	8010438 <osDelay>
 80024ca:	e7fb      	b.n	80024c4 <StartTask03+0x8>

080024cc <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b090      	sub	sp, #64	@ 0x40
 80024d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e2:	4bb0      	ldr	r3, [pc, #704]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4aaf      	ldr	r2, [pc, #700]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80024e8:	f043 0310 	orr.w	r3, r3, #16
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4bad      	ldr	r3, [pc, #692]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024fa:	4baa      	ldr	r3, [pc, #680]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4aa9      	ldr	r2, [pc, #676]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4ba7      	ldr	r3, [pc, #668]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	4ba4      	ldr	r3, [pc, #656]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4aa3      	ldr	r2, [pc, #652]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4ba1      	ldr	r3, [pc, #644]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	623b      	str	r3, [r7, #32]
 8002528:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	4b9e      	ldr	r3, [pc, #632]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4a9d      	ldr	r2, [pc, #628]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4b9b      	ldr	r3, [pc, #620]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	4b98      	ldr	r3, [pc, #608]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a97      	ldr	r2, [pc, #604]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b95      	ldr	r3, [pc, #596]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	4b92      	ldr	r3, [pc, #584]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a91      	ldr	r2, [pc, #580]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b8f      	ldr	r3, [pc, #572]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002572:	4b8c      	ldr	r3, [pc, #560]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a8b      	ldr	r2, [pc, #556]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002578:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b89      	ldr	r3, [pc, #548]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800258a:	4b86      	ldr	r3, [pc, #536]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a85      	ldr	r2, [pc, #532]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b83      	ldr	r3, [pc, #524]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80025a2:	4b80      	ldr	r3, [pc, #512]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a7f      	ldr	r2, [pc, #508]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b7d      	ldr	r3, [pc, #500]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ba:	4b7a      	ldr	r3, [pc, #488]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a79      	ldr	r2, [pc, #484]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025c0:	f043 0320 	orr.w	r3, r3, #32
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b77      	ldr	r3, [pc, #476]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d2:	4b74      	ldr	r3, [pc, #464]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a73      	ldr	r2, [pc, #460]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b71      	ldr	r3, [pc, #452]	@ (80027a4 <MX_GPIO_Init+0x2d8>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	2120      	movs	r1, #32
 80025ee:	486e      	ldr	r0, [pc, #440]	@ (80027a8 <MX_GPIO_Init+0x2dc>)
 80025f0:	f004 ff1c 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARDUINO_D8_GPIO_Port, ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2104      	movs	r1, #4
 80025f8:	486c      	ldr	r0, [pc, #432]	@ (80027ac <MX_GPIO_Init+0x2e0>)
 80025fa:	f004 ff17 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80025fe:	2201      	movs	r2, #1
 8002600:	2108      	movs	r1, #8
 8002602:	486b      	ldr	r0, [pc, #428]	@ (80027b0 <MX_GPIO_Init+0x2e4>)
 8002604:	f004 ff12 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_DISP_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f241 0101 	movw	r1, #4097	@ 0x1001
 800260e:	4867      	ldr	r0, [pc, #412]	@ (80027ac <MX_GPIO_Init+0x2e0>)
 8002610:	f004 ff0c 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800261a:	4866      	ldr	r0, [pc, #408]	@ (80027b4 <MX_GPIO_Init+0x2e8>)
 800261c:	f004 ff06 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	21c8      	movs	r1, #200	@ 0xc8
 8002624:	4864      	ldr	r0, [pc, #400]	@ (80027b8 <MX_GPIO_Init+0x2ec>)
 8002626:	f004 ff01 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002630:	4862      	ldr	r0, [pc, #392]	@ (80027bc <MX_GPIO_Init+0x2f0>)
 8002632:	f004 fefb 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002636:	2308      	movs	r3, #8
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263a:	2300      	movs	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002646:	4619      	mov	r1, r3
 8002648:	485d      	ldr	r0, [pc, #372]	@ (80027c0 <MX_GPIO_Init+0x2f4>)
 800264a:	f004 fd2b 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800264e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002660:	230a      	movs	r3, #10
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	4856      	ldr	r0, [pc, #344]	@ (80027c4 <MX_GPIO_Init+0x2f8>)
 800266c:	f004 fd1a 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002676:	2300      	movs	r3, #0
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002682:	4619      	mov	r1, r3
 8002684:	4850      	ldr	r0, [pc, #320]	@ (80027c8 <MX_GPIO_Init+0x2fc>)
 8002686:	f004 fd0d 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800268a:	2340      	movs	r3, #64	@ 0x40
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800268e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800269c:	4619      	mov	r1, r3
 800269e:	4842      	ldr	r0, [pc, #264]	@ (80027a8 <MX_GPIO_Init+0x2dc>)
 80026a0:	f004 fd00 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80026a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026b6:	230a      	movs	r3, #10
 80026b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026be:	4619      	mov	r1, r3
 80026c0:	4842      	ldr	r0, [pc, #264]	@ (80027cc <MX_GPIO_Init+0x300>)
 80026c2:	f004 fcef 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80026c6:	2320      	movs	r3, #32
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026da:	4619      	mov	r1, r3
 80026dc:	4832      	ldr	r0, [pc, #200]	@ (80027a8 <MX_GPIO_Init+0x2dc>)
 80026de:	f004 fce1 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 80026e2:	2308      	movs	r3, #8
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e6:	2300      	movs	r3, #0
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f2:	4619      	mov	r1, r3
 80026f4:	482d      	ldr	r0, [pc, #180]	@ (80027ac <MX_GPIO_Init+0x2e0>)
 80026f6:	f004 fcd5 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D8_Pin|LCD_DISP_Pin;
 80026fa:	f241 0304 	movw	r3, #4100	@ 0x1004
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800270c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002710:	4619      	mov	r1, r3
 8002712:	4826      	ldr	r0, [pc, #152]	@ (80027ac <MX_GPIO_Init+0x2e0>)
 8002714:	f004 fcc6 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800272a:	4619      	mov	r1, r3
 800272c:	4828      	ldr	r0, [pc, #160]	@ (80027d0 <MX_GPIO_Init+0x304>)
 800272e:	f004 fcb9 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002732:	2308      	movs	r3, #8
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2301      	movs	r3, #1
 8002738:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002742:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002746:	4619      	mov	r1, r3
 8002748:	4819      	ldr	r0, [pc, #100]	@ (80027b0 <MX_GPIO_Init+0x2e4>)
 800274a:	f004 fcab 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800274e:	2310      	movs	r3, #16
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800275e:	4619      	mov	r1, r3
 8002760:	4811      	ldr	r0, [pc, #68]	@ (80027a8 <MX_GPIO_Init+0x2dc>)
 8002762:	f004 fc9f 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002766:	f248 0304 	movw	r3, #32772	@ 0x8004
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002774:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002778:	4619      	mov	r1, r3
 800277a:	480e      	ldr	r0, [pc, #56]	@ (80027b4 <MX_GPIO_Init+0x2e8>)
 800277c:	f004 fc92 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002796:	4619      	mov	r1, r3
 8002798:	4806      	ldr	r0, [pc, #24]	@ (80027b4 <MX_GPIO_Init+0x2e8>)
 800279a:	f004 fc83 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 800279e:	2301      	movs	r3, #1
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a2:	e017      	b.n	80027d4 <MX_GPIO_Init+0x308>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40022800 	.word	0x40022800
 80027b4:	40021c00 	.word	0x40021c00
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40022400 	.word	0x40022400
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027e4:	4619      	mov	r1, r3
 80027e6:	4843      	ldr	r0, [pc, #268]	@ (80028f4 <MX_GPIO_Init+0x428>)
 80027e8:	f004 fc5c 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80027ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80027fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002800:	4619      	mov	r1, r3
 8002802:	483c      	ldr	r0, [pc, #240]	@ (80028f4 <MX_GPIO_Init+0x428>)
 8002804:	f004 fc4e 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002808:	2310      	movs	r3, #16
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002818:	230a      	movs	r3, #10
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002820:	4619      	mov	r1, r3
 8002822:	4835      	ldr	r0, [pc, #212]	@ (80028f8 <MX_GPIO_Init+0x42c>)
 8002824:	f004 fc3e 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002828:	23c8      	movs	r3, #200	@ 0xc8
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	2301      	movs	r3, #1
 800282e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002838:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800283c:	4619      	mov	r1, r3
 800283e:	482f      	ldr	r0, [pc, #188]	@ (80028fc <MX_GPIO_Init+0x430>)
 8002840:	f004 fc30 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin;
 8002844:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284a:	2300      	movs	r3, #0
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002856:	4619      	mov	r1, r3
 8002858:	4829      	ldr	r0, [pc, #164]	@ (8002900 <MX_GPIO_Init+0x434>)
 800285a:	f004 fc23 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 800285e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002864:	2301      	movs	r3, #1
 8002866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002868:	2301      	movs	r3, #1
 800286a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800286c:	2301      	movs	r3, #1
 800286e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 8002870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002874:	4619      	mov	r1, r3
 8002876:	4822      	ldr	r0, [pc, #136]	@ (8002900 <MX_GPIO_Init+0x434>)
 8002878:	f004 fc14 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800287c:	2305      	movs	r3, #5
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800288c:	230a      	movs	r3, #10
 800288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002894:	4619      	mov	r1, r3
 8002896:	481b      	ldr	r0, [pc, #108]	@ (8002904 <MX_GPIO_Init+0x438>)
 8002898:	f004 fc04 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800289c:	2304      	movs	r3, #4
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a0:	2300      	movs	r3, #0
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ac:	4619      	mov	r1, r3
 80028ae:	4813      	ldr	r0, [pc, #76]	@ (80028fc <MX_GPIO_Init+0x430>)
 80028b0:	f004 fbf8 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c4:	4619      	mov	r1, r3
 80028c6:	4810      	ldr	r0, [pc, #64]	@ (8002908 <MX_GPIO_Init+0x43c>)
 80028c8:	f004 fbec 	bl	80070a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80028cc:	2328      	movs	r3, #40	@ 0x28
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028dc:	230a      	movs	r3, #10
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028e4:	4619      	mov	r1, r3
 80028e6:	4808      	ldr	r0, [pc, #32]	@ (8002908 <MX_GPIO_Init+0x43c>)
 80028e8:	f004 fbdc 	bl	80070a4 <HAL_GPIO_Init>

}
 80028ec:	bf00      	nop
 80028ee:	3740      	adds	r7, #64	@ 0x40
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021c00 	.word	0x40021c00
 80028fc:	40021800 	.word	0x40021800
 8002900:	40021400 	.word	0x40021400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020000 	.word	0x40020000

0800290c <L76_Init>:
static void L76_ParseRMC(char *nmea, L76_GPS_Data_t *data);
static double L76_ConvertNMEADegrees(const char *raw, char dir);
static void L76_ParseTime(const char *str, uint8_t *h, uint8_t *m, float *s);
static void L76_ParseDate(const char *str, uint8_t *d, uint8_t *mo, uint16_t *y);

void L76_Init(UART_HandleTypeDef *huart) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	l76_huart = huart;
 8002914:	4a15      	ldr	r2, [pc, #84]	@ (800296c <L76_Init+0x60>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(L76_STDBY_GPIO_Port, L76_STDBY_Pin, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	4814      	ldr	r0, [pc, #80]	@ (8002970 <L76_Init+0x64>)
 8002920:	f004 fd84 	bl	800742c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002924:	200a      	movs	r0, #10
 8002926:	f003 f84d 	bl	80059c4 <HAL_Delay>
	l76_sem = xSemaphoreCreateBinary();
 800292a:	2203      	movs	r2, #3
 800292c:	2100      	movs	r1, #0
 800292e:	2001      	movs	r0, #1
 8002930:	f00e f831 	bl	8010996 <xQueueGenericCreate>
 8002934:	4603      	mov	r3, r0
 8002936:	4a0f      	ldr	r2, [pc, #60]	@ (8002974 <L76_Init+0x68>)
 8002938:	6013      	str	r3, [r2, #0]
	memset(&l76_data, 0, sizeof(l76_data));
 800293a:	2230      	movs	r2, #48	@ 0x30
 800293c:	2100      	movs	r1, #0
 800293e:	480e      	ldr	r0, [pc, #56]	@ (8002978 <L76_Init+0x6c>)
 8002940:	f012 f944 	bl	8014bcc <memset>
	l76_rxIndex = 0;
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <L76_Init+0x70>)
 8002946:	2200      	movs	r2, #0
 8002948:	801a      	strh	r2, [r3, #0]
	l76_currentBuf = 0;
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <L76_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
	l76_readyBuf = -1;
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <L76_Init+0x78>)
 8002952:	22ff      	movs	r2, #255	@ 0xff
 8002954:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <L76_Init+0x60>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	490a      	ldr	r1, [pc, #40]	@ (8002988 <L76_Init+0x7c>)
 800295e:	4618      	mov	r0, r3
 8002960:	f00b f9d1 	bl	800dd06 <HAL_UART_Receive_IT>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20005a1c 	.word	0x20005a1c
 8002970:	40021800 	.word	0x40021800
 8002974:	20005a20 	.word	0x20005a20
 8002978:	20005b28 	.word	0x20005b28
 800297c:	20005b24 	.word	0x20005b24
 8002980:	20005b26 	.word	0x20005b26
 8002984:	20000000 	.word	0x20000000
 8002988:	20005b27 	.word	0x20005b27

0800298c <L76_Task>:

void L76_Task(void const *arg) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	L76_Init((UART_HandleTypeDef*) arg);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffb9 	bl	800290c <L76_Init>

	for (;;) {
		if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE && l76_readyBuf >= 0) {
 800299a:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <L76_Task+0x48>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f04f 31ff 	mov.w	r1, #4294967295
 80029a2:	4618      	mov	r0, r3
 80029a4:	f00e fbd4 	bl	8011150 <xQueueSemaphoreTake>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d1f5      	bne.n	800299a <L76_Task+0xe>
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <L76_Task+0x4c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	dbf0      	blt.n	800299a <L76_Task+0xe>
			L76_ProcessNMEA(l76_rxBuffer[l76_readyBuf]);
 80029b8:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <L76_Task+0x4c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	01db      	lsls	r3, r3, #7
 80029c0:	4a06      	ldr	r2, [pc, #24]	@ (80029dc <L76_Task+0x50>)
 80029c2:	4413      	add	r3, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f9e5 	bl	8002d94 <L76_ProcessNMEA>
			l76_readyBuf = -1;
 80029ca:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <L76_Task+0x4c>)
 80029cc:	22ff      	movs	r2, #255	@ 0xff
 80029ce:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE && l76_readyBuf >= 0) {
 80029d0:	e7e3      	b.n	800299a <L76_Task+0xe>
 80029d2:	bf00      	nop
 80029d4:	20005a20 	.word	0x20005a20
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20005a24 	.word	0x20005a24

080029e0 <L76_GetData>:
		}
	}
}

void L76_GetData(L76_GPS_Data_t *data) {
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 80029e8:	f010 f840 	bl	8012a6c <vPortEnterCritical>
	*data = l76_data;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <L76_GetData+0x30>)
 80029f0:	461c      	mov	r4, r3
 80029f2:	4615      	mov	r5, r2
 80029f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	taskEXIT_CRITICAL();
 8002a04:	f010 f868 	bl	8012ad8 <vPortExitCritical>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a10:	20005b28 	.word	0x20005b28

08002a14 <L76_PrintExample>:
		l76_currentBuf = 0;
		HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
	}
}

void L76_PrintExample(void) {
 8002a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a18:	ed2d 8b02 	vpush	{d8}
 8002a1c:	b0eb      	sub	sp, #428	@ 0x1ac
 8002a1e:	af16      	add	r7, sp, #88	@ 0x58
	L76_GPS_Data_t data;
	L76_GetData(&data);
 8002a20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ffdb 	bl	80029e0 <L76_GetData>

	char buf[256];

	if (data.fix_quality == 0) {
 8002a2a:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8081 	bne.w	8002b36 <L76_PrintExample+0x122>
		snprintf(buf, sizeof(buf),
			"[GPS] No fix: %d sats, UTC %02d:%02d:%05.2f, %02d/%02d/%04d\r\n"
			"[GSV] View: %d, Max SNR: %ddB\r\n",
			data.satellites, data.hours, data.minutes, data.seconds,
 8002a34:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
		snprintf(buf, sizeof(buf),
 8002a38:	4698      	mov	r8, r3
			data.satellites, data.hours, data.minutes, data.seconds,
 8002a3a:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
		snprintf(buf, sizeof(buf),
 8002a3e:	461c      	mov	r4, r3
			data.satellites, data.hours, data.minutes, data.seconds,
 8002a40:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
		snprintf(buf, sizeof(buf),
 8002a44:	461d      	mov	r5, r3
			data.satellites, data.hours, data.minutes, data.seconds,
 8002a46:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
		snprintf(buf, sizeof(buf),
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd9c 	bl	8000588 <__aeabi_f2d>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
			data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 8002a54:	f897 1148 	ldrb.w	r1, [r7, #328]	@ 0x148
		snprintf(buf, sizeof(buf),
 8002a58:	460e      	mov	r6, r1
			data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 8002a5a:	f897 1149 	ldrb.w	r1, [r7, #329]	@ 0x149
		snprintf(buf, sizeof(buf),
 8002a5e:	61b9      	str	r1, [r7, #24]
			data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 8002a60:	f8b7 114a 	ldrh.w	r1, [r7, #330]	@ 0x14a
		snprintf(buf, sizeof(buf),
 8002a64:	6179      	str	r1, [r7, #20]
 8002a66:	4968      	ldr	r1, [pc, #416]	@ (8002c08 <L76_PrintExample+0x1f4>)
 8002a68:	7809      	ldrb	r1, [r1, #0]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	4967      	ldr	r1, [pc, #412]	@ (8002c0c <L76_PrintExample+0x1f8>)
 8002a6e:	7809      	ldrb	r1, [r1, #0]
 8002a70:	f107 0020 	add.w	r0, r7, #32
 8002a74:	9108      	str	r1, [sp, #32]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	9107      	str	r1, [sp, #28]
 8002a7a:	6979      	ldr	r1, [r7, #20]
 8002a7c:	9106      	str	r1, [sp, #24]
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	9105      	str	r1, [sp, #20]
 8002a82:	9604      	str	r6, [sp, #16]
 8002a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a88:	9501      	str	r5, [sp, #4]
 8002a8a:	9400      	str	r4, [sp, #0]
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	4a60      	ldr	r2, [pc, #384]	@ (8002c10 <L76_PrintExample+0x1fc>)
 8002a90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a94:	f011 ff8c 	bl	80149b0 <sniprintf>

		if (gsv_sat_count == 0 && data.hours == 0 && data.minutes == 0)
 8002a98:	4b5b      	ldr	r3, [pc, #364]	@ (8002c08 <L76_PrintExample+0x1f4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11c      	bne.n	8002ada <L76_PrintExample+0xc6>
 8002aa0:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d118      	bne.n	8002ada <L76_PrintExample+0xc6>
 8002aa8:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d114      	bne.n	8002ada <L76_PrintExample+0xc6>
			strcat(buf, "[GPS] Cold start?\r\n");
 8002ab0:	f107 0320 	add.w	r3, r7, #32
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fbfb 	bl	80002b0 <strlen>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	f107 0320 	add.w	r3, r7, #32
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a53      	ldr	r2, [pc, #332]	@ (8002c14 <L76_PrintExample+0x200>)
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	4614      	mov	r4, r2
 8002aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002acc:	6028      	str	r0, [r5, #0]
 8002ace:	6069      	str	r1, [r5, #4]
 8002ad0:	60aa      	str	r2, [r5, #8]
 8002ad2:	60eb      	str	r3, [r5, #12]
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	6128      	str	r0, [r5, #16]
 8002ad8:	e087      	b.n	8002bea <L76_PrintExample+0x1d6>
		else if (gsv_sat_count < 4)
 8002ada:	4b4b      	ldr	r3, [pc, #300]	@ (8002c08 <L76_PrintExample+0x1f4>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d814      	bhi.n	8002b0c <L76_PrintExample+0xf8>
			strcat(buf, "[GPS] Weak signal\r\n");
 8002ae2:	f107 0320 	add.w	r3, r7, #32
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fbe2 	bl	80002b0 <strlen>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	4413      	add	r3, r2
 8002af6:	4a48      	ldr	r2, [pc, #288]	@ (8002c18 <L76_PrintExample+0x204>)
 8002af8:	461d      	mov	r5, r3
 8002afa:	4614      	mov	r4, r2
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	6028      	str	r0, [r5, #0]
 8002b00:	6069      	str	r1, [r5, #4]
 8002b02:	60aa      	str	r2, [r5, #8]
 8002b04:	60eb      	str	r3, [r5, #12]
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	6128      	str	r0, [r5, #16]
 8002b0a:	e06e      	b.n	8002bea <L76_PrintExample+0x1d6>
		else
			strcat(buf, "[GPS] No lock yet\r\n");
 8002b0c:	f107 0320 	add.w	r3, r7, #32
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fbcd 	bl	80002b0 <strlen>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a3e      	ldr	r2, [pc, #248]	@ (8002c1c <L76_PrintExample+0x208>)
 8002b22:	461d      	mov	r5, r3
 8002b24:	4614      	mov	r4, r2
 8002b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b28:	6028      	str	r0, [r5, #0]
 8002b2a:	6069      	str	r1, [r5, #4]
 8002b2c:	60aa      	str	r2, [r5, #8]
 8002b2e:	60eb      	str	r3, [r5, #12]
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	6128      	str	r0, [r5, #16]
 8002b34:	e059      	b.n	8002bea <L76_PrintExample+0x1d6>
	} else {
		snprintf(buf, sizeof(buf),
 8002b36:	e9d7 ab48 	ldrd	sl, fp, [r7, #288]	@ 0x120
 8002b3a:	ed97 8b4a 	vldr	d8, [r7, #296]	@ 0x128
			"[GPS] FIX OK: Lat=%.5f, Lon=%.5f, Alt=%.1fm\r\n"
			"UTC=%02d:%02d:%05.2f, Date=%02d/%02d/%04d\r\n"
			"Speed=%.1fkt, Course=%.1f°, Sats=%d\r\n"
			"[GSV] View: %d, Max SNR: %ddB\r\n",
			data.latitude, data.longitude, data.altitude,
 8002b3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
		snprintf(buf, sizeof(buf),
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd20 	bl	8000588 <__aeabi_f2d>
 8002b48:	e9c7 0106 	strd	r0, r1, [r7, #24]
			data.hours, data.minutes, data.seconds,
 8002b4c:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
		snprintf(buf, sizeof(buf),
 8002b50:	461e      	mov	r6, r3
			data.hours, data.minutes, data.seconds,
 8002b52:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
		snprintf(buf, sizeof(buf),
 8002b56:	617b      	str	r3, [r7, #20]
			data.hours, data.minutes, data.seconds,
 8002b58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
		snprintf(buf, sizeof(buf),
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fd13 	bl	8000588 <__aeabi_f2d>
 8002b62:	e9c7 0102 	strd	r0, r1, [r7, #8]
			data.day, data.month, data.year,
 8002b66:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
		snprintf(buf, sizeof(buf),
 8002b6a:	613b      	str	r3, [r7, #16]
			data.day, data.month, data.year,
 8002b6c:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
		snprintf(buf, sizeof(buf),
 8002b70:	607b      	str	r3, [r7, #4]
			data.day, data.month, data.year,
 8002b72:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
		snprintf(buf, sizeof(buf),
 8002b76:	603b      	str	r3, [r7, #0]
			data.speed, data.course, data.satellites,
 8002b78:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
		snprintf(buf, sizeof(buf),
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fd03 	bl	8000588 <__aeabi_f2d>
 8002b82:	4680      	mov	r8, r0
 8002b84:	4689      	mov	r9, r1
			data.speed, data.course, data.satellites,
 8002b86:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
		snprintf(buf, sizeof(buf),
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fcfc 	bl	8000588 <__aeabi_f2d>
 8002b90:	4604      	mov	r4, r0
 8002b92:	460d      	mov	r5, r1
			data.speed, data.course, data.satellites,
 8002b94:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
		snprintf(buf, sizeof(buf),
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <L76_PrintExample+0x1f4>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c0c <L76_PrintExample+0x1f8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	f107 0020 	add.w	r0, r7, #32
 8002ba8:	9314      	str	r3, [sp, #80]	@ 0x50
 8002baa:	9213      	str	r2, [sp, #76]	@ 0x4c
 8002bac:	9112      	str	r1, [sp, #72]	@ 0x48
 8002bae:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8002bb2:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	920c      	str	r2, [sp, #48]	@ 0x30
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	920a      	str	r2, [sp, #40]	@ 0x28
 8002bc2:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	9307      	str	r3, [sp, #28]
 8002bce:	9606      	str	r6, [sp, #24]
 8002bd0:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002bd8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002bdc:	e9cd ab00 	strd	sl, fp, [sp]
 8002be0:	4a0f      	ldr	r2, [pc, #60]	@ (8002c20 <L76_PrintExample+0x20c>)
 8002be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002be6:	f011 fee3 	bl	80149b0 <sniprintf>
			gsv_sat_count, gsv_max_snr);
	}

	printf("%s", buf);
 8002bea:	f107 0320 	add.w	r3, r7, #32
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480c      	ldr	r0, [pc, #48]	@ (8002c24 <L76_PrintExample+0x210>)
 8002bf2:	f011 fe6d 	bl	80148d0 <iprintf>
}
 8002bf6:	bf00      	nop
 8002bf8:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	ecbd 8b02 	vpop	{d8}
 8002c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c06:	bf00      	nop
 8002c08:	20005b58 	.word	0x20005b58
 8002c0c:	20005b59 	.word	0x20005b59
 8002c10:	08017910 	.word	0x08017910
 8002c14:	08017970 	.word	0x08017970
 8002c18:	08017984 	.word	0x08017984
 8002c1c:	08017998 	.word	0x08017998
 8002c20:	080179ac 	.word	0x080179ac
 8002c24:	08017a4c 	.word	0x08017a4c

08002c28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	BaseType_t wake = pdFALSE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
	if (huart == l76_huart) {
 8002c34:	4b4f      	ldr	r3, [pc, #316]	@ (8002d74 <HAL_UART_RxCpltCallback+0x14c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f040 8095 	bne.w	8002d6a <HAL_UART_RxCpltCallback+0x142>
		char c = (char) l76_rxChar;
 8002c40:	4b4d      	ldr	r3, [pc, #308]	@ (8002d78 <HAL_UART_RxCpltCallback+0x150>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	73fb      	strb	r3, [r7, #15]

		if (c == '$') {
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b24      	cmp	r3, #36	@ 0x24
 8002c4a:	d11a      	bne.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
			l76_rxIndex = 0;
 8002c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	801a      	strh	r2, [r3, #0]
			l76_currentBuf ^= 1;
 8002c52:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b48      	ldr	r3, [pc, #288]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002c5e:	701a      	strb	r2, [r3, #0]
			l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 8002c60:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	4b45      	ldr	r3, [pc, #276]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	b291      	uxth	r1, r2
 8002c6e:	4a43      	ldr	r2, [pc, #268]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002c70:	8011      	strh	r1, [r2, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	4a43      	ldr	r2, [pc, #268]	@ (8002d84 <HAL_UART_RxCpltCallback+0x15c>)
 8002c76:	01c3      	lsls	r3, r0, #7
 8002c78:	4413      	add	r3, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e06c      	b.n	8002d5c <HAL_UART_RxCpltCallback+0x134>
		} else if (c == '\n') {
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b0a      	cmp	r3, #10
 8002c86:	d14e      	bne.n	8002d26 <HAL_UART_RxCpltCallback+0xfe>
			if (l76_rxIndex < L76_NMEA_MAX_LEN)
 8002c88:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c8e:	d80c      	bhi.n	8002caa <HAL_UART_RxCpltCallback+0x82>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex] = '\0';
 8002c90:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4a39      	ldr	r2, [pc, #228]	@ (8002d84 <HAL_UART_RxCpltCallback+0x15c>)
 8002c9e:	01c3      	lsls	r3, r0, #7
 8002ca0:	4413      	add	r3, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e007      	b.n	8002cba <HAL_UART_RxCpltCallback+0x92>
			else
				l76_rxBuffer[l76_currentBuf][L76_NMEA_MAX_LEN - 1] = '\0';
 8002caa:	4b35      	ldr	r3, [pc, #212]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_UART_RxCpltCallback+0x15c>)
 8002cb0:	01db      	lsls	r3, r3, #7
 8002cb2:	4413      	add	r3, r2
 8002cb4:	337f      	adds	r3, #127	@ 0x7f
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]

			if (l76_rxIndex > 0 && l76_rxBuffer[l76_currentBuf][l76_rxIndex - 1] == '\r')
 8002cba:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <HAL_UART_RxCpltCallback+0xcc>
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	492d      	ldr	r1, [pc, #180]	@ (8002d84 <HAL_UART_RxCpltCallback+0x15c>)
 8002cd0:	01d2      	lsls	r2, r2, #7
 8002cd2:	440a      	add	r2, r1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b0d      	cmp	r3, #13
 8002cda:	d10b      	bne.n	8002cf4 <HAL_UART_RxCpltCallback+0xcc>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex - 1] = '\0';
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	4926      	ldr	r1, [pc, #152]	@ (8002d84 <HAL_UART_RxCpltCallback+0x15c>)
 8002cea:	01d2      	lsls	r2, r2, #7
 8002cec:	440a      	add	r2, r1
 8002cee:	4413      	add	r3, r2
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]

			l76_readyBuf = l76_currentBuf;
 8002cf4:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b25a      	sxtb	r2, r3
 8002cfa:	4b23      	ldr	r3, [pc, #140]	@ (8002d88 <HAL_UART_RxCpltCallback+0x160>)
 8002cfc:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(l76_sem, &wake);
 8002cfe:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_UART_RxCpltCallback+0x164>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f107 0208 	add.w	r2, r7, #8
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00e f8a0 	bl	8010e4e <xQueueGiveFromISR>
			portYIELD_FROM_ISR(wake);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d023      	beq.n	8002d5c <HAL_UART_RxCpltCallback+0x134>
 8002d14:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_UART_RxCpltCallback+0x168>)
 8002d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	e01a      	b.n	8002d5c <HAL_UART_RxCpltCallback+0x134>
		} else if (c != '\r') {
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b0d      	cmp	r3, #13
 8002d2a:	d017      	beq.n	8002d5c <HAL_UART_RxCpltCallback+0x134>
			if (l76_rxIndex < (L76_NMEA_MAX_LEN - 1))
 8002d2c:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	2b7e      	cmp	r3, #126	@ 0x7e
 8002d32:	d810      	bhi.n	8002d56 <HAL_UART_RxCpltCallback+0x12e>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_UART_RxCpltCallback+0x158>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	b291      	uxth	r1, r2
 8002d42:	4a0e      	ldr	r2, [pc, #56]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002d44:	8011      	strh	r1, [r2, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4a0e      	ldr	r2, [pc, #56]	@ (8002d84 <HAL_UART_RxCpltCallback+0x15c>)
 8002d4a:	01c3      	lsls	r3, r0, #7
 8002d4c:	4413      	add	r3, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e002      	b.n	8002d5c <HAL_UART_RxCpltCallback+0x134>
			else
				l76_rxIndex = 0; // overflow safety
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_UART_RxCpltCallback+0x154>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	801a      	strh	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_UART_RxCpltCallback+0x14c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4905      	ldr	r1, [pc, #20]	@ (8002d78 <HAL_UART_RxCpltCallback+0x150>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00a ffce 	bl	800dd06 <HAL_UART_Receive_IT>
	}
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20005a1c 	.word	0x20005a1c
 8002d78:	20005b27 	.word	0x20005b27
 8002d7c:	20005b24 	.word	0x20005b24
 8002d80:	20005b26 	.word	0x20005b26
 8002d84:	20005a24 	.word	0x20005a24
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	20005a20 	.word	0x20005a20
 8002d90:	e000ed04 	.word	0xe000ed04

08002d94 <L76_ProcessNMEA>:

static void L76_ProcessNMEA(char *nmea) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	if (!nmea || nmea[0] != '$') return;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d076      	beq.n	8002e90 <L76_ProcessNMEA+0xfc>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b24      	cmp	r3, #36	@ 0x24
 8002da8:	d172      	bne.n	8002e90 <L76_ProcessNMEA+0xfc>

	char *star = strchr(nmea, '*');
 8002daa:	212a      	movs	r1, #42	@ 0x2a
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f011 ff15 	bl	8014bdc <strchr>
 8002db2:	60f8      	str	r0, [r7, #12]
	if (star) *star = '\0';
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <L76_ProcessNMEA+0x2c>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]

	if (strncmp(nmea + 3, "GGA", 3) == 0) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3303      	adds	r3, #3
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4934      	ldr	r1, [pc, #208]	@ (8002e98 <L76_ProcessNMEA+0x104>)
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f011 ff14 	bl	8014bf6 <strncmp>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <L76_ProcessNMEA+0x4a>
		L76_ParseGGA(nmea, &l76_data);
 8002dd4:	4931      	ldr	r1, [pc, #196]	@ (8002e9c <L76_ProcessNMEA+0x108>)
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f86e 	bl	8002eb8 <L76_ParseGGA>
 8002ddc:	e059      	b.n	8002e92 <L76_ProcessNMEA+0xfe>
	} else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3303      	adds	r3, #3
 8002de2:	2203      	movs	r2, #3
 8002de4:	492e      	ldr	r1, [pc, #184]	@ (8002ea0 <L76_ProcessNMEA+0x10c>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f011 ff05 	bl	8014bf6 <strncmp>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <L76_ProcessNMEA+0x68>
		L76_ParseRMC(nmea, &l76_data);
 8002df2:	492a      	ldr	r1, [pc, #168]	@ (8002e9c <L76_ProcessNMEA+0x108>)
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8e5 	bl	8002fc4 <L76_ParseRMC>
 8002dfa:	e04a      	b.n	8002e92 <L76_ProcessNMEA+0xfe>
	} else if (strncmp(nmea, "$GPGSV", 6) == 0 || strncmp(nmea, "$GLGSV", 6) == 0) {
 8002dfc:	2206      	movs	r2, #6
 8002dfe:	4929      	ldr	r1, [pc, #164]	@ (8002ea4 <L76_ProcessNMEA+0x110>)
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f011 fef8 	bl	8014bf6 <strncmp>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <L76_ProcessNMEA+0x88>
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	4926      	ldr	r1, [pc, #152]	@ (8002ea8 <L76_ProcessNMEA+0x114>)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f011 fef0 	bl	8014bf6 <strncmp>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d13a      	bne.n	8002e92 <L76_ProcessNMEA+0xfe>
		char *token;
		uint8_t field = 0, sat = 0, snr = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	74fb      	strb	r3, [r7, #19]
 8002e20:	2300      	movs	r3, #0
 8002e22:	74bb      	strb	r3, [r7, #18]
 8002e24:	2300      	movs	r3, #0
 8002e26:	747b      	strb	r3, [r7, #17]

		token = strtok(nmea, ",");
 8002e28:	4920      	ldr	r1, [pc, #128]	@ (8002eac <L76_ProcessNMEA+0x118>)
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f011 fef6 	bl	8014c1c <strtok>
 8002e30:	6178      	str	r0, [r7, #20]
		while (token != NULL) {
 8002e32:	e023      	b.n	8002e7c <L76_ProcessNMEA+0xe8>
			field++;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	3301      	adds	r3, #1
 8002e38:	74fb      	strb	r3, [r7, #19]
			if (field == 4) sat = atoi(token);
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d104      	bne.n	8002e4a <L76_ProcessNMEA+0xb6>
 8002e40:	6978      	ldr	r0, [r7, #20]
 8002e42:	f010 f932 	bl	80130aa <atoi>
 8002e46:	4603      	mov	r3, r0
 8002e48:	74bb      	strb	r3, [r7, #18]
			if (field >= 8 && ((field - 8) % 4 == 0)) {
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d910      	bls.n	8002e72 <L76_ProcessNMEA+0xde>
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	3b08      	subs	r3, #8
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <L76_ProcessNMEA+0xde>
				uint8_t val = atoi(token);
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f010 f924 	bl	80130aa <atoi>
 8002e62:	4603      	mov	r3, r0
 8002e64:	72fb      	strb	r3, [r7, #11]
				if (val > snr) snr = val;
 8002e66:	7afa      	ldrb	r2, [r7, #11]
 8002e68:	7c7b      	ldrb	r3, [r7, #17]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d901      	bls.n	8002e72 <L76_ProcessNMEA+0xde>
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	747b      	strb	r3, [r7, #17]
			}
			token = strtok(NULL, ",");
 8002e72:	490e      	ldr	r1, [pc, #56]	@ (8002eac <L76_ProcessNMEA+0x118>)
 8002e74:	2000      	movs	r0, #0
 8002e76:	f011 fed1 	bl	8014c1c <strtok>
 8002e7a:	6178      	str	r0, [r7, #20]
		while (token != NULL) {
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1d8      	bne.n	8002e34 <L76_ProcessNMEA+0xa0>
		}

		gsv_sat_count = sat;
 8002e82:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb0 <L76_ProcessNMEA+0x11c>)
 8002e84:	7cbb      	ldrb	r3, [r7, #18]
 8002e86:	7013      	strb	r3, [r2, #0]
		gsv_max_snr = snr;
 8002e88:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <L76_ProcessNMEA+0x120>)
 8002e8a:	7c7b      	ldrb	r3, [r7, #17]
 8002e8c:	7013      	strb	r3, [r2, #0]
 8002e8e:	e000      	b.n	8002e92 <L76_ProcessNMEA+0xfe>
	if (!nmea || nmea[0] != '$') return;
 8002e90:	bf00      	nop
	}
}
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	08017a50 	.word	0x08017a50
 8002e9c:	20005b28 	.word	0x20005b28
 8002ea0:	08017a54 	.word	0x08017a54
 8002ea4:	08017a58 	.word	0x08017a58
 8002ea8:	08017a60 	.word	0x08017a60
 8002eac:	08017a68 	.word	0x08017a68
 8002eb0:	20005b58 	.word	0x20005b58
 8002eb4:	20005b59 	.word	0x20005b59

08002eb8 <L76_ParseGGA>:

static void L76_ParseGGA(char *nmea, L76_GPS_Data_t *data) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	char *token = strtok(nmea, ","); // skip GGA
 8002ec2:	493f      	ldr	r1, [pc, #252]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f011 fea9 	bl	8014c1c <strtok>
 8002eca:	61f8      	str	r0, [r7, #28]
	token = strtok(NULL, ","); L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002ecc:	493c      	ldr	r1, [pc, #240]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f011 fea4 	bl	8014c1c <strtok>
 8002ed4:	61f8      	str	r0, [r7, #28]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f103 0120 	add.w	r1, r3, #32
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	3324      	adds	r3, #36	@ 0x24
 8002ee6:	69f8      	ldr	r0, [r7, #28]
 8002ee8:	f000 f960 	bl	80031ac <L76_ParseTime>
	const char *lat = strtok(NULL, ","); char lat_dir = *strtok(NULL, ",");
 8002eec:	4934      	ldr	r1, [pc, #208]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f011 fe94 	bl	8014c1c <strtok>
 8002ef4:	61b8      	str	r0, [r7, #24]
 8002ef6:	4932      	ldr	r1, [pc, #200]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f011 fe8f 	bl	8014c1c <strtok>
 8002efe:	4603      	mov	r3, r0
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	75fb      	strb	r3, [r7, #23]
	const char *lon = strtok(NULL, ","); char lon_dir = *strtok(NULL, ",");
 8002f04:	492e      	ldr	r1, [pc, #184]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002f06:	2000      	movs	r0, #0
 8002f08:	f011 fe88 	bl	8014c1c <strtok>
 8002f0c:	6138      	str	r0, [r7, #16]
 8002f0e:	492c      	ldr	r1, [pc, #176]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002f10:	2000      	movs	r0, #0
 8002f12:	f011 fe83 	bl	8014c1c <strtok>
 8002f16:	4603      	mov	r3, r0
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	73fb      	strb	r3, [r7, #15]
	data->fix_quality = atoi(strtok(NULL, ","));
 8002f1c:	4928      	ldr	r1, [pc, #160]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f011 fe7c 	bl	8014c1c <strtok>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f010 f8bf 	bl	80130aa <atoi>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	751a      	strb	r2, [r3, #20]
	data->satellites = atoi(strtok(NULL, ","));
 8002f34:	4922      	ldr	r1, [pc, #136]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002f36:	2000      	movs	r0, #0
 8002f38:	f011 fe70 	bl	8014c1c <strtok>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f010 f8b3 	bl	80130aa <atoi>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	755a      	strb	r2, [r3, #21]
	strtok(NULL, ","); // skip HDOP
 8002f4c:	491c      	ldr	r1, [pc, #112]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f011 fe64 	bl	8014c1c <strtok>
	data->altitude = strtof(strtok(NULL, ","), NULL);
 8002f54:	491a      	ldr	r1, [pc, #104]	@ (8002fc0 <L76_ParseGGA+0x108>)
 8002f56:	2000      	movs	r0, #0
 8002f58:	f011 fe60 	bl	8014c1c <strtok>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f010 feb5 	bl	8013cd0 <strtof>
 8002f66:	eef0 7a40 	vmov.f32	s15, s0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	edc3 7a04 	vstr	s15, [r3, #16]

	if (lat && lat_dir) data->latitude = L76_ConvertNMEADegrees(lat, lat_dir);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <L76_ParseGGA+0xdc>
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <L76_ParseGGA+0xdc>
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	69b8      	ldr	r0, [r7, #24]
 8002f82:	f000 f8b5 	bl	80030f0 <L76_ConvertNMEADegrees>
 8002f86:	eeb0 7a40 	vmov.f32	s14, s0
 8002f8a:	eef0 7a60 	vmov.f32	s15, s1
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	ed83 7b00 	vstr	d7, [r3]
	if (lon && lon_dir) data->longitude = L76_ConvertNMEADegrees(lon, lon_dir);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <L76_ParseGGA+0x100>
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <L76_ParseGGA+0x100>
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6938      	ldr	r0, [r7, #16]
 8002fa6:	f000 f8a3 	bl	80030f0 <L76_ConvertNMEADegrees>
 8002faa:	eeb0 7a40 	vmov.f32	s14, s0
 8002fae:	eef0 7a60 	vmov.f32	s15, s1
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08017a68 	.word	0x08017a68

08002fc4 <L76_ParseRMC>:

static void L76_ParseRMC(char *nmea, L76_GPS_Data_t *data) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
	char *token = strtok(nmea, ","); // skip RMC
 8002fce:	4947      	ldr	r1, [pc, #284]	@ (80030ec <L76_ParseRMC+0x128>)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f011 fe23 	bl	8014c1c <strtok>
 8002fd6:	61f8      	str	r0, [r7, #28]
	token = strtok(NULL, ","); L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002fd8:	4944      	ldr	r1, [pc, #272]	@ (80030ec <L76_ParseRMC+0x128>)
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f011 fe1e 	bl	8014c1c <strtok>
 8002fe0:	61f8      	str	r0, [r7, #28]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f103 0120 	add.w	r1, r3, #32
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	3324      	adds	r3, #36	@ 0x24
 8002ff2:	69f8      	ldr	r0, [r7, #28]
 8002ff4:	f000 f8da 	bl	80031ac <L76_ParseTime>
	char status = *strtok(NULL, ",");
 8002ff8:	493c      	ldr	r1, [pc, #240]	@ (80030ec <L76_ParseRMC+0x128>)
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f011 fe0e 	bl	8014c1c <strtok>
 8003000:	4603      	mov	r3, r0
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	76fb      	strb	r3, [r7, #27]
	const char *lat = strtok(NULL, ","); char lat_dir = *strtok(NULL, ",");
 8003006:	4939      	ldr	r1, [pc, #228]	@ (80030ec <L76_ParseRMC+0x128>)
 8003008:	2000      	movs	r0, #0
 800300a:	f011 fe07 	bl	8014c1c <strtok>
 800300e:	6178      	str	r0, [r7, #20]
 8003010:	4936      	ldr	r1, [pc, #216]	@ (80030ec <L76_ParseRMC+0x128>)
 8003012:	2000      	movs	r0, #0
 8003014:	f011 fe02 	bl	8014c1c <strtok>
 8003018:	4603      	mov	r3, r0
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	74fb      	strb	r3, [r7, #19]
	const char *lon = strtok(NULL, ","); char lon_dir = *strtok(NULL, ",");
 800301e:	4933      	ldr	r1, [pc, #204]	@ (80030ec <L76_ParseRMC+0x128>)
 8003020:	2000      	movs	r0, #0
 8003022:	f011 fdfb 	bl	8014c1c <strtok>
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4930      	ldr	r1, [pc, #192]	@ (80030ec <L76_ParseRMC+0x128>)
 800302a:	2000      	movs	r0, #0
 800302c:	f011 fdf6 	bl	8014c1c <strtok>
 8003030:	4603      	mov	r3, r0
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	72fb      	strb	r3, [r7, #11]
	data->speed = strtof(strtok(NULL, ","), NULL);
 8003036:	492d      	ldr	r1, [pc, #180]	@ (80030ec <L76_ParseRMC+0x128>)
 8003038:	2000      	movs	r0, #0
 800303a:	f011 fdef 	bl	8014c1c <strtok>
 800303e:	4603      	mov	r3, r0
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f010 fe44 	bl	8013cd0 <strtof>
 8003048:	eef0 7a40 	vmov.f32	s15, s0
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	edc3 7a06 	vstr	s15, [r3, #24]
	data->course = strtof(strtok(NULL, ","), NULL);
 8003052:	4926      	ldr	r1, [pc, #152]	@ (80030ec <L76_ParseRMC+0x128>)
 8003054:	2000      	movs	r0, #0
 8003056:	f011 fde1 	bl	8014c1c <strtok>
 800305a:	4603      	mov	r3, r0
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f010 fe36 	bl	8013cd0 <strtof>
 8003064:	eef0 7a40 	vmov.f32	s15, s0
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	edc3 7a07 	vstr	s15, [r3, #28]
	L76_ParseDate(strtok(NULL, ","), &data->day, &data->month, &data->year);
 800306e:	491f      	ldr	r1, [pc, #124]	@ (80030ec <L76_ParseRMC+0x128>)
 8003070:	2000      	movs	r0, #0
 8003072:	f011 fdd3 	bl	8014c1c <strtok>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	332a      	adds	r3, #42	@ 0x2a
 8003086:	f000 f914 	bl	80032b2 <L76_ParseDate>

	if (lat && lat_dir) data->latitude = L76_ConvertNMEADegrees(lat, lat_dir);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00e      	beq.n	80030ae <L76_ParseRMC+0xea>
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <L76_ParseRMC+0xea>
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	4619      	mov	r1, r3
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f000 f828 	bl	80030f0 <L76_ConvertNMEADegrees>
 80030a0:	eeb0 7a40 	vmov.f32	s14, s0
 80030a4:	eef0 7a60 	vmov.f32	s15, s1
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	ed83 7b00 	vstr	d7, [r3]
	if (lon && lon_dir) data->longitude = L76_ConvertNMEADegrees(lon, lon_dir);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <L76_ParseRMC+0x10e>
 80030b4:	7afb      	ldrb	r3, [r7, #11]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <L76_ParseRMC+0x10e>
 80030ba:	7afb      	ldrb	r3, [r7, #11]
 80030bc:	4619      	mov	r1, r3
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f816 	bl	80030f0 <L76_ConvertNMEADegrees>
 80030c4:	eeb0 7a40 	vmov.f32	s14, s0
 80030c8:	eef0 7a60 	vmov.f32	s15, s1
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	ed83 7b02 	vstr	d7, [r3, #8]
	if (status == 'V') {
 80030d2:	7efb      	ldrb	r3, [r7, #27]
 80030d4:	2b56      	cmp	r3, #86	@ 0x56
 80030d6:	d105      	bne.n	80030e4 <L76_ParseRMC+0x120>
		data->fix_quality = 0;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	751a      	strb	r2, [r3, #20]
		data->satellites = 0;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	755a      	strb	r2, [r3, #21]
	}
}
 80030e4:	bf00      	nop
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	08017a68 	.word	0x08017a68

080030f0 <L76_ConvertNMEADegrees>:

static double L76_ConvertNMEADegrees(const char *raw, char dir) {
 80030f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030f4:	b08a      	sub	sp, #40	@ 0x28
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
	double val = atof(raw);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f00f ffd0 	bl	80130a4 <atof>
 8003104:	ed87 0b08 	vstr	d0, [r7, #32]
	int deg = (int)(val / 100);
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <L76_ConvertNMEADegrees+0xb4>)
 800310e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003112:	f7fd fbbb 	bl	800088c <__aeabi_ddiv>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fd3b 	bl	8000b98 <__aeabi_d2iz>
 8003122:	4603      	mov	r3, r0
 8003124:	61fb      	str	r3, [r7, #28]
	double min = val - deg * 100;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2264      	movs	r2, #100	@ 0x64
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fa18 	bl	8000564 <__aeabi_i2d>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800313c:	f7fd f8c4 	bl	80002c8 <__aeabi_dsub>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double res = deg + min / 60.0;
 8003148:	69f8      	ldr	r0, [r7, #28]
 800314a:	f7fd fa0b 	bl	8000564 <__aeabi_i2d>
 800314e:	4680      	mov	r8, r0
 8003150:	4689      	mov	r9, r1
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <L76_ConvertNMEADegrees+0xb8>)
 8003158:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800315c:	f7fd fb96 	bl	800088c <__aeabi_ddiv>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4640      	mov	r0, r8
 8003166:	4649      	mov	r1, r9
 8003168:	f7fd f8b0 	bl	80002cc <__adddf3>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (dir == 'S' || dir == 'W') ? -res : res;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b53      	cmp	r3, #83	@ 0x53
 8003178:	d002      	beq.n	8003180 <L76_ConvertNMEADegrees+0x90>
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	2b57      	cmp	r3, #87	@ 0x57
 800317e:	d104      	bne.n	800318a <L76_ConvertNMEADegrees+0x9a>
 8003180:	68bc      	ldr	r4, [r7, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003188:	e001      	b.n	800318e <L76_ConvertNMEADegrees+0x9e>
 800318a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800318e:	ec45 4b17 	vmov	d7, r4, r5
}
 8003192:	eeb0 0a47 	vmov.f32	s0, s14
 8003196:	eef0 0a67 	vmov.f32	s1, s15
 800319a:	3728      	adds	r7, #40	@ 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031a2:	bf00      	nop
 80031a4:	40590000 	.word	0x40590000
 80031a8:	404e0000 	.word	0x404e0000

080031ac <L76_ParseTime>:

static void L76_ParseTime(const char *s, uint8_t *h, uint8_t *m, float *sec) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
	if (strlen(s) < 6) { *h = *m = 0; *sec = 0; return; }
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7fd f878 	bl	80002b0 <strlen>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d80b      	bhi.n	80031de <L76_ParseTime+0x32>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e066      	b.n	80032ac <L76_ParseTime+0x100>
	char b[3] = {0}; memcpy(b, s, 2); *h = atoi(b);
 80031de:	f107 0310 	add.w	r3, r7, #16
 80031e2:	2100      	movs	r1, #0
 80031e4:	460a      	mov	r2, r1
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	460a      	mov	r2, r1
 80031ea:	709a      	strb	r2, [r3, #2]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	823b      	strh	r3, [r7, #16]
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	4618      	mov	r0, r3
 80031fa:	f00f ff56 	bl	80130aa <atoi>
 80031fe:	4603      	mov	r3, r0
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	701a      	strb	r2, [r3, #0]
	memcpy(b, s + 2, 2); *m = atoi(b);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3302      	adds	r3, #2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	823b      	strh	r3, [r7, #16]
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4618      	mov	r0, r3
 8003216:	f00f ff48 	bl	80130aa <atoi>
 800321a:	4603      	mov	r3, r0
 800321c:	b2da      	uxtb	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	701a      	strb	r2, [r3, #0]
	memcpy(b, s + 4, 2); uint8_t si = atoi(b); float sf = 0.0f;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3304      	adds	r3, #4
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	823b      	strh	r3, [r7, #16]
 800322c:	f107 0310 	add.w	r3, r7, #16
 8003230:	4618      	mov	r0, r3
 8003232:	f00f ff3a 	bl	80130aa <atoi>
 8003236:	4603      	mov	r3, r0
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (s[6] == '.') {
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3306      	adds	r3, #6
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b2e      	cmp	r3, #46	@ 0x2e
 8003248:	d124      	bne.n	8003294 <L76_ParseTime+0xe8>
		const char *frac = s + 7;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3307      	adds	r3, #7
 800324e:	61bb      	str	r3, [r7, #24]
		if (*frac) {
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01d      	beq.n	8003294 <L76_ParseTime+0xe8>
			int fi = atoi(frac), len = strlen(frac);
 8003258:	69b8      	ldr	r0, [r7, #24]
 800325a:	f00f ff26 	bl	80130aa <atoi>
 800325e:	6178      	str	r0, [r7, #20]
 8003260:	69b8      	ldr	r0, [r7, #24]
 8003262:	f7fd f825 	bl	80002b0 <strlen>
 8003266:	4603      	mov	r3, r0
 8003268:	623b      	str	r3, [r7, #32]
			sf = (float)fi; while (len--) sf /= 10.0f;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003274:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8003278:	e007      	b.n	800328a <L76_ParseTime+0xde>
 800327a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800327e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003286:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	623a      	str	r2, [r7, #32]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f2      	bne.n	800327a <L76_ParseTime+0xce>
		}
	}
	*sec = si + sf;
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800329e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	edc3 7a00 	vstr	s15, [r3]
}
 80032ac:	3728      	adds	r7, #40	@ 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <L76_ParseDate>:

static void L76_ParseDate(const char *s, uint8_t *d, uint8_t *mo, uint16_t *y) {
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
	if (strlen(s) != 6) { *d = *mo = 0; *y = 0; return; }
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7fc fff5 	bl	80002b0 <strlen>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d00a      	beq.n	80032e2 <L76_ParseDate+0x30>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2200      	movs	r2, #0
 80032de:	801a      	strh	r2, [r3, #0]
 80032e0:	e03d      	b.n	800335e <L76_ParseDate+0xac>
	char b[3] = {0}; memcpy(b, s, 2); *d = atoi(b);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	2100      	movs	r1, #0
 80032e8:	460a      	mov	r2, r1
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	460a      	mov	r2, r1
 80032ee:	709a      	strb	r2, [r3, #2]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	82bb      	strh	r3, [r7, #20]
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4618      	mov	r0, r3
 80032fe:	f00f fed4 	bl	80130aa <atoi>
 8003302:	4603      	mov	r3, r0
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	701a      	strb	r2, [r3, #0]
	memcpy(b, s + 2, 2); *mo = atoi(b);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3302      	adds	r3, #2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	82bb      	strh	r3, [r7, #20]
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4618      	mov	r0, r3
 800331a:	f00f fec6 	bl	80130aa <atoi>
 800331e:	4603      	mov	r3, r0
 8003320:	b2da      	uxtb	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	701a      	strb	r2, [r3, #0]
	memcpy(b, s + 4, 2); uint8_t yy = atoi(b);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3304      	adds	r3, #4
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	82bb      	strh	r3, [r7, #20]
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4618      	mov	r0, r3
 8003336:	f00f feb8 	bl	80130aa <atoi>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]
	*y = (yy < 90) ? (2000 + yy) : (1900 + yy);
 800333e:	7dfb      	ldrb	r3, [r7, #23]
 8003340:	2b59      	cmp	r3, #89	@ 0x59
 8003342:	d805      	bhi.n	8003350 <L76_ParseDate+0x9e>
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800334c:	b29b      	uxth	r3, r3
 800334e:	e004      	b.n	800335a <L76_ParseDate+0xa8>
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8003358:	b29b      	uxth	r3, r3
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	8013      	strh	r3, [r2, #0]
}
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <MX_I2C1_Init+0x74>)
 800336a:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <MX_I2C1_Init+0x78>)
 800336c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <MX_I2C1_Init+0x74>)
 8003370:	4a1b      	ldr	r2, [pc, #108]	@ (80033e0 <MX_I2C1_Init+0x7c>)
 8003372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003374:	4b18      	ldr	r3, [pc, #96]	@ (80033d8 <MX_I2C1_Init+0x74>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800337a:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <MX_I2C1_Init+0x74>)
 800337c:	2201      	movs	r2, #1
 800337e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003380:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <MX_I2C1_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003386:	4b14      	ldr	r3, [pc, #80]	@ (80033d8 <MX_I2C1_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800338c:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <MX_I2C1_Init+0x74>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003392:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <MX_I2C1_Init+0x74>)
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003398:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <MX_I2C1_Init+0x74>)
 800339a:	2200      	movs	r2, #0
 800339c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800339e:	480e      	ldr	r0, [pc, #56]	@ (80033d8 <MX_I2C1_Init+0x74>)
 80033a0:	f004 f85e 	bl	8007460 <HAL_I2C_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033aa:	f000 ffb1 	bl	8004310 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ae:	2100      	movs	r1, #0
 80033b0:	4809      	ldr	r0, [pc, #36]	@ (80033d8 <MX_I2C1_Init+0x74>)
 80033b2:	f004 fde1 	bl	8007f78 <HAL_I2CEx_ConfigAnalogFilter>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033bc:	f000 ffa8 	bl	8004310 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033c0:	2100      	movs	r1, #0
 80033c2:	4805      	ldr	r0, [pc, #20]	@ (80033d8 <MX_I2C1_Init+0x74>)
 80033c4:	f004 fe23 	bl	800800e <HAL_I2CEx_ConfigDigitalFilter>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033ce:	f000 ff9f 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20005b5c 	.word	0x20005b5c
 80033dc:	40005400 	.word	0x40005400
 80033e0:	00c0eaff 	.word	0x00c0eaff

080033e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <MX_I2C3_Init+0x74>)
 80033ea:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <MX_I2C3_Init+0x78>)
 80033ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <MX_I2C3_Init+0x74>)
 80033f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <MX_I2C3_Init+0x7c>)
 80033f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80033f4:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <MX_I2C3_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <MX_I2C3_Init+0x74>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003400:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <MX_I2C3_Init+0x74>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003406:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <MX_I2C3_Init+0x74>)
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800340c:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <MX_I2C3_Init+0x74>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <MX_I2C3_Init+0x74>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003418:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <MX_I2C3_Init+0x74>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800341e:	480e      	ldr	r0, [pc, #56]	@ (8003458 <MX_I2C3_Init+0x74>)
 8003420:	f004 f81e 	bl	8007460 <HAL_I2C_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800342a:	f000 ff71 	bl	8004310 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800342e:	2100      	movs	r1, #0
 8003430:	4809      	ldr	r0, [pc, #36]	@ (8003458 <MX_I2C3_Init+0x74>)
 8003432:	f004 fda1 	bl	8007f78 <HAL_I2CEx_ConfigAnalogFilter>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800343c:	f000 ff68 	bl	8004310 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003440:	2100      	movs	r1, #0
 8003442:	4805      	ldr	r0, [pc, #20]	@ (8003458 <MX_I2C3_Init+0x74>)
 8003444:	f004 fde3 	bl	800800e <HAL_I2CEx_ConfigDigitalFilter>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800344e:	f000 ff5f 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20005bb0 	.word	0x20005bb0
 800345c:	40005c00 	.word	0x40005c00
 8003460:	00c0eaff 	.word	0x00c0eaff

08003464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b0ac      	sub	sp, #176	@ 0xb0
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800347c:	f107 0318 	add.w	r3, r7, #24
 8003480:	2284      	movs	r2, #132	@ 0x84
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f011 fba1 	bl	8014bcc <memset>
  if(i2cHandle->Instance==I2C1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a44      	ldr	r2, [pc, #272]	@ (80035a0 <HAL_I2C_MspInit+0x13c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d13d      	bne.n	8003510 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003494:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003498:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800349a:	2300      	movs	r3, #0
 800349c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349e:	f107 0318 	add.w	r3, r7, #24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f005 fef0 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80034ae:	f000 ff2f 	bl	8004310 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b2:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a3b      	ldr	r2, [pc, #236]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80034ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d2:	2312      	movs	r3, #18
 80034d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d8:	2301      	movs	r3, #1
 80034da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034e4:	2304      	movs	r3, #4
 80034e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034ee:	4619      	mov	r1, r3
 80034f0:	482d      	ldr	r0, [pc, #180]	@ (80035a8 <HAL_I2C_MspInit+0x144>)
 80034f2:	f003 fdd7 	bl	80070a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034f6:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 80034fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003500:	6413      	str	r3, [r2, #64]	@ 0x40
 8003502:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800350e:	e042      	b.n	8003596 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a25      	ldr	r2, [pc, #148]	@ (80035ac <HAL_I2C_MspInit+0x148>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d13d      	bne.n	8003596 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800351a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800351e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003526:	f107 0318 	add.w	r3, r7, #24
 800352a:	4618      	mov	r0, r3
 800352c:	f005 feac 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003536:	f000 feeb 	bl	8004310 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800353a:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 8003540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	4b17      	ldr	r3, [pc, #92]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003552:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355a:	2312      	movs	r3, #18
 800355c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003560:	2301      	movs	r3, #1
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800356c:	2304      	movs	r3, #4
 800356e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003572:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003576:	4619      	mov	r1, r3
 8003578:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <HAL_I2C_MspInit+0x14c>)
 800357a:	f003 fd93 	bl	80070a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800357e:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	4a08      	ldr	r2, [pc, #32]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 8003584:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003588:	6413      	str	r3, [r2, #64]	@ 0x40
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_I2C_MspInit+0x140>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
}
 8003596:	bf00      	nop
 8003598:	37b0      	adds	r7, #176	@ 0xb0
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40005400 	.word	0x40005400
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40005c00 	.word	0x40005c00
 80035b0:	40021c00 	.word	0x40021c00

080035b4 <inv_imu_sleep_us>:

#include "inv_imu_driver.h"
#include "inv_imu_version.h"

void inv_imu_sleep_us(inv_imu_device_t *s, uint32_t us)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	if (s->transport.sleep_us != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <inv_imu_sleep_us+0x1a>
		s->transport.sleep_us(us);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	4798      	blx	r3
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <inv_imu_soft_reset>:

int inv_imu_soft_reset(inv_imu_device_t *s)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b088      	sub	sp, #32
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
	int                 status = INV_IMU_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
	intf_config1_ovrd_t intf_config1_ovrd;
	drive_config0_t     drive_config0;
	reg_misc2_t         reg_misc2 = { 0 };
 80035e2:	2300      	movs	r3, #0
 80035e4:	743b      	strb	r3, [r7, #16]
	int1_status0_t      int1_status0;

	/* Save INTF_CONFIG1_OVRD register */
	status |= inv_imu_read_reg(s, INTF_CONFIG1_OVRD, 1, (uint8_t *)&intf_config1_ovrd);
 80035e6:	f107 0318 	add.w	r3, r7, #24
 80035ea:	2201      	movs	r2, #1
 80035ec:	212d      	movs	r1, #45	@ 0x2d
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 faaf 	bl	8003b52 <inv_imu_read_reg>
 80035f4:	4602      	mov	r2, r0
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61fb      	str	r3, [r7, #28]
	/* Save DRIVE_CONFIG0 register */
	status |= inv_imu_read_reg(s, DRIVE_CONFIG0, 1, (uint8_t *)&drive_config0);
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	2201      	movs	r2, #1
 8003602:	2132      	movs	r1, #50	@ 0x32
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 faa4 	bl	8003b52 <inv_imu_read_reg>
 800360a:	4602      	mov	r2, r0
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4313      	orrs	r3, r2
 8003610:	61fb      	str	r3, [r7, #28]

	/* Trigger soft reset */
	reg_misc2.soft_rst = 1;
 8003612:	7c3b      	ldrb	r3, [r7, #16]
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	743b      	strb	r3, [r7, #16]
	status |= inv_imu_write_reg(s, REG_MISC2, 1, (uint8_t *)&reg_misc2);
 800361a:	f107 0310 	add.w	r3, r7, #16
 800361e:	2201      	movs	r2, #1
 8003620:	217f      	movs	r1, #127	@ 0x7f
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fab6 	bl	8003b94 <inv_imu_write_reg>
 8003628:	4602      	mov	r2, r0
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]

	/* Wait 1 ms for soft reset to be effective */
	inv_imu_sleep_us(s, 1000);
 8003630:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffbd 	bl	80035b4 <inv_imu_sleep_us>

	/* Restore DRIVE_CONFIG0 register */
	status |= inv_imu_write_reg(s, DRIVE_CONFIG0, 1, (uint8_t *)&drive_config0);
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	2201      	movs	r2, #1
 8003640:	2132      	movs	r1, #50	@ 0x32
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 faa6 	bl	8003b94 <inv_imu_write_reg>
 8003648:	4602      	mov	r2, r0
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4313      	orrs	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]
	/* Restore INTF_CONFIG1_OVRD register */
	status |= inv_imu_write_reg(s, INTF_CONFIG1_OVRD, 1, (uint8_t *)&intf_config1_ovrd);
 8003650:	f107 0318 	add.w	r3, r7, #24
 8003654:	2201      	movs	r2, #1
 8003656:	212d      	movs	r1, #45	@ 0x2d
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa9b 	bl	8003b94 <inv_imu_write_reg>
 800365e:	4602      	mov	r2, r0
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4313      	orrs	r3, r2
 8003664:	61fb      	str	r3, [r7, #28]

	/* Clear the RESET_DONE interrupt */
	status |= inv_imu_read_reg(s, INT1_STATUS0, 1, (uint8_t *)&int1_status0);
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	2201      	movs	r2, #1
 800366c:	2119      	movs	r1, #25
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa6f 	bl	8003b52 <inv_imu_read_reg>
 8003674:	4602      	mov	r2, r0
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4313      	orrs	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
	if (int1_status0.int1_status_reset_done != 1)
 800367c:	7b3b      	ldrb	r3, [r7, #12]
 800367e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <inv_imu_soft_reset+0xb8>
		return INV_IMU_ERROR; /* Return an error if RESET_DONE is not set */
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	e000      	b.n	8003690 <inv_imu_soft_reset+0xba>

	return status;
 800368e:	69fb      	ldr	r3, [r7, #28]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <inv_imu_get_who_am_i>:

int inv_imu_get_who_am_i(inv_imu_device_t *s, uint8_t *who_am_i)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	int status;

	status = inv_imu_read_reg(s, WHO_AM_I, 1, who_am_i);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	2172      	movs	r1, #114	@ 0x72
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa52 	bl	8003b52 <inv_imu_read_reg>
 80036ae:	60f8      	str	r0, [r7, #12]

	/* AN-000364
	 * In I2C mode, after chip power-up, the host should perform one retry
	 * on the very first I2C transaction if it receives a NACK
	 */
	if (s->transport.serif_type == UI_I2C && status)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <inv_imu_get_who_am_i+0x34>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <inv_imu_get_who_am_i+0x34>
		status = inv_imu_read_reg(s, WHO_AM_I, 1, who_am_i);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	2172      	movs	r1, #114	@ 0x72
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa44 	bl	8003b52 <inv_imu_read_reg>
 80036ca:	60f8      	str	r0, [r7, #12]

	return status;
 80036cc:	68fb      	ldr	r3, [r7, #12]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <inv_imu_set_accel_mode>:

int inv_imu_set_accel_mode(inv_imu_device_t *s, pwr_mgmt0_accel_mode_t accel_mode)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	70fb      	strb	r3, [r7, #3]
	int         status = INV_IMU_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
	pwr_mgmt0_t pwr_mgmt0;

	status |= inv_imu_get_endianness(s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa12 	bl	8003b10 <inv_imu_get_endianness>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

	status |= inv_imu_read_reg(s, PWR_MGMT0, 1, (uint8_t *)&pwr_mgmt0);
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	2201      	movs	r2, #1
 80036fa:	2110      	movs	r1, #16
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fa28 	bl	8003b52 <inv_imu_read_reg>
 8003702:	4602      	mov	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
	pwr_mgmt0.accel_mode = accel_mode;
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	b2da      	uxtb	r2, r3
 8003712:	7a3b      	ldrb	r3, [r7, #8]
 8003714:	f362 0301 	bfi	r3, r2, #0, #2
 8003718:	723b      	strb	r3, [r7, #8]
	status |= inv_imu_write_reg(s, PWR_MGMT0, 1, (uint8_t *)&pwr_mgmt0);
 800371a:	f107 0308 	add.w	r3, r7, #8
 800371e:	2201      	movs	r2, #1
 8003720:	2110      	movs	r1, #16
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa36 	bl	8003b94 <inv_imu_write_reg>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

	return status;
 8003730:	68fb      	ldr	r3, [r7, #12]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <inv_imu_set_gyro_mode>:

int inv_imu_set_gyro_mode(inv_imu_device_t *s, pwr_mgmt0_gyro_mode_t gyro_mode)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	70fb      	strb	r3, [r7, #3]
	int         status = INV_IMU_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
	pwr_mgmt0_t pwr_mgmt0;

	status |= inv_imu_get_endianness(s);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9e0 	bl	8003b10 <inv_imu_get_endianness>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

	status |= inv_imu_read_reg(s, PWR_MGMT0, 1, (uint8_t *)&pwr_mgmt0);
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	2201      	movs	r2, #1
 800375e:	2110      	movs	r1, #16
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f9f6 	bl	8003b52 <inv_imu_read_reg>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
	pwr_mgmt0.gyro_mode = gyro_mode;
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	b2da      	uxtb	r2, r3
 8003776:	7a3b      	ldrb	r3, [r7, #8]
 8003778:	f362 0383 	bfi	r3, r2, #2, #2
 800377c:	723b      	strb	r3, [r7, #8]
	status |= inv_imu_write_reg(s, PWR_MGMT0, 1, (uint8_t *)&pwr_mgmt0);
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	2201      	movs	r2, #1
 8003784:	2110      	movs	r1, #16
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa04 	bl	8003b94 <inv_imu_write_reg>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

	return status;
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <inv_imu_set_accel_frequency>:

int inv_imu_set_accel_frequency(inv_imu_device_t *s, const accel_config0_accel_odr_t frequency)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	70fb      	strb	r3, [r7, #3]
	int             status = INV_IMU_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
	accel_config0_t accel_config0;

	status |= inv_imu_read_reg(s, ACCEL_CONFIG0, 1, (uint8_t *)&accel_config0);
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	2201      	movs	r2, #1
 80037b4:	211b      	movs	r1, #27
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9cb 	bl	8003b52 <inv_imu_read_reg>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
	accel_config0.accel_odr = frequency;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	7a3b      	ldrb	r3, [r7, #8]
 80037ce:	f362 0303 	bfi	r3, r2, #0, #4
 80037d2:	723b      	strb	r3, [r7, #8]
	status |= inv_imu_write_reg(s, ACCEL_CONFIG0, 1, (uint8_t *)&accel_config0);
 80037d4:	f107 0308 	add.w	r3, r7, #8
 80037d8:	2201      	movs	r2, #1
 80037da:	211b      	movs	r1, #27
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f9d9 	bl	8003b94 <inv_imu_write_reg>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

	return status;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <inv_imu_set_gyro_frequency>:

int inv_imu_set_gyro_frequency(inv_imu_device_t *s, const gyro_config0_gyro_odr_t frequency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
	int            status = INV_IMU_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
	gyro_config0_t gyro_config0;

	status |= inv_imu_read_reg(s, GYRO_CONFIG0, 1, (uint8_t *)&gyro_config0);
 8003804:	f107 0308 	add.w	r3, r7, #8
 8003808:	2201      	movs	r2, #1
 800380a:	211c      	movs	r1, #28
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9a0 	bl	8003b52 <inv_imu_read_reg>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
	gyro_config0.gyro_odr = frequency;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	7a3b      	ldrb	r3, [r7, #8]
 8003824:	f362 0303 	bfi	r3, r2, #0, #4
 8003828:	723b      	strb	r3, [r7, #8]
	status |= inv_imu_write_reg(s, GYRO_CONFIG0, 1, (uint8_t *)&gyro_config0);
 800382a:	f107 0308 	add.w	r3, r7, #8
 800382e:	2201      	movs	r2, #1
 8003830:	211c      	movs	r1, #28
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9ae 	bl	8003b94 <inv_imu_write_reg>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

	return status;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <inv_imu_set_accel_fsr>:

int inv_imu_set_accel_fsr(inv_imu_device_t *s, accel_config0_accel_ui_fs_sel_t accel_fsr)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	70fb      	strb	r3, [r7, #3]
	int             status = INV_IMU_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
	accel_config0_t accel_config0;

	status |= inv_imu_read_reg(s, ACCEL_CONFIG0, 1, (uint8_t *)&accel_config0);
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	2201      	movs	r2, #1
 8003860:	211b      	movs	r1, #27
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f975 	bl	8003b52 <inv_imu_read_reg>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
	accel_config0.accel_ui_fs_sel = accel_fsr;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	b2da      	uxtb	r2, r3
 8003878:	7a3b      	ldrb	r3, [r7, #8]
 800387a:	f362 1306 	bfi	r3, r2, #4, #3
 800387e:	723b      	strb	r3, [r7, #8]
	status |= inv_imu_write_reg(s, ACCEL_CONFIG0, 1, (uint8_t *)&accel_config0);
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	2201      	movs	r2, #1
 8003886:	211b      	movs	r1, #27
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f983 	bl	8003b94 <inv_imu_write_reg>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

	return status;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <inv_imu_set_gyro_fsr>:

int inv_imu_set_gyro_fsr(inv_imu_device_t *s, gyro_config0_gyro_ui_fs_sel_t gyro_fsr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
	int            status = INV_IMU_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
	gyro_config0_t gyro_config0;

	status |= inv_imu_read_reg(s, GYRO_CONFIG0, 1, (uint8_t *)&gyro_config0);
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	2201      	movs	r2, #1
 80038b6:	211c      	movs	r1, #28
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f94a 	bl	8003b52 <inv_imu_read_reg>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
	gyro_config0.gyro_ui_fs_sel = gyro_fsr;
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	7a3b      	ldrb	r3, [r7, #8]
 80038d0:	f362 1307 	bfi	r3, r2, #4, #4
 80038d4:	723b      	strb	r3, [r7, #8]
	status |= inv_imu_write_reg(s, GYRO_CONFIG0, 1, (uint8_t *)&gyro_config0);
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	2201      	movs	r2, #1
 80038dc:	211c      	movs	r1, #28
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f958 	bl	8003b94 <inv_imu_write_reg>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

	return status;
 80038ec:	68fb      	ldr	r3, [r7, #12]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <inv_imu_get_register_data>:

	return status;
}

int inv_imu_get_register_data(inv_imu_device_t *s, inv_imu_sensor_data_t *data)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
	int status = INV_IMU_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

	status |= inv_imu_read_reg(s, ACCEL_DATA_X1_UI, sizeof(inv_imu_sensor_data_t), (uint8_t *)data);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	220e      	movs	r2, #14
 8003908:	2100      	movs	r1, #0
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f921 	bl	8003b52 <inv_imu_read_reg>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

	/* Format accel data from sensor registers. */
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->accel_data[0],
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7c5b      	ldrb	r3, [r3, #17]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <inv_imu_get_register_data+0x44>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b21b      	sxth	r3, r3
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	b21a      	sxth	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b21b      	sxth	r3, r3
 8003932:	4313      	orrs	r3, r2
 8003934:	b21b      	sxth	r3, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	e00b      	b.n	8003952 <inv_imu_get_register_data+0x5c>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b21b      	sxth	r3, r3
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	b21a      	sxth	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b21b      	sxth	r3, r3
 800394c:	4313      	orrs	r3, r2
 800394e:	b21b      	sxth	r3, r3
 8003950:	b29b      	uxth	r3, r3
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->accel_data[0]);
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->accel_data[1],
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7c5b      	ldrb	r3, [r3, #17]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10e      	bne.n	800397c <inv_imu_get_register_data+0x86>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	3302      	adds	r3, #2
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b21b      	sxth	r3, r3
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	b21a      	sxth	r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	3302      	adds	r3, #2
 800396e:	3301      	adds	r3, #1
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b21b      	sxth	r3, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	b21b      	sxth	r3, r3
 8003978:	b29b      	uxth	r3, r3
 800397a:	e00d      	b.n	8003998 <inv_imu_get_register_data+0xa2>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	3302      	adds	r3, #2
 8003980:	3301      	adds	r3, #1
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b21b      	sxth	r3, r3
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	b21a      	sxth	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	3302      	adds	r3, #2
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b21b      	sxth	r3, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	b21b      	sxth	r3, r3
 8003996:	b29b      	uxth	r3, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	3202      	adds	r2, #2
 800399c:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->accel_data[1]);
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->accel_data[2],
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7c5b      	ldrb	r3, [r3, #17]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10e      	bne.n	80039c4 <inv_imu_get_register_data+0xce>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b21b      	sxth	r3, r3
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	b21a      	sxth	r2, r3
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	3304      	adds	r3, #4
 80039b6:	3301      	adds	r3, #1
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	4313      	orrs	r3, r2
 80039be:	b21b      	sxth	r3, r3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	e00d      	b.n	80039e0 <inv_imu_get_register_data+0xea>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	3304      	adds	r3, #4
 80039c8:	3301      	adds	r3, #1
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b21b      	sxth	r3, r3
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	b21a      	sxth	r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b21b      	sxth	r3, r3
 80039da:	4313      	orrs	r3, r2
 80039dc:	b21b      	sxth	r3, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3204      	adds	r2, #4
 80039e4:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->accel_data[2]);
	/* Format gyro data from sensor registers. */
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->gyro_data[0],
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7c5b      	ldrb	r3, [r3, #17]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10e      	bne.n	8003a0c <inv_imu_get_register_data+0x116>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	3306      	adds	r3, #6
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3306      	adds	r3, #6
 80039fe:	3301      	adds	r3, #1
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	e00d      	b.n	8003a28 <inv_imu_get_register_data+0x132>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	3306      	adds	r3, #6
 8003a10:	3301      	adds	r3, #1
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b21b      	sxth	r3, r3
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b21a      	sxth	r2, r3
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	3306      	adds	r3, #6
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b21b      	sxth	r3, r3
 8003a22:	4313      	orrs	r3, r2
 8003a24:	b21b      	sxth	r3, r3
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	3206      	adds	r2, #6
 8003a2c:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->gyro_data[0]);
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->gyro_data[1],
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7c5b      	ldrb	r3, [r3, #17]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d10e      	bne.n	8003a54 <inv_imu_get_register_data+0x15e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b21b      	sxth	r3, r3
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	b21a      	sxth	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	3301      	adds	r3, #1
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	e00d      	b.n	8003a70 <inv_imu_get_register_data+0x17a>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	3301      	adds	r3, #1
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b21a      	sxth	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b21b      	sxth	r3, r3
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	b21b      	sxth	r3, r3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	3208      	adds	r2, #8
 8003a74:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->gyro_data[1]);
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->gyro_data[2],
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7c5b      	ldrb	r3, [r3, #17]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10e      	bne.n	8003a9c <inv_imu_get_register_data+0x1a6>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	330a      	adds	r3, #10
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	b21a      	sxth	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	330a      	adds	r3, #10
 8003a8e:	3301      	adds	r3, #1
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b21b      	sxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	e00d      	b.n	8003ab8 <inv_imu_get_register_data+0x1c2>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	330a      	adds	r3, #10
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b21b      	sxth	r3, r3
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	b21a      	sxth	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	330a      	adds	r3, #10
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b21b      	sxth	r3, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	320a      	adds	r2, #10
 8003abc:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->gyro_data[2]);
	/* Format temperature data from sensor registers. */
	FORMAT_16_BITS_DATA(s->endianness_data, (uint8_t *)&data->temp_data,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7c5b      	ldrb	r3, [r3, #17]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10e      	bne.n	8003ae4 <inv_imu_get_register_data+0x1ee>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b21b      	sxth	r3, r3
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	e00d      	b.n	8003b00 <inv_imu_get_register_data+0x20a>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	3301      	adds	r3, #1
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b21b      	sxth	r3, r3
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	b21a      	sxth	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	4313      	orrs	r3, r2
 8003afc:	b21b      	sxth	r3, r3
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	320c      	adds	r2, #12
 8003b04:	8013      	strh	r3, [r2, #0]
	                    (uint16_t *)&data->temp_data);

	return status;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <inv_imu_get_endianness>:

	return status;
}

int inv_imu_get_endianness(inv_imu_device_t *s)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	int         status = INV_IMU_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
	sreg_ctrl_t sreg_ctrl;

	status |= inv_imu_read_reg(s, SREG_CTRL, 1, (uint8_t *)&sreg_ctrl);
 8003b1c:	f107 0308 	add.w	r3, r7, #8
 8003b20:	2201      	movs	r2, #1
 8003b22:	f24a 2167 	movw	r1, #41575	@ 0xa267
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f813 	bl	8003b52 <inv_imu_read_reg>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
	if (!status)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <inv_imu_get_endianness+0x38>
		s->endianness_data = sreg_ctrl.sreg_data_endian_sel;
 8003b3a:	7a3b      	ldrb	r3, [r7, #8]
 8003b3c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	745a      	strb	r2, [r3, #17]

	return status;
 8003b48:	68fb      	ldr	r3, [r7, #12]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <inv_imu_read_reg>:
static int check_out_of_bounds_mreg(uint32_t reg, uint32_t len);
static int write_mreg(inv_imu_transport_t *t, uint32_t reg, uint32_t len, const uint8_t *buf);
static int read_mreg(inv_imu_transport_t *t, uint32_t reg, uint32_t len, uint8_t *buf);

int inv_imu_read_reg(void *t, uint32_t reg, uint32_t len, uint8_t *buf)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	603b      	str	r3, [r7, #0]
	inv_imu_transport_t *tr = (inv_imu_transport_t *)t;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	617b      	str	r3, [r7, #20]
	if (reg > 0xFF)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2bff      	cmp	r3, #255	@ 0xff
 8003b68:	d908      	bls.n	8003b7c <inv_imu_read_reg+0x2a>
		return read_mreg(tr, reg & 0xFFFF, len, buf);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	b299      	uxth	r1, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f000 f8b0 	bl	8003cd8 <read_mreg>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	e007      	b.n	8003b8c <inv_imu_read_reg+0x3a>
	else
		return read_dreg(tr, reg, len, buf);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	b2d9      	uxtb	r1, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6978      	ldr	r0, [r7, #20]
 8003b86:	f000 f825 	bl	8003bd4 <read_dreg>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <inv_imu_write_reg>:

int inv_imu_write_reg(void *t, uint32_t reg, uint32_t len, const uint8_t *buf)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
	inv_imu_transport_t *tr = (inv_imu_transport_t *)t;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	617b      	str	r3, [r7, #20]
	if (reg > 0xFF)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2bff      	cmp	r3, #255	@ 0xff
 8003baa:	d907      	bls.n	8003bbc <inv_imu_write_reg+0x28>
		return write_mreg(tr, reg, len, buf);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	f000 f8e0 	bl	8003d78 <write_mreg>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	e007      	b.n	8003bcc <inv_imu_write_reg+0x38>
	else
		return write_dreg(tr, reg, len, buf);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	b2d9      	uxtb	r1, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6978      	ldr	r0, [r7, #20]
 8003bc6:	f000 f81e 	bl	8003c06 <write_dreg>
 8003bca:	4603      	mov	r3, r0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <read_dreg>:
/*
 * Static functions implementation
 */

static int read_dreg(inv_imu_transport_t *t, uint8_t reg, uint32_t len, uint8_t *buf)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	72fb      	strb	r3, [r7, #11]
	if (t->read_reg(reg, buf, len) != 0)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	7af8      	ldrb	r0, [r7, #11]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	4798      	blx	r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <read_dreg+0x28>
		return INV_IMU_ERROR_TRANSPORT;
 8003bf6:	f06f 0302 	mvn.w	r3, #2
 8003bfa:	e000      	b.n	8003bfe <read_dreg+0x2a>

	return INV_IMU_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <write_dreg>:

static int write_dreg(inv_imu_transport_t *t, uint8_t reg, uint32_t len, const uint8_t *buf)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	460b      	mov	r3, r1
 8003c14:	72fb      	strb	r3, [r7, #11]
	if (t->write_reg(reg, buf, len) != 0)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	7af8      	ldrb	r0, [r7, #11]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6839      	ldr	r1, [r7, #0]
 8003c20:	4798      	blx	r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <write_dreg+0x28>
		return INV_IMU_ERROR_TRANSPORT;
 8003c28:	f06f 0302 	mvn.w	r3, #2
 8003c2c:	e000      	b.n	8003c30 <write_dreg+0x2a>

	return INV_IMU_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <check_out_of_bounds_mreg>:

static int check_out_of_bounds_mreg(uint32_t reg, uint32_t len)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	uint32_t min_addr = reg;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
	uint32_t max_addr = reg + len - 1;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]
	 * - From 0x000023FF to 0x00003FFF
	 * - From 0x000083FF to 0x00009FFF
	 * - From 0x0000AFFF to 0xFFFFFFFF
	 * If user happens to access this space, soft reset is needed after the access to recover from stall.
	 */
	if (((min_addr > 0x000023FF) && (min_addr <= 0x00003FFF)) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8003c56:	d303      	bcc.n	8003c60 <check_out_of_bounds_mreg+0x28>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c5e:	d30f      	bcc.n	8003c80 <check_out_of_bounds_mreg+0x48>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8003c66:	d303      	bcc.n	8003c70 <check_out_of_bounds_mreg+0x38>
	    ((max_addr > 0x000023FF) && (max_addr <= 0x00003FFF)) ||
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c6e:	d307      	bcc.n	8003c80 <check_out_of_bounds_mreg+0x48>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8003c76:	d206      	bcs.n	8003c86 <check_out_of_bounds_mreg+0x4e>
	    ((min_addr <= 0x000023FF) && (max_addr > 0x00003FFF)))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c7e:	d302      	bcc.n	8003c86 <check_out_of_bounds_mreg+0x4e>
		return INV_IMU_ERROR_TRANSPORT;
 8003c80:	f06f 0302 	mvn.w	r3, #2
 8003c84:	e022      	b.n	8003ccc <check_out_of_bounds_mreg+0x94>
	if (((min_addr > 0x000083FF) && (min_addr <= 0x00009FFF)) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f5b3 4f04 	cmp.w	r3, #33792	@ 0x8400
 8003c8c:	d303      	bcc.n	8003c96 <check_out_of_bounds_mreg+0x5e>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003c94:	d30f      	bcc.n	8003cb6 <check_out_of_bounds_mreg+0x7e>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f5b3 4f04 	cmp.w	r3, #33792	@ 0x8400
 8003c9c:	d303      	bcc.n	8003ca6 <check_out_of_bounds_mreg+0x6e>
	    ((max_addr > 0x000083FF) && (max_addr <= 0x00009FFF)) ||
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ca4:	d307      	bcc.n	8003cb6 <check_out_of_bounds_mreg+0x7e>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f5b3 4f04 	cmp.w	r3, #33792	@ 0x8400
 8003cac:	d206      	bcs.n	8003cbc <check_out_of_bounds_mreg+0x84>
	    ((min_addr <= 0x000083FF) && (max_addr > 0x00009FFF)))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003cb4:	d302      	bcc.n	8003cbc <check_out_of_bounds_mreg+0x84>
		return INV_IMU_ERROR_TRANSPORT;
 8003cb6:	f06f 0302 	mvn.w	r3, #2
 8003cba:	e007      	b.n	8003ccc <check_out_of_bounds_mreg+0x94>
	if (max_addr > 0x0000AFFF)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 8003cc2:	d302      	bcc.n	8003cca <check_out_of_bounds_mreg+0x92>
		return INV_IMU_ERROR_TRANSPORT;
 8003cc4:	f06f 0302 	mvn.w	r3, #2
 8003cc8:	e000      	b.n	8003ccc <check_out_of_bounds_mreg+0x94>

	return INV_IMU_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <read_mreg>:

static int read_mreg(inv_imu_transport_t *t, uint32_t reg, uint32_t len, uint8_t *buf)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
	int     status = INV_IMU_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
	uint8_t data[2];

	status |= check_out_of_bounds_mreg(reg, len);
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	68b8      	ldr	r0, [r7, #8]
 8003cee:	f7ff ffa3 	bl	8003c38 <check_out_of_bounds_mreg>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61fb      	str	r3, [r7, #28]
	if (status)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <read_mreg+0x2c>
		return status;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	e035      	b.n	8003d70 <read_mreg+0x98>

	/* Write address first */
	data[0] = (reg & 0xFF00) >> 8;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	753b      	strb	r3, [r7, #20]
	data[1] = reg & 0xFF;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	757b      	strb	r3, [r7, #21]
	t->sleep_us(4);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2004      	movs	r0, #4
 8003d18:	4798      	blx	r3
	status |= write_dreg(t, IREG_ADDR_15_8, 2, data);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	2202      	movs	r2, #2
 8003d20:	217c      	movs	r1, #124	@ 0x7c
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ff6f 	bl	8003c06 <write_dreg>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]

	if (status)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <read_mreg+0x62>
		return status;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	e01a      	b.n	8003d70 <read_mreg+0x98>

	/* Read all bytes one by one */
	for (uint32_t i = 0; i < len; i++) {
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e012      	b.n	8003d66 <read_mreg+0x8e>
		t->sleep_us(4);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2004      	movs	r0, #4
 8003d46:	4798      	blx	r3
		status |= read_dreg(t, IREG_DATA, 1, &buf[i]);
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	2201      	movs	r2, #1
 8003d50:	217e      	movs	r1, #126	@ 0x7e
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff3e 	bl	8003bd4 <read_dreg>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < len; i++) {
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3e8      	bcc.n	8003d40 <read_mreg+0x68>
	}

	return status;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <write_mreg>:

static int write_mreg(inv_imu_transport_t *t, uint32_t reg, uint32_t len, const uint8_t *buf)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
	int     status = INV_IMU_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
	uint8_t data[3];

	status |= check_out_of_bounds_mreg(reg, len);
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	68b8      	ldr	r0, [r7, #8]
 8003d8e:	f7ff ff53 	bl	8003c38 <check_out_of_bounds_mreg>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61fb      	str	r3, [r7, #28]
	if (status)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <write_mreg+0x2c>
		return status;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	e03c      	b.n	8003e1e <write_mreg+0xa6>

	/* First two bytes are the address where we want to write */
	data[0] = (reg & 0xFF00) >> 8;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	753b      	strb	r3, [r7, #20]
	data[1] = reg & 0xFF;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	757b      	strb	r3, [r7, #21]
	/* 3rd byte is the first data to write*/
	data[2] = buf[0];
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	75bb      	strb	r3, [r7, #22]

	/* Burst write address and first byte */
	t->sleep_us(4);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2004      	movs	r0, #4
 8003dbe:	4798      	blx	r3
	status |= write_dreg(t, IREG_ADDR_15_8, 3, data);
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	217c      	movs	r1, #124	@ 0x7c
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ff1c 	bl	8003c06 <write_dreg>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61fb      	str	r3, [r7, #28]
	t->sleep_us(4);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2004      	movs	r0, #4
 8003ddc:	4798      	blx	r3

	if (status)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <write_mreg+0x70>
		return status;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	e01a      	b.n	8003e1e <write_mreg+0xa6>

	/* Loop on the remaining bytes */
	for (uint32_t i = 1; i < len; i++) {
 8003de8:	2301      	movs	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e012      	b.n	8003e14 <write_mreg+0x9c>
		status |= write_dreg(t, IREG_DATA, 1, &buf[i]);
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	2201      	movs	r2, #1
 8003df6:	217e      	movs	r1, #126	@ 0x7e
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff ff04 	bl	8003c06 <write_dreg>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61fb      	str	r3, [r7, #28]
		t->sleep_us(4);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2004      	movs	r0, #4
 8003e0c:	4798      	blx	r3
	for (uint32_t i = 1; i < len; i++) {
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3e8      	bcc.n	8003dee <write_mreg+0x76>
	}

	return status;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08e      	sub	sp, #56	@ 0x38
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	2234      	movs	r2, #52	@ 0x34
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f010 fec9 	bl	8014bcc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003f28 <MX_LTDC_Init+0x100>)
 8003e3e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003e40:	4b38      	ldr	r3, [pc, #224]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003e4c:	4b35      	ldr	r3, [pc, #212]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003e52:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8003e58:	4b32      	ldr	r3, [pc, #200]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e5a:	2228      	movs	r2, #40	@ 0x28
 8003e5c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8003e5e:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e60:	2209      	movs	r2, #9
 8003e62:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003e64:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e66:	2235      	movs	r2, #53	@ 0x35
 8003e68:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e6c:	220b      	movs	r2, #11
 8003e6e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8003e70:	4b2c      	ldr	r3, [pc, #176]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e72:	f240 2215 	movw	r2, #533	@ 0x215
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003e78:	4b2a      	ldr	r3, [pc, #168]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e7a:	f240 121b 	movw	r2, #283	@ 0x11b
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8003e80:	4b28      	ldr	r3, [pc, #160]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e82:	f240 2235 	movw	r2, #565	@ 0x235
 8003e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003e88:	4b26      	ldr	r3, [pc, #152]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e8a:	f240 121d 	movw	r2, #285	@ 0x11d
 8003e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003e90:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003e98:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003ea0:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003ea8:	481e      	ldr	r0, [pc, #120]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003eaa:	f004 f8fc 	bl	80080a6 <HAL_LTDC_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003eb4:	f000 fa2c 	bl	8004310 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003ebc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003ec0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003ec6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003eca:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003ed0:	23ff      	movs	r3, #255	@ 0xff
 8003ed2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003ed8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003edc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003ede:	2307      	movs	r3, #7
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003ee2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8003ee8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8003eee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4805      	ldr	r0, [pc, #20]	@ (8003f24 <MX_LTDC_Init+0xfc>)
 8003f0e:	f004 fa29 	bl	8008364 <HAL_LTDC_ConfigLayer>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8003f18:	f000 f9fa 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003f1c:	bf00      	nop
 8003f1e:	3738      	adds	r7, #56	@ 0x38
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20005c04 	.word	0x20005c04
 8003f28:	40016800 	.word	0x40016800

08003f2c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08e      	sub	sp, #56	@ 0x38
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a55      	ldr	r2, [pc, #340]	@ (80040a0 <HAL_LTDC_MspInit+0x174>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f040 80a3 	bne.w	8004096 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f50:	4b54      	ldr	r3, [pc, #336]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	4a53      	ldr	r2, [pc, #332]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f5c:	4b51      	ldr	r3, [pc, #324]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f64:	623b      	str	r3, [r7, #32]
 8003f66:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f68:	4b4e      	ldr	r3, [pc, #312]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f6e:	f043 0310 	orr.w	r3, r3, #16
 8003f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f74:	4b4b      	ldr	r3, [pc, #300]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f80:	4b48      	ldr	r3, [pc, #288]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	4a47      	ldr	r2, [pc, #284]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f8c:	4b45      	ldr	r3, [pc, #276]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003f98:	4b42      	ldr	r3, [pc, #264]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	4a41      	ldr	r2, [pc, #260]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fbc:	4b39      	ldr	r3, [pc, #228]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003fc8:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	4a35      	ldr	r2, [pc, #212]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd4:	4b33      	ldr	r3, [pc, #204]	@ (80040a4 <HAL_LTDC_MspInit+0x178>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fec:	2300      	movs	r3, #0
 8003fee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ff0:	230e      	movs	r3, #14
 8003ff2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	482b      	ldr	r0, [pc, #172]	@ (80040a8 <HAL_LTDC_MspInit+0x17c>)
 8003ffc:	f003 f852 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004000:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004006:	2302      	movs	r3, #2
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	2300      	movs	r3, #0
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400e:	2300      	movs	r3, #0
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004012:	230e      	movs	r3, #14
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800401a:	4619      	mov	r1, r3
 800401c:	4823      	ldr	r0, [pc, #140]	@ (80040ac <HAL_LTDC_MspInit+0x180>)
 800401e:	f003 f841 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004022:	23f7      	movs	r3, #247	@ 0xf7
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004032:	230e      	movs	r3, #14
 8004034:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800403a:	4619      	mov	r1, r3
 800403c:	481c      	ldr	r0, [pc, #112]	@ (80040b0 <HAL_LTDC_MspInit+0x184>)
 800403e:	f003 f831 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004048:	2302      	movs	r3, #2
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	2300      	movs	r3, #0
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004054:	2309      	movs	r3, #9
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405c:	4619      	mov	r1, r3
 800405e:	4815      	ldr	r0, [pc, #84]	@ (80040b4 <HAL_LTDC_MspInit+0x188>)
 8004060:	f003 f820 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004064:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2300      	movs	r3, #0
 8004074:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004076:	230e      	movs	r3, #14
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800407a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800407e:	4619      	mov	r1, r3
 8004080:	480d      	ldr	r0, [pc, #52]	@ (80040b8 <HAL_LTDC_MspInit+0x18c>)
 8004082:	f003 f80f 	bl	80070a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004086:	2200      	movs	r2, #0
 8004088:	2105      	movs	r1, #5
 800408a:	2058      	movs	r0, #88	@ 0x58
 800408c:	f002 f80e 	bl	80060ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004090:	2058      	movs	r0, #88	@ 0x58
 8004092:	f002 f827 	bl	80060e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8004096:	bf00      	nop
 8004098:	3738      	adds	r7, #56	@ 0x38
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40016800 	.word	0x40016800
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40022400 	.word	0x40022400
 80040b0:	40022800 	.word	0x40022800
 80040b4:	40021800 	.word	0x40021800
 80040b8:	40022000 	.word	0x40022000

080040bc <DWT_Init>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void DWT_Init(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable trace and debug blocks
 80040c0:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <DWT_Init+0x2c>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <DWT_Init+0x2c>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                // Clear cycle counter
 80040cc:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <DWT_Init+0x30>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable cycle counter
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <DWT_Init+0x30>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a05      	ldr	r2, [pc, #20]	@ (80040ec <DWT_Init+0x30>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000edf0 	.word	0xe000edf0
 80040ec:	e0001000 	.word	0xe0001000

080040f0 <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80040f8:	1d39      	adds	r1, r7, #4
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	2201      	movs	r2, #1
 8004100:	4803      	ldr	r0, [pc, #12]	@ (8004110 <__io_putchar+0x20>)
 8004102:	f009 fd77 	bl	800dbf4 <HAL_UART_Transmit>
    return ch;
 8004106:	687b      	ldr	r3, [r7, #4]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20006170 	.word	0x20006170

08004114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004118:	f001 fc27 	bl	800596a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800411c:	f000 f842 	bl	80041a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004120:	f000 f8b2 	bl	8004288 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004124:	f7fe f9d2 	bl	80024cc <MX_GPIO_Init>
  MX_ADC3_Init();
 8004128:	f7fd fb54 	bl	80017d4 <MX_ADC3_Init>
  MX_CRC_Init();
 800412c:	f7fd fbe4 	bl	80018f8 <MX_CRC_Init>
  MX_DCMI_Init();
 8004130:	f7fd fc24 	bl	800197c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8004134:	f7fd fd14 	bl	8001b60 <MX_DMA2D_Init>
  MX_ETH_Init();
 8004138:	f7fd fd6a 	bl	8001c10 <MX_ETH_Init>
  MX_FMC_Init();
 800413c:	f7fd fe4e 	bl	8001ddc <MX_FMC_Init>
  MX_I2C1_Init();
 8004140:	f7ff f910 	bl	8003364 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004144:	f7ff f94e 	bl	80033e4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8004148:	f7ff fe6e 	bl	8003e28 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800414c:	f000 f8e6 	bl	800431c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8004150:	f000 f9a0 	bl	8004494 <MX_RTC_Init>
  MX_SAI2_Init();
 8004154:	f000 fa70 	bl	8004638 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8004158:	f000 fb80 	bl	800485c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800415c:	f000 fc02 	bl	8004964 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8004160:	f000 fc94 	bl	8004a8c <MX_SPI2_Init>
  MX_TIM1_Init();
 8004164:	f000 fef0 	bl	8004f48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004168:	f000 ff9a 	bl	80050a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800416c:	f001 f80e 	bl	800518c <MX_TIM3_Init>
  MX_TIM5_Init();
 8004170:	f001 f884 	bl	800527c <MX_TIM5_Init>
  MX_TIM8_Init();
 8004174:	f001 f8d0 	bl	8005318 <MX_TIM8_Init>
  MX_TIM12_Init();
 8004178:	f001 f922 	bl	80053c0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800417c:	f001 fa9c 	bl	80056b8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004180:	f001 faca 	bl	8005718 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8004184:	f00b fe14 	bl	800fdb0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart6, &rx, 1);
//  const char *msg = "STM32 OK\r\n";
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  printf("stm32 started.\r\n");
 8004188:	4805      	ldr	r0, [pc, #20]	@ (80041a0 <main+0x8c>)
 800418a:	f010 fc09 	bl	80149a0 <puts>
  DWT_Init();
 800418e:	f7ff ff95 	bl	80040bc <DWT_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004192:	f7fd ffb3 	bl	80020fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004196:	f00c f8e0 	bl	801035a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <main+0x86>
 800419e:	bf00      	nop
 80041a0:	08017a6c 	.word	0x08017a6c

080041a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b094      	sub	sp, #80	@ 0x50
 80041a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041aa:	f107 0320 	add.w	r3, r7, #32
 80041ae:	2230      	movs	r2, #48	@ 0x30
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f010 fd0a 	bl	8014bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041b8:	f107 030c 	add.w	r3, r7, #12
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80041c8:	f004 fa80 	bl	80086cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004280 <SystemClock_Config+0xdc>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004280 <SystemClock_Config+0xdc>)
 80041d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d8:	4b29      	ldr	r3, [pc, #164]	@ (8004280 <SystemClock_Config+0xdc>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041e4:	4b27      	ldr	r3, [pc, #156]	@ (8004284 <SystemClock_Config+0xe0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <SystemClock_Config+0xe0>)
 80041ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <SystemClock_Config+0xe0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80041fc:	2309      	movs	r3, #9
 80041fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004206:	2301      	movs	r3, #1
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800420a:	2302      	movs	r3, #2
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800420e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004214:	2319      	movs	r3, #25
 8004216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8004218:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800421c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800421e:	2302      	movs	r3, #2
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004222:	2309      	movs	r3, #9
 8004224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fb70 	bl	8008910 <HAL_RCC_OscConfig>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004236:	f000 f86b 	bl	8004310 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800423a:	f004 fa57 	bl	80086ec <HAL_PWREx_EnableOverDrive>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004244:	f000 f864 	bl	8004310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004248:	230f      	movs	r3, #15
 800424a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800424c:	2302      	movs	r3, #2
 800424e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004254:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800425a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800425e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004260:	f107 030c 	add.w	r3, r7, #12
 8004264:	2106      	movs	r1, #6
 8004266:	4618      	mov	r0, r3
 8004268:	f004 fdf6 	bl	8008e58 <HAL_RCC_ClockConfig>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8004272:	f000 f84d 	bl	8004310 <Error_Handler>
  }
}
 8004276:	bf00      	nop
 8004278:	3750      	adds	r7, #80	@ 0x50
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	40007000 	.word	0x40007000

08004288 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0a2      	sub	sp, #136	@ 0x88
 800428c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	2284      	movs	r2, #132	@ 0x84
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f010 fc99 	bl	8014bcc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800429a:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <PeriphCommonClock_Config+0x60>)
 800429c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800429e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80042a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80042a4:	2305      	movs	r3, #5
 80042a6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80042a8:	2302      	movs	r3, #2
 80042aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80042ac:	2303      	movs	r3, #3
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80042b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042b8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80042ba:	2300      	movs	r3, #0
 80042bc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80042be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	4618      	mov	r0, r3
 80042d0:	f004 ffda 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80042da:	f000 f819 	bl	8004310 <Error_Handler>
  }
}
 80042de:	bf00      	nop
 80042e0:	3788      	adds	r7, #136	@ 0x88
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	00b00008 	.word	0x00b00008

080042ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a04      	ldr	r2, [pc, #16]	@ (800430c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80042fe:	f001 fb41 	bl	8005984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40001000 	.word	0x40001000

08004310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004314:	b672      	cpsid	i
}
 8004316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <Error_Handler+0x8>

0800431c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <MX_QUADSPI_Init+0x50>)
 8004322:	4a13      	ldr	r2, [pc, #76]	@ (8004370 <MX_QUADSPI_Init+0x54>)
 8004324:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8004326:	4b11      	ldr	r3, [pc, #68]	@ (800436c <MX_QUADSPI_Init+0x50>)
 8004328:	2201      	movs	r2, #1
 800432a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800432c:	4b0f      	ldr	r3, [pc, #60]	@ (800436c <MX_QUADSPI_Init+0x50>)
 800432e:	2204      	movs	r2, #4
 8004330:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004332:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <MX_QUADSPI_Init+0x50>)
 8004334:	2210      	movs	r2, #16
 8004336:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <MX_QUADSPI_Init+0x50>)
 800433a:	2218      	movs	r2, #24
 800433c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800433e:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <MX_QUADSPI_Init+0x50>)
 8004340:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8004344:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <MX_QUADSPI_Init+0x50>)
 8004348:	2200      	movs	r2, #0
 800434a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800434c:	4b07      	ldr	r3, [pc, #28]	@ (800436c <MX_QUADSPI_Init+0x50>)
 800434e:	2200      	movs	r2, #0
 8004350:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <MX_QUADSPI_Init+0x50>)
 8004354:	2200      	movs	r2, #0
 8004356:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004358:	4804      	ldr	r0, [pc, #16]	@ (800436c <MX_QUADSPI_Init+0x50>)
 800435a:	f004 fa17 	bl	800878c <HAL_QSPI_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8004364:	f7ff ffd4 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004368:	bf00      	nop
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20005cac 	.word	0x20005cac
 8004370:	a0001000 	.word	0xa0001000

08004374 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	@ 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	f107 031c 	add.w	r3, r7, #28
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_QSPI_MspInit+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d170      	bne.n	8004478 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	4a3a      	ldr	r2, [pc, #232]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80043a2:	4b38      	ldr	r3, [pc, #224]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ae:	4b35      	ldr	r3, [pc, #212]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	4a34      	ldr	r2, [pc, #208]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043b4:	f043 0310 	orr.w	r3, r3, #16
 80043b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ba:	4b32      	ldr	r3, [pc, #200]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043de:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a28      	ldr	r2, [pc, #160]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <HAL_QSPI_MspInit+0x110>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80043f6:	2304      	movs	r3, #4
 80043f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fa:	2302      	movs	r3, #2
 80043fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004402:	2303      	movs	r3, #3
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004406:	2309      	movs	r3, #9
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800440a:	f107 031c 	add.w	r3, r7, #28
 800440e:	4619      	mov	r1, r3
 8004410:	481d      	ldr	r0, [pc, #116]	@ (8004488 <HAL_QSPI_MspInit+0x114>)
 8004412:	f002 fe47 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004416:	2340      	movs	r3, #64	@ 0x40
 8004418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441a:	2302      	movs	r3, #2
 800441c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004422:	2303      	movs	r3, #3
 8004424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004426:	230a      	movs	r3, #10
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800442a:	f107 031c 	add.w	r3, r7, #28
 800442e:	4619      	mov	r1, r3
 8004430:	4816      	ldr	r0, [pc, #88]	@ (800448c <HAL_QSPI_MspInit+0x118>)
 8004432:	f002 fe37 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004436:	2304      	movs	r3, #4
 8004438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004442:	2303      	movs	r3, #3
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004446:	2309      	movs	r3, #9
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444a:	f107 031c 	add.w	r3, r7, #28
 800444e:	4619      	mov	r1, r3
 8004450:	480e      	ldr	r0, [pc, #56]	@ (800448c <HAL_QSPI_MspInit+0x118>)
 8004452:	f002 fe27 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8004456:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800445a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004464:	2303      	movs	r3, #3
 8004466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004468:	2309      	movs	r3, #9
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	4619      	mov	r1, r3
 8004472:	4807      	ldr	r0, [pc, #28]	@ (8004490 <HAL_QSPI_MspInit+0x11c>)
 8004474:	f002 fe16 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8004478:	bf00      	nop
 800447a:	3730      	adds	r7, #48	@ 0x30
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	a0001000 	.word	0xa0001000
 8004484:	40023800 	.word	0x40023800
 8004488:	40021000 	.word	0x40021000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020c00 	.word	0x40020c00

08004494 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b090      	sub	sp, #64	@ 0x40
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800449a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80044aa:	2300      	movs	r3, #0
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80044ae:	463b      	mov	r3, r7
 80044b0:	2228      	movs	r2, #40	@ 0x28
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f010 fb89 	bl	8014bcc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80044ba:	4b46      	ldr	r3, [pc, #280]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044bc:	4a46      	ldr	r2, [pc, #280]	@ (80045d8 <MX_RTC_Init+0x144>)
 80044be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80044c0:	4b44      	ldr	r3, [pc, #272]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80044c6:	4b43      	ldr	r3, [pc, #268]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044c8:	227f      	movs	r2, #127	@ 0x7f
 80044ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80044cc:	4b41      	ldr	r3, [pc, #260]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044ce:	22ff      	movs	r2, #255	@ 0xff
 80044d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80044d2:	4b40      	ldr	r3, [pc, #256]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80044d8:	4b3e      	ldr	r3, [pc, #248]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044da:	2200      	movs	r2, #0
 80044dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80044de:	4b3d      	ldr	r3, [pc, #244]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80044e4:	483b      	ldr	r0, [pc, #236]	@ (80045d4 <MX_RTC_Init+0x140>)
 80044e6:	f005 fbff 	bl	8009ce8 <HAL_RTC_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80044f0:	f7ff ff0e 	bl	8004310 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8004500:	2300      	movs	r3, #0
 8004502:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004506:	2300      	movs	r3, #0
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800450e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004512:	2201      	movs	r2, #1
 8004514:	4619      	mov	r1, r3
 8004516:	482f      	ldr	r0, [pc, #188]	@ (80045d4 <MX_RTC_Init+0x140>)
 8004518:	f005 fc68 	bl	8009dec <HAL_RTC_SetTime>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004522:	f7ff fef5 	bl	8004310 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8004538:	2300      	movs	r3, #0
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800453e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004542:	2201      	movs	r2, #1
 8004544:	4619      	mov	r1, r3
 8004546:	4823      	ldr	r0, [pc, #140]	@ (80045d4 <MX_RTC_Init+0x140>)
 8004548:	f005 fcea 	bl	8009f20 <HAL_RTC_SetDate>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004552:	f7ff fedd 	bl	8004310 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8004556:	2300      	movs	r3, #0
 8004558:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800455a:	2300      	movs	r3, #0
 800455c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800455e:	2300      	movs	r3, #0
 8004560:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004586:	463b      	mov	r3, r7
 8004588:	2201      	movs	r2, #1
 800458a:	4619      	mov	r1, r3
 800458c:	4811      	ldr	r0, [pc, #68]	@ (80045d4 <MX_RTC_Init+0x140>)
 800458e:	f005 fd4b 	bl	800a028 <HAL_RTC_SetAlarm>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004598:	f7ff feba 	bl	8004310 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800459c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80045a2:	463b      	mov	r3, r7
 80045a4:	2201      	movs	r2, #1
 80045a6:	4619      	mov	r1, r3
 80045a8:	480a      	ldr	r0, [pc, #40]	@ (80045d4 <MX_RTC_Init+0x140>)
 80045aa:	f005 fd3d 	bl	800a028 <HAL_RTC_SetAlarm>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80045b4:	f7ff feac 	bl	8004310 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80045b8:	2202      	movs	r2, #2
 80045ba:	2100      	movs	r1, #0
 80045bc:	4805      	ldr	r0, [pc, #20]	@ (80045d4 <MX_RTC_Init+0x140>)
 80045be:	f005 fefd 	bl	800a3bc <HAL_RTCEx_SetTimeStamp>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80045c8:	f7ff fea2 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80045cc:	bf00      	nop
 80045ce:	3740      	adds	r7, #64	@ 0x40
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20005cf8 	.word	0x20005cf8
 80045d8:	40002800 	.word	0x40002800

080045dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b0a4      	sub	sp, #144	@ 0x90
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	2284      	movs	r2, #132	@ 0x84
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f010 faed 	bl	8014bcc <memset>
  if(rtcHandle->Instance==RTC)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004630 <HAL_RTC_MspInit+0x54>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d114      	bne.n	8004626 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80045fc:	2320      	movs	r3, #32
 80045fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004600:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004604:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	4618      	mov	r0, r3
 800460c:	f004 fe3c 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004616:	f7ff fe7b 	bl	8004310 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RTC_MspInit+0x58>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	4a05      	ldr	r2, [pc, #20]	@ (8004634 <HAL_RTC_MspInit+0x58>)
 8004620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004624:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004626:	bf00      	nop
 8004628:	3790      	adds	r7, #144	@ 0x90
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40002800 	.word	0x40002800
 8004634:	40023800 	.word	0x40023800

08004638 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 800463c:	4b4d      	ldr	r3, [pc, #308]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800463e:	4a4e      	ldr	r2, [pc, #312]	@ (8004778 <MX_SAI2_Init+0x140>)
 8004640:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8004642:	4b4c      	ldr	r3, [pc, #304]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8004648:	4b4a      	ldr	r3, [pc, #296]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800464a:	2200      	movs	r2, #0
 800464c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800464e:	4b49      	ldr	r3, [pc, #292]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004650:	2240      	movs	r2, #64	@ 0x40
 8004652:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004654:	4b47      	ldr	r3, [pc, #284]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004656:	2200      	movs	r2, #0
 8004658:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800465a:	4b46      	ldr	r3, [pc, #280]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800465c:	2200      	movs	r2, #0
 800465e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8004660:	4b44      	ldr	r3, [pc, #272]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004666:	4b43      	ldr	r3, [pc, #268]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800466c:	4b41      	ldr	r3, [pc, #260]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8004672:	4b40      	ldr	r3, [pc, #256]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8004678:	4b3e      	ldr	r3, [pc, #248]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800467a:	4a40      	ldr	r2, [pc, #256]	@ (800477c <MX_SAI2_Init+0x144>)
 800467c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800467e:	4b3d      	ldr	r3, [pc, #244]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004680:	2200      	movs	r2, #0
 8004682:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8004684:	4b3b      	ldr	r3, [pc, #236]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004686:	2200      	movs	r2, #0
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800468a:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800468c:	2200      	movs	r2, #0
 800468e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004690:	4b38      	ldr	r3, [pc, #224]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004692:	2200      	movs	r2, #0
 8004694:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8004696:	4b37      	ldr	r3, [pc, #220]	@ (8004774 <MX_SAI2_Init+0x13c>)
 8004698:	2208      	movs	r2, #8
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800469c:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <MX_SAI2_Init+0x13c>)
 800469e:	2201      	movs	r2, #1
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80046a2:	4b34      	ldr	r3, [pc, #208]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80046a8:	4b32      	ldr	r3, [pc, #200]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80046ae:	4b31      	ldr	r3, [pc, #196]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80046b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80046ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046bc:	2200      	movs	r2, #0
 80046be:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80046c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80046c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80046cc:	4829      	ldr	r0, [pc, #164]	@ (8004774 <MX_SAI2_Init+0x13c>)
 80046ce:	f005 fedd 	bl	800a48c <HAL_SAI_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80046d8:	f7ff fe1a 	bl	8004310 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80046dc:	4b28      	ldr	r3, [pc, #160]	@ (8004780 <MX_SAI2_Init+0x148>)
 80046de:	4a29      	ldr	r2, [pc, #164]	@ (8004784 <MX_SAI2_Init+0x14c>)
 80046e0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80046e2:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <MX_SAI2_Init+0x148>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80046e8:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <MX_SAI2_Init+0x148>)
 80046ea:	2203      	movs	r2, #3
 80046ec:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80046ee:	4b24      	ldr	r3, [pc, #144]	@ (8004780 <MX_SAI2_Init+0x148>)
 80046f0:	2240      	movs	r2, #64	@ 0x40
 80046f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80046f4:	4b22      	ldr	r3, [pc, #136]	@ (8004780 <MX_SAI2_Init+0x148>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80046fa:	4b21      	ldr	r3, [pc, #132]	@ (8004780 <MX_SAI2_Init+0x148>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8004700:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004702:	2201      	movs	r2, #1
 8004704:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004706:	4b1e      	ldr	r3, [pc, #120]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800470c:	4b1c      	ldr	r3, [pc, #112]	@ (8004780 <MX_SAI2_Init+0x148>)
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8004718:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <MX_SAI2_Init+0x148>)
 800471a:	2200      	movs	r2, #0
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004720:	2200      	movs	r2, #0
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004726:	2200      	movs	r2, #0
 8004728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <MX_SAI2_Init+0x148>)
 800472c:	2208      	movs	r2, #8
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004732:	2201      	movs	r2, #1
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8004736:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004738:	2200      	movs	r2, #0
 800473a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800473c:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <MX_SAI2_Init+0x148>)
 800473e:	2200      	movs	r2, #0
 8004740:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8004742:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004744:	2200      	movs	r2, #0
 8004746:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8004748:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <MX_SAI2_Init+0x148>)
 800474a:	2200      	movs	r2, #0
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004750:	2200      	movs	r2, #0
 8004752:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004756:	2201      	movs	r2, #1
 8004758:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <MX_SAI2_Init+0x148>)
 800475c:	2200      	movs	r2, #0
 800475e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8004760:	4807      	ldr	r0, [pc, #28]	@ (8004780 <MX_SAI2_Init+0x148>)
 8004762:	f005 fe93 	bl	800a48c <HAL_SAI_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800476c:	f7ff fdd0 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20005d18 	.word	0x20005d18
 8004778:	40015c04 	.word	0x40015c04
 800477c:	0002ee00 	.word	0x0002ee00
 8004780:	20005d9c 	.word	0x20005d9c
 8004784:	40015c24 	.word	0x40015c24

08004788 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2b      	ldr	r2, [pc, #172]	@ (8004844 <HAL_SAI_MspInit+0xbc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d124      	bne.n	80047e4 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800479a:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <HAL_SAI_MspInit+0xc0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10b      	bne.n	80047ba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80047a2:	4b2a      	ldr	r3, [pc, #168]	@ (800484c <HAL_SAI_MspInit+0xc4>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	4a29      	ldr	r2, [pc, #164]	@ (800484c <HAL_SAI_MspInit+0xc4>)
 80047a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ae:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_SAI_MspInit+0xc4>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80047ba:	4b23      	ldr	r3, [pc, #140]	@ (8004848 <HAL_SAI_MspInit+0xc0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3301      	adds	r3, #1
 80047c0:	4a21      	ldr	r2, [pc, #132]	@ (8004848 <HAL_SAI_MspInit+0xc0>)
 80047c2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80047c4:	23f0      	movs	r3, #240	@ 0xf0
 80047c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c8:	2302      	movs	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80047d4:	230a      	movs	r3, #10
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	4619      	mov	r1, r3
 80047de:	481c      	ldr	r0, [pc, #112]	@ (8004850 <HAL_SAI_MspInit+0xc8>)
 80047e0:	f002 fc60 	bl	80070a4 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <HAL_SAI_MspInit+0xcc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d125      	bne.n	800483a <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80047ee:	4b16      	ldr	r3, [pc, #88]	@ (8004848 <HAL_SAI_MspInit+0xc0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80047f6:	4b15      	ldr	r3, [pc, #84]	@ (800484c <HAL_SAI_MspInit+0xc4>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	4a14      	ldr	r2, [pc, #80]	@ (800484c <HAL_SAI_MspInit+0xc4>)
 80047fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004800:	6453      	str	r3, [r2, #68]	@ 0x44
 8004802:	4b12      	ldr	r3, [pc, #72]	@ (800484c <HAL_SAI_MspInit+0xc4>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800480e:	4b0e      	ldr	r3, [pc, #56]	@ (8004848 <HAL_SAI_MspInit+0xc0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0c      	ldr	r2, [pc, #48]	@ (8004848 <HAL_SAI_MspInit+0xc0>)
 8004816:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004818:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800481c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481e:	2302      	movs	r3, #2
 8004820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800482a:	230a      	movs	r3, #10
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	4619      	mov	r1, r3
 8004834:	4808      	ldr	r0, [pc, #32]	@ (8004858 <HAL_SAI_MspInit+0xd0>)
 8004836:	f002 fc35 	bl	80070a4 <HAL_GPIO_Init>

    }
}
 800483a:	bf00      	nop
 800483c:	3728      	adds	r7, #40	@ 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40015c04 	.word	0x40015c04
 8004848:	20005e20 	.word	0x20005e20
 800484c:	40023800 	.word	0x40023800
 8004850:	40022000 	.word	0x40022000
 8004854:	40015c24 	.word	0x40015c24
 8004858:	40021800 	.word	0x40021800

0800485c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004860:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 8004862:	4a0e      	ldr	r2, [pc, #56]	@ (800489c <MX_SDMMC1_SD_Init+0x40>)
 8004864:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004866:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 8004868:	2200      	movs	r2, #0
 800486a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 8004874:	2200      	movs	r2, #0
 8004876:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8004878:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 800487a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800487e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 8004882:	2200      	movs	r2, #0
 8004884:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004886:	4b04      	ldr	r3, [pc, #16]	@ (8004898 <MX_SDMMC1_SD_Init+0x3c>)
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20005e24 	.word	0x20005e24
 800489c:	40012c00 	.word	0x40012c00

080048a0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a25      	ldr	r2, [pc, #148]	@ (8004954 <HAL_SD_MspInit+0xb4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d144      	bne.n	800494c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80048c2:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	4a24      	ldr	r2, [pc, #144]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048da:	4b1f      	ldr	r3, [pc, #124]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048f2:	4b19      	ldr	r3, [pc, #100]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	4a18      	ldr	r2, [pc, #96]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 80048f8:	f043 0308 	orr.w	r3, r3, #8
 80048fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80048fe:	4b16      	ldr	r3, [pc, #88]	@ (8004958 <HAL_SD_MspInit+0xb8>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800490a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800490e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004910:	2302      	movs	r3, #2
 8004912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004918:	2303      	movs	r3, #3
 800491a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800491c:	230c      	movs	r3, #12
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	4619      	mov	r1, r3
 8004926:	480d      	ldr	r0, [pc, #52]	@ (800495c <HAL_SD_MspInit+0xbc>)
 8004928:	f002 fbbc 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800492c:	2304      	movs	r3, #4
 800492e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800493c:	230c      	movs	r3, #12
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4619      	mov	r1, r3
 8004946:	4806      	ldr	r0, [pc, #24]	@ (8004960 <HAL_SD_MspInit+0xc0>)
 8004948:	f002 fbac 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800494c:	bf00      	nop
 800494e:	3728      	adds	r7, #40	@ 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40023800 	.word	0x40023800
 800495c:	40020800 	.word	0x40020800
 8004960:	40020c00 	.word	0x40020c00

08004964 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 800496a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800496e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8004970:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 8004978:	2200      	movs	r2, #0
 800497a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800497c:	4b10      	ldr	r3, [pc, #64]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8004982:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 8004984:	2200      	movs	r2, #0
 8004986:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8004988:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 800498a:	2200      	movs	r2, #0
 800498c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800498e:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 8004990:	2200      	movs	r2, #0
 8004992:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8004994:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 8004996:	2200      	movs	r2, #0
 8004998:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800499a:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 800499c:	2200      	movs	r2, #0
 800499e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80049a0:	4b07      	ldr	r3, [pc, #28]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80049ac:	4804      	ldr	r0, [pc, #16]	@ (80049c0 <MX_SPDIFRX_Init+0x5c>)
 80049ae:	f006 fff1 	bl	800b994 <HAL_SPDIFRX_Init>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80049b8:	f7ff fcaa 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20005ea8 	.word	0x20005ea8

080049c4 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b0aa      	sub	sp, #168	@ 0xa8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	2284      	movs	r2, #132	@ 0x84
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f010 f8f1 	bl	8014bcc <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80049f2:	d143      	bne.n	8004a7c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80049f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80049fa:	2364      	movs	r3, #100	@ 0x64
 80049fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80049fe:	2302      	movs	r3, #2
 8004a00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004a02:	2302      	movs	r3, #2
 8004a04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004a06:	2302      	movs	r3, #2
 8004a08:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a0e:	f107 0310 	add.w	r3, r7, #16
 8004a12:	4618      	mov	r0, r3
 8004a14:	f004 fc38 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004a1e:	f7ff fc77 	bl	8004310 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004a22:	4b18      	ldr	r3, [pc, #96]	@ (8004a84 <HAL_SPDIFRX_MspInit+0xc0>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <HAL_SPDIFRX_MspInit+0xc0>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <HAL_SPDIFRX_MspInit+0xc0>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a3a:	4b12      	ldr	r3, [pc, #72]	@ (8004a84 <HAL_SPDIFRX_MspInit+0xc0>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	4a11      	ldr	r2, [pc, #68]	@ (8004a84 <HAL_SPDIFRX_MspInit+0xc0>)
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a46:	4b0f      	ldr	r3, [pc, #60]	@ (8004a84 <HAL_SPDIFRX_MspInit+0xc0>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004a70:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004a74:	4619      	mov	r1, r3
 8004a76:	4804      	ldr	r0, [pc, #16]	@ (8004a88 <HAL_SPDIFRX_MspInit+0xc4>)
 8004a78:	f002 fb14 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	37a8      	adds	r7, #168	@ 0xa8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40020c00 	.word	0x40020c00

08004a8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <MX_SPI2_Init+0x78>)
 8004a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a9e:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004aa4:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aa6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004aaa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aac:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ab2:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004abe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ac2:	2218      	movs	r2, #24
 8004ac4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004ad8:	4b09      	ldr	r3, [pc, #36]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ada:	2207      	movs	r2, #7
 8004adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004aea:	4805      	ldr	r0, [pc, #20]	@ (8004b00 <MX_SPI2_Init+0x74>)
 8004aec:	f006 ffae 	bl	800ba4c <HAL_SPI_Init>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8004af6:	f7ff fc0b 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20005ef4 	.word	0x20005ef4
 8004b04:	40003800 	.word	0x40003800

08004b08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a25      	ldr	r2, [pc, #148]	@ (8004bbc <HAL_SPI_MspInit+0xb4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d144      	bne.n	8004bb4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b2a:	4b25      	ldr	r3, [pc, #148]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	4a24      	ldr	r2, [pc, #144]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b36:	4b22      	ldr	r3, [pc, #136]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004b42:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5a:	4b19      	ldr	r3, [pc, #100]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b60:	f043 0302 	orr.w	r3, r3, #2
 8004b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b66:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <HAL_SPI_MspInit+0xb8>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 8004b72:	2302      	movs	r3, #2
 8004b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b76:	2302      	movs	r3, #2
 8004b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b82:	2305      	movs	r3, #5
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	480d      	ldr	r0, [pc, #52]	@ (8004bc4 <HAL_SPI_MspInit+0xbc>)
 8004b8e:	f002 fa89 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
 8004b92:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ba4:	2305      	movs	r3, #5
 8004ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	4619      	mov	r1, r3
 8004bae:	4806      	ldr	r0, [pc, #24]	@ (8004bc8 <HAL_SPI_MspInit+0xc0>)
 8004bb0:	f002 fa78 	bl	80070a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	3728      	adds	r7, #40	@ 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40003800 	.word	0x40003800
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40022000 	.word	0x40022000
 8004bc8:	40020400 	.word	0x40020400

08004bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_MspInit+0x4c>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <HAL_MspInit+0x4c>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <HAL_MspInit+0x4c>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_MspInit+0x4c>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <HAL_MspInit+0x4c>)
 8004bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bf6:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <HAL_MspInit+0x4c>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c02:	2200      	movs	r2, #0
 8004c04:	210f      	movs	r1, #15
 8004c06:	f06f 0001 	mvn.w	r0, #1
 8004c0a:	f001 fa4f 	bl	80060ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800

08004c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08e      	sub	sp, #56	@ 0x38
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004c2c:	4b33      	ldr	r3, [pc, #204]	@ (8004cfc <HAL_InitTick+0xe0>)
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	4a32      	ldr	r2, [pc, #200]	@ (8004cfc <HAL_InitTick+0xe0>)
 8004c32:	f043 0310 	orr.w	r3, r3, #16
 8004c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c38:	4b30      	ldr	r3, [pc, #192]	@ (8004cfc <HAL_InitTick+0xe0>)
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c44:	f107 0210 	add.w	r2, r7, #16
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f004 fae8 	bl	8009224 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c5e:	f004 fab9 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 8004c62:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c64:	e004      	b.n	8004c70 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c66:	f004 fab5 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c72:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <HAL_InitTick+0xe4>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	0c9b      	lsrs	r3, r3, #18
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004c7e:	4b21      	ldr	r3, [pc, #132]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004c80:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <HAL_InitTick+0xec>)
 8004c82:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004c84:	4b1f      	ldr	r3, [pc, #124]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004c86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004c92:	4b1c      	ldr	r3, [pc, #112]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c98:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c9e:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004ca4:	4817      	ldr	r0, [pc, #92]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004ca6:	f007 fe5b 	bl	800c960 <HAL_TIM_Base_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004cb8:	4812      	ldr	r0, [pc, #72]	@ (8004d04 <HAL_InitTick+0xe8>)
 8004cba:	f007 fea9 	bl	800ca10 <HAL_TIM_Base_Start_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ccc:	2036      	movs	r0, #54	@ 0x36
 8004cce:	f001 fa09 	bl	80060e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b0f      	cmp	r3, #15
 8004cd6:	d808      	bhi.n	8004cea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	2036      	movs	r0, #54	@ 0x36
 8004cde:	f001 f9e5 	bl	80060ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <HAL_InitTick+0xf0>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	e002      	b.n	8004cf0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3738      	adds	r7, #56	@ 0x38
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	431bde83 	.word	0x431bde83
 8004d04:	20005f58 	.word	0x20005f58
 8004d08:	40001000 	.word	0x40001000
 8004d0c:	20000008 	.word	0x20000008

08004d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <NMI_Handler+0x4>

08004d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <HardFault_Handler+0x4>

08004d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <MemManage_Handler+0x4>

08004d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <BusFault_Handler+0x4>

08004d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <UsageFault_Handler+0x4>

08004d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d4c:	4802      	ldr	r0, [pc, #8]	@ (8004d58 <TIM6_DAC_IRQHandler+0x10>)
 8004d4e:	f007 ff2e 	bl	800cbae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20005f58 	.word	0x20005f58

08004d5c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004d60:	4802      	ldr	r0, [pc, #8]	@ (8004d6c <USART6_IRQHandler+0x10>)
 8004d62:	f009 f815 	bl	800dd90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200061f8 	.word	0x200061f8

08004d70 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004d74:	4802      	ldr	r0, [pc, #8]	@ (8004d80 <LTDC_IRQHandler+0x10>)
 8004d76:	f003 fa33 	bl	80081e0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20005c04 	.word	0x20005c04

08004d84 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004d88:	4802      	ldr	r0, [pc, #8]	@ (8004d94 <DMA2D_IRQHandler+0x10>)
 8004d8a:	f001 fc9b 	bl	80066c4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200003f8 	.word	0x200003f8

08004d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return 1;
 8004d9c:	2301      	movs	r3, #1
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <_kill>:

int _kill(int pid, int sig)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004db2:	f010 f837 	bl	8014e24 <__errno>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2216      	movs	r2, #22
 8004dba:	601a      	str	r2, [r3, #0]
  return -1;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <_exit>:

void _exit (int status)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ffe7 	bl	8004da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <_exit+0x12>

08004dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	e00a      	b.n	8004e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004df0:	f3af 8000 	nop.w
 8004df4:	4601      	mov	r1, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	60ba      	str	r2, [r7, #8]
 8004dfc:	b2ca      	uxtb	r2, r1
 8004dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3301      	adds	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	dbf0      	blt.n	8004df0 <_read+0x12>
  }

  return len;
 8004e0e:	687b      	ldr	r3, [r7, #4]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e009      	b.n	8004e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	60ba      	str	r2, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff f95c 	bl	80040f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	dbf1      	blt.n	8004e2a <_write+0x12>
  }
  return len;
 8004e46:	687b      	ldr	r3, [r7, #4]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_close>:

int _close(int file)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e78:	605a      	str	r2, [r3, #4]
  return 0;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <_isatty>:

int _isatty(int file)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e90:	2301      	movs	r3, #1
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ec0:	4a14      	ldr	r2, [pc, #80]	@ (8004f14 <_sbrk+0x5c>)
 8004ec2:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <_sbrk+0x60>)
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ecc:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <_sbrk+0x64>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ed4:	4b11      	ldr	r3, [pc, #68]	@ (8004f1c <_sbrk+0x64>)
 8004ed6:	4a12      	ldr	r2, [pc, #72]	@ (8004f20 <_sbrk+0x68>)
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eda:	4b10      	ldr	r3, [pc, #64]	@ (8004f1c <_sbrk+0x64>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d207      	bcs.n	8004ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ee8:	f00f ff9c 	bl	8014e24 <__errno>
 8004eec:	4603      	mov	r3, r0
 8004eee:	220c      	movs	r2, #12
 8004ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	e009      	b.n	8004f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ef8:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <_sbrk+0x64>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004efe:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <_sbrk+0x64>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	4a05      	ldr	r2, [pc, #20]	@ (8004f1c <_sbrk+0x64>)
 8004f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20050000 	.word	0x20050000
 8004f18:	00000400 	.word	0x00000400
 8004f1c:	20005fa4 	.word	0x20005fa4
 8004f20:	2000e538 	.word	0x2000e538

08004f24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <SystemInit+0x20>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2e:	4a05      	ldr	r2, [pc, #20]	@ (8004f44 <SystemInit+0x20>)
 8004f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b09a      	sub	sp, #104	@ 0x68
 8004f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	611a      	str	r2, [r3, #16]
 8004f78:	615a      	str	r2, [r3, #20]
 8004f7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004f7c:	1d3b      	adds	r3, r7, #4
 8004f7e:	222c      	movs	r2, #44	@ 0x2c
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f00f fe22 	bl	8014bcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f88:	4b43      	ldr	r3, [pc, #268]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004f8a:	4a44      	ldr	r2, [pc, #272]	@ (800509c <MX_TIM1_Init+0x154>)
 8004f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004f8e:	4b42      	ldr	r3, [pc, #264]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f94:	4b40      	ldr	r3, [pc, #256]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004f9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fae:	4b3a      	ldr	r3, [pc, #232]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004fb4:	4838      	ldr	r0, [pc, #224]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004fb6:	f007 fcd3 	bl	800c960 <HAL_TIM_Base_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004fc0:	f7ff f9a6 	bl	8004310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004fca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4831      	ldr	r0, [pc, #196]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004fd2:	f008 f807 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004fdc:	f7ff f998 	bl	8004310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004fe0:	482d      	ldr	r0, [pc, #180]	@ (8005098 <MX_TIM1_Init+0x150>)
 8004fe2:	f007 fd8d 	bl	800cb00 <HAL_TIM_PWM_Init>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004fec:	f7ff f990 	bl	8004310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ffc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005000:	4619      	mov	r1, r3
 8005002:	4825      	ldr	r0, [pc, #148]	@ (8005098 <MX_TIM1_Init+0x150>)
 8005004:	f008 fc7e 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800500e:	f7ff f97f 	bl	8004310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005012:	2360      	movs	r3, #96	@ 0x60
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800501a:	2300      	movs	r3, #0
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800501e:	2300      	movs	r3, #0
 8005020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005022:	2300      	movs	r3, #0
 8005024:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005026:	2300      	movs	r3, #0
 8005028:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800502e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005032:	2200      	movs	r2, #0
 8005034:	4619      	mov	r1, r3
 8005036:	4818      	ldr	r0, [pc, #96]	@ (8005098 <MX_TIM1_Init+0x150>)
 8005038:	f007 fec0 	bl	800cdbc <HAL_TIM_PWM_ConfigChannel>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005042:	f7ff f965 	bl	8004310 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800505a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800505e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005068:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005072:	2300      	movs	r3, #0
 8005074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005076:	1d3b      	adds	r3, r7, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4807      	ldr	r0, [pc, #28]	@ (8005098 <MX_TIM1_Init+0x150>)
 800507c:	f008 fcd0 	bl	800da20 <HAL_TIMEx_ConfigBreakDeadTime>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005086:	f7ff f943 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800508a:	4803      	ldr	r0, [pc, #12]	@ (8005098 <MX_TIM1_Init+0x150>)
 800508c:	f000 fa6c 	bl	8005568 <HAL_TIM_MspPostInit>

}
 8005090:	bf00      	nop
 8005092:	3768      	adds	r7, #104	@ 0x68
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20005fa8 	.word	0x20005fa8
 800509c:	40010000 	.word	0x40010000

080050a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08e      	sub	sp, #56	@ 0x38
 80050a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050b4:	f107 031c 	add.w	r3, r7, #28
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050c0:	463b      	mov	r3, r7
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	60da      	str	r2, [r3, #12]
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	615a      	str	r2, [r3, #20]
 80050d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80050d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80050d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80050da:	4b2b      	ldr	r3, [pc, #172]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050e0:	4b29      	ldr	r3, [pc, #164]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80050e6:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050ee:	4b26      	ldr	r3, [pc, #152]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f4:	4b24      	ldr	r3, [pc, #144]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050fa:	4823      	ldr	r0, [pc, #140]	@ (8005188 <MX_TIM2_Init+0xe8>)
 80050fc:	f007 fc30 	bl	800c960 <HAL_TIM_Base_Init>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005106:	f7ff f903 	bl	8004310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800510a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005110:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005114:	4619      	mov	r1, r3
 8005116:	481c      	ldr	r0, [pc, #112]	@ (8005188 <MX_TIM2_Init+0xe8>)
 8005118:	f007 ff64 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005122:	f7ff f8f5 	bl	8004310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005126:	4818      	ldr	r0, [pc, #96]	@ (8005188 <MX_TIM2_Init+0xe8>)
 8005128:	f007 fcea 	bl	800cb00 <HAL_TIM_PWM_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005132:	f7ff f8ed 	bl	8004310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800513e:	f107 031c 	add.w	r3, r7, #28
 8005142:	4619      	mov	r1, r3
 8005144:	4810      	ldr	r0, [pc, #64]	@ (8005188 <MX_TIM2_Init+0xe8>)
 8005146:	f008 fbdd 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005150:	f7ff f8de 	bl	8004310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005154:	2360      	movs	r3, #96	@ 0x60
 8005156:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800515c:	2300      	movs	r3, #0
 800515e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005164:	463b      	mov	r3, r7
 8005166:	2200      	movs	r2, #0
 8005168:	4619      	mov	r1, r3
 800516a:	4807      	ldr	r0, [pc, #28]	@ (8005188 <MX_TIM2_Init+0xe8>)
 800516c:	f007 fe26 	bl	800cdbc <HAL_TIM_PWM_ConfigChannel>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005176:	f7ff f8cb 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800517a:	4803      	ldr	r0, [pc, #12]	@ (8005188 <MX_TIM2_Init+0xe8>)
 800517c:	f000 f9f4 	bl	8005568 <HAL_TIM_MspPostInit>

}
 8005180:	bf00      	nop
 8005182:	3738      	adds	r7, #56	@ 0x38
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20005ff4 	.word	0x20005ff4

0800518c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	@ 0x38
 8005190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a0:	f107 031c 	add.w	r3, r7, #28
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051ac:	463b      	mov	r3, r7
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	615a      	str	r2, [r3, #20]
 80051bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80051be:	4b2d      	ldr	r3, [pc, #180]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005278 <MX_TIM3_Init+0xec>)
 80051c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80051c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80051d0:	4b28      	ldr	r3, [pc, #160]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051d8:	4b26      	ldr	r3, [pc, #152]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051de:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051e4:	4823      	ldr	r0, [pc, #140]	@ (8005274 <MX_TIM3_Init+0xe8>)
 80051e6:	f007 fbbb 	bl	800c960 <HAL_TIM_Base_Init>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80051f0:	f7ff f88e 	bl	8004310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80051fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80051fe:	4619      	mov	r1, r3
 8005200:	481c      	ldr	r0, [pc, #112]	@ (8005274 <MX_TIM3_Init+0xe8>)
 8005202:	f007 feef 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800520c:	f7ff f880 	bl	8004310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005210:	4818      	ldr	r0, [pc, #96]	@ (8005274 <MX_TIM3_Init+0xe8>)
 8005212:	f007 fc75 	bl	800cb00 <HAL_TIM_PWM_Init>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800521c:	f7ff f878 	bl	8004310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005224:	2300      	movs	r3, #0
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005228:	f107 031c 	add.w	r3, r7, #28
 800522c:	4619      	mov	r1, r3
 800522e:	4811      	ldr	r0, [pc, #68]	@ (8005274 <MX_TIM3_Init+0xe8>)
 8005230:	f008 fb68 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800523a:	f7ff f869 	bl	8004310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800523e:	2360      	movs	r3, #96	@ 0x60
 8005240:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800524e:	463b      	mov	r3, r7
 8005250:	2200      	movs	r2, #0
 8005252:	4619      	mov	r1, r3
 8005254:	4807      	ldr	r0, [pc, #28]	@ (8005274 <MX_TIM3_Init+0xe8>)
 8005256:	f007 fdb1 	bl	800cdbc <HAL_TIM_PWM_ConfigChannel>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005260:	f7ff f856 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005264:	4803      	ldr	r0, [pc, #12]	@ (8005274 <MX_TIM3_Init+0xe8>)
 8005266:	f000 f97f 	bl	8005568 <HAL_TIM_MspPostInit>

}
 800526a:	bf00      	nop
 800526c:	3738      	adds	r7, #56	@ 0x38
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20006040 	.word	0x20006040
 8005278:	40000400 	.word	0x40000400

0800527c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005282:	f107 0310 	add.w	r3, r7, #16
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]
 800528c:	609a      	str	r2, [r3, #8]
 800528e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	605a      	str	r2, [r3, #4]
 8005298:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800529a:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <MX_TIM5_Init+0x94>)
 800529c:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <MX_TIM5_Init+0x98>)
 800529e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80052a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80052ac:	4b18      	ldr	r3, [pc, #96]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295
 80052b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052b4:	4b16      	ldr	r3, [pc, #88]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ba:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80052c0:	4813      	ldr	r0, [pc, #76]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052c2:	f007 fb4d 	bl	800c960 <HAL_TIM_Base_Init>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80052cc:	f7ff f820 	bl	8004310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4619      	mov	r1, r3
 80052dc:	480c      	ldr	r0, [pc, #48]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052de:	f007 fe81 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80052e8:	f7ff f812 	bl	8004310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ec:	2300      	movs	r3, #0
 80052ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	4619      	mov	r1, r3
 80052f8:	4805      	ldr	r0, [pc, #20]	@ (8005310 <MX_TIM5_Init+0x94>)
 80052fa:	f008 fb03 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005304:	f7ff f804 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005308:	bf00      	nop
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	2000608c 	.word	0x2000608c
 8005314:	40000c00 	.word	0x40000c00

08005318 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800531e:	f107 0310 	add.w	r3, r7, #16
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]
 8005334:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005336:	4b20      	ldr	r3, [pc, #128]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 8005338:	4a20      	ldr	r2, [pc, #128]	@ (80053bc <MX_TIM8_Init+0xa4>)
 800533a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 800533e:	2200      	movs	r2, #0
 8005340:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005342:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 8005344:	2200      	movs	r2, #0
 8005346:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 800534a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800534e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005350:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005356:	4b18      	ldr	r3, [pc, #96]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800535c:	4b16      	ldr	r3, [pc, #88]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 800535e:	2200      	movs	r2, #0
 8005360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005362:	4815      	ldr	r0, [pc, #84]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 8005364:	f007 fafc 	bl	800c960 <HAL_TIM_Base_Init>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800536e:	f7fe ffcf 	bl	8004310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	4619      	mov	r1, r3
 800537e:	480e      	ldr	r0, [pc, #56]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 8005380:	f007 fe30 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800538a:	f7fe ffc1 	bl	8004310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4806      	ldr	r0, [pc, #24]	@ (80053b8 <MX_TIM8_Init+0xa0>)
 80053a0:	f008 fab0 	bl	800d904 <HAL_TIMEx_MasterConfigSynchronization>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80053aa:	f7fe ffb1 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80053ae:	bf00      	nop
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200060d8 	.word	0x200060d8
 80053bc:	40010400 	.word	0x40010400

080053c0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	611a      	str	r2, [r3, #16]
 80053d4:	615a      	str	r2, [r3, #20]
 80053d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80053d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005444 <MX_TIM12_Init+0x84>)
 80053da:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <MX_TIM12_Init+0x88>)
 80053dc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80053de:	4b19      	ldr	r3, [pc, #100]	@ (8005444 <MX_TIM12_Init+0x84>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e4:	4b17      	ldr	r3, [pc, #92]	@ (8005444 <MX_TIM12_Init+0x84>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80053ea:	4b16      	ldr	r3, [pc, #88]	@ (8005444 <MX_TIM12_Init+0x84>)
 80053ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053f0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <MX_TIM12_Init+0x84>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053f8:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <MX_TIM12_Init+0x84>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80053fe:	4811      	ldr	r0, [pc, #68]	@ (8005444 <MX_TIM12_Init+0x84>)
 8005400:	f007 fb7e 	bl	800cb00 <HAL_TIM_PWM_Init>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800540a:	f7fe ff81 	bl	8004310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800540e:	2360      	movs	r3, #96	@ 0x60
 8005410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	2200      	movs	r2, #0
 8005422:	4619      	mov	r1, r3
 8005424:	4807      	ldr	r0, [pc, #28]	@ (8005444 <MX_TIM12_Init+0x84>)
 8005426:	f007 fcc9 	bl	800cdbc <HAL_TIM_PWM_ConfigChannel>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8005430:	f7fe ff6e 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8005434:	4803      	ldr	r0, [pc, #12]	@ (8005444 <MX_TIM12_Init+0x84>)
 8005436:	f000 f897 	bl	8005568 <HAL_TIM_MspPostInit>

}
 800543a:	bf00      	nop
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20006124 	.word	0x20006124
 8005448:	40001800 	.word	0x40001800

0800544c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	@ 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2e      	ldr	r2, [pc, #184]	@ (8005514 <HAL_TIM_Base_MspInit+0xc8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d10c      	bne.n	8005478 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800545e:	4b2e      	ldr	r3, [pc, #184]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	4a2d      	ldr	r2, [pc, #180]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	6453      	str	r3, [r2, #68]	@ 0x44
 800546a:	4b2b      	ldr	r3, [pc, #172]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005476:	e046      	b.n	8005506 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005480:	d10c      	bne.n	800549c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005482:	4b25      	ldr	r3, [pc, #148]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	4a24      	ldr	r2, [pc, #144]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6413      	str	r3, [r2, #64]	@ 0x40
 800548e:	4b22      	ldr	r3, [pc, #136]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	69bb      	ldr	r3, [r7, #24]
}
 800549a:	e034      	b.n	8005506 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1e      	ldr	r2, [pc, #120]	@ (800551c <HAL_TIM_Base_MspInit+0xd0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054b2:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	697b      	ldr	r3, [r7, #20]
}
 80054be:	e022      	b.n	8005506 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a16      	ldr	r2, [pc, #88]	@ (8005520 <HAL_TIM_Base_MspInit+0xd4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10c      	bne.n	80054e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80054ca:	4b13      	ldr	r3, [pc, #76]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054d6:	4b10      	ldr	r3, [pc, #64]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
}
 80054e2:	e010      	b.n	8005506 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005524 <HAL_TIM_Base_MspInit+0xd8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10b      	bne.n	8005506 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80054ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f2:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054f4:	f043 0302 	orr.w	r3, r3, #2
 80054f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80054fa:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <HAL_TIM_Base_MspInit+0xcc>)
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	bf00      	nop
 8005508:	3724      	adds	r7, #36	@ 0x24
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40023800 	.word	0x40023800
 800551c:	40000400 	.word	0x40000400
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40010400 	.word	0x40010400

08005528 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <HAL_TIM_PWM_MspInit+0x38>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10b      	bne.n	8005552 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <HAL_TIM_PWM_MspInit+0x3c>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	4a09      	ldr	r2, [pc, #36]	@ (8005564 <HAL_TIM_PWM_MspInit+0x3c>)
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	6413      	str	r3, [r2, #64]	@ 0x40
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <HAL_TIM_PWM_MspInit+0x3c>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40001800 	.word	0x40001800
 8005564:	40023800 	.word	0x40023800

08005568 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08c      	sub	sp, #48	@ 0x30
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005570:	f107 031c 	add.w	r3, r7, #28
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a45      	ldr	r2, [pc, #276]	@ (800569c <HAL_TIM_MspPostInit+0x134>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d11d      	bne.n	80055c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	4b45      	ldr	r3, [pc, #276]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	4a44      	ldr	r2, [pc, #272]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	6313      	str	r3, [r2, #48]	@ 0x30
 8005596:	4b42      	ldr	r3, [pc, #264]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80055a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a8:	2302      	movs	r3, #2
 80055aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b0:	2300      	movs	r3, #0
 80055b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055b4:	2301      	movs	r3, #1
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80055b8:	f107 031c 	add.w	r3, r7, #28
 80055bc:	4619      	mov	r1, r3
 80055be:	4839      	ldr	r0, [pc, #228]	@ (80056a4 <HAL_TIM_MspPostInit+0x13c>)
 80055c0:	f001 fd70 	bl	80070a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80055c4:	e065      	b.n	8005692 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM2)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	d11d      	bne.n	800560c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d0:	4b33      	ldr	r3, [pc, #204]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d4:	4a32      	ldr	r2, [pc, #200]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	6313      	str	r3, [r2, #48]	@ 0x30
 80055dc:	4b30      	ldr	r3, [pc, #192]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80055e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f6:	2300      	movs	r3, #0
 80055f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055fa:	2301      	movs	r3, #1
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	4827      	ldr	r0, [pc, #156]	@ (80056a4 <HAL_TIM_MspPostInit+0x13c>)
 8005606:	f001 fd4d 	bl	80070a4 <HAL_GPIO_Init>
}
 800560a:	e042      	b.n	8005692 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM3)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a25      	ldr	r2, [pc, #148]	@ (80056a8 <HAL_TIM_MspPostInit+0x140>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d11c      	bne.n	8005650 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005616:	4b22      	ldr	r3, [pc, #136]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	4a21      	ldr	r2, [pc, #132]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 800561c:	f043 0302 	orr.w	r3, r3, #2
 8005620:	6313      	str	r3, [r2, #48]	@ 0x30
 8005622:	4b1f      	ldr	r3, [pc, #124]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800562e:	2310      	movs	r3, #16
 8005630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005632:	2302      	movs	r3, #2
 8005634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005636:	2300      	movs	r3, #0
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563a:	2300      	movs	r3, #0
 800563c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800563e:	2302      	movs	r3, #2
 8005640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8005642:	f107 031c 	add.w	r3, r7, #28
 8005646:	4619      	mov	r1, r3
 8005648:	4818      	ldr	r0, [pc, #96]	@ (80056ac <HAL_TIM_MspPostInit+0x144>)
 800564a:	f001 fd2b 	bl	80070a4 <HAL_GPIO_Init>
}
 800564e:	e020      	b.n	8005692 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM12)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a16      	ldr	r2, [pc, #88]	@ (80056b0 <HAL_TIM_MspPostInit+0x148>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d11b      	bne.n	8005692 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800565a:	4b11      	ldr	r3, [pc, #68]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	4a10      	ldr	r2, [pc, #64]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 8005660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005664:	6313      	str	r3, [r2, #48]	@ 0x30
 8005666:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <HAL_TIM_MspPostInit+0x138>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8005672:	2340      	movs	r3, #64	@ 0x40
 8005674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005676:	2302      	movs	r3, #2
 8005678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005682:	2309      	movs	r3, #9
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8005686:	f107 031c 	add.w	r3, r7, #28
 800568a:	4619      	mov	r1, r3
 800568c:	4809      	ldr	r0, [pc, #36]	@ (80056b4 <HAL_TIM_MspPostInit+0x14c>)
 800568e:	f001 fd09 	bl	80070a4 <HAL_GPIO_Init>
}
 8005692:	bf00      	nop
 8005694:	3730      	adds	r7, #48	@ 0x30
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40023800 	.word	0x40023800
 80056a4:	40020000 	.word	0x40020000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40020400 	.word	0x40020400
 80056b0:	40001800 	.word	0x40001800
 80056b4:	40021c00 	.word	0x40021c00

080056b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <MX_USART1_UART_Init+0x5c>)
 80056c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056c2:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056ca:	4b11      	ldr	r3, [pc, #68]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056d8:	2200      	movs	r2, #0
 80056da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056de:	220c      	movs	r2, #12
 80056e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056e8:	4b09      	ldr	r3, [pc, #36]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056ee:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056f4:	4b06      	ldr	r3, [pc, #24]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056fa:	4805      	ldr	r0, [pc, #20]	@ (8005710 <MX_USART1_UART_Init+0x58>)
 80056fc:	f008 fa2c 	bl	800db58 <HAL_UART_Init>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005706:	f7fe fe03 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20006170 	.word	0x20006170
 8005714:	40011000 	.word	0x40011000

08005718 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800571c:	4b14      	ldr	r3, [pc, #80]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 800571e:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <MX_USART6_UART_Init+0x5c>)
 8005720:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005722:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 8005724:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005728:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800572a:	4b11      	ldr	r3, [pc, #68]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 800572c:	2200      	movs	r2, #0
 800572e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005730:	4b0f      	ldr	r3, [pc, #60]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 8005732:	2200      	movs	r2, #0
 8005734:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005736:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 8005738:	2200      	movs	r2, #0
 800573a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800573c:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 800573e:	220c      	movs	r2, #12
 8005740:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005742:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 8005744:	2200      	movs	r2, #0
 8005746:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005748:	4b09      	ldr	r3, [pc, #36]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 800574a:	2200      	movs	r2, #0
 800574c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800574e:	4b08      	ldr	r3, [pc, #32]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 8005750:	2200      	movs	r2, #0
 8005752:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005754:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 8005756:	2200      	movs	r2, #0
 8005758:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800575a:	4805      	ldr	r0, [pc, #20]	@ (8005770 <MX_USART6_UART_Init+0x58>)
 800575c:	f008 f9fc 	bl	800db58 <HAL_UART_Init>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005766:	f7fe fdd3 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200061f8 	.word	0x200061f8
 8005774:	40011400 	.word	0x40011400

08005778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b0ae      	sub	sp, #184	@ 0xb8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005780:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005790:	f107 0320 	add.w	r3, r7, #32
 8005794:	2284      	movs	r2, #132	@ 0x84
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f00f fa17 	bl	8014bcc <memset>
  if(uartHandle->Instance==USART1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a57      	ldr	r2, [pc, #348]	@ (8005900 <HAL_UART_MspInit+0x188>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d15d      	bne.n	8005864 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80057ac:	2300      	movs	r3, #0
 80057ae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057b0:	f107 0320 	add.w	r3, r7, #32
 80057b4:	4618      	mov	r0, r3
 80057b6:	f003 fd67 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80057c0:	f7fe fda6 	bl	8004310 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057ca:	f043 0310 	orr.w	r3, r3, #16
 80057ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80057d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057dc:	4b49      	ldr	r3, [pc, #292]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	4a48      	ldr	r2, [pc, #288]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e8:	4b46      	ldr	r3, [pc, #280]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f4:	4b43      	ldr	r3, [pc, #268]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	4a42      	ldr	r2, [pc, #264]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005800:	4b40      	ldr	r3, [pc, #256]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005812:	2302      	movs	r3, #2
 8005814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800581e:	2300      	movs	r3, #0
 8005820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005824:	2307      	movs	r3, #7
 8005826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800582a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800582e:	4619      	mov	r1, r3
 8005830:	4835      	ldr	r0, [pc, #212]	@ (8005908 <HAL_UART_MspInit+0x190>)
 8005832:	f001 fc37 	bl	80070a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800583a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583e:	2302      	movs	r3, #2
 8005840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005844:	2300      	movs	r3, #0
 8005846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005850:	2307      	movs	r3, #7
 8005852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005856:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800585a:	4619      	mov	r1, r3
 800585c:	482b      	ldr	r0, [pc, #172]	@ (800590c <HAL_UART_MspInit+0x194>)
 800585e:	f001 fc21 	bl	80070a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005862:	e048      	b.n	80058f6 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a29      	ldr	r2, [pc, #164]	@ (8005910 <HAL_UART_MspInit+0x198>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d143      	bne.n	80058f6 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800586e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005872:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005874:	2300      	movs	r3, #0
 8005876:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005878:	f107 0320 	add.w	r3, r7, #32
 800587c:	4618      	mov	r0, r3
 800587e:	f003 fd03 	bl	8009288 <HAL_RCCEx_PeriphCLKConfig>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8005888:	f7fe fd42 	bl	8004310 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800588c:	4b1d      	ldr	r3, [pc, #116]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 800588e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005890:	4a1c      	ldr	r2, [pc, #112]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 8005892:	f043 0320 	orr.w	r3, r3, #32
 8005896:	6453      	str	r3, [r2, #68]	@ 0x44
 8005898:	4b1a      	ldr	r3, [pc, #104]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 800589a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058a4:	4b17      	ldr	r3, [pc, #92]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	4a16      	ldr	r2, [pc, #88]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80058aa:	f043 0304 	orr.w	r3, r3, #4
 80058ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b0:	4b14      	ldr	r3, [pc, #80]	@ (8005904 <HAL_UART_MspInit+0x18c>)
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80058bc:	23c0      	movs	r3, #192	@ 0xc0
 80058be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c2:	2302      	movs	r3, #2
 80058c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ce:	2303      	movs	r3, #3
 80058d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80058d4:	2308      	movs	r3, #8
 80058d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80058de:	4619      	mov	r1, r3
 80058e0:	480c      	ldr	r0, [pc, #48]	@ (8005914 <HAL_UART_MspInit+0x19c>)
 80058e2:	f001 fbdf 	bl	80070a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80058e6:	2200      	movs	r2, #0
 80058e8:	2105      	movs	r1, #5
 80058ea:	2047      	movs	r0, #71	@ 0x47
 80058ec:	f000 fbde 	bl	80060ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80058f0:	2047      	movs	r0, #71	@ 0x47
 80058f2:	f000 fbf7 	bl	80060e4 <HAL_NVIC_EnableIRQ>
}
 80058f6:	bf00      	nop
 80058f8:	37b8      	adds	r7, #184	@ 0xb8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40011000 	.word	0x40011000
 8005904:	40023800 	.word	0x40023800
 8005908:	40020400 	.word	0x40020400
 800590c:	40020000 	.word	0x40020000
 8005910:	40011400 	.word	0x40011400
 8005914:	40020800 	.word	0x40020800

08005918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800591c:	f7ff fb02 	bl	8004f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005920:	480c      	ldr	r0, [pc, #48]	@ (8005954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005922:	490d      	ldr	r1, [pc, #52]	@ (8005958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005924:	4a0d      	ldr	r2, [pc, #52]	@ (800595c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005928:	e002      	b.n	8005930 <LoopCopyDataInit>

0800592a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800592a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800592c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800592e:	3304      	adds	r3, #4

08005930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005934:	d3f9      	bcc.n	800592a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005936:	4a0a      	ldr	r2, [pc, #40]	@ (8005960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005938:	4c0a      	ldr	r4, [pc, #40]	@ (8005964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800593a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800593c:	e001      	b.n	8005942 <LoopFillZerobss>

0800593e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800593e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005940:	3204      	adds	r2, #4

08005942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005944:	d3fb      	bcc.n	800593e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005946:	f00f fa73 	bl	8014e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800594a:	f7fe fbe3 	bl	8004114 <main>
  bx  lr    
 800594e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005950:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005958:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800595c:	08017f50 	.word	0x08017f50
  ldr r2, =_sbss
 8005960:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8005964:	2000e534 	.word	0x2000e534

08005968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005968:	e7fe      	b.n	8005968 <ADC_IRQHandler>

0800596a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800596e:	2003      	movs	r0, #3
 8005970:	f000 fb91 	bl	8006096 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005974:	2000      	movs	r0, #0
 8005976:	f7ff f951 	bl	8004c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800597a:	f7ff f927 	bl	8004bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005988:	4b06      	ldr	r3, [pc, #24]	@ (80059a4 <HAL_IncTick+0x20>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_IncTick+0x24>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4413      	add	r3, r2
 8005994:	4a04      	ldr	r2, [pc, #16]	@ (80059a8 <HAL_IncTick+0x24>)
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	20006280 	.word	0x20006280

080059ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return uwTick;
 80059b0:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <HAL_GetTick+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20006280 	.word	0x20006280

080059c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059cc:	f7ff ffee 	bl	80059ac <HAL_GetTick>
 80059d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d005      	beq.n	80059ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059de:	4b0a      	ldr	r3, [pc, #40]	@ (8005a08 <HAL_Delay+0x44>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059ea:	bf00      	nop
 80059ec:	f7ff ffde 	bl	80059ac <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d8f7      	bhi.n	80059ec <HAL_Delay+0x28>
  {
  }
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2000000c 	.word	0x2000000c

08005a0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e031      	b.n	8005a86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fb ff24 	bl	8001878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d116      	bne.n	8005a78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a4e:	4b10      	ldr	r3, [pc, #64]	@ (8005a90 <HAL_ADC_Init+0x84>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	f043 0202 	orr.w	r2, r3, #2
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f974 	bl	8005d48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a76:	e001      	b.n	8005a7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	ffffeefd 	.word	0xffffeefd

08005a94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x1c>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e13a      	b.n	8005d26 <HAL_ADC_ConfigChannel+0x292>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d93a      	bls.n	8005b36 <HAL_ADC_ConfigChannel+0xa2>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ac8:	d035      	beq.n	8005b36 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68d9      	ldr	r1, [r3, #12]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	3b1e      	subs	r3, #30
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	43da      	mvns	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	400a      	ands	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a8f      	ldr	r2, [pc, #572]	@ (8005d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d10a      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68d9      	ldr	r1, [r3, #12]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	061a      	lsls	r2, r3, #24
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b0e:	e039      	b.n	8005b84 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68d9      	ldr	r1, [r3, #12]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	4618      	mov	r0, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4403      	add	r3, r0
 8005b28:	3b1e      	subs	r3, #30
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b34:	e026      	b.n	8005b84 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6919      	ldr	r1, [r3, #16]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2207      	movs	r2, #7
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43da      	mvns	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6919      	ldr	r1, [r3, #16]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	4618      	mov	r0, r3
 8005b70:	4603      	mov	r3, r0
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4403      	add	r3, r0
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b06      	cmp	r3, #6
 8005b8a:	d824      	bhi.n	8005bd6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3b05      	subs	r3, #5
 8005b9e:	221f      	movs	r2, #31
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43da      	mvns	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	400a      	ands	r2, r1
 8005bac:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	4618      	mov	r0, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3b05      	subs	r3, #5
 8005bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bd4:	e04c      	b.n	8005c70 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	d824      	bhi.n	8005c28 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	3b23      	subs	r3, #35	@ 0x23
 8005bf0:	221f      	movs	r2, #31
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43da      	mvns	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	3b23      	subs	r3, #35	@ 0x23
 8005c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c26:	e023      	b.n	8005c70 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	3b41      	subs	r3, #65	@ 0x41
 8005c3a:	221f      	movs	r2, #31
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43da      	mvns	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	400a      	ands	r2, r1
 8005c48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4618      	mov	r0, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	3b41      	subs	r3, #65	@ 0x41
 8005c64:	fa00 f203 	lsl.w	r2, r0, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a30      	ldr	r2, [pc, #192]	@ (8005d38 <HAL_ADC_ConfigChannel+0x2a4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10a      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x1fc>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c82:	d105      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005c84:	4b2d      	ldr	r3, [pc, #180]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005c8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005c8e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a28      	ldr	r2, [pc, #160]	@ (8005d38 <HAL_ADC_ConfigChannel+0x2a4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10f      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x226>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b12      	cmp	r3, #18
 8005ca0:	d10b      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005ca2:	4b26      	ldr	r3, [pc, #152]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4a25      	ldr	r2, [pc, #148]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005ca8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005cac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005cae:	4b23      	ldr	r3, [pc, #140]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4a22      	ldr	r2, [pc, #136]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005cb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005cb8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d38 <HAL_ADC_ConfigChannel+0x2a4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d12b      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x288>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <HAL_ADC_ConfigChannel+0x242>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b11      	cmp	r3, #17
 8005cd4:	d122      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005cd6:	4b19      	ldr	r3, [pc, #100]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005cdc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ce0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ce2:	4b16      	ldr	r3, [pc, #88]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	@ (8005d3c <HAL_ADC_ConfigChannel+0x2a8>)
 8005ce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a10      	ldr	r2, [pc, #64]	@ (8005d34 <HAL_ADC_ConfigChannel+0x2a0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d111      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005cf8:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <HAL_ADC_ConfigChannel+0x2ac>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a11      	ldr	r2, [pc, #68]	@ (8005d44 <HAL_ADC_ConfigChannel+0x2b0>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	0c9a      	lsrs	r2, r3, #18
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005d0e:	e002      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f9      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	10000012 	.word	0x10000012
 8005d38:	40012000 	.word	0x40012000
 8005d3c:	40012300 	.word	0x40012300
 8005d40:	20000004 	.word	0x20000004
 8005d44:	431bde83 	.word	0x431bde83

08005d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005d50:	4b78      	ldr	r3, [pc, #480]	@ (8005f34 <ADC_Init+0x1ec>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a77      	ldr	r2, [pc, #476]	@ (8005f34 <ADC_Init+0x1ec>)
 8005d56:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005d5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005d5c:	4b75      	ldr	r3, [pc, #468]	@ (8005f34 <ADC_Init+0x1ec>)
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4973      	ldr	r1, [pc, #460]	@ (8005f34 <ADC_Init+0x1ec>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6859      	ldr	r1, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	021a      	lsls	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	4a58      	ldr	r2, [pc, #352]	@ (8005f38 <ADC_Init+0x1f0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d022      	beq.n	8005e22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005dea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6899      	ldr	r1, [r3, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6899      	ldr	r1, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	e00f      	b.n	8005e42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005e40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0202 	bic.w	r2, r2, #2
 8005e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6899      	ldr	r1, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	005a      	lsls	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005e8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6859      	ldr	r1, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	035a      	lsls	r2, r3, #13
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	e007      	b.n	8005eb8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	051a      	lsls	r2, r3, #20
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005efa:	025a      	lsls	r2, r3, #9
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6899      	ldr	r1, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	029a      	lsls	r2, r3, #10
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40012300 	.word	0x40012300
 8005f38:	0f000001 	.word	0x0f000001

08005f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <__NVIC_SetPriorityGrouping+0x40>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f64:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <__NVIC_SetPriorityGrouping+0x44>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f6a:	4a04      	ldr	r2, [pc, #16]	@ (8005f7c <__NVIC_SetPriorityGrouping+0x40>)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	60d3      	str	r3, [r2, #12]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	e000ed00 	.word	0xe000ed00
 8005f80:	05fa0000 	.word	0x05fa0000

08005f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f88:	4b04      	ldr	r3, [pc, #16]	@ (8005f9c <__NVIC_GetPriorityGrouping+0x18>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	f003 0307 	and.w	r3, r3, #7
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	e000ed00 	.word	0xe000ed00

08005fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	db0b      	blt.n	8005fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	4907      	ldr	r1, [pc, #28]	@ (8005fd8 <__NVIC_EnableIRQ+0x38>)
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	e000e100 	.word	0xe000e100

08005fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	6039      	str	r1, [r7, #0]
 8005fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	db0a      	blt.n	8006006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	490c      	ldr	r1, [pc, #48]	@ (8006028 <__NVIC_SetPriority+0x4c>)
 8005ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffa:	0112      	lsls	r2, r2, #4
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	440b      	add	r3, r1
 8006000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006004:	e00a      	b.n	800601c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	b2da      	uxtb	r2, r3
 800600a:	4908      	ldr	r1, [pc, #32]	@ (800602c <__NVIC_SetPriority+0x50>)
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	3b04      	subs	r3, #4
 8006014:	0112      	lsls	r2, r2, #4
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	440b      	add	r3, r1
 800601a:	761a      	strb	r2, [r3, #24]
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	e000e100 	.word	0xe000e100
 800602c:	e000ed00 	.word	0xe000ed00

08006030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006030:	b480      	push	{r7}
 8006032:	b089      	sub	sp, #36	@ 0x24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f1c3 0307 	rsb	r3, r3, #7
 800604a:	2b04      	cmp	r3, #4
 800604c:	bf28      	it	cs
 800604e:	2304      	movcs	r3, #4
 8006050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3304      	adds	r3, #4
 8006056:	2b06      	cmp	r3, #6
 8006058:	d902      	bls.n	8006060 <NVIC_EncodePriority+0x30>
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3b03      	subs	r3, #3
 800605e:	e000      	b.n	8006062 <NVIC_EncodePriority+0x32>
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43da      	mvns	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	401a      	ands	r2, r3
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006078:	f04f 31ff 	mov.w	r1, #4294967295
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	43d9      	mvns	r1, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006088:	4313      	orrs	r3, r2
         );
}
 800608a:	4618      	mov	r0, r3
 800608c:	3724      	adds	r7, #36	@ 0x24
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff4c 	bl	8005f3c <__NVIC_SetPriorityGrouping>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060be:	f7ff ff61 	bl	8005f84 <__NVIC_GetPriorityGrouping>
 80060c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	6978      	ldr	r0, [r7, #20]
 80060ca:	f7ff ffb1 	bl	8006030 <NVIC_EncodePriority>
 80060ce:	4602      	mov	r2, r0
 80060d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d4:	4611      	mov	r1, r2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff ff80 	bl	8005fdc <__NVIC_SetPriority>
}
 80060dc:	bf00      	nop
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff ff54 	bl	8005fa0 <__NVIC_EnableIRQ>
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e054      	b.n	80061bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7f5b      	ldrb	r3, [r3, #29]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fc0a 	bl	800193c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	791b      	ldrb	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10c      	bne.n	8006150 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a22      	ldr	r2, [pc, #136]	@ (80061c4 <HAL_CRC_Init+0xc4>)
 800613c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0218 	bic.w	r2, r2, #24
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	e00c      	b.n	800616a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6899      	ldr	r1, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	461a      	mov	r2, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f834 	bl	80061c8 <HAL_CRCEx_Polynomial_Set>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e028      	b.n	80061bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	795b      	ldrb	r3, [r3, #5]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f04f 32ff 	mov.w	r2, #4294967295
 800617a:	611a      	str	r2, [r3, #16]
 800617c:	e004      	b.n	8006188 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6912      	ldr	r2, [r2, #16]
 8006186:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	04c11db7 	.word	0x04c11db7

080061c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80061d8:	231f      	movs	r3, #31
 80061da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
 80061ea:	e063      	b.n	80062b4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80061ec:	bf00      	nop
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1e5a      	subs	r2, r3, #1
 80061f2:	613a      	str	r2, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <HAL_CRCEx_Polynomial_Set+0x44>
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b18      	cmp	r3, #24
 8006210:	d846      	bhi.n	80062a0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	080062a7 	.word	0x080062a7
 800621c:	080062a1 	.word	0x080062a1
 8006220:	080062a1 	.word	0x080062a1
 8006224:	080062a1 	.word	0x080062a1
 8006228:	080062a1 	.word	0x080062a1
 800622c:	080062a1 	.word	0x080062a1
 8006230:	080062a1 	.word	0x080062a1
 8006234:	080062a1 	.word	0x080062a1
 8006238:	08006295 	.word	0x08006295
 800623c:	080062a1 	.word	0x080062a1
 8006240:	080062a1 	.word	0x080062a1
 8006244:	080062a1 	.word	0x080062a1
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062a1 	.word	0x080062a1
 8006250:	080062a1 	.word	0x080062a1
 8006254:	080062a1 	.word	0x080062a1
 8006258:	08006289 	.word	0x08006289
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062a1 	.word	0x080062a1
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062a1 	.word	0x080062a1
 8006274:	080062a1 	.word	0x080062a1
 8006278:	0800627d 	.word	0x0800627d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b06      	cmp	r3, #6
 8006280:	d913      	bls.n	80062aa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006286:	e010      	b.n	80062aa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	2b07      	cmp	r3, #7
 800628c:	d90f      	bls.n	80062ae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006292:	e00c      	b.n	80062ae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b0f      	cmp	r3, #15
 8006298:	d90b      	bls.n	80062b2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800629e:	e008      	b.n	80062b2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
        break;
 80062a4:	e006      	b.n	80062b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80062a6:	bf00      	nop
 80062a8:	e004      	b.n	80062b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80062aa:	bf00      	nop
 80062ac:	e002      	b.n	80062b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80062b2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10d      	bne.n	80062d6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f023 0118 	bic.w	r1, r3, #24
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e069      	b.n	80063ca <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb fb6e 	bl	80019e4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b2a      	ldr	r3, [pc, #168]	@ (80063d4 <HAL_DCMI_Init+0xf0>)
 800632a:	400b      	ands	r3, r1
 800632c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006342:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800634e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800635a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006366:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006372:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b10      	cmp	r3, #16
 8006382:	d112      	bne.n	80063aa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7f1b      	ldrb	r3, [r3, #28]
 8006388:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7f5b      	ldrb	r3, [r3, #29]
 800638e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006390:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7f9b      	ldrb	r3, [r3, #30]
 8006396:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006398:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7fdb      	ldrb	r3, [r3, #31]
 80063a0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80063a6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80063a8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 021e 	orr.w	r2, r2, #30
 80063b8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	ffe0f007 	.word	0xffe0f007

080063d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_DMA_Start_IT+0x26>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e048      	b.n	8006490 <HAL_DMA_Start_IT+0xb8>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d137      	bne.n	8006482 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f8d4 	bl	80065d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006430:	223f      	movs	r2, #63	@ 0x3f
 8006432:	409a      	lsls	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0216 	orr.w	r2, r2, #22
 8006446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006456:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0208 	orr.w	r2, r2, #8
 800646e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e005      	b.n	800648e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800648a:	2302      	movs	r3, #2
 800648c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064a6:	f7ff fa81 	bl	80059ac <HAL_GetTick>
 80064aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d008      	beq.n	80064ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2280      	movs	r2, #128	@ 0x80
 80064bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e052      	b.n	8006570 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0216 	bic.w	r2, r2, #22
 80064d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <HAL_DMA_Abort+0x62>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0208 	bic.w	r2, r2, #8
 8006508:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800651a:	e013      	b.n	8006544 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800651c:	f7ff fa46 	bl	80059ac <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b05      	cmp	r3, #5
 8006528:	d90c      	bls.n	8006544 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2203      	movs	r2, #3
 8006534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e015      	b.n	8006570 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e4      	bne.n	800651c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006556:	223f      	movs	r2, #63	@ 0x3f
 8006558:	409a      	lsls	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d004      	beq.n	8006596 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2280      	movs	r2, #128	@ 0x80
 8006590:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e00c      	b.n	80065b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2205      	movs	r2, #5
 800659a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80065f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b40      	cmp	r3, #64	@ 0x40
 8006600:	d108      	bne.n	8006614 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006612:	e007      	b.n	8006624 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e039      	b.n	80066b6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fb fab4 	bl	8001bc4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006680:	f023 0107 	bic.w	r1, r3, #7
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <HAL_DMA2D_Init+0x90>)
 8006698:	4013      	ands	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68d1      	ldr	r1, [r2, #12]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	430b      	orrs	r3, r1
 80066a4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	ffffc000 	.word	0xffffc000

080066c4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d026      	beq.n	8006734 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d021      	beq.n	8006734 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066fe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006704:	f043 0201 	orr.w	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2204      	movs	r2, #4
 8006718:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d026      	beq.n	800678c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d021      	beq.n	800678c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006756:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2220      	movs	r2, #32
 800675e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	f043 0202 	orr.w	r2, r3, #2
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2204      	movs	r2, #4
 8006770:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d026      	beq.n	80067e4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800679c:	2b00      	cmp	r3, #0
 800679e:	d021      	beq.n	80067e4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2208      	movs	r2, #8
 80067b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	f043 0204 	orr.w	r2, r3, #4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2204      	movs	r2, #4
 80067c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006806:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2204      	movs	r2, #4
 800680e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f853 	bl	80068bc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d024      	beq.n	800686a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01f      	beq.n	800686a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006838:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2202      	movs	r2, #2
 8006840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01f      	beq.n	80068b4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01a      	beq.n	80068b4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800688c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2210      	movs	r2, #16
 8006894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f80e 	bl	80068d0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_DMA2D_ConfigLayer+0x20>
 8006900:	2302      	movs	r3, #2
 8006902:	e079      	b.n	80069f8 <HAL_DMA2D_ConfigLayer+0x114>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	3318      	adds	r3, #24
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	4413      	add	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	041b      	lsls	r3, r3, #16
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800692e:	4b35      	ldr	r3, [pc, #212]	@ (8006a04 <HAL_DMA2D_ConfigLayer+0x120>)
 8006930:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b0a      	cmp	r3, #10
 8006938:	d003      	beq.n	8006942 <HAL_DMA2D_ConfigLayer+0x5e>
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b09      	cmp	r3, #9
 8006940:	d107      	bne.n	8006952 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e005      	b.n	800695e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	061b      	lsls	r3, r3, #24
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d120      	bne.n	80069a6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	43db      	mvns	r3, r3
 800696e:	ea02 0103 	and.w	r1, r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	430a      	orrs	r2, r1
 800697a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b0a      	cmp	r3, #10
 800698c:	d003      	beq.n	8006996 <HAL_DMA2D_ConfigLayer+0xb2>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b09      	cmp	r3, #9
 8006994:	d127      	bne.n	80069e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80069a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80069a4:	e01f      	b.n	80069e6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	43db      	mvns	r3, r3
 80069b0:	ea02 0103 	and.w	r1, r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b0a      	cmp	r3, #10
 80069ce:	d003      	beq.n	80069d8 <HAL_DMA2D_ConfigLayer+0xf4>
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b09      	cmp	r3, #9
 80069d6:	d106      	bne.n	80069e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80069e4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	ff03000f 	.word	0xff03000f

08006a08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e086      	b.n	8006b28 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fb f93d 	bl	8001cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a32:	4b3f      	ldr	r3, [pc, #252]	@ (8006b30 <HAL_ETH_Init+0x128>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a36:	4a3e      	ldr	r2, [pc, #248]	@ (8006b30 <HAL_ETH_Init+0x128>)
 8006a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b30 <HAL_ETH_Init+0x128>)
 8006a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a46:	60bb      	str	r3, [r7, #8]
 8006a48:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8006b34 <HAL_ETH_Init+0x12c>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4a39      	ldr	r2, [pc, #228]	@ (8006b34 <HAL_ETH_Init+0x12c>)
 8006a50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a54:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006a56:	4b37      	ldr	r3, [pc, #220]	@ (8006b34 <HAL_ETH_Init+0x12c>)
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	4935      	ldr	r1, [pc, #212]	@ (8006b34 <HAL_ETH_Init+0x12c>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006a64:	4b33      	ldr	r3, [pc, #204]	@ (8006b34 <HAL_ETH_Init+0x12c>)
 8006a66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a80:	f7fe ff94 	bl	80059ac <HAL_GetTick>
 8006a84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006a86:	e011      	b.n	8006aac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006a88:	f7fe ff90 	bl	80059ac <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006a96:	d909      	bls.n	8006aac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	22e0      	movs	r2, #224	@ 0xe0
 8006aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e03d      	b.n	8006b28 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e4      	bne.n	8006a88 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f97a 	bl	8006db8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa25 	bl	8006f14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa7b 	bl	8006fc6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f9e3 	bl	8006ea4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b0f      	ldr	r3, [pc, #60]	@ (8006b38 <HAL_ETH_Init+0x130>)
 8006afc:	430b      	orrs	r3, r1
 8006afe:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8006b12:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2210      	movs	r2, #16
 8006b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40013800 	.word	0x40013800
 8006b38:	00020060 	.word	0x00020060

08006b3c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4b53      	ldr	r3, [pc, #332]	@ (8006ca0 <ETH_SetMACConfig+0x164>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	7b9b      	ldrb	r3, [r3, #14]
 8006b5a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	7c12      	ldrb	r2, [r2, #16]
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	d102      	bne.n	8006b6a <ETH_SetMACConfig+0x2e>
 8006b64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b68:	e000      	b.n	8006b6c <ETH_SetMACConfig+0x30>
 8006b6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006b6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	7c52      	ldrb	r2, [r2, #17]
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d102      	bne.n	8006b7c <ETH_SetMACConfig+0x40>
 8006b76:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006b7a:	e000      	b.n	8006b7e <ETH_SetMACConfig+0x42>
 8006b7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006b7e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8006b84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	7fdb      	ldrb	r3, [r3, #31]
 8006b8a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8006b8c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8006b92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	7f92      	ldrb	r2, [r2, #30]
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d102      	bne.n	8006ba2 <ETH_SetMACConfig+0x66>
 8006b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ba0:	e000      	b.n	8006ba4 <ETH_SetMACConfig+0x68>
 8006ba2:	2200      	movs	r2, #0
                        macconf->Speed |
 8006ba4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	7f1b      	ldrb	r3, [r3, #28]
 8006baa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006bac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006bb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	791b      	ldrb	r3, [r3, #4]
 8006bb8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006bba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	d102      	bne.n	8006bcc <ETH_SetMACConfig+0x90>
 8006bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bca:	e000      	b.n	8006bce <ETH_SetMACConfig+0x92>
 8006bcc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006bce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	7bdb      	ldrb	r3, [r3, #15]
 8006bd4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006bd6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006bdc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006be4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006be6:	4313      	orrs	r3, r2
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f7fe fee0 	bl	80059c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c22:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006c2a:	2a00      	cmp	r2, #0
 8006c2c:	d101      	bne.n	8006c32 <ETH_SetMACConfig+0xf6>
 8006c2e:	2280      	movs	r2, #128	@ 0x80
 8006c30:	e000      	b.n	8006c34 <ETH_SetMACConfig+0xf8>
 8006c32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006c34:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006c3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8006c42:	2a01      	cmp	r2, #1
 8006c44:	d101      	bne.n	8006c4a <ETH_SetMACConfig+0x10e>
 8006c46:	2208      	movs	r2, #8
 8006c48:	e000      	b.n	8006c4c <ETH_SetMACConfig+0x110>
 8006c4a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006c4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006c54:	2a01      	cmp	r2, #1
 8006c56:	d101      	bne.n	8006c5c <ETH_SetMACConfig+0x120>
 8006c58:	2204      	movs	r2, #4
 8006c5a:	e000      	b.n	8006c5e <ETH_SetMACConfig+0x122>
 8006c5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006c5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006c66:	2a01      	cmp	r2, #1
 8006c68:	d101      	bne.n	8006c6e <ETH_SetMACConfig+0x132>
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	e000      	b.n	8006c70 <ETH_SetMACConfig+0x134>
 8006c6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006c70:	4313      	orrs	r3, r2
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f7fe fe9b 	bl	80059c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	619a      	str	r2, [r3, #24]
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	fd20810f 	.word	0xfd20810f

08006ca4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8006db4 <ETH_SetDMAConfig+0x110>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	7b1b      	ldrb	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <ETH_SetDMAConfig+0x2c>
 8006cca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006cce:	e000      	b.n	8006cd2 <ETH_SetDMAConfig+0x2e>
 8006cd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	7b5b      	ldrb	r3, [r3, #13]
 8006cd6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006cd8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	7f52      	ldrb	r2, [r2, #29]
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d102      	bne.n	8006ce8 <ETH_SetDMAConfig+0x44>
 8006ce2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ce6:	e000      	b.n	8006cea <ETH_SetDMAConfig+0x46>
 8006ce8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006cea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	7b9b      	ldrb	r3, [r3, #14]
 8006cf0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006cf2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006cf8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	7f1b      	ldrb	r3, [r3, #28]
 8006cfe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006d00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	7f9b      	ldrb	r3, [r3, #30]
 8006d06:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006d08:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006d0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d16:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f7fe fe42 	bl	80059c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006d58:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006d5e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006d64:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006d6c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006d6e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006d76:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006d7c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6812      	ldr	r2, [r2, #0]
 8006d82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d8a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006d98:	2001      	movs	r0, #1
 8006d9a:	f7fe fe13 	bl	80059c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6013      	str	r3, [r2, #0]
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	f8de3f23 	.word	0xf8de3f23

08006db8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b0a6      	sub	sp, #152	@ 0x98
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006e14:	2300      	movs	r3, #0
 8006e16:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006e20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006e26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006e32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fe7f 	bl	8006b3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006e60:	2300      	movs	r3, #0
 8006e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006e6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006e74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006e78:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e7e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff05 	bl	8006ca4 <ETH_SetDMAConfig>
}
 8006e9a:	bf00      	nop
 8006e9c:	3798      	adds	r7, #152	@ 0x98
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3305      	adds	r3, #5
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	3204      	adds	r2, #4
 8006ebc:	7812      	ldrb	r2, [r2, #0]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4b11      	ldr	r3, [pc, #68]	@ (8006f0c <ETH_MACAddressConfig+0x68>)
 8006ec6:	4413      	add	r3, r2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3303      	adds	r3, #3
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	061a      	lsls	r2, r3, #24
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3302      	adds	r3, #2
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <ETH_MACAddressConfig+0x6c>)
 8006ef6:	4413      	add	r3, r2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6013      	str	r3, [r2, #0]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40028040 	.word	0x40028040
 8006f10:	40028044 	.word	0x40028044

08006f14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e03e      	b.n	8006fa0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68d9      	ldr	r1, [r3, #12]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	440b      	add	r3, r1
 8006f32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	3206      	adds	r2, #6
 8006f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d80c      	bhi.n	8006f84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68d9      	ldr	r1, [r3, #12]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	440b      	add	r3, r1
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	e004      	b.n	8006f8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d9bd      	bls.n	8006f22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb8:	611a      	str	r2, [r3, #16]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e048      	b.n	8007066 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6919      	ldr	r1, [r3, #16]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	440b      	add	r3, r1
 8006fe4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007010:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	3212      	adds	r2, #18
 8007032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b02      	cmp	r3, #2
 800703a:	d80c      	bhi.n	8007056 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6919      	ldr	r1, [r3, #16]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	440b      	add	r3, r1
 800704e:	461a      	mov	r2, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	60da      	str	r2, [r3, #12]
 8007054:	e004      	b.n	8007060 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	461a      	mov	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d9b3      	bls.n	8006fd4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007096:	60da      	str	r2, [r3, #12]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b089      	sub	sp, #36	@ 0x24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	e175      	b.n	80073b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80070c4:	2201      	movs	r2, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4013      	ands	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	429a      	cmp	r2, r3
 80070de:	f040 8164 	bne.w	80073aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d005      	beq.n	80070fa <HAL_GPIO_Init+0x56>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d130      	bne.n	800715c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	2203      	movs	r2, #3
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	4013      	ands	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4313      	orrs	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007130:	2201      	movs	r2, #1
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 0201 	and.w	r2, r3, #1
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4313      	orrs	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	2b03      	cmp	r3, #3
 8007166:	d017      	beq.n	8007198 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	2203      	movs	r2, #3
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	4313      	orrs	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d123      	bne.n	80071ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	08da      	lsrs	r2, r3, #3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3208      	adds	r2, #8
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	220f      	movs	r2, #15
 80071bc:	fa02 f303 	lsl.w	r3, r2, r3
 80071c0:	43db      	mvns	r3, r3
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	4013      	ands	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4313      	orrs	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	08da      	lsrs	r2, r3, #3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3208      	adds	r2, #8
 80071e6:	69b9      	ldr	r1, [r7, #24]
 80071e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	2203      	movs	r2, #3
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4013      	ands	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 0203 	and.w	r2, r3, #3
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80be 	beq.w	80073aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800722e:	4b66      	ldr	r3, [pc, #408]	@ (80073c8 <HAL_GPIO_Init+0x324>)
 8007230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007232:	4a65      	ldr	r2, [pc, #404]	@ (80073c8 <HAL_GPIO_Init+0x324>)
 8007234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007238:	6453      	str	r3, [r2, #68]	@ 0x44
 800723a:	4b63      	ldr	r3, [pc, #396]	@ (80073c8 <HAL_GPIO_Init+0x324>)
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007246:	4a61      	ldr	r2, [pc, #388]	@ (80073cc <HAL_GPIO_Init+0x328>)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	089b      	lsrs	r3, r3, #2
 800724c:	3302      	adds	r3, #2
 800724e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007252:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	220f      	movs	r2, #15
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	43db      	mvns	r3, r3
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	4013      	ands	r3, r2
 8007268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a58      	ldr	r2, [pc, #352]	@ (80073d0 <HAL_GPIO_Init+0x32c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d037      	beq.n	80072e2 <HAL_GPIO_Init+0x23e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a57      	ldr	r2, [pc, #348]	@ (80073d4 <HAL_GPIO_Init+0x330>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d031      	beq.n	80072de <HAL_GPIO_Init+0x23a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a56      	ldr	r2, [pc, #344]	@ (80073d8 <HAL_GPIO_Init+0x334>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d02b      	beq.n	80072da <HAL_GPIO_Init+0x236>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a55      	ldr	r2, [pc, #340]	@ (80073dc <HAL_GPIO_Init+0x338>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d025      	beq.n	80072d6 <HAL_GPIO_Init+0x232>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a54      	ldr	r2, [pc, #336]	@ (80073e0 <HAL_GPIO_Init+0x33c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01f      	beq.n	80072d2 <HAL_GPIO_Init+0x22e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a53      	ldr	r2, [pc, #332]	@ (80073e4 <HAL_GPIO_Init+0x340>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d019      	beq.n	80072ce <HAL_GPIO_Init+0x22a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a52      	ldr	r2, [pc, #328]	@ (80073e8 <HAL_GPIO_Init+0x344>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <HAL_GPIO_Init+0x226>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a51      	ldr	r2, [pc, #324]	@ (80073ec <HAL_GPIO_Init+0x348>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00d      	beq.n	80072c6 <HAL_GPIO_Init+0x222>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a50      	ldr	r2, [pc, #320]	@ (80073f0 <HAL_GPIO_Init+0x34c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <HAL_GPIO_Init+0x21e>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a4f      	ldr	r2, [pc, #316]	@ (80073f4 <HAL_GPIO_Init+0x350>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_GPIO_Init+0x21a>
 80072ba:	2309      	movs	r3, #9
 80072bc:	e012      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072be:	230a      	movs	r3, #10
 80072c0:	e010      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072c2:	2308      	movs	r3, #8
 80072c4:	e00e      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072c6:	2307      	movs	r3, #7
 80072c8:	e00c      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072ca:	2306      	movs	r3, #6
 80072cc:	e00a      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072ce:	2305      	movs	r3, #5
 80072d0:	e008      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072d2:	2304      	movs	r3, #4
 80072d4:	e006      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072d6:	2303      	movs	r3, #3
 80072d8:	e004      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072da:	2302      	movs	r3, #2
 80072dc:	e002      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <HAL_GPIO_Init+0x240>
 80072e2:	2300      	movs	r3, #0
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	f002 0203 	and.w	r2, r2, #3
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	4093      	lsls	r3, r2
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80072f4:	4935      	ldr	r1, [pc, #212]	@ (80073cc <HAL_GPIO_Init+0x328>)
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	089b      	lsrs	r3, r3, #2
 80072fa:	3302      	adds	r3, #2
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007302:	4b3d      	ldr	r3, [pc, #244]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	43db      	mvns	r3, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	4013      	ands	r3, r2
 8007310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007326:	4a34      	ldr	r2, [pc, #208]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800732c:	4b32      	ldr	r3, [pc, #200]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	43db      	mvns	r3, r3
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4013      	ands	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007350:	4a29      	ldr	r2, [pc, #164]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007356:	4b28      	ldr	r3, [pc, #160]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	43db      	mvns	r3, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4013      	ands	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800737a:	4a1f      	ldr	r2, [pc, #124]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007380:	4b1d      	ldr	r3, [pc, #116]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	43db      	mvns	r3, r3
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	4013      	ands	r3, r2
 800738e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073a4:	4a14      	ldr	r2, [pc, #80]	@ (80073f8 <HAL_GPIO_Init+0x354>)
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	3301      	adds	r3, #1
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	f67f ae86 	bls.w	80070c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	3724      	adds	r7, #36	@ 0x24
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40013800 	.word	0x40013800
 80073d0:	40020000 	.word	0x40020000
 80073d4:	40020400 	.word	0x40020400
 80073d8:	40020800 	.word	0x40020800
 80073dc:	40020c00 	.word	0x40020c00
 80073e0:	40021000 	.word	0x40021000
 80073e4:	40021400 	.word	0x40021400
 80073e8:	40021800 	.word	0x40021800
 80073ec:	40021c00 	.word	0x40021c00
 80073f0:	40022000 	.word	0x40022000
 80073f4:	40022400 	.word	0x40022400
 80073f8:	40013c00 	.word	0x40013c00

080073fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	887b      	ldrh	r3, [r7, #2]
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
 8007418:	e001      	b.n	800741e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	807b      	strh	r3, [r7, #2]
 8007438:	4613      	mov	r3, r2
 800743a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800743c:	787b      	ldrb	r3, [r7, #1]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007448:	e003      	b.n	8007452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	041a      	lsls	r2, r3, #16
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	619a      	str	r2, [r3, #24]
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e08b      	b.n	800758a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fb ffec 	bl	8003464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	@ 0x24
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0201 	bic.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80074b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d107      	bne.n	80074da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	e006      	b.n	80074e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80074e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d108      	bne.n	8007502 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	e007      	b.n	8007512 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6859      	ldr	r1, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b1d      	ldr	r3, [pc, #116]	@ (8007594 <HAL_I2C_Init+0x134>)
 800751e:	430b      	orrs	r3, r1
 8007520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	02008000 	.word	0x02008000

08007598 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	4608      	mov	r0, r1
 80075a2:	4611      	mov	r1, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	817b      	strh	r3, [r7, #10]
 80075aa:	460b      	mov	r3, r1
 80075ac:	813b      	strh	r3, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	f040 80f9 	bne.w	80077b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <HAL_I2C_Mem_Write+0x34>
 80075c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0ed      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_I2C_Mem_Write+0x4e>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e0e6      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075ee:	f7fe f9dd 	bl	80059ac <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2319      	movs	r3, #25
 80075fa:	2201      	movs	r2, #1
 80075fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fac3 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e0d1      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2221      	movs	r2, #33	@ 0x21
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2240      	movs	r2, #64	@ 0x40
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007638:	88f8      	ldrh	r0, [r7, #6]
 800763a:	893a      	ldrh	r2, [r7, #8]
 800763c:	8979      	ldrh	r1, [r7, #10]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4603      	mov	r3, r0
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f9d3 	bl	80079f4 <I2C_RequestMemoryWrite>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0a9      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007664:	b29b      	uxth	r3, r3
 8007666:	2bff      	cmp	r3, #255	@ 0xff
 8007668:	d90e      	bls.n	8007688 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	22ff      	movs	r2, #255	@ 0xff
 800766e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007674:	b2da      	uxtb	r2, r3
 8007676:	8979      	ldrh	r1, [r7, #10]
 8007678:	2300      	movs	r3, #0
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fc47 	bl	8007f14 <I2C_TransferConfig>
 8007686:	e00f      	b.n	80076a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007696:	b2da      	uxtb	r2, r3
 8007698:	8979      	ldrh	r1, [r7, #10]
 800769a:	2300      	movs	r3, #0
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fc36 	bl	8007f14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fac6 	bl	8007c3e <I2C_WaitOnTXISFlagUntilTimeout>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e07b      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d034      	beq.n	8007760 <HAL_I2C_Mem_Write+0x1c8>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d130      	bne.n	8007760 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007704:	2200      	movs	r2, #0
 8007706:	2180      	movs	r1, #128	@ 0x80
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fa3f 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e04d      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2bff      	cmp	r3, #255	@ 0xff
 8007720:	d90e      	bls.n	8007740 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	22ff      	movs	r2, #255	@ 0xff
 8007726:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800772c:	b2da      	uxtb	r2, r3
 800772e:	8979      	ldrh	r1, [r7, #10]
 8007730:	2300      	movs	r3, #0
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fbeb 	bl	8007f14 <I2C_TransferConfig>
 800773e:	e00f      	b.n	8007760 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800774e:	b2da      	uxtb	r2, r3
 8007750:	8979      	ldrh	r1, [r7, #10]
 8007752:	2300      	movs	r3, #0
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fbda 	bl	8007f14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d19e      	bne.n	80076a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 faac 	bl	8007ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e01a      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2220      	movs	r2, #32
 8007784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6859      	ldr	r1, [r3, #4]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <HAL_I2C_Mem_Write+0x224>)
 8007792:	400b      	ands	r3, r1
 8007794:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e000      	b.n	80077b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
  }
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	fe00e800 	.word	0xfe00e800

080077c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	817b      	strh	r3, [r7, #10]
 80077d2:	460b      	mov	r3, r1
 80077d4:	813b      	strh	r3, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	f040 80fd 	bne.w	80079e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <HAL_I2C_Mem_Read+0x34>
 80077ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d105      	bne.n	8007800 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0f1      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_I2C_Mem_Read+0x4e>
 800780a:	2302      	movs	r3, #2
 800780c:	e0ea      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007816:	f7fe f8c9 	bl	80059ac <HAL_GetTick>
 800781a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2319      	movs	r3, #25
 8007822:	2201      	movs	r2, #1
 8007824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f9af 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e0d5      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2222      	movs	r2, #34	@ 0x22
 800783c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2240      	movs	r2, #64	@ 0x40
 8007844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a3a      	ldr	r2, [r7, #32]
 8007852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007860:	88f8      	ldrh	r0, [r7, #6]
 8007862:	893a      	ldrh	r2, [r7, #8]
 8007864:	8979      	ldrh	r1, [r7, #10]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	4603      	mov	r3, r0
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f913 	bl	8007a9c <I2C_RequestMemoryRead>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e0ad      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2bff      	cmp	r3, #255	@ 0xff
 8007890:	d90e      	bls.n	80078b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800789c:	b2da      	uxtb	r2, r3
 800789e:	8979      	ldrh	r1, [r7, #10]
 80078a0:	4b52      	ldr	r3, [pc, #328]	@ (80079ec <HAL_I2C_Mem_Read+0x22c>)
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fb33 	bl	8007f14 <I2C_TransferConfig>
 80078ae:	e00f      	b.n	80078d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	8979      	ldrh	r1, [r7, #10]
 80078c2:	4b4a      	ldr	r3, [pc, #296]	@ (80079ec <HAL_I2C_Mem_Read+0x22c>)
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fb22 	bl	8007f14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d6:	2200      	movs	r2, #0
 80078d8:	2104      	movs	r1, #4
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f956 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e07c      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d034      	beq.n	8007990 <HAL_I2C_Mem_Read+0x1d0>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d130      	bne.n	8007990 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007934:	2200      	movs	r2, #0
 8007936:	2180      	movs	r1, #128	@ 0x80
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f927 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e04d      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2bff      	cmp	r3, #255	@ 0xff
 8007950:	d90e      	bls.n	8007970 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2201      	movs	r2, #1
 8007956:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800795c:	b2da      	uxtb	r2, r3
 800795e:	8979      	ldrh	r1, [r7, #10]
 8007960:	2300      	movs	r3, #0
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fad3 	bl	8007f14 <I2C_TransferConfig>
 800796e:	e00f      	b.n	8007990 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797e:	b2da      	uxtb	r2, r3
 8007980:	8979      	ldrh	r1, [r7, #10]
 8007982:	2300      	movs	r3, #0
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fac2 	bl	8007f14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d19a      	bne.n	80078d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f994 	bl	8007ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e01a      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2220      	movs	r2, #32
 80079b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4b0b      	ldr	r3, [pc, #44]	@ (80079f0 <HAL_I2C_Mem_Read+0x230>)
 80079c2:	400b      	ands	r3, r1
 80079c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	e000      	b.n	80079e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80079e2:	2302      	movs	r3, #2
  }
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	80002400 	.word	0x80002400
 80079f0:	fe00e800 	.word	0xfe00e800

080079f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	4608      	mov	r0, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	461a      	mov	r2, r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	817b      	strh	r3, [r7, #10]
 8007a06:	460b      	mov	r3, r1
 8007a08:	813b      	strh	r3, [r7, #8]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	8979      	ldrh	r1, [r7, #10]
 8007a14:	4b20      	ldr	r3, [pc, #128]	@ (8007a98 <I2C_RequestMemoryWrite+0xa4>)
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fa79 	bl	8007f14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	69b9      	ldr	r1, [r7, #24]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f909 	bl	8007c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e02c      	b.n	8007a90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d105      	bne.n	8007a48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a3c:	893b      	ldrh	r3, [r7, #8]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a46:	e015      	b.n	8007a74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	69b9      	ldr	r1, [r7, #24]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f8ef 	bl	8007c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e012      	b.n	8007a90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a6a:	893b      	ldrh	r3, [r7, #8]
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2180      	movs	r1, #128	@ 0x80
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f884 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	80002000 	.word	0x80002000

08007a9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	817b      	strh	r3, [r7, #10]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	813b      	strh	r3, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	8979      	ldrh	r1, [r7, #10]
 8007abc:	4b20      	ldr	r3, [pc, #128]	@ (8007b40 <I2C_RequestMemoryRead+0xa4>)
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 fa26 	bl	8007f14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	69b9      	ldr	r1, [r7, #24]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f8b6 	bl	8007c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e02c      	b.n	8007b36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d105      	bne.n	8007aee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	629a      	str	r2, [r3, #40]	@ 0x28
 8007aec:	e015      	b.n	8007b1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007aee:	893b      	ldrh	r3, [r7, #8]
 8007af0:	0a1b      	lsrs	r3, r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	69b9      	ldr	r1, [r7, #24]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f89c 	bl	8007c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e012      	b.n	8007b36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b10:	893b      	ldrh	r3, [r7, #8]
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2140      	movs	r1, #64	@ 0x40
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 f831 	bl	8007b8c <I2C_WaitOnFlagUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	80002000 	.word	0x80002000

08007b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d103      	bne.n	8007b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d007      	beq.n	8007b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	619a      	str	r2, [r3, #24]
  }
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b9c:	e03b      	b.n	8007c16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f8d6 	bl	8007d54 <I2C_IsErrorOccurred>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e041      	b.n	8007c36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d02d      	beq.n	8007c16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bba:	f7fd fef7 	bl	80059ac <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d122      	bne.n	8007c16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d113      	bne.n	8007c16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf2:	f043 0220 	orr.w	r2, r3, #32
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e00f      	b.n	8007c36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d0b4      	beq.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c4a:	e033      	b.n	8007cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f87f 	bl	8007d54 <I2C_IsErrorOccurred>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e031      	b.n	8007cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d025      	beq.n	8007cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c68:	f7fd fea0 	bl	80059ac <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d302      	bcc.n	8007c7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d11a      	bne.n	8007cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d013      	beq.n	8007cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e007      	b.n	8007cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d1c4      	bne.n	8007c4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cd8:	e02f      	b.n	8007d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f838 	bl	8007d54 <I2C_IsErrorOccurred>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e02d      	b.n	8007d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cee:	f7fd fe5d 	bl	80059ac <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d11a      	bne.n	8007d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d013      	beq.n	8007d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d16:	f043 0220 	orr.w	r2, r3, #32
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e007      	b.n	8007d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d1c8      	bne.n	8007cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08a      	sub	sp, #40	@ 0x28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d068      	beq.n	8007e52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2210      	movs	r2, #16
 8007d86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d88:	e049      	b.n	8007e1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d045      	beq.n	8007e1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d92:	f7fd fe0b 	bl	80059ac <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d302      	bcc.n	8007da8 <I2C_IsErrorOccurred+0x54>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d13a      	bne.n	8007e1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007db2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dca:	d121      	bne.n	8007e10 <I2C_IsErrorOccurred+0xbc>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dd2:	d01d      	beq.n	8007e10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007dd4:	7cfb      	ldrb	r3, [r7, #19]
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d01a      	beq.n	8007e10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007dea:	f7fd fddf 	bl	80059ac <HAL_GetTick>
 8007dee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007df0:	e00e      	b.n	8007e10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007df2:	f7fd fddb 	bl	80059ac <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b19      	cmp	r3, #25
 8007dfe:	d907      	bls.n	8007e10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	f043 0320 	orr.w	r3, r3, #32
 8007e06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007e0e:	e006      	b.n	8007e1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d1e9      	bne.n	8007df2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d003      	beq.n	8007e34 <I2C_IsErrorOccurred+0xe0>
 8007e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0aa      	beq.n	8007d8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2220      	movs	r2, #32
 8007e42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	f043 0304 	orr.w	r3, r3, #4
 8007e4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	f043 0308 	orr.w	r3, r3, #8
 8007e8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	f043 0302 	orr.w	r3, r3, #2
 8007eae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01c      	beq.n	8007f02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff fe3b 	bl	8007b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6859      	ldr	r1, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f10 <I2C_IsErrorOccurred+0x1bc>)
 8007eda:	400b      	ands	r3, r1
 8007edc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007f02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3728      	adds	r7, #40	@ 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	fe00e800 	.word	0xfe00e800

08007f14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	817b      	strh	r3, [r7, #10]
 8007f22:	4613      	mov	r3, r2
 8007f24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f26:	897b      	ldrh	r3, [r7, #10]
 8007f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f2c:	7a7b      	ldrb	r3, [r7, #9]
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f34:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f42:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	0d5b      	lsrs	r3, r3, #21
 8007f4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007f52:	4b08      	ldr	r3, [pc, #32]	@ (8007f74 <I2C_TransferConfig+0x60>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	43db      	mvns	r3, r3
 8007f58:	ea02 0103 	and.w	r1, r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	03ff63ff 	.word	0x03ff63ff

08007f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d138      	bne.n	8008000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e032      	b.n	8008002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2224      	movs	r2, #36	@ 0x24
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6819      	ldr	r1, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e000      	b.n	8008002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
  }
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b20      	cmp	r3, #32
 8008022:	d139      	bne.n	8008098 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800802a:	2b01      	cmp	r3, #1
 800802c:	d101      	bne.n	8008032 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800802e:	2302      	movs	r3, #2
 8008030:	e033      	b.n	800809a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2224      	movs	r2, #36	@ 0x24
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0201 	bic.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008060:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e000      	b.n	800809a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008098:	2302      	movs	r3, #2
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e08f      	b.n	80081d8 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7fb ff2d 	bl	8003f2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2202      	movs	r2, #2
 80080d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80080e8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6999      	ldr	r1, [r3, #24]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80080fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6999      	ldr	r1, [r3, #24]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a19      	ldr	r1, [r3, #32]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	430a      	orrs	r2, r1
 8008138:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	430a      	orrs	r2, r1
 800814e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	430a      	orrs	r2, r1
 8008164:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008176:	041b      	lsls	r3, r3, #16
 8008178:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008188:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0206 	orr.w	r2, r2, #6
 80081b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0201 	orr.w	r2, r2, #1
 80081c4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d023      	beq.n	800824a <HAL_LTDC_IRQHandler+0x6a>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01e      	beq.n	800824a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0204 	bic.w	r2, r2, #4
 800821a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2204      	movs	r2, #4
 8008222:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800822a:	f043 0201 	orr.w	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2204      	movs	r2, #4
 8008238:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f86f 	bl	8008328 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d023      	beq.n	800829c <HAL_LTDC_IRQHandler+0xbc>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01e      	beq.n	800829c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0202 	bic.w	r2, r2, #2
 800826c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2202      	movs	r2, #2
 8008274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800827c:	f043 0202 	orr.w	r2, r3, #2
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2204      	movs	r2, #4
 800828a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f846 	bl	8008328 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01b      	beq.n	80082de <HAL_LTDC_IRQHandler+0xfe>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d016      	beq.n	80082de <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0201 	bic.w	r2, r2, #1
 80082be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2201      	movs	r2, #1
 80082c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f82f 	bl	800833c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01b      	beq.n	8008320 <HAL_LTDC_IRQHandler+0x140>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d016      	beq.n	8008320 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0208 	bic.w	r2, r2, #8
 8008300:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2208      	movs	r2, #8
 8008308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f818 	bl	8008350 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008364:	b5b0      	push	{r4, r5, r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_LTDC_ConfigLayer+0x1a>
 800837a:	2302      	movs	r3, #2
 800837c:	e02c      	b.n	80083d8 <HAL_LTDC_ConfigLayer+0x74>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2202      	movs	r2, #2
 800838a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2134      	movs	r1, #52	@ 0x34
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	4413      	add	r3, r2
 800839a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4614      	mov	r4, r2
 80083a2:	461d      	mov	r5, r3
 80083a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f811 	bl	80083e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2201      	movs	r2, #1
 80083c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bdb0      	pop	{r4, r5, r7, pc}

080083e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b089      	sub	sp, #36	@ 0x24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	0c1b      	lsrs	r3, r3, #16
 80083f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083fc:	4413      	add	r3, r2
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	01db      	lsls	r3, r3, #7
 800840c:	4413      	add	r3, r2
 800840e:	3384      	adds	r3, #132	@ 0x84
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	4611      	mov	r1, r2
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	01d2      	lsls	r2, r2, #7
 800841c:	440a      	add	r2, r1
 800841e:	3284      	adds	r2, #132	@ 0x84
 8008420:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008424:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	0c1b      	lsrs	r3, r3, #16
 8008432:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008436:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008438:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4619      	mov	r1, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	01db      	lsls	r3, r3, #7
 8008444:	440b      	add	r3, r1
 8008446:	3384      	adds	r3, #132	@ 0x84
 8008448:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800844e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800845e:	4413      	add	r3, r2
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	01db      	lsls	r3, r3, #7
 800846e:	4413      	add	r3, r2
 8008470:	3384      	adds	r3, #132	@ 0x84
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	4611      	mov	r1, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	01d2      	lsls	r2, r2, #7
 800847e:	440a      	add	r2, r1
 8008480:	3284      	adds	r2, #132	@ 0x84
 8008482:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008486:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008496:	4413      	add	r3, r2
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4619      	mov	r1, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	01db      	lsls	r3, r3, #7
 80084a4:	440b      	add	r3, r1
 80084a6:	3384      	adds	r3, #132	@ 0x84
 80084a8:	4619      	mov	r1, r3
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	01db      	lsls	r3, r3, #7
 80084ba:	4413      	add	r3, r2
 80084bc:	3384      	adds	r3, #132	@ 0x84
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	4611      	mov	r1, r2
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	01d2      	lsls	r2, r2, #7
 80084ca:	440a      	add	r2, r1
 80084cc:	3284      	adds	r2, #132	@ 0x84
 80084ce:	f023 0307 	bic.w	r3, r3, #7
 80084d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	01db      	lsls	r3, r3, #7
 80084de:	4413      	add	r3, r2
 80084e0:	3384      	adds	r3, #132	@ 0x84
 80084e2:	461a      	mov	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80084fa:	041b      	lsls	r3, r3, #16
 80084fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	061b      	lsls	r3, r3, #24
 8008504:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800850c:	461a      	mov	r2, r3
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	431a      	orrs	r2, r3
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	431a      	orrs	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	01db      	lsls	r3, r3, #7
 8008520:	440b      	add	r3, r1
 8008522:	3384      	adds	r3, #132	@ 0x84
 8008524:	4619      	mov	r1, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4313      	orrs	r3, r2
 800852a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	01db      	lsls	r3, r3, #7
 8008536:	4413      	add	r3, r2
 8008538:	3384      	adds	r3, #132	@ 0x84
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	4611      	mov	r1, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	01d2      	lsls	r2, r2, #7
 8008546:	440a      	add	r2, r1
 8008548:	3284      	adds	r2, #132	@ 0x84
 800854a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800854e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	461a      	mov	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	01db      	lsls	r3, r3, #7
 800855a:	4413      	add	r3, r2
 800855c:	3384      	adds	r3, #132	@ 0x84
 800855e:	461a      	mov	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	01db      	lsls	r3, r3, #7
 8008570:	4413      	add	r3, r2
 8008572:	3384      	adds	r3, #132	@ 0x84
 8008574:	69da      	ldr	r2, [r3, #28]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	01db      	lsls	r3, r3, #7
 8008580:	440b      	add	r3, r1
 8008582:	3384      	adds	r3, #132	@ 0x84
 8008584:	4619      	mov	r1, r3
 8008586:	4b4f      	ldr	r3, [pc, #316]	@ (80086c4 <LTDC_SetConfig+0x2e4>)
 8008588:	4013      	ands	r3, r2
 800858a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	6809      	ldr	r1, [r1, #0]
 8008598:	4608      	mov	r0, r1
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	01c9      	lsls	r1, r1, #7
 800859e:	4401      	add	r1, r0
 80085a0:	3184      	adds	r1, #132	@ 0x84
 80085a2:	4313      	orrs	r3, r2
 80085a4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	01db      	lsls	r3, r3, #7
 80085b0:	4413      	add	r3, r2
 80085b2:	3384      	adds	r3, #132	@ 0x84
 80085b4:	461a      	mov	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ba:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80085c4:	2304      	movs	r3, #4
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	e01b      	b.n	8008602 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d102      	bne.n	80085d8 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 80085d2:	2303      	movs	r3, #3
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e014      	b.n	8008602 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d00b      	beq.n	80085f8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d007      	beq.n	80085f8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d003      	beq.n	80085f8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80085f4:	2b07      	cmp	r3, #7
 80085f6:	d102      	bne.n	80085fe <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 80085f8:	2302      	movs	r3, #2
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e001      	b.n	8008602 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 80085fe:	2301      	movs	r3, #1
 8008600:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	01db      	lsls	r3, r3, #7
 800860c:	4413      	add	r3, r2
 800860e:	3384      	adds	r3, #132	@ 0x84
 8008610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	6812      	ldr	r2, [r2, #0]
 8008616:	4611      	mov	r1, r2
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	01d2      	lsls	r2, r2, #7
 800861c:	440a      	add	r2, r1
 800861e:	3284      	adds	r2, #132	@ 0x84
 8008620:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008624:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	fb02 f303 	mul.w	r3, r2, r3
 8008630:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6859      	ldr	r1, [r3, #4]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	1acb      	subs	r3, r1, r3
 800863c:	69f9      	ldr	r1, [r7, #28]
 800863e:	fb01 f303 	mul.w	r3, r1, r3
 8008642:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008644:	68f9      	ldr	r1, [r7, #12]
 8008646:	6809      	ldr	r1, [r1, #0]
 8008648:	4608      	mov	r0, r1
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	01c9      	lsls	r1, r1, #7
 800864e:	4401      	add	r1, r0
 8008650:	3184      	adds	r1, #132	@ 0x84
 8008652:	4313      	orrs	r3, r2
 8008654:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	01db      	lsls	r3, r3, #7
 8008660:	4413      	add	r3, r2
 8008662:	3384      	adds	r3, #132	@ 0x84
 8008664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	01db      	lsls	r3, r3, #7
 8008670:	440b      	add	r3, r1
 8008672:	3384      	adds	r3, #132	@ 0x84
 8008674:	4619      	mov	r1, r3
 8008676:	4b14      	ldr	r3, [pc, #80]	@ (80086c8 <LTDC_SetConfig+0x2e8>)
 8008678:	4013      	ands	r3, r2
 800867a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	01db      	lsls	r3, r3, #7
 8008686:	4413      	add	r3, r2
 8008688:	3384      	adds	r3, #132	@ 0x84
 800868a:	461a      	mov	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	01db      	lsls	r3, r3, #7
 800869c:	4413      	add	r3, r2
 800869e:	3384      	adds	r3, #132	@ 0x84
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	4611      	mov	r1, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	01d2      	lsls	r2, r2, #7
 80086ac:	440a      	add	r2, r1
 80086ae:	3284      	adds	r2, #132	@ 0x84
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	6013      	str	r3, [r2, #0]
}
 80086b6:	bf00      	nop
 80086b8:	3724      	adds	r7, #36	@ 0x24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	fffff8f8 	.word	0xfffff8f8
 80086c8:	fffff800 	.word	0xfffff800

080086cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086d0:	4b05      	ldr	r3, [pc, #20]	@ (80086e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a04      	ldr	r2, [pc, #16]	@ (80086e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80086d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086da:	6013      	str	r3, [r2, #0]
}
 80086dc:	bf00      	nop
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40007000 	.word	0x40007000

080086ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80086f6:	4b23      	ldr	r3, [pc, #140]	@ (8008784 <HAL_PWREx_EnableOverDrive+0x98>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fa:	4a22      	ldr	r2, [pc, #136]	@ (8008784 <HAL_PWREx_EnableOverDrive+0x98>)
 80086fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008700:	6413      	str	r3, [r2, #64]	@ 0x40
 8008702:	4b20      	ldr	r3, [pc, #128]	@ (8008784 <HAL_PWREx_EnableOverDrive+0x98>)
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800870e:	4b1e      	ldr	r3, [pc, #120]	@ (8008788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1d      	ldr	r2, [pc, #116]	@ (8008788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008718:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800871a:	f7fd f947 	bl	80059ac <HAL_GetTick>
 800871e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008720:	e009      	b.n	8008736 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008722:	f7fd f943 	bl	80059ac <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008730:	d901      	bls.n	8008736 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e022      	b.n	800877c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008736:	4b14      	ldr	r3, [pc, #80]	@ (8008788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800873e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008742:	d1ee      	bne.n	8008722 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008744:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a0f      	ldr	r2, [pc, #60]	@ (8008788 <HAL_PWREx_EnableOverDrive+0x9c>)
 800874a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800874e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008750:	f7fd f92c 	bl	80059ac <HAL_GetTick>
 8008754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008756:	e009      	b.n	800876c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008758:	f7fd f928 	bl	80059ac <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008766:	d901      	bls.n	800876c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e007      	b.n	800877c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800876c:	4b06      	ldr	r3, [pc, #24]	@ (8008788 <HAL_PWREx_EnableOverDrive+0x9c>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008778:	d1ee      	bne.n	8008758 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40023800 	.word	0x40023800
 8008788:	40007000 	.word	0x40007000

0800878c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af02      	add	r7, sp, #8
 8008792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008794:	f7fd f90a 	bl	80059ac <HAL_GetTick>
 8008798:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e067      	b.n	8008874 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7fb fddb 	bl	8004374 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80087be:	f241 3188 	movw	r1, #5000	@ 0x1388
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f85e 	bl	8008884 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	021a      	lsls	r2, r3, #8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	2120      	movs	r1, #32
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f856 	bl	80088a0 <QSPI_WaitFlagStateUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d135      	bne.n	800886a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4b1d      	ldr	r3, [pc, #116]	@ (800887c <HAL_QSPI_Init+0xf0>)
 8008806:	4013      	ands	r3, r2
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6852      	ldr	r2, [r2, #4]
 800880c:	0611      	lsls	r1, r2, #24
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	68d2      	ldr	r2, [r2, #12]
 8008812:	4311      	orrs	r1, r2
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	69d2      	ldr	r2, [r2, #28]
 8008818:	4311      	orrs	r1, r2
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6a12      	ldr	r2, [r2, #32]
 800881e:	4311      	orrs	r1, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	430b      	orrs	r3, r1
 8008826:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	4b14      	ldr	r3, [pc, #80]	@ (8008880 <HAL_QSPI_Init+0xf4>)
 8008830:	4013      	ands	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6912      	ldr	r2, [r2, #16]
 8008836:	0411      	lsls	r1, r2, #16
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6952      	ldr	r2, [r2, #20]
 800883c:	4311      	orrs	r1, r2
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	6992      	ldr	r2, [r2, #24]
 8008842:	4311      	orrs	r1, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6812      	ldr	r2, [r2, #0]
 8008848:	430b      	orrs	r3, r1
 800884a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0201 	orr.w	r2, r2, #1
 800885a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8008872:	7afb      	ldrb	r3, [r7, #11]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	00ffff2f 	.word	0x00ffff2f
 8008880:	ffe0f8fe 	.word	0xffe0f8fe

08008884 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80088b0:	e01a      	b.n	80088e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d016      	beq.n	80088e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ba:	f7fd f877 	bl	80059ac <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d302      	bcc.n	80088d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2204      	movs	r2, #4
 80088d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088dc:	f043 0201 	orr.w	r2, r3, #1
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e00e      	b.n	8008906 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4013      	ands	r3, r2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bf14      	ite	ne
 80088f6:	2301      	movne	r3, #1
 80088f8:	2300      	moveq	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	429a      	cmp	r2, r3
 8008902:	d1d6      	bne.n	80088b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008918:	2300      	movs	r3, #0
 800891a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e291      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 8087 	beq.w	8008a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008934:	4b96      	ldr	r3, [pc, #600]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 030c 	and.w	r3, r3, #12
 800893c:	2b04      	cmp	r3, #4
 800893e:	d00c      	beq.n	800895a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008940:	4b93      	ldr	r3, [pc, #588]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f003 030c 	and.w	r3, r3, #12
 8008948:	2b08      	cmp	r3, #8
 800894a:	d112      	bne.n	8008972 <HAL_RCC_OscConfig+0x62>
 800894c:	4b90      	ldr	r3, [pc, #576]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008958:	d10b      	bne.n	8008972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800895a:	4b8d      	ldr	r3, [pc, #564]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d06c      	beq.n	8008a40 <HAL_RCC_OscConfig+0x130>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d168      	bne.n	8008a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e26b      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800897a:	d106      	bne.n	800898a <HAL_RCC_OscConfig+0x7a>
 800897c:	4b84      	ldr	r3, [pc, #528]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a83      	ldr	r2, [pc, #524]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e02e      	b.n	80089e8 <HAL_RCC_OscConfig+0xd8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10c      	bne.n	80089ac <HAL_RCC_OscConfig+0x9c>
 8008992:	4b7f      	ldr	r3, [pc, #508]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a7e      	ldr	r2, [pc, #504]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	4b7c      	ldr	r3, [pc, #496]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a7b      	ldr	r2, [pc, #492]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e01d      	b.n	80089e8 <HAL_RCC_OscConfig+0xd8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089b4:	d10c      	bne.n	80089d0 <HAL_RCC_OscConfig+0xc0>
 80089b6:	4b76      	ldr	r3, [pc, #472]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a75      	ldr	r2, [pc, #468]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	4b73      	ldr	r3, [pc, #460]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a72      	ldr	r2, [pc, #456]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	e00b      	b.n	80089e8 <HAL_RCC_OscConfig+0xd8>
 80089d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a6e      	ldr	r2, [pc, #440]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	4b6c      	ldr	r3, [pc, #432]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a6b      	ldr	r2, [pc, #428]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 80089e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d013      	beq.n	8008a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f0:	f7fc ffdc 	bl	80059ac <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089f8:	f7fc ffd8 	bl	80059ac <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b64      	cmp	r3, #100	@ 0x64
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e21f      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a0a:	4b61      	ldr	r3, [pc, #388]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0f0      	beq.n	80089f8 <HAL_RCC_OscConfig+0xe8>
 8008a16:	e014      	b.n	8008a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a18:	f7fc ffc8 	bl	80059ac <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a20:	f7fc ffc4 	bl	80059ac <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b64      	cmp	r3, #100	@ 0x64
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e20b      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a32:	4b57      	ldr	r3, [pc, #348]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f0      	bne.n	8008a20 <HAL_RCC_OscConfig+0x110>
 8008a3e:	e000      	b.n	8008a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d069      	beq.n	8008b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a4e:	4b50      	ldr	r3, [pc, #320]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 030c 	and.w	r3, r3, #12
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 030c 	and.w	r3, r3, #12
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d11c      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x190>
 8008a66:	4b4a      	ldr	r3, [pc, #296]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d116      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a72:	4b47      	ldr	r3, [pc, #284]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <HAL_RCC_OscConfig+0x17a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d001      	beq.n	8008a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e1df      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a8a:	4b41      	ldr	r3, [pc, #260]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	493d      	ldr	r1, [pc, #244]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a9e:	e040      	b.n	8008b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d023      	beq.n	8008af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008aa8:	4b39      	ldr	r3, [pc, #228]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a38      	ldr	r2, [pc, #224]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7fc ff7a 	bl	80059ac <HAL_GetTick>
 8008ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008abc:	f7fc ff76 	bl	80059ac <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e1bd      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ace:	4b30      	ldr	r3, [pc, #192]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ada:	4b2d      	ldr	r3, [pc, #180]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4929      	ldr	r1, [pc, #164]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	600b      	str	r3, [r1, #0]
 8008aee:	e018      	b.n	8008b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008af0:	4b27      	ldr	r3, [pc, #156]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a26      	ldr	r2, [pc, #152]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008af6:	f023 0301 	bic.w	r3, r3, #1
 8008afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afc:	f7fc ff56 	bl	80059ac <HAL_GetTick>
 8008b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b02:	e008      	b.n	8008b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b04:	f7fc ff52 	bl	80059ac <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e199      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b16:	4b1e      	ldr	r3, [pc, #120]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f0      	bne.n	8008b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d038      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d019      	beq.n	8008b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b36:	4b16      	ldr	r3, [pc, #88]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b3a:	4a15      	ldr	r2, [pc, #84]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008b3c:	f043 0301 	orr.w	r3, r3, #1
 8008b40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b42:	f7fc ff33 	bl	80059ac <HAL_GetTick>
 8008b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b48:	e008      	b.n	8008b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b4a:	f7fc ff2f 	bl	80059ac <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d901      	bls.n	8008b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e176      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0f0      	beq.n	8008b4a <HAL_RCC_OscConfig+0x23a>
 8008b68:	e01a      	b.n	8008ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b6a:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b6e:	4a08      	ldr	r2, [pc, #32]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b76:	f7fc ff19 	bl	80059ac <HAL_GetTick>
 8008b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b7c:	e00a      	b.n	8008b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b7e:	f7fc ff15 	bl	80059ac <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d903      	bls.n	8008b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e15c      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
 8008b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b94:	4b91      	ldr	r3, [pc, #580]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1ee      	bne.n	8008b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 80a4 	beq.w	8008cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bae:	4b8b      	ldr	r3, [pc, #556]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10d      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bba:	4b88      	ldr	r3, [pc, #544]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbe:	4a87      	ldr	r2, [pc, #540]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008bc6:	4b85      	ldr	r3, [pc, #532]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bce:	60bb      	str	r3, [r7, #8]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bd6:	4b82      	ldr	r3, [pc, #520]	@ (8008de0 <HAL_RCC_OscConfig+0x4d0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d118      	bne.n	8008c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008be2:	4b7f      	ldr	r3, [pc, #508]	@ (8008de0 <HAL_RCC_OscConfig+0x4d0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a7e      	ldr	r2, [pc, #504]	@ (8008de0 <HAL_RCC_OscConfig+0x4d0>)
 8008be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bee:	f7fc fedd 	bl	80059ac <HAL_GetTick>
 8008bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bf6:	f7fc fed9 	bl	80059ac <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b64      	cmp	r3, #100	@ 0x64
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e120      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c08:	4b75      	ldr	r3, [pc, #468]	@ (8008de0 <HAL_RCC_OscConfig+0x4d0>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0f0      	beq.n	8008bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d106      	bne.n	8008c2a <HAL_RCC_OscConfig+0x31a>
 8008c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c20:	4a6e      	ldr	r2, [pc, #440]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c28:	e02d      	b.n	8008c86 <HAL_RCC_OscConfig+0x376>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10c      	bne.n	8008c4c <HAL_RCC_OscConfig+0x33c>
 8008c32:	4b6a      	ldr	r3, [pc, #424]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c36:	4a69      	ldr	r2, [pc, #420]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c38:	f023 0301 	bic.w	r3, r3, #1
 8008c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c3e:	4b67      	ldr	r3, [pc, #412]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c42:	4a66      	ldr	r2, [pc, #408]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c44:	f023 0304 	bic.w	r3, r3, #4
 8008c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c4a:	e01c      	b.n	8008c86 <HAL_RCC_OscConfig+0x376>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b05      	cmp	r3, #5
 8008c52:	d10c      	bne.n	8008c6e <HAL_RCC_OscConfig+0x35e>
 8008c54:	4b61      	ldr	r3, [pc, #388]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c58:	4a60      	ldr	r2, [pc, #384]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c5a:	f043 0304 	orr.w	r3, r3, #4
 8008c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c60:	4b5e      	ldr	r3, [pc, #376]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c64:	4a5d      	ldr	r2, [pc, #372]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c6c:	e00b      	b.n	8008c86 <HAL_RCC_OscConfig+0x376>
 8008c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c72:	4a5a      	ldr	r2, [pc, #360]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c74:	f023 0301 	bic.w	r3, r3, #1
 8008c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c7a:	4b58      	ldr	r3, [pc, #352]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c7e:	4a57      	ldr	r2, [pc, #348]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008c80:	f023 0304 	bic.w	r3, r3, #4
 8008c84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d015      	beq.n	8008cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8e:	f7fc fe8d 	bl	80059ac <HAL_GetTick>
 8008c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c94:	e00a      	b.n	8008cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c96:	f7fc fe89 	bl	80059ac <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d901      	bls.n	8008cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e0ce      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cac:	4b4b      	ldr	r3, [pc, #300]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0ee      	beq.n	8008c96 <HAL_RCC_OscConfig+0x386>
 8008cb8:	e014      	b.n	8008ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cba:	f7fc fe77 	bl	80059ac <HAL_GetTick>
 8008cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cc0:	e00a      	b.n	8008cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cc2:	f7fc fe73 	bl	80059ac <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d901      	bls.n	8008cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e0b8      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cd8:	4b40      	ldr	r3, [pc, #256]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1ee      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d105      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cea:	4b3c      	ldr	r3, [pc, #240]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cee:	4a3b      	ldr	r2, [pc, #236]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cf4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 80a4 	beq.w	8008e48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d00:	4b36      	ldr	r3, [pc, #216]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f003 030c 	and.w	r3, r3, #12
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d06b      	beq.n	8008de4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d149      	bne.n	8008da8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d14:	4b31      	ldr	r3, [pc, #196]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a30      	ldr	r2, [pc, #192]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d20:	f7fc fe44 	bl	80059ac <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d28:	f7fc fe40 	bl	80059ac <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e087      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d3a:	4b28      	ldr	r3, [pc, #160]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1f0      	bne.n	8008d28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69da      	ldr	r2, [r3, #28]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d54:	019b      	lsls	r3, r3, #6
 8008d56:	431a      	orrs	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	041b      	lsls	r3, r3, #16
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d68:	061b      	lsls	r3, r3, #24
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d74:	4b19      	ldr	r3, [pc, #100]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d80:	f7fc fe14 	bl	80059ac <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d88:	f7fc fe10 	bl	80059ac <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e057      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d9a:	4b10      	ldr	r3, [pc, #64]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f0      	beq.n	8008d88 <HAL_RCC_OscConfig+0x478>
 8008da6:	e04f      	b.n	8008e48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008da8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a0b      	ldr	r2, [pc, #44]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7fc fdfa 	bl	80059ac <HAL_GetTick>
 8008db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dbc:	f7fc fdf6 	bl	80059ac <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e03d      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dce:	4b03      	ldr	r3, [pc, #12]	@ (8008ddc <HAL_RCC_OscConfig+0x4cc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f0      	bne.n	8008dbc <HAL_RCC_OscConfig+0x4ac>
 8008dda:	e035      	b.n	8008e48 <HAL_RCC_OscConfig+0x538>
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008de4:	4b1b      	ldr	r3, [pc, #108]	@ (8008e54 <HAL_RCC_OscConfig+0x544>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d028      	beq.n	8008e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d121      	bne.n	8008e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d11a      	bne.n	8008e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008e14:	4013      	ands	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d111      	bne.n	8008e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d107      	bne.n	8008e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d001      	beq.n	8008e48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40023800 	.word	0x40023800

08008e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e0d0      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e70:	4b6a      	ldr	r3, [pc, #424]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d910      	bls.n	8008ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7e:	4b67      	ldr	r3, [pc, #412]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f023 020f 	bic.w	r2, r3, #15
 8008e86:	4965      	ldr	r1, [pc, #404]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e8e:	4b63      	ldr	r3, [pc, #396]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 030f 	and.w	r3, r3, #15
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d001      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e0b8      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d020      	beq.n	8008eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008eb8:	4b59      	ldr	r3, [pc, #356]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	4a58      	ldr	r2, [pc, #352]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ed0:	4b53      	ldr	r3, [pc, #332]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	4a52      	ldr	r2, [pc, #328]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008edc:	4b50      	ldr	r3, [pc, #320]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	494d      	ldr	r1, [pc, #308]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d040      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d107      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f02:	4b47      	ldr	r3, [pc, #284]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d115      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e07f      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d107      	bne.n	8008f2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f1a:	4b41      	ldr	r3, [pc, #260]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e073      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e06b      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f3a:	4b39      	ldr	r3, [pc, #228]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 0203 	bic.w	r2, r3, #3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4936      	ldr	r1, [pc, #216]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f4c:	f7fc fd2e 	bl	80059ac <HAL_GetTick>
 8008f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f52:	e00a      	b.n	8008f6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f54:	f7fc fd2a 	bl	80059ac <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e053      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 020c 	and.w	r2, r3, #12
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d1eb      	bne.n	8008f54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f7c:	4b27      	ldr	r3, [pc, #156]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 030f 	and.w	r3, r3, #15
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d210      	bcs.n	8008fac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f8a:	4b24      	ldr	r3, [pc, #144]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f023 020f 	bic.w	r2, r3, #15
 8008f92:	4922      	ldr	r1, [pc, #136]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f9a:	4b20      	ldr	r3, [pc, #128]	@ (800901c <HAL_RCC_ClockConfig+0x1c4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d001      	beq.n	8008fac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e032      	b.n	8009012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fb8:	4b19      	ldr	r3, [pc, #100]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4916      	ldr	r1, [pc, #88]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d009      	beq.n	8008fea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008fd6:	4b12      	ldr	r3, [pc, #72]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	490e      	ldr	r1, [pc, #56]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008fea:	f000 f821 	bl	8009030 <HAL_RCC_GetSysClockFreq>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <HAL_RCC_ClockConfig+0x1c8>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	091b      	lsrs	r3, r3, #4
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	490a      	ldr	r1, [pc, #40]	@ (8009024 <HAL_RCC_ClockConfig+0x1cc>)
 8008ffc:	5ccb      	ldrb	r3, [r1, r3]
 8008ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8009002:	4a09      	ldr	r2, [pc, #36]	@ (8009028 <HAL_RCC_ClockConfig+0x1d0>)
 8009004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009006:	4b09      	ldr	r3, [pc, #36]	@ (800902c <HAL_RCC_ClockConfig+0x1d4>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f7fb fe06 	bl	8004c1c <HAL_InitTick>

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	40023c00 	.word	0x40023c00
 8009020:	40023800 	.word	0x40023800
 8009024:	08017a94 	.word	0x08017a94
 8009028:	20000004 	.word	0x20000004
 800902c:	20000008 	.word	0x20000008

08009030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009034:	b090      	sub	sp, #64	@ 0x40
 8009036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	637b      	str	r3, [r7, #52]	@ 0x34
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009040:	2300      	movs	r3, #0
 8009042:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009048:	4b59      	ldr	r3, [pc, #356]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b08      	cmp	r3, #8
 8009052:	d00d      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x40>
 8009054:	2b08      	cmp	r3, #8
 8009056:	f200 80a1 	bhi.w	800919c <HAL_RCC_GetSysClockFreq+0x16c>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <HAL_RCC_GetSysClockFreq+0x34>
 800905e:	2b04      	cmp	r3, #4
 8009060:	d003      	beq.n	800906a <HAL_RCC_GetSysClockFreq+0x3a>
 8009062:	e09b      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009064:	4b53      	ldr	r3, [pc, #332]	@ (80091b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009066:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009068:	e09b      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800906a:	4b53      	ldr	r3, [pc, #332]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800906c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800906e:	e098      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009070:	4b4f      	ldr	r3, [pc, #316]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800907a:	4b4d      	ldr	r3, [pc, #308]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d028      	beq.n	80090d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009086:	4b4a      	ldr	r3, [pc, #296]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	099b      	lsrs	r3, r3, #6
 800908c:	2200      	movs	r2, #0
 800908e:	623b      	str	r3, [r7, #32]
 8009090:	627a      	str	r2, [r7, #36]	@ 0x24
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009098:	2100      	movs	r1, #0
 800909a:	4b47      	ldr	r3, [pc, #284]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800909c:	fb03 f201 	mul.w	r2, r3, r1
 80090a0:	2300      	movs	r3, #0
 80090a2:	fb00 f303 	mul.w	r3, r0, r3
 80090a6:	4413      	add	r3, r2
 80090a8:	4a43      	ldr	r2, [pc, #268]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80090aa:	fba0 1202 	umull	r1, r2, r0, r2
 80090ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090b0:	460a      	mov	r2, r1
 80090b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80090b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090b6:	4413      	add	r3, r2
 80090b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090bc:	2200      	movs	r2, #0
 80090be:	61bb      	str	r3, [r7, #24]
 80090c0:	61fa      	str	r2, [r7, #28]
 80090c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80090ca:	f7f7 fdfd 	bl	8000cc8 <__aeabi_uldivmod>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4613      	mov	r3, r2
 80090d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090d6:	e053      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090d8:	4b35      	ldr	r3, [pc, #212]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	099b      	lsrs	r3, r3, #6
 80090de:	2200      	movs	r2, #0
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	617a      	str	r2, [r7, #20]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80090ea:	f04f 0b00 	mov.w	fp, #0
 80090ee:	4652      	mov	r2, sl
 80090f0:	465b      	mov	r3, fp
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f04f 0100 	mov.w	r1, #0
 80090fa:	0159      	lsls	r1, r3, #5
 80090fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009100:	0150      	lsls	r0, r2, #5
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	ebb2 080a 	subs.w	r8, r2, sl
 800910a:	eb63 090b 	sbc.w	r9, r3, fp
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800911a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800911e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009122:	ebb2 0408 	subs.w	r4, r2, r8
 8009126:	eb63 0509 	sbc.w	r5, r3, r9
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	00eb      	lsls	r3, r5, #3
 8009134:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009138:	00e2      	lsls	r2, r4, #3
 800913a:	4614      	mov	r4, r2
 800913c:	461d      	mov	r5, r3
 800913e:	eb14 030a 	adds.w	r3, r4, sl
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	eb45 030b 	adc.w	r3, r5, fp
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009156:	4629      	mov	r1, r5
 8009158:	028b      	lsls	r3, r1, #10
 800915a:	4621      	mov	r1, r4
 800915c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009160:	4621      	mov	r1, r4
 8009162:	028a      	lsls	r2, r1, #10
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	2200      	movs	r2, #0
 800916c:	60bb      	str	r3, [r7, #8]
 800916e:	60fa      	str	r2, [r7, #12]
 8009170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009174:	f7f7 fda8 	bl	8000cc8 <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4613      	mov	r3, r2
 800917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009180:	4b0b      	ldr	r3, [pc, #44]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	3301      	adds	r3, #1
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009190:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800919a:	e002      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800919c:	4b05      	ldr	r3, [pc, #20]	@ (80091b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800919e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80091a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3740      	adds	r7, #64	@ 0x40
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800
 80091b4:	00f42400 	.word	0x00f42400
 80091b8:	017d7840 	.word	0x017d7840

080091bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091c0:	4b03      	ldr	r3, [pc, #12]	@ (80091d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091c2:	681b      	ldr	r3, [r3, #0]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	20000004 	.word	0x20000004

080091d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091d8:	f7ff fff0 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 80091dc:	4602      	mov	r2, r0
 80091de:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	0a9b      	lsrs	r3, r3, #10
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	4903      	ldr	r1, [pc, #12]	@ (80091f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091ea:	5ccb      	ldrb	r3, [r1, r3]
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	40023800 	.word	0x40023800
 80091f8:	08017aa4 	.word	0x08017aa4

080091fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009200:	f7ff ffdc 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b05      	ldr	r3, [pc, #20]	@ (800921c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	0b5b      	lsrs	r3, r3, #13
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	4903      	ldr	r1, [pc, #12]	@ (8009220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009218:	4618      	mov	r0, r3
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40023800 	.word	0x40023800
 8009220:	08017aa4 	.word	0x08017aa4

08009224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	220f      	movs	r2, #15
 8009232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009234:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 0203 	and.w	r2, r3, #3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009240:	4b0f      	ldr	r3, [pc, #60]	@ (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800924c:	4b0c      	ldr	r3, [pc, #48]	@ (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009258:	4b09      	ldr	r3, [pc, #36]	@ (8009280 <HAL_RCC_GetClockConfig+0x5c>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	08db      	lsrs	r3, r3, #3
 800925e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009266:	4b07      	ldr	r3, [pc, #28]	@ (8009284 <HAL_RCC_GetClockConfig+0x60>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 020f 	and.w	r2, r3, #15
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	601a      	str	r2, [r3, #0]
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	40023800 	.word	0x40023800
 8009284:	40023c00 	.word	0x40023c00

08009288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d012      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092b0:	4b69      	ldr	r3, [pc, #420]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	4a68      	ldr	r2, [pc, #416]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80092ba:	6093      	str	r3, [r2, #8]
 80092bc:	4b66      	ldr	r3, [pc, #408]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c4:	4964      	ldr	r1, [pc, #400]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80092d2:	2301      	movs	r3, #1
 80092d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d017      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092e2:	4b5d      	ldr	r3, [pc, #372]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f0:	4959      	ldr	r1, [pc, #356]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009300:	d101      	bne.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009302:	2301      	movs	r3, #1
 8009304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800930e:	2301      	movs	r3, #1
 8009310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d017      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800931e:	4b4e      	ldr	r3, [pc, #312]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009324:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932c:	494a      	ldr	r1, [pc, #296]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800932e:	4313      	orrs	r3, r2
 8009330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800933c:	d101      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800933e:	2301      	movs	r3, #1
 8009340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800934a:	2301      	movs	r3, #1
 800934c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 808b 	beq.w	8009482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800936c:	4b3a      	ldr	r3, [pc, #232]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009370:	4a39      	ldr	r2, [pc, #228]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009376:	6413      	str	r3, [r2, #64]	@ 0x40
 8009378:	4b37      	ldr	r3, [pc, #220]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800937a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009384:	4b35      	ldr	r3, [pc, #212]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a34      	ldr	r2, [pc, #208]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800938a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800938e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009390:	f7fc fb0c 	bl	80059ac <HAL_GetTick>
 8009394:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009396:	e008      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009398:	f7fc fb08 	bl	80059ac <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b64      	cmp	r3, #100	@ 0x64
 80093a4:	d901      	bls.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e357      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80093aa:	4b2c      	ldr	r3, [pc, #176]	@ (800945c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0f0      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80093b6:	4b28      	ldr	r3, [pc, #160]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d035      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d02e      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093d4:	4b20      	ldr	r3, [pc, #128]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093de:	4b1e      	ldr	r3, [pc, #120]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ee:	4a1a      	ldr	r2, [pc, #104]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80093f6:	4a18      	ldr	r2, [pc, #96]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80093fc:	4b16      	ldr	r3, [pc, #88]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b01      	cmp	r3, #1
 8009406:	d114      	bne.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009408:	f7fc fad0 	bl	80059ac <HAL_GetTick>
 800940c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800940e:	e00a      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009410:	f7fc facc 	bl	80059ac <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800941e:	4293      	cmp	r3, r2
 8009420:	d901      	bls.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e319      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009426:	4b0c      	ldr	r3, [pc, #48]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0ee      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800943a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800943e:	d111      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009440:	4b05      	ldr	r3, [pc, #20]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800944c:	4b04      	ldr	r3, [pc, #16]	@ (8009460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800944e:	400b      	ands	r3, r1
 8009450:	4901      	ldr	r1, [pc, #4]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009452:	4313      	orrs	r3, r2
 8009454:	608b      	str	r3, [r1, #8]
 8009456:	e00b      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009458:	40023800 	.word	0x40023800
 800945c:	40007000 	.word	0x40007000
 8009460:	0ffffcff 	.word	0x0ffffcff
 8009464:	4baa      	ldr	r3, [pc, #680]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	4aa9      	ldr	r2, [pc, #676]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800946a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800946e:	6093      	str	r3, [r2, #8]
 8009470:	4ba7      	ldr	r3, [pc, #668]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009472:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800947c:	49a4      	ldr	r1, [pc, #656]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800947e:	4313      	orrs	r3, r2
 8009480:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b00      	cmp	r3, #0
 800948c:	d010      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800948e:	4ba0      	ldr	r3, [pc, #640]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009494:	4a9e      	ldr	r2, [pc, #632]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800949a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800949e:	4b9c      	ldr	r3, [pc, #624]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a8:	4999      	ldr	r1, [pc, #612]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094bc:	4b94      	ldr	r3, [pc, #592]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ca:	4991      	ldr	r1, [pc, #580]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094de:	4b8c      	ldr	r3, [pc, #560]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ec:	4988      	ldr	r1, [pc, #544]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009500:	4b83      	ldr	r3, [pc, #524]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800950e:	4980      	ldr	r1, [pc, #512]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009510:	4313      	orrs	r3, r2
 8009512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009522:	4b7b      	ldr	r3, [pc, #492]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009528:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009530:	4977      	ldr	r1, [pc, #476]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009532:	4313      	orrs	r3, r2
 8009534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009544:	4b72      	ldr	r3, [pc, #456]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800954a:	f023 0203 	bic.w	r2, r3, #3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009552:	496f      	ldr	r1, [pc, #444]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009554:	4313      	orrs	r3, r2
 8009556:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009566:	4b6a      	ldr	r3, [pc, #424]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	f023 020c 	bic.w	r2, r3, #12
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009574:	4966      	ldr	r1, [pc, #408]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009576:	4313      	orrs	r3, r2
 8009578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00a      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009588:	4b61      	ldr	r3, [pc, #388]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800958a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009596:	495e      	ldr	r1, [pc, #376]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009598:	4313      	orrs	r3, r2
 800959a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80095aa:	4b59      	ldr	r3, [pc, #356]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b8:	4955      	ldr	r1, [pc, #340]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00a      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80095cc:	4b50      	ldr	r3, [pc, #320]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095da:	494d      	ldr	r1, [pc, #308]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80095ee:	4b48      	ldr	r3, [pc, #288]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fc:	4944      	ldr	r1, [pc, #272]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00a      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009610:	4b3f      	ldr	r3, [pc, #252]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009616:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800961e:	493c      	ldr	r1, [pc, #240]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009620:	4313      	orrs	r3, r2
 8009622:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00a      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009632:	4b37      	ldr	r3, [pc, #220]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009638:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009640:	4933      	ldr	r1, [pc, #204]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009642:	4313      	orrs	r3, r2
 8009644:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00a      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009654:	4b2e      	ldr	r3, [pc, #184]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009662:	492b      	ldr	r1, [pc, #172]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d011      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009676:	4b26      	ldr	r3, [pc, #152]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009684:	4922      	ldr	r1, [pc, #136]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009686:	4313      	orrs	r3, r2
 8009688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009694:	d101      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009696:	2301      	movs	r3, #1
 8009698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80096a6:	2301      	movs	r3, #1
 80096a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096b6:	4b16      	ldr	r3, [pc, #88]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c4:	4912      	ldr	r1, [pc, #72]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80096d8:	4b0d      	ldr	r3, [pc, #52]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e8:	4909      	ldr	r1, [pc, #36]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d006      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 80d9 	beq.w	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009704:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a01      	ldr	r2, [pc, #4]	@ (8009710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800970a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800970e:	e001      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009710:	40023800 	.word	0x40023800
 8009714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009716:	f7fc f949 	bl	80059ac <HAL_GetTick>
 800971a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800971c:	e008      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800971e:	f7fc f945 	bl	80059ac <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	2b64      	cmp	r3, #100	@ 0x64
 800972a:	d901      	bls.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e194      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009730:	4b6c      	ldr	r3, [pc, #432]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1f0      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d021      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974c:	2b00      	cmp	r3, #0
 800974e:	d11d      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009750:	4b64      	ldr	r3, [pc, #400]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800975e:	4b61      	ldr	r3, [pc, #388]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009764:	0e1b      	lsrs	r3, r3, #24
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	019a      	lsls	r2, r3, #6
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	431a      	orrs	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	061b      	lsls	r3, r3, #24
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	071b      	lsls	r3, r3, #28
 8009784:	4957      	ldr	r1, [pc, #348]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009786:	4313      	orrs	r3, r2
 8009788:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097a0:	d00a      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d02e      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097b6:	d129      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80097b8:	4b4a      	ldr	r3, [pc, #296]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097be:	0c1b      	lsrs	r3, r3, #16
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097c6:	4b47      	ldr	r3, [pc, #284]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097cc:	0f1b      	lsrs	r3, r3, #28
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	019a      	lsls	r2, r3, #6
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	041b      	lsls	r3, r3, #16
 80097de:	431a      	orrs	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	061b      	lsls	r3, r3, #24
 80097e6:	431a      	orrs	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	071b      	lsls	r3, r3, #28
 80097ec:	493d      	ldr	r1, [pc, #244]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80097f4:	4b3b      	ldr	r3, [pc, #236]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097fa:	f023 021f 	bic.w	r2, r3, #31
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009802:	3b01      	subs	r3, #1
 8009804:	4937      	ldr	r1, [pc, #220]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009806:	4313      	orrs	r3, r2
 8009808:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01d      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009818:	4b32      	ldr	r3, [pc, #200]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800981a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800981e:	0e1b      	lsrs	r3, r3, #24
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009826:	4b2f      	ldr	r3, [pc, #188]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800982c:	0f1b      	lsrs	r3, r3, #28
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	019a      	lsls	r2, r3, #6
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	041b      	lsls	r3, r3, #16
 8009840:	431a      	orrs	r2, r3
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	061b      	lsls	r3, r3, #24
 8009846:	431a      	orrs	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	071b      	lsls	r3, r3, #28
 800984c:	4925      	ldr	r1, [pc, #148]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800984e:	4313      	orrs	r3, r2
 8009850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d011      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	019a      	lsls	r2, r3, #6
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	041b      	lsls	r3, r3, #16
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	061b      	lsls	r3, r3, #24
 8009874:	431a      	orrs	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	071b      	lsls	r3, r3, #28
 800987c:	4919      	ldr	r1, [pc, #100]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800987e:	4313      	orrs	r3, r2
 8009880:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009884:	4b17      	ldr	r3, [pc, #92]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a16      	ldr	r2, [pc, #88]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800988a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800988e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009890:	f7fc f88c 	bl	80059ac <HAL_GetTick>
 8009894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009896:	e008      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009898:	f7fc f888 	bl	80059ac <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b64      	cmp	r3, #100	@ 0x64
 80098a4:	d901      	bls.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e0d7      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098aa:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	f040 80cd 	bne.w	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80098be:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a08      	ldr	r2, [pc, #32]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ca:	f7fc f86f 	bl	80059ac <HAL_GetTick>
 80098ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098d0:	e00a      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80098d2:	f7fc f86b 	bl	80059ac <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b64      	cmp	r3, #100	@ 0x64
 80098de:	d903      	bls.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e0ba      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80098e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098e8:	4b5e      	ldr	r3, [pc, #376]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f4:	d0ed      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d009      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02e      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d12a      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800991e:	4b51      	ldr	r3, [pc, #324]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009924:	0c1b      	lsrs	r3, r3, #16
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800992c:	4b4d      	ldr	r3, [pc, #308]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800992e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009932:	0f1b      	lsrs	r3, r3, #28
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	019a      	lsls	r2, r3, #6
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	041b      	lsls	r3, r3, #16
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	061b      	lsls	r3, r3, #24
 800994c:	431a      	orrs	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	071b      	lsls	r3, r3, #28
 8009952:	4944      	ldr	r1, [pc, #272]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009954:	4313      	orrs	r3, r2
 8009956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800995a:	4b42      	ldr	r3, [pc, #264]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800995c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009960:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009968:	3b01      	subs	r3, #1
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	493d      	ldr	r1, [pc, #244]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800996e:	4313      	orrs	r3, r2
 8009970:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d022      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009988:	d11d      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800998a:	4b36      	ldr	r3, [pc, #216]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800998c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009990:	0e1b      	lsrs	r3, r3, #24
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009998:	4b32      	ldr	r3, [pc, #200]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800999a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800999e:	0f1b      	lsrs	r3, r3, #28
 80099a0:	f003 0307 	and.w	r3, r3, #7
 80099a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	019a      	lsls	r2, r3, #6
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	041b      	lsls	r3, r3, #16
 80099b2:	431a      	orrs	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	061b      	lsls	r3, r3, #24
 80099b8:	431a      	orrs	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	071b      	lsls	r3, r3, #28
 80099be:	4929      	ldr	r1, [pc, #164]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0308 	and.w	r3, r3, #8
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d028      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099d2:	4b24      	ldr	r3, [pc, #144]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d8:	0e1b      	lsrs	r3, r3, #24
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80099e0:	4b20      	ldr	r3, [pc, #128]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e6:	0c1b      	lsrs	r3, r3, #16
 80099e8:	f003 0303 	and.w	r3, r3, #3
 80099ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	019a      	lsls	r2, r3, #6
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	041b      	lsls	r3, r3, #16
 80099f8:	431a      	orrs	r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	061b      	lsls	r3, r3, #24
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	071b      	lsls	r3, r3, #28
 8009a06:	4917      	ldr	r1, [pc, #92]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009a0e:	4b15      	ldr	r3, [pc, #84]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1c:	4911      	ldr	r1, [pc, #68]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a24:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a0e      	ldr	r2, [pc, #56]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a30:	f7fb ffbc 	bl	80059ac <HAL_GetTick>
 8009a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a38:	f7fb ffb8 	bl	80059ac <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b64      	cmp	r3, #100	@ 0x64
 8009a44:	d901      	bls.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e007      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a4a:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a56:	d1ef      	bne.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40023800 	.word	0x40023800

08009a68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a86:	f040 808d 	bne.w	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009a8a:	4b93      	ldr	r3, [pc, #588]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a90:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009a98:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009aa0:	d07c      	beq.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009aa8:	d87b      	bhi.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d004      	beq.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ab6:	d039      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009ab8:	e073      	b.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009aba:	4b87      	ldr	r3, [pc, #540]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d108      	bne.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ac6:	4b84      	ldr	r3, [pc, #528]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ace:	4a83      	ldr	r2, [pc, #524]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	e007      	b.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ae0:	4a7f      	ldr	r2, [pc, #508]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aee:	0e1b      	lsrs	r3, r3, #24
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009af6:	4b78      	ldr	r3, [pc, #480]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009afc:	099b      	lsrs	r3, r3, #6
 8009afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	fb03 f202 	mul.w	r2, r3, r2
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009b10:	4b71      	ldr	r3, [pc, #452]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b16:	0a1b      	lsrs	r3, r3, #8
 8009b18:	f003 031f 	and.w	r3, r3, #31
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b28:	617b      	str	r3, [r7, #20]
        break;
 8009b2a:	e03b      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d108      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b38:	4b67      	ldr	r3, [pc, #412]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b40:	4a66      	ldr	r2, [pc, #408]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	e007      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b4a:	4b63      	ldr	r3, [pc, #396]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b52:	4a63      	ldr	r2, [pc, #396]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b58:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b60:	0e1b      	lsrs	r3, r3, #24
 8009b62:	f003 030f 	and.w	r3, r3, #15
 8009b66:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009b68:	4b5b      	ldr	r3, [pc, #364]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b6e:	099b      	lsrs	r3, r3, #6
 8009b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	fb03 f202 	mul.w	r2, r3, r2
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b80:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009b82:	4b55      	ldr	r3, [pc, #340]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b88:	f003 031f 	and.w	r3, r3, #31
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b98:	617b      	str	r3, [r7, #20]
        break;
 8009b9a:	e003      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b9c:	4b51      	ldr	r3, [pc, #324]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b9e:	617b      	str	r3, [r7, #20]
        break;
 8009ba0:	e000      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009ba2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009baa:	f040 808d 	bne.w	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009bae:	4b4a      	ldr	r3, [pc, #296]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009bbc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bc4:	d07c      	beq.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bcc:	d87b      	bhi.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bda:	d039      	beq.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009bdc:	e073      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009bde:	4b3e      	ldr	r3, [pc, #248]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d108      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009bea:	4b3b      	ldr	r3, [pc, #236]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	e007      	b.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009bfc:	4b36      	ldr	r3, [pc, #216]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c04:	4a36      	ldr	r2, [pc, #216]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009c0c:	4b32      	ldr	r3, [pc, #200]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c12:	0e1b      	lsrs	r3, r3, #24
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c20:	099b      	lsrs	r3, r3, #6
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	fb03 f202 	mul.w	r2, r3, r2
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c32:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009c34:	4b28      	ldr	r3, [pc, #160]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c3a:	0a1b      	lsrs	r3, r3, #8
 8009c3c:	f003 031f 	and.w	r3, r3, #31
 8009c40:	3301      	adds	r3, #1
 8009c42:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4c:	617b      	str	r3, [r7, #20]
        break;
 8009c4e:	e03b      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c50:	4b21      	ldr	r3, [pc, #132]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d108      	bne.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c64:	4a1d      	ldr	r2, [pc, #116]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	e007      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c76:	4a1a      	ldr	r2, [pc, #104]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009c7e:	4b16      	ldr	r3, [pc, #88]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c84:	0e1b      	lsrs	r3, r3, #24
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009c8c:	4b12      	ldr	r3, [pc, #72]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c92:	099b      	lsrs	r3, r3, #6
 8009c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	fb03 f202 	mul.w	r2, r3, r2
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cac:	f003 031f 	and.w	r3, r3, #31
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbc:	617b      	str	r3, [r7, #20]
        break;
 8009cbe:	e003      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cc0:	4b08      	ldr	r3, [pc, #32]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009cc2:	617b      	str	r3, [r7, #20]
        break;
 8009cc4:	e000      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009cc6:	bf00      	nop
      }
    }
  }

  return frequency;
 8009cc8:	697b      	ldr	r3, [r7, #20]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40023800 	.word	0x40023800
 8009cdc:	00f42400 	.word	0x00f42400
 8009ce0:	017d7840 	.word	0x017d7840
 8009ce4:	00bb8000 	.word	0x00bb8000

08009ce8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e071      	b.n	8009dde <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	7f5b      	ldrb	r3, [r3, #29]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7fa fc66 	bl	80045dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f003 0310 	and.w	r3, r3, #16
 8009d20:	2b10      	cmp	r3, #16
 8009d22:	d053      	beq.n	8009dcc <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	22ca      	movs	r2, #202	@ 0xca
 8009d2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2253      	movs	r2, #83	@ 0x53
 8009d32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fac7 	bl	800a2c8 <RTC_EnterInitMode>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d12a      	bne.n	8009d9a <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6899      	ldr	r1, [r3, #8]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	4b26      	ldr	r3, [pc, #152]	@ (8009de8 <HAL_RTC_Init+0x100>)
 8009d50:	400b      	ands	r3, r1
 8009d52:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6899      	ldr	r1, [r3, #8]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	68d2      	ldr	r2, [r2, #12]
 8009d7a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6919      	ldr	r1, [r3, #16]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	041a      	lsls	r2, r3, #16
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fad0 	bl	800a336 <RTC_ExitInitMode>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d110      	bne.n	8009dc2 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0208 	bic.w	r2, r2, #8
 8009dae:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699a      	ldr	r2, [r3, #24]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	22ff      	movs	r2, #255	@ 0xff
 8009dc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8009dca:	e001      	b.n	8009dd0 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	ff8fffbf 	.word	0xff8fffbf

08009dec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009dec:	b590      	push	{r4, r7, lr}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	7f1b      	ldrb	r3, [r3, #28]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_RTC_SetTime+0x1c>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e085      	b.n	8009f14 <HAL_RTC_SetTime+0x128>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2202      	movs	r2, #2
 8009e12:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d126      	bne.n	8009e68 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 faa4 	bl	800a380 <RTC_ByteToBcd2>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	785b      	ldrb	r3, [r3, #1]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fa9d 	bl	800a380 <RTC_ByteToBcd2>
 8009e46:	4603      	mov	r3, r0
 8009e48:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e4a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	789b      	ldrb	r3, [r3, #2]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fa95 	bl	800a380 <RTC_ByteToBcd2>
 8009e56:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e58:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	78db      	ldrb	r3, [r3, #3]
 8009e60:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	e018      	b.n	8009e9a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d102      	bne.n	8009e7c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	785b      	ldrb	r3, [r3, #1]
 8009e86:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009e88:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009e8e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	78db      	ldrb	r3, [r3, #3]
 8009e94:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009e96:	4313      	orrs	r3, r2
 8009e98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	22ca      	movs	r2, #202	@ 0xca
 8009ea0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2253      	movs	r2, #83	@ 0x53
 8009ea8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 fa0c 	bl	800a2c8 <RTC_EnterInitMode>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009eb4:	7cfb      	ldrb	r3, [r7, #19]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d11e      	bne.n	8009ef8 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	6979      	ldr	r1, [r7, #20]
 8009ec0:	4b16      	ldr	r3, [pc, #88]	@ (8009f1c <HAL_RTC_SetTime+0x130>)
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689a      	ldr	r2, [r3, #8]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009ed4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6899      	ldr	r1, [r3, #8]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 fa21 	bl	800a336 <RTC_ExitInitMode>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009ef8:	7cfb      	ldrb	r3, [r7, #19]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	22ff      	movs	r2, #255	@ 0xff
 8009f0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	771a      	strb	r2, [r3, #28]

  return status;
 8009f12:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd90      	pop	{r4, r7, pc}
 8009f1c:	007f7f7f 	.word	0x007f7f7f

08009f20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f20:	b590      	push	{r4, r7, lr}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	7f1b      	ldrb	r3, [r3, #28]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <HAL_RTC_SetDate+0x1c>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e06f      	b.n	800a01c <HAL_RTC_SetDate+0xfc>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2202      	movs	r2, #2
 8009f46:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10e      	bne.n	8009f6c <HAL_RTC_SetDate+0x4c>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	785b      	ldrb	r3, [r3, #1]
 8009f52:	f003 0310 	and.w	r3, r3, #16
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	785b      	ldrb	r3, [r3, #1]
 8009f5e:	f023 0310 	bic.w	r3, r3, #16
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	330a      	adds	r3, #10
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d11c      	bne.n	8009fac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	78db      	ldrb	r3, [r3, #3]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fa02 	bl	800a380 <RTC_ByteToBcd2>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 f9fb 	bl	800a380 <RTC_ByteToBcd2>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	789b      	ldrb	r3, [r3, #2]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 f9f3 	bl	800a380 <RTC_ByteToBcd2>
 8009f9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	e00e      	b.n	8009fca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	78db      	ldrb	r3, [r3, #3]
 8009fb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009fb8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009fbe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	22ca      	movs	r2, #202	@ 0xca
 8009fd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2253      	movs	r2, #83	@ 0x53
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 f974 	bl	800a2c8 <RTC_EnterInitMode>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009fe4:	7cfb      	ldrb	r3, [r7, #19]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	6979      	ldr	r1, [r7, #20]
 8009ff0:	4b0c      	ldr	r3, [pc, #48]	@ (800a024 <HAL_RTC_SetDate+0x104>)
 8009ff2:	400b      	ands	r3, r1
 8009ff4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f99d 	bl	800a336 <RTC_ExitInitMode>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a000:	7cfb      	ldrb	r3, [r7, #19]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	22ff      	movs	r2, #255	@ 0xff
 800a012:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	771a      	strb	r2, [r3, #28]

  return status;
 800a01a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	371c      	adds	r7, #28
 800a020:	46bd      	mov	sp, r7
 800a022:	bd90      	pop	{r4, r7, pc}
 800a024:	00ffff3f 	.word	0x00ffff3f

0800a028 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b089      	sub	sp, #36	@ 0x24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	7f1b      	ldrb	r3, [r3, #28]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <HAL_RTC_SetAlarm+0x24>
 800a048:	2302      	movs	r3, #2
 800a04a:	e113      	b.n	800a274 <HAL_RTC_SetAlarm+0x24c>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2202      	movs	r2, #2
 800a056:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d137      	bne.n	800a0ce <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2200      	movs	r2, #0
 800a070:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	4618      	mov	r0, r3
 800a078:	f000 f982 	bl	800a380 <RTC_ByteToBcd2>
 800a07c:	4603      	mov	r3, r0
 800a07e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	785b      	ldrb	r3, [r3, #1]
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f97b 	bl	800a380 <RTC_ByteToBcd2>
 800a08a:	4603      	mov	r3, r0
 800a08c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a08e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	789b      	ldrb	r3, [r3, #2]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 f973 	bl	800a380 <RTC_ByteToBcd2>
 800a09a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a09c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	78db      	ldrb	r3, [r3, #3]
 800a0a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a0a6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f965 	bl	800a380 <RTC_ByteToBcd2>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800a0ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a0c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	61fb      	str	r3, [r7, #28]
 800a0cc:	e023      	b.n	800a116 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d102      	bne.n	800a0e2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a0ee:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a0f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	78db      	ldrb	r3, [r3, #3]
 800a0fa:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a0fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a104:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800a106:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a10c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a112:	4313      	orrs	r3, r2
 800a114:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a11e:	4313      	orrs	r3, r2
 800a120:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	22ca      	movs	r2, #202	@ 0xca
 800a128:	625a      	str	r2, [r3, #36]	@ 0x24
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2253      	movs	r2, #83	@ 0x53
 800a130:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a13a:	d148      	bne.n	800a1ce <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a14a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a15a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	b2da      	uxtb	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a16c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a16e:	f7fb fc1d 	bl	80059ac <HAL_GetTick>
 800a172:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a174:	e013      	b.n	800a19e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a176:	f7fb fc19 	bl	80059ac <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a184:	d90b      	bls.n	800a19e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	22ff      	movs	r2, #255	@ 0xff
 800a18c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2203      	movs	r2, #3
 800a192:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e06a      	b.n	800a274 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0e4      	beq.n	800a176 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689a      	ldr	r2, [r3, #8]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1ca:	609a      	str	r2, [r3, #8]
 800a1cc:	e047      	b.n	800a25e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a1dc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1ec:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a1fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a200:	f7fb fbd4 	bl	80059ac <HAL_GetTick>
 800a204:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a206:	e013      	b.n	800a230 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a208:	f7fb fbd0 	bl	80059ac <HAL_GetTick>
 800a20c:	4602      	mov	r2, r0
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a216:	d90b      	bls.n	800a230 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	22ff      	movs	r2, #255	@ 0xff
 800a21e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2203      	movs	r2, #3
 800a224:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e021      	b.n	800a274 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0e4      	beq.n	800a208 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	69fa      	ldr	r2, [r7, #28]
 800a244:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a25c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	22ff      	movs	r2, #255	@ 0xff
 800a264:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3724      	adds	r7, #36	@ 0x24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd90      	pop	{r4, r7, pc}

0800a27c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a0d      	ldr	r2, [pc, #52]	@ (800a2c4 <HAL_RTC_WaitForSynchro+0x48>)
 800a28e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a290:	f7fb fb8c 	bl	80059ac <HAL_GetTick>
 800a294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a296:	e009      	b.n	800a2ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a298:	f7fb fb88 	bl	80059ac <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a2a6:	d901      	bls.n	800a2ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e007      	b.n	800a2bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0ee      	beq.n	800a298 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	0001ff5f 	.word	0x0001ff5f

0800a2c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d122      	bne.n	800a32c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a2f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2f6:	f7fb fb59 	bl	80059ac <HAL_GetTick>
 800a2fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a2fc:	e00c      	b.n	800a318 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a2fe:	f7fb fb55 	bl	80059ac <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a30c:	d904      	bls.n	800a318 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2204      	movs	r2, #4
 800a312:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d102      	bne.n	800a32c <RTC_EnterInitMode+0x64>
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d1e8      	bne.n	800a2fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a350:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 0320 	and.w	r3, r3, #32
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ff8b 	bl	800a27c <HAL_RTC_WaitForSynchro>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2204      	movs	r2, #4
 800a370:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a376:	7bfb      	ldrb	r3, [r7, #15]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a38e:	e005      	b.n	800a39c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	3b0a      	subs	r3, #10
 800a39a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	2b09      	cmp	r3, #9
 800a3a0:	d8f6      	bhi.n	800a390 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b2db      	uxtb	r3, r3
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	7f1b      	ldrb	r3, [r3, #28]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e050      	b.n	800a47a <HAL_RTCEx_SetTimeStamp+0xbe>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0206 	bic.w	r2, r2, #6
 800a3f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	430a      	orrs	r2, r1
 800a402:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	4b1f      	ldr	r3, [pc, #124]	@ (800a488 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4313      	orrs	r3, r2
 800a416:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	22ca      	movs	r2, #202	@ 0xca
 800a41e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2253      	movs	r2, #83	@ 0x53
 800a426:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	b2da      	uxtb	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a440:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a452:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a462:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	22ff      	movs	r2, #255	@ 0xff
 800a46a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	371c      	adds	r7, #28
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	fffff7f7 	.word	0xfffff7f7

0800a48c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e156      	b.n	800a758 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d106      	bne.n	800a4c4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fa f962 	bl	8004788 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f95b 	bl	800a788 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d00c      	beq.n	800a4f4 <HAL_SAI_Init+0x68>
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d80d      	bhi.n	800a4fa <HAL_SAI_Init+0x6e>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <HAL_SAI_Init+0x5c>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d003      	beq.n	800a4ee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a4e6:	e008      	b.n	800a4fa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61fb      	str	r3, [r7, #28]
      break;
 800a4ec:	e006      	b.n	800a4fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	61fb      	str	r3, [r7, #28]
      break;
 800a4f2:	e003      	b.n	800a4fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	61fb      	str	r3, [r7, #28]
      break;
 800a4f8:	e000      	b.n	800a4fc <HAL_SAI_Init+0x70>
      break;
 800a4fa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d81e      	bhi.n	800a542 <HAL_SAI_Init+0xb6>
 800a504:	a201      	add	r2, pc, #4	@ (adr r2, 800a50c <HAL_SAI_Init+0x80>)
 800a506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50a:	bf00      	nop
 800a50c:	0800a51d 	.word	0x0800a51d
 800a510:	0800a523 	.word	0x0800a523
 800a514:	0800a52b 	.word	0x0800a52b
 800a518:	0800a533 	.word	0x0800a533
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	617b      	str	r3, [r7, #20]
    }
    break;
 800a520:	e010      	b.n	800a544 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a526:	617b      	str	r3, [r7, #20]
    }
    break;
 800a528:	e00c      	b.n	800a544 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a52a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a52e:	617b      	str	r3, [r7, #20]
    }
    break;
 800a530:	e008      	b.n	800a544 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a536:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	f043 0301 	orr.w	r3, r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a540:	e000      	b.n	800a544 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a542:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a85      	ldr	r2, [pc, #532]	@ (800a760 <HAL_SAI_Init+0x2d4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d004      	beq.n	800a558 <HAL_SAI_Init+0xcc>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a84      	ldr	r2, [pc, #528]	@ (800a764 <HAL_SAI_Init+0x2d8>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d103      	bne.n	800a560 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a558:	4a83      	ldr	r2, [pc, #524]	@ (800a768 <HAL_SAI_Init+0x2dc>)
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	e002      	b.n	800a566 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a560:	4a82      	ldr	r2, [pc, #520]	@ (800a76c <HAL_SAI_Init+0x2e0>)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d04c      	beq.n	800a608 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a7a      	ldr	r2, [pc, #488]	@ (800a760 <HAL_SAI_Init+0x2d4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d004      	beq.n	800a586 <HAL_SAI_Init+0xfa>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a78      	ldr	r2, [pc, #480]	@ (800a764 <HAL_SAI_Init+0x2d8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d104      	bne.n	800a590 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a586:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a58a:	f7ff fa6d 	bl	8009a68 <HAL_RCCEx_GetPeriphCLKFreq>
 800a58e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a76      	ldr	r2, [pc, #472]	@ (800a770 <HAL_SAI_Init+0x2e4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d004      	beq.n	800a5a4 <HAL_SAI_Init+0x118>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a75      	ldr	r2, [pc, #468]	@ (800a774 <HAL_SAI_Init+0x2e8>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d104      	bne.n	800a5ae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a5a4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a5a8:	f7ff fa5e 	bl	8009a68 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5ac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	025b      	lsls	r3, r3, #9
 800a5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4a6b      	ldr	r2, [pc, #428]	@ (800a778 <HAL_SAI_Init+0x2ec>)
 800a5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ce:	08da      	lsrs	r2, r3, #3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a5d4:	68f9      	ldr	r1, [r7, #12]
 800a5d6:	4b68      	ldr	r3, [pc, #416]	@ (800a778 <HAL_SAI_Init+0x2ec>)
 800a5d8:	fba3 2301 	umull	r2, r3, r3, r1
 800a5dc:	08da      	lsrs	r2, r3, #3
 800a5de:	4613      	mov	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	1aca      	subs	r2, r1, r3
 800a5e8:	2a08      	cmp	r2, #8
 800a5ea:	d904      	bls.n	800a5f6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d104      	bne.n	800a608 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	085a      	lsrs	r2, r3, #1
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <HAL_SAI_Init+0x18c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d109      	bne.n	800a62c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_SAI_Init+0x198>
 800a620:	2300      	movs	r3, #0
 800a622:	e001      	b.n	800a628 <HAL_SAI_Init+0x19c>
 800a624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a628:	61bb      	str	r3, [r7, #24]
 800a62a:	e008      	b.n	800a63e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d102      	bne.n	800a63a <HAL_SAI_Init+0x1ae>
 800a634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a638:	e000      	b.n	800a63c <HAL_SAI_Init+0x1b0>
 800a63a:	2300      	movs	r3, #0
 800a63c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6819      	ldr	r1, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	4b4c      	ldr	r3, [pc, #304]	@ (800a77c <HAL_SAI_Init+0x2f0>)
 800a64a:	400b      	ands	r3, r1
 800a64c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a662:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a668:	431a      	orrs	r2, r3
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800a676:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a682:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	051b      	lsls	r3, r3, #20
 800a68a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6859      	ldr	r1, [r3, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b38      	ldr	r3, [pc, #224]	@ (800a780 <HAL_SAI_Init+0x2f4>)
 800a6a0:	400b      	ands	r3, r1
 800a6a2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6859      	ldr	r1, [r3, #4]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6899      	ldr	r1, [r3, #8]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a784 <HAL_SAI_Init+0x2f8>)
 800a6ce:	400b      	ands	r3, r1
 800a6d0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6899      	ldr	r1, [r3, #8]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6dc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a6e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800a6e8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800a6ee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a6f8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68d9      	ldr	r1, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a710:	400b      	ands	r3, r1
 800a712:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68d9      	ldr	r1, [r3, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a722:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a728:	041b      	lsls	r3, r3, #16
 800a72a:	431a      	orrs	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a730:	3b01      	subs	r3, #1
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3720      	adds	r7, #32
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	40015804 	.word	0x40015804
 800a764:	40015824 	.word	0x40015824
 800a768:	40015800 	.word	0x40015800
 800a76c:	40015c00 	.word	0x40015c00
 800a770:	40015c04 	.word	0x40015c04
 800a774:	40015c24 	.word	0x40015c24
 800a778:	cccccccd 	.word	0xcccccccd
 800a77c:	ff05c010 	.word	0xff05c010
 800a780:	ffff1ff0 	.word	0xffff1ff0
 800a784:	fff88000 	.word	0xfff88000

0800a788 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a790:	4b17      	ldr	r3, [pc, #92]	@ (800a7f0 <SAI_Disable+0x68>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a17      	ldr	r2, [pc, #92]	@ (800a7f4 <SAI_Disable+0x6c>)
 800a796:	fba2 2303 	umull	r2, r3, r2, r3
 800a79a:	0b1b      	lsrs	r3, r3, #12
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a7b2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	1e5a      	subs	r2, r3, #1
 800a7b8:	60fa      	str	r2, [r7, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	72fb      	strb	r3, [r7, #11]
      break;
 800a7d2:	e006      	b.n	800a7e2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e8      	bne.n	800a7b4 <SAI_Disable+0x2c>

  return status;
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20000004 	.word	0x20000004
 800a7f4:	95cbec1b 	.word	0x95cbec1b

0800a7f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e022      	b.n	800a850 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d105      	bne.n	800a822 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7fa f83f 	bl	80048a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2203      	movs	r2, #3
 800a826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f814 	bl	800a858 <HAL_SD_InitCard>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e00a      	b.n	800a850 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a858:	b5b0      	push	{r4, r5, r7, lr}
 800a85a:	b08e      	sub	sp, #56	@ 0x38
 800a85c:	af04      	add	r7, sp, #16
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a864:	2300      	movs	r3, #0
 800a866:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a870:	2300      	movs	r3, #0
 800a872:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a874:	2376      	movs	r3, #118	@ 0x76
 800a876:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681d      	ldr	r5, [r3, #0]
 800a87c:	466c      	mov	r4, sp
 800a87e:	f107 0318 	add.w	r3, r7, #24
 800a882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a88a:	f107 030c 	add.w	r3, r7, #12
 800a88e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a890:	4628      	mov	r0, r5
 800a892:	f004 fd27 	bl	800f2e4 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8a4:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f004 fd53 	bl	800f356 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8be:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a8c0:	2002      	movs	r0, #2
 800a8c2:	f7fb f87f 	bl	80059c4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fe10 	bl	800b4ec <SD_PowerON>
 800a8cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00b      	beq.n	800a8ec <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e02e      	b.n	800a94a <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fd2f 	bl	800b350 <SD_InitCard>
 800a8f2:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00b      	beq.n	800a912 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a908:	431a      	orrs	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e01b      	b.n	800a94a <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a91a:	4618      	mov	r0, r3
 800a91c:	f004 fdae 	bl	800f47c <SDMMC_CmdBlockLength>
 800a920:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00f      	beq.n	800a948 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a09      	ldr	r2, [pc, #36]	@ (800a954 <HAL_SD_InitCard+0xfc>)
 800a92e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e000      	b.n	800a94a <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3728      	adds	r7, #40	@ 0x28
 800a94e:	46bd      	mov	sp, r7
 800a950:	bdb0      	pop	{r4, r5, r7, pc}
 800a952:	bf00      	nop
 800a954:	004005ff 	.word	0x004005ff

0800a958 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08c      	sub	sp, #48	@ 0x30
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d107      	bne.n	800a980 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a974:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e0c3      	b.n	800ab08 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b01      	cmp	r3, #1
 800a98a:	f040 80bc 	bne.w	800ab06 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	441a      	add	r2, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d907      	bls.n	800a9b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e0aa      	b.n	800ab08 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2203      	movs	r2, #3
 800a9b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a9d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d6:	4a4e      	ldr	r2, [pc, #312]	@ (800ab10 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a9d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9de:	4a4d      	ldr	r2, [pc, #308]	@ (800ab14 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a9e0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa02:	689a      	ldr	r2, [r3, #8]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3380      	adds	r3, #128	@ 0x80
 800aa18:	4619      	mov	r1, r3
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	025b      	lsls	r3, r3, #9
 800aa20:	089b      	lsrs	r3, r3, #2
 800aa22:	f7fb fcd9 	bl	80063d8 <HAL_DMA_Start_IT>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800aa3a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a35      	ldr	r2, [pc, #212]	@ (800ab18 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aa42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e055      	b.n	800ab08 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f042 0208 	orr.w	r2, r2, #8
 800aa6a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d002      	beq.n	800aa7a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800aa74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa76:	025b      	lsls	r3, r3, #9
 800aa78:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	025b      	lsls	r3, r3, #9
 800aa84:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa86:	2390      	movs	r3, #144	@ 0x90
 800aa88:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800aa92:	2301      	movs	r3, #1
 800aa94:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f107 0210 	add.w	r2, r7, #16
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f004 fcbf 	bl	800f424 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d90a      	bls.n	800aac2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2282      	movs	r2, #130	@ 0x82
 800aab0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aab8:	4618      	mov	r0, r3
 800aaba:	f004 fd23 	bl	800f504 <SDMMC_CmdReadMultiBlock>
 800aabe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800aac0:	e009      	b.n	800aad6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2281      	movs	r2, #129	@ 0x81
 800aac6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aace:	4618      	mov	r0, r3
 800aad0:	f004 fcf6 	bl	800f4c0 <SDMMC_CmdReadSingleBlock>
 800aad4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800aad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d012      	beq.n	800ab02 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a0d      	ldr	r2, [pc, #52]	@ (800ab18 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaea:	431a      	orrs	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e002      	b.n	800ab08 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	e000      	b.n	800ab08 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800ab06:	2302      	movs	r3, #2
  }
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3730      	adds	r7, #48	@ 0x30
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	0800b23b 	.word	0x0800b23b
 800ab14:	0800b2ad 	.word	0x0800b2ad
 800ab18:	004005ff 	.word	0x004005ff

0800ab1c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08c      	sub	sp, #48	@ 0x30
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d107      	bne.n	800ab44 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab38:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e0c6      	b.n	800acd2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	f040 80bf 	bne.w	800acd0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	441a      	add	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d907      	bls.n	800ab76 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e0ad      	b.n	800acd2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2203      	movs	r2, #3
 800ab7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2200      	movs	r2, #0
 800ab84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 021a 	orr.w	r2, r2, #26
 800ab94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab9a:	4a50      	ldr	r2, [pc, #320]	@ (800acdc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800ab9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aba2:	4a4f      	ldr	r2, [pc, #316]	@ (800ace0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800aba4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abaa:	2200      	movs	r2, #0
 800abac:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d002      	beq.n	800abbc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	025b      	lsls	r3, r3, #9
 800abba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d90a      	bls.n	800abd8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	22a0      	movs	r2, #160	@ 0xa0
 800abc6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abce:	4618      	mov	r0, r3
 800abd0:	f004 fcdc 	bl	800f58c <SDMMC_CmdWriteMultiBlock>
 800abd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800abd6:	e009      	b.n	800abec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2290      	movs	r2, #144	@ 0x90
 800abdc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abe4:	4618      	mov	r0, r3
 800abe6:	f004 fcaf 	bl	800f548 <SDMMC_CmdWriteSingleBlock>
 800abea:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800abec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d012      	beq.n	800ac18 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a3b      	ldr	r2, [pc, #236]	@ (800ace4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800abf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac00:	431a      	orrs	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e05c      	b.n	800acd2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0208 	orr.w	r2, r2, #8
 800ac26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac2c:	2240      	movs	r2, #64	@ 0x40
 800ac2e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac40:	689a      	ldr	r2, [r3, #8]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	430a      	orrs	r2, r1
 800ac4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3380      	adds	r3, #128	@ 0x80
 800ac58:	461a      	mov	r2, r3
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	025b      	lsls	r3, r3, #9
 800ac5e:	089b      	lsrs	r3, r3, #2
 800ac60:	f7fb fbba 	bl	80063d8 <HAL_DMA_Start_IT>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01a      	beq.n	800aca0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 021a 	bic.w	r2, r2, #26
 800ac78:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a19      	ldr	r2, [pc, #100]	@ (800ace4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ac80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e018      	b.n	800acd2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	025b      	lsls	r3, r3, #9
 800acaa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800acac:	2390      	movs	r3, #144	@ 0x90
 800acae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800acb0:	2300      	movs	r3, #0
 800acb2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800acb8:	2301      	movs	r3, #1
 800acba:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f107 0210 	add.w	r2, r7, #16
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f004 fbac 	bl	800f424 <SDMMC_ConfigData>

      return HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	e000      	b.n	800acd2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800acd0:	2302      	movs	r3, #2
  }
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3730      	adds	r7, #48	@ 0x30
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	0800b211 	.word	0x0800b211
 800ace0:	0800b2ad 	.word	0x0800b2ad
 800ace4:	004005ff 	.word	0x004005ff

0800ace8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad0a:	0f9b      	lsrs	r3, r3, #30
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad16:	0e9b      	lsrs	r3, r3, #26
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 030f 	and.w	r3, r3, #15
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad28:	0e1b      	lsrs	r3, r3, #24
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad3a:	0c1b      	lsrs	r3, r3, #16
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad5c:	0d1b      	lsrs	r3, r3, #20
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad68:	0c1b      	lsrs	r3, r3, #16
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	f003 030f 	and.w	r3, r3, #15
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad7a:	0bdb      	lsrs	r3, r3, #15
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad8c:	0b9b      	lsrs	r3, r3, #14
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad9e:	0b5b      	lsrs	r3, r3, #13
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800adb0:	0b1b      	lsrs	r3, r3, #12
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2200      	movs	r2, #0
 800adc2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d163      	bne.n	800ae94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800add0:	009a      	lsls	r2, r3, #2
 800add2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800add6:	4013      	ands	r3, r2
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800addc:	0f92      	lsrs	r2, r2, #30
 800adde:	431a      	orrs	r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ade8:	0edb      	lsrs	r3, r3, #27
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 0307 	and.w	r3, r3, #7
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adfa:	0e1b      	lsrs	r3, r3, #24
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae0c:	0d5b      	lsrs	r3, r3, #21
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae1e:	0c9b      	lsrs	r3, r3, #18
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae30:	0bdb      	lsrs	r3, r3, #15
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f003 0307 	and.w	r3, r3, #7
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	7e1b      	ldrb	r3, [r3, #24]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	3302      	adds	r3, #2
 800ae54:	2201      	movs	r2, #1
 800ae56:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ae5e:	fb03 f202 	mul.w	r2, r3, r2
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	7a1b      	ldrb	r3, [r3, #8]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	f003 030f 	and.w	r3, r3, #15
 800ae70:	2201      	movs	r2, #1
 800ae72:	409a      	lsls	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ae80:	0a52      	lsrs	r2, r2, #9
 800ae82:	fb03 f202 	mul.w	r2, r3, r2
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae90:	661a      	str	r2, [r3, #96]	@ 0x60
 800ae92:	e031      	b.n	800aef8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d11d      	bne.n	800aed8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aea0:	041b      	lsls	r3, r3, #16
 800aea2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeaa:	0c1b      	lsrs	r3, r3, #16
 800aeac:	431a      	orrs	r2, r3
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	029a      	lsls	r2, r3, #10
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aecc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	661a      	str	r2, [r3, #96]	@ 0x60
 800aed6:	e00f      	b.n	800aef8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a58      	ldr	r2, [pc, #352]	@ (800b040 <HAL_SD_GetCardCSD+0x344>)
 800aede:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e09d      	b.n	800b034 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefc:	0b9b      	lsrs	r3, r3, #14
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af0e:	09db      	lsrs	r3, r3, #7
 800af10:	b2db      	uxtb	r3, r3
 800af12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af16:	b2da      	uxtb	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af20:	b2db      	uxtb	r3, r3
 800af22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af26:	b2da      	uxtb	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af30:	0fdb      	lsrs	r3, r3, #31
 800af32:	b2da      	uxtb	r2, r3
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af3c:	0f5b      	lsrs	r3, r3, #29
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	b2da      	uxtb	r2, r3
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af4e:	0e9b      	lsrs	r3, r3, #26
 800af50:	b2db      	uxtb	r3, r3
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	b2da      	uxtb	r2, r3
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af60:	0d9b      	lsrs	r3, r3, #22
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af72:	0d5b      	lsrs	r3, r3, #21
 800af74:	b2db      	uxtb	r3, r3
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af8e:	0c1b      	lsrs	r3, r3, #16
 800af90:	b2db      	uxtb	r3, r3
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	b2da      	uxtb	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afa2:	0bdb      	lsrs	r3, r3, #15
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	b2da      	uxtb	r2, r3
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afb6:	0b9b      	lsrs	r3, r3, #14
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afca:	0b5b      	lsrs	r3, r3, #13
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	b2da      	uxtb	r2, r3
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afde:	0b1b      	lsrs	r3, r3, #12
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aff2:	0a9b      	lsrs	r3, r3, #10
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 0303 	and.w	r3, r3, #3
 800affa:	b2da      	uxtb	r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b006:	0a1b      	lsrs	r3, r3, #8
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	f003 0303 	and.w	r3, r3, #3
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01a:	085b      	lsrs	r3, r3, #1
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b022:	b2da      	uxtb	r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	004005ff 	.word	0x004005ff

0800b044 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b09c:	b5b0      	push	{r4, r5, r7, lr}
 800b09e:	b08e      	sub	sp, #56	@ 0x38
 800b0a0:	af04      	add	r7, sp, #16
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d02e      	beq.n	800b11a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0c2:	d106      	bne.n	800b0d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0d0:	e029      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0d8:	d10a      	bne.n	800b0f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fabc 	bl	800b658 <SD_WideBus_Enable>
 800b0e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0ee:	e01a      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 faf9 	bl	800b6ee <SD_WideBus_Disable>
 800b0fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	431a      	orrs	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	639a      	str	r2, [r3, #56]	@ 0x38
 800b10a:	e00c      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b110:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	639a      	str	r2, [r3, #56]	@ 0x38
 800b118:	e005      	b.n	800b126 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00b      	beq.n	800b146 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a26      	ldr	r2, [pc, #152]	@ (800b1cc <HAL_SD_ConfigWideBusOperation+0x130>)
 800b134:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b144:	e01f      	b.n	800b186 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681d      	ldr	r5, [r3, #0]
 800b16c:	466c      	mov	r4, sp
 800b16e:	f107 0314 	add.w	r3, r7, #20
 800b172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b180:	4628      	mov	r0, r5
 800b182:	f004 f8af 	bl	800f2e4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b18e:	4618      	mov	r0, r3
 800b190:	f004 f974 	bl	800f47c <SDMMC_CmdBlockLength>
 800b194:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00c      	beq.n	800b1b6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b1cc <HAL_SD_ConfigWideBusOperation+0x130>)
 800b1a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800b1be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3728      	adds	r7, #40	@ 0x28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	004005ff 	.word	0x004005ff

0800b1d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b1dc:	f107 030c 	add.w	r3, r7, #12
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fa10 	bl	800b608 <SD_SendStatus>
 800b1e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	0a5b      	lsrs	r3, r3, #9
 800b200:	f003 030f 	and.w	r3, r3, #15
 800b204:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b206:	693b      	ldr	r3, [r7, #16]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b22c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b22e:	bf00      	nop
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b246:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b24c:	2b82      	cmp	r3, #130	@ 0x82
 800b24e:	d111      	bne.n	800b274 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f004 f9bb 	bl	800f5d0 <SDMMC_CmdStopTransfer>
 800b25a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d008      	beq.n	800b274 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	431a      	orrs	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fd3a 	bl	800ace8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 0208 	bic.w	r2, r2, #8
 800b282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b28c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f004 fe11 	bl	800fec4 <HAL_SD_RxCpltCallback>
#endif
}
 800b2a2:	bf00      	nop
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
	...

0800b2ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7fb f97e 	bl	80065bc <HAL_DMA_GetError>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d03e      	beq.n	800b344 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d002      	beq.n	800b2e2 <SD_DMAError+0x36>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d12d      	bne.n	800b33e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a19      	ldr	r2, [pc, #100]	@ (800b34c <SD_DMAError+0xa0>)
 800b2e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800b2f8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b306:	6978      	ldr	r0, [r7, #20]
 800b308:	f7ff ff62 	bl	800b1d0 <HAL_SD_GetCardState>
 800b30c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b06      	cmp	r3, #6
 800b312:	d002      	beq.n	800b31a <SD_DMAError+0x6e>
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b05      	cmp	r3, #5
 800b318:	d10a      	bne.n	800b330 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4618      	mov	r0, r3
 800b320:	f004 f956 	bl	800f5d0 <SDMMC_CmdStopTransfer>
 800b324:	4602      	mov	r2, r0
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32a:	431a      	orrs	r2, r3
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	2200      	movs	r2, #0
 800b33c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b33e:	6978      	ldr	r0, [r7, #20]
 800b340:	f7ff fcd2 	bl	800ace8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b344:	bf00      	nop
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	004005ff 	.word	0x004005ff

0800b350 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b350:	b5b0      	push	{r4, r5, r7, lr}
 800b352:	b094      	sub	sp, #80	@ 0x50
 800b354:	af04      	add	r7, sp, #16
 800b356:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b358:	2301      	movs	r3, #1
 800b35a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f004 f806 	bl	800f372 <SDMMC_GetPowerState>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b36c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b370:	e0b8      	b.n	800b4e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b376:	2b03      	cmp	r3, #3
 800b378:	d02f      	beq.n	800b3da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4618      	mov	r0, r3
 800b380:	f004 fa31 	bl	800f7e6 <SDMMC_CmdSendCID>
 800b384:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <SD_InitCard+0x40>
    {
      return errorstate;
 800b38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38e:	e0a9      	b.n	800b4e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2100      	movs	r1, #0
 800b396:	4618      	mov	r0, r3
 800b398:	f004 f831 	bl	800f3fe <SDMMC_GetResponse>
 800b39c:	4602      	mov	r2, r0
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2104      	movs	r1, #4
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f004 f828 	bl	800f3fe <SDMMC_GetResponse>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2108      	movs	r1, #8
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f004 f81f 	bl	800f3fe <SDMMC_GetResponse>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	210c      	movs	r1, #12
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f004 f816 	bl	800f3fe <SDMMC_GetResponse>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d00d      	beq.n	800b3fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f107 020e 	add.w	r2, r7, #14
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f004 fa37 	bl	800f860 <SDMMC_CmdSetRelAdd>
 800b3f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <SD_InitCard+0xae>
    {
      return errorstate;
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fc:	e072      	b.n	800b4e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b402:	2b03      	cmp	r3, #3
 800b404:	d036      	beq.n	800b474 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b406:	89fb      	ldrh	r3, [r7, #14]
 800b408:	461a      	mov	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b416:	041b      	lsls	r3, r3, #16
 800b418:	4619      	mov	r1, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	f004 fa01 	bl	800f822 <SDMMC_CmdSendCSD>
 800b420:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <SD_InitCard+0xdc>
    {
      return errorstate;
 800b428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42a:	e05b      	b.n	800b4e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2100      	movs	r1, #0
 800b432:	4618      	mov	r0, r3
 800b434:	f003 ffe3 	bl	800f3fe <SDMMC_GetResponse>
 800b438:	4602      	mov	r2, r0
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2104      	movs	r1, #4
 800b444:	4618      	mov	r0, r3
 800b446:	f003 ffda 	bl	800f3fe <SDMMC_GetResponse>
 800b44a:	4602      	mov	r2, r0
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2108      	movs	r1, #8
 800b456:	4618      	mov	r0, r3
 800b458:	f003 ffd1 	bl	800f3fe <SDMMC_GetResponse>
 800b45c:	4602      	mov	r2, r0
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	210c      	movs	r1, #12
 800b468:	4618      	mov	r0, r3
 800b46a:	f003 ffc8 	bl	800f3fe <SDMMC_GetResponse>
 800b46e:	4602      	mov	r2, r0
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2104      	movs	r1, #4
 800b47a:	4618      	mov	r0, r3
 800b47c:	f003 ffbf 	bl	800f3fe <SDMMC_GetResponse>
 800b480:	4603      	mov	r3, r0
 800b482:	0d1a      	lsrs	r2, r3, #20
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b488:	f107 0310 	add.w	r3, r7, #16
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff fc34 	bl	800acfc <HAL_SD_GetCardCSD>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b49a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b49e:	e021      	b.n	800b4e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6819      	ldr	r1, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4a8:	041b      	lsls	r3, r3, #16
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	461c      	mov	r4, r3
 800b4ae:	4615      	mov	r5, r2
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	462b      	mov	r3, r5
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	f004 f8ad 	bl	800f614 <SDMMC_CmdSelDesel>
 800b4ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <SD_InitCard+0x176>
  {
    return errorstate;
 800b4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c4:	e00e      	b.n	800b4e4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681d      	ldr	r5, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	466c      	mov	r4, sp
 800b4ce:	f103 0210 	add.w	r2, r3, #16
 800b4d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4d8:	3304      	adds	r3, #4
 800b4da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f003 ff01 	bl	800f2e4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3740      	adds	r7, #64	@ 0x40
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bdb0      	pop	{r4, r5, r7, pc}

0800b4ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4618      	mov	r0, r3
 800b506:	f004 f8a8 	bl	800f65a <SDMMC_CmdGoIdleState>
 800b50a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	e072      	b.n	800b5fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f004 f8bb 	bl	800f696 <SDMMC_CmdOperCond>
 800b520:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00d      	beq.n	800b544 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f004 f891 	bl	800f65a <SDMMC_CmdGoIdleState>
 800b538:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <SD_PowerON+0x5e>
    {
      return errorstate;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	e05b      	b.n	800b5fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d137      	bne.n	800b5c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f004 f8bb 	bl	800f6d4 <SDMMC_CmdAppCommand>
 800b55e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d02d      	beq.n	800b5c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b566:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b56a:	e047      	b.n	800b5fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2100      	movs	r1, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f004 f8ae 	bl	800f6d4 <SDMMC_CmdAppCommand>
 800b578:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <SD_PowerON+0x98>
    {
      return errorstate;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	e03b      	b.n	800b5fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	491e      	ldr	r1, [pc, #120]	@ (800b604 <SD_PowerON+0x118>)
 800b58a:	4618      	mov	r0, r3
 800b58c:	f004 f8c4 	bl	800f718 <SDMMC_CmdAppOperCommand>
 800b590:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b598:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b59c:	e02e      	b.n	800b5fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f003 ff2a 	bl	800f3fe <SDMMC_GetResponse>
 800b5aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	0fdb      	lsrs	r3, r3, #31
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d101      	bne.n	800b5b8 <SD_PowerON+0xcc>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e000      	b.n	800b5ba <SD_PowerON+0xce>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	613b      	str	r3, [r7, #16]

    count++;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d802      	bhi.n	800b5d2 <SD_PowerON+0xe6>
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0cc      	beq.n	800b56c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d902      	bls.n	800b5e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b5dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5e0:	e00c      	b.n	800b5fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	645a      	str	r2, [r3, #68]	@ 0x44
 800b5f2:	e002      	b.n	800b5fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	c1100000 	.word	0xc1100000

0800b608 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d102      	bne.n	800b61e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b618:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b61c:	e018      	b.n	800b650 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b626:	041b      	lsls	r3, r3, #16
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f004 f939 	bl	800f8a2 <SDMMC_CmdSendStatus>
 800b630:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	e009      	b.n	800b650 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2100      	movs	r1, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f003 fedb 	bl	800f3fe <SDMMC_GetResponse>
 800b648:	4602      	mov	r2, r0
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	2300      	movs	r3, #0
 800b666:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2100      	movs	r1, #0
 800b66e:	4618      	mov	r0, r3
 800b670:	f003 fec5 	bl	800f3fe <SDMMC_GetResponse>
 800b674:	4603      	mov	r3, r0
 800b676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b67a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b67e:	d102      	bne.n	800b686 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b680:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b684:	e02f      	b.n	800b6e6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b686:	f107 030c 	add.w	r3, r7, #12
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f879 	bl	800b784 <SD_FindSCR>
 800b692:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	e023      	b.n	800b6e6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01c      	beq.n	800b6e2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6b0:	041b      	lsls	r3, r3, #16
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f004 f80d 	bl	800f6d4 <SDMMC_CmdAppCommand>
 800b6ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	e00f      	b.n	800b6e6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2102      	movs	r1, #2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f004 f847 	bl	800f760 <SDMMC_CmdBusWidth>
 800b6d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	e003      	b.n	800b6e6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e001      	b.n	800b6e6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b6e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b086      	sub	sp, #24
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2100      	movs	r1, #0
 800b704:	4618      	mov	r0, r3
 800b706:	f003 fe7a 	bl	800f3fe <SDMMC_GetResponse>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b714:	d102      	bne.n	800b71c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b716:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b71a:	e02f      	b.n	800b77c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b71c:	f107 030c 	add.w	r3, r7, #12
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f82e 	bl	800b784 <SD_FindSCR>
 800b728:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	e023      	b.n	800b77c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d01c      	beq.n	800b778 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b746:	041b      	lsls	r3, r3, #16
 800b748:	4619      	mov	r1, r3
 800b74a:	4610      	mov	r0, r2
 800b74c:	f003 ffc2 	bl	800f6d4 <SDMMC_CmdAppCommand>
 800b750:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	e00f      	b.n	800b77c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2100      	movs	r1, #0
 800b762:	4618      	mov	r0, r3
 800b764:	f003 fffc 	bl	800f760 <SDMMC_CmdBusWidth>
 800b768:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	e003      	b.n	800b77c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b774:	2300      	movs	r3, #0
 800b776:	e001      	b.n	800b77c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b778:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b784:	b590      	push	{r4, r7, lr}
 800b786:	b08f      	sub	sp, #60	@ 0x3c
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b78e:	f7fa f90d 	bl	80059ac <HAL_GetTick>
 800b792:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b798:	2300      	movs	r3, #0
 800b79a:	60bb      	str	r3, [r7, #8]
 800b79c:	2300      	movs	r3, #0
 800b79e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2108      	movs	r1, #8
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f003 fe66 	bl	800f47c <SDMMC_CmdBlockLength>
 800b7b0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <SD_FindSCR+0x38>
  {
    return errorstate;
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	e0b2      	b.n	800b922 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c4:	041b      	lsls	r3, r3, #16
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	f003 ff83 	bl	800f6d4 <SDMMC_CmdAppCommand>
 800b7ce:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d001      	beq.n	800b7da <SD_FindSCR+0x56>
  {
    return errorstate;
 800b7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d8:	e0a3      	b.n	800b922 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295
 800b7de:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b7e0:	2308      	movs	r3, #8
 800b7e2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b7e4:	2330      	movs	r3, #48	@ 0x30
 800b7e6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f107 0210 	add.w	r2, r7, #16
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f003 fe10 	bl	800f424 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4618      	mov	r0, r3
 800b80a:	f003 ffcb 	bl	800f7a4 <SDMMC_CmdSendSCR>
 800b80e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b812:	2b00      	cmp	r3, #0
 800b814:	d02a      	beq.n	800b86c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b818:	e083      	b.n	800b922 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00f      	beq.n	800b848 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6819      	ldr	r1, [r3, #0]
 800b82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	f107 0208 	add.w	r2, r7, #8
 800b834:	18d4      	adds	r4, r2, r3
 800b836:	4608      	mov	r0, r1
 800b838:	f003 fd80 	bl	800f33c <SDMMC_ReadFIFO>
 800b83c:	4603      	mov	r3, r0
 800b83e:	6023      	str	r3, [r4, #0]
      index++;
 800b840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b842:	3301      	adds	r3, #1
 800b844:	637b      	str	r3, [r7, #52]	@ 0x34
 800b846:	e006      	b.n	800b856 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b84e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d012      	beq.n	800b87c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b856:	f7fa f8a9 	bl	80059ac <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b864:	d102      	bne.n	800b86c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b866:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b86a:	e05a      	b.n	800b922 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b872:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0cf      	beq.n	800b81a <SD_FindSCR+0x96>
 800b87a:	e000      	b.n	800b87e <SD_FindSCR+0xfa>
      break;
 800b87c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2208      	movs	r2, #8
 800b892:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b894:	2308      	movs	r3, #8
 800b896:	e044      	b.n	800b922 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d005      	beq.n	800b8b2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	e037      	b.n	800b922 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b8:	f003 0320 	and.w	r3, r3, #32
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2220      	movs	r2, #32
 800b8c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b8c8:	2320      	movs	r3, #32
 800b8ca:	e02a      	b.n	800b922 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b8d4:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	061a      	lsls	r2, r3, #24
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b8e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b8ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	0e1b      	lsrs	r3, r3, #24
 800b8f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f6:	601a      	str	r2, [r3, #0]
    scr++;
 800b8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	061a      	lsls	r2, r3, #24
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	021b      	lsls	r3, r3, #8
 800b906:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b90a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b914:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	0e1b      	lsrs	r3, r3, #24
 800b91a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	373c      	adds	r7, #60	@ 0x3c
 800b926:	46bd      	mov	sp, r7
 800b928:	bd90      	pop	{r4, r7, pc}

0800b92a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e025      	b.n	800b98a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7f6 fb22 	bl	8001f9c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f003 fbf4 	bl	800f158 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	461a      	mov	r2, r3
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	f003 fc48 	bl	800f210 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e04c      	b.n	800ba40 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7f9 f802 	bl	80049c4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f022 0203 	bic.w	r2, r2, #3
 800b9d6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	4b19      	ldr	r3, [pc, #100]	@ (800ba48 <HAL_SPDIFRX_Init+0xb4>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b9f0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b9f6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b9fc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800ba02:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800ba08:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ba0e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ba14:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800ba1a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800ba20:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	fff88407 	.word	0xfff88407

0800ba4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e09d      	b.n	800bb9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d108      	bne.n	800ba78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba6e:	d009      	beq.n	800ba84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	61da      	str	r2, [r3, #28]
 800ba76:	e005      	b.n	800ba84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7f9 f832 	bl	8004b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800baba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bac4:	d902      	bls.n	800bacc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	e002      	b.n	800bad2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bacc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bad0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800bada:	d007      	beq.n	800baec <HAL_SPI_Init+0xa0>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bae4:	d002      	beq.n	800baec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f003 0302 	and.w	r3, r3, #2
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	431a      	orrs	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	69db      	ldr	r3, [r3, #28]
 800bb20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb2e:	ea42 0103 	orr.w	r1, r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	0c1b      	lsrs	r3, r3, #16
 800bb48:	f003 0204 	and.w	r2, r3, #4
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb50:	f003 0310 	and.w	r3, r3, #16
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb5a:	f003 0308 	and.w	r3, r3, #8
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bb68:	ea42 0103 	orr.w	r1, r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69da      	ldr	r2, [r3, #28]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b088      	sub	sp, #32
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	603b      	str	r3, [r7, #0]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbb2:	f7f9 fefb 	bl	80059ac <HAL_GetTick>
 800bbb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800bbb8:	88fb      	ldrh	r3, [r7, #6]
 800bbba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d001      	beq.n	800bbcc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	e15c      	b.n	800be86 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <HAL_SPI_Transmit+0x36>
 800bbd2:	88fb      	ldrh	r3, [r7, #6]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d101      	bne.n	800bbdc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e154      	b.n	800be86 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d101      	bne.n	800bbea <HAL_SPI_Transmit+0x48>
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e14d      	b.n	800be86 <HAL_SPI_Transmit+0x2e4>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2203      	movs	r2, #3
 800bbf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	88fa      	ldrh	r2, [r7, #6]
 800bc0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	88fa      	ldrh	r2, [r7, #6]
 800bc10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc3c:	d10f      	bne.n	800bc5e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc68:	2b40      	cmp	r3, #64	@ 0x40
 800bc6a:	d007      	beq.n	800bc7c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bc84:	d952      	bls.n	800bd2c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <HAL_SPI_Transmit+0xf2>
 800bc8e:	8b7b      	ldrh	r3, [r7, #26]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d145      	bne.n	800bd20 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc98:	881a      	ldrh	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca4:	1c9a      	adds	r2, r3, #2
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bcb8:	e032      	b.n	800bd20 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f003 0302 	and.w	r3, r3, #2
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d112      	bne.n	800bcee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bccc:	881a      	ldrh	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd8:	1c9a      	adds	r2, r3, #2
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bcec:	e018      	b.n	800bd20 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bcee:	f7f9 fe5d 	bl	80059ac <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d803      	bhi.n	800bd06 <HAL_SPI_Transmit+0x164>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd04:	d102      	bne.n	800bd0c <HAL_SPI_Transmit+0x16a>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d109      	bne.n	800bd20 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e0b2      	b.n	800be86 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1c7      	bne.n	800bcba <HAL_SPI_Transmit+0x118>
 800bd2a:	e083      	b.n	800be34 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <HAL_SPI_Transmit+0x198>
 800bd34:	8b7b      	ldrh	r3, [r7, #26]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d177      	bne.n	800be2a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d912      	bls.n	800bd6a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd48:	881a      	ldrh	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd54:	1c9a      	adds	r2, r3, #2
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	3b02      	subs	r3, #2
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bd68:	e05f      	b.n	800be2a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	330c      	adds	r3, #12
 800bd74:	7812      	ldrb	r2, [r2, #0]
 800bd76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bd90:	e04b      	b.n	800be2a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f003 0302 	and.w	r3, r3, #2
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d12b      	bne.n	800bdf8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d912      	bls.n	800bdd0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdae:	881a      	ldrh	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdba:	1c9a      	adds	r2, r3, #2
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	3b02      	subs	r3, #2
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bdce:	e02c      	b.n	800be2a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	330c      	adds	r3, #12
 800bdda:	7812      	ldrb	r2, [r2, #0]
 800bddc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde2:	1c5a      	adds	r2, r3, #1
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bdf6:	e018      	b.n	800be2a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdf8:	f7f9 fdd8 	bl	80059ac <HAL_GetTick>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d803      	bhi.n	800be10 <HAL_SPI_Transmit+0x26e>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d102      	bne.n	800be16 <HAL_SPI_Transmit+0x274>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d109      	bne.n	800be2a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e02d      	b.n	800be86 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be2e:	b29b      	uxth	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1ae      	bne.n	800bd92 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 fd27 	bl	800c88c <SPI_EndRxTxTransaction>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2220      	movs	r2, #32
 800be48:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10a      	bne.n	800be68 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e000      	b.n	800be86 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800be84:	2300      	movs	r3, #0
  }
}
 800be86:	4618      	mov	r0, r3
 800be88:	3720      	adds	r7, #32
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b088      	sub	sp, #32
 800be92:	af02      	add	r7, sp, #8
 800be94:	60f8      	str	r0, [r7, #12]
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	603b      	str	r3, [r7, #0]
 800be9a:	4613      	mov	r3, r2
 800be9c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d001      	beq.n	800beae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800beaa:	2302      	movs	r3, #2
 800beac:	e123      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <HAL_SPI_Receive+0x2c>
 800beb4:	88fb      	ldrh	r3, [r7, #6]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e11b      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bec6:	d112      	bne.n	800beee <HAL_SPI_Receive+0x60>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10e      	bne.n	800beee <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2204      	movs	r2, #4
 800bed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4613      	mov	r3, r2
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f90a 	bl	800c0fe <HAL_SPI_TransmitReceive>
 800beea:	4603      	mov	r3, r0
 800beec:	e103      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beee:	f7f9 fd5d 	bl	80059ac <HAL_GetTick>
 800bef2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800befa:	2b01      	cmp	r3, #1
 800befc:	d101      	bne.n	800bf02 <HAL_SPI_Receive+0x74>
 800befe:	2302      	movs	r3, #2
 800bf00:	e0f9      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2204      	movs	r2, #4
 800bf0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	88fa      	ldrh	r2, [r7, #6]
 800bf22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	88fa      	ldrh	r2, [r7, #6]
 800bf2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bf54:	d908      	bls.n	800bf68 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bf64:	605a      	str	r2, [r3, #4]
 800bf66:	e007      	b.n	800bf78 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bf76:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf80:	d10f      	bne.n	800bfa2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bfa0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfac:	2b40      	cmp	r3, #64	@ 0x40
 800bfae:	d007      	beq.n	800bfc0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bfc8:	d875      	bhi.n	800c0b6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bfca:	e037      	b.n	800c03c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d117      	bne.n	800c00a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f103 020c 	add.w	r2, r3, #12
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe6:	7812      	ldrb	r2, [r2, #0]
 800bfe8:	b2d2      	uxtb	r2, r2
 800bfea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	3b01      	subs	r3, #1
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c008:	e018      	b.n	800c03c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c00a:	f7f9 fccf 	bl	80059ac <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	429a      	cmp	r2, r3
 800c018:	d803      	bhi.n	800c022 <HAL_SPI_Receive+0x194>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c020:	d102      	bne.n	800c028 <HAL_SPI_Receive+0x19a>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d109      	bne.n	800c03c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e05c      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c042:	b29b      	uxth	r3, r3
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1c1      	bne.n	800bfcc <HAL_SPI_Receive+0x13e>
 800c048:	e03b      	b.n	800c0c2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b01      	cmp	r3, #1
 800c056:	d115      	bne.n	800c084 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68da      	ldr	r2, [r3, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c062:	b292      	uxth	r2, r2
 800c064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06a:	1c9a      	adds	r2, r3, #2
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c076:	b29b      	uxth	r3, r3
 800c078:	3b01      	subs	r3, #1
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800c082:	e018      	b.n	800c0b6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c084:	f7f9 fc92 	bl	80059ac <HAL_GetTick>
 800c088:	4602      	mov	r2, r0
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d803      	bhi.n	800c09c <HAL_SPI_Receive+0x20e>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d102      	bne.n	800c0a2 <HAL_SPI_Receive+0x214>
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	e01f      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1c3      	bne.n	800c04a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f000 fb64 	bl	800c794 <SPI_EndRxTransaction>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d002      	beq.n	800c0d8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e000      	b.n	800c0f6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
  }
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b08a      	sub	sp, #40	@ 0x28
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
 800c10a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c10c:	2301      	movs	r3, #1
 800c10e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c110:	f7f9 fc4c 	bl	80059ac <HAL_GetTick>
 800c114:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c11c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800c124:	887b      	ldrh	r3, [r7, #2]
 800c126:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800c128:	887b      	ldrh	r3, [r7, #2]
 800c12a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c12c:	7ffb      	ldrb	r3, [r7, #31]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d00c      	beq.n	800c14c <HAL_SPI_TransmitReceive+0x4e>
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c138:	d106      	bne.n	800c148 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d102      	bne.n	800c148 <HAL_SPI_TransmitReceive+0x4a>
 800c142:	7ffb      	ldrb	r3, [r7, #31]
 800c144:	2b04      	cmp	r3, #4
 800c146:	d001      	beq.n	800c14c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800c148:	2302      	movs	r3, #2
 800c14a:	e1f3      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <HAL_SPI_TransmitReceive+0x60>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <HAL_SPI_TransmitReceive+0x60>
 800c158:	887b      	ldrh	r3, [r7, #2]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e1e8      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d101      	bne.n	800c170 <HAL_SPI_TransmitReceive+0x72>
 800c16c:	2302      	movs	r3, #2
 800c16e:	e1e1      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b04      	cmp	r3, #4
 800c182:	d003      	beq.n	800c18c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2205      	movs	r2, #5
 800c188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	887a      	ldrh	r2, [r7, #2]
 800c19c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	887a      	ldrh	r2, [r7, #2]
 800c1a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	887a      	ldrh	r2, [r7, #2]
 800c1b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	887a      	ldrh	r2, [r7, #2]
 800c1b8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c1ce:	d802      	bhi.n	800c1d6 <HAL_SPI_TransmitReceive+0xd8>
 800c1d0:	8abb      	ldrh	r3, [r7, #20]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d908      	bls.n	800c1e8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c1e4:	605a      	str	r2, [r3, #4]
 800c1e6:	e007      	b.n	800c1f8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c1f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c202:	2b40      	cmp	r3, #64	@ 0x40
 800c204:	d007      	beq.n	800c216 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c21e:	f240 8083 	bls.w	800c328 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d002      	beq.n	800c230 <HAL_SPI_TransmitReceive+0x132>
 800c22a:	8afb      	ldrh	r3, [r7, #22]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d16f      	bne.n	800c310 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c234:	881a      	ldrh	r2, [r3, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c240:	1c9a      	adds	r2, r3, #2
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	3b01      	subs	r3, #1
 800c24e:	b29a      	uxth	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c254:	e05c      	b.n	800c310 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f003 0302 	and.w	r3, r3, #2
 800c260:	2b02      	cmp	r3, #2
 800c262:	d11b      	bne.n	800c29c <HAL_SPI_TransmitReceive+0x19e>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c268:	b29b      	uxth	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d016      	beq.n	800c29c <HAL_SPI_TransmitReceive+0x19e>
 800c26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c270:	2b01      	cmp	r3, #1
 800c272:	d113      	bne.n	800c29c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c278:	881a      	ldrh	r2, [r3, #0]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c284:	1c9a      	adds	r2, r3, #2
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3b01      	subs	r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d11c      	bne.n	800c2e4 <HAL_SPI_TransmitReceive+0x1e6>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d016      	beq.n	800c2e4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c0:	b292      	uxth	r2, r2
 800c2c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c8:	1c9a      	adds	r2, r3, #2
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c2e4:	f7f9 fb62 	bl	80059ac <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d80d      	bhi.n	800c310 <HAL_SPI_TransmitReceive+0x212>
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fa:	d009      	beq.n	800c310 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e111      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c314:	b29b      	uxth	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	d19d      	bne.n	800c256 <HAL_SPI_TransmitReceive+0x158>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c320:	b29b      	uxth	r3, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	d197      	bne.n	800c256 <HAL_SPI_TransmitReceive+0x158>
 800c326:	e0e5      	b.n	800c4f4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d003      	beq.n	800c338 <HAL_SPI_TransmitReceive+0x23a>
 800c330:	8afb      	ldrh	r3, [r7, #22]
 800c332:	2b01      	cmp	r3, #1
 800c334:	f040 80d1 	bne.w	800c4da <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d912      	bls.n	800c368 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c346:	881a      	ldrh	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c352:	1c9a      	adds	r2, r3, #2
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3b02      	subs	r3, #2
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c366:	e0b8      	b.n	800c4da <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	330c      	adds	r3, #12
 800c372:	7812      	ldrb	r2, [r2, #0]
 800c374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37a:	1c5a      	adds	r2, r3, #1
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c384:	b29b      	uxth	r3, r3
 800c386:	3b01      	subs	r3, #1
 800c388:	b29a      	uxth	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c38e:	e0a4      	b.n	800c4da <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	f003 0302 	and.w	r3, r3, #2
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d134      	bne.n	800c408 <HAL_SPI_TransmitReceive+0x30a>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d02f      	beq.n	800c408 <HAL_SPI_TransmitReceive+0x30a>
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d12c      	bne.n	800c408 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d912      	bls.n	800c3de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3bc:	881a      	ldrh	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c8:	1c9a      	adds	r2, r3, #2
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	3b02      	subs	r3, #2
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c3dc:	e012      	b.n	800c404 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	7812      	ldrb	r2, [r2, #0]
 800c3ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c404:	2300      	movs	r3, #0
 800c406:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b01      	cmp	r3, #1
 800c414:	d148      	bne.n	800c4a8 <HAL_SPI_TransmitReceive+0x3aa>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d042      	beq.n	800c4a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c428:	b29b      	uxth	r3, r3
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d923      	bls.n	800c476 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68da      	ldr	r2, [r3, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c438:	b292      	uxth	r2, r2
 800c43a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c440:	1c9a      	adds	r2, r3, #2
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	3b02      	subs	r3, #2
 800c450:	b29a      	uxth	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c45e:	b29b      	uxth	r3, r3
 800c460:	2b01      	cmp	r3, #1
 800c462:	d81f      	bhi.n	800c4a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c472:	605a      	str	r2, [r3, #4]
 800c474:	e016      	b.n	800c4a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f103 020c 	add.w	r2, r3, #12
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c482:	7812      	ldrb	r2, [r2, #0]
 800c484:	b2d2      	uxtb	r2, r2
 800c486:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c4a8:	f7f9 fa80 	bl	80059ac <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	6a3b      	ldr	r3, [r7, #32]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d803      	bhi.n	800c4c0 <HAL_SPI_TransmitReceive+0x3c2>
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4be:	d102      	bne.n	800c4c6 <HAL_SPI_TransmitReceive+0x3c8>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d109      	bne.n	800c4da <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e02c      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f47f af55 	bne.w	800c390 <HAL_SPI_TransmitReceive+0x292>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f47f af4e 	bne.w	800c390 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4f4:	6a3a      	ldr	r2, [r7, #32]
 800c4f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f000 f9c7 	bl	800c88c <SPI_EndRxTxTransaction>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d008      	beq.n	800c516 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2220      	movs	r2, #32
 800c508:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e00e      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800c532:	2300      	movs	r3, #0
  }
}
 800c534:	4618      	mov	r0, r3
 800c536:	3728      	adds	r7, #40	@ 0x28
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c54a:	b2db      	uxtb	r3, r3
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c568:	f7f9 fa20 	bl	80059ac <HAL_GetTick>
 800c56c:	4602      	mov	r2, r0
 800c56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4413      	add	r3, r2
 800c576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c578:	f7f9 fa18 	bl	80059ac <HAL_GetTick>
 800c57c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c57e:	4b39      	ldr	r3, [pc, #228]	@ (800c664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	015b      	lsls	r3, r3, #5
 800c584:	0d1b      	lsrs	r3, r3, #20
 800c586:	69fa      	ldr	r2, [r7, #28]
 800c588:	fb02 f303 	mul.w	r3, r2, r3
 800c58c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c58e:	e055      	b.n	800c63c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c596:	d051      	beq.n	800c63c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c598:	f7f9 fa08 	bl	80059ac <HAL_GetTick>
 800c59c:	4602      	mov	r2, r0
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	69fa      	ldr	r2, [r7, #28]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d902      	bls.n	800c5ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d13d      	bne.n	800c62a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c5bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c5c6:	d111      	bne.n	800c5ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5d0:	d004      	beq.n	800c5dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5da:	d107      	bne.n	800c5ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c5ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f4:	d10f      	bne.n	800c616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e018      	b.n	800c65c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d102      	bne.n	800c636 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800c630:	2300      	movs	r3, #0
 800c632:	61fb      	str	r3, [r7, #28]
 800c634:	e002      	b.n	800c63c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	3b01      	subs	r3, #1
 800c63a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	4013      	ands	r3, r2
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	429a      	cmp	r2, r3
 800c64a:	bf0c      	ite	eq
 800c64c:	2301      	moveq	r3, #1
 800c64e:	2300      	movne	r3, #0
 800c650:	b2db      	uxtb	r3, r3
 800c652:	461a      	mov	r2, r3
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	429a      	cmp	r2, r3
 800c658:	d19a      	bne.n	800c590 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3720      	adds	r7, #32
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20000004 	.word	0x20000004

0800c668 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	@ 0x28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c67a:	f7f9 f997 	bl	80059ac <HAL_GetTick>
 800c67e:	4602      	mov	r2, r0
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	4413      	add	r3, r2
 800c688:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800c68a:	f7f9 f98f 	bl	80059ac <HAL_GetTick>
 800c68e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	330c      	adds	r3, #12
 800c696:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c698:	4b3d      	ldr	r3, [pc, #244]	@ (800c790 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	00da      	lsls	r2, r3, #3
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	0d1b      	lsrs	r3, r3, #20
 800c6a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6aa:	fb02 f303 	mul.w	r3, r2, r3
 800c6ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c6b0:	e061      	b.n	800c776 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c6b8:	d107      	bne.n	800c6ca <SPI_WaitFifoStateUntilTimeout+0x62>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d104      	bne.n	800c6ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d0:	d051      	beq.n	800c776 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c6d2:	f7f9 f96b 	bl	80059ac <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d902      	bls.n	800c6e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d13d      	bne.n	800c764 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c6f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c700:	d111      	bne.n	800c726 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c70a:	d004      	beq.n	800c716 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c714:	d107      	bne.n	800c726 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c724:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c72a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c72e:	d10f      	bne.n	800c750 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c74e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c760:	2303      	movs	r3, #3
 800c762:	e011      	b.n	800c788 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d102      	bne.n	800c770 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800c76a:	2300      	movs	r3, #0
 800c76c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c76e:	e002      	b.n	800c776 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	3b01      	subs	r3, #1
 800c774:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	689a      	ldr	r2, [r3, #8]
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	4013      	ands	r3, r2
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d195      	bne.n	800c6b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3728      	adds	r7, #40	@ 0x28
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20000004 	.word	0x20000004

0800c794 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af02      	add	r7, sp, #8
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c7a8:	d111      	bne.n	800c7ce <SPI_EndRxTransaction+0x3a>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7b2:	d004      	beq.n	800c7be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7bc:	d107      	bne.n	800c7ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c7d6:	d112      	bne.n	800c7fe <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2180      	movs	r1, #128	@ 0x80
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff feb8 	bl	800c558 <SPI_WaitFlagStateUntilTimeout>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d021      	beq.n	800c832 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7f2:	f043 0220 	orr.w	r2, r3, #32
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e03d      	b.n	800c87a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c7fe:	4b21      	ldr	r3, [pc, #132]	@ (800c884 <SPI_EndRxTransaction+0xf0>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a21      	ldr	r2, [pc, #132]	@ (800c888 <SPI_EndRxTransaction+0xf4>)
 800c804:	fba2 2303 	umull	r2, r3, r2, r3
 800c808:	0d5b      	lsrs	r3, r3, #21
 800c80a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c80e:	fb02 f303 	mul.w	r3, r2, r3
 800c812:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00a      	beq.n	800c830 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c82a:	2b80      	cmp	r3, #128	@ 0x80
 800c82c:	d0f2      	beq.n	800c814 <SPI_EndRxTransaction+0x80>
 800c82e:	e000      	b.n	800c832 <SPI_EndRxTransaction+0x9e>
        break;
 800c830:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c83a:	d11d      	bne.n	800c878 <SPI_EndRxTransaction+0xe4>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c844:	d004      	beq.n	800c850 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c84e:	d113      	bne.n	800c878 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2200      	movs	r2, #0
 800c858:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff ff03 	bl	800c668 <SPI_WaitFifoStateUntilTimeout>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d007      	beq.n	800c878 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c86c:	f043 0220 	orr.w	r2, r3, #32
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800c874:	2303      	movs	r3, #3
 800c876:	e000      	b.n	800c87a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	20000004 	.word	0x20000004
 800c888:	165e9f81 	.word	0x165e9f81

0800c88c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af02      	add	r7, sp, #8
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f7ff fedf 	bl	800c668 <SPI_WaitFifoStateUntilTimeout>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d007      	beq.n	800c8c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8b4:	f043 0220 	orr.w	r2, r3, #32
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e046      	b.n	800c94e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c8c0:	4b25      	ldr	r3, [pc, #148]	@ (800c958 <SPI_EndRxTxTransaction+0xcc>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a25      	ldr	r2, [pc, #148]	@ (800c95c <SPI_EndRxTxTransaction+0xd0>)
 800c8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ca:	0d5b      	lsrs	r3, r3, #21
 800c8cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c8d0:	fb02 f303 	mul.w	r3, r2, r3
 800c8d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c8de:	d112      	bne.n	800c906 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2180      	movs	r1, #128	@ 0x80
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff fe34 	bl	800c558 <SPI_WaitFlagStateUntilTimeout>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d016      	beq.n	800c924 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8fa:	f043 0220 	orr.w	r2, r3, #32
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e023      	b.n	800c94e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00a      	beq.n	800c922 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	3b01      	subs	r3, #1
 800c910:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c91c:	2b80      	cmp	r3, #128	@ 0x80
 800c91e:	d0f2      	beq.n	800c906 <SPI_EndRxTxTransaction+0x7a>
 800c920:	e000      	b.n	800c924 <SPI_EndRxTxTransaction+0x98>
        break;
 800c922:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff fe99 	bl	800c668 <SPI_WaitFifoStateUntilTimeout>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d007      	beq.n	800c94c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c940:	f043 0220 	orr.w	r2, r3, #32
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c948:	2303      	movs	r3, #3
 800c94a:	e000      	b.n	800c94e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20000004 	.word	0x20000004
 800c95c:	165e9f81 	.word	0x165e9f81

0800c960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e049      	b.n	800ca06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7f8 fd60 	bl	800544c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2202      	movs	r2, #2
 800c990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f000 fc12 	bl	800d1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
	...

0800ca10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d001      	beq.n	800ca28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e054      	b.n	800cad2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f042 0201 	orr.w	r2, r2, #1
 800ca3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a26      	ldr	r2, [pc, #152]	@ (800cae0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d022      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca52:	d01d      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a22      	ldr	r2, [pc, #136]	@ (800cae4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d018      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a21      	ldr	r2, [pc, #132]	@ (800cae8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d013      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a1f      	ldr	r2, [pc, #124]	@ (800caec <HAL_TIM_Base_Start_IT+0xdc>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d00e      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a1e      	ldr	r2, [pc, #120]	@ (800caf0 <HAL_TIM_Base_Start_IT+0xe0>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d009      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a1c      	ldr	r2, [pc, #112]	@ (800caf4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d004      	beq.n	800ca90 <HAL_TIM_Base_Start_IT+0x80>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a1b      	ldr	r2, [pc, #108]	@ (800caf8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d115      	bne.n	800cabc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	4b19      	ldr	r3, [pc, #100]	@ (800cafc <HAL_TIM_Base_Start_IT+0xec>)
 800ca98:	4013      	ands	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b06      	cmp	r3, #6
 800caa0:	d015      	beq.n	800cace <HAL_TIM_Base_Start_IT+0xbe>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caa8:	d011      	beq.n	800cace <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f042 0201 	orr.w	r2, r2, #1
 800cab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caba:	e008      	b.n	800cace <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f042 0201 	orr.w	r2, r2, #1
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	e000      	b.n	800cad0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	40010000 	.word	0x40010000
 800cae4:	40000400 	.word	0x40000400
 800cae8:	40000800 	.word	0x40000800
 800caec:	40000c00 	.word	0x40000c00
 800caf0:	40010400 	.word	0x40010400
 800caf4:	40014000 	.word	0x40014000
 800caf8:	40001800 	.word	0x40001800
 800cafc:	00010007 	.word	0x00010007

0800cb00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d101      	bne.n	800cb12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e049      	b.n	800cba6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d106      	bne.n	800cb2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7f8 fcfe 	bl	8005528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2202      	movs	r2, #2
 800cb30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	4610      	mov	r0, r2
 800cb40:	f000 fb42 	bl	800d1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2201      	movs	r2, #1
 800cb98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f003 0302 	and.w	r3, r3, #2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d020      	beq.n	800cc12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f003 0302 	and.w	r3, r3, #2
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01b      	beq.n	800cc12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f06f 0202 	mvn.w	r2, #2
 800cbe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	f003 0303 	and.w	r3, r3, #3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fac7 	bl	800d18c <HAL_TIM_IC_CaptureCallback>
 800cbfe:	e005      	b.n	800cc0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fab9 	bl	800d178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 faca 	bl	800d1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	f003 0304 	and.w	r3, r3, #4
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d020      	beq.n	800cc5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f003 0304 	and.w	r3, r3, #4
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d01b      	beq.n	800cc5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f06f 0204 	mvn.w	r2, #4
 800cc2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2202      	movs	r2, #2
 800cc34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 faa1 	bl	800d18c <HAL_TIM_IC_CaptureCallback>
 800cc4a:	e005      	b.n	800cc58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fa93 	bl	800d178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 faa4 	bl	800d1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f003 0308 	and.w	r3, r3, #8
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d020      	beq.n	800ccaa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f003 0308 	and.w	r3, r3, #8
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d01b      	beq.n	800ccaa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f06f 0208 	mvn.w	r2, #8
 800cc7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2204      	movs	r2, #4
 800cc80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	69db      	ldr	r3, [r3, #28]
 800cc88:	f003 0303 	and.w	r3, r3, #3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa7b 	bl	800d18c <HAL_TIM_IC_CaptureCallback>
 800cc96:	e005      	b.n	800cca4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fa6d 	bl	800d178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fa7e 	bl	800d1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	f003 0310 	and.w	r3, r3, #16
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d020      	beq.n	800ccf6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f003 0310 	and.w	r3, r3, #16
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01b      	beq.n	800ccf6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f06f 0210 	mvn.w	r2, #16
 800ccc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2208      	movs	r2, #8
 800cccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69db      	ldr	r3, [r3, #28]
 800ccd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d003      	beq.n	800cce4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fa55 	bl	800d18c <HAL_TIM_IC_CaptureCallback>
 800cce2:	e005      	b.n	800ccf0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fa47 	bl	800d178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fa58 	bl	800d1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00c      	beq.n	800cd1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f003 0301 	and.w	r3, r3, #1
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d007      	beq.n	800cd1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f06f 0201 	mvn.w	r2, #1
 800cd12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7f7 fae9 	bl	80042ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d104      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cd40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fef4 	bl	800db30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00c      	beq.n	800cd6c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cd64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 feec 	bl	800db44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00c      	beq.n	800cd90 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d007      	beq.n	800cd90 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cd88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fa12 	bl	800d1b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f003 0320 	and.w	r3, r3, #32
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00c      	beq.n	800cdb4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f003 0320 	and.w	r3, r3, #32
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d007      	beq.n	800cdb4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f06f 0220 	mvn.w	r2, #32
 800cdac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 feb4 	bl	800db1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdb4:	bf00      	nop
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b086      	sub	sp, #24
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d101      	bne.n	800cdda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	e0ff      	b.n	800cfda <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b14      	cmp	r3, #20
 800cde6:	f200 80f0 	bhi.w	800cfca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cdea:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf0:	0800ce45 	.word	0x0800ce45
 800cdf4:	0800cfcb 	.word	0x0800cfcb
 800cdf8:	0800cfcb 	.word	0x0800cfcb
 800cdfc:	0800cfcb 	.word	0x0800cfcb
 800ce00:	0800ce85 	.word	0x0800ce85
 800ce04:	0800cfcb 	.word	0x0800cfcb
 800ce08:	0800cfcb 	.word	0x0800cfcb
 800ce0c:	0800cfcb 	.word	0x0800cfcb
 800ce10:	0800cec7 	.word	0x0800cec7
 800ce14:	0800cfcb 	.word	0x0800cfcb
 800ce18:	0800cfcb 	.word	0x0800cfcb
 800ce1c:	0800cfcb 	.word	0x0800cfcb
 800ce20:	0800cf07 	.word	0x0800cf07
 800ce24:	0800cfcb 	.word	0x0800cfcb
 800ce28:	0800cfcb 	.word	0x0800cfcb
 800ce2c:	0800cfcb 	.word	0x0800cfcb
 800ce30:	0800cf49 	.word	0x0800cf49
 800ce34:	0800cfcb 	.word	0x0800cfcb
 800ce38:	0800cfcb 	.word	0x0800cfcb
 800ce3c:	0800cfcb 	.word	0x0800cfcb
 800ce40:	0800cf89 	.word	0x0800cf89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68b9      	ldr	r1, [r7, #8]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 fa62 	bl	800d314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	699a      	ldr	r2, [r3, #24]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f042 0208 	orr.w	r2, r2, #8
 800ce5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	699a      	ldr	r2, [r3, #24]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0204 	bic.w	r2, r2, #4
 800ce6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6999      	ldr	r1, [r3, #24]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	691a      	ldr	r2, [r3, #16]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	619a      	str	r2, [r3, #24]
      break;
 800ce82:	e0a5      	b.n	800cfd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68b9      	ldr	r1, [r7, #8]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 fab4 	bl	800d3f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	699a      	ldr	r2, [r3, #24]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	699a      	ldr	r2, [r3, #24]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ceae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6999      	ldr	r1, [r3, #24]
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	021a      	lsls	r2, r3, #8
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	430a      	orrs	r2, r1
 800cec2:	619a      	str	r2, [r3, #24]
      break;
 800cec4:	e084      	b.n	800cfd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68b9      	ldr	r1, [r7, #8]
 800cecc:	4618      	mov	r0, r3
 800cece:	f000 fb0b 	bl	800d4e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	69da      	ldr	r2, [r3, #28]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f042 0208 	orr.w	r2, r2, #8
 800cee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	69da      	ldr	r2, [r3, #28]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f022 0204 	bic.w	r2, r2, #4
 800cef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	69d9      	ldr	r1, [r3, #28]
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	691a      	ldr	r2, [r3, #16]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	430a      	orrs	r2, r1
 800cf02:	61da      	str	r2, [r3, #28]
      break;
 800cf04:	e064      	b.n	800cfd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68b9      	ldr	r1, [r7, #8]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f000 fb61 	bl	800d5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	69da      	ldr	r2, [r3, #28]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	69da      	ldr	r2, [r3, #28]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69d9      	ldr	r1, [r3, #28]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	021a      	lsls	r2, r3, #8
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	61da      	str	r2, [r3, #28]
      break;
 800cf46:	e043      	b.n	800cfd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68b9      	ldr	r1, [r7, #8]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 fb98 	bl	800d684 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f042 0208 	orr.w	r2, r2, #8
 800cf62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 0204 	bic.w	r2, r2, #4
 800cf72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	691a      	ldr	r2, [r3, #16]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cf86:	e023      	b.n	800cfd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fbca 	bl	800d728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cfa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cfb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	021a      	lsls	r2, r3, #8
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cfc8:	e002      	b.n	800cfd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	75fb      	strb	r3, [r7, #23]
      break;
 800cfce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3718      	adds	r7, #24
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop

0800cfe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d101      	bne.n	800d000 <HAL_TIM_ConfigClockSource+0x1c>
 800cffc:	2302      	movs	r3, #2
 800cffe:	e0b4      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x186>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	4b56      	ldr	r3, [pc, #344]	@ (800d174 <HAL_TIM_ConfigClockSource+0x190>)
 800d01c:	4013      	ands	r3, r2
 800d01e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d038:	d03e      	beq.n	800d0b8 <HAL_TIM_ConfigClockSource+0xd4>
 800d03a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d03e:	f200 8087 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d046:	f000 8086 	beq.w	800d156 <HAL_TIM_ConfigClockSource+0x172>
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d04e:	d87f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d050:	2b70      	cmp	r3, #112	@ 0x70
 800d052:	d01a      	beq.n	800d08a <HAL_TIM_ConfigClockSource+0xa6>
 800d054:	2b70      	cmp	r3, #112	@ 0x70
 800d056:	d87b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d058:	2b60      	cmp	r3, #96	@ 0x60
 800d05a:	d050      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x11a>
 800d05c:	2b60      	cmp	r3, #96	@ 0x60
 800d05e:	d877      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d060:	2b50      	cmp	r3, #80	@ 0x50
 800d062:	d03c      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0xfa>
 800d064:	2b50      	cmp	r3, #80	@ 0x50
 800d066:	d873      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d068:	2b40      	cmp	r3, #64	@ 0x40
 800d06a:	d058      	beq.n	800d11e <HAL_TIM_ConfigClockSource+0x13a>
 800d06c:	2b40      	cmp	r3, #64	@ 0x40
 800d06e:	d86f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d070:	2b30      	cmp	r3, #48	@ 0x30
 800d072:	d064      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d074:	2b30      	cmp	r3, #48	@ 0x30
 800d076:	d86b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d060      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d867      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05c      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d084:	2b10      	cmp	r3, #16
 800d086:	d05a      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d088:	e062      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d09a:	f000 fc13 	bl	800d8c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d0ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	609a      	str	r2, [r3, #8]
      break;
 800d0b6:	e04f      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d0c8:	f000 fbfc 	bl	800d8c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d0da:	609a      	str	r2, [r3, #8]
      break;
 800d0dc:	e03c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f000 fb70 	bl	800d7d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2150      	movs	r1, #80	@ 0x50
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fbc9 	bl	800d88e <TIM_ITRx_SetConfig>
      break;
 800d0fc:	e02c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d10a:	461a      	mov	r2, r3
 800d10c:	f000 fb8f 	bl	800d82e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2160      	movs	r1, #96	@ 0x60
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fbb9 	bl	800d88e <TIM_ITRx_SetConfig>
      break;
 800d11c:	e01c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d12a:	461a      	mov	r2, r3
 800d12c:	f000 fb50 	bl	800d7d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2140      	movs	r1, #64	@ 0x40
 800d136:	4618      	mov	r0, r3
 800d138:	f000 fba9 	bl	800d88e <TIM_ITRx_SetConfig>
      break;
 800d13c:	e00c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f000 fba0 	bl	800d88e <TIM_ITRx_SetConfig>
      break;
 800d14e:	e003      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	73fb      	strb	r3, [r7, #15]
      break;
 800d154:	e000      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d168:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	fffeff88 	.word	0xfffeff88

0800d178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a43      	ldr	r2, [pc, #268]	@ (800d2e8 <TIM_Base_SetConfig+0x120>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d013      	beq.n	800d208 <TIM_Base_SetConfig+0x40>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1e6:	d00f      	beq.n	800d208 <TIM_Base_SetConfig+0x40>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a40      	ldr	r2, [pc, #256]	@ (800d2ec <TIM_Base_SetConfig+0x124>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d00b      	beq.n	800d208 <TIM_Base_SetConfig+0x40>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a3f      	ldr	r2, [pc, #252]	@ (800d2f0 <TIM_Base_SetConfig+0x128>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d007      	beq.n	800d208 <TIM_Base_SetConfig+0x40>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a3e      	ldr	r2, [pc, #248]	@ (800d2f4 <TIM_Base_SetConfig+0x12c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d003      	beq.n	800d208 <TIM_Base_SetConfig+0x40>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a3d      	ldr	r2, [pc, #244]	@ (800d2f8 <TIM_Base_SetConfig+0x130>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d108      	bne.n	800d21a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d20e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	4313      	orrs	r3, r2
 800d218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a32      	ldr	r2, [pc, #200]	@ (800d2e8 <TIM_Base_SetConfig+0x120>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d02b      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d228:	d027      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a2f      	ldr	r2, [pc, #188]	@ (800d2ec <TIM_Base_SetConfig+0x124>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d023      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a2e      	ldr	r2, [pc, #184]	@ (800d2f0 <TIM_Base_SetConfig+0x128>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d01f      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a2d      	ldr	r2, [pc, #180]	@ (800d2f4 <TIM_Base_SetConfig+0x12c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d01b      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a2c      	ldr	r2, [pc, #176]	@ (800d2f8 <TIM_Base_SetConfig+0x130>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d017      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a2b      	ldr	r2, [pc, #172]	@ (800d2fc <TIM_Base_SetConfig+0x134>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d013      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a2a      	ldr	r2, [pc, #168]	@ (800d300 <TIM_Base_SetConfig+0x138>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d00f      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a29      	ldr	r2, [pc, #164]	@ (800d304 <TIM_Base_SetConfig+0x13c>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d00b      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a28      	ldr	r2, [pc, #160]	@ (800d308 <TIM_Base_SetConfig+0x140>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d007      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a27      	ldr	r2, [pc, #156]	@ (800d30c <TIM_Base_SetConfig+0x144>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d003      	beq.n	800d27a <TIM_Base_SetConfig+0xb2>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a26      	ldr	r2, [pc, #152]	@ (800d310 <TIM_Base_SetConfig+0x148>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d108      	bne.n	800d28c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	4313      	orrs	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	4313      	orrs	r3, r2
 800d298:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	689a      	ldr	r2, [r3, #8]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a0e      	ldr	r2, [pc, #56]	@ (800d2e8 <TIM_Base_SetConfig+0x120>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d003      	beq.n	800d2ba <TIM_Base_SetConfig+0xf2>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4a10      	ldr	r2, [pc, #64]	@ (800d2f8 <TIM_Base_SetConfig+0x130>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d103      	bne.n	800d2c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	691a      	ldr	r2, [r3, #16]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f043 0204 	orr.w	r2, r3, #4
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	601a      	str	r2, [r3, #0]
}
 800d2da:	bf00      	nop
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	40010000 	.word	0x40010000
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40000800 	.word	0x40000800
 800d2f4:	40000c00 	.word	0x40000c00
 800d2f8:	40010400 	.word	0x40010400
 800d2fc:	40014000 	.word	0x40014000
 800d300:	40014400 	.word	0x40014400
 800d304:	40014800 	.word	0x40014800
 800d308:	40001800 	.word	0x40001800
 800d30c:	40001c00 	.word	0x40001c00
 800d310:	40002000 	.word	0x40002000

0800d314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d314:	b480      	push	{r7}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a1b      	ldr	r3, [r3, #32]
 800d328:	f023 0201 	bic.w	r2, r3, #1
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4b2b      	ldr	r3, [pc, #172]	@ (800d3ec <TIM_OC1_SetConfig+0xd8>)
 800d340:	4013      	ands	r3, r2
 800d342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f023 0303 	bic.w	r3, r3, #3
 800d34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f023 0302 	bic.w	r3, r3, #2
 800d35c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a21      	ldr	r2, [pc, #132]	@ (800d3f0 <TIM_OC1_SetConfig+0xdc>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d003      	beq.n	800d378 <TIM_OC1_SetConfig+0x64>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a20      	ldr	r2, [pc, #128]	@ (800d3f4 <TIM_OC1_SetConfig+0xe0>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d10c      	bne.n	800d392 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	f023 0308 	bic.w	r3, r3, #8
 800d37e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	697a      	ldr	r2, [r7, #20]
 800d386:	4313      	orrs	r3, r2
 800d388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f023 0304 	bic.w	r3, r3, #4
 800d390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a16      	ldr	r2, [pc, #88]	@ (800d3f0 <TIM_OC1_SetConfig+0xdc>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d003      	beq.n	800d3a2 <TIM_OC1_SetConfig+0x8e>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a15      	ldr	r2, [pc, #84]	@ (800d3f4 <TIM_OC1_SetConfig+0xe0>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d111      	bne.n	800d3c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d3b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	695b      	ldr	r3, [r3, #20]
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	693a      	ldr	r2, [r7, #16]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	621a      	str	r2, [r3, #32]
}
 800d3e0:	bf00      	nop
 800d3e2:	371c      	adds	r7, #28
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	fffeff8f 	.word	0xfffeff8f
 800d3f0:	40010000 	.word	0x40010000
 800d3f4:	40010400 	.word	0x40010400

0800d3f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a1b      	ldr	r3, [r3, #32]
 800d406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a1b      	ldr	r3, [r3, #32]
 800d40c:	f023 0210 	bic.w	r2, r3, #16
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	4b2e      	ldr	r3, [pc, #184]	@ (800d4dc <TIM_OC2_SetConfig+0xe4>)
 800d424:	4013      	ands	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d42e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	021b      	lsls	r3, r3, #8
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	4313      	orrs	r3, r2
 800d43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f023 0320 	bic.w	r3, r3, #32
 800d442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	011b      	lsls	r3, r3, #4
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a23      	ldr	r2, [pc, #140]	@ (800d4e0 <TIM_OC2_SetConfig+0xe8>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d003      	beq.n	800d460 <TIM_OC2_SetConfig+0x68>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a22      	ldr	r2, [pc, #136]	@ (800d4e4 <TIM_OC2_SetConfig+0xec>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10d      	bne.n	800d47c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	011b      	lsls	r3, r3, #4
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	4313      	orrs	r3, r2
 800d472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d47a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a18      	ldr	r2, [pc, #96]	@ (800d4e0 <TIM_OC2_SetConfig+0xe8>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d003      	beq.n	800d48c <TIM_OC2_SetConfig+0x94>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a17      	ldr	r2, [pc, #92]	@ (800d4e4 <TIM_OC2_SetConfig+0xec>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d113      	bne.n	800d4b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d49a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	621a      	str	r2, [r3, #32]
}
 800d4ce:	bf00      	nop
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	feff8fff 	.word	0xfeff8fff
 800d4e0:	40010000 	.word	0x40010000
 800d4e4:	40010400 	.word	0x40010400

0800d4e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6a1b      	ldr	r3, [r3, #32]
 800d4fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	4b2d      	ldr	r3, [pc, #180]	@ (800d5c8 <TIM_OC3_SetConfig+0xe0>)
 800d514:	4013      	ands	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f023 0303 	bic.w	r3, r3, #3
 800d51e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4313      	orrs	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	021b      	lsls	r3, r3, #8
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a22      	ldr	r2, [pc, #136]	@ (800d5cc <TIM_OC3_SetConfig+0xe4>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d003      	beq.n	800d54e <TIM_OC3_SetConfig+0x66>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a21      	ldr	r2, [pc, #132]	@ (800d5d0 <TIM_OC3_SetConfig+0xe8>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d10d      	bne.n	800d56a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	021b      	lsls	r3, r3, #8
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	4313      	orrs	r3, r2
 800d560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a17      	ldr	r2, [pc, #92]	@ (800d5cc <TIM_OC3_SetConfig+0xe4>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d003      	beq.n	800d57a <TIM_OC3_SetConfig+0x92>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a16      	ldr	r2, [pc, #88]	@ (800d5d0 <TIM_OC3_SetConfig+0xe8>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d113      	bne.n	800d5a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4313      	orrs	r3, r2
 800d594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	011b      	lsls	r3, r3, #4
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	693a      	ldr	r2, [r7, #16]
 800d5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	621a      	str	r2, [r3, #32]
}
 800d5bc:	bf00      	nop
 800d5be:	371c      	adds	r7, #28
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	fffeff8f 	.word	0xfffeff8f
 800d5cc:	40010000 	.word	0x40010000
 800d5d0:	40010400 	.word	0x40010400

0800d5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b087      	sub	sp, #28
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a1b      	ldr	r3, [r3, #32]
 800d5e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a1b      	ldr	r3, [r3, #32]
 800d5e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d678 <TIM_OC4_SetConfig+0xa4>)
 800d600:	4013      	ands	r3, r2
 800d602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	021b      	lsls	r3, r3, #8
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	4313      	orrs	r3, r2
 800d616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	031b      	lsls	r3, r3, #12
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	4313      	orrs	r3, r2
 800d62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a13      	ldr	r2, [pc, #76]	@ (800d67c <TIM_OC4_SetConfig+0xa8>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d003      	beq.n	800d63c <TIM_OC4_SetConfig+0x68>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a12      	ldr	r2, [pc, #72]	@ (800d680 <TIM_OC4_SetConfig+0xac>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d109      	bne.n	800d650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	019b      	lsls	r3, r3, #6
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	621a      	str	r2, [r3, #32]
}
 800d66a:	bf00      	nop
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	feff8fff 	.word	0xfeff8fff
 800d67c:	40010000 	.word	0x40010000
 800d680:	40010400 	.word	0x40010400

0800d684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a1b      	ldr	r3, [r3, #32]
 800d692:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	4b1b      	ldr	r3, [pc, #108]	@ (800d71c <TIM_OC5_SetConfig+0x98>)
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d6c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	041b      	lsls	r3, r3, #16
 800d6cc:	693a      	ldr	r2, [r7, #16]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a12      	ldr	r2, [pc, #72]	@ (800d720 <TIM_OC5_SetConfig+0x9c>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d003      	beq.n	800d6e2 <TIM_OC5_SetConfig+0x5e>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a11      	ldr	r2, [pc, #68]	@ (800d724 <TIM_OC5_SetConfig+0xa0>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d109      	bne.n	800d6f6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d6e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	021b      	lsls	r3, r3, #8
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	697a      	ldr	r2, [r7, #20]
 800d6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	621a      	str	r2, [r3, #32]
}
 800d710:	bf00      	nop
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	fffeff8f 	.word	0xfffeff8f
 800d720:	40010000 	.word	0x40010000
 800d724:	40010400 	.word	0x40010400

0800d728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d728:	b480      	push	{r7}
 800d72a:	b087      	sub	sp, #28
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a1b      	ldr	r3, [r3, #32]
 800d73c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	4b1c      	ldr	r3, [pc, #112]	@ (800d7c4 <TIM_OC6_SetConfig+0x9c>)
 800d754:	4013      	ands	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	021b      	lsls	r3, r3, #8
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	4313      	orrs	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d76a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	051b      	lsls	r3, r3, #20
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	4313      	orrs	r3, r2
 800d776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a13      	ldr	r2, [pc, #76]	@ (800d7c8 <TIM_OC6_SetConfig+0xa0>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d003      	beq.n	800d788 <TIM_OC6_SetConfig+0x60>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a12      	ldr	r2, [pc, #72]	@ (800d7cc <TIM_OC6_SetConfig+0xa4>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d109      	bne.n	800d79c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d78e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	029b      	lsls	r3, r3, #10
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	4313      	orrs	r3, r2
 800d79a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	621a      	str	r2, [r3, #32]
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	feff8fff 	.word	0xfeff8fff
 800d7c8:	40010000 	.word	0x40010000
 800d7cc:	40010400 	.word	0x40010400

0800d7d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6a1b      	ldr	r3, [r3, #32]
 800d7e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	f023 0201 	bic.w	r2, r3, #1
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d7fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	4313      	orrs	r3, r2
 800d804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	f023 030a 	bic.w	r3, r3, #10
 800d80c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	4313      	orrs	r3, r2
 800d814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	621a      	str	r2, [r3, #32]
}
 800d822:	bf00      	nop
 800d824:	371c      	adds	r7, #28
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d82e:	b480      	push	{r7}
 800d830:	b087      	sub	sp, #28
 800d832:	af00      	add	r7, sp, #0
 800d834:	60f8      	str	r0, [r7, #12]
 800d836:	60b9      	str	r1, [r7, #8]
 800d838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6a1b      	ldr	r3, [r3, #32]
 800d83e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6a1b      	ldr	r3, [r3, #32]
 800d844:	f023 0210 	bic.w	r2, r3, #16
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	031b      	lsls	r3, r3, #12
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	4313      	orrs	r3, r2
 800d862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d86a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	011b      	lsls	r3, r3, #4
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	4313      	orrs	r3, r2
 800d874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	621a      	str	r2, [r3, #32]
}
 800d882:	bf00      	nop
 800d884:	371c      	adds	r7, #28
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d88e:	b480      	push	{r7}
 800d890:	b085      	sub	sp, #20
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	f043 0307 	orr.w	r3, r3, #7
 800d8b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	609a      	str	r2, [r3, #8]
}
 800d8b8:	bf00      	nop
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b087      	sub	sp, #28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
 800d8d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d8de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	021a      	lsls	r2, r3, #8
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	431a      	orrs	r2, r3
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	697a      	ldr	r2, [r7, #20]
 800d8f6:	609a      	str	r2, [r3, #8]
}
 800d8f8:	bf00      	nop
 800d8fa:	371c      	adds	r7, #28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d914:	2b01      	cmp	r3, #1
 800d916:	d101      	bne.n	800d91c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d918:	2302      	movs	r3, #2
 800d91a:	e06d      	b.n	800d9f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2202      	movs	r2, #2
 800d928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a30      	ldr	r2, [pc, #192]	@ (800da04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d004      	beq.n	800d950 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a2f      	ldr	r2, [pc, #188]	@ (800da08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d108      	bne.n	800d962 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d956:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	4313      	orrs	r3, r2
 800d960:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d968:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	4313      	orrs	r3, r2
 800d972:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a20      	ldr	r2, [pc, #128]	@ (800da04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d022      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d98e:	d01d      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a1d      	ldr	r2, [pc, #116]	@ (800da0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d018      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a1c      	ldr	r2, [pc, #112]	@ (800da10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d013      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a1a      	ldr	r2, [pc, #104]	@ (800da14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d00e      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a15      	ldr	r2, [pc, #84]	@ (800da08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d009      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a16      	ldr	r2, [pc, #88]	@ (800da18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d004      	beq.n	800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a15      	ldr	r2, [pc, #84]	@ (800da1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d10c      	bne.n	800d9e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	40010000 	.word	0x40010000
 800da08:	40010400 	.word	0x40010400
 800da0c:	40000400 	.word	0x40000400
 800da10:	40000800 	.word	0x40000800
 800da14:	40000c00 	.word	0x40000c00
 800da18:	40014000 	.word	0x40014000
 800da1c:	40001800 	.word	0x40001800

0800da20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da34:	2b01      	cmp	r3, #1
 800da36:	d101      	bne.n	800da3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da38:	2302      	movs	r3, #2
 800da3a:	e065      	b.n	800db08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	4313      	orrs	r3, r2
 800da50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4313      	orrs	r3, r2
 800da7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	695b      	ldr	r3, [r3, #20]
 800da94:	4313      	orrs	r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	041b      	lsls	r3, r3, #16
 800dab2:	4313      	orrs	r3, r2
 800dab4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a16      	ldr	r2, [pc, #88]	@ (800db14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d004      	beq.n	800daca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a14      	ldr	r2, [pc, #80]	@ (800db18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d115      	bne.n	800daf6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dad4:	051b      	lsls	r3, r3, #20
 800dad6:	4313      	orrs	r3, r2
 800dad8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	69db      	ldr	r3, [r3, #28]
 800dae4:	4313      	orrs	r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	40010000 	.word	0x40010000
 800db18:	40010400 	.word	0x40010400

0800db1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db24:	bf00      	nop
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db38:	bf00      	nop
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	e040      	b.n	800dbec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7f7 fdfc 	bl	8005778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2224      	movs	r2, #36	@ 0x24
 800db84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f022 0201 	bic.w	r2, r2, #1
 800db94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d002      	beq.n	800dba4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 fe66 	bl	800e870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fbff 	bl	800e3a8 <UART_SetConfig>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d101      	bne.n	800dbb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e01b      	b.n	800dbec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	685a      	ldr	r2, [r3, #4]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dbc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	689a      	ldr	r2, [r3, #8]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dbd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f042 0201 	orr.w	r2, r2, #1
 800dbe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fee5 	bl	800e9b4 <UART_CheckIdleState>
 800dbea:	4603      	mov	r3, r0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08a      	sub	sp, #40	@ 0x28
 800dbf8:	af02      	add	r7, sp, #8
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	603b      	str	r3, [r7, #0]
 800dc00:	4613      	mov	r3, r2
 800dc02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc08:	2b20      	cmp	r3, #32
 800dc0a:	d177      	bne.n	800dcfc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <HAL_UART_Transmit+0x24>
 800dc12:	88fb      	ldrh	r3, [r7, #6]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d101      	bne.n	800dc1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e070      	b.n	800dcfe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2221      	movs	r2, #33	@ 0x21
 800dc28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc2a:	f7f7 febf 	bl	80059ac <HAL_GetTick>
 800dc2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	88fa      	ldrh	r2, [r7, #6]
 800dc34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	88fa      	ldrh	r2, [r7, #6]
 800dc3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc48:	d108      	bne.n	800dc5c <HAL_UART_Transmit+0x68>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	691b      	ldr	r3, [r3, #16]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d104      	bne.n	800dc5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	61bb      	str	r3, [r7, #24]
 800dc5a:	e003      	b.n	800dc64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc60:	2300      	movs	r3, #0
 800dc62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dc64:	e02f      	b.n	800dcc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2180      	movs	r1, #128	@ 0x80
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 fef6 	bl	800ea62 <UART_WaitOnFlagUntilTimeout>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d004      	beq.n	800dc86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2220      	movs	r2, #32
 800dc80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e03b      	b.n	800dcfe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10b      	bne.n	800dca4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	461a      	mov	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	3302      	adds	r3, #2
 800dca0:	61bb      	str	r3, [r7, #24]
 800dca2:	e007      	b.n	800dcb4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	781a      	ldrb	r2, [r3, #0]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1c9      	bne.n	800dc66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	2140      	movs	r1, #64	@ 0x40
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 fec0 	bl	800ea62 <UART_WaitOnFlagUntilTimeout>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2220      	movs	r2, #32
 800dcec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800dcee:	2303      	movs	r3, #3
 800dcf0:	e005      	b.n	800dcfe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2220      	movs	r2, #32
 800dcf6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e000      	b.n	800dcfe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800dcfc:	2302      	movs	r3, #2
  }
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3720      	adds	r7, #32
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b08a      	sub	sp, #40	@ 0x28
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	4613      	mov	r3, r2
 800dd12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd1a:	2b20      	cmp	r3, #32
 800dd1c:	d132      	bne.n	800dd84 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <HAL_UART_Receive_IT+0x24>
 800dd24:	88fb      	ldrh	r3, [r7, #6]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e02b      	b.n	800dd86 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d018      	beq.n	800dd74 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	e853 3f00 	ldrex	r3, [r3]
 800dd4e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd56:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	623b      	str	r3, [r7, #32]
 800dd62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd64:	69f9      	ldr	r1, [r7, #28]
 800dd66:	6a3a      	ldr	r2, [r7, #32]
 800dd68:	e841 2300 	strex	r3, r2, [r1]
 800dd6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1e6      	bne.n	800dd42 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	461a      	mov	r2, r3
 800dd78:	68b9      	ldr	r1, [r7, #8]
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f000 fede 	bl	800eb3c <UART_Start_Receive_IT>
 800dd80:	4603      	mov	r3, r0
 800dd82:	e000      	b.n	800dd86 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800dd84:	2302      	movs	r3, #2
  }
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3728      	adds	r7, #40	@ 0x28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
	...

0800dd90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b0ba      	sub	sp, #232	@ 0xe8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	69db      	ldr	r3, [r3, #28]
 800dd9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ddba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ddc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d115      	bne.n	800ddf8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ddcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddd0:	f003 0320 	and.w	r3, r3, #32
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00f      	beq.n	800ddf8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ddd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dddc:	f003 0320 	and.w	r3, r3, #32
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d009      	beq.n	800ddf8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 82b1 	beq.w	800e350 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	4798      	blx	r3
      }
      return;
 800ddf6:	e2ab      	b.n	800e350 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ddf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f000 8117 	beq.w	800e030 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800de02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d106      	bne.n	800de1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800de0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800de12:	4b85      	ldr	r3, [pc, #532]	@ (800e028 <HAL_UART_IRQHandler+0x298>)
 800de14:	4013      	ands	r3, r2
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 810a 	beq.w	800e030 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de20:	f003 0301 	and.w	r3, r3, #1
 800de24:	2b00      	cmp	r3, #0
 800de26:	d011      	beq.n	800de4c <HAL_UART_IRQHandler+0xbc>
 800de28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de30:	2b00      	cmp	r3, #0
 800de32:	d00b      	beq.n	800de4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2201      	movs	r2, #1
 800de3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de42:	f043 0201 	orr.w	r2, r3, #1
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de50:	f003 0302 	and.w	r3, r3, #2
 800de54:	2b00      	cmp	r3, #0
 800de56:	d011      	beq.n	800de7c <HAL_UART_IRQHandler+0xec>
 800de58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00b      	beq.n	800de7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2202      	movs	r2, #2
 800de6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de72:	f043 0204 	orr.w	r2, r3, #4
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de80:	f003 0304 	and.w	r3, r3, #4
 800de84:	2b00      	cmp	r3, #0
 800de86:	d011      	beq.n	800deac <HAL_UART_IRQHandler+0x11c>
 800de88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00b      	beq.n	800deac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2204      	movs	r2, #4
 800de9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dea2:	f043 0202 	orr.w	r2, r3, #2
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800deac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deb0:	f003 0308 	and.w	r3, r3, #8
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d017      	beq.n	800dee8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800deb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800debc:	f003 0320 	and.w	r3, r3, #32
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d105      	bne.n	800ded0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800dec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dec8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00b      	beq.n	800dee8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2208      	movs	r2, #8
 800ded6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dede:	f043 0208 	orr.w	r2, r3, #8
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800def0:	2b00      	cmp	r3, #0
 800def2:	d012      	beq.n	800df1a <HAL_UART_IRQHandler+0x18a>
 800def4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800def8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00c      	beq.n	800df1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df10:	f043 0220 	orr.w	r2, r3, #32
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df20:	2b00      	cmp	r3, #0
 800df22:	f000 8217 	beq.w	800e354 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800df26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df2a:	f003 0320 	and.w	r3, r3, #32
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00d      	beq.n	800df4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800df32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d007      	beq.n	800df4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df62:	2b40      	cmp	r3, #64	@ 0x40
 800df64:	d005      	beq.n	800df72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d04f      	beq.n	800e012 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fea8 	bl	800ecc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	689b      	ldr	r3, [r3, #8]
 800df7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df82:	2b40      	cmp	r3, #64	@ 0x40
 800df84:	d141      	bne.n	800e00a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	3308      	adds	r3, #8
 800df8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df94:	e853 3f00 	ldrex	r3, [r3]
 800df98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800df9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dfa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3308      	adds	r3, #8
 800dfae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dfb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dfb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dfbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dfc2:	e841 2300 	strex	r3, r2, [r1]
 800dfc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dfca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1d9      	bne.n	800df86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d013      	beq.n	800e002 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfde:	4a13      	ldr	r2, [pc, #76]	@ (800e02c <HAL_UART_IRQHandler+0x29c>)
 800dfe0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f8 fac6 	bl	8006578 <HAL_DMA_Abort_IT>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d017      	beq.n	800e022 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800dffc:	4610      	mov	r0, r2
 800dffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e000:	e00f      	b.n	800e022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f9ba 	bl	800e37c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e008:	e00b      	b.n	800e022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 f9b6 	bl	800e37c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e010:	e007      	b.n	800e022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 f9b2 	bl	800e37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e020:	e198      	b.n	800e354 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e022:	bf00      	nop
    return;
 800e024:	e196      	b.n	800e354 <HAL_UART_IRQHandler+0x5c4>
 800e026:	bf00      	nop
 800e028:	04000120 	.word	0x04000120
 800e02c:	0800ed91 	.word	0x0800ed91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e034:	2b01      	cmp	r3, #1
 800e036:	f040 8166 	bne.w	800e306 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e03e:	f003 0310 	and.w	r3, r3, #16
 800e042:	2b00      	cmp	r3, #0
 800e044:	f000 815f 	beq.w	800e306 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e04c:	f003 0310 	and.w	r3, r3, #16
 800e050:	2b00      	cmp	r3, #0
 800e052:	f000 8158 	beq.w	800e306 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2210      	movs	r2, #16
 800e05c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e068:	2b40      	cmp	r3, #64	@ 0x40
 800e06a:	f040 80d0 	bne.w	800e20e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e07a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f000 80ab 	beq.w	800e1da <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e08a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e08e:	429a      	cmp	r2, r3
 800e090:	f080 80a3 	bcs.w	800e1da <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e09a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0a2:	69db      	ldr	r3, [r3, #28]
 800e0a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0a8:	f000 8086 	beq.w	800e1b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e0b8:	e853 3f00 	ldrex	r3, [r3]
 800e0bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e0c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e0d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e0da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e0e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e0ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d1da      	bne.n	800e0ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e100:	e853 3f00 	ldrex	r3, [r3]
 800e104:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e108:	f023 0301 	bic.w	r3, r3, #1
 800e10c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3308      	adds	r3, #8
 800e116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e11a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e11e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e120:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e126:	e841 2300 	strex	r3, r2, [r1]
 800e12a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e12c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1e1      	bne.n	800e0f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3308      	adds	r3, #8
 800e138:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e13c:	e853 3f00 	ldrex	r3, [r3]
 800e140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3308      	adds	r3, #8
 800e152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e15c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e15e:	e841 2300 	strex	r3, r2, [r1]
 800e162:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1e3      	bne.n	800e132 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2220      	movs	r2, #32
 800e16e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e180:	e853 3f00 	ldrex	r3, [r3]
 800e184:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e188:	f023 0310 	bic.w	r3, r3, #16
 800e18c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	461a      	mov	r2, r3
 800e196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e19a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e19c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e1a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1a2:	e841 2300 	strex	r3, r2, [r1]
 800e1a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e1a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d1e4      	bne.n	800e178 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f8 f970 	bl	8006498 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2202      	movs	r2, #2
 800e1bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f8dc 	bl	800e390 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e1d8:	e0be      	b.n	800e358 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e1e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	f040 80b7 	bne.w	800e358 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1f4:	f040 80b0 	bne.w	800e358 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f8c2 	bl	800e390 <HAL_UARTEx_RxEventCallback>
      return;
 800e20c:	e0a4      	b.n	800e358 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e228:	b29b      	uxth	r3, r3
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 8096 	beq.w	800e35c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800e230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 8091 	beq.w	800e35c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	e853 3f00 	ldrex	r3, [r3]
 800e246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e24a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e24e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e25c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e25e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e4      	bne.n	800e23a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3308      	adds	r3, #8
 800e276:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	623b      	str	r3, [r7, #32]
   return(result);
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	f023 0301 	bic.w	r3, r3, #1
 800e286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e294:	633a      	str	r2, [r7, #48]	@ 0x30
 800e296:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e298:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e29a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e29c:	e841 2300 	strex	r3, r2, [r1]
 800e2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1e3      	bne.n	800e270 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2220      	movs	r2, #32
 800e2ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	e853 3f00 	ldrex	r3, [r3]
 800e2c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f023 0310 	bic.w	r3, r3, #16
 800e2d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e2de:	61fb      	str	r3, [r7, #28]
 800e2e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e2:	69b9      	ldr	r1, [r7, #24]
 800e2e4:	69fa      	ldr	r2, [r7, #28]
 800e2e6:	e841 2300 	strex	r3, r2, [r1]
 800e2ea:	617b      	str	r3, [r7, #20]
   return(result);
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1e4      	bne.n	800e2bc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e2f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f846 	bl	800e390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e304:	e02a      	b.n	800e35c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00e      	beq.n	800e330 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d008      	beq.n	800e330 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e322:	2b00      	cmp	r3, #0
 800e324:	d01c      	beq.n	800e360 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	4798      	blx	r3
    }
    return;
 800e32e:	e017      	b.n	800e360 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d012      	beq.n	800e362 <HAL_UART_IRQHandler+0x5d2>
 800e33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00c      	beq.n	800e362 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fd33 	bl	800edb4 <UART_EndTransmit_IT>
    return;
 800e34e:	e008      	b.n	800e362 <HAL_UART_IRQHandler+0x5d2>
      return;
 800e350:	bf00      	nop
 800e352:	e006      	b.n	800e362 <HAL_UART_IRQHandler+0x5d2>
    return;
 800e354:	bf00      	nop
 800e356:	e004      	b.n	800e362 <HAL_UART_IRQHandler+0x5d2>
      return;
 800e358:	bf00      	nop
 800e35a:	e002      	b.n	800e362 <HAL_UART_IRQHandler+0x5d2>
      return;
 800e35c:	bf00      	nop
 800e35e:	e000      	b.n	800e362 <HAL_UART_IRQHandler+0x5d2>
    return;
 800e360:	bf00      	nop
  }

}
 800e362:	37e8      	adds	r7, #232	@ 0xe8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e384:	bf00      	nop
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b088      	sub	sp, #32
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	689a      	ldr	r2, [r3, #8]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	431a      	orrs	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	431a      	orrs	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	69db      	ldr	r3, [r3, #28]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	4ba6      	ldr	r3, [pc, #664]	@ (800e66c <UART_SetConfig+0x2c4>)
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	6812      	ldr	r2, [r2, #0]
 800e3da:	6979      	ldr	r1, [r7, #20]
 800e3dc:	430b      	orrs	r3, r1
 800e3de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	430a      	orrs	r2, r1
 800e3f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	699b      	ldr	r3, [r3, #24]
 800e3fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6a1b      	ldr	r3, [r3, #32]
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	4313      	orrs	r3, r2
 800e404:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	697a      	ldr	r2, [r7, #20]
 800e416:	430a      	orrs	r2, r1
 800e418:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a94      	ldr	r2, [pc, #592]	@ (800e670 <UART_SetConfig+0x2c8>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d120      	bne.n	800e466 <UART_SetConfig+0xbe>
 800e424:	4b93      	ldr	r3, [pc, #588]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e42a:	f003 0303 	and.w	r3, r3, #3
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d816      	bhi.n	800e460 <UART_SetConfig+0xb8>
 800e432:	a201      	add	r2, pc, #4	@ (adr r2, 800e438 <UART_SetConfig+0x90>)
 800e434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e438:	0800e449 	.word	0x0800e449
 800e43c:	0800e455 	.word	0x0800e455
 800e440:	0800e44f 	.word	0x0800e44f
 800e444:	0800e45b 	.word	0x0800e45b
 800e448:	2301      	movs	r3, #1
 800e44a:	77fb      	strb	r3, [r7, #31]
 800e44c:	e150      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e44e:	2302      	movs	r3, #2
 800e450:	77fb      	strb	r3, [r7, #31]
 800e452:	e14d      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e454:	2304      	movs	r3, #4
 800e456:	77fb      	strb	r3, [r7, #31]
 800e458:	e14a      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e45a:	2308      	movs	r3, #8
 800e45c:	77fb      	strb	r3, [r7, #31]
 800e45e:	e147      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e460:	2310      	movs	r3, #16
 800e462:	77fb      	strb	r3, [r7, #31]
 800e464:	e144      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a83      	ldr	r2, [pc, #524]	@ (800e678 <UART_SetConfig+0x2d0>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d132      	bne.n	800e4d6 <UART_SetConfig+0x12e>
 800e470:	4b80      	ldr	r3, [pc, #512]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e476:	f003 030c 	and.w	r3, r3, #12
 800e47a:	2b0c      	cmp	r3, #12
 800e47c:	d828      	bhi.n	800e4d0 <UART_SetConfig+0x128>
 800e47e:	a201      	add	r2, pc, #4	@ (adr r2, 800e484 <UART_SetConfig+0xdc>)
 800e480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e484:	0800e4b9 	.word	0x0800e4b9
 800e488:	0800e4d1 	.word	0x0800e4d1
 800e48c:	0800e4d1 	.word	0x0800e4d1
 800e490:	0800e4d1 	.word	0x0800e4d1
 800e494:	0800e4c5 	.word	0x0800e4c5
 800e498:	0800e4d1 	.word	0x0800e4d1
 800e49c:	0800e4d1 	.word	0x0800e4d1
 800e4a0:	0800e4d1 	.word	0x0800e4d1
 800e4a4:	0800e4bf 	.word	0x0800e4bf
 800e4a8:	0800e4d1 	.word	0x0800e4d1
 800e4ac:	0800e4d1 	.word	0x0800e4d1
 800e4b0:	0800e4d1 	.word	0x0800e4d1
 800e4b4:	0800e4cb 	.word	0x0800e4cb
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	77fb      	strb	r3, [r7, #31]
 800e4bc:	e118      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e4be:	2302      	movs	r3, #2
 800e4c0:	77fb      	strb	r3, [r7, #31]
 800e4c2:	e115      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e4c4:	2304      	movs	r3, #4
 800e4c6:	77fb      	strb	r3, [r7, #31]
 800e4c8:	e112      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e4ca:	2308      	movs	r3, #8
 800e4cc:	77fb      	strb	r3, [r7, #31]
 800e4ce:	e10f      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e4d0:	2310      	movs	r3, #16
 800e4d2:	77fb      	strb	r3, [r7, #31]
 800e4d4:	e10c      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a68      	ldr	r2, [pc, #416]	@ (800e67c <UART_SetConfig+0x2d4>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d120      	bne.n	800e522 <UART_SetConfig+0x17a>
 800e4e0:	4b64      	ldr	r3, [pc, #400]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e4ea:	2b30      	cmp	r3, #48	@ 0x30
 800e4ec:	d013      	beq.n	800e516 <UART_SetConfig+0x16e>
 800e4ee:	2b30      	cmp	r3, #48	@ 0x30
 800e4f0:	d814      	bhi.n	800e51c <UART_SetConfig+0x174>
 800e4f2:	2b20      	cmp	r3, #32
 800e4f4:	d009      	beq.n	800e50a <UART_SetConfig+0x162>
 800e4f6:	2b20      	cmp	r3, #32
 800e4f8:	d810      	bhi.n	800e51c <UART_SetConfig+0x174>
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <UART_SetConfig+0x15c>
 800e4fe:	2b10      	cmp	r3, #16
 800e500:	d006      	beq.n	800e510 <UART_SetConfig+0x168>
 800e502:	e00b      	b.n	800e51c <UART_SetConfig+0x174>
 800e504:	2300      	movs	r3, #0
 800e506:	77fb      	strb	r3, [r7, #31]
 800e508:	e0f2      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e50a:	2302      	movs	r3, #2
 800e50c:	77fb      	strb	r3, [r7, #31]
 800e50e:	e0ef      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e510:	2304      	movs	r3, #4
 800e512:	77fb      	strb	r3, [r7, #31]
 800e514:	e0ec      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e516:	2308      	movs	r3, #8
 800e518:	77fb      	strb	r3, [r7, #31]
 800e51a:	e0e9      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e51c:	2310      	movs	r3, #16
 800e51e:	77fb      	strb	r3, [r7, #31]
 800e520:	e0e6      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a56      	ldr	r2, [pc, #344]	@ (800e680 <UART_SetConfig+0x2d8>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d120      	bne.n	800e56e <UART_SetConfig+0x1c6>
 800e52c:	4b51      	ldr	r3, [pc, #324]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e532:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e536:	2bc0      	cmp	r3, #192	@ 0xc0
 800e538:	d013      	beq.n	800e562 <UART_SetConfig+0x1ba>
 800e53a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e53c:	d814      	bhi.n	800e568 <UART_SetConfig+0x1c0>
 800e53e:	2b80      	cmp	r3, #128	@ 0x80
 800e540:	d009      	beq.n	800e556 <UART_SetConfig+0x1ae>
 800e542:	2b80      	cmp	r3, #128	@ 0x80
 800e544:	d810      	bhi.n	800e568 <UART_SetConfig+0x1c0>
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <UART_SetConfig+0x1a8>
 800e54a:	2b40      	cmp	r3, #64	@ 0x40
 800e54c:	d006      	beq.n	800e55c <UART_SetConfig+0x1b4>
 800e54e:	e00b      	b.n	800e568 <UART_SetConfig+0x1c0>
 800e550:	2300      	movs	r3, #0
 800e552:	77fb      	strb	r3, [r7, #31]
 800e554:	e0cc      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e556:	2302      	movs	r3, #2
 800e558:	77fb      	strb	r3, [r7, #31]
 800e55a:	e0c9      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e55c:	2304      	movs	r3, #4
 800e55e:	77fb      	strb	r3, [r7, #31]
 800e560:	e0c6      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e562:	2308      	movs	r3, #8
 800e564:	77fb      	strb	r3, [r7, #31]
 800e566:	e0c3      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e568:	2310      	movs	r3, #16
 800e56a:	77fb      	strb	r3, [r7, #31]
 800e56c:	e0c0      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a44      	ldr	r2, [pc, #272]	@ (800e684 <UART_SetConfig+0x2dc>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d125      	bne.n	800e5c4 <UART_SetConfig+0x21c>
 800e578:	4b3e      	ldr	r3, [pc, #248]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e57e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e586:	d017      	beq.n	800e5b8 <UART_SetConfig+0x210>
 800e588:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e58c:	d817      	bhi.n	800e5be <UART_SetConfig+0x216>
 800e58e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e592:	d00b      	beq.n	800e5ac <UART_SetConfig+0x204>
 800e594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e598:	d811      	bhi.n	800e5be <UART_SetConfig+0x216>
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <UART_SetConfig+0x1fe>
 800e59e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5a2:	d006      	beq.n	800e5b2 <UART_SetConfig+0x20a>
 800e5a4:	e00b      	b.n	800e5be <UART_SetConfig+0x216>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	77fb      	strb	r3, [r7, #31]
 800e5aa:	e0a1      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	77fb      	strb	r3, [r7, #31]
 800e5b0:	e09e      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e5b2:	2304      	movs	r3, #4
 800e5b4:	77fb      	strb	r3, [r7, #31]
 800e5b6:	e09b      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e5b8:	2308      	movs	r3, #8
 800e5ba:	77fb      	strb	r3, [r7, #31]
 800e5bc:	e098      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e5be:	2310      	movs	r3, #16
 800e5c0:	77fb      	strb	r3, [r7, #31]
 800e5c2:	e095      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a2f      	ldr	r2, [pc, #188]	@ (800e688 <UART_SetConfig+0x2e0>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d125      	bne.n	800e61a <UART_SetConfig+0x272>
 800e5ce:	4b29      	ldr	r3, [pc, #164]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e5d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5dc:	d017      	beq.n	800e60e <UART_SetConfig+0x266>
 800e5de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5e2:	d817      	bhi.n	800e614 <UART_SetConfig+0x26c>
 800e5e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5e8:	d00b      	beq.n	800e602 <UART_SetConfig+0x25a>
 800e5ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5ee:	d811      	bhi.n	800e614 <UART_SetConfig+0x26c>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d003      	beq.n	800e5fc <UART_SetConfig+0x254>
 800e5f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5f8:	d006      	beq.n	800e608 <UART_SetConfig+0x260>
 800e5fa:	e00b      	b.n	800e614 <UART_SetConfig+0x26c>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	77fb      	strb	r3, [r7, #31]
 800e600:	e076      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e602:	2302      	movs	r3, #2
 800e604:	77fb      	strb	r3, [r7, #31]
 800e606:	e073      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e608:	2304      	movs	r3, #4
 800e60a:	77fb      	strb	r3, [r7, #31]
 800e60c:	e070      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e60e:	2308      	movs	r3, #8
 800e610:	77fb      	strb	r3, [r7, #31]
 800e612:	e06d      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e614:	2310      	movs	r3, #16
 800e616:	77fb      	strb	r3, [r7, #31]
 800e618:	e06a      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a1b      	ldr	r2, [pc, #108]	@ (800e68c <UART_SetConfig+0x2e4>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d138      	bne.n	800e696 <UART_SetConfig+0x2ee>
 800e624:	4b13      	ldr	r3, [pc, #76]	@ (800e674 <UART_SetConfig+0x2cc>)
 800e626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e62a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e62e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e632:	d017      	beq.n	800e664 <UART_SetConfig+0x2bc>
 800e634:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e638:	d82a      	bhi.n	800e690 <UART_SetConfig+0x2e8>
 800e63a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e63e:	d00b      	beq.n	800e658 <UART_SetConfig+0x2b0>
 800e640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e644:	d824      	bhi.n	800e690 <UART_SetConfig+0x2e8>
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <UART_SetConfig+0x2aa>
 800e64a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e64e:	d006      	beq.n	800e65e <UART_SetConfig+0x2b6>
 800e650:	e01e      	b.n	800e690 <UART_SetConfig+0x2e8>
 800e652:	2300      	movs	r3, #0
 800e654:	77fb      	strb	r3, [r7, #31]
 800e656:	e04b      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e658:	2302      	movs	r3, #2
 800e65a:	77fb      	strb	r3, [r7, #31]
 800e65c:	e048      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e65e:	2304      	movs	r3, #4
 800e660:	77fb      	strb	r3, [r7, #31]
 800e662:	e045      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e664:	2308      	movs	r3, #8
 800e666:	77fb      	strb	r3, [r7, #31]
 800e668:	e042      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e66a:	bf00      	nop
 800e66c:	efff69f3 	.word	0xefff69f3
 800e670:	40011000 	.word	0x40011000
 800e674:	40023800 	.word	0x40023800
 800e678:	40004400 	.word	0x40004400
 800e67c:	40004800 	.word	0x40004800
 800e680:	40004c00 	.word	0x40004c00
 800e684:	40005000 	.word	0x40005000
 800e688:	40011400 	.word	0x40011400
 800e68c:	40007800 	.word	0x40007800
 800e690:	2310      	movs	r3, #16
 800e692:	77fb      	strb	r3, [r7, #31]
 800e694:	e02c      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a72      	ldr	r2, [pc, #456]	@ (800e864 <UART_SetConfig+0x4bc>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d125      	bne.n	800e6ec <UART_SetConfig+0x344>
 800e6a0:	4b71      	ldr	r3, [pc, #452]	@ (800e868 <UART_SetConfig+0x4c0>)
 800e6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e6aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e6ae:	d017      	beq.n	800e6e0 <UART_SetConfig+0x338>
 800e6b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e6b4:	d817      	bhi.n	800e6e6 <UART_SetConfig+0x33e>
 800e6b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e6ba:	d00b      	beq.n	800e6d4 <UART_SetConfig+0x32c>
 800e6bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e6c0:	d811      	bhi.n	800e6e6 <UART_SetConfig+0x33e>
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d003      	beq.n	800e6ce <UART_SetConfig+0x326>
 800e6c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e6ca:	d006      	beq.n	800e6da <UART_SetConfig+0x332>
 800e6cc:	e00b      	b.n	800e6e6 <UART_SetConfig+0x33e>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	77fb      	strb	r3, [r7, #31]
 800e6d2:	e00d      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	77fb      	strb	r3, [r7, #31]
 800e6d8:	e00a      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e6da:	2304      	movs	r3, #4
 800e6dc:	77fb      	strb	r3, [r7, #31]
 800e6de:	e007      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e6e0:	2308      	movs	r3, #8
 800e6e2:	77fb      	strb	r3, [r7, #31]
 800e6e4:	e004      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e6e6:	2310      	movs	r3, #16
 800e6e8:	77fb      	strb	r3, [r7, #31]
 800e6ea:	e001      	b.n	800e6f0 <UART_SetConfig+0x348>
 800e6ec:	2310      	movs	r3, #16
 800e6ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	69db      	ldr	r3, [r3, #28]
 800e6f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e6f8:	d15b      	bne.n	800e7b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e6fa:	7ffb      	ldrb	r3, [r7, #31]
 800e6fc:	2b08      	cmp	r3, #8
 800e6fe:	d828      	bhi.n	800e752 <UART_SetConfig+0x3aa>
 800e700:	a201      	add	r2, pc, #4	@ (adr r2, 800e708 <UART_SetConfig+0x360>)
 800e702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e706:	bf00      	nop
 800e708:	0800e72d 	.word	0x0800e72d
 800e70c:	0800e735 	.word	0x0800e735
 800e710:	0800e73d 	.word	0x0800e73d
 800e714:	0800e753 	.word	0x0800e753
 800e718:	0800e743 	.word	0x0800e743
 800e71c:	0800e753 	.word	0x0800e753
 800e720:	0800e753 	.word	0x0800e753
 800e724:	0800e753 	.word	0x0800e753
 800e728:	0800e74b 	.word	0x0800e74b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e72c:	f7fa fd52 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 800e730:	61b8      	str	r0, [r7, #24]
        break;
 800e732:	e013      	b.n	800e75c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e734:	f7fa fd62 	bl	80091fc <HAL_RCC_GetPCLK2Freq>
 800e738:	61b8      	str	r0, [r7, #24]
        break;
 800e73a:	e00f      	b.n	800e75c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e73c:	4b4b      	ldr	r3, [pc, #300]	@ (800e86c <UART_SetConfig+0x4c4>)
 800e73e:	61bb      	str	r3, [r7, #24]
        break;
 800e740:	e00c      	b.n	800e75c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e742:	f7fa fc75 	bl	8009030 <HAL_RCC_GetSysClockFreq>
 800e746:	61b8      	str	r0, [r7, #24]
        break;
 800e748:	e008      	b.n	800e75c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e74a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e74e:	61bb      	str	r3, [r7, #24]
        break;
 800e750:	e004      	b.n	800e75c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e752:	2300      	movs	r3, #0
 800e754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	77bb      	strb	r3, [r7, #30]
        break;
 800e75a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d074      	beq.n	800e84c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	005a      	lsls	r2, r3, #1
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	085b      	lsrs	r3, r3, #1
 800e76c:	441a      	add	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	fbb2 f3f3 	udiv	r3, r2, r3
 800e776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2b0f      	cmp	r3, #15
 800e77c:	d916      	bls.n	800e7ac <UART_SetConfig+0x404>
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e784:	d212      	bcs.n	800e7ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	f023 030f 	bic.w	r3, r3, #15
 800e78e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	085b      	lsrs	r3, r3, #1
 800e794:	b29b      	uxth	r3, r3
 800e796:	f003 0307 	and.w	r3, r3, #7
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	89fb      	ldrh	r3, [r7, #14]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	89fa      	ldrh	r2, [r7, #14]
 800e7a8:	60da      	str	r2, [r3, #12]
 800e7aa:	e04f      	b.n	800e84c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	77bb      	strb	r3, [r7, #30]
 800e7b0:	e04c      	b.n	800e84c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7b2:	7ffb      	ldrb	r3, [r7, #31]
 800e7b4:	2b08      	cmp	r3, #8
 800e7b6:	d828      	bhi.n	800e80a <UART_SetConfig+0x462>
 800e7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c0 <UART_SetConfig+0x418>)
 800e7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7be:	bf00      	nop
 800e7c0:	0800e7e5 	.word	0x0800e7e5
 800e7c4:	0800e7ed 	.word	0x0800e7ed
 800e7c8:	0800e7f5 	.word	0x0800e7f5
 800e7cc:	0800e80b 	.word	0x0800e80b
 800e7d0:	0800e7fb 	.word	0x0800e7fb
 800e7d4:	0800e80b 	.word	0x0800e80b
 800e7d8:	0800e80b 	.word	0x0800e80b
 800e7dc:	0800e80b 	.word	0x0800e80b
 800e7e0:	0800e803 	.word	0x0800e803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7e4:	f7fa fcf6 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 800e7e8:	61b8      	str	r0, [r7, #24]
        break;
 800e7ea:	e013      	b.n	800e814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7ec:	f7fa fd06 	bl	80091fc <HAL_RCC_GetPCLK2Freq>
 800e7f0:	61b8      	str	r0, [r7, #24]
        break;
 800e7f2:	e00f      	b.n	800e814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7f4:	4b1d      	ldr	r3, [pc, #116]	@ (800e86c <UART_SetConfig+0x4c4>)
 800e7f6:	61bb      	str	r3, [r7, #24]
        break;
 800e7f8:	e00c      	b.n	800e814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7fa:	f7fa fc19 	bl	8009030 <HAL_RCC_GetSysClockFreq>
 800e7fe:	61b8      	str	r0, [r7, #24]
        break;
 800e800:	e008      	b.n	800e814 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e806:	61bb      	str	r3, [r7, #24]
        break;
 800e808:	e004      	b.n	800e814 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e80a:	2300      	movs	r3, #0
 800e80c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e80e:	2301      	movs	r3, #1
 800e810:	77bb      	strb	r3, [r7, #30]
        break;
 800e812:	bf00      	nop
    }

    if (pclk != 0U)
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d018      	beq.n	800e84c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	085a      	lsrs	r2, r3, #1
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	441a      	add	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	fbb2 f3f3 	udiv	r3, r2, r3
 800e82c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	2b0f      	cmp	r3, #15
 800e832:	d909      	bls.n	800e848 <UART_SetConfig+0x4a0>
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e83a:	d205      	bcs.n	800e848 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	b29a      	uxth	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	e001      	b.n	800e84c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e858:	7fbb      	ldrb	r3, [r7, #30]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3720      	adds	r7, #32
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	40007c00 	.word	0x40007c00
 800e868:	40023800 	.word	0x40023800
 800e86c:	00f42400 	.word	0x00f42400

0800e870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e87c:	f003 0308 	and.w	r3, r3, #8
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00a      	beq.n	800e89a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	430a      	orrs	r2, r1
 800e898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00a      	beq.n	800e8bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	430a      	orrs	r2, r1
 800e8ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c0:	f003 0302 	and.w	r3, r3, #2
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00a      	beq.n	800e8de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e2:	f003 0304 	and.w	r3, r3, #4
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00a      	beq.n	800e900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e904:	f003 0310 	and.w	r3, r3, #16
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00a      	beq.n	800e922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	689b      	ldr	r3, [r3, #8]
 800e912:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	430a      	orrs	r2, r1
 800e920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e926:	f003 0320 	and.w	r3, r3, #32
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00a      	beq.n	800e944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	430a      	orrs	r2, r1
 800e942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d01a      	beq.n	800e986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	430a      	orrs	r2, r1
 800e964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e96a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e96e:	d10a      	bne.n	800e986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	430a      	orrs	r2, r1
 800e984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e98a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00a      	beq.n	800e9a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	430a      	orrs	r2, r1
 800e9a6:	605a      	str	r2, [r3, #4]
  }
}
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b08c      	sub	sp, #48	@ 0x30
 800e9b8:	af02      	add	r7, sp, #8
 800e9ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e9c4:	f7f6 fff2 	bl	80059ac <HAL_GetTick>
 800e9c8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	2b08      	cmp	r3, #8
 800e9d6:	d12e      	bne.n	800ea36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 f83b 	bl	800ea62 <UART_WaitOnFlagUntilTimeout>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d021      	beq.n	800ea36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	e853 3f00 	ldrex	r3, [r3]
 800e9fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea06:	623b      	str	r3, [r7, #32]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	6a3b      	ldr	r3, [r7, #32]
 800ea10:	61fb      	str	r3, [r7, #28]
 800ea12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea14:	69b9      	ldr	r1, [r7, #24]
 800ea16:	69fa      	ldr	r2, [r7, #28]
 800ea18:	e841 2300 	strex	r3, r2, [r1]
 800ea1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1e6      	bne.n	800e9f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2220      	movs	r2, #32
 800ea28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea32:	2303      	movs	r3, #3
 800ea34:	e011      	b.n	800ea5a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2220      	movs	r2, #32
 800ea3a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2220      	movs	r2, #32
 800ea40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3728      	adds	r7, #40	@ 0x28
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	60f8      	str	r0, [r7, #12]
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	603b      	str	r3, [r7, #0]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea72:	e04f      	b.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7a:	d04b      	beq.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea7c:	f7f6 ff96 	bl	80059ac <HAL_GetTick>
 800ea80:	4602      	mov	r2, r0
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	1ad3      	subs	r3, r2, r3
 800ea86:	69ba      	ldr	r2, [r7, #24]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d302      	bcc.n	800ea92 <UART_WaitOnFlagUntilTimeout+0x30>
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ea92:	2303      	movs	r3, #3
 800ea94:	e04e      	b.n	800eb34 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f003 0304 	and.w	r3, r3, #4
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d037      	beq.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xb2>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b80      	cmp	r3, #128	@ 0x80
 800eaa8:	d034      	beq.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xb2>
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	2b40      	cmp	r3, #64	@ 0x40
 800eaae:	d031      	beq.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	f003 0308 	and.w	r3, r3, #8
 800eaba:	2b08      	cmp	r3, #8
 800eabc:	d110      	bne.n	800eae0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2208      	movs	r2, #8
 800eac4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f000 f8fe 	bl	800ecc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2208      	movs	r2, #8
 800ead0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	e029      	b.n	800eb34 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	69db      	ldr	r3, [r3, #28]
 800eae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eaea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eaee:	d111      	bne.n	800eb14 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eaf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f000 f8e4 	bl	800ecc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2220      	movs	r2, #32
 800eb04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800eb10:	2303      	movs	r3, #3
 800eb12:	e00f      	b.n	800eb34 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	69da      	ldr	r2, [r3, #28]
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	4013      	ands	r3, r2
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	bf0c      	ite	eq
 800eb24:	2301      	moveq	r3, #1
 800eb26:	2300      	movne	r3, #0
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d0a0      	beq.n	800ea74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b097      	sub	sp, #92	@ 0x5c
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	4613      	mov	r3, r2
 800eb48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	88fa      	ldrh	r2, [r7, #6]
 800eb54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	88fa      	ldrh	r2, [r7, #6]
 800eb5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb6e:	d10e      	bne.n	800eb8e <UART_Start_Receive_IT+0x52>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d105      	bne.n	800eb84 <UART_Start_Receive_IT+0x48>
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800eb7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eb82:	e02d      	b.n	800ebe0 <UART_Start_Receive_IT+0xa4>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	22ff      	movs	r2, #255	@ 0xff
 800eb88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eb8c:	e028      	b.n	800ebe0 <UART_Start_Receive_IT+0xa4>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10d      	bne.n	800ebb2 <UART_Start_Receive_IT+0x76>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	691b      	ldr	r3, [r3, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d104      	bne.n	800eba8 <UART_Start_Receive_IT+0x6c>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	22ff      	movs	r2, #255	@ 0xff
 800eba2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eba6:	e01b      	b.n	800ebe0 <UART_Start_Receive_IT+0xa4>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	227f      	movs	r2, #127	@ 0x7f
 800ebac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ebb0:	e016      	b.n	800ebe0 <UART_Start_Receive_IT+0xa4>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebba:	d10d      	bne.n	800ebd8 <UART_Start_Receive_IT+0x9c>
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d104      	bne.n	800ebce <UART_Start_Receive_IT+0x92>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	227f      	movs	r2, #127	@ 0x7f
 800ebc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ebcc:	e008      	b.n	800ebe0 <UART_Start_Receive_IT+0xa4>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	223f      	movs	r2, #63	@ 0x3f
 800ebd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ebd6:	e003      	b.n	800ebe0 <UART_Start_Receive_IT+0xa4>
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2222      	movs	r2, #34	@ 0x22
 800ebec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebfa:	e853 3f00 	ldrex	r3, [r3]
 800ebfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec10:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ec12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec18:	e841 2300 	strex	r3, r2, [r1]
 800ec1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ec1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e5      	bne.n	800ebf0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec2c:	d107      	bne.n	800ec3e <UART_Start_Receive_IT+0x102>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d103      	bne.n	800ec3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	4a21      	ldr	r2, [pc, #132]	@ (800ecc0 <UART_Start_Receive_IT+0x184>)
 800ec3a:	669a      	str	r2, [r3, #104]	@ 0x68
 800ec3c:	e002      	b.n	800ec44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	4a20      	ldr	r2, [pc, #128]	@ (800ecc4 <UART_Start_Receive_IT+0x188>)
 800ec42:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d019      	beq.n	800ec80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec54:	e853 3f00 	ldrex	r3, [r3]
 800ec58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ec60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ec70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec72:	e841 2300 	strex	r3, r2, [r1]
 800ec76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ec78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1e6      	bne.n	800ec4c <UART_Start_Receive_IT+0x110>
 800ec7e:	e018      	b.n	800ecb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	e853 3f00 	ldrex	r3, [r3]
 800ec8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f043 0320 	orr.w	r3, r3, #32
 800ec94:	653b      	str	r3, [r7, #80]	@ 0x50
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec9e:	623b      	str	r3, [r7, #32]
 800eca0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca2:	69f9      	ldr	r1, [r7, #28]
 800eca4:	6a3a      	ldr	r2, [r7, #32]
 800eca6:	e841 2300 	strex	r3, r2, [r1]
 800ecaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1e6      	bne.n	800ec80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	375c      	adds	r7, #92	@ 0x5c
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr
 800ecc0:	0800efb1 	.word	0x0800efb1
 800ecc4:	0800ee09 	.word	0x0800ee09

0800ecc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b095      	sub	sp, #84	@ 0x54
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecd8:	e853 3f00 	ldrex	r3, [r3]
 800ecdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ecde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ece4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecee:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecf6:	e841 2300 	strex	r3, r2, [r1]
 800ecfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1e6      	bne.n	800ecd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	3308      	adds	r3, #8
 800ed08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0a:	6a3b      	ldr	r3, [r7, #32]
 800ed0c:	e853 3f00 	ldrex	r3, [r3]
 800ed10:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	f023 0301 	bic.w	r3, r3, #1
 800ed18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	3308      	adds	r3, #8
 800ed20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed2a:	e841 2300 	strex	r3, r2, [r1]
 800ed2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1e5      	bne.n	800ed02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d118      	bne.n	800ed70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	e853 3f00 	ldrex	r3, [r3]
 800ed4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	f023 0310 	bic.w	r3, r3, #16
 800ed52:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed5c:	61bb      	str	r3, [r7, #24]
 800ed5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed60:	6979      	ldr	r1, [r7, #20]
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	e841 2300 	strex	r3, r2, [r1]
 800ed68:	613b      	str	r3, [r7, #16]
   return(result);
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e6      	bne.n	800ed3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2220      	movs	r2, #32
 800ed74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ed84:	bf00      	nop
 800ed86:	3754      	adds	r7, #84	@ 0x54
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff fae8 	bl	800e37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edac:	bf00      	nop
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b088      	sub	sp, #32
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	e853 3f00 	ldrex	r3, [r3]
 800edc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edd0:	61fb      	str	r3, [r7, #28]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	61bb      	str	r3, [r7, #24]
 800eddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edde:	6979      	ldr	r1, [r7, #20]
 800ede0:	69ba      	ldr	r2, [r7, #24]
 800ede2:	e841 2300 	strex	r3, r2, [r1]
 800ede6:	613b      	str	r3, [r7, #16]
   return(result);
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1e6      	bne.n	800edbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2220      	movs	r2, #32
 800edf2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7ff fab4 	bl	800e368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee00:	bf00      	nop
 800ee02:	3720      	adds	r7, #32
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b09c      	sub	sp, #112	@ 0x70
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee20:	2b22      	cmp	r3, #34	@ 0x22
 800ee22:	f040 80b9 	bne.w	800ef98 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ee30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ee34:	b2d9      	uxtb	r1, r3
 800ee36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee40:	400a      	ands	r2, r1
 800ee42:	b2d2      	uxtb	r2, r2
 800ee44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f040 809c 	bne.w	800efa8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee78:	e853 3f00 	ldrex	r3, [r3]
 800ee7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ee7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee84:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ee8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee96:	e841 2300 	strex	r3, r2, [r1]
 800ee9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ee9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1e6      	bne.n	800ee70 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3308      	adds	r3, #8
 800eea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeac:	e853 3f00 	ldrex	r3, [r3]
 800eeb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb4:	f023 0301 	bic.w	r3, r3, #1
 800eeb8:	667b      	str	r3, [r7, #100]	@ 0x64
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	3308      	adds	r3, #8
 800eec0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eec2:	647a      	str	r2, [r7, #68]	@ 0x44
 800eec4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eeca:	e841 2300 	strex	r3, r2, [r1]
 800eece:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1e5      	bne.n	800eea2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d018      	beq.n	800ef2a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef00:	e853 3f00 	ldrex	r3, [r3]
 800ef04:	623b      	str	r3, [r7, #32]
   return(result);
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ef0c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	461a      	mov	r2, r3
 800ef14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef16:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef1e:	e841 2300 	strex	r3, r2, [r1]
 800ef22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1e6      	bne.n	800eef8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d12e      	bne.n	800ef90 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2200      	movs	r2, #0
 800ef36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	e853 3f00 	ldrex	r3, [r3]
 800ef44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f023 0310 	bic.w	r3, r3, #16
 800ef4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef56:	61fb      	str	r3, [r7, #28]
 800ef58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5a:	69b9      	ldr	r1, [r7, #24]
 800ef5c:	69fa      	ldr	r2, [r7, #28]
 800ef5e:	e841 2300 	strex	r3, r2, [r1]
 800ef62:	617b      	str	r3, [r7, #20]
   return(result);
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1e6      	bne.n	800ef38 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	f003 0310 	and.w	r3, r3, #16
 800ef74:	2b10      	cmp	r3, #16
 800ef76:	d103      	bne.n	800ef80 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2210      	movs	r2, #16
 800ef7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7ff fa01 	bl	800e390 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef8e:	e00b      	b.n	800efa8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7f3 fe49 	bl	8002c28 <HAL_UART_RxCpltCallback>
}
 800ef96:	e007      	b.n	800efa8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699a      	ldr	r2, [r3, #24]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f042 0208 	orr.w	r2, r2, #8
 800efa6:	619a      	str	r2, [r3, #24]
}
 800efa8:	bf00      	nop
 800efaa:	3770      	adds	r7, #112	@ 0x70
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b09c      	sub	sp, #112	@ 0x70
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800efbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efc8:	2b22      	cmp	r3, #34	@ 0x22
 800efca:	f040 80b9 	bne.w	800f140 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800efde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800efe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800efe6:	4013      	ands	r3, r2
 800efe8:	b29a      	uxth	r2, r3
 800efea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eff2:	1c9a      	adds	r2, r3, #2
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800effe:	b29b      	uxth	r3, r3
 800f000:	3b01      	subs	r3, #1
 800f002:	b29a      	uxth	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f010:	b29b      	uxth	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	f040 809c 	bne.w	800f150 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f020:	e853 3f00 	ldrex	r3, [r3]
 800f024:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f02c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f036:	657b      	str	r3, [r7, #84]	@ 0x54
 800f038:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f03c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e6      	bne.n	800f018 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f054:	e853 3f00 	ldrex	r3, [r3]
 800f058:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05c:	f023 0301 	bic.w	r3, r3, #1
 800f060:	663b      	str	r3, [r7, #96]	@ 0x60
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	3308      	adds	r3, #8
 800f068:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f06a:	643a      	str	r2, [r7, #64]	@ 0x40
 800f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f072:	e841 2300 	strex	r3, r2, [r1]
 800f076:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1e5      	bne.n	800f04a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2220      	movs	r2, #32
 800f082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2200      	movs	r2, #0
 800f08a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d018      	beq.n	800f0d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a6:	6a3b      	ldr	r3, [r7, #32]
 800f0a8:	e853 3f00 	ldrex	r3, [r3]
 800f0ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f0b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f0c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0c6:	e841 2300 	strex	r3, r2, [r1]
 800f0ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d1e6      	bne.n	800f0a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d12e      	bne.n	800f138 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	e853 3f00 	ldrex	r3, [r3]
 800f0ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	f023 0310 	bic.w	r3, r3, #16
 800f0f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0fe:	61bb      	str	r3, [r7, #24]
 800f100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f102:	6979      	ldr	r1, [r7, #20]
 800f104:	69ba      	ldr	r2, [r7, #24]
 800f106:	e841 2300 	strex	r3, r2, [r1]
 800f10a:	613b      	str	r3, [r7, #16]
   return(result);
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1e6      	bne.n	800f0e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	69db      	ldr	r3, [r3, #28]
 800f118:	f003 0310 	and.w	r3, r3, #16
 800f11c:	2b10      	cmp	r3, #16
 800f11e:	d103      	bne.n	800f128 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2210      	movs	r2, #16
 800f126:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f12e:	4619      	mov	r1, r3
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7ff f92d 	bl	800e390 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f136:	e00b      	b.n	800f150 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7f3 fd75 	bl	8002c28 <HAL_UART_RxCpltCallback>
}
 800f13e:	e007      	b.n	800f150 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	699a      	ldr	r2, [r3, #24]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f042 0208 	orr.w	r2, r2, #8
 800f14e:	619a      	str	r2, [r3, #24]
}
 800f150:	bf00      	nop
 800f152:	3770      	adds	r7, #112	@ 0x70
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d121      	bne.n	800f1ae <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	4b27      	ldr	r3, [pc, #156]	@ (800f20c <FMC_SDRAM_Init+0xb4>)
 800f170:	4013      	ands	r3, r2
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	6851      	ldr	r1, [r2, #4]
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	6892      	ldr	r2, [r2, #8]
 800f17a:	4311      	orrs	r1, r2
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	68d2      	ldr	r2, [r2, #12]
 800f180:	4311      	orrs	r1, r2
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	6912      	ldr	r2, [r2, #16]
 800f186:	4311      	orrs	r1, r2
 800f188:	683a      	ldr	r2, [r7, #0]
 800f18a:	6952      	ldr	r2, [r2, #20]
 800f18c:	4311      	orrs	r1, r2
 800f18e:	683a      	ldr	r2, [r7, #0]
 800f190:	6992      	ldr	r2, [r2, #24]
 800f192:	4311      	orrs	r1, r2
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	69d2      	ldr	r2, [r2, #28]
 800f198:	4311      	orrs	r1, r2
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	6a12      	ldr	r2, [r2, #32]
 800f19e:	4311      	orrs	r1, r2
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f1a4:	430a      	orrs	r2, r1
 800f1a6:	431a      	orrs	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	601a      	str	r2, [r3, #0]
 800f1ac:	e026      	b.n	800f1fc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	69d9      	ldr	r1, [r3, #28]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	4319      	orrs	r1, r3
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c4:	430b      	orrs	r3, r1
 800f1c6:	431a      	orrs	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685a      	ldr	r2, [r3, #4]
 800f1d0:	4b0e      	ldr	r3, [pc, #56]	@ (800f20c <FMC_SDRAM_Init+0xb4>)
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	6851      	ldr	r1, [r2, #4]
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	6892      	ldr	r2, [r2, #8]
 800f1dc:	4311      	orrs	r1, r2
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	68d2      	ldr	r2, [r2, #12]
 800f1e2:	4311      	orrs	r1, r2
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	6912      	ldr	r2, [r2, #16]
 800f1e8:	4311      	orrs	r1, r2
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	6952      	ldr	r2, [r2, #20]
 800f1ee:	4311      	orrs	r1, r2
 800f1f0:	683a      	ldr	r2, [r7, #0]
 800f1f2:	6992      	ldr	r2, [r2, #24]
 800f1f4:	430a      	orrs	r2, r1
 800f1f6:	431a      	orrs	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	ffff8000 	.word	0xffff8000

0800f210 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d128      	bne.n	800f274 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	1e59      	subs	r1, r3, #1
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	3b01      	subs	r3, #1
 800f236:	011b      	lsls	r3, r3, #4
 800f238:	4319      	orrs	r1, r3
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	3b01      	subs	r3, #1
 800f240:	021b      	lsls	r3, r3, #8
 800f242:	4319      	orrs	r1, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	3b01      	subs	r3, #1
 800f24a:	031b      	lsls	r3, r3, #12
 800f24c:	4319      	orrs	r1, r3
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	3b01      	subs	r3, #1
 800f254:	041b      	lsls	r3, r3, #16
 800f256:	4319      	orrs	r1, r3
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	695b      	ldr	r3, [r3, #20]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	051b      	lsls	r3, r3, #20
 800f260:	4319      	orrs	r1, r3
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	699b      	ldr	r3, [r3, #24]
 800f266:	3b01      	subs	r3, #1
 800f268:	061b      	lsls	r3, r3, #24
 800f26a:	430b      	orrs	r3, r1
 800f26c:	431a      	orrs	r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	609a      	str	r2, [r3, #8]
 800f272:	e02d      	b.n	800f2d0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	689a      	ldr	r2, [r3, #8]
 800f278:	4b19      	ldr	r3, [pc, #100]	@ (800f2e0 <FMC_SDRAM_Timing_Init+0xd0>)
 800f27a:	4013      	ands	r3, r2
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	68d2      	ldr	r2, [r2, #12]
 800f280:	3a01      	subs	r2, #1
 800f282:	0311      	lsls	r1, r2, #12
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	6952      	ldr	r2, [r2, #20]
 800f288:	3a01      	subs	r2, #1
 800f28a:	0512      	lsls	r2, r2, #20
 800f28c:	430a      	orrs	r2, r1
 800f28e:	431a      	orrs	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	1e59      	subs	r1, r3, #1
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	011b      	lsls	r3, r3, #4
 800f2aa:	4319      	orrs	r1, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	689b      	ldr	r3, [r3, #8]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	021b      	lsls	r3, r3, #8
 800f2b4:	4319      	orrs	r1, r3
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	041b      	lsls	r3, r3, #16
 800f2be:	4319      	orrs	r1, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	699b      	ldr	r3, [r3, #24]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	061b      	lsls	r3, r3, #24
 800f2c8:	430b      	orrs	r3, r1
 800f2ca:	431a      	orrs	r2, r3
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	ff0f0fff 	.word	0xff0f0fff

0800f2e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f2e4:	b084      	sub	sp, #16
 800f2e6:	b480      	push	{r7}
 800f2e8:	b085      	sub	sp, #20
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	f107 001c 	add.w	r0, r7, #28
 800f2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f2fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f2fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f302:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f306:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f30a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f30e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	4313      	orrs	r3, r2
 800f314:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685a      	ldr	r2, [r3, #4]
 800f31a:	4b07      	ldr	r3, [pc, #28]	@ (800f338 <SDMMC_Init+0x54>)
 800f31c:	4013      	ands	r3, r2
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	431a      	orrs	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3714      	adds	r7, #20
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	b004      	add	sp, #16
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	ffff8100 	.word	0xffff8100

0800f33c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	370c      	adds	r7, #12
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr

0800f356 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f356:	b480      	push	{r7}
 800f358:	b083      	sub	sp, #12
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2203      	movs	r2, #3
 800f362:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f372:	b480      	push	{r7}
 800f374:	b083      	sub	sp, #12
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f003 0303 	and.w	r3, r3, #3
}
 800f382:	4618      	mov	r0, r3
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
	...

0800f390 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f3b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f3ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68da      	ldr	r2, [r3, #12]
 800f3c6:	4b06      	ldr	r3, [pc, #24]	@ (800f3e0 <SDMMC_SendCommand+0x50>)
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	431a      	orrs	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	fffff000 	.word	0xfffff000

0800f3e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	691b      	ldr	r3, [r3, #16]
 800f3f0:	b2db      	uxtb	r3, r3
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	370c      	adds	r7, #12
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr

0800f3fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f3fe:	b480      	push	{r7}
 800f400:	b085      	sub	sp, #20
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	3314      	adds	r3, #20
 800f40c:	461a      	mov	r2, r3
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	4413      	add	r3, r2
 800f412:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
}  
 800f418:	4618      	mov	r0, r3
 800f41a:	3714      	adds	r7, #20
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f44a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f450:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f456:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f462:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	431a      	orrs	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f46e:	2300      	movs	r3, #0

}
 800f470:	4618      	mov	r0, r3
 800f472:	3714      	adds	r7, #20
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f48a:	2310      	movs	r3, #16
 800f48c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f48e:	2340      	movs	r3, #64	@ 0x40
 800f490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f492:	2300      	movs	r3, #0
 800f494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f49a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f49c:	f107 0308 	add.w	r3, r7, #8
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7ff ff74 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f4a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ac:	2110      	movs	r1, #16
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fa1a 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4b6:	69fb      	ldr	r3, [r7, #28]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3720      	adds	r7, #32
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b088      	sub	sp, #32
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f4ce:	2311      	movs	r3, #17
 800f4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4d2:	2340      	movs	r3, #64	@ 0x40
 800f4d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4e0:	f107 0308 	add.w	r3, r7, #8
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff ff52 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f4ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4f0:	2111      	movs	r1, #17
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f9f8 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4fa:	69fb      	ldr	r3, [r7, #28]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3720      	adds	r7, #32
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f512:	2312      	movs	r3, #18
 800f514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f516:	2340      	movs	r3, #64	@ 0x40
 800f518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f51a:	2300      	movs	r3, #0
 800f51c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f51e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f524:	f107 0308 	add.w	r3, r7, #8
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff ff30 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f530:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f534:	2112      	movs	r1, #18
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f9d6 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f53e:	69fb      	ldr	r3, [r7, #28]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3720      	adds	r7, #32
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b088      	sub	sp, #32
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f556:	2318      	movs	r3, #24
 800f558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f55a:	2340      	movs	r3, #64	@ 0x40
 800f55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f55e:	2300      	movs	r3, #0
 800f560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f568:	f107 0308 	add.w	r3, r7, #8
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f7ff ff0e 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f574:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f578:	2118      	movs	r1, #24
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 f9b4 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f582:	69fb      	ldr	r3, [r7, #28]
}
 800f584:	4618      	mov	r0, r3
 800f586:	3720      	adds	r7, #32
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b088      	sub	sp, #32
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f59a:	2319      	movs	r3, #25
 800f59c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f59e:	2340      	movs	r3, #64	@ 0x40
 800f5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5ac:	f107 0308 	add.w	r3, r7, #8
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7ff feec 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f5b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5bc:	2119      	movs	r1, #25
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f992 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f5c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5c6:	69fb      	ldr	r3, [r7, #28]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3720      	adds	r7, #32
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f5dc:	230c      	movs	r3, #12
 800f5de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5e0:	2340      	movs	r3, #64	@ 0x40
 800f5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5ee:	f107 0308 	add.w	r3, r7, #8
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff fecb 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f5fa:	4a05      	ldr	r2, [pc, #20]	@ (800f610 <SDMMC_CmdStopTransfer+0x40>)
 800f5fc:	210c      	movs	r1, #12
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 f972 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f606:	69fb      	ldr	r3, [r7, #28]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3720      	adds	r7, #32
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	05f5e100 	.word	0x05f5e100

0800f614 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b08a      	sub	sp, #40	@ 0x28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f624:	2307      	movs	r3, #7
 800f626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f628:	2340      	movs	r3, #64	@ 0x40
 800f62a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f62c:	2300      	movs	r3, #0
 800f62e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f634:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f636:	f107 0310 	add.w	r3, r7, #16
 800f63a:	4619      	mov	r1, r3
 800f63c:	68f8      	ldr	r0, [r7, #12]
 800f63e:	f7ff fea7 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f642:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f646:	2107      	movs	r1, #7
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 f94d 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f64e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800f650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f652:	4618      	mov	r0, r3
 800f654:	3728      	adds	r7, #40	@ 0x28
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f65a:	b580      	push	{r7, lr}
 800f65c:	b088      	sub	sp, #32
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f666:	2300      	movs	r3, #0
 800f668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f66a:	2300      	movs	r3, #0
 800f66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f66e:	2300      	movs	r3, #0
 800f670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f678:	f107 0308 	add.w	r3, r7, #8
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7ff fe86 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 fb67 	bl	800fd58 <SDMMC_GetCmdError>
 800f68a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f68c:	69fb      	ldr	r3, [r7, #28]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3720      	adds	r7, #32
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f696:	b580      	push	{r7, lr}
 800f698:	b088      	sub	sp, #32
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f69e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f6a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f6a4:	2308      	movs	r3, #8
 800f6a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6a8:	2340      	movs	r3, #64	@ 0x40
 800f6aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6b6:	f107 0308 	add.w	r3, r7, #8
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7ff fe67 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fafa 	bl	800fcbc <SDMMC_GetCmdResp7>
 800f6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6ca:	69fb      	ldr	r3, [r7, #28]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3720      	adds	r7, #32
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b088      	sub	sp, #32
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f6e2:	2337      	movs	r3, #55	@ 0x37
 800f6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6e6:	2340      	movs	r3, #64	@ 0x40
 800f6e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6f4:	f107 0308 	add.w	r3, r7, #8
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7ff fe48 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f700:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f704:	2137      	movs	r1, #55	@ 0x37
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 f8ee 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f70c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f70e:	69fb      	ldr	r3, [r7, #28]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3720      	adds	r7, #32
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b088      	sub	sp, #32
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	4b0d      	ldr	r3, [pc, #52]	@ (800f75c <SDMMC_CmdAppOperCommand+0x44>)
 800f726:	4313      	orrs	r3, r2
 800f728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f72a:	2329      	movs	r3, #41	@ 0x29
 800f72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f72e:	2340      	movs	r3, #64	@ 0x40
 800f730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f732:	2300      	movs	r3, #0
 800f734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f73c:	f107 0308 	add.w	r3, r7, #8
 800f740:	4619      	mov	r1, r3
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f7ff fe24 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 fa03 	bl	800fb54 <SDMMC_GetCmdResp3>
 800f74e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f750:	69fb      	ldr	r3, [r7, #28]
}
 800f752:	4618      	mov	r0, r3
 800f754:	3720      	adds	r7, #32
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	80100000 	.word	0x80100000

0800f760 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b088      	sub	sp, #32
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f76e:	2306      	movs	r3, #6
 800f770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f772:	2340      	movs	r3, #64	@ 0x40
 800f774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f776:	2300      	movs	r3, #0
 800f778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f77a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f77e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f780:	f107 0308 	add.w	r3, r7, #8
 800f784:	4619      	mov	r1, r3
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff fe02 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f78c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f790:	2106      	movs	r1, #6
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 f8a8 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f79a:	69fb      	ldr	r3, [r7, #28]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3720      	adds	r7, #32
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f7b0:	2333      	movs	r3, #51	@ 0x33
 800f7b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f7b4:	2340      	movs	r3, #64	@ 0x40
 800f7b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7c2:	f107 0308 	add.w	r3, r7, #8
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff fde1 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f7ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f7d2:	2133      	movs	r1, #51	@ 0x33
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 f887 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f7da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7dc:	69fb      	ldr	r3, [r7, #28]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3720      	adds	r7, #32
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b088      	sub	sp, #32
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f7f2:	2302      	movs	r3, #2
 800f7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f7f6:	23c0      	movs	r3, #192	@ 0xc0
 800f7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f804:	f107 0308 	add.w	r3, r7, #8
 800f808:	4619      	mov	r1, r3
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7ff fdc0 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f957 	bl	800fac4 <SDMMC_GetCmdResp2>
 800f816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f818:	69fb      	ldr	r3, [r7, #28]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3720      	adds	r7, #32
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b088      	sub	sp, #32
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f830:	2309      	movs	r3, #9
 800f832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f834:	23c0      	movs	r3, #192	@ 0xc0
 800f836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f838:	2300      	movs	r3, #0
 800f83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f83c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f840:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f842:	f107 0308 	add.w	r3, r7, #8
 800f846:	4619      	mov	r1, r3
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff fda1 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f938 	bl	800fac4 <SDMMC_GetCmdResp2>
 800f854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f856:	69fb      	ldr	r3, [r7, #28]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3720      	adds	r7, #32
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b088      	sub	sp, #32
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f86e:	2303      	movs	r3, #3
 800f870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f872:	2340      	movs	r3, #64	@ 0x40
 800f874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f87a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f87e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f880:	f107 0308 	add.w	r3, r7, #8
 800f884:	4619      	mov	r1, r3
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff fd82 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	2103      	movs	r1, #3
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f99d 	bl	800fbd0 <SDMMC_GetCmdResp6>
 800f896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f898:	69fb      	ldr	r3, [r7, #28]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3720      	adds	r7, #32
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b088      	sub	sp, #32
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f8b0:	230d      	movs	r3, #13
 800f8b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f8b4:	2340      	movs	r3, #64	@ 0x40
 800f8b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f8bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f8c2:	f107 0308 	add.w	r3, r7, #8
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff fd61 	bl	800f390 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f8ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8d2:	210d      	movs	r1, #13
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f807 	bl	800f8e8 <SDMMC_GetCmdResp1>
 800f8da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8dc:	69fb      	ldr	r3, [r7, #28]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3720      	adds	r7, #32
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f8f6:	4b70      	ldr	r3, [pc, #448]	@ (800fab8 <SDMMC_GetCmdResp1+0x1d0>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	4a70      	ldr	r2, [pc, #448]	@ (800fabc <SDMMC_GetCmdResp1+0x1d4>)
 800f8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f900:	0a5a      	lsrs	r2, r3, #9
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	fb02 f303 	mul.w	r3, r2, r3
 800f908:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	1e5a      	subs	r2, r3, #1
 800f90e:	61fa      	str	r2, [r7, #28]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d102      	bne.n	800f91a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f914:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f918:	e0c9      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f91e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f926:	2b00      	cmp	r3, #0
 800f928:	d0ef      	beq.n	800f90a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1ea      	bne.n	800f90a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f938:	f003 0304 	and.w	r3, r3, #4
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d004      	beq.n	800f94a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2204      	movs	r2, #4
 800f944:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f946:	2304      	movs	r3, #4
 800f948:	e0b1      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f94e:	f003 0301 	and.w	r3, r3, #1
 800f952:	2b00      	cmp	r3, #0
 800f954:	d004      	beq.n	800f960 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2201      	movs	r2, #1
 800f95a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f95c:	2301      	movs	r3, #1
 800f95e:	e0a6      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	22c5      	movs	r2, #197	@ 0xc5
 800f964:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f7ff fd3c 	bl	800f3e4 <SDMMC_GetCommandResponse>
 800f96c:	4603      	mov	r3, r0
 800f96e:	461a      	mov	r2, r3
 800f970:	7afb      	ldrb	r3, [r7, #11]
 800f972:	4293      	cmp	r3, r2
 800f974:	d001      	beq.n	800f97a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f976:	2301      	movs	r3, #1
 800f978:	e099      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f97a:	2100      	movs	r1, #0
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7ff fd3e 	bl	800f3fe <SDMMC_GetResponse>
 800f982:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f984:	697a      	ldr	r2, [r7, #20]
 800f986:	4b4e      	ldr	r3, [pc, #312]	@ (800fac0 <SDMMC_GetCmdResp1+0x1d8>)
 800f988:	4013      	ands	r3, r2
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d101      	bne.n	800f992 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f98e:	2300      	movs	r3, #0
 800f990:	e08d      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2b00      	cmp	r3, #0
 800f996:	da02      	bge.n	800f99e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f998:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f99c:	e087      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d001      	beq.n	800f9ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f9a8:	2340      	movs	r3, #64	@ 0x40
 800f9aa:	e080      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d001      	beq.n	800f9ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f9b6:	2380      	movs	r3, #128	@ 0x80
 800f9b8:	e079      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f9c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f9c8:	e071      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d002      	beq.n	800f9da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f9d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9d8:	e069      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f9e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9e8:	e061      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d002      	beq.n	800f9fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f9f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f9f8:	e059      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fa04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa08:	e051      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fa18:	e049      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fa24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fa28:	e041      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d002      	beq.n	800fa3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fa34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa38:	e039      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fa44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800fa48:	e031      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d002      	beq.n	800fa5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fa54:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800fa58:	e029      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fa64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa68:	e021      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fa74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fa78:	e019      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fa84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fa88:	e011      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fa94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fa98:	e009      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f003 0308 	and.w	r3, r3, #8
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d002      	beq.n	800faaa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800faa4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800faa8:	e001      	b.n	800faae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800faaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3720      	adds	r7, #32
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	20000004 	.word	0x20000004
 800fabc:	10624dd3 	.word	0x10624dd3
 800fac0:	fdffe008 	.word	0xfdffe008

0800fac4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800facc:	4b1f      	ldr	r3, [pc, #124]	@ (800fb4c <SDMMC_GetCmdResp2+0x88>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a1f      	ldr	r2, [pc, #124]	@ (800fb50 <SDMMC_GetCmdResp2+0x8c>)
 800fad2:	fba2 2303 	umull	r2, r3, r2, r3
 800fad6:	0a5b      	lsrs	r3, r3, #9
 800fad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fadc:	fb02 f303 	mul.w	r3, r2, r3
 800fae0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	1e5a      	subs	r2, r3, #1
 800fae6:	60fa      	str	r2, [r7, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d102      	bne.n	800faf2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800faec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800faf0:	e026      	b.n	800fb40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faf6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d0ef      	beq.n	800fae2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1ea      	bne.n	800fae2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb10:	f003 0304 	and.w	r3, r3, #4
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d004      	beq.n	800fb22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2204      	movs	r2, #4
 800fb1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb1e:	2304      	movs	r3, #4
 800fb20:	e00e      	b.n	800fb40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d004      	beq.n	800fb38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e003      	b.n	800fb40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	22c5      	movs	r2, #197	@ 0xc5
 800fb3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3714      	adds	r7, #20
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr
 800fb4c:	20000004 	.word	0x20000004
 800fb50:	10624dd3 	.word	0x10624dd3

0800fb54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb5c:	4b1a      	ldr	r3, [pc, #104]	@ (800fbc8 <SDMMC_GetCmdResp3+0x74>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a1a      	ldr	r2, [pc, #104]	@ (800fbcc <SDMMC_GetCmdResp3+0x78>)
 800fb62:	fba2 2303 	umull	r2, r3, r2, r3
 800fb66:	0a5b      	lsrs	r3, r3, #9
 800fb68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb6c:	fb02 f303 	mul.w	r3, r2, r3
 800fb70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	1e5a      	subs	r2, r3, #1
 800fb76:	60fa      	str	r2, [r7, #12]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d102      	bne.n	800fb82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fb80:	e01b      	b.n	800fbba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d0ef      	beq.n	800fb72 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1ea      	bne.n	800fb72 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fba0:	f003 0304 	and.w	r3, r3, #4
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d004      	beq.n	800fbb2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2204      	movs	r2, #4
 800fbac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fbae:	2304      	movs	r3, #4
 800fbb0:	e003      	b.n	800fbba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	22c5      	movs	r2, #197	@ 0xc5
 800fbb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fbb8:	2300      	movs	r3, #0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	20000004 	.word	0x20000004
 800fbcc:	10624dd3 	.word	0x10624dd3

0800fbd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b088      	sub	sp, #32
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	460b      	mov	r3, r1
 800fbda:	607a      	str	r2, [r7, #4]
 800fbdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fbde:	4b35      	ldr	r3, [pc, #212]	@ (800fcb4 <SDMMC_GetCmdResp6+0xe4>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a35      	ldr	r2, [pc, #212]	@ (800fcb8 <SDMMC_GetCmdResp6+0xe8>)
 800fbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe8:	0a5b      	lsrs	r3, r3, #9
 800fbea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbee:	fb02 f303 	mul.w	r3, r2, r3
 800fbf2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	1e5a      	subs	r2, r3, #1
 800fbf8:	61fa      	str	r2, [r7, #28]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d102      	bne.n	800fc04 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbfe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fc02:	e052      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc08:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d0ef      	beq.n	800fbf4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1ea      	bne.n	800fbf4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc22:	f003 0304 	and.w	r3, r3, #4
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d004      	beq.n	800fc34 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc30:	2304      	movs	r3, #4
 800fc32:	e03a      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc38:	f003 0301 	and.w	r3, r3, #1
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d004      	beq.n	800fc4a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2201      	movs	r2, #1
 800fc44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc46:	2301      	movs	r3, #1
 800fc48:	e02f      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7ff fbca 	bl	800f3e4 <SDMMC_GetCommandResponse>
 800fc50:	4603      	mov	r3, r0
 800fc52:	461a      	mov	r2, r3
 800fc54:	7afb      	ldrb	r3, [r7, #11]
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d001      	beq.n	800fc5e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e025      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	22c5      	movs	r2, #197	@ 0xc5
 800fc62:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fc64:	2100      	movs	r1, #0
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	f7ff fbc9 	bl	800f3fe <SDMMC_GetResponse>
 800fc6c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d106      	bne.n	800fc86 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	0c1b      	lsrs	r3, r3, #16
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fc82:	2300      	movs	r3, #0
 800fc84:	e011      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fc90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fc94:	e009      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fca4:	e001      	b.n	800fcaa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fca6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3720      	adds	r7, #32
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20000004 	.word	0x20000004
 800fcb8:	10624dd3 	.word	0x10624dd3

0800fcbc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fcc4:	4b22      	ldr	r3, [pc, #136]	@ (800fd50 <SDMMC_GetCmdResp7+0x94>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4a22      	ldr	r2, [pc, #136]	@ (800fd54 <SDMMC_GetCmdResp7+0x98>)
 800fcca:	fba2 2303 	umull	r2, r3, r2, r3
 800fcce:	0a5b      	lsrs	r3, r3, #9
 800fcd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcd4:	fb02 f303 	mul.w	r3, r2, r3
 800fcd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	1e5a      	subs	r2, r3, #1
 800fcde:	60fa      	str	r2, [r7, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d102      	bne.n	800fcea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fce4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fce8:	e02c      	b.n	800fd44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d0ef      	beq.n	800fcda <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d1ea      	bne.n	800fcda <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd08:	f003 0304 	and.w	r3, r3, #4
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2204      	movs	r2, #4
 800fd14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd16:	2304      	movs	r3, #4
 800fd18:	e014      	b.n	800fd44 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd1e:	f003 0301 	and.w	r3, r3, #1
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d004      	beq.n	800fd30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e009      	b.n	800fd44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d002      	beq.n	800fd42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2240      	movs	r2, #64	@ 0x40
 800fd40:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fd42:	2300      	movs	r3, #0
  
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	20000004 	.word	0x20000004
 800fd54:	10624dd3 	.word	0x10624dd3

0800fd58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd60:	4b11      	ldr	r3, [pc, #68]	@ (800fda8 <SDMMC_GetCmdError+0x50>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a11      	ldr	r2, [pc, #68]	@ (800fdac <SDMMC_GetCmdError+0x54>)
 800fd66:	fba2 2303 	umull	r2, r3, r2, r3
 800fd6a:	0a5b      	lsrs	r3, r3, #9
 800fd6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd70:	fb02 f303 	mul.w	r3, r2, r3
 800fd74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	1e5a      	subs	r2, r3, #1
 800fd7a:	60fa      	str	r2, [r7, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fd84:	e009      	b.n	800fd9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d0f1      	beq.n	800fd76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	22c5      	movs	r2, #197	@ 0xc5
 800fd96:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3714      	adds	r7, #20
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	20000004 	.word	0x20000004
 800fdac:	10624dd3 	.word	0x10624dd3

0800fdb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fdb4:	4904      	ldr	r1, [pc, #16]	@ (800fdc8 <MX_FATFS_Init+0x18>)
 800fdb6:	4805      	ldr	r0, [pc, #20]	@ (800fdcc <MX_FATFS_Init+0x1c>)
 800fdb8:	f000 fa96 	bl	80102e8 <FATFS_LinkDriver>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	4b03      	ldr	r3, [pc, #12]	@ (800fdd0 <MX_FATFS_Init+0x20>)
 800fdc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fdc4:	bf00      	nop
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	20006288 	.word	0x20006288
 800fdcc:	08017aac 	.word	0x08017aac
 800fdd0:	20006284 	.word	0x20006284

0800fdd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fdda:	2300      	movs	r3, #0
 800fddc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fdde:	f000 f87b 	bl	800fed8 <BSP_SD_IsDetected>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d001      	beq.n	800fdec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fde8:	2302      	movs	r3, #2
 800fdea:	e012      	b.n	800fe12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fdec:	480b      	ldr	r0, [pc, #44]	@ (800fe1c <BSP_SD_Init+0x48>)
 800fdee:	f7fa fd03 	bl	800a7f8 <HAL_SD_Init>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fdf6:	79fb      	ldrb	r3, [r7, #7]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d109      	bne.n	800fe10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fdfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800fe00:	4806      	ldr	r0, [pc, #24]	@ (800fe1c <BSP_SD_Init+0x48>)
 800fe02:	f7fb f94b 	bl	800b09c <HAL_SD_ConfigWideBusOperation>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d001      	beq.n	800fe10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fe10:	79fb      	ldrb	r3, [r7, #7]
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	20005e24 	.word	0x20005e24

0800fe20 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	68f9      	ldr	r1, [r7, #12]
 800fe36:	4806      	ldr	r0, [pc, #24]	@ (800fe50 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fe38:	f7fa fd8e 	bl	800a958 <HAL_SD_ReadBlocks_DMA>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fe42:	2301      	movs	r3, #1
 800fe44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3718      	adds	r7, #24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	20005e24 	.word	0x20005e24

0800fe54 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	68f9      	ldr	r1, [r7, #12]
 800fe6a:	4806      	ldr	r0, [pc, #24]	@ (800fe84 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fe6c:	f7fa fe56 	bl	800ab1c <HAL_SD_WriteBlocks_DMA>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d001      	beq.n	800fe7a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3718      	adds	r7, #24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20005e24 	.word	0x20005e24

0800fe88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fe8c:	4805      	ldr	r0, [pc, #20]	@ (800fea4 <BSP_SD_GetCardState+0x1c>)
 800fe8e:	f7fb f99f 	bl	800b1d0 <HAL_SD_GetCardState>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b04      	cmp	r3, #4
 800fe96:	bf14      	ite	ne
 800fe98:	2301      	movne	r3, #1
 800fe9a:	2300      	moveq	r3, #0
 800fe9c:	b2db      	uxtb	r3, r3
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	20005e24 	.word	0x20005e24

0800fea8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800feb0:	6879      	ldr	r1, [r7, #4]
 800feb2:	4803      	ldr	r0, [pc, #12]	@ (800fec0 <BSP_SD_GetCardInfo+0x18>)
 800feb4:	f7fb f8c6 	bl	800b044 <HAL_SD_GetCardInfo>
}
 800feb8:	bf00      	nop
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20005e24 	.word	0x20005e24

0800fec4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fecc:	f000 f9b2 	bl	8010234 <BSP_SD_ReadCpltCallback>
}
 800fed0:	bf00      	nop
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fede:	2301      	movs	r3, #1
 800fee0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fee2:	f000 f80b 	bl	800fefc <BSP_PlatformIsDetected>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d101      	bne.n	800fef0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800feec:	2300      	movs	r3, #0
 800feee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	b2db      	uxtb	r3, r3
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ff02:	2301      	movs	r3, #1
 800ff04:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ff06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ff0a:	4806      	ldr	r0, [pc, #24]	@ (800ff24 <BSP_PlatformIsDetected+0x28>)
 800ff0c:	f7f7 fa76 	bl	80073fc <HAL_GPIO_ReadPin>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ff16:	2300      	movs	r3, #0
 800ff18:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ff1a:	79fb      	ldrb	r3, [r7, #7]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	40020800 	.word	0x40020800

0800ff28 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ff30:	f000 fa26 	bl	8010380 <osKernelSysTick>
 800ff34:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ff36:	e006      	b.n	800ff46 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff38:	f7ff ffa6 	bl	800fe88 <BSP_SD_GetCardState>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d101      	bne.n	800ff46 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	e009      	b.n	800ff5a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ff46:	f000 fa1b 	bl	8010380 <osKernelSysTick>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d8f0      	bhi.n	800ff38 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ff56:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3710      	adds	r7, #16
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
	...

0800ff64 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ff6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ff9c <SD_CheckStatus+0x38>)
 800ff70:	2201      	movs	r2, #1
 800ff72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff74:	f7ff ff88 	bl	800fe88 <BSP_SD_GetCardState>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d107      	bne.n	800ff8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ff7e:	4b07      	ldr	r3, [pc, #28]	@ (800ff9c <SD_CheckStatus+0x38>)
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f023 0301 	bic.w	r3, r3, #1
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	4b04      	ldr	r3, [pc, #16]	@ (800ff9c <SD_CheckStatus+0x38>)
 800ff8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ff8e:	4b03      	ldr	r3, [pc, #12]	@ (800ff9c <SD_CheckStatus+0x38>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	b2db      	uxtb	r3, r3
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	2000000d 	.word	0x2000000d

0800ffa0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ffa0:	b590      	push	{r4, r7, lr}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ffaa:	4b20      	ldr	r3, [pc, #128]	@ (801002c <SD_initialize+0x8c>)
 800ffac:	2201      	movs	r2, #1
 800ffae:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ffb0:	f000 f9da 	bl	8010368 <osKernelRunning>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d030      	beq.n	801001c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ffba:	f7ff ff0b 	bl	800fdd4 <BSP_SD_Init>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d107      	bne.n	800ffd4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ffc4:	79fb      	ldrb	r3, [r7, #7]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff ffcc 	bl	800ff64 <SD_CheckStatus>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	461a      	mov	r2, r3
 800ffd0:	4b16      	ldr	r3, [pc, #88]	@ (801002c <SD_initialize+0x8c>)
 800ffd2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ffd4:	4b15      	ldr	r3, [pc, #84]	@ (801002c <SD_initialize+0x8c>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d01e      	beq.n	801001c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ffde:	4b14      	ldr	r3, [pc, #80]	@ (8010030 <SD_initialize+0x90>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10e      	bne.n	8010004 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ffe6:	4b13      	ldr	r3, [pc, #76]	@ (8010034 <SD_initialize+0x94>)
 800ffe8:	f107 0408 	add.w	r4, r7, #8
 800ffec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800fff2:	f107 0308 	add.w	r3, r7, #8
 800fff6:	2100      	movs	r1, #0
 800fff8:	4618      	mov	r0, r3
 800fffa:	f000 fa49 	bl	8010490 <osMessageCreate>
 800fffe:	4603      	mov	r3, r0
 8010000:	4a0b      	ldr	r2, [pc, #44]	@ (8010030 <SD_initialize+0x90>)
 8010002:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8010004:	4b0a      	ldr	r3, [pc, #40]	@ (8010030 <SD_initialize+0x90>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d107      	bne.n	801001c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 801000c:	4b07      	ldr	r3, [pc, #28]	@ (801002c <SD_initialize+0x8c>)
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	b2db      	uxtb	r3, r3
 8010012:	f043 0301 	orr.w	r3, r3, #1
 8010016:	b2da      	uxtb	r2, r3
 8010018:	4b04      	ldr	r3, [pc, #16]	@ (801002c <SD_initialize+0x8c>)
 801001a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801001c:	4b03      	ldr	r3, [pc, #12]	@ (801002c <SD_initialize+0x8c>)
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	b2db      	uxtb	r3, r3
}
 8010022:	4618      	mov	r0, r3
 8010024:	371c      	adds	r7, #28
 8010026:	46bd      	mov	sp, r7
 8010028:	bd90      	pop	{r4, r7, pc}
 801002a:	bf00      	nop
 801002c:	2000000d 	.word	0x2000000d
 8010030:	2000628c 	.word	0x2000628c
 8010034:	08017a7c 	.word	0x08017a7c

08010038 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	4603      	mov	r3, r0
 8010040:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010042:	79fb      	ldrb	r3, [r7, #7]
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff ff8d 	bl	800ff64 <SD_CheckStatus>
 801004a:	4603      	mov	r3, r0
}
 801004c:	4618      	mov	r0, r3
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b08a      	sub	sp, #40	@ 0x28
 8010058:	af00      	add	r7, sp, #0
 801005a:	60b9      	str	r1, [r7, #8]
 801005c:	607a      	str	r2, [r7, #4]
 801005e:	603b      	str	r3, [r7, #0]
 8010060:	4603      	mov	r3, r0
 8010062:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801006a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801006e:	f7ff ff5b 	bl	800ff28 <SD_CheckStatusWithTimeout>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	da02      	bge.n	801007e <SD_read+0x2a>
  {
    return res;
 8010078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801007c:	e032      	b.n	80100e4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801007e:	683a      	ldr	r2, [r7, #0]
 8010080:	6879      	ldr	r1, [r7, #4]
 8010082:	68b8      	ldr	r0, [r7, #8]
 8010084:	f7ff fecc 	bl	800fe20 <BSP_SD_ReadBlocks_DMA>
 8010088:	4603      	mov	r3, r0
 801008a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801008e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010092:	2b00      	cmp	r3, #0
 8010094:	d124      	bne.n	80100e0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010096:	4b15      	ldr	r3, [pc, #84]	@ (80100ec <SD_read+0x98>)
 8010098:	6819      	ldr	r1, [r3, #0]
 801009a:	f107 0314 	add.w	r3, r7, #20
 801009e:	f247 5230 	movw	r2, #30000	@ 0x7530
 80100a2:	4618      	mov	r0, r3
 80100a4:	f000 fa5c 	bl	8010560 <osMessageGet>

    if (event.status == osEventMessage)
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	2b10      	cmp	r3, #16
 80100ac:	d118      	bne.n	80100e0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d115      	bne.n	80100e0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80100b4:	f000 f964 	bl	8010380 <osKernelSysTick>
 80100b8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80100ba:	e008      	b.n	80100ce <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80100bc:	f7ff fee4 	bl	800fe88 <BSP_SD_GetCardState>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d103      	bne.n	80100ce <SD_read+0x7a>
              {
                res = RES_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80100cc:	e008      	b.n	80100e0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80100ce:	f000 f957 	bl	8010380 <osKernelSysTick>
 80100d2:	4602      	mov	r2, r0
 80100d4:	6a3b      	ldr	r3, [r7, #32]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80100dc:	4293      	cmp	r3, r2
 80100de:	d9ed      	bls.n	80100bc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80100e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3728      	adds	r7, #40	@ 0x28
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	2000628c 	.word	0x2000628c

080100f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08a      	sub	sp, #40	@ 0x28
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60b9      	str	r1, [r7, #8]
 80100f8:	607a      	str	r2, [r7, #4]
 80100fa:	603b      	str	r3, [r7, #0]
 80100fc:	4603      	mov	r3, r0
 80100fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010100:	2301      	movs	r3, #1
 8010102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010106:	f247 5030 	movw	r0, #30000	@ 0x7530
 801010a:	f7ff ff0d 	bl	800ff28 <SD_CheckStatusWithTimeout>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	da02      	bge.n	801011a <SD_write+0x2a>
  {
    return res;
 8010114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010118:	e02e      	b.n	8010178 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	6879      	ldr	r1, [r7, #4]
 801011e:	68b8      	ldr	r0, [r7, #8]
 8010120:	f7ff fe98 	bl	800fe54 <BSP_SD_WriteBlocks_DMA>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d124      	bne.n	8010174 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801012a:	4b15      	ldr	r3, [pc, #84]	@ (8010180 <SD_write+0x90>)
 801012c:	6819      	ldr	r1, [r3, #0]
 801012e:	f107 0314 	add.w	r3, r7, #20
 8010132:	f247 5230 	movw	r2, #30000	@ 0x7530
 8010136:	4618      	mov	r0, r3
 8010138:	f000 fa12 	bl	8010560 <osMessageGet>

    if (event.status == osEventMessage)
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	2b10      	cmp	r3, #16
 8010140:	d118      	bne.n	8010174 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	2b02      	cmp	r3, #2
 8010146:	d115      	bne.n	8010174 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8010148:	f000 f91a 	bl	8010380 <osKernelSysTick>
 801014c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801014e:	e008      	b.n	8010162 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010150:	f7ff fe9a 	bl	800fe88 <BSP_SD_GetCardState>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d103      	bne.n	8010162 <SD_write+0x72>
          {
            res = RES_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010160:	e008      	b.n	8010174 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8010162:	f000 f90d 	bl	8010380 <osKernelSysTick>
 8010166:	4602      	mov	r2, r0
 8010168:	6a3b      	ldr	r3, [r7, #32]
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010170:	4293      	cmp	r3, r2
 8010172:	d9ed      	bls.n	8010150 <SD_write+0x60>
    }

  }
#endif

  return res;
 8010174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010178:	4618      	mov	r0, r3
 801017a:	3728      	adds	r7, #40	@ 0x28
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	2000628c 	.word	0x2000628c

08010184 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b08c      	sub	sp, #48	@ 0x30
 8010188:	af00      	add	r7, sp, #0
 801018a:	4603      	mov	r3, r0
 801018c:	603a      	str	r2, [r7, #0]
 801018e:	71fb      	strb	r3, [r7, #7]
 8010190:	460b      	mov	r3, r1
 8010192:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801019a:	4b25      	ldr	r3, [pc, #148]	@ (8010230 <SD_ioctl+0xac>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f003 0301 	and.w	r3, r3, #1
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d001      	beq.n	80101ac <SD_ioctl+0x28>
 80101a8:	2303      	movs	r3, #3
 80101aa:	e03c      	b.n	8010226 <SD_ioctl+0xa2>

  switch (cmd)
 80101ac:	79bb      	ldrb	r3, [r7, #6]
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	d834      	bhi.n	801021c <SD_ioctl+0x98>
 80101b2:	a201      	add	r2, pc, #4	@ (adr r2, 80101b8 <SD_ioctl+0x34>)
 80101b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b8:	080101c9 	.word	0x080101c9
 80101bc:	080101d1 	.word	0x080101d1
 80101c0:	080101e9 	.word	0x080101e9
 80101c4:	08010203 	.word	0x08010203
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101ce:	e028      	b.n	8010222 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80101d0:	f107 030c 	add.w	r3, r7, #12
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff fe67 	bl	800fea8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80101da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101e6:	e01c      	b.n	8010222 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80101e8:	f107 030c 	add.w	r3, r7, #12
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff fe5b 	bl	800fea8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80101f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80101fa:	2300      	movs	r3, #0
 80101fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010200:	e00f      	b.n	8010222 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010202:	f107 030c 	add.w	r3, r7, #12
 8010206:	4618      	mov	r0, r3
 8010208:	f7ff fe4e 	bl	800fea8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801020c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801020e:	0a5a      	lsrs	r2, r3, #9
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801021a:	e002      	b.n	8010222 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801021c:	2304      	movs	r3, #4
 801021e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010226:	4618      	mov	r0, r3
 8010228:	3730      	adds	r7, #48	@ 0x30
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	2000000d 	.word	0x2000000d

08010234 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8010238:	4b04      	ldr	r3, [pc, #16]	@ (801024c <BSP_SD_ReadCpltCallback+0x18>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2200      	movs	r2, #0
 801023e:	2101      	movs	r1, #1
 8010240:	4618      	mov	r0, r3
 8010242:	f000 f94d 	bl	80104e0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8010246:	bf00      	nop
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	2000628c 	.word	0x2000628c

08010250 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010250:	b480      	push	{r7}
 8010252:	b087      	sub	sp, #28
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	4613      	mov	r3, r2
 801025c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801025e:	2301      	movs	r3, #1
 8010260:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010266:	4b1f      	ldr	r3, [pc, #124]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 8010268:	7a5b      	ldrb	r3, [r3, #9]
 801026a:	b2db      	uxtb	r3, r3
 801026c:	2b00      	cmp	r3, #0
 801026e:	d131      	bne.n	80102d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010270:	4b1c      	ldr	r3, [pc, #112]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 8010272:	7a5b      	ldrb	r3, [r3, #9]
 8010274:	b2db      	uxtb	r3, r3
 8010276:	461a      	mov	r2, r3
 8010278:	4b1a      	ldr	r3, [pc, #104]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 801027a:	2100      	movs	r1, #0
 801027c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801027e:	4b19      	ldr	r3, [pc, #100]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 8010280:	7a5b      	ldrb	r3, [r3, #9]
 8010282:	b2db      	uxtb	r3, r3
 8010284:	4a17      	ldr	r2, [pc, #92]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	4413      	add	r3, r2
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801028e:	4b15      	ldr	r3, [pc, #84]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 8010290:	7a5b      	ldrb	r3, [r3, #9]
 8010292:	b2db      	uxtb	r3, r3
 8010294:	461a      	mov	r2, r3
 8010296:	4b13      	ldr	r3, [pc, #76]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 8010298:	4413      	add	r3, r2
 801029a:	79fa      	ldrb	r2, [r7, #7]
 801029c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801029e:	4b11      	ldr	r3, [pc, #68]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 80102a0:	7a5b      	ldrb	r3, [r3, #9]
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	b2d1      	uxtb	r1, r2
 80102a8:	4a0e      	ldr	r2, [pc, #56]	@ (80102e4 <FATFS_LinkDriverEx+0x94>)
 80102aa:	7251      	strb	r1, [r2, #9]
 80102ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80102ae:	7dbb      	ldrb	r3, [r7, #22]
 80102b0:	3330      	adds	r3, #48	@ 0x30
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	3301      	adds	r3, #1
 80102bc:	223a      	movs	r2, #58	@ 0x3a
 80102be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	3302      	adds	r3, #2
 80102c4:	222f      	movs	r2, #47	@ 0x2f
 80102c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	3303      	adds	r3, #3
 80102cc:	2200      	movs	r2, #0
 80102ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80102d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	371c      	adds	r7, #28
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	20006290 	.word	0x20006290

080102e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80102f2:	2200      	movs	r2, #0
 80102f4:	6839      	ldr	r1, [r7, #0]
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff ffaa 	bl	8010250 <FATFS_LinkDriverEx>
 80102fc:	4603      	mov	r3, r0
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}

08010306 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010306:	b480      	push	{r7}
 8010308:	b085      	sub	sp, #20
 801030a:	af00      	add	r7, sp, #0
 801030c:	4603      	mov	r3, r0
 801030e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010310:	2300      	movs	r3, #0
 8010312:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010318:	2b84      	cmp	r3, #132	@ 0x84
 801031a:	d005      	beq.n	8010328 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801031c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	4413      	add	r3, r2
 8010324:	3303      	adds	r3, #3
 8010326:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010328:	68fb      	ldr	r3, [r7, #12]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3714      	adds	r7, #20
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801033c:	f3ef 8305 	mrs	r3, IPSR
 8010340:	607b      	str	r3, [r7, #4]
  return(result);
 8010342:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010344:	2b00      	cmp	r3, #0
 8010346:	bf14      	ite	ne
 8010348:	2301      	movne	r3, #1
 801034a:	2300      	moveq	r3, #0
 801034c:	b2db      	uxtb	r3, r3
}
 801034e:	4618      	mov	r0, r3
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801035e:	f001 fbb9 	bl	8011ad4 <vTaskStartScheduler>
  
  return osOK;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	bd80      	pop	{r7, pc}

08010368 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801036c:	f002 f82e 	bl	80123cc <xTaskGetSchedulerState>
 8010370:	4603      	mov	r3, r0
 8010372:	2b01      	cmp	r3, #1
 8010374:	d101      	bne.n	801037a <osKernelRunning+0x12>
    return 0;
 8010376:	2300      	movs	r3, #0
 8010378:	e000      	b.n	801037c <osKernelRunning+0x14>
  else
    return 1;
 801037a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801037c:	4618      	mov	r0, r3
 801037e:	bd80      	pop	{r7, pc}

08010380 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010384:	f7ff ffd7 	bl	8010336 <inHandlerMode>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801038e:	f001 fccd 	bl	8011d2c <xTaskGetTickCountFromISR>
 8010392:	4603      	mov	r3, r0
 8010394:	e002      	b.n	801039c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010396:	f001 fcb9 	bl	8011d0c <xTaskGetTickCount>
 801039a:	4603      	mov	r3, r0
  }
}
 801039c:	4618      	mov	r0, r3
 801039e:	bd80      	pop	{r7, pc}

080103a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80103a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103a2:	b089      	sub	sp, #36	@ 0x24
 80103a4:	af04      	add	r7, sp, #16
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d020      	beq.n	80103f4 <osThreadCreate+0x54>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	699b      	ldr	r3, [r3, #24]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d01c      	beq.n	80103f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	685c      	ldr	r4, [r3, #4]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	691e      	ldr	r6, [r3, #16]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7ff ff9a 	bl	8010306 <makeFreeRtosPriority>
 80103d2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	695b      	ldr	r3, [r3, #20]
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103dc:	9202      	str	r2, [sp, #8]
 80103de:	9301      	str	r3, [sp, #4]
 80103e0:	9100      	str	r1, [sp, #0]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	4632      	mov	r2, r6
 80103e6:	4629      	mov	r1, r5
 80103e8:	4620      	mov	r0, r4
 80103ea:	f001 f979 	bl	80116e0 <xTaskCreateStatic>
 80103ee:	4603      	mov	r3, r0
 80103f0:	60fb      	str	r3, [r7, #12]
 80103f2:	e01c      	b.n	801042e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	685c      	ldr	r4, [r3, #4]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010400:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff ff7c 	bl	8010306 <makeFreeRtosPriority>
 801040e:	4602      	mov	r2, r0
 8010410:	f107 030c 	add.w	r3, r7, #12
 8010414:	9301      	str	r3, [sp, #4]
 8010416:	9200      	str	r2, [sp, #0]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	4632      	mov	r2, r6
 801041c:	4629      	mov	r1, r5
 801041e:	4620      	mov	r0, r4
 8010420:	f001 f9c4 	bl	80117ac <xTaskCreate>
 8010424:	4603      	mov	r3, r0
 8010426:	2b01      	cmp	r3, #1
 8010428:	d001      	beq.n	801042e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801042a:	2300      	movs	r3, #0
 801042c:	e000      	b.n	8010430 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801042e:	68fb      	ldr	r3, [r7, #12]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3714      	adds	r7, #20
 8010434:	46bd      	mov	sp, r7
 8010436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010438 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <osDelay+0x16>
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	e000      	b.n	8010450 <osDelay+0x18>
 801044e:	2301      	movs	r3, #1
 8010450:	4618      	mov	r0, r3
 8010452:	f001 fb07 	bl	8011a64 <vTaskDelay>
  
  return osOK;
 8010456:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010458:	4618      	mov	r0, r3
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d007      	beq.n	8010480 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	4619      	mov	r1, r3
 8010476:	2001      	movs	r0, #1
 8010478:	f000 fb21 	bl	8010abe <xQueueCreateMutexStatic>
 801047c:	4603      	mov	r3, r0
 801047e:	e003      	b.n	8010488 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010480:	2001      	movs	r0, #1
 8010482:	f000 fb04 	bl	8010a8e <xQueueCreateMutex>
 8010486:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8010488:	4618      	mov	r0, r3
 801048a:	3708      	adds	r7, #8
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010490:	b590      	push	{r4, r7, lr}
 8010492:	b085      	sub	sp, #20
 8010494:	af02      	add	r7, sp, #8
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d011      	beq.n	80104c6 <osMessageCreate+0x36>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d00d      	beq.n	80104c6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6818      	ldr	r0, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6859      	ldr	r1, [r3, #4]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	689a      	ldr	r2, [r3, #8]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	2400      	movs	r4, #0
 80104bc:	9400      	str	r4, [sp, #0]
 80104be:	f000 f9e3 	bl	8010888 <xQueueGenericCreateStatic>
 80104c2:	4603      	mov	r3, r0
 80104c4:	e008      	b.n	80104d8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6818      	ldr	r0, [r3, #0]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	4619      	mov	r1, r3
 80104d2:	f000 fa60 	bl	8010996 <xQueueGenericCreate>
 80104d6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80104d8:	4618      	mov	r0, r3
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd90      	pop	{r4, r7, pc}

080104e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80104ec:	2300      	movs	r3, #0
 80104ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <osMessagePut+0x1e>
    ticks = 1;
 80104fa:	2301      	movs	r3, #1
 80104fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80104fe:	f7ff ff1a 	bl	8010336 <inHandlerMode>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d018      	beq.n	801053a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010508:	f107 0210 	add.w	r2, r7, #16
 801050c:	f107 0108 	add.w	r1, r7, #8
 8010510:	2300      	movs	r3, #0
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f000 fbf8 	bl	8010d08 <xQueueGenericSendFromISR>
 8010518:	4603      	mov	r3, r0
 801051a:	2b01      	cmp	r3, #1
 801051c:	d001      	beq.n	8010522 <osMessagePut+0x42>
      return osErrorOS;
 801051e:	23ff      	movs	r3, #255	@ 0xff
 8010520:	e018      	b.n	8010554 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d014      	beq.n	8010552 <osMessagePut+0x72>
 8010528:	4b0c      	ldr	r3, [pc, #48]	@ (801055c <osMessagePut+0x7c>)
 801052a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801052e:	601a      	str	r2, [r3, #0]
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	e00b      	b.n	8010552 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801053a:	f107 0108 	add.w	r1, r7, #8
 801053e:	2300      	movs	r3, #0
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f000 fad6 	bl	8010af4 <xQueueGenericSend>
 8010548:	4603      	mov	r3, r0
 801054a:	2b01      	cmp	r3, #1
 801054c:	d001      	beq.n	8010552 <osMessagePut+0x72>
      return osErrorOS;
 801054e:	23ff      	movs	r3, #255	@ 0xff
 8010550:	e000      	b.n	8010554 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010552:	2300      	movs	r3, #0
}
 8010554:	4618      	mov	r0, r3
 8010556:	3718      	adds	r7, #24
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	e000ed04 	.word	0xe000ed04

08010560 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010560:	b590      	push	{r4, r7, lr}
 8010562:	b08b      	sub	sp, #44	@ 0x2c
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010570:	2300      	movs	r3, #0
 8010572:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d10a      	bne.n	8010590 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801057a:	2380      	movs	r3, #128	@ 0x80
 801057c:	617b      	str	r3, [r7, #20]
    return event;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	461c      	mov	r4, r3
 8010582:	f107 0314 	add.w	r3, r7, #20
 8010586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801058e:	e054      	b.n	801063a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010590:	2300      	movs	r3, #0
 8010592:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010594:	2300      	movs	r3, #0
 8010596:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059e:	d103      	bne.n	80105a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80105a0:	f04f 33ff 	mov.w	r3, #4294967295
 80105a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80105a6:	e009      	b.n	80105bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d006      	beq.n	80105bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80105b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d101      	bne.n	80105bc <osMessageGet+0x5c>
      ticks = 1;
 80105b8:	2301      	movs	r3, #1
 80105ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80105bc:	f7ff febb 	bl	8010336 <inHandlerMode>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d01c      	beq.n	8010600 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80105c6:	f107 0220 	add.w	r2, r7, #32
 80105ca:	f107 0314 	add.w	r3, r7, #20
 80105ce:	3304      	adds	r3, #4
 80105d0:	4619      	mov	r1, r3
 80105d2:	68b8      	ldr	r0, [r7, #8]
 80105d4:	f000 fed4 	bl	8011380 <xQueueReceiveFromISR>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d102      	bne.n	80105e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80105de:	2310      	movs	r3, #16
 80105e0:	617b      	str	r3, [r7, #20]
 80105e2:	e001      	b.n	80105e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80105e8:	6a3b      	ldr	r3, [r7, #32]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d01d      	beq.n	801062a <osMessageGet+0xca>
 80105ee:	4b15      	ldr	r3, [pc, #84]	@ (8010644 <osMessageGet+0xe4>)
 80105f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	f3bf 8f4f 	dsb	sy
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	e014      	b.n	801062a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010600:	f107 0314 	add.w	r3, r7, #20
 8010604:	3304      	adds	r3, #4
 8010606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010608:	4619      	mov	r1, r3
 801060a:	68b8      	ldr	r0, [r7, #8]
 801060c:	f000 fcb8 	bl	8010f80 <xQueueReceive>
 8010610:	4603      	mov	r3, r0
 8010612:	2b01      	cmp	r3, #1
 8010614:	d102      	bne.n	801061c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010616:	2310      	movs	r3, #16
 8010618:	617b      	str	r3, [r7, #20]
 801061a:	e006      	b.n	801062a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061e:	2b00      	cmp	r3, #0
 8010620:	d101      	bne.n	8010626 <osMessageGet+0xc6>
 8010622:	2300      	movs	r3, #0
 8010624:	e000      	b.n	8010628 <osMessageGet+0xc8>
 8010626:	2340      	movs	r3, #64	@ 0x40
 8010628:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	461c      	mov	r4, r3
 801062e:	f107 0314 	add.w	r3, r7, #20
 8010632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801063a:	68f8      	ldr	r0, [r7, #12]
 801063c:	372c      	adds	r7, #44	@ 0x2c
 801063e:	46bd      	mov	sp, r7
 8010640:	bd90      	pop	{r4, r7, pc}
 8010642:	bf00      	nop
 8010644:	e000ed04 	.word	0xe000ed04

08010648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f103 0208 	add.w	r2, r3, #8
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f04f 32ff 	mov.w	r2, #4294967295
 8010660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f103 0208 	add.w	r2, r3, #8
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f103 0208 	add.w	r2, r3, #8
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801067c:	bf00      	nop
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr

080106a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106a2:	b480      	push	{r7}
 80106a4:	b085      	sub	sp, #20
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	689a      	ldr	r2, [r3, #8]
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	1c5a      	adds	r2, r3, #1
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	601a      	str	r2, [r3, #0]
}
 80106de:	bf00      	nop
 80106e0:	3714      	adds	r7, #20
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106ea:	b480      	push	{r7}
 80106ec:	b085      	sub	sp, #20
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010700:	d103      	bne.n	801070a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	691b      	ldr	r3, [r3, #16]
 8010706:	60fb      	str	r3, [r7, #12]
 8010708:	e00c      	b.n	8010724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3308      	adds	r3, #8
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e002      	b.n	8010718 <vListInsert+0x2e>
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	60fb      	str	r3, [r7, #12]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	429a      	cmp	r2, r3
 8010722:	d2f6      	bcs.n	8010712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	685a      	ldr	r2, [r3, #4]
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	683a      	ldr	r2, [r7, #0]
 8010732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	601a      	str	r2, [r3, #0]
}
 8010750:	bf00      	nop
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	691b      	ldr	r3, [r3, #16]
 8010768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	6892      	ldr	r2, [r2, #8]
 8010772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	6852      	ldr	r2, [r2, #4]
 801077c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	429a      	cmp	r2, r3
 8010786:	d103      	bne.n	8010790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	689a      	ldr	r2, [r3, #8]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	1e5a      	subs	r2, r3, #1
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3714      	adds	r7, #20
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10d      	bne.n	80107e0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c8:	b672      	cpsid	i
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	b662      	cpsie	i
 80107d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80107da:	bf00      	nop
 80107dc:	bf00      	nop
 80107de:	e7fd      	b.n	80107dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80107e0:	f002 f944 	bl	8012a6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107ec:	68f9      	ldr	r1, [r7, #12]
 80107ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80107f0:	fb01 f303 	mul.w	r3, r1, r3
 80107f4:	441a      	add	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010810:	3b01      	subs	r3, #1
 8010812:	68f9      	ldr	r1, [r7, #12]
 8010814:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010816:	fb01 f303 	mul.w	r3, r1, r3
 801081a:	441a      	add	r2, r3
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	22ff      	movs	r2, #255	@ 0xff
 8010824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	22ff      	movs	r2, #255	@ 0xff
 801082c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d114      	bne.n	8010860 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d01a      	beq.n	8010874 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3310      	adds	r3, #16
 8010842:	4618      	mov	r0, r3
 8010844:	f001 fbf2 	bl	801202c <xTaskRemoveFromEventList>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d012      	beq.n	8010874 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801084e:	4b0d      	ldr	r3, [pc, #52]	@ (8010884 <xQueueGenericReset+0xd4>)
 8010850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	f3bf 8f4f 	dsb	sy
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	e009      	b.n	8010874 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	3310      	adds	r3, #16
 8010864:	4618      	mov	r0, r3
 8010866:	f7ff feef 	bl	8010648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	3324      	adds	r3, #36	@ 0x24
 801086e:	4618      	mov	r0, r3
 8010870:	f7ff feea 	bl	8010648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010874:	f002 f930 	bl	8012ad8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010878:	2301      	movs	r3, #1
}
 801087a:	4618      	mov	r0, r3
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	e000ed04 	.word	0xe000ed04

08010888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08e      	sub	sp, #56	@ 0x38
 801088c:	af02      	add	r7, sp, #8
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10d      	bne.n	80108b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 801089c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a0:	b672      	cpsid	i
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	b662      	cpsie	i
 80108b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80108b2:	bf00      	nop
 80108b4:	bf00      	nop
 80108b6:	e7fd      	b.n	80108b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10d      	bne.n	80108da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c2:	b672      	cpsid	i
 80108c4:	f383 8811 	msr	BASEPRI, r3
 80108c8:	f3bf 8f6f 	isb	sy
 80108cc:	f3bf 8f4f 	dsb	sy
 80108d0:	b662      	cpsie	i
 80108d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80108d4:	bf00      	nop
 80108d6:	bf00      	nop
 80108d8:	e7fd      	b.n	80108d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <xQueueGenericCreateStatic+0x5e>
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <xQueueGenericCreateStatic+0x62>
 80108e6:	2301      	movs	r3, #1
 80108e8:	e000      	b.n	80108ec <xQueueGenericCreateStatic+0x64>
 80108ea:	2300      	movs	r3, #0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d10d      	bne.n	801090c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80108f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f4:	b672      	cpsid	i
 80108f6:	f383 8811 	msr	BASEPRI, r3
 80108fa:	f3bf 8f6f 	isb	sy
 80108fe:	f3bf 8f4f 	dsb	sy
 8010902:	b662      	cpsie	i
 8010904:	623b      	str	r3, [r7, #32]
}
 8010906:	bf00      	nop
 8010908:	bf00      	nop
 801090a:	e7fd      	b.n	8010908 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d102      	bne.n	8010918 <xQueueGenericCreateStatic+0x90>
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d101      	bne.n	801091c <xQueueGenericCreateStatic+0x94>
 8010918:	2301      	movs	r3, #1
 801091a:	e000      	b.n	801091e <xQueueGenericCreateStatic+0x96>
 801091c:	2300      	movs	r3, #0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10d      	bne.n	801093e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8010922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010926:	b672      	cpsid	i
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	b662      	cpsie	i
 8010936:	61fb      	str	r3, [r7, #28]
}
 8010938:	bf00      	nop
 801093a:	bf00      	nop
 801093c:	e7fd      	b.n	801093a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801093e:	2348      	movs	r3, #72	@ 0x48
 8010940:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	2b48      	cmp	r3, #72	@ 0x48
 8010946:	d00d      	beq.n	8010964 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8010948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801094c:	b672      	cpsid	i
 801094e:	f383 8811 	msr	BASEPRI, r3
 8010952:	f3bf 8f6f 	isb	sy
 8010956:	f3bf 8f4f 	dsb	sy
 801095a:	b662      	cpsie	i
 801095c:	61bb      	str	r3, [r7, #24]
}
 801095e:	bf00      	nop
 8010960:	bf00      	nop
 8010962:	e7fd      	b.n	8010960 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010964:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801096a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00d      	beq.n	801098c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010972:	2201      	movs	r2, #1
 8010974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010978:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801097c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	4613      	mov	r3, r2
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	68b9      	ldr	r1, [r7, #8]
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	f000 f848 	bl	8010a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801098c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801098e:	4618      	mov	r0, r3
 8010990:	3730      	adds	r7, #48	@ 0x30
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010996:	b580      	push	{r7, lr}
 8010998:	b08a      	sub	sp, #40	@ 0x28
 801099a:	af02      	add	r7, sp, #8
 801099c:	60f8      	str	r0, [r7, #12]
 801099e:	60b9      	str	r1, [r7, #8]
 80109a0:	4613      	mov	r3, r2
 80109a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d10d      	bne.n	80109c6 <xQueueGenericCreate+0x30>
	__asm volatile
 80109aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ae:	b672      	cpsid	i
 80109b0:	f383 8811 	msr	BASEPRI, r3
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	b662      	cpsie	i
 80109be:	613b      	str	r3, [r7, #16]
}
 80109c0:	bf00      	nop
 80109c2:	bf00      	nop
 80109c4:	e7fd      	b.n	80109c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d102      	bne.n	80109d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80109cc:	2300      	movs	r3, #0
 80109ce:	61fb      	str	r3, [r7, #28]
 80109d0:	e004      	b.n	80109dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	fb02 f303 	mul.w	r3, r2, r3
 80109da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	3348      	adds	r3, #72	@ 0x48
 80109e0:	4618      	mov	r0, r3
 80109e2:	f002 f971 	bl	8012cc8 <pvPortMalloc>
 80109e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d011      	beq.n	8010a12 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	3348      	adds	r3, #72	@ 0x48
 80109f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010a00:	79fa      	ldrb	r2, [r7, #7]
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	4613      	mov	r3, r2
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f000 f805 	bl	8010a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010a12:	69bb      	ldr	r3, [r7, #24]
	}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3720      	adds	r7, #32
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d103      	bne.n	8010a38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	69ba      	ldr	r2, [r7, #24]
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	e002      	b.n	8010a3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a3e:	69bb      	ldr	r3, [r7, #24]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a44:	69bb      	ldr	r3, [r7, #24]
 8010a46:	68ba      	ldr	r2, [r7, #8]
 8010a48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	69b8      	ldr	r0, [r7, #24]
 8010a4e:	f7ff feaf 	bl	80107b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a52:	bf00      	nop
 8010a54:	3710      	adds	r7, #16
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b082      	sub	sp, #8
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00e      	beq.n	8010a86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2200      	movs	r2, #0
 8010a72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2100      	movs	r1, #0
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 f837 	bl	8010af4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010a86:	bf00      	nop
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b086      	sub	sp, #24
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	4603      	mov	r3, r0
 8010a96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	617b      	str	r3, [r7, #20]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	6939      	ldr	r1, [r7, #16]
 8010aa6:	6978      	ldr	r0, [r7, #20]
 8010aa8:	f7ff ff75 	bl	8010996 <xQueueGenericCreate>
 8010aac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f7ff ffd3 	bl	8010a5a <prvInitialiseMutex>

		return xNewQueue;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
	}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3718      	adds	r7, #24
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b088      	sub	sp, #32
 8010ac2:	af02      	add	r7, sp, #8
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	6039      	str	r1, [r7, #0]
 8010ac8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010aca:	2301      	movs	r3, #1
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	2300      	movs	r3, #0
 8010ad0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010ad2:	79fb      	ldrb	r3, [r7, #7]
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	6939      	ldr	r1, [r7, #16]
 8010adc:	6978      	ldr	r0, [r7, #20]
 8010ade:	f7ff fed3 	bl	8010888 <xQueueGenericCreateStatic>
 8010ae2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f7ff ffb8 	bl	8010a5a <prvInitialiseMutex>

		return xNewQueue;
 8010aea:	68fb      	ldr	r3, [r7, #12]
	}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3718      	adds	r7, #24
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08e      	sub	sp, #56	@ 0x38
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
 8010b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010b02:	2300      	movs	r3, #0
 8010b04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d10d      	bne.n	8010b2c <xQueueGenericSend+0x38>
	__asm volatile
 8010b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b14:	b672      	cpsid	i
 8010b16:	f383 8811 	msr	BASEPRI, r3
 8010b1a:	f3bf 8f6f 	isb	sy
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	b662      	cpsie	i
 8010b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010b26:	bf00      	nop
 8010b28:	bf00      	nop
 8010b2a:	e7fd      	b.n	8010b28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d103      	bne.n	8010b3a <xQueueGenericSend+0x46>
 8010b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d101      	bne.n	8010b3e <xQueueGenericSend+0x4a>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e000      	b.n	8010b40 <xQueueGenericSend+0x4c>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10d      	bne.n	8010b60 <xQueueGenericSend+0x6c>
	__asm volatile
 8010b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b48:	b672      	cpsid	i
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	b662      	cpsie	i
 8010b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010b5a:	bf00      	nop
 8010b5c:	bf00      	nop
 8010b5e:	e7fd      	b.n	8010b5c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	2b02      	cmp	r3, #2
 8010b64:	d103      	bne.n	8010b6e <xQueueGenericSend+0x7a>
 8010b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d101      	bne.n	8010b72 <xQueueGenericSend+0x7e>
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e000      	b.n	8010b74 <xQueueGenericSend+0x80>
 8010b72:	2300      	movs	r3, #0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10d      	bne.n	8010b94 <xQueueGenericSend+0xa0>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b7c:	b672      	cpsid	i
 8010b7e:	f383 8811 	msr	BASEPRI, r3
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	f3bf 8f4f 	dsb	sy
 8010b8a:	b662      	cpsie	i
 8010b8c:	623b      	str	r3, [r7, #32]
}
 8010b8e:	bf00      	nop
 8010b90:	bf00      	nop
 8010b92:	e7fd      	b.n	8010b90 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b94:	f001 fc1a 	bl	80123cc <xTaskGetSchedulerState>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d102      	bne.n	8010ba4 <xQueueGenericSend+0xb0>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d101      	bne.n	8010ba8 <xQueueGenericSend+0xb4>
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e000      	b.n	8010baa <xQueueGenericSend+0xb6>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d10d      	bne.n	8010bca <xQueueGenericSend+0xd6>
	__asm volatile
 8010bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bb2:	b672      	cpsid	i
 8010bb4:	f383 8811 	msr	BASEPRI, r3
 8010bb8:	f3bf 8f6f 	isb	sy
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	b662      	cpsie	i
 8010bc2:	61fb      	str	r3, [r7, #28]
}
 8010bc4:	bf00      	nop
 8010bc6:	bf00      	nop
 8010bc8:	e7fd      	b.n	8010bc6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010bca:	f001 ff4f 	bl	8012a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d302      	bcc.n	8010be0 <xQueueGenericSend+0xec>
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d129      	bne.n	8010c34 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010be0:	683a      	ldr	r2, [r7, #0]
 8010be2:	68b9      	ldr	r1, [r7, #8]
 8010be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010be6:	f000 fc6b 	bl	80114c0 <prvCopyDataToQueue>
 8010bea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d010      	beq.n	8010c16 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf6:	3324      	adds	r3, #36	@ 0x24
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f001 fa17 	bl	801202c <xTaskRemoveFromEventList>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d013      	beq.n	8010c2c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010c04:	4b3f      	ldr	r3, [pc, #252]	@ (8010d04 <xQueueGenericSend+0x210>)
 8010c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	f3bf 8f4f 	dsb	sy
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	e00a      	b.n	8010c2c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d007      	beq.n	8010c2c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010c1c:	4b39      	ldr	r3, [pc, #228]	@ (8010d04 <xQueueGenericSend+0x210>)
 8010c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010c2c:	f001 ff54 	bl	8012ad8 <vPortExitCritical>
				return pdPASS;
 8010c30:	2301      	movs	r3, #1
 8010c32:	e063      	b.n	8010cfc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c3a:	f001 ff4d 	bl	8012ad8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e05c      	b.n	8010cfc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d106      	bne.n	8010c56 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c48:	f107 0314 	add.w	r3, r7, #20
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f001 fa53 	bl	80120f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c52:	2301      	movs	r3, #1
 8010c54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c56:	f001 ff3f 	bl	8012ad8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c5a:	f000 ffa9 	bl	8011bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c5e:	f001 ff05 	bl	8012a6c <vPortEnterCritical>
 8010c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c68:	b25b      	sxtb	r3, r3
 8010c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c6e:	d103      	bne.n	8010c78 <xQueueGenericSend+0x184>
 8010c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c7e:	b25b      	sxtb	r3, r3
 8010c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c84:	d103      	bne.n	8010c8e <xQueueGenericSend+0x19a>
 8010c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c88:	2200      	movs	r2, #0
 8010c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c8e:	f001 ff23 	bl	8012ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c92:	1d3a      	adds	r2, r7, #4
 8010c94:	f107 0314 	add.w	r3, r7, #20
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f001 fa42 	bl	8012124 <xTaskCheckForTimeOut>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d124      	bne.n	8010cf0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ca8:	f000 fd02 	bl	80116b0 <prvIsQueueFull>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d018      	beq.n	8010ce4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cb4:	3310      	adds	r3, #16
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	4611      	mov	r1, r2
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f001 f98e 	bl	8011fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cc2:	f000 fc8d 	bl	80115e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010cc6:	f000 ff81 	bl	8011bcc <xTaskResumeAll>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f47f af7c 	bne.w	8010bca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8010cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8010d04 <xQueueGenericSend+0x210>)
 8010cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	f3bf 8f6f 	isb	sy
 8010ce2:	e772      	b.n	8010bca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ce6:	f000 fc7b 	bl	80115e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010cea:	f000 ff6f 	bl	8011bcc <xTaskResumeAll>
 8010cee:	e76c      	b.n	8010bca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cf2:	f000 fc75 	bl	80115e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cf6:	f000 ff69 	bl	8011bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3738      	adds	r7, #56	@ 0x38
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	e000ed04 	.word	0xe000ed04

08010d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b08e      	sub	sp, #56	@ 0x38
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
 8010d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10d      	bne.n	8010d3c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8010d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d24:	b672      	cpsid	i
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	b662      	cpsie	i
 8010d34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010d36:	bf00      	nop
 8010d38:	bf00      	nop
 8010d3a:	e7fd      	b.n	8010d38 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d103      	bne.n	8010d4a <xQueueGenericSendFromISR+0x42>
 8010d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d101      	bne.n	8010d4e <xQueueGenericSendFromISR+0x46>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e000      	b.n	8010d50 <xQueueGenericSendFromISR+0x48>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d10d      	bne.n	8010d70 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8010d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d58:	b672      	cpsid	i
 8010d5a:	f383 8811 	msr	BASEPRI, r3
 8010d5e:	f3bf 8f6f 	isb	sy
 8010d62:	f3bf 8f4f 	dsb	sy
 8010d66:	b662      	cpsie	i
 8010d68:	623b      	str	r3, [r7, #32]
}
 8010d6a:	bf00      	nop
 8010d6c:	bf00      	nop
 8010d6e:	e7fd      	b.n	8010d6c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d103      	bne.n	8010d7e <xQueueGenericSendFromISR+0x76>
 8010d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	d101      	bne.n	8010d82 <xQueueGenericSendFromISR+0x7a>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e000      	b.n	8010d84 <xQueueGenericSendFromISR+0x7c>
 8010d82:	2300      	movs	r3, #0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d10d      	bne.n	8010da4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8010d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d8c:	b672      	cpsid	i
 8010d8e:	f383 8811 	msr	BASEPRI, r3
 8010d92:	f3bf 8f6f 	isb	sy
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	b662      	cpsie	i
 8010d9c:	61fb      	str	r3, [r7, #28]
}
 8010d9e:	bf00      	nop
 8010da0:	bf00      	nop
 8010da2:	e7fd      	b.n	8010da0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010da4:	f001 ff4a 	bl	8012c3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010da8:	f3ef 8211 	mrs	r2, BASEPRI
 8010dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010db0:	b672      	cpsid	i
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	b662      	cpsie	i
 8010dc0:	61ba      	str	r2, [r7, #24]
 8010dc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010dc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d302      	bcc.n	8010dda <xQueueGenericSendFromISR+0xd2>
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	d12c      	bne.n	8010e34 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010de0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	68b9      	ldr	r1, [r7, #8]
 8010de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dea:	f000 fb69 	bl	80114c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010dee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df6:	d112      	bne.n	8010e1e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d016      	beq.n	8010e2e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e02:	3324      	adds	r3, #36	@ 0x24
 8010e04:	4618      	mov	r0, r3
 8010e06:	f001 f911 	bl	801202c <xTaskRemoveFromEventList>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d00e      	beq.n	8010e2e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00b      	beq.n	8010e2e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2201      	movs	r2, #1
 8010e1a:	601a      	str	r2, [r3, #0]
 8010e1c:	e007      	b.n	8010e2e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010e22:	3301      	adds	r3, #1
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	b25a      	sxtb	r2, r3
 8010e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8010e32:	e001      	b.n	8010e38 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e34:	2300      	movs	r3, #0
 8010e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3738      	adds	r7, #56	@ 0x38
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b08e      	sub	sp, #56	@ 0x38
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
 8010e56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10d      	bne.n	8010e7e <xQueueGiveFromISR+0x30>
	__asm volatile
 8010e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e66:	b672      	cpsid	i
 8010e68:	f383 8811 	msr	BASEPRI, r3
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	b662      	cpsie	i
 8010e76:	623b      	str	r3, [r7, #32]
}
 8010e78:	bf00      	nop
 8010e7a:	bf00      	nop
 8010e7c:	e7fd      	b.n	8010e7a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00d      	beq.n	8010ea2 <xQueueGiveFromISR+0x54>
	__asm volatile
 8010e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8a:	b672      	cpsid	i
 8010e8c:	f383 8811 	msr	BASEPRI, r3
 8010e90:	f3bf 8f6f 	isb	sy
 8010e94:	f3bf 8f4f 	dsb	sy
 8010e98:	b662      	cpsie	i
 8010e9a:	61fb      	str	r3, [r7, #28]
}
 8010e9c:	bf00      	nop
 8010e9e:	bf00      	nop
 8010ea0:	e7fd      	b.n	8010e9e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d103      	bne.n	8010eb2 <xQueueGiveFromISR+0x64>
 8010eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eac:	689b      	ldr	r3, [r3, #8]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <xQueueGiveFromISR+0x68>
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e000      	b.n	8010eb8 <xQueueGiveFromISR+0x6a>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d10d      	bne.n	8010ed8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8010ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ec0:	b672      	cpsid	i
 8010ec2:	f383 8811 	msr	BASEPRI, r3
 8010ec6:	f3bf 8f6f 	isb	sy
 8010eca:	f3bf 8f4f 	dsb	sy
 8010ece:	b662      	cpsie	i
 8010ed0:	61bb      	str	r3, [r7, #24]
}
 8010ed2:	bf00      	nop
 8010ed4:	bf00      	nop
 8010ed6:	e7fd      	b.n	8010ed4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ed8:	f001 feb0 	bl	8012c3c <vPortValidateInterruptPriority>
	__asm volatile
 8010edc:	f3ef 8211 	mrs	r2, BASEPRI
 8010ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee4:	b672      	cpsid	i
 8010ee6:	f383 8811 	msr	BASEPRI, r3
 8010eea:	f3bf 8f6f 	isb	sy
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	b662      	cpsie	i
 8010ef4:	617a      	str	r2, [r7, #20]
 8010ef6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010ef8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f00:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d22b      	bcs.n	8010f64 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f26:	d112      	bne.n	8010f4e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d016      	beq.n	8010f5e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f32:	3324      	adds	r3, #36	@ 0x24
 8010f34:	4618      	mov	r0, r3
 8010f36:	f001 f879 	bl	801202c <xTaskRemoveFromEventList>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00e      	beq.n	8010f5e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00b      	beq.n	8010f5e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	601a      	str	r2, [r3, #0]
 8010f4c:	e007      	b.n	8010f5e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f52:	3301      	adds	r3, #1
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	b25a      	sxtb	r2, r3
 8010f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f62:	e001      	b.n	8010f68 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f64:	2300      	movs	r3, #0
 8010f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f6a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	f383 8811 	msr	BASEPRI, r3
}
 8010f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3738      	adds	r7, #56	@ 0x38
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
	...

08010f80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b08c      	sub	sp, #48	@ 0x30
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d10d      	bne.n	8010fb6 <xQueueReceive+0x36>
	__asm volatile
 8010f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f9e:	b672      	cpsid	i
 8010fa0:	f383 8811 	msr	BASEPRI, r3
 8010fa4:	f3bf 8f6f 	isb	sy
 8010fa8:	f3bf 8f4f 	dsb	sy
 8010fac:	b662      	cpsie	i
 8010fae:	623b      	str	r3, [r7, #32]
}
 8010fb0:	bf00      	nop
 8010fb2:	bf00      	nop
 8010fb4:	e7fd      	b.n	8010fb2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d103      	bne.n	8010fc4 <xQueueReceive+0x44>
 8010fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d101      	bne.n	8010fc8 <xQueueReceive+0x48>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	e000      	b.n	8010fca <xQueueReceive+0x4a>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d10d      	bne.n	8010fea <xQueueReceive+0x6a>
	__asm volatile
 8010fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd2:	b672      	cpsid	i
 8010fd4:	f383 8811 	msr	BASEPRI, r3
 8010fd8:	f3bf 8f6f 	isb	sy
 8010fdc:	f3bf 8f4f 	dsb	sy
 8010fe0:	b662      	cpsie	i
 8010fe2:	61fb      	str	r3, [r7, #28]
}
 8010fe4:	bf00      	nop
 8010fe6:	bf00      	nop
 8010fe8:	e7fd      	b.n	8010fe6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fea:	f001 f9ef 	bl	80123cc <xTaskGetSchedulerState>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d102      	bne.n	8010ffa <xQueueReceive+0x7a>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d101      	bne.n	8010ffe <xQueueReceive+0x7e>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e000      	b.n	8011000 <xQueueReceive+0x80>
 8010ffe:	2300      	movs	r3, #0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10d      	bne.n	8011020 <xQueueReceive+0xa0>
	__asm volatile
 8011004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011008:	b672      	cpsid	i
 801100a:	f383 8811 	msr	BASEPRI, r3
 801100e:	f3bf 8f6f 	isb	sy
 8011012:	f3bf 8f4f 	dsb	sy
 8011016:	b662      	cpsie	i
 8011018:	61bb      	str	r3, [r7, #24]
}
 801101a:	bf00      	nop
 801101c:	bf00      	nop
 801101e:	e7fd      	b.n	801101c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011020:	f001 fd24 	bl	8012a6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011028:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102c:	2b00      	cmp	r3, #0
 801102e:	d01f      	beq.n	8011070 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011030:	68b9      	ldr	r1, [r7, #8]
 8011032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011034:	f000 faae 	bl	8011594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103a:	1e5a      	subs	r2, r3, #1
 801103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801103e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00f      	beq.n	8011068 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801104a:	3310      	adds	r3, #16
 801104c:	4618      	mov	r0, r3
 801104e:	f000 ffed 	bl	801202c <xTaskRemoveFromEventList>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d007      	beq.n	8011068 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011058:	4b3c      	ldr	r3, [pc, #240]	@ (801114c <xQueueReceive+0x1cc>)
 801105a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801105e:	601a      	str	r2, [r3, #0]
 8011060:	f3bf 8f4f 	dsb	sy
 8011064:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011068:	f001 fd36 	bl	8012ad8 <vPortExitCritical>
				return pdPASS;
 801106c:	2301      	movs	r3, #1
 801106e:	e069      	b.n	8011144 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d103      	bne.n	801107e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011076:	f001 fd2f 	bl	8012ad8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801107a:	2300      	movs	r3, #0
 801107c:	e062      	b.n	8011144 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801107e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011080:	2b00      	cmp	r3, #0
 8011082:	d106      	bne.n	8011092 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011084:	f107 0310 	add.w	r3, r7, #16
 8011088:	4618      	mov	r0, r3
 801108a:	f001 f835 	bl	80120f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801108e:	2301      	movs	r3, #1
 8011090:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011092:	f001 fd21 	bl	8012ad8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011096:	f000 fd8b 	bl	8011bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801109a:	f001 fce7 	bl	8012a6c <vPortEnterCritical>
 801109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80110a4:	b25b      	sxtb	r3, r3
 80110a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110aa:	d103      	bne.n	80110b4 <xQueueReceive+0x134>
 80110ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ae:	2200      	movs	r2, #0
 80110b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80110b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80110ba:	b25b      	sxtb	r3, r3
 80110bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c0:	d103      	bne.n	80110ca <xQueueReceive+0x14a>
 80110c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110c4:	2200      	movs	r2, #0
 80110c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80110ca:	f001 fd05 	bl	8012ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110ce:	1d3a      	adds	r2, r7, #4
 80110d0:	f107 0310 	add.w	r3, r7, #16
 80110d4:	4611      	mov	r1, r2
 80110d6:	4618      	mov	r0, r3
 80110d8:	f001 f824 	bl	8012124 <xTaskCheckForTimeOut>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d123      	bne.n	801112a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110e4:	f000 face 	bl	8011684 <prvIsQueueEmpty>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d017      	beq.n	801111e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110f0:	3324      	adds	r3, #36	@ 0x24
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	4611      	mov	r1, r2
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 ff70 	bl	8011fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110fe:	f000 fa6f 	bl	80115e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011102:	f000 fd63 	bl	8011bcc <xTaskResumeAll>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d189      	bne.n	8011020 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 801110c:	4b0f      	ldr	r3, [pc, #60]	@ (801114c <xQueueReceive+0x1cc>)
 801110e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	f3bf 8f6f 	isb	sy
 801111c:	e780      	b.n	8011020 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801111e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011120:	f000 fa5e 	bl	80115e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011124:	f000 fd52 	bl	8011bcc <xTaskResumeAll>
 8011128:	e77a      	b.n	8011020 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801112a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801112c:	f000 fa58 	bl	80115e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011130:	f000 fd4c 	bl	8011bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011136:	f000 faa5 	bl	8011684 <prvIsQueueEmpty>
 801113a:	4603      	mov	r3, r0
 801113c:	2b00      	cmp	r3, #0
 801113e:	f43f af6f 	beq.w	8011020 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011142:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011144:	4618      	mov	r0, r3
 8011146:	3730      	adds	r7, #48	@ 0x30
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	e000ed04 	.word	0xe000ed04

08011150 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b08e      	sub	sp, #56	@ 0x38
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801115a:	2300      	movs	r3, #0
 801115c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011162:	2300      	movs	r3, #0
 8011164:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011168:	2b00      	cmp	r3, #0
 801116a:	d10d      	bne.n	8011188 <xQueueSemaphoreTake+0x38>
	__asm volatile
 801116c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011170:	b672      	cpsid	i
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	b662      	cpsie	i
 8011180:	623b      	str	r3, [r7, #32]
}
 8011182:	bf00      	nop
 8011184:	bf00      	nop
 8011186:	e7fd      	b.n	8011184 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801118c:	2b00      	cmp	r3, #0
 801118e:	d00d      	beq.n	80111ac <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8011190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011194:	b672      	cpsid	i
 8011196:	f383 8811 	msr	BASEPRI, r3
 801119a:	f3bf 8f6f 	isb	sy
 801119e:	f3bf 8f4f 	dsb	sy
 80111a2:	b662      	cpsie	i
 80111a4:	61fb      	str	r3, [r7, #28]
}
 80111a6:	bf00      	nop
 80111a8:	bf00      	nop
 80111aa:	e7fd      	b.n	80111a8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111ac:	f001 f90e 	bl	80123cc <xTaskGetSchedulerState>
 80111b0:	4603      	mov	r3, r0
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d102      	bne.n	80111bc <xQueueSemaphoreTake+0x6c>
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d101      	bne.n	80111c0 <xQueueSemaphoreTake+0x70>
 80111bc:	2301      	movs	r3, #1
 80111be:	e000      	b.n	80111c2 <xQueueSemaphoreTake+0x72>
 80111c0:	2300      	movs	r3, #0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d10d      	bne.n	80111e2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80111c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ca:	b672      	cpsid	i
 80111cc:	f383 8811 	msr	BASEPRI, r3
 80111d0:	f3bf 8f6f 	isb	sy
 80111d4:	f3bf 8f4f 	dsb	sy
 80111d8:	b662      	cpsie	i
 80111da:	61bb      	str	r3, [r7, #24]
}
 80111dc:	bf00      	nop
 80111de:	bf00      	nop
 80111e0:	e7fd      	b.n	80111de <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111e2:	f001 fc43 	bl	8012a6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80111e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80111ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d024      	beq.n	801123c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80111f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f4:	1e5a      	subs	r2, r3, #1
 80111f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d104      	bne.n	801120c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011202:	f001 faad 	bl	8012760 <pvTaskIncrementMutexHeldCount>
 8011206:	4602      	mov	r2, r0
 8011208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00f      	beq.n	8011234 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011216:	3310      	adds	r3, #16
 8011218:	4618      	mov	r0, r3
 801121a:	f000 ff07 	bl	801202c <xTaskRemoveFromEventList>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d007      	beq.n	8011234 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011224:	4b55      	ldr	r3, [pc, #340]	@ (801137c <xQueueSemaphoreTake+0x22c>)
 8011226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801122a:	601a      	str	r2, [r3, #0]
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011234:	f001 fc50 	bl	8012ad8 <vPortExitCritical>
				return pdPASS;
 8011238:	2301      	movs	r3, #1
 801123a:	e09a      	b.n	8011372 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d114      	bne.n	801126c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00d      	beq.n	8011264 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8011248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801124c:	b672      	cpsid	i
 801124e:	f383 8811 	msr	BASEPRI, r3
 8011252:	f3bf 8f6f 	isb	sy
 8011256:	f3bf 8f4f 	dsb	sy
 801125a:	b662      	cpsie	i
 801125c:	617b      	str	r3, [r7, #20]
}
 801125e:	bf00      	nop
 8011260:	bf00      	nop
 8011262:	e7fd      	b.n	8011260 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011264:	f001 fc38 	bl	8012ad8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011268:	2300      	movs	r3, #0
 801126a:	e082      	b.n	8011372 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 801126c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801126e:	2b00      	cmp	r3, #0
 8011270:	d106      	bne.n	8011280 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011272:	f107 030c 	add.w	r3, r7, #12
 8011276:	4618      	mov	r0, r3
 8011278:	f000 ff3e 	bl	80120f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801127c:	2301      	movs	r3, #1
 801127e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011280:	f001 fc2a 	bl	8012ad8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011284:	f000 fc94 	bl	8011bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011288:	f001 fbf0 	bl	8012a6c <vPortEnterCritical>
 801128c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011292:	b25b      	sxtb	r3, r3
 8011294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011298:	d103      	bne.n	80112a2 <xQueueSemaphoreTake+0x152>
 801129a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801129c:	2200      	movs	r2, #0
 801129e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80112a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80112a8:	b25b      	sxtb	r3, r3
 80112aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ae:	d103      	bne.n	80112b8 <xQueueSemaphoreTake+0x168>
 80112b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112b2:	2200      	movs	r2, #0
 80112b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80112b8:	f001 fc0e 	bl	8012ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112bc:	463a      	mov	r2, r7
 80112be:	f107 030c 	add.w	r3, r7, #12
 80112c2:	4611      	mov	r1, r2
 80112c4:	4618      	mov	r0, r3
 80112c6:	f000 ff2d 	bl	8012124 <xTaskCheckForTimeOut>
 80112ca:	4603      	mov	r3, r0
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d132      	bne.n	8011336 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80112d2:	f000 f9d7 	bl	8011684 <prvIsQueueEmpty>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d026      	beq.n	801132a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d109      	bne.n	80112f8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80112e4:	f001 fbc2 	bl	8012a6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ea:	689b      	ldr	r3, [r3, #8]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f001 f88b 	bl	8012408 <xTaskPriorityInherit>
 80112f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80112f4:	f001 fbf0 	bl	8012ad8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80112f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112fa:	3324      	adds	r3, #36	@ 0x24
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	4611      	mov	r1, r2
 8011300:	4618      	mov	r0, r3
 8011302:	f000 fe6b 	bl	8011fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011308:	f000 f96a 	bl	80115e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801130c:	f000 fc5e 	bl	8011bcc <xTaskResumeAll>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	f47f af65 	bne.w	80111e2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8011318:	4b18      	ldr	r3, [pc, #96]	@ (801137c <xQueueSemaphoreTake+0x22c>)
 801131a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801131e:	601a      	str	r2, [r3, #0]
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	e75b      	b.n	80111e2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801132a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801132c:	f000 f958 	bl	80115e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011330:	f000 fc4c 	bl	8011bcc <xTaskResumeAll>
 8011334:	e755      	b.n	80111e2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011338:	f000 f952 	bl	80115e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801133c:	f000 fc46 	bl	8011bcc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011342:	f000 f99f 	bl	8011684 <prvIsQueueEmpty>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	f43f af4a 	beq.w	80111e2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801134e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00d      	beq.n	8011370 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8011354:	f001 fb8a 	bl	8012a6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011358:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801135a:	f000 f899 	bl	8011490 <prvGetDisinheritPriorityAfterTimeout>
 801135e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	689b      	ldr	r3, [r3, #8]
 8011364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011366:	4618      	mov	r0, r3
 8011368:	f001 f95a 	bl	8012620 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801136c:	f001 fbb4 	bl	8012ad8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011372:	4618      	mov	r0, r3
 8011374:	3738      	adds	r7, #56	@ 0x38
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	e000ed04 	.word	0xe000ed04

08011380 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08e      	sub	sp, #56	@ 0x38
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011392:	2b00      	cmp	r3, #0
 8011394:	d10d      	bne.n	80113b2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8011396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801139a:	b672      	cpsid	i
 801139c:	f383 8811 	msr	BASEPRI, r3
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	f3bf 8f4f 	dsb	sy
 80113a8:	b662      	cpsie	i
 80113aa:	623b      	str	r3, [r7, #32]
}
 80113ac:	bf00      	nop
 80113ae:	bf00      	nop
 80113b0:	e7fd      	b.n	80113ae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d103      	bne.n	80113c0 <xQueueReceiveFromISR+0x40>
 80113b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <xQueueReceiveFromISR+0x44>
 80113c0:	2301      	movs	r3, #1
 80113c2:	e000      	b.n	80113c6 <xQueueReceiveFromISR+0x46>
 80113c4:	2300      	movs	r3, #0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d10d      	bne.n	80113e6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80113ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ce:	b672      	cpsid	i
 80113d0:	f383 8811 	msr	BASEPRI, r3
 80113d4:	f3bf 8f6f 	isb	sy
 80113d8:	f3bf 8f4f 	dsb	sy
 80113dc:	b662      	cpsie	i
 80113de:	61fb      	str	r3, [r7, #28]
}
 80113e0:	bf00      	nop
 80113e2:	bf00      	nop
 80113e4:	e7fd      	b.n	80113e2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113e6:	f001 fc29 	bl	8012c3c <vPortValidateInterruptPriority>
	__asm volatile
 80113ea:	f3ef 8211 	mrs	r2, BASEPRI
 80113ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113f2:	b672      	cpsid	i
 80113f4:	f383 8811 	msr	BASEPRI, r3
 80113f8:	f3bf 8f6f 	isb	sy
 80113fc:	f3bf 8f4f 	dsb	sy
 8011400:	b662      	cpsie	i
 8011402:	61ba      	str	r2, [r7, #24]
 8011404:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011406:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011408:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801140a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801140c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801140e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011412:	2b00      	cmp	r3, #0
 8011414:	d02f      	beq.n	8011476 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801141c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011420:	68b9      	ldr	r1, [r7, #8]
 8011422:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011424:	f000 f8b6 	bl	8011594 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801142a:	1e5a      	subs	r2, r3, #1
 801142c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801142e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011430:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011438:	d112      	bne.n	8011460 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801143a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801143c:	691b      	ldr	r3, [r3, #16]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d016      	beq.n	8011470 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011444:	3310      	adds	r3, #16
 8011446:	4618      	mov	r0, r3
 8011448:	f000 fdf0 	bl	801202c <xTaskRemoveFromEventList>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00e      	beq.n	8011470 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00b      	beq.n	8011470 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2201      	movs	r2, #1
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	e007      	b.n	8011470 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011464:	3301      	adds	r3, #1
 8011466:	b2db      	uxtb	r3, r3
 8011468:	b25a      	sxtb	r2, r3
 801146a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011470:	2301      	movs	r3, #1
 8011472:	637b      	str	r3, [r7, #52]	@ 0x34
 8011474:	e001      	b.n	801147a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8011476:	2300      	movs	r3, #0
 8011478:	637b      	str	r3, [r7, #52]	@ 0x34
 801147a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	f383 8811 	msr	BASEPRI, r3
}
 8011484:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011488:	4618      	mov	r0, r3
 801148a:	3738      	adds	r7, #56	@ 0x38
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801149c:	2b00      	cmp	r3, #0
 801149e:	d006      	beq.n	80114ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f1c3 0307 	rsb	r3, r3, #7
 80114aa:	60fb      	str	r3, [r7, #12]
 80114ac:	e001      	b.n	80114b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80114ae:	2300      	movs	r3, #0
 80114b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80114b2:	68fb      	ldr	r3, [r7, #12]
	}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b086      	sub	sp, #24
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80114cc:	2300      	movs	r3, #0
 80114ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d10d      	bne.n	80114fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d14d      	bne.n	8011582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	689b      	ldr	r3, [r3, #8]
 80114ea:	4618      	mov	r0, r3
 80114ec:	f001 f80c 	bl	8012508 <xTaskPriorityDisinherit>
 80114f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	609a      	str	r2, [r3, #8]
 80114f8:	e043      	b.n	8011582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d119      	bne.n	8011534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6858      	ldr	r0, [r3, #4]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011508:	461a      	mov	r2, r3
 801150a:	68b9      	ldr	r1, [r7, #8]
 801150c:	f003 fcb7 	bl	8014e7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	685a      	ldr	r2, [r3, #4]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011518:	441a      	add	r2, r3
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	685a      	ldr	r2, [r3, #4]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	429a      	cmp	r2, r3
 8011528:	d32b      	bcc.n	8011582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	605a      	str	r2, [r3, #4]
 8011532:	e026      	b.n	8011582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	68d8      	ldr	r0, [r3, #12]
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801153c:	461a      	mov	r2, r3
 801153e:	68b9      	ldr	r1, [r7, #8]
 8011540:	f003 fc9d 	bl	8014e7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	68da      	ldr	r2, [r3, #12]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801154c:	425b      	negs	r3, r3
 801154e:	441a      	add	r2, r3
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	68da      	ldr	r2, [r3, #12]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	429a      	cmp	r2, r3
 801155e:	d207      	bcs.n	8011570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	689a      	ldr	r2, [r3, #8]
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011568:	425b      	negs	r3, r3
 801156a:	441a      	add	r2, r3
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2b02      	cmp	r3, #2
 8011574:	d105      	bne.n	8011582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	3b01      	subs	r3, #1
 8011580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	1c5a      	adds	r2, r3, #1
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801158a:	697b      	ldr	r3, [r7, #20]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3718      	adds	r7, #24
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d018      	beq.n	80115d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	68da      	ldr	r2, [r3, #12]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115ae:	441a      	add	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	68da      	ldr	r2, [r3, #12]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d303      	bcc.n	80115c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	68d9      	ldr	r1, [r3, #12]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115d0:	461a      	mov	r2, r3
 80115d2:	6838      	ldr	r0, [r7, #0]
 80115d4:	f003 fc53 	bl	8014e7e <memcpy>
	}
}
 80115d8:	bf00      	nop
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80115e8:	f001 fa40 	bl	8012a6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80115f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115f4:	e011      	b.n	801161a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d012      	beq.n	8011624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	3324      	adds	r3, #36	@ 0x24
 8011602:	4618      	mov	r0, r3
 8011604:	f000 fd12 	bl	801202c <xTaskRemoveFromEventList>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d001      	beq.n	8011612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801160e:	f000 fdf1 	bl	80121f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011612:	7bfb      	ldrb	r3, [r7, #15]
 8011614:	3b01      	subs	r3, #1
 8011616:	b2db      	uxtb	r3, r3
 8011618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801161e:	2b00      	cmp	r3, #0
 8011620:	dce9      	bgt.n	80115f6 <prvUnlockQueue+0x16>
 8011622:	e000      	b.n	8011626 <prvUnlockQueue+0x46>
					break;
 8011624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	22ff      	movs	r2, #255	@ 0xff
 801162a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801162e:	f001 fa53 	bl	8012ad8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011632:	f001 fa1b 	bl	8012a6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801163c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801163e:	e011      	b.n	8011664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	691b      	ldr	r3, [r3, #16]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d012      	beq.n	801166e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	3310      	adds	r3, #16
 801164c:	4618      	mov	r0, r3
 801164e:	f000 fced 	bl	801202c <xTaskRemoveFromEventList>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011658:	f000 fdcc 	bl	80121f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801165c:	7bbb      	ldrb	r3, [r7, #14]
 801165e:	3b01      	subs	r3, #1
 8011660:	b2db      	uxtb	r3, r3
 8011662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011668:	2b00      	cmp	r3, #0
 801166a:	dce9      	bgt.n	8011640 <prvUnlockQueue+0x60>
 801166c:	e000      	b.n	8011670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801166e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	22ff      	movs	r2, #255	@ 0xff
 8011674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011678:	f001 fa2e 	bl	8012ad8 <vPortExitCritical>
}
 801167c:	bf00      	nop
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b084      	sub	sp, #16
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801168c:	f001 f9ee 	bl	8012a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011694:	2b00      	cmp	r3, #0
 8011696:	d102      	bne.n	801169e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011698:	2301      	movs	r3, #1
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	e001      	b.n	80116a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801169e:	2300      	movs	r3, #0
 80116a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116a2:	f001 fa19 	bl	8012ad8 <vPortExitCritical>

	return xReturn;
 80116a6:	68fb      	ldr	r3, [r7, #12]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3710      	adds	r7, #16
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116b8:	f001 f9d8 	bl	8012a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d102      	bne.n	80116ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80116c8:	2301      	movs	r3, #1
 80116ca:	60fb      	str	r3, [r7, #12]
 80116cc:	e001      	b.n	80116d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116d2:	f001 fa01 	bl	8012ad8 <vPortExitCritical>

	return xReturn;
 80116d6:	68fb      	ldr	r3, [r7, #12]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3710      	adds	r7, #16
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b08e      	sub	sp, #56	@ 0x38
 80116e4:	af04      	add	r7, sp, #16
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
 80116ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80116ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d10d      	bne.n	8011710 <xTaskCreateStatic+0x30>
	__asm volatile
 80116f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f8:	b672      	cpsid	i
 80116fa:	f383 8811 	msr	BASEPRI, r3
 80116fe:	f3bf 8f6f 	isb	sy
 8011702:	f3bf 8f4f 	dsb	sy
 8011706:	b662      	cpsie	i
 8011708:	623b      	str	r3, [r7, #32]
}
 801170a:	bf00      	nop
 801170c:	bf00      	nop
 801170e:	e7fd      	b.n	801170c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011712:	2b00      	cmp	r3, #0
 8011714:	d10d      	bne.n	8011732 <xTaskCreateStatic+0x52>
	__asm volatile
 8011716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801171a:	b672      	cpsid	i
 801171c:	f383 8811 	msr	BASEPRI, r3
 8011720:	f3bf 8f6f 	isb	sy
 8011724:	f3bf 8f4f 	dsb	sy
 8011728:	b662      	cpsie	i
 801172a:	61fb      	str	r3, [r7, #28]
}
 801172c:	bf00      	nop
 801172e:	bf00      	nop
 8011730:	e7fd      	b.n	801172e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011732:	23a4      	movs	r3, #164	@ 0xa4
 8011734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	2ba4      	cmp	r3, #164	@ 0xa4
 801173a:	d00d      	beq.n	8011758 <xTaskCreateStatic+0x78>
	__asm volatile
 801173c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011740:	b672      	cpsid	i
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	b662      	cpsie	i
 8011750:	61bb      	str	r3, [r7, #24]
}
 8011752:	bf00      	nop
 8011754:	bf00      	nop
 8011756:	e7fd      	b.n	8011754 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011758:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801175a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175c:	2b00      	cmp	r3, #0
 801175e:	d01e      	beq.n	801179e <xTaskCreateStatic+0xbe>
 8011760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011762:	2b00      	cmp	r3, #0
 8011764:	d01b      	beq.n	801179e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011768:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801176e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011772:	2202      	movs	r2, #2
 8011774:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011778:	2300      	movs	r3, #0
 801177a:	9303      	str	r3, [sp, #12]
 801177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177e:	9302      	str	r3, [sp, #8]
 8011780:	f107 0314 	add.w	r3, r7, #20
 8011784:	9301      	str	r3, [sp, #4]
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	9300      	str	r3, [sp, #0]
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	68b9      	ldr	r1, [r7, #8]
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f000 f851 	bl	8011838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011798:	f000 f8fa 	bl	8011990 <prvAddNewTaskToReadyList>
 801179c:	e001      	b.n	80117a2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801179e:	2300      	movs	r3, #0
 80117a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80117a2:	697b      	ldr	r3, [r7, #20]
	}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3728      	adds	r7, #40	@ 0x28
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b08c      	sub	sp, #48	@ 0x30
 80117b0:	af04      	add	r7, sp, #16
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	603b      	str	r3, [r7, #0]
 80117b8:	4613      	mov	r3, r2
 80117ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80117bc:	88fb      	ldrh	r3, [r7, #6]
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	4618      	mov	r0, r3
 80117c2:	f001 fa81 	bl	8012cc8 <pvPortMalloc>
 80117c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00e      	beq.n	80117ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80117ce:	20a4      	movs	r0, #164	@ 0xa4
 80117d0:	f001 fa7a 	bl	8012cc8 <pvPortMalloc>
 80117d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d003      	beq.n	80117e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	697a      	ldr	r2, [r7, #20]
 80117e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80117e2:	e005      	b.n	80117f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80117e4:	6978      	ldr	r0, [r7, #20]
 80117e6:	f001 fb41 	bl	8012e6c <vPortFree>
 80117ea:	e001      	b.n	80117f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80117ec:	2300      	movs	r3, #0
 80117ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d017      	beq.n	8011826 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	2200      	movs	r2, #0
 80117fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80117fe:	88fa      	ldrh	r2, [r7, #6]
 8011800:	2300      	movs	r3, #0
 8011802:	9303      	str	r3, [sp, #12]
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	9302      	str	r3, [sp, #8]
 8011808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801180a:	9301      	str	r3, [sp, #4]
 801180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	68b9      	ldr	r1, [r7, #8]
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 f80f 	bl	8011838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801181a:	69f8      	ldr	r0, [r7, #28]
 801181c:	f000 f8b8 	bl	8011990 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011820:	2301      	movs	r3, #1
 8011822:	61bb      	str	r3, [r7, #24]
 8011824:	e002      	b.n	801182c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011826:	f04f 33ff 	mov.w	r3, #4294967295
 801182a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801182c:	69bb      	ldr	r3, [r7, #24]
	}
 801182e:	4618      	mov	r0, r3
 8011830:	3720      	adds	r7, #32
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b088      	sub	sp, #32
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
 8011844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011848:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	461a      	mov	r2, r3
 8011850:	21a5      	movs	r1, #165	@ 0xa5
 8011852:	f003 f9bb 	bl	8014bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801185a:	6879      	ldr	r1, [r7, #4]
 801185c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011860:	440b      	add	r3, r1
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	4413      	add	r3, r2
 8011866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	f023 0307 	bic.w	r3, r3, #7
 801186e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	f003 0307 	and.w	r3, r3, #7
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00d      	beq.n	8011896 <prvInitialiseNewTask+0x5e>
	__asm volatile
 801187a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801187e:	b672      	cpsid	i
 8011880:	f383 8811 	msr	BASEPRI, r3
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	f3bf 8f4f 	dsb	sy
 801188c:	b662      	cpsie	i
 801188e:	617b      	str	r3, [r7, #20]
}
 8011890:	bf00      	nop
 8011892:	bf00      	nop
 8011894:	e7fd      	b.n	8011892 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d01f      	beq.n	80118dc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801189c:	2300      	movs	r3, #0
 801189e:	61fb      	str	r3, [r7, #28]
 80118a0:	e012      	b.n	80118c8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80118a2:	68ba      	ldr	r2, [r7, #8]
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	4413      	add	r3, r2
 80118a8:	7819      	ldrb	r1, [r3, #0]
 80118aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	4413      	add	r3, r2
 80118b0:	3334      	adds	r3, #52	@ 0x34
 80118b2:	460a      	mov	r2, r1
 80118b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	4413      	add	r3, r2
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d006      	beq.n	80118d0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	3301      	adds	r3, #1
 80118c6:	61fb      	str	r3, [r7, #28]
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	2b0f      	cmp	r3, #15
 80118cc:	d9e9      	bls.n	80118a2 <prvInitialiseNewTask+0x6a>
 80118ce:	e000      	b.n	80118d2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80118d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80118d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118d4:	2200      	movs	r2, #0
 80118d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80118da:	e003      	b.n	80118e4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80118dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118de:	2200      	movs	r2, #0
 80118e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80118e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118e6:	2b06      	cmp	r3, #6
 80118e8:	d901      	bls.n	80118ee <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80118ea:	2306      	movs	r3, #6
 80118ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80118ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80118f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80118fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fc:	2200      	movs	r2, #0
 80118fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011902:	3304      	adds	r3, #4
 8011904:	4618      	mov	r0, r3
 8011906:	f7fe febf 	bl	8010688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190c:	3318      	adds	r3, #24
 801190e:	4618      	mov	r0, r3
 8011910:	f7fe feba 	bl	8010688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011918:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801191a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801191c:	f1c3 0207 	rsb	r2, r3, #7
 8011920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011922:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011928:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801192a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192c:	2200      	movs	r2, #0
 801192e:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011932:	2200      	movs	r2, #0
 8011934:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801193a:	2200      	movs	r2, #0
 801193c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011942:	3350      	adds	r3, #80	@ 0x50
 8011944:	224c      	movs	r2, #76	@ 0x4c
 8011946:	2100      	movs	r1, #0
 8011948:	4618      	mov	r0, r3
 801194a:	f003 f93f 	bl	8014bcc <memset>
 801194e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011950:	4a0c      	ldr	r2, [pc, #48]	@ (8011984 <prvInitialiseNewTask+0x14c>)
 8011952:	655a      	str	r2, [r3, #84]	@ 0x54
 8011954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011956:	4a0c      	ldr	r2, [pc, #48]	@ (8011988 <prvInitialiseNewTask+0x150>)
 8011958:	659a      	str	r2, [r3, #88]	@ 0x58
 801195a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801195c:	4a0b      	ldr	r2, [pc, #44]	@ (801198c <prvInitialiseNewTask+0x154>)
 801195e:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011960:	683a      	ldr	r2, [r7, #0]
 8011962:	68f9      	ldr	r1, [r7, #12]
 8011964:	69b8      	ldr	r0, [r7, #24]
 8011966:	f000 ff75 	bl	8012854 <pxPortInitialiseStack>
 801196a:	4602      	mov	r2, r0
 801196c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801196e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011972:	2b00      	cmp	r3, #0
 8011974:	d002      	beq.n	801197c <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801197a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801197c:	bf00      	nop
 801197e:	3720      	adds	r7, #32
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}
 8011984:	2000e3e8 	.word	0x2000e3e8
 8011988:	2000e450 	.word	0x2000e450
 801198c:	2000e4b8 	.word	0x2000e4b8

08011990 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011998:	f001 f868 	bl	8012a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801199c:	4b2a      	ldr	r3, [pc, #168]	@ (8011a48 <prvAddNewTaskToReadyList+0xb8>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	3301      	adds	r3, #1
 80119a2:	4a29      	ldr	r2, [pc, #164]	@ (8011a48 <prvAddNewTaskToReadyList+0xb8>)
 80119a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80119a6:	4b29      	ldr	r3, [pc, #164]	@ (8011a4c <prvAddNewTaskToReadyList+0xbc>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d109      	bne.n	80119c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80119ae:	4a27      	ldr	r2, [pc, #156]	@ (8011a4c <prvAddNewTaskToReadyList+0xbc>)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80119b4:	4b24      	ldr	r3, [pc, #144]	@ (8011a48 <prvAddNewTaskToReadyList+0xb8>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d110      	bne.n	80119de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80119bc:	f000 fc40 	bl	8012240 <prvInitialiseTaskLists>
 80119c0:	e00d      	b.n	80119de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80119c2:	4b23      	ldr	r3, [pc, #140]	@ (8011a50 <prvAddNewTaskToReadyList+0xc0>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d109      	bne.n	80119de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80119ca:	4b20      	ldr	r3, [pc, #128]	@ (8011a4c <prvAddNewTaskToReadyList+0xbc>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d802      	bhi.n	80119de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80119d8:	4a1c      	ldr	r2, [pc, #112]	@ (8011a4c <prvAddNewTaskToReadyList+0xbc>)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80119de:	4b1d      	ldr	r3, [pc, #116]	@ (8011a54 <prvAddNewTaskToReadyList+0xc4>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	3301      	adds	r3, #1
 80119e4:	4a1b      	ldr	r2, [pc, #108]	@ (8011a54 <prvAddNewTaskToReadyList+0xc4>)
 80119e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119ec:	2201      	movs	r2, #1
 80119ee:	409a      	lsls	r2, r3
 80119f0:	4b19      	ldr	r3, [pc, #100]	@ (8011a58 <prvAddNewTaskToReadyList+0xc8>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4313      	orrs	r3, r2
 80119f6:	4a18      	ldr	r2, [pc, #96]	@ (8011a58 <prvAddNewTaskToReadyList+0xc8>)
 80119f8:	6013      	str	r3, [r2, #0]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119fe:	4613      	mov	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	4413      	add	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4a15      	ldr	r2, [pc, #84]	@ (8011a5c <prvAddNewTaskToReadyList+0xcc>)
 8011a08:	441a      	add	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	3304      	adds	r3, #4
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4610      	mov	r0, r2
 8011a12:	f7fe fe46 	bl	80106a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011a16:	f001 f85f 	bl	8012ad8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a50 <prvAddNewTaskToReadyList+0xc0>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00e      	beq.n	8011a40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a22:	4b0a      	ldr	r3, [pc, #40]	@ (8011a4c <prvAddNewTaskToReadyList+0xbc>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d207      	bcs.n	8011a40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011a30:	4b0b      	ldr	r3, [pc, #44]	@ (8011a60 <prvAddNewTaskToReadyList+0xd0>)
 8011a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a36:	601a      	str	r2, [r3, #0]
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	2000639c 	.word	0x2000639c
 8011a4c:	2000629c 	.word	0x2000629c
 8011a50:	200063a8 	.word	0x200063a8
 8011a54:	200063b8 	.word	0x200063b8
 8011a58:	200063a4 	.word	0x200063a4
 8011a5c:	200062a0 	.word	0x200062a0
 8011a60:	e000ed04 	.word	0xe000ed04

08011a64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d01a      	beq.n	8011aac <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011a76:	4b15      	ldr	r3, [pc, #84]	@ (8011acc <vTaskDelay+0x68>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d00d      	beq.n	8011a9a <vTaskDelay+0x36>
	__asm volatile
 8011a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a82:	b672      	cpsid	i
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	b662      	cpsie	i
 8011a92:	60bb      	str	r3, [r7, #8]
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop
 8011a98:	e7fd      	b.n	8011a96 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011a9a:	f000 f889 	bl	8011bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 fe71 	bl	8012788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011aa6:	f000 f891 	bl	8011bcc <xTaskResumeAll>
 8011aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d107      	bne.n	8011ac2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8011ab2:	4b07      	ldr	r3, [pc, #28]	@ (8011ad0 <vTaskDelay+0x6c>)
 8011ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ab8:	601a      	str	r2, [r3, #0]
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ac2:	bf00      	nop
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	200063c4 	.word	0x200063c4
 8011ad0:	e000ed04 	.word	0xe000ed04

08011ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b08a      	sub	sp, #40	@ 0x28
 8011ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011ada:	2300      	movs	r3, #0
 8011adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011ae2:	463a      	mov	r2, r7
 8011ae4:	1d39      	adds	r1, r7, #4
 8011ae6:	f107 0308 	add.w	r3, r7, #8
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7f0 faec 	bl	80020c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68ba      	ldr	r2, [r7, #8]
 8011af6:	9202      	str	r2, [sp, #8]
 8011af8:	9301      	str	r3, [sp, #4]
 8011afa:	2300      	movs	r3, #0
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	2300      	movs	r3, #0
 8011b00:	460a      	mov	r2, r1
 8011b02:	4923      	ldr	r1, [pc, #140]	@ (8011b90 <vTaskStartScheduler+0xbc>)
 8011b04:	4823      	ldr	r0, [pc, #140]	@ (8011b94 <vTaskStartScheduler+0xc0>)
 8011b06:	f7ff fdeb 	bl	80116e0 <xTaskCreateStatic>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4a22      	ldr	r2, [pc, #136]	@ (8011b98 <vTaskStartScheduler+0xc4>)
 8011b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011b10:	4b21      	ldr	r3, [pc, #132]	@ (8011b98 <vTaskStartScheduler+0xc4>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d002      	beq.n	8011b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	617b      	str	r3, [r7, #20]
 8011b1c:	e001      	b.n	8011b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d11d      	bne.n	8011b64 <vTaskStartScheduler+0x90>
	__asm volatile
 8011b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b2c:	b672      	cpsid	i
 8011b2e:	f383 8811 	msr	BASEPRI, r3
 8011b32:	f3bf 8f6f 	isb	sy
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	b662      	cpsie	i
 8011b3c:	613b      	str	r3, [r7, #16]
}
 8011b3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011b40:	4b16      	ldr	r3, [pc, #88]	@ (8011b9c <vTaskStartScheduler+0xc8>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	3350      	adds	r3, #80	@ 0x50
 8011b46:	4a16      	ldr	r2, [pc, #88]	@ (8011ba0 <vTaskStartScheduler+0xcc>)
 8011b48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011b4a:	4b16      	ldr	r3, [pc, #88]	@ (8011ba4 <vTaskStartScheduler+0xd0>)
 8011b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011b52:	4b15      	ldr	r3, [pc, #84]	@ (8011ba8 <vTaskStartScheduler+0xd4>)
 8011b54:	2201      	movs	r2, #1
 8011b56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011b58:	4b14      	ldr	r3, [pc, #80]	@ (8011bac <vTaskStartScheduler+0xd8>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011b5e:	f000 ff07 	bl	8012970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011b62:	e011      	b.n	8011b88 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b6a:	d10d      	bne.n	8011b88 <vTaskStartScheduler+0xb4>
	__asm volatile
 8011b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b70:	b672      	cpsid	i
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	b662      	cpsie	i
 8011b80:	60fb      	str	r3, [r7, #12]
}
 8011b82:	bf00      	nop
 8011b84:	bf00      	nop
 8011b86:	e7fd      	b.n	8011b84 <vTaskStartScheduler+0xb0>
}
 8011b88:	bf00      	nop
 8011b8a:	3718      	adds	r7, #24
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	08017a8c 	.word	0x08017a8c
 8011b94:	0801220d 	.word	0x0801220d
 8011b98:	200063c0 	.word	0x200063c0
 8011b9c:	2000629c 	.word	0x2000629c
 8011ba0:	2000018c 	.word	0x2000018c
 8011ba4:	200063bc 	.word	0x200063bc
 8011ba8:	200063a8 	.word	0x200063a8
 8011bac:	200063a0 	.word	0x200063a0

08011bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011bb4:	4b04      	ldr	r3, [pc, #16]	@ (8011bc8 <vTaskSuspendAll+0x18>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	3301      	adds	r3, #1
 8011bba:	4a03      	ldr	r2, [pc, #12]	@ (8011bc8 <vTaskSuspendAll+0x18>)
 8011bbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011bbe:	bf00      	nop
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	200063c4 	.word	0x200063c4

08011bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011bda:	4b43      	ldr	r3, [pc, #268]	@ (8011ce8 <xTaskResumeAll+0x11c>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10d      	bne.n	8011bfe <xTaskResumeAll+0x32>
	__asm volatile
 8011be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011be6:	b672      	cpsid	i
 8011be8:	f383 8811 	msr	BASEPRI, r3
 8011bec:	f3bf 8f6f 	isb	sy
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	b662      	cpsie	i
 8011bf6:	603b      	str	r3, [r7, #0]
}
 8011bf8:	bf00      	nop
 8011bfa:	bf00      	nop
 8011bfc:	e7fd      	b.n	8011bfa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011bfe:	f000 ff35 	bl	8012a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011c02:	4b39      	ldr	r3, [pc, #228]	@ (8011ce8 <xTaskResumeAll+0x11c>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3b01      	subs	r3, #1
 8011c08:	4a37      	ldr	r2, [pc, #220]	@ (8011ce8 <xTaskResumeAll+0x11c>)
 8011c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c0c:	4b36      	ldr	r3, [pc, #216]	@ (8011ce8 <xTaskResumeAll+0x11c>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d161      	bne.n	8011cd8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011c14:	4b35      	ldr	r3, [pc, #212]	@ (8011cec <xTaskResumeAll+0x120>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d05d      	beq.n	8011cd8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c1c:	e02e      	b.n	8011c7c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c1e:	4b34      	ldr	r3, [pc, #208]	@ (8011cf0 <xTaskResumeAll+0x124>)
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	3318      	adds	r3, #24
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fe fd96 	bl	801075c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	3304      	adds	r3, #4
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7fe fd91 	bl	801075c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c3e:	2201      	movs	r2, #1
 8011c40:	409a      	lsls	r2, r3
 8011c42:	4b2c      	ldr	r3, [pc, #176]	@ (8011cf4 <xTaskResumeAll+0x128>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4313      	orrs	r3, r2
 8011c48:	4a2a      	ldr	r2, [pc, #168]	@ (8011cf4 <xTaskResumeAll+0x128>)
 8011c4a:	6013      	str	r3, [r2, #0]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c50:	4613      	mov	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	4413      	add	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4a27      	ldr	r2, [pc, #156]	@ (8011cf8 <xTaskResumeAll+0x12c>)
 8011c5a:	441a      	add	r2, r3
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	4619      	mov	r1, r3
 8011c62:	4610      	mov	r0, r2
 8011c64:	f7fe fd1d 	bl	80106a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c6c:	4b23      	ldr	r3, [pc, #140]	@ (8011cfc <xTaskResumeAll+0x130>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d302      	bcc.n	8011c7c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8011c76:	4b22      	ldr	r3, [pc, #136]	@ (8011d00 <xTaskResumeAll+0x134>)
 8011c78:	2201      	movs	r2, #1
 8011c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8011cf0 <xTaskResumeAll+0x124>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d1cc      	bne.n	8011c1e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011c8a:	f000 fb7f 	bl	801238c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8011d04 <xTaskResumeAll+0x138>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d010      	beq.n	8011cbc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011c9a:	f000 f859 	bl	8011d50 <xTaskIncrementTick>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d002      	beq.n	8011caa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8011ca4:	4b16      	ldr	r3, [pc, #88]	@ (8011d00 <xTaskResumeAll+0x134>)
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	3b01      	subs	r3, #1
 8011cae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d1f1      	bne.n	8011c9a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8011cb6:	4b13      	ldr	r3, [pc, #76]	@ (8011d04 <xTaskResumeAll+0x138>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011cbc:	4b10      	ldr	r3, [pc, #64]	@ (8011d00 <xTaskResumeAll+0x134>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d009      	beq.n	8011cd8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8011d08 <xTaskResumeAll+0x13c>)
 8011cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	f3bf 8f4f 	dsb	sy
 8011cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011cd8:	f000 fefe 	bl	8012ad8 <vPortExitCritical>

	return xAlreadyYielded;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	200063c4 	.word	0x200063c4
 8011cec:	2000639c 	.word	0x2000639c
 8011cf0:	2000635c 	.word	0x2000635c
 8011cf4:	200063a4 	.word	0x200063a4
 8011cf8:	200062a0 	.word	0x200062a0
 8011cfc:	2000629c 	.word	0x2000629c
 8011d00:	200063b0 	.word	0x200063b0
 8011d04:	200063ac 	.word	0x200063ac
 8011d08:	e000ed04 	.word	0xe000ed04

08011d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011d12:	4b05      	ldr	r3, [pc, #20]	@ (8011d28 <xTaskGetTickCount+0x1c>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011d18:	687b      	ldr	r3, [r7, #4]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	370c      	adds	r7, #12
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	200063a0 	.word	0x200063a0

08011d2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b082      	sub	sp, #8
 8011d30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d32:	f000 ff83 	bl	8012c3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011d36:	2300      	movs	r3, #0
 8011d38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011d3a:	4b04      	ldr	r3, [pc, #16]	@ (8011d4c <xTaskGetTickCountFromISR+0x20>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d40:	683b      	ldr	r3, [r7, #0]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	200063a0 	.word	0x200063a0

08011d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b086      	sub	sp, #24
 8011d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011d56:	2300      	movs	r3, #0
 8011d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d5a:	4b50      	ldr	r3, [pc, #320]	@ (8011e9c <xTaskIncrementTick+0x14c>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f040 808b 	bne.w	8011e7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011d64:	4b4e      	ldr	r3, [pc, #312]	@ (8011ea0 <xTaskIncrementTick+0x150>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8011ea0 <xTaskIncrementTick+0x150>)
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d123      	bne.n	8011dc0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8011d78:	4b4a      	ldr	r3, [pc, #296]	@ (8011ea4 <xTaskIncrementTick+0x154>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00d      	beq.n	8011d9e <xTaskIncrementTick+0x4e>
	__asm volatile
 8011d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d86:	b672      	cpsid	i
 8011d88:	f383 8811 	msr	BASEPRI, r3
 8011d8c:	f3bf 8f6f 	isb	sy
 8011d90:	f3bf 8f4f 	dsb	sy
 8011d94:	b662      	cpsie	i
 8011d96:	603b      	str	r3, [r7, #0]
}
 8011d98:	bf00      	nop
 8011d9a:	bf00      	nop
 8011d9c:	e7fd      	b.n	8011d9a <xTaskIncrementTick+0x4a>
 8011d9e:	4b41      	ldr	r3, [pc, #260]	@ (8011ea4 <xTaskIncrementTick+0x154>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	60fb      	str	r3, [r7, #12]
 8011da4:	4b40      	ldr	r3, [pc, #256]	@ (8011ea8 <xTaskIncrementTick+0x158>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4a3e      	ldr	r2, [pc, #248]	@ (8011ea4 <xTaskIncrementTick+0x154>)
 8011daa:	6013      	str	r3, [r2, #0]
 8011dac:	4a3e      	ldr	r2, [pc, #248]	@ (8011ea8 <xTaskIncrementTick+0x158>)
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	4b3e      	ldr	r3, [pc, #248]	@ (8011eac <xTaskIncrementTick+0x15c>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	3301      	adds	r3, #1
 8011db8:	4a3c      	ldr	r2, [pc, #240]	@ (8011eac <xTaskIncrementTick+0x15c>)
 8011dba:	6013      	str	r3, [r2, #0]
 8011dbc:	f000 fae6 	bl	801238c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8011eb0 <xTaskIncrementTick+0x160>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	693a      	ldr	r2, [r7, #16]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d348      	bcc.n	8011e5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dca:	4b36      	ldr	r3, [pc, #216]	@ (8011ea4 <xTaskIncrementTick+0x154>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d104      	bne.n	8011dde <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dd4:	4b36      	ldr	r3, [pc, #216]	@ (8011eb0 <xTaskIncrementTick+0x160>)
 8011dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dda:	601a      	str	r2, [r3, #0]
					break;
 8011ddc:	e03e      	b.n	8011e5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dde:	4b31      	ldr	r3, [pc, #196]	@ (8011ea4 <xTaskIncrementTick+0x154>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011dee:	693a      	ldr	r2, [r7, #16]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d203      	bcs.n	8011dfe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011df6:	4a2e      	ldr	r2, [pc, #184]	@ (8011eb0 <xTaskIncrementTick+0x160>)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011dfc:	e02e      	b.n	8011e5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	3304      	adds	r3, #4
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fe fcaa 	bl	801075c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d004      	beq.n	8011e1a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	3318      	adds	r3, #24
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fe fca1 	bl	801075c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e1e:	2201      	movs	r2, #1
 8011e20:	409a      	lsls	r2, r3
 8011e22:	4b24      	ldr	r3, [pc, #144]	@ (8011eb4 <xTaskIncrementTick+0x164>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4313      	orrs	r3, r2
 8011e28:	4a22      	ldr	r2, [pc, #136]	@ (8011eb4 <xTaskIncrementTick+0x164>)
 8011e2a:	6013      	str	r3, [r2, #0]
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e30:	4613      	mov	r3, r2
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	4413      	add	r3, r2
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4a1f      	ldr	r2, [pc, #124]	@ (8011eb8 <xTaskIncrementTick+0x168>)
 8011e3a:	441a      	add	r2, r3
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	3304      	adds	r3, #4
 8011e40:	4619      	mov	r1, r3
 8011e42:	4610      	mov	r0, r2
 8011e44:	f7fe fc2d 	bl	80106a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8011ebc <xTaskIncrementTick+0x16c>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d3b9      	bcc.n	8011dca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8011e56:	2301      	movs	r3, #1
 8011e58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e5a:	e7b6      	b.n	8011dca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011e5c:	4b17      	ldr	r3, [pc, #92]	@ (8011ebc <xTaskIncrementTick+0x16c>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e62:	4915      	ldr	r1, [pc, #84]	@ (8011eb8 <xTaskIncrementTick+0x168>)
 8011e64:	4613      	mov	r3, r2
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	4413      	add	r3, r2
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	440b      	add	r3, r1
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d907      	bls.n	8011e84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011e74:	2301      	movs	r3, #1
 8011e76:	617b      	str	r3, [r7, #20]
 8011e78:	e004      	b.n	8011e84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011e7a:	4b11      	ldr	r3, [pc, #68]	@ (8011ec0 <xTaskIncrementTick+0x170>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	4a0f      	ldr	r2, [pc, #60]	@ (8011ec0 <xTaskIncrementTick+0x170>)
 8011e82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011e84:	4b0f      	ldr	r3, [pc, #60]	@ (8011ec4 <xTaskIncrementTick+0x174>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d001      	beq.n	8011e90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011e90:	697b      	ldr	r3, [r7, #20]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3718      	adds	r7, #24
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	200063c4 	.word	0x200063c4
 8011ea0:	200063a0 	.word	0x200063a0
 8011ea4:	20006354 	.word	0x20006354
 8011ea8:	20006358 	.word	0x20006358
 8011eac:	200063b4 	.word	0x200063b4
 8011eb0:	200063bc 	.word	0x200063bc
 8011eb4:	200063a4 	.word	0x200063a4
 8011eb8:	200062a0 	.word	0x200062a0
 8011ebc:	2000629c 	.word	0x2000629c
 8011ec0:	200063ac 	.word	0x200063ac
 8011ec4:	200063b0 	.word	0x200063b0

08011ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b088      	sub	sp, #32
 8011ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011ece:	4b3d      	ldr	r3, [pc, #244]	@ (8011fc4 <vTaskSwitchContext+0xfc>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8011fc8 <vTaskSwitchContext+0x100>)
 8011ed8:	2201      	movs	r2, #1
 8011eda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011edc:	e06e      	b.n	8011fbc <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8011ede:	4b3a      	ldr	r3, [pc, #232]	@ (8011fc8 <vTaskSwitchContext+0x100>)
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011ee4:	4b39      	ldr	r3, [pc, #228]	@ (8011fcc <vTaskSwitchContext+0x104>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eea:	61fb      	str	r3, [r7, #28]
 8011eec:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8011ef0:	61bb      	str	r3, [r7, #24]
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	69ba      	ldr	r2, [r7, #24]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d111      	bne.n	8011f20 <vTaskSwitchContext+0x58>
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	3304      	adds	r3, #4
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	69ba      	ldr	r2, [r7, #24]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d10b      	bne.n	8011f20 <vTaskSwitchContext+0x58>
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	3308      	adds	r3, #8
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	69ba      	ldr	r2, [r7, #24]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d105      	bne.n	8011f20 <vTaskSwitchContext+0x58>
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	330c      	adds	r3, #12
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	69ba      	ldr	r2, [r7, #24]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d008      	beq.n	8011f32 <vTaskSwitchContext+0x6a>
 8011f20:	4b2a      	ldr	r3, [pc, #168]	@ (8011fcc <vTaskSwitchContext+0x104>)
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	4b29      	ldr	r3, [pc, #164]	@ (8011fcc <vTaskSwitchContext+0x104>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	3334      	adds	r3, #52	@ 0x34
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	4610      	mov	r0, r2
 8011f2e:	f7f0 f8b8 	bl	80020a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f32:	4b27      	ldr	r3, [pc, #156]	@ (8011fd0 <vTaskSwitchContext+0x108>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	fab3 f383 	clz	r3, r3
 8011f3e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011f40:	7afb      	ldrb	r3, [r7, #11]
 8011f42:	f1c3 031f 	rsb	r3, r3, #31
 8011f46:	617b      	str	r3, [r7, #20]
 8011f48:	4922      	ldr	r1, [pc, #136]	@ (8011fd4 <vTaskSwitchContext+0x10c>)
 8011f4a:	697a      	ldr	r2, [r7, #20]
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	4413      	add	r3, r2
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	440b      	add	r3, r1
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10d      	bne.n	8011f78 <vTaskSwitchContext+0xb0>
	__asm volatile
 8011f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f60:	b672      	cpsid	i
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	b662      	cpsie	i
 8011f70:	607b      	str	r3, [r7, #4]
}
 8011f72:	bf00      	nop
 8011f74:	bf00      	nop
 8011f76:	e7fd      	b.n	8011f74 <vTaskSwitchContext+0xac>
 8011f78:	697a      	ldr	r2, [r7, #20]
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	4413      	add	r3, r2
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	4a14      	ldr	r2, [pc, #80]	@ (8011fd4 <vTaskSwitchContext+0x10c>)
 8011f84:	4413      	add	r3, r2
 8011f86:	613b      	str	r3, [r7, #16]
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	685a      	ldr	r2, [r3, #4]
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	605a      	str	r2, [r3, #4]
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	685a      	ldr	r2, [r3, #4]
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	3308      	adds	r3, #8
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d104      	bne.n	8011fa8 <vTaskSwitchContext+0xe0>
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	685a      	ldr	r2, [r3, #4]
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	605a      	str	r2, [r3, #4]
 8011fa8:	693b      	ldr	r3, [r7, #16]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	4a07      	ldr	r2, [pc, #28]	@ (8011fcc <vTaskSwitchContext+0x104>)
 8011fb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011fb2:	4b06      	ldr	r3, [pc, #24]	@ (8011fcc <vTaskSwitchContext+0x104>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	3350      	adds	r3, #80	@ 0x50
 8011fb8:	4a07      	ldr	r2, [pc, #28]	@ (8011fd8 <vTaskSwitchContext+0x110>)
 8011fba:	6013      	str	r3, [r2, #0]
}
 8011fbc:	bf00      	nop
 8011fbe:	3720      	adds	r7, #32
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	200063c4 	.word	0x200063c4
 8011fc8:	200063b0 	.word	0x200063b0
 8011fcc:	2000629c 	.word	0x2000629c
 8011fd0:	200063a4 	.word	0x200063a4
 8011fd4:	200062a0 	.word	0x200062a0
 8011fd8:	2000018c 	.word	0x2000018c

08011fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b084      	sub	sp, #16
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d10d      	bne.n	8012008 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8011fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff0:	b672      	cpsid	i
 8011ff2:	f383 8811 	msr	BASEPRI, r3
 8011ff6:	f3bf 8f6f 	isb	sy
 8011ffa:	f3bf 8f4f 	dsb	sy
 8011ffe:	b662      	cpsie	i
 8012000:	60fb      	str	r3, [r7, #12]
}
 8012002:	bf00      	nop
 8012004:	bf00      	nop
 8012006:	e7fd      	b.n	8012004 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012008:	4b07      	ldr	r3, [pc, #28]	@ (8012028 <vTaskPlaceOnEventList+0x4c>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3318      	adds	r3, #24
 801200e:	4619      	mov	r1, r3
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7fe fb6a 	bl	80106ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012016:	2101      	movs	r1, #1
 8012018:	6838      	ldr	r0, [r7, #0]
 801201a:	f000 fbb5 	bl	8012788 <prvAddCurrentTaskToDelayedList>
}
 801201e:	bf00      	nop
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	2000629c 	.word	0x2000629c

0801202c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b086      	sub	sp, #24
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10d      	bne.n	801205e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8012042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012046:	b672      	cpsid	i
 8012048:	f383 8811 	msr	BASEPRI, r3
 801204c:	f3bf 8f6f 	isb	sy
 8012050:	f3bf 8f4f 	dsb	sy
 8012054:	b662      	cpsie	i
 8012056:	60fb      	str	r3, [r7, #12]
}
 8012058:	bf00      	nop
 801205a:	bf00      	nop
 801205c:	e7fd      	b.n	801205a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	3318      	adds	r3, #24
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe fb7a 	bl	801075c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012068:	4b1d      	ldr	r3, [pc, #116]	@ (80120e0 <xTaskRemoveFromEventList+0xb4>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d11c      	bne.n	80120aa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	3304      	adds	r3, #4
 8012074:	4618      	mov	r0, r3
 8012076:	f7fe fb71 	bl	801075c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801207e:	2201      	movs	r2, #1
 8012080:	409a      	lsls	r2, r3
 8012082:	4b18      	ldr	r3, [pc, #96]	@ (80120e4 <xTaskRemoveFromEventList+0xb8>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4313      	orrs	r3, r2
 8012088:	4a16      	ldr	r2, [pc, #88]	@ (80120e4 <xTaskRemoveFromEventList+0xb8>)
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012090:	4613      	mov	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4413      	add	r3, r2
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	4a13      	ldr	r2, [pc, #76]	@ (80120e8 <xTaskRemoveFromEventList+0xbc>)
 801209a:	441a      	add	r2, r3
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	3304      	adds	r3, #4
 80120a0:	4619      	mov	r1, r3
 80120a2:	4610      	mov	r0, r2
 80120a4:	f7fe fafd 	bl	80106a2 <vListInsertEnd>
 80120a8:	e005      	b.n	80120b6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	3318      	adds	r3, #24
 80120ae:	4619      	mov	r1, r3
 80120b0:	480e      	ldr	r0, [pc, #56]	@ (80120ec <xTaskRemoveFromEventList+0xc0>)
 80120b2:	f7fe faf6 	bl	80106a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120ba:	4b0d      	ldr	r3, [pc, #52]	@ (80120f0 <xTaskRemoveFromEventList+0xc4>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d905      	bls.n	80120d0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80120c4:	2301      	movs	r3, #1
 80120c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80120c8:	4b0a      	ldr	r3, [pc, #40]	@ (80120f4 <xTaskRemoveFromEventList+0xc8>)
 80120ca:	2201      	movs	r2, #1
 80120cc:	601a      	str	r2, [r3, #0]
 80120ce:	e001      	b.n	80120d4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80120d0:	2300      	movs	r3, #0
 80120d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80120d4:	697b      	ldr	r3, [r7, #20]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3718      	adds	r7, #24
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	200063c4 	.word	0x200063c4
 80120e4:	200063a4 	.word	0x200063a4
 80120e8:	200062a0 	.word	0x200062a0
 80120ec:	2000635c 	.word	0x2000635c
 80120f0:	2000629c 	.word	0x2000629c
 80120f4:	200063b0 	.word	0x200063b0

080120f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012100:	4b06      	ldr	r3, [pc, #24]	@ (801211c <vTaskInternalSetTimeOutState+0x24>)
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012108:	4b05      	ldr	r3, [pc, #20]	@ (8012120 <vTaskInternalSetTimeOutState+0x28>)
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	605a      	str	r2, [r3, #4]
}
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr
 801211c:	200063b4 	.word	0x200063b4
 8012120:	200063a0 	.word	0x200063a0

08012124 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10d      	bne.n	8012150 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8012134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012138:	b672      	cpsid	i
 801213a:	f383 8811 	msr	BASEPRI, r3
 801213e:	f3bf 8f6f 	isb	sy
 8012142:	f3bf 8f4f 	dsb	sy
 8012146:	b662      	cpsie	i
 8012148:	613b      	str	r3, [r7, #16]
}
 801214a:	bf00      	nop
 801214c:	bf00      	nop
 801214e:	e7fd      	b.n	801214c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d10d      	bne.n	8012172 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8012156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801215a:	b672      	cpsid	i
 801215c:	f383 8811 	msr	BASEPRI, r3
 8012160:	f3bf 8f6f 	isb	sy
 8012164:	f3bf 8f4f 	dsb	sy
 8012168:	b662      	cpsie	i
 801216a:	60fb      	str	r3, [r7, #12]
}
 801216c:	bf00      	nop
 801216e:	bf00      	nop
 8012170:	e7fd      	b.n	801216e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8012172:	f000 fc7b 	bl	8012a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012176:	4b1d      	ldr	r3, [pc, #116]	@ (80121ec <xTaskCheckForTimeOut+0xc8>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	69ba      	ldr	r2, [r7, #24]
 8012182:	1ad3      	subs	r3, r2, r3
 8012184:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801218e:	d102      	bne.n	8012196 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012190:	2300      	movs	r3, #0
 8012192:	61fb      	str	r3, [r7, #28]
 8012194:	e023      	b.n	80121de <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	4b15      	ldr	r3, [pc, #84]	@ (80121f0 <xTaskCheckForTimeOut+0xcc>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d007      	beq.n	80121b2 <xTaskCheckForTimeOut+0x8e>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	69ba      	ldr	r2, [r7, #24]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d302      	bcc.n	80121b2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80121ac:	2301      	movs	r3, #1
 80121ae:	61fb      	str	r3, [r7, #28]
 80121b0:	e015      	b.n	80121de <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	697a      	ldr	r2, [r7, #20]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d20b      	bcs.n	80121d4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	1ad2      	subs	r2, r2, r3
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ff ff95 	bl	80120f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80121ce:	2300      	movs	r3, #0
 80121d0:	61fb      	str	r3, [r7, #28]
 80121d2:	e004      	b.n	80121de <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	2200      	movs	r2, #0
 80121d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80121da:	2301      	movs	r3, #1
 80121dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80121de:	f000 fc7b 	bl	8012ad8 <vPortExitCritical>

	return xReturn;
 80121e2:	69fb      	ldr	r3, [r7, #28]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3720      	adds	r7, #32
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	200063a0 	.word	0x200063a0
 80121f0:	200063b4 	.word	0x200063b4

080121f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80121f4:	b480      	push	{r7}
 80121f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80121f8:	4b03      	ldr	r3, [pc, #12]	@ (8012208 <vTaskMissedYield+0x14>)
 80121fa:	2201      	movs	r2, #1
 80121fc:	601a      	str	r2, [r3, #0]
}
 80121fe:	bf00      	nop
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	200063b0 	.word	0x200063b0

0801220c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012214:	f000 f854 	bl	80122c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012218:	4b07      	ldr	r3, [pc, #28]	@ (8012238 <prvIdleTask+0x2c>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d907      	bls.n	8012230 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012220:	4b06      	ldr	r3, [pc, #24]	@ (801223c <prvIdleTask+0x30>)
 8012222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012226:	601a      	str	r2, [r3, #0]
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012230:	f7ef ff30 	bl	8002094 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012234:	e7ee      	b.n	8012214 <prvIdleTask+0x8>
 8012236:	bf00      	nop
 8012238:	200062a0 	.word	0x200062a0
 801223c:	e000ed04 	.word	0xe000ed04

08012240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012246:	2300      	movs	r3, #0
 8012248:	607b      	str	r3, [r7, #4]
 801224a:	e00c      	b.n	8012266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	4613      	mov	r3, r2
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	4413      	add	r3, r2
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	4a12      	ldr	r2, [pc, #72]	@ (80122a0 <prvInitialiseTaskLists+0x60>)
 8012258:	4413      	add	r3, r2
 801225a:	4618      	mov	r0, r3
 801225c:	f7fe f9f4 	bl	8010648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	3301      	adds	r3, #1
 8012264:	607b      	str	r3, [r7, #4]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b06      	cmp	r3, #6
 801226a:	d9ef      	bls.n	801224c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801226c:	480d      	ldr	r0, [pc, #52]	@ (80122a4 <prvInitialiseTaskLists+0x64>)
 801226e:	f7fe f9eb 	bl	8010648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012272:	480d      	ldr	r0, [pc, #52]	@ (80122a8 <prvInitialiseTaskLists+0x68>)
 8012274:	f7fe f9e8 	bl	8010648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012278:	480c      	ldr	r0, [pc, #48]	@ (80122ac <prvInitialiseTaskLists+0x6c>)
 801227a:	f7fe f9e5 	bl	8010648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801227e:	480c      	ldr	r0, [pc, #48]	@ (80122b0 <prvInitialiseTaskLists+0x70>)
 8012280:	f7fe f9e2 	bl	8010648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012284:	480b      	ldr	r0, [pc, #44]	@ (80122b4 <prvInitialiseTaskLists+0x74>)
 8012286:	f7fe f9df 	bl	8010648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801228a:	4b0b      	ldr	r3, [pc, #44]	@ (80122b8 <prvInitialiseTaskLists+0x78>)
 801228c:	4a05      	ldr	r2, [pc, #20]	@ (80122a4 <prvInitialiseTaskLists+0x64>)
 801228e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012290:	4b0a      	ldr	r3, [pc, #40]	@ (80122bc <prvInitialiseTaskLists+0x7c>)
 8012292:	4a05      	ldr	r2, [pc, #20]	@ (80122a8 <prvInitialiseTaskLists+0x68>)
 8012294:	601a      	str	r2, [r3, #0]
}
 8012296:	bf00      	nop
 8012298:	3708      	adds	r7, #8
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	200062a0 	.word	0x200062a0
 80122a4:	2000632c 	.word	0x2000632c
 80122a8:	20006340 	.word	0x20006340
 80122ac:	2000635c 	.word	0x2000635c
 80122b0:	20006370 	.word	0x20006370
 80122b4:	20006388 	.word	0x20006388
 80122b8:	20006354 	.word	0x20006354
 80122bc:	20006358 	.word	0x20006358

080122c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80122c6:	e019      	b.n	80122fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80122c8:	f000 fbd0 	bl	8012a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122cc:	4b10      	ldr	r3, [pc, #64]	@ (8012310 <prvCheckTasksWaitingTermination+0x50>)
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	3304      	adds	r3, #4
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fe fa3f 	bl	801075c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80122de:	4b0d      	ldr	r3, [pc, #52]	@ (8012314 <prvCheckTasksWaitingTermination+0x54>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	3b01      	subs	r3, #1
 80122e4:	4a0b      	ldr	r2, [pc, #44]	@ (8012314 <prvCheckTasksWaitingTermination+0x54>)
 80122e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80122e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012318 <prvCheckTasksWaitingTermination+0x58>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	3b01      	subs	r3, #1
 80122ee:	4a0a      	ldr	r2, [pc, #40]	@ (8012318 <prvCheckTasksWaitingTermination+0x58>)
 80122f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80122f2:	f000 fbf1 	bl	8012ad8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 f810 	bl	801231c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80122fc:	4b06      	ldr	r3, [pc, #24]	@ (8012318 <prvCheckTasksWaitingTermination+0x58>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d1e1      	bne.n	80122c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012304:	bf00      	nop
 8012306:	bf00      	nop
 8012308:	3708      	adds	r7, #8
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop
 8012310:	20006370 	.word	0x20006370
 8012314:	2000639c 	.word	0x2000639c
 8012318:	20006384 	.word	0x20006384

0801231c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3350      	adds	r3, #80	@ 0x50
 8012328:	4618      	mov	r0, r3
 801232a:	f002 fce7 	bl	8014cfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8012334:	2b00      	cmp	r3, #0
 8012336:	d108      	bne.n	801234a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801233c:	4618      	mov	r0, r3
 801233e:	f000 fd95 	bl	8012e6c <vPortFree>
				vPortFree( pxTCB );
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 fd92 	bl	8012e6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012348:	e01b      	b.n	8012382 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8012350:	2b01      	cmp	r3, #1
 8012352:	d103      	bne.n	801235c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 fd89 	bl	8012e6c <vPortFree>
	}
 801235a:	e012      	b.n	8012382 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8012362:	2b02      	cmp	r3, #2
 8012364:	d00d      	beq.n	8012382 <prvDeleteTCB+0x66>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236a:	b672      	cpsid	i
 801236c:	f383 8811 	msr	BASEPRI, r3
 8012370:	f3bf 8f6f 	isb	sy
 8012374:	f3bf 8f4f 	dsb	sy
 8012378:	b662      	cpsie	i
 801237a:	60fb      	str	r3, [r7, #12]
}
 801237c:	bf00      	nop
 801237e:	bf00      	nop
 8012380:	e7fd      	b.n	801237e <prvDeleteTCB+0x62>
	}
 8012382:	bf00      	nop
 8012384:	3710      	adds	r7, #16
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
	...

0801238c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012392:	4b0c      	ldr	r3, [pc, #48]	@ (80123c4 <prvResetNextTaskUnblockTime+0x38>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d104      	bne.n	80123a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801239c:	4b0a      	ldr	r3, [pc, #40]	@ (80123c8 <prvResetNextTaskUnblockTime+0x3c>)
 801239e:	f04f 32ff 	mov.w	r2, #4294967295
 80123a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80123a4:	e008      	b.n	80123b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123a6:	4b07      	ldr	r3, [pc, #28]	@ (80123c4 <prvResetNextTaskUnblockTime+0x38>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	4a04      	ldr	r2, [pc, #16]	@ (80123c8 <prvResetNextTaskUnblockTime+0x3c>)
 80123b6:	6013      	str	r3, [r2, #0]
}
 80123b8:	bf00      	nop
 80123ba:	370c      	adds	r7, #12
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr
 80123c4:	20006354 	.word	0x20006354
 80123c8:	200063bc 	.word	0x200063bc

080123cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80123d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012400 <xTaskGetSchedulerState+0x34>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d102      	bne.n	80123e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80123da:	2301      	movs	r3, #1
 80123dc:	607b      	str	r3, [r7, #4]
 80123de:	e008      	b.n	80123f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123e0:	4b08      	ldr	r3, [pc, #32]	@ (8012404 <xTaskGetSchedulerState+0x38>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d102      	bne.n	80123ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80123e8:	2302      	movs	r3, #2
 80123ea:	607b      	str	r3, [r7, #4]
 80123ec:	e001      	b.n	80123f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80123ee:	2300      	movs	r3, #0
 80123f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80123f2:	687b      	ldr	r3, [r7, #4]
	}
 80123f4:	4618      	mov	r0, r3
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr
 8012400:	200063a8 	.word	0x200063a8
 8012404:	200063c4 	.word	0x200063c4

08012408 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012414:	2300      	movs	r3, #0
 8012416:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d069      	beq.n	80124f2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012422:	4b36      	ldr	r3, [pc, #216]	@ (80124fc <xTaskPriorityInherit+0xf4>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012428:	429a      	cmp	r2, r3
 801242a:	d259      	bcs.n	80124e0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	699b      	ldr	r3, [r3, #24]
 8012430:	2b00      	cmp	r3, #0
 8012432:	db06      	blt.n	8012442 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012434:	4b31      	ldr	r3, [pc, #196]	@ (80124fc <xTaskPriorityInherit+0xf4>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801243a:	f1c3 0207 	rsb	r2, r3, #7
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	6959      	ldr	r1, [r3, #20]
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801244a:	4613      	mov	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	4a2b      	ldr	r2, [pc, #172]	@ (8012500 <xTaskPriorityInherit+0xf8>)
 8012454:	4413      	add	r3, r2
 8012456:	4299      	cmp	r1, r3
 8012458:	d13a      	bne.n	80124d0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	3304      	adds	r3, #4
 801245e:	4618      	mov	r0, r3
 8012460:	f7fe f97c 	bl	801075c <uxListRemove>
 8012464:	4603      	mov	r3, r0
 8012466:	2b00      	cmp	r3, #0
 8012468:	d115      	bne.n	8012496 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801246e:	4924      	ldr	r1, [pc, #144]	@ (8012500 <xTaskPriorityInherit+0xf8>)
 8012470:	4613      	mov	r3, r2
 8012472:	009b      	lsls	r3, r3, #2
 8012474:	4413      	add	r3, r2
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	440b      	add	r3, r1
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10a      	bne.n	8012496 <xTaskPriorityInherit+0x8e>
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012484:	2201      	movs	r2, #1
 8012486:	fa02 f303 	lsl.w	r3, r2, r3
 801248a:	43da      	mvns	r2, r3
 801248c:	4b1d      	ldr	r3, [pc, #116]	@ (8012504 <xTaskPriorityInherit+0xfc>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4013      	ands	r3, r2
 8012492:	4a1c      	ldr	r2, [pc, #112]	@ (8012504 <xTaskPriorityInherit+0xfc>)
 8012494:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012496:	4b19      	ldr	r3, [pc, #100]	@ (80124fc <xTaskPriorityInherit+0xf4>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124a4:	2201      	movs	r2, #1
 80124a6:	409a      	lsls	r2, r3
 80124a8:	4b16      	ldr	r3, [pc, #88]	@ (8012504 <xTaskPriorityInherit+0xfc>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4313      	orrs	r3, r2
 80124ae:	4a15      	ldr	r2, [pc, #84]	@ (8012504 <xTaskPriorityInherit+0xfc>)
 80124b0:	6013      	str	r3, [r2, #0]
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124b6:	4613      	mov	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4413      	add	r3, r2
 80124bc:	009b      	lsls	r3, r3, #2
 80124be:	4a10      	ldr	r2, [pc, #64]	@ (8012500 <xTaskPriorityInherit+0xf8>)
 80124c0:	441a      	add	r2, r3
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	3304      	adds	r3, #4
 80124c6:	4619      	mov	r1, r3
 80124c8:	4610      	mov	r0, r2
 80124ca:	f7fe f8ea 	bl	80106a2 <vListInsertEnd>
 80124ce:	e004      	b.n	80124da <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80124d0:	4b0a      	ldr	r3, [pc, #40]	@ (80124fc <xTaskPriorityInherit+0xf4>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80124da:	2301      	movs	r3, #1
 80124dc:	60fb      	str	r3, [r7, #12]
 80124de:	e008      	b.n	80124f2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124e4:	4b05      	ldr	r3, [pc, #20]	@ (80124fc <xTaskPriorityInherit+0xf4>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d201      	bcs.n	80124f2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80124ee:	2301      	movs	r3, #1
 80124f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80124f2:	68fb      	ldr	r3, [r7, #12]
	}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	2000629c 	.word	0x2000629c
 8012500:	200062a0 	.word	0x200062a0
 8012504:	200063a4 	.word	0x200063a4

08012508 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d074      	beq.n	8012608 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801251e:	4b3d      	ldr	r3, [pc, #244]	@ (8012614 <xTaskPriorityDisinherit+0x10c>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	693a      	ldr	r2, [r7, #16]
 8012524:	429a      	cmp	r2, r3
 8012526:	d00d      	beq.n	8012544 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8012528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801252c:	b672      	cpsid	i
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	b662      	cpsie	i
 801253c:	60fb      	str	r3, [r7, #12]
}
 801253e:	bf00      	nop
 8012540:	bf00      	nop
 8012542:	e7fd      	b.n	8012540 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012548:	2b00      	cmp	r3, #0
 801254a:	d10d      	bne.n	8012568 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801254c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012550:	b672      	cpsid	i
 8012552:	f383 8811 	msr	BASEPRI, r3
 8012556:	f3bf 8f6f 	isb	sy
 801255a:	f3bf 8f4f 	dsb	sy
 801255e:	b662      	cpsie	i
 8012560:	60bb      	str	r3, [r7, #8]
}
 8012562:	bf00      	nop
 8012564:	bf00      	nop
 8012566:	e7fd      	b.n	8012564 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801256c:	1e5a      	subs	r2, r3, #1
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801257a:	429a      	cmp	r2, r3
 801257c:	d044      	beq.n	8012608 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012582:	2b00      	cmp	r3, #0
 8012584:	d140      	bne.n	8012608 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	3304      	adds	r3, #4
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe f8e6 	bl	801075c <uxListRemove>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d115      	bne.n	80125c2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801259a:	491f      	ldr	r1, [pc, #124]	@ (8012618 <xTaskPriorityDisinherit+0x110>)
 801259c:	4613      	mov	r3, r2
 801259e:	009b      	lsls	r3, r3, #2
 80125a0:	4413      	add	r3, r2
 80125a2:	009b      	lsls	r3, r3, #2
 80125a4:	440b      	add	r3, r1
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d10a      	bne.n	80125c2 <xTaskPriorityDisinherit+0xba>
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125b0:	2201      	movs	r2, #1
 80125b2:	fa02 f303 	lsl.w	r3, r2, r3
 80125b6:	43da      	mvns	r2, r3
 80125b8:	4b18      	ldr	r3, [pc, #96]	@ (801261c <xTaskPriorityDisinherit+0x114>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4013      	ands	r3, r2
 80125be:	4a17      	ldr	r2, [pc, #92]	@ (801261c <xTaskPriorityDisinherit+0x114>)
 80125c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125ce:	f1c3 0207 	rsb	r2, r3, #7
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125da:	2201      	movs	r2, #1
 80125dc:	409a      	lsls	r2, r3
 80125de:	4b0f      	ldr	r3, [pc, #60]	@ (801261c <xTaskPriorityDisinherit+0x114>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4313      	orrs	r3, r2
 80125e4:	4a0d      	ldr	r2, [pc, #52]	@ (801261c <xTaskPriorityDisinherit+0x114>)
 80125e6:	6013      	str	r3, [r2, #0]
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ec:	4613      	mov	r3, r2
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	4413      	add	r3, r2
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	4a08      	ldr	r2, [pc, #32]	@ (8012618 <xTaskPriorityDisinherit+0x110>)
 80125f6:	441a      	add	r2, r3
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	3304      	adds	r3, #4
 80125fc:	4619      	mov	r1, r3
 80125fe:	4610      	mov	r0, r2
 8012600:	f7fe f84f 	bl	80106a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012604:	2301      	movs	r3, #1
 8012606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012608:	697b      	ldr	r3, [r7, #20]
	}
 801260a:	4618      	mov	r0, r3
 801260c:	3718      	adds	r7, #24
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	2000629c 	.word	0x2000629c
 8012618:	200062a0 	.word	0x200062a0
 801261c:	200063a4 	.word	0x200063a4

08012620 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012620:	b580      	push	{r7, lr}
 8012622:	b088      	sub	sp, #32
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801262e:	2301      	movs	r3, #1
 8012630:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 8089 	beq.w	801274c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801263e:	2b00      	cmp	r3, #0
 8012640:	d10d      	bne.n	801265e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8012642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012646:	b672      	cpsid	i
 8012648:	f383 8811 	msr	BASEPRI, r3
 801264c:	f3bf 8f6f 	isb	sy
 8012650:	f3bf 8f4f 	dsb	sy
 8012654:	b662      	cpsie	i
 8012656:	60fb      	str	r3, [r7, #12]
}
 8012658:	bf00      	nop
 801265a:	bf00      	nop
 801265c:	e7fd      	b.n	801265a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801265e:	69bb      	ldr	r3, [r7, #24]
 8012660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012662:	683a      	ldr	r2, [r7, #0]
 8012664:	429a      	cmp	r2, r3
 8012666:	d902      	bls.n	801266e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	61fb      	str	r3, [r7, #28]
 801266c:	e002      	b.n	8012674 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012672:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012678:	69fa      	ldr	r2, [r7, #28]
 801267a:	429a      	cmp	r2, r3
 801267c:	d066      	beq.n	801274c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012682:	697a      	ldr	r2, [r7, #20]
 8012684:	429a      	cmp	r2, r3
 8012686:	d161      	bne.n	801274c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012688:	4b32      	ldr	r3, [pc, #200]	@ (8012754 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	69ba      	ldr	r2, [r7, #24]
 801268e:	429a      	cmp	r2, r3
 8012690:	d10d      	bne.n	80126ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8012692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012696:	b672      	cpsid	i
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	b662      	cpsie	i
 80126a6:	60bb      	str	r3, [r7, #8]
}
 80126a8:	bf00      	nop
 80126aa:	bf00      	nop
 80126ac:	e7fd      	b.n	80126aa <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	69fa      	ldr	r2, [r7, #28]
 80126b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	db04      	blt.n	80126cc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126c2:	69fb      	ldr	r3, [r7, #28]
 80126c4:	f1c3 0207 	rsb	r2, r3, #7
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	6959      	ldr	r1, [r3, #20]
 80126d0:	693a      	ldr	r2, [r7, #16]
 80126d2:	4613      	mov	r3, r2
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	4413      	add	r3, r2
 80126d8:	009b      	lsls	r3, r3, #2
 80126da:	4a1f      	ldr	r2, [pc, #124]	@ (8012758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126dc:	4413      	add	r3, r2
 80126de:	4299      	cmp	r1, r3
 80126e0:	d134      	bne.n	801274c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	3304      	adds	r3, #4
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fe f838 	bl	801075c <uxListRemove>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d115      	bne.n	801271e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126f6:	4918      	ldr	r1, [pc, #96]	@ (8012758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126f8:	4613      	mov	r3, r2
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	4413      	add	r3, r2
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	440b      	add	r3, r1
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10a      	bne.n	801271e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8012708:	69bb      	ldr	r3, [r7, #24]
 801270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801270c:	2201      	movs	r2, #1
 801270e:	fa02 f303 	lsl.w	r3, r2, r3
 8012712:	43da      	mvns	r2, r3
 8012714:	4b11      	ldr	r3, [pc, #68]	@ (801275c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4013      	ands	r3, r2
 801271a:	4a10      	ldr	r2, [pc, #64]	@ (801275c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801271c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012722:	2201      	movs	r2, #1
 8012724:	409a      	lsls	r2, r3
 8012726:	4b0d      	ldr	r3, [pc, #52]	@ (801275c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	4313      	orrs	r3, r2
 801272c:	4a0b      	ldr	r2, [pc, #44]	@ (801275c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801272e:	6013      	str	r3, [r2, #0]
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012734:	4613      	mov	r3, r2
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	4413      	add	r3, r2
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	4a06      	ldr	r2, [pc, #24]	@ (8012758 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801273e:	441a      	add	r2, r3
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	3304      	adds	r3, #4
 8012744:	4619      	mov	r1, r3
 8012746:	4610      	mov	r0, r2
 8012748:	f7fd ffab 	bl	80106a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801274c:	bf00      	nop
 801274e:	3720      	adds	r7, #32
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	2000629c 	.word	0x2000629c
 8012758:	200062a0 	.word	0x200062a0
 801275c:	200063a4 	.word	0x200063a4

08012760 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012760:	b480      	push	{r7}
 8012762:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012764:	4b07      	ldr	r3, [pc, #28]	@ (8012784 <pvTaskIncrementMutexHeldCount+0x24>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d004      	beq.n	8012776 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801276c:	4b05      	ldr	r3, [pc, #20]	@ (8012784 <pvTaskIncrementMutexHeldCount+0x24>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012772:	3201      	adds	r2, #1
 8012774:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8012776:	4b03      	ldr	r3, [pc, #12]	@ (8012784 <pvTaskIncrementMutexHeldCount+0x24>)
 8012778:	681b      	ldr	r3, [r3, #0]
	}
 801277a:	4618      	mov	r0, r3
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	2000629c 	.word	0x2000629c

08012788 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012792:	4b29      	ldr	r3, [pc, #164]	@ (8012838 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012798:	4b28      	ldr	r3, [pc, #160]	@ (801283c <prvAddCurrentTaskToDelayedList+0xb4>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	3304      	adds	r3, #4
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fd ffdc 	bl	801075c <uxListRemove>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d10b      	bne.n	80127c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80127aa:	4b24      	ldr	r3, [pc, #144]	@ (801283c <prvAddCurrentTaskToDelayedList+0xb4>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b0:	2201      	movs	r2, #1
 80127b2:	fa02 f303 	lsl.w	r3, r2, r3
 80127b6:	43da      	mvns	r2, r3
 80127b8:	4b21      	ldr	r3, [pc, #132]	@ (8012840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	4013      	ands	r3, r2
 80127be:	4a20      	ldr	r2, [pc, #128]	@ (8012840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80127c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c8:	d10a      	bne.n	80127e0 <prvAddCurrentTaskToDelayedList+0x58>
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d007      	beq.n	80127e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80127d0:	4b1a      	ldr	r3, [pc, #104]	@ (801283c <prvAddCurrentTaskToDelayedList+0xb4>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	3304      	adds	r3, #4
 80127d6:	4619      	mov	r1, r3
 80127d8:	481a      	ldr	r0, [pc, #104]	@ (8012844 <prvAddCurrentTaskToDelayedList+0xbc>)
 80127da:	f7fd ff62 	bl	80106a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80127de:	e026      	b.n	801282e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80127e0:	68fa      	ldr	r2, [r7, #12]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	4413      	add	r3, r2
 80127e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80127e8:	4b14      	ldr	r3, [pc, #80]	@ (801283c <prvAddCurrentTaskToDelayedList+0xb4>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	68ba      	ldr	r2, [r7, #8]
 80127ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d209      	bcs.n	801280c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80127f8:	4b13      	ldr	r3, [pc, #76]	@ (8012848 <prvAddCurrentTaskToDelayedList+0xc0>)
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	4b0f      	ldr	r3, [pc, #60]	@ (801283c <prvAddCurrentTaskToDelayedList+0xb4>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	3304      	adds	r3, #4
 8012802:	4619      	mov	r1, r3
 8012804:	4610      	mov	r0, r2
 8012806:	f7fd ff70 	bl	80106ea <vListInsert>
}
 801280a:	e010      	b.n	801282e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801280c:	4b0f      	ldr	r3, [pc, #60]	@ (801284c <prvAddCurrentTaskToDelayedList+0xc4>)
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	4b0a      	ldr	r3, [pc, #40]	@ (801283c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	3304      	adds	r3, #4
 8012816:	4619      	mov	r1, r3
 8012818:	4610      	mov	r0, r2
 801281a:	f7fd ff66 	bl	80106ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801281e:	4b0c      	ldr	r3, [pc, #48]	@ (8012850 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	68ba      	ldr	r2, [r7, #8]
 8012824:	429a      	cmp	r2, r3
 8012826:	d202      	bcs.n	801282e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012828:	4a09      	ldr	r2, [pc, #36]	@ (8012850 <prvAddCurrentTaskToDelayedList+0xc8>)
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	6013      	str	r3, [r2, #0]
}
 801282e:	bf00      	nop
 8012830:	3710      	adds	r7, #16
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	200063a0 	.word	0x200063a0
 801283c:	2000629c 	.word	0x2000629c
 8012840:	200063a4 	.word	0x200063a4
 8012844:	20006388 	.word	0x20006388
 8012848:	20006358 	.word	0x20006358
 801284c:	20006354 	.word	0x20006354
 8012850:	200063bc 	.word	0x200063bc

08012854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012854:	b480      	push	{r7}
 8012856:	b085      	sub	sp, #20
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	3b04      	subs	r3, #4
 8012864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801286c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	3b04      	subs	r3, #4
 8012872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	f023 0201 	bic.w	r2, r3, #1
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	3b04      	subs	r3, #4
 8012882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012884:	4a0c      	ldr	r2, [pc, #48]	@ (80128b8 <pxPortInitialiseStack+0x64>)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	3b14      	subs	r3, #20
 801288e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	3b04      	subs	r3, #4
 801289a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f06f 0202 	mvn.w	r2, #2
 80128a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	3b20      	subs	r3, #32
 80128a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80128aa:	68fb      	ldr	r3, [r7, #12]
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3714      	adds	r7, #20
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr
 80128b8:	080128bd 	.word	0x080128bd

080128bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80128bc:	b480      	push	{r7}
 80128be:	b085      	sub	sp, #20
 80128c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80128c2:	2300      	movs	r3, #0
 80128c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80128c6:	4b15      	ldr	r3, [pc, #84]	@ (801291c <prvTaskExitError+0x60>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ce:	d00d      	beq.n	80128ec <prvTaskExitError+0x30>
	__asm volatile
 80128d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128d4:	b672      	cpsid	i
 80128d6:	f383 8811 	msr	BASEPRI, r3
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	f3bf 8f4f 	dsb	sy
 80128e2:	b662      	cpsie	i
 80128e4:	60fb      	str	r3, [r7, #12]
}
 80128e6:	bf00      	nop
 80128e8:	bf00      	nop
 80128ea:	e7fd      	b.n	80128e8 <prvTaskExitError+0x2c>
	__asm volatile
 80128ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128f0:	b672      	cpsid	i
 80128f2:	f383 8811 	msr	BASEPRI, r3
 80128f6:	f3bf 8f6f 	isb	sy
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	b662      	cpsie	i
 8012900:	60bb      	str	r3, [r7, #8]
}
 8012902:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012904:	bf00      	nop
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d0fc      	beq.n	8012906 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801290c:	bf00      	nop
 801290e:	bf00      	nop
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	20000010 	.word	0x20000010

08012920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012920:	4b07      	ldr	r3, [pc, #28]	@ (8012940 <pxCurrentTCBConst2>)
 8012922:	6819      	ldr	r1, [r3, #0]
 8012924:	6808      	ldr	r0, [r1, #0]
 8012926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292a:	f380 8809 	msr	PSP, r0
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	f04f 0000 	mov.w	r0, #0
 8012936:	f380 8811 	msr	BASEPRI, r0
 801293a:	4770      	bx	lr
 801293c:	f3af 8000 	nop.w

08012940 <pxCurrentTCBConst2>:
 8012940:	2000629c 	.word	0x2000629c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012944:	bf00      	nop
 8012946:	bf00      	nop

08012948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012948:	4808      	ldr	r0, [pc, #32]	@ (801296c <prvPortStartFirstTask+0x24>)
 801294a:	6800      	ldr	r0, [r0, #0]
 801294c:	6800      	ldr	r0, [r0, #0]
 801294e:	f380 8808 	msr	MSP, r0
 8012952:	f04f 0000 	mov.w	r0, #0
 8012956:	f380 8814 	msr	CONTROL, r0
 801295a:	b662      	cpsie	i
 801295c:	b661      	cpsie	f
 801295e:	f3bf 8f4f 	dsb	sy
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	df00      	svc	0
 8012968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801296a:	bf00      	nop
 801296c:	e000ed08 	.word	0xe000ed08

08012970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012976:	4b37      	ldr	r3, [pc, #220]	@ (8012a54 <xPortStartScheduler+0xe4>)
 8012978:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	b2db      	uxtb	r3, r3
 8012980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	22ff      	movs	r2, #255	@ 0xff
 8012986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	b2db      	uxtb	r3, r3
 801298e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012990:	78fb      	ldrb	r3, [r7, #3]
 8012992:	b2db      	uxtb	r3, r3
 8012994:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012998:	b2da      	uxtb	r2, r3
 801299a:	4b2f      	ldr	r3, [pc, #188]	@ (8012a58 <xPortStartScheduler+0xe8>)
 801299c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801299e:	4b2f      	ldr	r3, [pc, #188]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129a0:	2207      	movs	r2, #7
 80129a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129a4:	e009      	b.n	80129ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80129a6:	4b2d      	ldr	r3, [pc, #180]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	3b01      	subs	r3, #1
 80129ac:	4a2b      	ldr	r2, [pc, #172]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80129b0:	78fb      	ldrb	r3, [r7, #3]
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	005b      	lsls	r3, r3, #1
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129ba:	78fb      	ldrb	r3, [r7, #3]
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129c2:	2b80      	cmp	r3, #128	@ 0x80
 80129c4:	d0ef      	beq.n	80129a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80129c6:	4b25      	ldr	r3, [pc, #148]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f1c3 0307 	rsb	r3, r3, #7
 80129ce:	2b04      	cmp	r3, #4
 80129d0:	d00d      	beq.n	80129ee <xPortStartScheduler+0x7e>
	__asm volatile
 80129d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d6:	b672      	cpsid	i
 80129d8:	f383 8811 	msr	BASEPRI, r3
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	b662      	cpsie	i
 80129e6:	60bb      	str	r3, [r7, #8]
}
 80129e8:	bf00      	nop
 80129ea:	bf00      	nop
 80129ec:	e7fd      	b.n	80129ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80129ee:	4b1b      	ldr	r3, [pc, #108]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	021b      	lsls	r3, r3, #8
 80129f4:	4a19      	ldr	r2, [pc, #100]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80129f8:	4b18      	ldr	r3, [pc, #96]	@ (8012a5c <xPortStartScheduler+0xec>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012a00:	4a16      	ldr	r2, [pc, #88]	@ (8012a5c <xPortStartScheduler+0xec>)
 8012a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	b2da      	uxtb	r2, r3
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a0c:	4b14      	ldr	r3, [pc, #80]	@ (8012a60 <xPortStartScheduler+0xf0>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a13      	ldr	r2, [pc, #76]	@ (8012a60 <xPortStartScheduler+0xf0>)
 8012a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a18:	4b11      	ldr	r3, [pc, #68]	@ (8012a60 <xPortStartScheduler+0xf0>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4a10      	ldr	r2, [pc, #64]	@ (8012a60 <xPortStartScheduler+0xf0>)
 8012a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a24:	f000 f8dc 	bl	8012be0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a28:	4b0e      	ldr	r3, [pc, #56]	@ (8012a64 <xPortStartScheduler+0xf4>)
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a2e:	f000 f8fb 	bl	8012c28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a32:	4b0d      	ldr	r3, [pc, #52]	@ (8012a68 <xPortStartScheduler+0xf8>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	4a0c      	ldr	r2, [pc, #48]	@ (8012a68 <xPortStartScheduler+0xf8>)
 8012a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012a3e:	f7ff ff83 	bl	8012948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012a42:	f7ff fa41 	bl	8011ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8012a46:	f7ff ff39 	bl	80128bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012a4a:	2300      	movs	r3, #0
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3710      	adds	r7, #16
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	e000e400 	.word	0xe000e400
 8012a58:	200063c8 	.word	0x200063c8
 8012a5c:	200063cc 	.word	0x200063cc
 8012a60:	e000ed20 	.word	0xe000ed20
 8012a64:	20000010 	.word	0x20000010
 8012a68:	e000ef34 	.word	0xe000ef34

08012a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
	__asm volatile
 8012a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a76:	b672      	cpsid	i
 8012a78:	f383 8811 	msr	BASEPRI, r3
 8012a7c:	f3bf 8f6f 	isb	sy
 8012a80:	f3bf 8f4f 	dsb	sy
 8012a84:	b662      	cpsie	i
 8012a86:	607b      	str	r3, [r7, #4]
}
 8012a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012a8a:	4b11      	ldr	r3, [pc, #68]	@ (8012ad0 <vPortEnterCritical+0x64>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	4a0f      	ldr	r2, [pc, #60]	@ (8012ad0 <vPortEnterCritical+0x64>)
 8012a92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012a94:	4b0e      	ldr	r3, [pc, #56]	@ (8012ad0 <vPortEnterCritical+0x64>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d112      	bne.n	8012ac2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012ad4 <vPortEnterCritical+0x68>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d00d      	beq.n	8012ac2 <vPortEnterCritical+0x56>
	__asm volatile
 8012aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aaa:	b672      	cpsid	i
 8012aac:	f383 8811 	msr	BASEPRI, r3
 8012ab0:	f3bf 8f6f 	isb	sy
 8012ab4:	f3bf 8f4f 	dsb	sy
 8012ab8:	b662      	cpsie	i
 8012aba:	603b      	str	r3, [r7, #0]
}
 8012abc:	bf00      	nop
 8012abe:	bf00      	nop
 8012ac0:	e7fd      	b.n	8012abe <vPortEnterCritical+0x52>
	}
}
 8012ac2:	bf00      	nop
 8012ac4:	370c      	adds	r7, #12
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	20000010 	.word	0x20000010
 8012ad4:	e000ed04 	.word	0xe000ed04

08012ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012ade:	4b13      	ldr	r3, [pc, #76]	@ (8012b2c <vPortExitCritical+0x54>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d10d      	bne.n	8012b02 <vPortExitCritical+0x2a>
	__asm volatile
 8012ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aea:	b672      	cpsid	i
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	b662      	cpsie	i
 8012afa:	607b      	str	r3, [r7, #4]
}
 8012afc:	bf00      	nop
 8012afe:	bf00      	nop
 8012b00:	e7fd      	b.n	8012afe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012b02:	4b0a      	ldr	r3, [pc, #40]	@ (8012b2c <vPortExitCritical+0x54>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	3b01      	subs	r3, #1
 8012b08:	4a08      	ldr	r2, [pc, #32]	@ (8012b2c <vPortExitCritical+0x54>)
 8012b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012b0c:	4b07      	ldr	r3, [pc, #28]	@ (8012b2c <vPortExitCritical+0x54>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d105      	bne.n	8012b20 <vPortExitCritical+0x48>
 8012b14:	2300      	movs	r3, #0
 8012b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	f383 8811 	msr	BASEPRI, r3
}
 8012b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b20:	bf00      	nop
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr
 8012b2c:	20000010 	.word	0x20000010

08012b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012b30:	f3ef 8009 	mrs	r0, PSP
 8012b34:	f3bf 8f6f 	isb	sy
 8012b38:	4b15      	ldr	r3, [pc, #84]	@ (8012b90 <pxCurrentTCBConst>)
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	f01e 0f10 	tst.w	lr, #16
 8012b40:	bf08      	it	eq
 8012b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4a:	6010      	str	r0, [r2, #0]
 8012b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012b54:	b672      	cpsid	i
 8012b56:	f380 8811 	msr	BASEPRI, r0
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	f3bf 8f6f 	isb	sy
 8012b62:	b662      	cpsie	i
 8012b64:	f7ff f9b0 	bl	8011ec8 <vTaskSwitchContext>
 8012b68:	f04f 0000 	mov.w	r0, #0
 8012b6c:	f380 8811 	msr	BASEPRI, r0
 8012b70:	bc09      	pop	{r0, r3}
 8012b72:	6819      	ldr	r1, [r3, #0]
 8012b74:	6808      	ldr	r0, [r1, #0]
 8012b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7a:	f01e 0f10 	tst.w	lr, #16
 8012b7e:	bf08      	it	eq
 8012b80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012b84:	f380 8809 	msr	PSP, r0
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	4770      	bx	lr
 8012b8e:	bf00      	nop

08012b90 <pxCurrentTCBConst>:
 8012b90:	2000629c 	.word	0x2000629c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012b94:	bf00      	nop
 8012b96:	bf00      	nop

08012b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ba2:	b672      	cpsid	i
 8012ba4:	f383 8811 	msr	BASEPRI, r3
 8012ba8:	f3bf 8f6f 	isb	sy
 8012bac:	f3bf 8f4f 	dsb	sy
 8012bb0:	b662      	cpsie	i
 8012bb2:	607b      	str	r3, [r7, #4]
}
 8012bb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012bb6:	f7ff f8cb 	bl	8011d50 <xTaskIncrementTick>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d003      	beq.n	8012bc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012bc0:	4b06      	ldr	r3, [pc, #24]	@ (8012bdc <SysTick_Handler+0x44>)
 8012bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	2300      	movs	r3, #0
 8012bca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	f383 8811 	msr	BASEPRI, r3
}
 8012bd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012bd4:	bf00      	nop
 8012bd6:	3708      	adds	r7, #8
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	e000ed04 	.word	0xe000ed04

08012be0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012be0:	b480      	push	{r7}
 8012be2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012be4:	4b0b      	ldr	r3, [pc, #44]	@ (8012c14 <vPortSetupTimerInterrupt+0x34>)
 8012be6:	2200      	movs	r2, #0
 8012be8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012bea:	4b0b      	ldr	r3, [pc, #44]	@ (8012c18 <vPortSetupTimerInterrupt+0x38>)
 8012bec:	2200      	movs	r2, #0
 8012bee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8012c1c <vPortSetupTimerInterrupt+0x3c>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8012c20 <vPortSetupTimerInterrupt+0x40>)
 8012bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8012bfa:	099b      	lsrs	r3, r3, #6
 8012bfc:	4a09      	ldr	r2, [pc, #36]	@ (8012c24 <vPortSetupTimerInterrupt+0x44>)
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012c02:	4b04      	ldr	r3, [pc, #16]	@ (8012c14 <vPortSetupTimerInterrupt+0x34>)
 8012c04:	2207      	movs	r2, #7
 8012c06:	601a      	str	r2, [r3, #0]
}
 8012c08:	bf00      	nop
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	e000e010 	.word	0xe000e010
 8012c18:	e000e018 	.word	0xe000e018
 8012c1c:	20000004 	.word	0x20000004
 8012c20:	10624dd3 	.word	0x10624dd3
 8012c24:	e000e014 	.word	0xe000e014

08012c28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012c38 <vPortEnableVFP+0x10>
 8012c2c:	6801      	ldr	r1, [r0, #0]
 8012c2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012c32:	6001      	str	r1, [r0, #0]
 8012c34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012c36:	bf00      	nop
 8012c38:	e000ed88 	.word	0xe000ed88

08012c3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012c3c:	b480      	push	{r7}
 8012c3e:	b085      	sub	sp, #20
 8012c40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012c42:	f3ef 8305 	mrs	r3, IPSR
 8012c46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2b0f      	cmp	r3, #15
 8012c4c:	d917      	bls.n	8012c7e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8012cb8 <vPortValidateInterruptPriority+0x7c>)
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	4413      	add	r3, r2
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012c58:	4b18      	ldr	r3, [pc, #96]	@ (8012cbc <vPortValidateInterruptPriority+0x80>)
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	7afa      	ldrb	r2, [r7, #11]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d20d      	bcs.n	8012c7e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8012c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c66:	b672      	cpsid	i
 8012c68:	f383 8811 	msr	BASEPRI, r3
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	f3bf 8f4f 	dsb	sy
 8012c74:	b662      	cpsie	i
 8012c76:	607b      	str	r3, [r7, #4]
}
 8012c78:	bf00      	nop
 8012c7a:	bf00      	nop
 8012c7c:	e7fd      	b.n	8012c7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012c7e:	4b10      	ldr	r3, [pc, #64]	@ (8012cc0 <vPortValidateInterruptPriority+0x84>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012c86:	4b0f      	ldr	r3, [pc, #60]	@ (8012cc4 <vPortValidateInterruptPriority+0x88>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d90d      	bls.n	8012caa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8012c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c92:	b672      	cpsid	i
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	b662      	cpsie	i
 8012ca2:	603b      	str	r3, [r7, #0]
}
 8012ca4:	bf00      	nop
 8012ca6:	bf00      	nop
 8012ca8:	e7fd      	b.n	8012ca6 <vPortValidateInterruptPriority+0x6a>
	}
 8012caa:	bf00      	nop
 8012cac:	3714      	adds	r7, #20
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop
 8012cb8:	e000e3f0 	.word	0xe000e3f0
 8012cbc:	200063c8 	.word	0x200063c8
 8012cc0:	e000ed0c 	.word	0xe000ed0c
 8012cc4:	200063cc 	.word	0x200063cc

08012cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b08a      	sub	sp, #40	@ 0x28
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012cd4:	f7fe ff6c 	bl	8011bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8012e58 <pvPortMalloc+0x190>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d101      	bne.n	8012ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012ce0:	f000 f924 	bl	8012f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8012e5c <pvPortMalloc+0x194>)
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	4013      	ands	r3, r2
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	f040 8094 	bne.w	8012e1a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d020      	beq.n	8012d3a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012cf8:	2208      	movs	r2, #8
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f003 0307 	and.w	r3, r3, #7
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d017      	beq.n	8012d3a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f023 0307 	bic.w	r3, r3, #7
 8012d10:	3308      	adds	r3, #8
 8012d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f003 0307 	and.w	r3, r3, #7
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00d      	beq.n	8012d3a <pvPortMalloc+0x72>
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d22:	b672      	cpsid	i
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	b662      	cpsie	i
 8012d32:	617b      	str	r3, [r7, #20]
}
 8012d34:	bf00      	nop
 8012d36:	bf00      	nop
 8012d38:	e7fd      	b.n	8012d36 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d06c      	beq.n	8012e1a <pvPortMalloc+0x152>
 8012d40:	4b47      	ldr	r3, [pc, #284]	@ (8012e60 <pvPortMalloc+0x198>)
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d867      	bhi.n	8012e1a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d4a:	4b46      	ldr	r3, [pc, #280]	@ (8012e64 <pvPortMalloc+0x19c>)
 8012d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012d4e:	4b45      	ldr	r3, [pc, #276]	@ (8012e64 <pvPortMalloc+0x19c>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d54:	e004      	b.n	8012d60 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8012d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d903      	bls.n	8012d72 <pvPortMalloc+0xaa>
 8012d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d1f1      	bne.n	8012d56 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d72:	4b39      	ldr	r3, [pc, #228]	@ (8012e58 <pvPortMalloc+0x190>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d04e      	beq.n	8012e1a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d7c:	6a3b      	ldr	r3, [r7, #32]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2208      	movs	r2, #8
 8012d82:	4413      	add	r3, r2
 8012d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d90:	685a      	ldr	r2, [r3, #4]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	1ad2      	subs	r2, r2, r3
 8012d96:	2308      	movs	r3, #8
 8012d98:	005b      	lsls	r3, r3, #1
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d922      	bls.n	8012de4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	4413      	add	r3, r2
 8012da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	f003 0307 	and.w	r3, r3, #7
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d00d      	beq.n	8012dcc <pvPortMalloc+0x104>
	__asm volatile
 8012db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012db4:	b672      	cpsid	i
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	b662      	cpsie	i
 8012dc4:	613b      	str	r3, [r7, #16]
}
 8012dc6:	bf00      	nop
 8012dc8:	bf00      	nop
 8012dca:	e7fd      	b.n	8012dc8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dce:	685a      	ldr	r2, [r3, #4]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	1ad2      	subs	r2, r2, r3
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012dde:	69b8      	ldr	r0, [r7, #24]
 8012de0:	f000 f906 	bl	8012ff0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012de4:	4b1e      	ldr	r3, [pc, #120]	@ (8012e60 <pvPortMalloc+0x198>)
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	4a1c      	ldr	r2, [pc, #112]	@ (8012e60 <pvPortMalloc+0x198>)
 8012df0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012df2:	4b1b      	ldr	r3, [pc, #108]	@ (8012e60 <pvPortMalloc+0x198>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	4b1c      	ldr	r3, [pc, #112]	@ (8012e68 <pvPortMalloc+0x1a0>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d203      	bcs.n	8012e06 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012dfe:	4b18      	ldr	r3, [pc, #96]	@ (8012e60 <pvPortMalloc+0x198>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4a19      	ldr	r2, [pc, #100]	@ (8012e68 <pvPortMalloc+0x1a0>)
 8012e04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e08:	685a      	ldr	r2, [r3, #4]
 8012e0a:	4b14      	ldr	r3, [pc, #80]	@ (8012e5c <pvPortMalloc+0x194>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	431a      	orrs	r2, r3
 8012e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e16:	2200      	movs	r2, #0
 8012e18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012e1a:	f7fe fed7 	bl	8011bcc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d101      	bne.n	8012e28 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012e24:	f7ef f948 	bl	80020b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	f003 0307 	and.w	r3, r3, #7
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d00d      	beq.n	8012e4e <pvPortMalloc+0x186>
	__asm volatile
 8012e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e36:	b672      	cpsid	i
 8012e38:	f383 8811 	msr	BASEPRI, r3
 8012e3c:	f3bf 8f6f 	isb	sy
 8012e40:	f3bf 8f4f 	dsb	sy
 8012e44:	b662      	cpsie	i
 8012e46:	60fb      	str	r3, [r7, #12]
}
 8012e48:	bf00      	nop
 8012e4a:	bf00      	nop
 8012e4c:	e7fd      	b.n	8012e4a <pvPortMalloc+0x182>
	return pvReturn;
 8012e4e:	69fb      	ldr	r3, [r7, #28]
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	3728      	adds	r7, #40	@ 0x28
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	2000e3d8 	.word	0x2000e3d8
 8012e5c:	2000e3e4 	.word	0x2000e3e4
 8012e60:	2000e3dc 	.word	0x2000e3dc
 8012e64:	2000e3d0 	.word	0x2000e3d0
 8012e68:	2000e3e0 	.word	0x2000e3e0

08012e6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b086      	sub	sp, #24
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d04e      	beq.n	8012f1c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e7e:	2308      	movs	r3, #8
 8012e80:	425b      	negs	r3, r3
 8012e82:	697a      	ldr	r2, [r7, #20]
 8012e84:	4413      	add	r3, r2
 8012e86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	685a      	ldr	r2, [r3, #4]
 8012e90:	4b24      	ldr	r3, [pc, #144]	@ (8012f24 <vPortFree+0xb8>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4013      	ands	r3, r2
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d10d      	bne.n	8012eb6 <vPortFree+0x4a>
	__asm volatile
 8012e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e9e:	b672      	cpsid	i
 8012ea0:	f383 8811 	msr	BASEPRI, r3
 8012ea4:	f3bf 8f6f 	isb	sy
 8012ea8:	f3bf 8f4f 	dsb	sy
 8012eac:	b662      	cpsie	i
 8012eae:	60fb      	str	r3, [r7, #12]
}
 8012eb0:	bf00      	nop
 8012eb2:	bf00      	nop
 8012eb4:	e7fd      	b.n	8012eb2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00d      	beq.n	8012eda <vPortFree+0x6e>
	__asm volatile
 8012ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec2:	b672      	cpsid	i
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	b662      	cpsie	i
 8012ed2:	60bb      	str	r3, [r7, #8]
}
 8012ed4:	bf00      	nop
 8012ed6:	bf00      	nop
 8012ed8:	e7fd      	b.n	8012ed6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	685a      	ldr	r2, [r3, #4]
 8012ede:	4b11      	ldr	r3, [pc, #68]	@ (8012f24 <vPortFree+0xb8>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	4013      	ands	r3, r2
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d019      	beq.n	8012f1c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d115      	bne.n	8012f1c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	685a      	ldr	r2, [r3, #4]
 8012ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8012f24 <vPortFree+0xb8>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	43db      	mvns	r3, r3
 8012efa:	401a      	ands	r2, r3
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012f00:	f7fe fe56 	bl	8011bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	685a      	ldr	r2, [r3, #4]
 8012f08:	4b07      	ldr	r3, [pc, #28]	@ (8012f28 <vPortFree+0xbc>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	4a06      	ldr	r2, [pc, #24]	@ (8012f28 <vPortFree+0xbc>)
 8012f10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012f12:	6938      	ldr	r0, [r7, #16]
 8012f14:	f000 f86c 	bl	8012ff0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012f18:	f7fe fe58 	bl	8011bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012f1c:	bf00      	nop
 8012f1e:	3718      	adds	r7, #24
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}
 8012f24:	2000e3e4 	.word	0x2000e3e4
 8012f28:	2000e3dc 	.word	0x2000e3dc

08012f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012f38:	4b27      	ldr	r3, [pc, #156]	@ (8012fd8 <prvHeapInit+0xac>)
 8012f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f003 0307 	and.w	r3, r3, #7
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d00c      	beq.n	8012f60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	3307      	adds	r3, #7
 8012f4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f023 0307 	bic.w	r3, r3, #7
 8012f52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012f54:	68ba      	ldr	r2, [r7, #8]
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8012fd8 <prvHeapInit+0xac>)
 8012f5c:	4413      	add	r3, r2
 8012f5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f64:	4a1d      	ldr	r2, [pc, #116]	@ (8012fdc <prvHeapInit+0xb0>)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8012fdc <prvHeapInit+0xb0>)
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	68ba      	ldr	r2, [r7, #8]
 8012f74:	4413      	add	r3, r2
 8012f76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012f78:	2208      	movs	r2, #8
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	1a9b      	subs	r3, r3, r2
 8012f7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f023 0307 	bic.w	r3, r3, #7
 8012f86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	4a15      	ldr	r2, [pc, #84]	@ (8012fe0 <prvHeapInit+0xb4>)
 8012f8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012f8e:	4b14      	ldr	r3, [pc, #80]	@ (8012fe0 <prvHeapInit+0xb4>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2200      	movs	r2, #0
 8012f94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012f96:	4b12      	ldr	r3, [pc, #72]	@ (8012fe0 <prvHeapInit+0xb4>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	68fa      	ldr	r2, [r7, #12]
 8012fa6:	1ad2      	subs	r2, r2, r3
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012fac:	4b0c      	ldr	r3, [pc, #48]	@ (8012fe0 <prvHeapInit+0xb4>)
 8012fae:	681a      	ldr	r2, [r3, #0]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8012fe4 <prvHeapInit+0xb8>)
 8012fba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	4a09      	ldr	r2, [pc, #36]	@ (8012fe8 <prvHeapInit+0xbc>)
 8012fc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012fc4:	4b09      	ldr	r3, [pc, #36]	@ (8012fec <prvHeapInit+0xc0>)
 8012fc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012fca:	601a      	str	r2, [r3, #0]
}
 8012fcc:	bf00      	nop
 8012fce:	3714      	adds	r7, #20
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr
 8012fd8:	200063d0 	.word	0x200063d0
 8012fdc:	2000e3d0 	.word	0x2000e3d0
 8012fe0:	2000e3d8 	.word	0x2000e3d8
 8012fe4:	2000e3e0 	.word	0x2000e3e0
 8012fe8:	2000e3dc 	.word	0x2000e3dc
 8012fec:	2000e3e4 	.word	0x2000e3e4

08012ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ff8:	4b28      	ldr	r3, [pc, #160]	@ (801309c <prvInsertBlockIntoFreeList+0xac>)
 8012ffa:	60fb      	str	r3, [r7, #12]
 8012ffc:	e002      	b.n	8013004 <prvInsertBlockIntoFreeList+0x14>
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	60fb      	str	r3, [r7, #12]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	429a      	cmp	r2, r3
 801300c:	d8f7      	bhi.n	8012ffe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	68ba      	ldr	r2, [r7, #8]
 8013018:	4413      	add	r3, r2
 801301a:	687a      	ldr	r2, [r7, #4]
 801301c:	429a      	cmp	r2, r3
 801301e:	d108      	bne.n	8013032 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	685a      	ldr	r2, [r3, #4]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	441a      	add	r2, r3
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	68ba      	ldr	r2, [r7, #8]
 801303c:	441a      	add	r2, r3
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	429a      	cmp	r2, r3
 8013044:	d118      	bne.n	8013078 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	4b15      	ldr	r3, [pc, #84]	@ (80130a0 <prvInsertBlockIntoFreeList+0xb0>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	429a      	cmp	r2, r3
 8013050:	d00d      	beq.n	801306e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	685a      	ldr	r2, [r3, #4]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	685b      	ldr	r3, [r3, #4]
 801305c:	441a      	add	r2, r3
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	601a      	str	r2, [r3, #0]
 801306c:	e008      	b.n	8013080 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801306e:	4b0c      	ldr	r3, [pc, #48]	@ (80130a0 <prvInsertBlockIntoFreeList+0xb0>)
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	601a      	str	r2, [r3, #0]
 8013076:	e003      	b.n	8013080 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	429a      	cmp	r2, r3
 8013086:	d002      	beq.n	801308e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801308e:	bf00      	nop
 8013090:	3714      	adds	r7, #20
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	2000e3d0 	.word	0x2000e3d0
 80130a0:	2000e3d8 	.word	0x2000e3d8

080130a4 <atof>:
 80130a4:	2100      	movs	r1, #0
 80130a6:	f000 be07 	b.w	8013cb8 <strtod>

080130aa <atoi>:
 80130aa:	220a      	movs	r2, #10
 80130ac:	2100      	movs	r1, #0
 80130ae:	f000 beed 	b.w	8013e8c <strtol>

080130b2 <sulp>:
 80130b2:	b570      	push	{r4, r5, r6, lr}
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	ec45 4b10 	vmov	d0, r4, r5
 80130bc:	4616      	mov	r6, r2
 80130be:	f003 fd2b 	bl	8016b18 <__ulp>
 80130c2:	ec51 0b10 	vmov	r0, r1, d0
 80130c6:	b17e      	cbz	r6, 80130e8 <sulp+0x36>
 80130c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80130cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	dd09      	ble.n	80130e8 <sulp+0x36>
 80130d4:	051b      	lsls	r3, r3, #20
 80130d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80130da:	2400      	movs	r4, #0
 80130dc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80130e0:	4622      	mov	r2, r4
 80130e2:	462b      	mov	r3, r5
 80130e4:	f7ed faa8 	bl	8000638 <__aeabi_dmul>
 80130e8:	ec41 0b10 	vmov	d0, r0, r1
 80130ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080130f0 <_strtod_l>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	b09f      	sub	sp, #124	@ 0x7c
 80130f6:	460c      	mov	r4, r1
 80130f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80130fa:	2200      	movs	r2, #0
 80130fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80130fe:	9005      	str	r0, [sp, #20]
 8013100:	f04f 0a00 	mov.w	sl, #0
 8013104:	f04f 0b00 	mov.w	fp, #0
 8013108:	460a      	mov	r2, r1
 801310a:	9219      	str	r2, [sp, #100]	@ 0x64
 801310c:	7811      	ldrb	r1, [r2, #0]
 801310e:	292b      	cmp	r1, #43	@ 0x2b
 8013110:	d04a      	beq.n	80131a8 <_strtod_l+0xb8>
 8013112:	d838      	bhi.n	8013186 <_strtod_l+0x96>
 8013114:	290d      	cmp	r1, #13
 8013116:	d832      	bhi.n	801317e <_strtod_l+0x8e>
 8013118:	2908      	cmp	r1, #8
 801311a:	d832      	bhi.n	8013182 <_strtod_l+0x92>
 801311c:	2900      	cmp	r1, #0
 801311e:	d03b      	beq.n	8013198 <_strtod_l+0xa8>
 8013120:	2200      	movs	r2, #0
 8013122:	920e      	str	r2, [sp, #56]	@ 0x38
 8013124:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013126:	782a      	ldrb	r2, [r5, #0]
 8013128:	2a30      	cmp	r2, #48	@ 0x30
 801312a:	f040 80b2 	bne.w	8013292 <_strtod_l+0x1a2>
 801312e:	786a      	ldrb	r2, [r5, #1]
 8013130:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013134:	2a58      	cmp	r2, #88	@ 0x58
 8013136:	d16e      	bne.n	8013216 <_strtod_l+0x126>
 8013138:	9302      	str	r3, [sp, #8]
 801313a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801313c:	9301      	str	r3, [sp, #4]
 801313e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013140:	9300      	str	r3, [sp, #0]
 8013142:	4a8f      	ldr	r2, [pc, #572]	@ (8013380 <_strtod_l+0x290>)
 8013144:	9805      	ldr	r0, [sp, #20]
 8013146:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013148:	a919      	add	r1, sp, #100	@ 0x64
 801314a:	f002 fddf 	bl	8015d0c <__gethex>
 801314e:	f010 060f 	ands.w	r6, r0, #15
 8013152:	4604      	mov	r4, r0
 8013154:	d005      	beq.n	8013162 <_strtod_l+0x72>
 8013156:	2e06      	cmp	r6, #6
 8013158:	d128      	bne.n	80131ac <_strtod_l+0xbc>
 801315a:	3501      	adds	r5, #1
 801315c:	2300      	movs	r3, #0
 801315e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013160:	930e      	str	r3, [sp, #56]	@ 0x38
 8013162:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013164:	2b00      	cmp	r3, #0
 8013166:	f040 858e 	bne.w	8013c86 <_strtod_l+0xb96>
 801316a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801316c:	b1cb      	cbz	r3, 80131a2 <_strtod_l+0xb2>
 801316e:	4652      	mov	r2, sl
 8013170:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013174:	ec43 2b10 	vmov	d0, r2, r3
 8013178:	b01f      	add	sp, #124	@ 0x7c
 801317a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801317e:	2920      	cmp	r1, #32
 8013180:	d1ce      	bne.n	8013120 <_strtod_l+0x30>
 8013182:	3201      	adds	r2, #1
 8013184:	e7c1      	b.n	801310a <_strtod_l+0x1a>
 8013186:	292d      	cmp	r1, #45	@ 0x2d
 8013188:	d1ca      	bne.n	8013120 <_strtod_l+0x30>
 801318a:	2101      	movs	r1, #1
 801318c:	910e      	str	r1, [sp, #56]	@ 0x38
 801318e:	1c51      	adds	r1, r2, #1
 8013190:	9119      	str	r1, [sp, #100]	@ 0x64
 8013192:	7852      	ldrb	r2, [r2, #1]
 8013194:	2a00      	cmp	r2, #0
 8013196:	d1c5      	bne.n	8013124 <_strtod_l+0x34>
 8013198:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801319a:	9419      	str	r4, [sp, #100]	@ 0x64
 801319c:	2b00      	cmp	r3, #0
 801319e:	f040 8570 	bne.w	8013c82 <_strtod_l+0xb92>
 80131a2:	4652      	mov	r2, sl
 80131a4:	465b      	mov	r3, fp
 80131a6:	e7e5      	b.n	8013174 <_strtod_l+0x84>
 80131a8:	2100      	movs	r1, #0
 80131aa:	e7ef      	b.n	801318c <_strtod_l+0x9c>
 80131ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80131ae:	b13a      	cbz	r2, 80131c0 <_strtod_l+0xd0>
 80131b0:	2135      	movs	r1, #53	@ 0x35
 80131b2:	a81c      	add	r0, sp, #112	@ 0x70
 80131b4:	f003 fdaa 	bl	8016d0c <__copybits>
 80131b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80131ba:	9805      	ldr	r0, [sp, #20]
 80131bc:	f003 f980 	bl	80164c0 <_Bfree>
 80131c0:	3e01      	subs	r6, #1
 80131c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80131c4:	2e04      	cmp	r6, #4
 80131c6:	d806      	bhi.n	80131d6 <_strtod_l+0xe6>
 80131c8:	e8df f006 	tbb	[pc, r6]
 80131cc:	201d0314 	.word	0x201d0314
 80131d0:	14          	.byte	0x14
 80131d1:	00          	.byte	0x00
 80131d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80131d6:	05e1      	lsls	r1, r4, #23
 80131d8:	bf48      	it	mi
 80131da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80131de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80131e2:	0d1b      	lsrs	r3, r3, #20
 80131e4:	051b      	lsls	r3, r3, #20
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d1bb      	bne.n	8013162 <_strtod_l+0x72>
 80131ea:	f001 fe1b 	bl	8014e24 <__errno>
 80131ee:	2322      	movs	r3, #34	@ 0x22
 80131f0:	6003      	str	r3, [r0, #0]
 80131f2:	e7b6      	b.n	8013162 <_strtod_l+0x72>
 80131f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80131f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80131fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013200:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013204:	e7e7      	b.n	80131d6 <_strtod_l+0xe6>
 8013206:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013388 <_strtod_l+0x298>
 801320a:	e7e4      	b.n	80131d6 <_strtod_l+0xe6>
 801320c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013210:	f04f 3aff 	mov.w	sl, #4294967295
 8013214:	e7df      	b.n	80131d6 <_strtod_l+0xe6>
 8013216:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013218:	1c5a      	adds	r2, r3, #1
 801321a:	9219      	str	r2, [sp, #100]	@ 0x64
 801321c:	785b      	ldrb	r3, [r3, #1]
 801321e:	2b30      	cmp	r3, #48	@ 0x30
 8013220:	d0f9      	beq.n	8013216 <_strtod_l+0x126>
 8013222:	2b00      	cmp	r3, #0
 8013224:	d09d      	beq.n	8013162 <_strtod_l+0x72>
 8013226:	2301      	movs	r3, #1
 8013228:	2700      	movs	r7, #0
 801322a:	9308      	str	r3, [sp, #32]
 801322c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801322e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013230:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013232:	46b9      	mov	r9, r7
 8013234:	220a      	movs	r2, #10
 8013236:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013238:	7805      	ldrb	r5, [r0, #0]
 801323a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801323e:	b2d9      	uxtb	r1, r3
 8013240:	2909      	cmp	r1, #9
 8013242:	d928      	bls.n	8013296 <_strtod_l+0x1a6>
 8013244:	494f      	ldr	r1, [pc, #316]	@ (8013384 <_strtod_l+0x294>)
 8013246:	2201      	movs	r2, #1
 8013248:	f001 fcd5 	bl	8014bf6 <strncmp>
 801324c:	2800      	cmp	r0, #0
 801324e:	d032      	beq.n	80132b6 <_strtod_l+0x1c6>
 8013250:	2000      	movs	r0, #0
 8013252:	462a      	mov	r2, r5
 8013254:	900a      	str	r0, [sp, #40]	@ 0x28
 8013256:	464d      	mov	r5, r9
 8013258:	4603      	mov	r3, r0
 801325a:	2a65      	cmp	r2, #101	@ 0x65
 801325c:	d001      	beq.n	8013262 <_strtod_l+0x172>
 801325e:	2a45      	cmp	r2, #69	@ 0x45
 8013260:	d114      	bne.n	801328c <_strtod_l+0x19c>
 8013262:	b91d      	cbnz	r5, 801326c <_strtod_l+0x17c>
 8013264:	9a08      	ldr	r2, [sp, #32]
 8013266:	4302      	orrs	r2, r0
 8013268:	d096      	beq.n	8013198 <_strtod_l+0xa8>
 801326a:	2500      	movs	r5, #0
 801326c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801326e:	1c62      	adds	r2, r4, #1
 8013270:	9219      	str	r2, [sp, #100]	@ 0x64
 8013272:	7862      	ldrb	r2, [r4, #1]
 8013274:	2a2b      	cmp	r2, #43	@ 0x2b
 8013276:	d07a      	beq.n	801336e <_strtod_l+0x27e>
 8013278:	2a2d      	cmp	r2, #45	@ 0x2d
 801327a:	d07e      	beq.n	801337a <_strtod_l+0x28a>
 801327c:	f04f 0c00 	mov.w	ip, #0
 8013280:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013284:	2909      	cmp	r1, #9
 8013286:	f240 8085 	bls.w	8013394 <_strtod_l+0x2a4>
 801328a:	9419      	str	r4, [sp, #100]	@ 0x64
 801328c:	f04f 0800 	mov.w	r8, #0
 8013290:	e0a5      	b.n	80133de <_strtod_l+0x2ee>
 8013292:	2300      	movs	r3, #0
 8013294:	e7c8      	b.n	8013228 <_strtod_l+0x138>
 8013296:	f1b9 0f08 	cmp.w	r9, #8
 801329a:	bfd8      	it	le
 801329c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801329e:	f100 0001 	add.w	r0, r0, #1
 80132a2:	bfda      	itte	le
 80132a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80132a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80132aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80132ae:	f109 0901 	add.w	r9, r9, #1
 80132b2:	9019      	str	r0, [sp, #100]	@ 0x64
 80132b4:	e7bf      	b.n	8013236 <_strtod_l+0x146>
 80132b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132b8:	1c5a      	adds	r2, r3, #1
 80132ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80132bc:	785a      	ldrb	r2, [r3, #1]
 80132be:	f1b9 0f00 	cmp.w	r9, #0
 80132c2:	d03b      	beq.n	801333c <_strtod_l+0x24c>
 80132c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80132c6:	464d      	mov	r5, r9
 80132c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80132cc:	2b09      	cmp	r3, #9
 80132ce:	d912      	bls.n	80132f6 <_strtod_l+0x206>
 80132d0:	2301      	movs	r3, #1
 80132d2:	e7c2      	b.n	801325a <_strtod_l+0x16a>
 80132d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132d6:	1c5a      	adds	r2, r3, #1
 80132d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80132da:	785a      	ldrb	r2, [r3, #1]
 80132dc:	3001      	adds	r0, #1
 80132de:	2a30      	cmp	r2, #48	@ 0x30
 80132e0:	d0f8      	beq.n	80132d4 <_strtod_l+0x1e4>
 80132e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80132e6:	2b08      	cmp	r3, #8
 80132e8:	f200 84d2 	bhi.w	8013c90 <_strtod_l+0xba0>
 80132ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80132f0:	2000      	movs	r0, #0
 80132f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80132f4:	4605      	mov	r5, r0
 80132f6:	3a30      	subs	r2, #48	@ 0x30
 80132f8:	f100 0301 	add.w	r3, r0, #1
 80132fc:	d018      	beq.n	8013330 <_strtod_l+0x240>
 80132fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013300:	4419      	add	r1, r3
 8013302:	910a      	str	r1, [sp, #40]	@ 0x28
 8013304:	462e      	mov	r6, r5
 8013306:	f04f 0e0a 	mov.w	lr, #10
 801330a:	1c71      	adds	r1, r6, #1
 801330c:	eba1 0c05 	sub.w	ip, r1, r5
 8013310:	4563      	cmp	r3, ip
 8013312:	dc15      	bgt.n	8013340 <_strtod_l+0x250>
 8013314:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013318:	182b      	adds	r3, r5, r0
 801331a:	2b08      	cmp	r3, #8
 801331c:	f105 0501 	add.w	r5, r5, #1
 8013320:	4405      	add	r5, r0
 8013322:	dc1a      	bgt.n	801335a <_strtod_l+0x26a>
 8013324:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013326:	230a      	movs	r3, #10
 8013328:	fb03 2301 	mla	r3, r3, r1, r2
 801332c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801332e:	2300      	movs	r3, #0
 8013330:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013332:	1c51      	adds	r1, r2, #1
 8013334:	9119      	str	r1, [sp, #100]	@ 0x64
 8013336:	7852      	ldrb	r2, [r2, #1]
 8013338:	4618      	mov	r0, r3
 801333a:	e7c5      	b.n	80132c8 <_strtod_l+0x1d8>
 801333c:	4648      	mov	r0, r9
 801333e:	e7ce      	b.n	80132de <_strtod_l+0x1ee>
 8013340:	2e08      	cmp	r6, #8
 8013342:	dc05      	bgt.n	8013350 <_strtod_l+0x260>
 8013344:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013346:	fb0e f606 	mul.w	r6, lr, r6
 801334a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801334c:	460e      	mov	r6, r1
 801334e:	e7dc      	b.n	801330a <_strtod_l+0x21a>
 8013350:	2910      	cmp	r1, #16
 8013352:	bfd8      	it	le
 8013354:	fb0e f707 	mulle.w	r7, lr, r7
 8013358:	e7f8      	b.n	801334c <_strtod_l+0x25c>
 801335a:	2b0f      	cmp	r3, #15
 801335c:	bfdc      	itt	le
 801335e:	230a      	movle	r3, #10
 8013360:	fb03 2707 	mlale	r7, r3, r7, r2
 8013364:	e7e3      	b.n	801332e <_strtod_l+0x23e>
 8013366:	2300      	movs	r3, #0
 8013368:	930a      	str	r3, [sp, #40]	@ 0x28
 801336a:	2301      	movs	r3, #1
 801336c:	e77a      	b.n	8013264 <_strtod_l+0x174>
 801336e:	f04f 0c00 	mov.w	ip, #0
 8013372:	1ca2      	adds	r2, r4, #2
 8013374:	9219      	str	r2, [sp, #100]	@ 0x64
 8013376:	78a2      	ldrb	r2, [r4, #2]
 8013378:	e782      	b.n	8013280 <_strtod_l+0x190>
 801337a:	f04f 0c01 	mov.w	ip, #1
 801337e:	e7f8      	b.n	8013372 <_strtod_l+0x282>
 8013380:	08017d00 	.word	0x08017d00
 8013384:	08017ac0 	.word	0x08017ac0
 8013388:	7ff00000 	.word	0x7ff00000
 801338c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801338e:	1c51      	adds	r1, r2, #1
 8013390:	9119      	str	r1, [sp, #100]	@ 0x64
 8013392:	7852      	ldrb	r2, [r2, #1]
 8013394:	2a30      	cmp	r2, #48	@ 0x30
 8013396:	d0f9      	beq.n	801338c <_strtod_l+0x29c>
 8013398:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801339c:	2908      	cmp	r1, #8
 801339e:	f63f af75 	bhi.w	801328c <_strtod_l+0x19c>
 80133a2:	3a30      	subs	r2, #48	@ 0x30
 80133a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80133a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80133aa:	f04f 080a 	mov.w	r8, #10
 80133ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133b0:	1c56      	adds	r6, r2, #1
 80133b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80133b4:	7852      	ldrb	r2, [r2, #1]
 80133b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80133ba:	f1be 0f09 	cmp.w	lr, #9
 80133be:	d939      	bls.n	8013434 <_strtod_l+0x344>
 80133c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80133c2:	1a76      	subs	r6, r6, r1
 80133c4:	2e08      	cmp	r6, #8
 80133c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80133ca:	dc03      	bgt.n	80133d4 <_strtod_l+0x2e4>
 80133cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80133ce:	4588      	cmp	r8, r1
 80133d0:	bfa8      	it	ge
 80133d2:	4688      	movge	r8, r1
 80133d4:	f1bc 0f00 	cmp.w	ip, #0
 80133d8:	d001      	beq.n	80133de <_strtod_l+0x2ee>
 80133da:	f1c8 0800 	rsb	r8, r8, #0
 80133de:	2d00      	cmp	r5, #0
 80133e0:	d14e      	bne.n	8013480 <_strtod_l+0x390>
 80133e2:	9908      	ldr	r1, [sp, #32]
 80133e4:	4308      	orrs	r0, r1
 80133e6:	f47f aebc 	bne.w	8013162 <_strtod_l+0x72>
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f47f aed4 	bne.w	8013198 <_strtod_l+0xa8>
 80133f0:	2a69      	cmp	r2, #105	@ 0x69
 80133f2:	d028      	beq.n	8013446 <_strtod_l+0x356>
 80133f4:	dc25      	bgt.n	8013442 <_strtod_l+0x352>
 80133f6:	2a49      	cmp	r2, #73	@ 0x49
 80133f8:	d025      	beq.n	8013446 <_strtod_l+0x356>
 80133fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80133fc:	f47f aecc 	bne.w	8013198 <_strtod_l+0xa8>
 8013400:	499a      	ldr	r1, [pc, #616]	@ (801366c <_strtod_l+0x57c>)
 8013402:	a819      	add	r0, sp, #100	@ 0x64
 8013404:	f002 fea4 	bl	8016150 <__match>
 8013408:	2800      	cmp	r0, #0
 801340a:	f43f aec5 	beq.w	8013198 <_strtod_l+0xa8>
 801340e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	2b28      	cmp	r3, #40	@ 0x28
 8013414:	d12e      	bne.n	8013474 <_strtod_l+0x384>
 8013416:	4996      	ldr	r1, [pc, #600]	@ (8013670 <_strtod_l+0x580>)
 8013418:	aa1c      	add	r2, sp, #112	@ 0x70
 801341a:	a819      	add	r0, sp, #100	@ 0x64
 801341c:	f002 feac 	bl	8016178 <__hexnan>
 8013420:	2805      	cmp	r0, #5
 8013422:	d127      	bne.n	8013474 <_strtod_l+0x384>
 8013424:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013426:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801342a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801342e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013432:	e696      	b.n	8013162 <_strtod_l+0x72>
 8013434:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013436:	fb08 2101 	mla	r1, r8, r1, r2
 801343a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801343e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013440:	e7b5      	b.n	80133ae <_strtod_l+0x2be>
 8013442:	2a6e      	cmp	r2, #110	@ 0x6e
 8013444:	e7da      	b.n	80133fc <_strtod_l+0x30c>
 8013446:	498b      	ldr	r1, [pc, #556]	@ (8013674 <_strtod_l+0x584>)
 8013448:	a819      	add	r0, sp, #100	@ 0x64
 801344a:	f002 fe81 	bl	8016150 <__match>
 801344e:	2800      	cmp	r0, #0
 8013450:	f43f aea2 	beq.w	8013198 <_strtod_l+0xa8>
 8013454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013456:	4988      	ldr	r1, [pc, #544]	@ (8013678 <_strtod_l+0x588>)
 8013458:	3b01      	subs	r3, #1
 801345a:	a819      	add	r0, sp, #100	@ 0x64
 801345c:	9319      	str	r3, [sp, #100]	@ 0x64
 801345e:	f002 fe77 	bl	8016150 <__match>
 8013462:	b910      	cbnz	r0, 801346a <_strtod_l+0x37a>
 8013464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013466:	3301      	adds	r3, #1
 8013468:	9319      	str	r3, [sp, #100]	@ 0x64
 801346a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013688 <_strtod_l+0x598>
 801346e:	f04f 0a00 	mov.w	sl, #0
 8013472:	e676      	b.n	8013162 <_strtod_l+0x72>
 8013474:	4881      	ldr	r0, [pc, #516]	@ (801367c <_strtod_l+0x58c>)
 8013476:	f001 fd13 	bl	8014ea0 <nan>
 801347a:	ec5b ab10 	vmov	sl, fp, d0
 801347e:	e670      	b.n	8013162 <_strtod_l+0x72>
 8013480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013482:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013484:	eba8 0303 	sub.w	r3, r8, r3
 8013488:	f1b9 0f00 	cmp.w	r9, #0
 801348c:	bf08      	it	eq
 801348e:	46a9      	moveq	r9, r5
 8013490:	2d10      	cmp	r5, #16
 8013492:	9309      	str	r3, [sp, #36]	@ 0x24
 8013494:	462c      	mov	r4, r5
 8013496:	bfa8      	it	ge
 8013498:	2410      	movge	r4, #16
 801349a:	f7ed f853 	bl	8000544 <__aeabi_ui2d>
 801349e:	2d09      	cmp	r5, #9
 80134a0:	4682      	mov	sl, r0
 80134a2:	468b      	mov	fp, r1
 80134a4:	dc13      	bgt.n	80134ce <_strtod_l+0x3de>
 80134a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f43f ae5a 	beq.w	8013162 <_strtod_l+0x72>
 80134ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134b0:	dd78      	ble.n	80135a4 <_strtod_l+0x4b4>
 80134b2:	2b16      	cmp	r3, #22
 80134b4:	dc5f      	bgt.n	8013576 <_strtod_l+0x486>
 80134b6:	4972      	ldr	r1, [pc, #456]	@ (8013680 <_strtod_l+0x590>)
 80134b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80134bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134c0:	4652      	mov	r2, sl
 80134c2:	465b      	mov	r3, fp
 80134c4:	f7ed f8b8 	bl	8000638 <__aeabi_dmul>
 80134c8:	4682      	mov	sl, r0
 80134ca:	468b      	mov	fp, r1
 80134cc:	e649      	b.n	8013162 <_strtod_l+0x72>
 80134ce:	4b6c      	ldr	r3, [pc, #432]	@ (8013680 <_strtod_l+0x590>)
 80134d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80134d8:	f7ed f8ae 	bl	8000638 <__aeabi_dmul>
 80134dc:	4682      	mov	sl, r0
 80134de:	4638      	mov	r0, r7
 80134e0:	468b      	mov	fp, r1
 80134e2:	f7ed f82f 	bl	8000544 <__aeabi_ui2d>
 80134e6:	4602      	mov	r2, r0
 80134e8:	460b      	mov	r3, r1
 80134ea:	4650      	mov	r0, sl
 80134ec:	4659      	mov	r1, fp
 80134ee:	f7ec feed 	bl	80002cc <__adddf3>
 80134f2:	2d0f      	cmp	r5, #15
 80134f4:	4682      	mov	sl, r0
 80134f6:	468b      	mov	fp, r1
 80134f8:	ddd5      	ble.n	80134a6 <_strtod_l+0x3b6>
 80134fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134fc:	1b2c      	subs	r4, r5, r4
 80134fe:	441c      	add	r4, r3
 8013500:	2c00      	cmp	r4, #0
 8013502:	f340 8093 	ble.w	801362c <_strtod_l+0x53c>
 8013506:	f014 030f 	ands.w	r3, r4, #15
 801350a:	d00a      	beq.n	8013522 <_strtod_l+0x432>
 801350c:	495c      	ldr	r1, [pc, #368]	@ (8013680 <_strtod_l+0x590>)
 801350e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013512:	4652      	mov	r2, sl
 8013514:	465b      	mov	r3, fp
 8013516:	e9d1 0100 	ldrd	r0, r1, [r1]
 801351a:	f7ed f88d 	bl	8000638 <__aeabi_dmul>
 801351e:	4682      	mov	sl, r0
 8013520:	468b      	mov	fp, r1
 8013522:	f034 040f 	bics.w	r4, r4, #15
 8013526:	d073      	beq.n	8013610 <_strtod_l+0x520>
 8013528:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801352c:	dd49      	ble.n	80135c2 <_strtod_l+0x4d2>
 801352e:	2400      	movs	r4, #0
 8013530:	46a0      	mov	r8, r4
 8013532:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013534:	46a1      	mov	r9, r4
 8013536:	9a05      	ldr	r2, [sp, #20]
 8013538:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013688 <_strtod_l+0x598>
 801353c:	2322      	movs	r3, #34	@ 0x22
 801353e:	6013      	str	r3, [r2, #0]
 8013540:	f04f 0a00 	mov.w	sl, #0
 8013544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013546:	2b00      	cmp	r3, #0
 8013548:	f43f ae0b 	beq.w	8013162 <_strtod_l+0x72>
 801354c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801354e:	9805      	ldr	r0, [sp, #20]
 8013550:	f002 ffb6 	bl	80164c0 <_Bfree>
 8013554:	9805      	ldr	r0, [sp, #20]
 8013556:	4649      	mov	r1, r9
 8013558:	f002 ffb2 	bl	80164c0 <_Bfree>
 801355c:	9805      	ldr	r0, [sp, #20]
 801355e:	4641      	mov	r1, r8
 8013560:	f002 ffae 	bl	80164c0 <_Bfree>
 8013564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013566:	9805      	ldr	r0, [sp, #20]
 8013568:	f002 ffaa 	bl	80164c0 <_Bfree>
 801356c:	9805      	ldr	r0, [sp, #20]
 801356e:	4621      	mov	r1, r4
 8013570:	f002 ffa6 	bl	80164c0 <_Bfree>
 8013574:	e5f5      	b.n	8013162 <_strtod_l+0x72>
 8013576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013578:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801357c:	4293      	cmp	r3, r2
 801357e:	dbbc      	blt.n	80134fa <_strtod_l+0x40a>
 8013580:	4c3f      	ldr	r4, [pc, #252]	@ (8013680 <_strtod_l+0x590>)
 8013582:	f1c5 050f 	rsb	r5, r5, #15
 8013586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801358a:	4652      	mov	r2, sl
 801358c:	465b      	mov	r3, fp
 801358e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013592:	f7ed f851 	bl	8000638 <__aeabi_dmul>
 8013596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013598:	1b5d      	subs	r5, r3, r5
 801359a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801359e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80135a2:	e78f      	b.n	80134c4 <_strtod_l+0x3d4>
 80135a4:	3316      	adds	r3, #22
 80135a6:	dba8      	blt.n	80134fa <_strtod_l+0x40a>
 80135a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135aa:	eba3 0808 	sub.w	r8, r3, r8
 80135ae:	4b34      	ldr	r3, [pc, #208]	@ (8013680 <_strtod_l+0x590>)
 80135b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80135b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80135b8:	4650      	mov	r0, sl
 80135ba:	4659      	mov	r1, fp
 80135bc:	f7ed f966 	bl	800088c <__aeabi_ddiv>
 80135c0:	e782      	b.n	80134c8 <_strtod_l+0x3d8>
 80135c2:	2300      	movs	r3, #0
 80135c4:	4f2f      	ldr	r7, [pc, #188]	@ (8013684 <_strtod_l+0x594>)
 80135c6:	1124      	asrs	r4, r4, #4
 80135c8:	4650      	mov	r0, sl
 80135ca:	4659      	mov	r1, fp
 80135cc:	461e      	mov	r6, r3
 80135ce:	2c01      	cmp	r4, #1
 80135d0:	dc21      	bgt.n	8013616 <_strtod_l+0x526>
 80135d2:	b10b      	cbz	r3, 80135d8 <_strtod_l+0x4e8>
 80135d4:	4682      	mov	sl, r0
 80135d6:	468b      	mov	fp, r1
 80135d8:	492a      	ldr	r1, [pc, #168]	@ (8013684 <_strtod_l+0x594>)
 80135da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80135de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80135e2:	4652      	mov	r2, sl
 80135e4:	465b      	mov	r3, fp
 80135e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135ea:	f7ed f825 	bl	8000638 <__aeabi_dmul>
 80135ee:	4b26      	ldr	r3, [pc, #152]	@ (8013688 <_strtod_l+0x598>)
 80135f0:	460a      	mov	r2, r1
 80135f2:	400b      	ands	r3, r1
 80135f4:	4925      	ldr	r1, [pc, #148]	@ (801368c <_strtod_l+0x59c>)
 80135f6:	428b      	cmp	r3, r1
 80135f8:	4682      	mov	sl, r0
 80135fa:	d898      	bhi.n	801352e <_strtod_l+0x43e>
 80135fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013600:	428b      	cmp	r3, r1
 8013602:	bf86      	itte	hi
 8013604:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013690 <_strtod_l+0x5a0>
 8013608:	f04f 3aff 	movhi.w	sl, #4294967295
 801360c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013610:	2300      	movs	r3, #0
 8013612:	9308      	str	r3, [sp, #32]
 8013614:	e076      	b.n	8013704 <_strtod_l+0x614>
 8013616:	07e2      	lsls	r2, r4, #31
 8013618:	d504      	bpl.n	8013624 <_strtod_l+0x534>
 801361a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801361e:	f7ed f80b 	bl	8000638 <__aeabi_dmul>
 8013622:	2301      	movs	r3, #1
 8013624:	3601      	adds	r6, #1
 8013626:	1064      	asrs	r4, r4, #1
 8013628:	3708      	adds	r7, #8
 801362a:	e7d0      	b.n	80135ce <_strtod_l+0x4de>
 801362c:	d0f0      	beq.n	8013610 <_strtod_l+0x520>
 801362e:	4264      	negs	r4, r4
 8013630:	f014 020f 	ands.w	r2, r4, #15
 8013634:	d00a      	beq.n	801364c <_strtod_l+0x55c>
 8013636:	4b12      	ldr	r3, [pc, #72]	@ (8013680 <_strtod_l+0x590>)
 8013638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801363c:	4650      	mov	r0, sl
 801363e:	4659      	mov	r1, fp
 8013640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013644:	f7ed f922 	bl	800088c <__aeabi_ddiv>
 8013648:	4682      	mov	sl, r0
 801364a:	468b      	mov	fp, r1
 801364c:	1124      	asrs	r4, r4, #4
 801364e:	d0df      	beq.n	8013610 <_strtod_l+0x520>
 8013650:	2c1f      	cmp	r4, #31
 8013652:	dd1f      	ble.n	8013694 <_strtod_l+0x5a4>
 8013654:	2400      	movs	r4, #0
 8013656:	46a0      	mov	r8, r4
 8013658:	940b      	str	r4, [sp, #44]	@ 0x2c
 801365a:	46a1      	mov	r9, r4
 801365c:	9a05      	ldr	r2, [sp, #20]
 801365e:	2322      	movs	r3, #34	@ 0x22
 8013660:	f04f 0a00 	mov.w	sl, #0
 8013664:	f04f 0b00 	mov.w	fp, #0
 8013668:	6013      	str	r3, [r2, #0]
 801366a:	e76b      	b.n	8013544 <_strtod_l+0x454>
 801366c:	08017acf 	.word	0x08017acf
 8013670:	08017cec 	.word	0x08017cec
 8013674:	08017ac7 	.word	0x08017ac7
 8013678:	08017bae 	.word	0x08017bae
 801367c:	08017baa 	.word	0x08017baa
 8013680:	08017e78 	.word	0x08017e78
 8013684:	08017e50 	.word	0x08017e50
 8013688:	7ff00000 	.word	0x7ff00000
 801368c:	7ca00000 	.word	0x7ca00000
 8013690:	7fefffff 	.word	0x7fefffff
 8013694:	f014 0310 	ands.w	r3, r4, #16
 8013698:	bf18      	it	ne
 801369a:	236a      	movne	r3, #106	@ 0x6a
 801369c:	4ea9      	ldr	r6, [pc, #676]	@ (8013944 <_strtod_l+0x854>)
 801369e:	9308      	str	r3, [sp, #32]
 80136a0:	4650      	mov	r0, sl
 80136a2:	4659      	mov	r1, fp
 80136a4:	2300      	movs	r3, #0
 80136a6:	07e7      	lsls	r7, r4, #31
 80136a8:	d504      	bpl.n	80136b4 <_strtod_l+0x5c4>
 80136aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80136ae:	f7ec ffc3 	bl	8000638 <__aeabi_dmul>
 80136b2:	2301      	movs	r3, #1
 80136b4:	1064      	asrs	r4, r4, #1
 80136b6:	f106 0608 	add.w	r6, r6, #8
 80136ba:	d1f4      	bne.n	80136a6 <_strtod_l+0x5b6>
 80136bc:	b10b      	cbz	r3, 80136c2 <_strtod_l+0x5d2>
 80136be:	4682      	mov	sl, r0
 80136c0:	468b      	mov	fp, r1
 80136c2:	9b08      	ldr	r3, [sp, #32]
 80136c4:	b1b3      	cbz	r3, 80136f4 <_strtod_l+0x604>
 80136c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80136ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	4659      	mov	r1, fp
 80136d2:	dd0f      	ble.n	80136f4 <_strtod_l+0x604>
 80136d4:	2b1f      	cmp	r3, #31
 80136d6:	dd56      	ble.n	8013786 <_strtod_l+0x696>
 80136d8:	2b34      	cmp	r3, #52	@ 0x34
 80136da:	bfde      	ittt	le
 80136dc:	f04f 33ff 	movle.w	r3, #4294967295
 80136e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80136e4:	4093      	lslle	r3, r2
 80136e6:	f04f 0a00 	mov.w	sl, #0
 80136ea:	bfcc      	ite	gt
 80136ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80136f0:	ea03 0b01 	andle.w	fp, r3, r1
 80136f4:	2200      	movs	r2, #0
 80136f6:	2300      	movs	r3, #0
 80136f8:	4650      	mov	r0, sl
 80136fa:	4659      	mov	r1, fp
 80136fc:	f7ed fa04 	bl	8000b08 <__aeabi_dcmpeq>
 8013700:	2800      	cmp	r0, #0
 8013702:	d1a7      	bne.n	8013654 <_strtod_l+0x564>
 8013704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801370a:	9805      	ldr	r0, [sp, #20]
 801370c:	462b      	mov	r3, r5
 801370e:	464a      	mov	r2, r9
 8013710:	f002 ff3e 	bl	8016590 <__s2b>
 8013714:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013716:	2800      	cmp	r0, #0
 8013718:	f43f af09 	beq.w	801352e <_strtod_l+0x43e>
 801371c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801371e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013720:	2a00      	cmp	r2, #0
 8013722:	eba3 0308 	sub.w	r3, r3, r8
 8013726:	bfa8      	it	ge
 8013728:	2300      	movge	r3, #0
 801372a:	9312      	str	r3, [sp, #72]	@ 0x48
 801372c:	2400      	movs	r4, #0
 801372e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013732:	9316      	str	r3, [sp, #88]	@ 0x58
 8013734:	46a0      	mov	r8, r4
 8013736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013738:	9805      	ldr	r0, [sp, #20]
 801373a:	6859      	ldr	r1, [r3, #4]
 801373c:	f002 fe80 	bl	8016440 <_Balloc>
 8013740:	4681      	mov	r9, r0
 8013742:	2800      	cmp	r0, #0
 8013744:	f43f aef7 	beq.w	8013536 <_strtod_l+0x446>
 8013748:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801374a:	691a      	ldr	r2, [r3, #16]
 801374c:	3202      	adds	r2, #2
 801374e:	f103 010c 	add.w	r1, r3, #12
 8013752:	0092      	lsls	r2, r2, #2
 8013754:	300c      	adds	r0, #12
 8013756:	f001 fb92 	bl	8014e7e <memcpy>
 801375a:	ec4b ab10 	vmov	d0, sl, fp
 801375e:	9805      	ldr	r0, [sp, #20]
 8013760:	aa1c      	add	r2, sp, #112	@ 0x70
 8013762:	a91b      	add	r1, sp, #108	@ 0x6c
 8013764:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013768:	f003 fa46 	bl	8016bf8 <__d2b>
 801376c:	901a      	str	r0, [sp, #104]	@ 0x68
 801376e:	2800      	cmp	r0, #0
 8013770:	f43f aee1 	beq.w	8013536 <_strtod_l+0x446>
 8013774:	9805      	ldr	r0, [sp, #20]
 8013776:	2101      	movs	r1, #1
 8013778:	f002 ffa0 	bl	80166bc <__i2b>
 801377c:	4680      	mov	r8, r0
 801377e:	b948      	cbnz	r0, 8013794 <_strtod_l+0x6a4>
 8013780:	f04f 0800 	mov.w	r8, #0
 8013784:	e6d7      	b.n	8013536 <_strtod_l+0x446>
 8013786:	f04f 32ff 	mov.w	r2, #4294967295
 801378a:	fa02 f303 	lsl.w	r3, r2, r3
 801378e:	ea03 0a0a 	and.w	sl, r3, sl
 8013792:	e7af      	b.n	80136f4 <_strtod_l+0x604>
 8013794:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013796:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013798:	2d00      	cmp	r5, #0
 801379a:	bfab      	itete	ge
 801379c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801379e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80137a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80137a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80137a4:	bfac      	ite	ge
 80137a6:	18ef      	addge	r7, r5, r3
 80137a8:	1b5e      	sublt	r6, r3, r5
 80137aa:	9b08      	ldr	r3, [sp, #32]
 80137ac:	1aed      	subs	r5, r5, r3
 80137ae:	4415      	add	r5, r2
 80137b0:	4b65      	ldr	r3, [pc, #404]	@ (8013948 <_strtod_l+0x858>)
 80137b2:	3d01      	subs	r5, #1
 80137b4:	429d      	cmp	r5, r3
 80137b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80137ba:	da50      	bge.n	801385e <_strtod_l+0x76e>
 80137bc:	1b5b      	subs	r3, r3, r5
 80137be:	2b1f      	cmp	r3, #31
 80137c0:	eba2 0203 	sub.w	r2, r2, r3
 80137c4:	f04f 0101 	mov.w	r1, #1
 80137c8:	dc3d      	bgt.n	8013846 <_strtod_l+0x756>
 80137ca:	fa01 f303 	lsl.w	r3, r1, r3
 80137ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80137d0:	2300      	movs	r3, #0
 80137d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80137d4:	18bd      	adds	r5, r7, r2
 80137d6:	9b08      	ldr	r3, [sp, #32]
 80137d8:	42af      	cmp	r7, r5
 80137da:	4416      	add	r6, r2
 80137dc:	441e      	add	r6, r3
 80137de:	463b      	mov	r3, r7
 80137e0:	bfa8      	it	ge
 80137e2:	462b      	movge	r3, r5
 80137e4:	42b3      	cmp	r3, r6
 80137e6:	bfa8      	it	ge
 80137e8:	4633      	movge	r3, r6
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	bfc2      	ittt	gt
 80137ee:	1aed      	subgt	r5, r5, r3
 80137f0:	1af6      	subgt	r6, r6, r3
 80137f2:	1aff      	subgt	r7, r7, r3
 80137f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	dd16      	ble.n	8013828 <_strtod_l+0x738>
 80137fa:	4641      	mov	r1, r8
 80137fc:	9805      	ldr	r0, [sp, #20]
 80137fe:	461a      	mov	r2, r3
 8013800:	f003 f814 	bl	801682c <__pow5mult>
 8013804:	4680      	mov	r8, r0
 8013806:	2800      	cmp	r0, #0
 8013808:	d0ba      	beq.n	8013780 <_strtod_l+0x690>
 801380a:	4601      	mov	r1, r0
 801380c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801380e:	9805      	ldr	r0, [sp, #20]
 8013810:	f002 ff6a 	bl	80166e8 <__multiply>
 8013814:	900a      	str	r0, [sp, #40]	@ 0x28
 8013816:	2800      	cmp	r0, #0
 8013818:	f43f ae8d 	beq.w	8013536 <_strtod_l+0x446>
 801381c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801381e:	9805      	ldr	r0, [sp, #20]
 8013820:	f002 fe4e 	bl	80164c0 <_Bfree>
 8013824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013826:	931a      	str	r3, [sp, #104]	@ 0x68
 8013828:	2d00      	cmp	r5, #0
 801382a:	dc1d      	bgt.n	8013868 <_strtod_l+0x778>
 801382c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801382e:	2b00      	cmp	r3, #0
 8013830:	dd23      	ble.n	801387a <_strtod_l+0x78a>
 8013832:	4649      	mov	r1, r9
 8013834:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013836:	9805      	ldr	r0, [sp, #20]
 8013838:	f002 fff8 	bl	801682c <__pow5mult>
 801383c:	4681      	mov	r9, r0
 801383e:	b9e0      	cbnz	r0, 801387a <_strtod_l+0x78a>
 8013840:	f04f 0900 	mov.w	r9, #0
 8013844:	e677      	b.n	8013536 <_strtod_l+0x446>
 8013846:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801384a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801384e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013852:	35e2      	adds	r5, #226	@ 0xe2
 8013854:	fa01 f305 	lsl.w	r3, r1, r5
 8013858:	9310      	str	r3, [sp, #64]	@ 0x40
 801385a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801385c:	e7ba      	b.n	80137d4 <_strtod_l+0x6e4>
 801385e:	2300      	movs	r3, #0
 8013860:	9310      	str	r3, [sp, #64]	@ 0x40
 8013862:	2301      	movs	r3, #1
 8013864:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013866:	e7b5      	b.n	80137d4 <_strtod_l+0x6e4>
 8013868:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801386a:	9805      	ldr	r0, [sp, #20]
 801386c:	462a      	mov	r2, r5
 801386e:	f003 f837 	bl	80168e0 <__lshift>
 8013872:	901a      	str	r0, [sp, #104]	@ 0x68
 8013874:	2800      	cmp	r0, #0
 8013876:	d1d9      	bne.n	801382c <_strtod_l+0x73c>
 8013878:	e65d      	b.n	8013536 <_strtod_l+0x446>
 801387a:	2e00      	cmp	r6, #0
 801387c:	dd07      	ble.n	801388e <_strtod_l+0x79e>
 801387e:	4649      	mov	r1, r9
 8013880:	9805      	ldr	r0, [sp, #20]
 8013882:	4632      	mov	r2, r6
 8013884:	f003 f82c 	bl	80168e0 <__lshift>
 8013888:	4681      	mov	r9, r0
 801388a:	2800      	cmp	r0, #0
 801388c:	d0d8      	beq.n	8013840 <_strtod_l+0x750>
 801388e:	2f00      	cmp	r7, #0
 8013890:	dd08      	ble.n	80138a4 <_strtod_l+0x7b4>
 8013892:	4641      	mov	r1, r8
 8013894:	9805      	ldr	r0, [sp, #20]
 8013896:	463a      	mov	r2, r7
 8013898:	f003 f822 	bl	80168e0 <__lshift>
 801389c:	4680      	mov	r8, r0
 801389e:	2800      	cmp	r0, #0
 80138a0:	f43f ae49 	beq.w	8013536 <_strtod_l+0x446>
 80138a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80138a6:	9805      	ldr	r0, [sp, #20]
 80138a8:	464a      	mov	r2, r9
 80138aa:	f003 f8a1 	bl	80169f0 <__mdiff>
 80138ae:	4604      	mov	r4, r0
 80138b0:	2800      	cmp	r0, #0
 80138b2:	f43f ae40 	beq.w	8013536 <_strtod_l+0x446>
 80138b6:	68c3      	ldr	r3, [r0, #12]
 80138b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80138ba:	2300      	movs	r3, #0
 80138bc:	60c3      	str	r3, [r0, #12]
 80138be:	4641      	mov	r1, r8
 80138c0:	f003 f87a 	bl	80169b8 <__mcmp>
 80138c4:	2800      	cmp	r0, #0
 80138c6:	da45      	bge.n	8013954 <_strtod_l+0x864>
 80138c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ca:	ea53 030a 	orrs.w	r3, r3, sl
 80138ce:	d16b      	bne.n	80139a8 <_strtod_l+0x8b8>
 80138d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d167      	bne.n	80139a8 <_strtod_l+0x8b8>
 80138d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80138dc:	0d1b      	lsrs	r3, r3, #20
 80138de:	051b      	lsls	r3, r3, #20
 80138e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80138e4:	d960      	bls.n	80139a8 <_strtod_l+0x8b8>
 80138e6:	6963      	ldr	r3, [r4, #20]
 80138e8:	b913      	cbnz	r3, 80138f0 <_strtod_l+0x800>
 80138ea:	6923      	ldr	r3, [r4, #16]
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	dd5b      	ble.n	80139a8 <_strtod_l+0x8b8>
 80138f0:	4621      	mov	r1, r4
 80138f2:	2201      	movs	r2, #1
 80138f4:	9805      	ldr	r0, [sp, #20]
 80138f6:	f002 fff3 	bl	80168e0 <__lshift>
 80138fa:	4641      	mov	r1, r8
 80138fc:	4604      	mov	r4, r0
 80138fe:	f003 f85b 	bl	80169b8 <__mcmp>
 8013902:	2800      	cmp	r0, #0
 8013904:	dd50      	ble.n	80139a8 <_strtod_l+0x8b8>
 8013906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801390a:	9a08      	ldr	r2, [sp, #32]
 801390c:	0d1b      	lsrs	r3, r3, #20
 801390e:	051b      	lsls	r3, r3, #20
 8013910:	2a00      	cmp	r2, #0
 8013912:	d06a      	beq.n	80139ea <_strtod_l+0x8fa>
 8013914:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013918:	d867      	bhi.n	80139ea <_strtod_l+0x8fa>
 801391a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801391e:	f67f ae9d 	bls.w	801365c <_strtod_l+0x56c>
 8013922:	4b0a      	ldr	r3, [pc, #40]	@ (801394c <_strtod_l+0x85c>)
 8013924:	4650      	mov	r0, sl
 8013926:	4659      	mov	r1, fp
 8013928:	2200      	movs	r2, #0
 801392a:	f7ec fe85 	bl	8000638 <__aeabi_dmul>
 801392e:	4b08      	ldr	r3, [pc, #32]	@ (8013950 <_strtod_l+0x860>)
 8013930:	400b      	ands	r3, r1
 8013932:	4682      	mov	sl, r0
 8013934:	468b      	mov	fp, r1
 8013936:	2b00      	cmp	r3, #0
 8013938:	f47f ae08 	bne.w	801354c <_strtod_l+0x45c>
 801393c:	9a05      	ldr	r2, [sp, #20]
 801393e:	2322      	movs	r3, #34	@ 0x22
 8013940:	6013      	str	r3, [r2, #0]
 8013942:	e603      	b.n	801354c <_strtod_l+0x45c>
 8013944:	08017d18 	.word	0x08017d18
 8013948:	fffffc02 	.word	0xfffffc02
 801394c:	39500000 	.word	0x39500000
 8013950:	7ff00000 	.word	0x7ff00000
 8013954:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013958:	d165      	bne.n	8013a26 <_strtod_l+0x936>
 801395a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801395c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013960:	b35a      	cbz	r2, 80139ba <_strtod_l+0x8ca>
 8013962:	4a9f      	ldr	r2, [pc, #636]	@ (8013be0 <_strtod_l+0xaf0>)
 8013964:	4293      	cmp	r3, r2
 8013966:	d12b      	bne.n	80139c0 <_strtod_l+0x8d0>
 8013968:	9b08      	ldr	r3, [sp, #32]
 801396a:	4651      	mov	r1, sl
 801396c:	b303      	cbz	r3, 80139b0 <_strtod_l+0x8c0>
 801396e:	4b9d      	ldr	r3, [pc, #628]	@ (8013be4 <_strtod_l+0xaf4>)
 8013970:	465a      	mov	r2, fp
 8013972:	4013      	ands	r3, r2
 8013974:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013978:	f04f 32ff 	mov.w	r2, #4294967295
 801397c:	d81b      	bhi.n	80139b6 <_strtod_l+0x8c6>
 801397e:	0d1b      	lsrs	r3, r3, #20
 8013980:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013984:	fa02 f303 	lsl.w	r3, r2, r3
 8013988:	4299      	cmp	r1, r3
 801398a:	d119      	bne.n	80139c0 <_strtod_l+0x8d0>
 801398c:	4b96      	ldr	r3, [pc, #600]	@ (8013be8 <_strtod_l+0xaf8>)
 801398e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013990:	429a      	cmp	r2, r3
 8013992:	d102      	bne.n	801399a <_strtod_l+0x8aa>
 8013994:	3101      	adds	r1, #1
 8013996:	f43f adce 	beq.w	8013536 <_strtod_l+0x446>
 801399a:	4b92      	ldr	r3, [pc, #584]	@ (8013be4 <_strtod_l+0xaf4>)
 801399c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801399e:	401a      	ands	r2, r3
 80139a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80139a4:	f04f 0a00 	mov.w	sl, #0
 80139a8:	9b08      	ldr	r3, [sp, #32]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d1b9      	bne.n	8013922 <_strtod_l+0x832>
 80139ae:	e5cd      	b.n	801354c <_strtod_l+0x45c>
 80139b0:	f04f 33ff 	mov.w	r3, #4294967295
 80139b4:	e7e8      	b.n	8013988 <_strtod_l+0x898>
 80139b6:	4613      	mov	r3, r2
 80139b8:	e7e6      	b.n	8013988 <_strtod_l+0x898>
 80139ba:	ea53 030a 	orrs.w	r3, r3, sl
 80139be:	d0a2      	beq.n	8013906 <_strtod_l+0x816>
 80139c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139c2:	b1db      	cbz	r3, 80139fc <_strtod_l+0x90c>
 80139c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80139c6:	4213      	tst	r3, r2
 80139c8:	d0ee      	beq.n	80139a8 <_strtod_l+0x8b8>
 80139ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139cc:	9a08      	ldr	r2, [sp, #32]
 80139ce:	4650      	mov	r0, sl
 80139d0:	4659      	mov	r1, fp
 80139d2:	b1bb      	cbz	r3, 8013a04 <_strtod_l+0x914>
 80139d4:	f7ff fb6d 	bl	80130b2 <sulp>
 80139d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80139dc:	ec53 2b10 	vmov	r2, r3, d0
 80139e0:	f7ec fc74 	bl	80002cc <__adddf3>
 80139e4:	4682      	mov	sl, r0
 80139e6:	468b      	mov	fp, r1
 80139e8:	e7de      	b.n	80139a8 <_strtod_l+0x8b8>
 80139ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80139ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80139f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80139f6:	f04f 3aff 	mov.w	sl, #4294967295
 80139fa:	e7d5      	b.n	80139a8 <_strtod_l+0x8b8>
 80139fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139fe:	ea13 0f0a 	tst.w	r3, sl
 8013a02:	e7e1      	b.n	80139c8 <_strtod_l+0x8d8>
 8013a04:	f7ff fb55 	bl	80130b2 <sulp>
 8013a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a0c:	ec53 2b10 	vmov	r2, r3, d0
 8013a10:	f7ec fc5a 	bl	80002c8 <__aeabi_dsub>
 8013a14:	2200      	movs	r2, #0
 8013a16:	2300      	movs	r3, #0
 8013a18:	4682      	mov	sl, r0
 8013a1a:	468b      	mov	fp, r1
 8013a1c:	f7ed f874 	bl	8000b08 <__aeabi_dcmpeq>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d0c1      	beq.n	80139a8 <_strtod_l+0x8b8>
 8013a24:	e61a      	b.n	801365c <_strtod_l+0x56c>
 8013a26:	4641      	mov	r1, r8
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f003 f93d 	bl	8016ca8 <__ratio>
 8013a2e:	ec57 6b10 	vmov	r6, r7, d0
 8013a32:	2200      	movs	r2, #0
 8013a34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013a38:	4630      	mov	r0, r6
 8013a3a:	4639      	mov	r1, r7
 8013a3c:	f7ed f878 	bl	8000b30 <__aeabi_dcmple>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d06f      	beq.n	8013b24 <_strtod_l+0xa34>
 8013a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d17a      	bne.n	8013b40 <_strtod_l+0xa50>
 8013a4a:	f1ba 0f00 	cmp.w	sl, #0
 8013a4e:	d158      	bne.n	8013b02 <_strtod_l+0xa12>
 8013a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d15a      	bne.n	8013b10 <_strtod_l+0xa20>
 8013a5a:	4b64      	ldr	r3, [pc, #400]	@ (8013bec <_strtod_l+0xafc>)
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	4630      	mov	r0, r6
 8013a60:	4639      	mov	r1, r7
 8013a62:	f7ed f85b 	bl	8000b1c <__aeabi_dcmplt>
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d159      	bne.n	8013b1e <_strtod_l+0xa2e>
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	4639      	mov	r1, r7
 8013a6e:	4b60      	ldr	r3, [pc, #384]	@ (8013bf0 <_strtod_l+0xb00>)
 8013a70:	2200      	movs	r2, #0
 8013a72:	f7ec fde1 	bl	8000638 <__aeabi_dmul>
 8013a76:	4606      	mov	r6, r0
 8013a78:	460f      	mov	r7, r1
 8013a7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013a7e:	9606      	str	r6, [sp, #24]
 8013a80:	9307      	str	r3, [sp, #28]
 8013a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a86:	4d57      	ldr	r5, [pc, #348]	@ (8013be4 <_strtod_l+0xaf4>)
 8013a88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a8e:	401d      	ands	r5, r3
 8013a90:	4b58      	ldr	r3, [pc, #352]	@ (8013bf4 <_strtod_l+0xb04>)
 8013a92:	429d      	cmp	r5, r3
 8013a94:	f040 80b2 	bne.w	8013bfc <_strtod_l+0xb0c>
 8013a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013a9e:	ec4b ab10 	vmov	d0, sl, fp
 8013aa2:	f003 f839 	bl	8016b18 <__ulp>
 8013aa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013aaa:	ec51 0b10 	vmov	r0, r1, d0
 8013aae:	f7ec fdc3 	bl	8000638 <__aeabi_dmul>
 8013ab2:	4652      	mov	r2, sl
 8013ab4:	465b      	mov	r3, fp
 8013ab6:	f7ec fc09 	bl	80002cc <__adddf3>
 8013aba:	460b      	mov	r3, r1
 8013abc:	4949      	ldr	r1, [pc, #292]	@ (8013be4 <_strtod_l+0xaf4>)
 8013abe:	4a4e      	ldr	r2, [pc, #312]	@ (8013bf8 <_strtod_l+0xb08>)
 8013ac0:	4019      	ands	r1, r3
 8013ac2:	4291      	cmp	r1, r2
 8013ac4:	4682      	mov	sl, r0
 8013ac6:	d942      	bls.n	8013b4e <_strtod_l+0xa5e>
 8013ac8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013aca:	4b47      	ldr	r3, [pc, #284]	@ (8013be8 <_strtod_l+0xaf8>)
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d103      	bne.n	8013ad8 <_strtod_l+0x9e8>
 8013ad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	f43f ad2f 	beq.w	8013536 <_strtod_l+0x446>
 8013ad8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013be8 <_strtod_l+0xaf8>
 8013adc:	f04f 3aff 	mov.w	sl, #4294967295
 8013ae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ae2:	9805      	ldr	r0, [sp, #20]
 8013ae4:	f002 fcec 	bl	80164c0 <_Bfree>
 8013ae8:	9805      	ldr	r0, [sp, #20]
 8013aea:	4649      	mov	r1, r9
 8013aec:	f002 fce8 	bl	80164c0 <_Bfree>
 8013af0:	9805      	ldr	r0, [sp, #20]
 8013af2:	4641      	mov	r1, r8
 8013af4:	f002 fce4 	bl	80164c0 <_Bfree>
 8013af8:	9805      	ldr	r0, [sp, #20]
 8013afa:	4621      	mov	r1, r4
 8013afc:	f002 fce0 	bl	80164c0 <_Bfree>
 8013b00:	e619      	b.n	8013736 <_strtod_l+0x646>
 8013b02:	f1ba 0f01 	cmp.w	sl, #1
 8013b06:	d103      	bne.n	8013b10 <_strtod_l+0xa20>
 8013b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f43f ada6 	beq.w	801365c <_strtod_l+0x56c>
 8013b10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013bc0 <_strtod_l+0xad0>
 8013b14:	4f35      	ldr	r7, [pc, #212]	@ (8013bec <_strtod_l+0xafc>)
 8013b16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b1a:	2600      	movs	r6, #0
 8013b1c:	e7b1      	b.n	8013a82 <_strtod_l+0x992>
 8013b1e:	4f34      	ldr	r7, [pc, #208]	@ (8013bf0 <_strtod_l+0xb00>)
 8013b20:	2600      	movs	r6, #0
 8013b22:	e7aa      	b.n	8013a7a <_strtod_l+0x98a>
 8013b24:	4b32      	ldr	r3, [pc, #200]	@ (8013bf0 <_strtod_l+0xb00>)
 8013b26:	4630      	mov	r0, r6
 8013b28:	4639      	mov	r1, r7
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f7ec fd84 	bl	8000638 <__aeabi_dmul>
 8013b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b32:	4606      	mov	r6, r0
 8013b34:	460f      	mov	r7, r1
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d09f      	beq.n	8013a7a <_strtod_l+0x98a>
 8013b3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013b3e:	e7a0      	b.n	8013a82 <_strtod_l+0x992>
 8013b40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013bc8 <_strtod_l+0xad8>
 8013b44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b48:	ec57 6b17 	vmov	r6, r7, d7
 8013b4c:	e799      	b.n	8013a82 <_strtod_l+0x992>
 8013b4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013b52:	9b08      	ldr	r3, [sp, #32]
 8013b54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1c1      	bne.n	8013ae0 <_strtod_l+0x9f0>
 8013b5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013b60:	0d1b      	lsrs	r3, r3, #20
 8013b62:	051b      	lsls	r3, r3, #20
 8013b64:	429d      	cmp	r5, r3
 8013b66:	d1bb      	bne.n	8013ae0 <_strtod_l+0x9f0>
 8013b68:	4630      	mov	r0, r6
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	f7ed f8c4 	bl	8000cf8 <__aeabi_d2lz>
 8013b70:	f7ec fd34 	bl	80005dc <__aeabi_l2d>
 8013b74:	4602      	mov	r2, r0
 8013b76:	460b      	mov	r3, r1
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec fba4 	bl	80002c8 <__aeabi_dsub>
 8013b80:	460b      	mov	r3, r1
 8013b82:	4602      	mov	r2, r0
 8013b84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013b88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b8e:	ea46 060a 	orr.w	r6, r6, sl
 8013b92:	431e      	orrs	r6, r3
 8013b94:	d06f      	beq.n	8013c76 <_strtod_l+0xb86>
 8013b96:	a30e      	add	r3, pc, #56	@ (adr r3, 8013bd0 <_strtod_l+0xae0>)
 8013b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9c:	f7ec ffbe 	bl	8000b1c <__aeabi_dcmplt>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	f47f acd3 	bne.w	801354c <_strtod_l+0x45c>
 8013ba6:	a30c      	add	r3, pc, #48	@ (adr r3, 8013bd8 <_strtod_l+0xae8>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013bb0:	f7ec ffd2 	bl	8000b58 <__aeabi_dcmpgt>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	d093      	beq.n	8013ae0 <_strtod_l+0x9f0>
 8013bb8:	e4c8      	b.n	801354c <_strtod_l+0x45c>
 8013bba:	bf00      	nop
 8013bbc:	f3af 8000 	nop.w
 8013bc0:	00000000 	.word	0x00000000
 8013bc4:	bff00000 	.word	0xbff00000
 8013bc8:	00000000 	.word	0x00000000
 8013bcc:	3ff00000 	.word	0x3ff00000
 8013bd0:	94a03595 	.word	0x94a03595
 8013bd4:	3fdfffff 	.word	0x3fdfffff
 8013bd8:	35afe535 	.word	0x35afe535
 8013bdc:	3fe00000 	.word	0x3fe00000
 8013be0:	000fffff 	.word	0x000fffff
 8013be4:	7ff00000 	.word	0x7ff00000
 8013be8:	7fefffff 	.word	0x7fefffff
 8013bec:	3ff00000 	.word	0x3ff00000
 8013bf0:	3fe00000 	.word	0x3fe00000
 8013bf4:	7fe00000 	.word	0x7fe00000
 8013bf8:	7c9fffff 	.word	0x7c9fffff
 8013bfc:	9b08      	ldr	r3, [sp, #32]
 8013bfe:	b323      	cbz	r3, 8013c4a <_strtod_l+0xb5a>
 8013c00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013c04:	d821      	bhi.n	8013c4a <_strtod_l+0xb5a>
 8013c06:	a328      	add	r3, pc, #160	@ (adr r3, 8013ca8 <_strtod_l+0xbb8>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	4639      	mov	r1, r7
 8013c10:	f7ec ff8e 	bl	8000b30 <__aeabi_dcmple>
 8013c14:	b1a0      	cbz	r0, 8013c40 <_strtod_l+0xb50>
 8013c16:	4639      	mov	r1, r7
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f7ec ffe5 	bl	8000be8 <__aeabi_d2uiz>
 8013c1e:	2801      	cmp	r0, #1
 8013c20:	bf38      	it	cc
 8013c22:	2001      	movcc	r0, #1
 8013c24:	f7ec fc8e 	bl	8000544 <__aeabi_ui2d>
 8013c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c2a:	4606      	mov	r6, r0
 8013c2c:	460f      	mov	r7, r1
 8013c2e:	b9fb      	cbnz	r3, 8013c70 <_strtod_l+0xb80>
 8013c30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c34:	9014      	str	r0, [sp, #80]	@ 0x50
 8013c36:	9315      	str	r3, [sp, #84]	@ 0x54
 8013c38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013c3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013c40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013c46:	1b5b      	subs	r3, r3, r5
 8013c48:	9311      	str	r3, [sp, #68]	@ 0x44
 8013c4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013c4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013c52:	f002 ff61 	bl	8016b18 <__ulp>
 8013c56:	4650      	mov	r0, sl
 8013c58:	ec53 2b10 	vmov	r2, r3, d0
 8013c5c:	4659      	mov	r1, fp
 8013c5e:	f7ec fceb 	bl	8000638 <__aeabi_dmul>
 8013c62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013c66:	f7ec fb31 	bl	80002cc <__adddf3>
 8013c6a:	4682      	mov	sl, r0
 8013c6c:	468b      	mov	fp, r1
 8013c6e:	e770      	b.n	8013b52 <_strtod_l+0xa62>
 8013c70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013c74:	e7e0      	b.n	8013c38 <_strtod_l+0xb48>
 8013c76:	a30e      	add	r3, pc, #56	@ (adr r3, 8013cb0 <_strtod_l+0xbc0>)
 8013c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7c:	f7ec ff4e 	bl	8000b1c <__aeabi_dcmplt>
 8013c80:	e798      	b.n	8013bb4 <_strtod_l+0xac4>
 8013c82:	2300      	movs	r3, #0
 8013c84:	930e      	str	r3, [sp, #56]	@ 0x38
 8013c86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c8a:	6013      	str	r3, [r2, #0]
 8013c8c:	f7ff ba6d 	b.w	801316a <_strtod_l+0x7a>
 8013c90:	2a65      	cmp	r2, #101	@ 0x65
 8013c92:	f43f ab68 	beq.w	8013366 <_strtod_l+0x276>
 8013c96:	2a45      	cmp	r2, #69	@ 0x45
 8013c98:	f43f ab65 	beq.w	8013366 <_strtod_l+0x276>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	f7ff bba0 	b.w	80133e2 <_strtod_l+0x2f2>
 8013ca2:	bf00      	nop
 8013ca4:	f3af 8000 	nop.w
 8013ca8:	ffc00000 	.word	0xffc00000
 8013cac:	41dfffff 	.word	0x41dfffff
 8013cb0:	94a03595 	.word	0x94a03595
 8013cb4:	3fcfffff 	.word	0x3fcfffff

08013cb8 <strtod>:
 8013cb8:	460a      	mov	r2, r1
 8013cba:	4601      	mov	r1, r0
 8013cbc:	4802      	ldr	r0, [pc, #8]	@ (8013cc8 <strtod+0x10>)
 8013cbe:	4b03      	ldr	r3, [pc, #12]	@ (8013ccc <strtod+0x14>)
 8013cc0:	6800      	ldr	r0, [r0, #0]
 8013cc2:	f7ff ba15 	b.w	80130f0 <_strtod_l>
 8013cc6:	bf00      	nop
 8013cc8:	2000018c 	.word	0x2000018c
 8013ccc:	20000020 	.word	0x20000020

08013cd0 <strtof>:
 8013cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd4:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8013d94 <strtof+0xc4>
 8013cd8:	4b29      	ldr	r3, [pc, #164]	@ (8013d80 <strtof+0xb0>)
 8013cda:	460a      	mov	r2, r1
 8013cdc:	ed2d 8b02 	vpush	{d8}
 8013ce0:	4601      	mov	r1, r0
 8013ce2:	f8d8 0000 	ldr.w	r0, [r8]
 8013ce6:	f7ff fa03 	bl	80130f0 <_strtod_l>
 8013cea:	ec55 4b10 	vmov	r4, r5, d0
 8013cee:	4622      	mov	r2, r4
 8013cf0:	462b      	mov	r3, r5
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	4629      	mov	r1, r5
 8013cf6:	f7ec ff39 	bl	8000b6c <__aeabi_dcmpun>
 8013cfa:	b190      	cbz	r0, 8013d22 <strtof+0x52>
 8013cfc:	2d00      	cmp	r5, #0
 8013cfe:	4821      	ldr	r0, [pc, #132]	@ (8013d84 <strtof+0xb4>)
 8013d00:	da09      	bge.n	8013d16 <strtof+0x46>
 8013d02:	f001 f8d5 	bl	8014eb0 <nanf>
 8013d06:	eeb1 8a40 	vneg.f32	s16, s0
 8013d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8013d0e:	ecbd 8b02 	vpop	{d8}
 8013d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d16:	ecbd 8b02 	vpop	{d8}
 8013d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1e:	f001 b8c7 	b.w	8014eb0 <nanf>
 8013d22:	4620      	mov	r0, r4
 8013d24:	4629      	mov	r1, r5
 8013d26:	f7ec ff7f 	bl	8000c28 <__aeabi_d2f>
 8013d2a:	ee08 0a10 	vmov	s16, r0
 8013d2e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8013d88 <strtof+0xb8>
 8013d32:	eeb0 7ac8 	vabs.f32	s14, s16
 8013d36:	eeb4 7a67 	vcmp.f32	s14, s15
 8013d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3e:	dd11      	ble.n	8013d64 <strtof+0x94>
 8013d40:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8013d44:	4b11      	ldr	r3, [pc, #68]	@ (8013d8c <strtof+0xbc>)
 8013d46:	f04f 32ff 	mov.w	r2, #4294967295
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	4639      	mov	r1, r7
 8013d4e:	f7ec ff0d 	bl	8000b6c <__aeabi_dcmpun>
 8013d52:	b980      	cbnz	r0, 8013d76 <strtof+0xa6>
 8013d54:	4b0d      	ldr	r3, [pc, #52]	@ (8013d8c <strtof+0xbc>)
 8013d56:	f04f 32ff 	mov.w	r2, #4294967295
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	4639      	mov	r1, r7
 8013d5e:	f7ec fee7 	bl	8000b30 <__aeabi_dcmple>
 8013d62:	b940      	cbnz	r0, 8013d76 <strtof+0xa6>
 8013d64:	ee18 3a10 	vmov	r3, s16
 8013d68:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013d6c:	d1cd      	bne.n	8013d0a <strtof+0x3a>
 8013d6e:	4b08      	ldr	r3, [pc, #32]	@ (8013d90 <strtof+0xc0>)
 8013d70:	402b      	ands	r3, r5
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d0c9      	beq.n	8013d0a <strtof+0x3a>
 8013d76:	f8d8 3000 	ldr.w	r3, [r8]
 8013d7a:	2222      	movs	r2, #34	@ 0x22
 8013d7c:	601a      	str	r2, [r3, #0]
 8013d7e:	e7c4      	b.n	8013d0a <strtof+0x3a>
 8013d80:	20000020 	.word	0x20000020
 8013d84:	08017baa 	.word	0x08017baa
 8013d88:	7f7fffff 	.word	0x7f7fffff
 8013d8c:	7fefffff 	.word	0x7fefffff
 8013d90:	7ff00000 	.word	0x7ff00000
 8013d94:	2000018c 	.word	0x2000018c

08013d98 <_strtol_l.isra.0>:
 8013d98:	2b24      	cmp	r3, #36	@ 0x24
 8013d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d9e:	4686      	mov	lr, r0
 8013da0:	4690      	mov	r8, r2
 8013da2:	d801      	bhi.n	8013da8 <_strtol_l.isra.0+0x10>
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d106      	bne.n	8013db6 <_strtol_l.isra.0+0x1e>
 8013da8:	f001 f83c 	bl	8014e24 <__errno>
 8013dac:	2316      	movs	r3, #22
 8013dae:	6003      	str	r3, [r0, #0]
 8013db0:	2000      	movs	r0, #0
 8013db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db6:	4834      	ldr	r0, [pc, #208]	@ (8013e88 <_strtol_l.isra.0+0xf0>)
 8013db8:	460d      	mov	r5, r1
 8013dba:	462a      	mov	r2, r5
 8013dbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dc0:	5d06      	ldrb	r6, [r0, r4]
 8013dc2:	f016 0608 	ands.w	r6, r6, #8
 8013dc6:	d1f8      	bne.n	8013dba <_strtol_l.isra.0+0x22>
 8013dc8:	2c2d      	cmp	r4, #45	@ 0x2d
 8013dca:	d110      	bne.n	8013dee <_strtol_l.isra.0+0x56>
 8013dcc:	782c      	ldrb	r4, [r5, #0]
 8013dce:	2601      	movs	r6, #1
 8013dd0:	1c95      	adds	r5, r2, #2
 8013dd2:	f033 0210 	bics.w	r2, r3, #16
 8013dd6:	d115      	bne.n	8013e04 <_strtol_l.isra.0+0x6c>
 8013dd8:	2c30      	cmp	r4, #48	@ 0x30
 8013dda:	d10d      	bne.n	8013df8 <_strtol_l.isra.0+0x60>
 8013ddc:	782a      	ldrb	r2, [r5, #0]
 8013dde:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013de2:	2a58      	cmp	r2, #88	@ 0x58
 8013de4:	d108      	bne.n	8013df8 <_strtol_l.isra.0+0x60>
 8013de6:	786c      	ldrb	r4, [r5, #1]
 8013de8:	3502      	adds	r5, #2
 8013dea:	2310      	movs	r3, #16
 8013dec:	e00a      	b.n	8013e04 <_strtol_l.isra.0+0x6c>
 8013dee:	2c2b      	cmp	r4, #43	@ 0x2b
 8013df0:	bf04      	itt	eq
 8013df2:	782c      	ldrbeq	r4, [r5, #0]
 8013df4:	1c95      	addeq	r5, r2, #2
 8013df6:	e7ec      	b.n	8013dd2 <_strtol_l.isra.0+0x3a>
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d1f6      	bne.n	8013dea <_strtol_l.isra.0+0x52>
 8013dfc:	2c30      	cmp	r4, #48	@ 0x30
 8013dfe:	bf14      	ite	ne
 8013e00:	230a      	movne	r3, #10
 8013e02:	2308      	moveq	r3, #8
 8013e04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013e08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	fbbc f9f3 	udiv	r9, ip, r3
 8013e12:	4610      	mov	r0, r2
 8013e14:	fb03 ca19 	mls	sl, r3, r9, ip
 8013e18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013e1c:	2f09      	cmp	r7, #9
 8013e1e:	d80f      	bhi.n	8013e40 <_strtol_l.isra.0+0xa8>
 8013e20:	463c      	mov	r4, r7
 8013e22:	42a3      	cmp	r3, r4
 8013e24:	dd1b      	ble.n	8013e5e <_strtol_l.isra.0+0xc6>
 8013e26:	1c57      	adds	r7, r2, #1
 8013e28:	d007      	beq.n	8013e3a <_strtol_l.isra.0+0xa2>
 8013e2a:	4581      	cmp	r9, r0
 8013e2c:	d314      	bcc.n	8013e58 <_strtol_l.isra.0+0xc0>
 8013e2e:	d101      	bne.n	8013e34 <_strtol_l.isra.0+0x9c>
 8013e30:	45a2      	cmp	sl, r4
 8013e32:	db11      	blt.n	8013e58 <_strtol_l.isra.0+0xc0>
 8013e34:	fb00 4003 	mla	r0, r0, r3, r4
 8013e38:	2201      	movs	r2, #1
 8013e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e3e:	e7eb      	b.n	8013e18 <_strtol_l.isra.0+0x80>
 8013e40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013e44:	2f19      	cmp	r7, #25
 8013e46:	d801      	bhi.n	8013e4c <_strtol_l.isra.0+0xb4>
 8013e48:	3c37      	subs	r4, #55	@ 0x37
 8013e4a:	e7ea      	b.n	8013e22 <_strtol_l.isra.0+0x8a>
 8013e4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013e50:	2f19      	cmp	r7, #25
 8013e52:	d804      	bhi.n	8013e5e <_strtol_l.isra.0+0xc6>
 8013e54:	3c57      	subs	r4, #87	@ 0x57
 8013e56:	e7e4      	b.n	8013e22 <_strtol_l.isra.0+0x8a>
 8013e58:	f04f 32ff 	mov.w	r2, #4294967295
 8013e5c:	e7ed      	b.n	8013e3a <_strtol_l.isra.0+0xa2>
 8013e5e:	1c53      	adds	r3, r2, #1
 8013e60:	d108      	bne.n	8013e74 <_strtol_l.isra.0+0xdc>
 8013e62:	2322      	movs	r3, #34	@ 0x22
 8013e64:	f8ce 3000 	str.w	r3, [lr]
 8013e68:	4660      	mov	r0, ip
 8013e6a:	f1b8 0f00 	cmp.w	r8, #0
 8013e6e:	d0a0      	beq.n	8013db2 <_strtol_l.isra.0+0x1a>
 8013e70:	1e69      	subs	r1, r5, #1
 8013e72:	e006      	b.n	8013e82 <_strtol_l.isra.0+0xea>
 8013e74:	b106      	cbz	r6, 8013e78 <_strtol_l.isra.0+0xe0>
 8013e76:	4240      	negs	r0, r0
 8013e78:	f1b8 0f00 	cmp.w	r8, #0
 8013e7c:	d099      	beq.n	8013db2 <_strtol_l.isra.0+0x1a>
 8013e7e:	2a00      	cmp	r2, #0
 8013e80:	d1f6      	bne.n	8013e70 <_strtol_l.isra.0+0xd8>
 8013e82:	f8c8 1000 	str.w	r1, [r8]
 8013e86:	e794      	b.n	8013db2 <_strtol_l.isra.0+0x1a>
 8013e88:	08017d41 	.word	0x08017d41

08013e8c <strtol>:
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	460a      	mov	r2, r1
 8013e90:	4601      	mov	r1, r0
 8013e92:	4802      	ldr	r0, [pc, #8]	@ (8013e9c <strtol+0x10>)
 8013e94:	6800      	ldr	r0, [r0, #0]
 8013e96:	f7ff bf7f 	b.w	8013d98 <_strtol_l.isra.0>
 8013e9a:	bf00      	nop
 8013e9c:	2000018c 	.word	0x2000018c

08013ea0 <__cvt>:
 8013ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea4:	ec57 6b10 	vmov	r6, r7, d0
 8013ea8:	2f00      	cmp	r7, #0
 8013eaa:	460c      	mov	r4, r1
 8013eac:	4619      	mov	r1, r3
 8013eae:	463b      	mov	r3, r7
 8013eb0:	bfbb      	ittet	lt
 8013eb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013eb6:	461f      	movlt	r7, r3
 8013eb8:	2300      	movge	r3, #0
 8013eba:	232d      	movlt	r3, #45	@ 0x2d
 8013ebc:	700b      	strb	r3, [r1, #0]
 8013ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013ec0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013ec4:	4691      	mov	r9, r2
 8013ec6:	f023 0820 	bic.w	r8, r3, #32
 8013eca:	bfbc      	itt	lt
 8013ecc:	4632      	movlt	r2, r6
 8013ece:	4616      	movlt	r6, r2
 8013ed0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013ed4:	d005      	beq.n	8013ee2 <__cvt+0x42>
 8013ed6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013eda:	d100      	bne.n	8013ede <__cvt+0x3e>
 8013edc:	3401      	adds	r4, #1
 8013ede:	2102      	movs	r1, #2
 8013ee0:	e000      	b.n	8013ee4 <__cvt+0x44>
 8013ee2:	2103      	movs	r1, #3
 8013ee4:	ab03      	add	r3, sp, #12
 8013ee6:	9301      	str	r3, [sp, #4]
 8013ee8:	ab02      	add	r3, sp, #8
 8013eea:	9300      	str	r3, [sp, #0]
 8013eec:	ec47 6b10 	vmov	d0, r6, r7
 8013ef0:	4653      	mov	r3, sl
 8013ef2:	4622      	mov	r2, r4
 8013ef4:	f001 f888 	bl	8015008 <_dtoa_r>
 8013ef8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013efc:	4605      	mov	r5, r0
 8013efe:	d119      	bne.n	8013f34 <__cvt+0x94>
 8013f00:	f019 0f01 	tst.w	r9, #1
 8013f04:	d00e      	beq.n	8013f24 <__cvt+0x84>
 8013f06:	eb00 0904 	add.w	r9, r0, r4
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	4630      	mov	r0, r6
 8013f10:	4639      	mov	r1, r7
 8013f12:	f7ec fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 8013f16:	b108      	cbz	r0, 8013f1c <__cvt+0x7c>
 8013f18:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f1c:	2230      	movs	r2, #48	@ 0x30
 8013f1e:	9b03      	ldr	r3, [sp, #12]
 8013f20:	454b      	cmp	r3, r9
 8013f22:	d31e      	bcc.n	8013f62 <__cvt+0xc2>
 8013f24:	9b03      	ldr	r3, [sp, #12]
 8013f26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f28:	1b5b      	subs	r3, r3, r5
 8013f2a:	4628      	mov	r0, r5
 8013f2c:	6013      	str	r3, [r2, #0]
 8013f2e:	b004      	add	sp, #16
 8013f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013f38:	eb00 0904 	add.w	r9, r0, r4
 8013f3c:	d1e5      	bne.n	8013f0a <__cvt+0x6a>
 8013f3e:	7803      	ldrb	r3, [r0, #0]
 8013f40:	2b30      	cmp	r3, #48	@ 0x30
 8013f42:	d10a      	bne.n	8013f5a <__cvt+0xba>
 8013f44:	2200      	movs	r2, #0
 8013f46:	2300      	movs	r3, #0
 8013f48:	4630      	mov	r0, r6
 8013f4a:	4639      	mov	r1, r7
 8013f4c:	f7ec fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8013f50:	b918      	cbnz	r0, 8013f5a <__cvt+0xba>
 8013f52:	f1c4 0401 	rsb	r4, r4, #1
 8013f56:	f8ca 4000 	str.w	r4, [sl]
 8013f5a:	f8da 3000 	ldr.w	r3, [sl]
 8013f5e:	4499      	add	r9, r3
 8013f60:	e7d3      	b.n	8013f0a <__cvt+0x6a>
 8013f62:	1c59      	adds	r1, r3, #1
 8013f64:	9103      	str	r1, [sp, #12]
 8013f66:	701a      	strb	r2, [r3, #0]
 8013f68:	e7d9      	b.n	8013f1e <__cvt+0x7e>

08013f6a <__exponent>:
 8013f6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f6c:	2900      	cmp	r1, #0
 8013f6e:	bfba      	itte	lt
 8013f70:	4249      	neglt	r1, r1
 8013f72:	232d      	movlt	r3, #45	@ 0x2d
 8013f74:	232b      	movge	r3, #43	@ 0x2b
 8013f76:	2909      	cmp	r1, #9
 8013f78:	7002      	strb	r2, [r0, #0]
 8013f7a:	7043      	strb	r3, [r0, #1]
 8013f7c:	dd29      	ble.n	8013fd2 <__exponent+0x68>
 8013f7e:	f10d 0307 	add.w	r3, sp, #7
 8013f82:	461d      	mov	r5, r3
 8013f84:	270a      	movs	r7, #10
 8013f86:	461a      	mov	r2, r3
 8013f88:	fbb1 f6f7 	udiv	r6, r1, r7
 8013f8c:	fb07 1416 	mls	r4, r7, r6, r1
 8013f90:	3430      	adds	r4, #48	@ 0x30
 8013f92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013f96:	460c      	mov	r4, r1
 8013f98:	2c63      	cmp	r4, #99	@ 0x63
 8013f9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f9e:	4631      	mov	r1, r6
 8013fa0:	dcf1      	bgt.n	8013f86 <__exponent+0x1c>
 8013fa2:	3130      	adds	r1, #48	@ 0x30
 8013fa4:	1e94      	subs	r4, r2, #2
 8013fa6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013faa:	1c41      	adds	r1, r0, #1
 8013fac:	4623      	mov	r3, r4
 8013fae:	42ab      	cmp	r3, r5
 8013fb0:	d30a      	bcc.n	8013fc8 <__exponent+0x5e>
 8013fb2:	f10d 0309 	add.w	r3, sp, #9
 8013fb6:	1a9b      	subs	r3, r3, r2
 8013fb8:	42ac      	cmp	r4, r5
 8013fba:	bf88      	it	hi
 8013fbc:	2300      	movhi	r3, #0
 8013fbe:	3302      	adds	r3, #2
 8013fc0:	4403      	add	r3, r0
 8013fc2:	1a18      	subs	r0, r3, r0
 8013fc4:	b003      	add	sp, #12
 8013fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013fcc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013fd0:	e7ed      	b.n	8013fae <__exponent+0x44>
 8013fd2:	2330      	movs	r3, #48	@ 0x30
 8013fd4:	3130      	adds	r1, #48	@ 0x30
 8013fd6:	7083      	strb	r3, [r0, #2]
 8013fd8:	70c1      	strb	r1, [r0, #3]
 8013fda:	1d03      	adds	r3, r0, #4
 8013fdc:	e7f1      	b.n	8013fc2 <__exponent+0x58>
	...

08013fe0 <_printf_float>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	b08d      	sub	sp, #52	@ 0x34
 8013fe6:	460c      	mov	r4, r1
 8013fe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013fec:	4616      	mov	r6, r2
 8013fee:	461f      	mov	r7, r3
 8013ff0:	4605      	mov	r5, r0
 8013ff2:	f000 fe6f 	bl	8014cd4 <_localeconv_r>
 8013ff6:	6803      	ldr	r3, [r0, #0]
 8013ff8:	9304      	str	r3, [sp, #16]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7ec f958 	bl	80002b0 <strlen>
 8014000:	2300      	movs	r3, #0
 8014002:	930a      	str	r3, [sp, #40]	@ 0x28
 8014004:	f8d8 3000 	ldr.w	r3, [r8]
 8014008:	9005      	str	r0, [sp, #20]
 801400a:	3307      	adds	r3, #7
 801400c:	f023 0307 	bic.w	r3, r3, #7
 8014010:	f103 0208 	add.w	r2, r3, #8
 8014014:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014018:	f8d4 b000 	ldr.w	fp, [r4]
 801401c:	f8c8 2000 	str.w	r2, [r8]
 8014020:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014024:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014028:	9307      	str	r3, [sp, #28]
 801402a:	f8cd 8018 	str.w	r8, [sp, #24]
 801402e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014036:	4b9c      	ldr	r3, [pc, #624]	@ (80142a8 <_printf_float+0x2c8>)
 8014038:	f04f 32ff 	mov.w	r2, #4294967295
 801403c:	f7ec fd96 	bl	8000b6c <__aeabi_dcmpun>
 8014040:	bb70      	cbnz	r0, 80140a0 <_printf_float+0xc0>
 8014042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014046:	4b98      	ldr	r3, [pc, #608]	@ (80142a8 <_printf_float+0x2c8>)
 8014048:	f04f 32ff 	mov.w	r2, #4294967295
 801404c:	f7ec fd70 	bl	8000b30 <__aeabi_dcmple>
 8014050:	bb30      	cbnz	r0, 80140a0 <_printf_float+0xc0>
 8014052:	2200      	movs	r2, #0
 8014054:	2300      	movs	r3, #0
 8014056:	4640      	mov	r0, r8
 8014058:	4649      	mov	r1, r9
 801405a:	f7ec fd5f 	bl	8000b1c <__aeabi_dcmplt>
 801405e:	b110      	cbz	r0, 8014066 <_printf_float+0x86>
 8014060:	232d      	movs	r3, #45	@ 0x2d
 8014062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014066:	4a91      	ldr	r2, [pc, #580]	@ (80142ac <_printf_float+0x2cc>)
 8014068:	4b91      	ldr	r3, [pc, #580]	@ (80142b0 <_printf_float+0x2d0>)
 801406a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801406e:	bf8c      	ite	hi
 8014070:	4690      	movhi	r8, r2
 8014072:	4698      	movls	r8, r3
 8014074:	2303      	movs	r3, #3
 8014076:	6123      	str	r3, [r4, #16]
 8014078:	f02b 0304 	bic.w	r3, fp, #4
 801407c:	6023      	str	r3, [r4, #0]
 801407e:	f04f 0900 	mov.w	r9, #0
 8014082:	9700      	str	r7, [sp, #0]
 8014084:	4633      	mov	r3, r6
 8014086:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014088:	4621      	mov	r1, r4
 801408a:	4628      	mov	r0, r5
 801408c:	f000 f9d2 	bl	8014434 <_printf_common>
 8014090:	3001      	adds	r0, #1
 8014092:	f040 808d 	bne.w	80141b0 <_printf_float+0x1d0>
 8014096:	f04f 30ff 	mov.w	r0, #4294967295
 801409a:	b00d      	add	sp, #52	@ 0x34
 801409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a0:	4642      	mov	r2, r8
 80140a2:	464b      	mov	r3, r9
 80140a4:	4640      	mov	r0, r8
 80140a6:	4649      	mov	r1, r9
 80140a8:	f7ec fd60 	bl	8000b6c <__aeabi_dcmpun>
 80140ac:	b140      	cbz	r0, 80140c0 <_printf_float+0xe0>
 80140ae:	464b      	mov	r3, r9
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	bfbc      	itt	lt
 80140b4:	232d      	movlt	r3, #45	@ 0x2d
 80140b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80140ba:	4a7e      	ldr	r2, [pc, #504]	@ (80142b4 <_printf_float+0x2d4>)
 80140bc:	4b7e      	ldr	r3, [pc, #504]	@ (80142b8 <_printf_float+0x2d8>)
 80140be:	e7d4      	b.n	801406a <_printf_float+0x8a>
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80140c6:	9206      	str	r2, [sp, #24]
 80140c8:	1c5a      	adds	r2, r3, #1
 80140ca:	d13b      	bne.n	8014144 <_printf_float+0x164>
 80140cc:	2306      	movs	r3, #6
 80140ce:	6063      	str	r3, [r4, #4]
 80140d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80140d4:	2300      	movs	r3, #0
 80140d6:	6022      	str	r2, [r4, #0]
 80140d8:	9303      	str	r3, [sp, #12]
 80140da:	ab0a      	add	r3, sp, #40	@ 0x28
 80140dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80140e0:	ab09      	add	r3, sp, #36	@ 0x24
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	6861      	ldr	r1, [r4, #4]
 80140e6:	ec49 8b10 	vmov	d0, r8, r9
 80140ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80140ee:	4628      	mov	r0, r5
 80140f0:	f7ff fed6 	bl	8013ea0 <__cvt>
 80140f4:	9b06      	ldr	r3, [sp, #24]
 80140f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80140f8:	2b47      	cmp	r3, #71	@ 0x47
 80140fa:	4680      	mov	r8, r0
 80140fc:	d129      	bne.n	8014152 <_printf_float+0x172>
 80140fe:	1cc8      	adds	r0, r1, #3
 8014100:	db02      	blt.n	8014108 <_printf_float+0x128>
 8014102:	6863      	ldr	r3, [r4, #4]
 8014104:	4299      	cmp	r1, r3
 8014106:	dd41      	ble.n	801418c <_printf_float+0x1ac>
 8014108:	f1aa 0a02 	sub.w	sl, sl, #2
 801410c:	fa5f fa8a 	uxtb.w	sl, sl
 8014110:	3901      	subs	r1, #1
 8014112:	4652      	mov	r2, sl
 8014114:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014118:	9109      	str	r1, [sp, #36]	@ 0x24
 801411a:	f7ff ff26 	bl	8013f6a <__exponent>
 801411e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014120:	1813      	adds	r3, r2, r0
 8014122:	2a01      	cmp	r2, #1
 8014124:	4681      	mov	r9, r0
 8014126:	6123      	str	r3, [r4, #16]
 8014128:	dc02      	bgt.n	8014130 <_printf_float+0x150>
 801412a:	6822      	ldr	r2, [r4, #0]
 801412c:	07d2      	lsls	r2, r2, #31
 801412e:	d501      	bpl.n	8014134 <_printf_float+0x154>
 8014130:	3301      	adds	r3, #1
 8014132:	6123      	str	r3, [r4, #16]
 8014134:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014138:	2b00      	cmp	r3, #0
 801413a:	d0a2      	beq.n	8014082 <_printf_float+0xa2>
 801413c:	232d      	movs	r3, #45	@ 0x2d
 801413e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014142:	e79e      	b.n	8014082 <_printf_float+0xa2>
 8014144:	9a06      	ldr	r2, [sp, #24]
 8014146:	2a47      	cmp	r2, #71	@ 0x47
 8014148:	d1c2      	bne.n	80140d0 <_printf_float+0xf0>
 801414a:	2b00      	cmp	r3, #0
 801414c:	d1c0      	bne.n	80140d0 <_printf_float+0xf0>
 801414e:	2301      	movs	r3, #1
 8014150:	e7bd      	b.n	80140ce <_printf_float+0xee>
 8014152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014156:	d9db      	bls.n	8014110 <_printf_float+0x130>
 8014158:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801415c:	d118      	bne.n	8014190 <_printf_float+0x1b0>
 801415e:	2900      	cmp	r1, #0
 8014160:	6863      	ldr	r3, [r4, #4]
 8014162:	dd0b      	ble.n	801417c <_printf_float+0x19c>
 8014164:	6121      	str	r1, [r4, #16]
 8014166:	b913      	cbnz	r3, 801416e <_printf_float+0x18e>
 8014168:	6822      	ldr	r2, [r4, #0]
 801416a:	07d0      	lsls	r0, r2, #31
 801416c:	d502      	bpl.n	8014174 <_printf_float+0x194>
 801416e:	3301      	adds	r3, #1
 8014170:	440b      	add	r3, r1
 8014172:	6123      	str	r3, [r4, #16]
 8014174:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014176:	f04f 0900 	mov.w	r9, #0
 801417a:	e7db      	b.n	8014134 <_printf_float+0x154>
 801417c:	b913      	cbnz	r3, 8014184 <_printf_float+0x1a4>
 801417e:	6822      	ldr	r2, [r4, #0]
 8014180:	07d2      	lsls	r2, r2, #31
 8014182:	d501      	bpl.n	8014188 <_printf_float+0x1a8>
 8014184:	3302      	adds	r3, #2
 8014186:	e7f4      	b.n	8014172 <_printf_float+0x192>
 8014188:	2301      	movs	r3, #1
 801418a:	e7f2      	b.n	8014172 <_printf_float+0x192>
 801418c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014192:	4299      	cmp	r1, r3
 8014194:	db05      	blt.n	80141a2 <_printf_float+0x1c2>
 8014196:	6823      	ldr	r3, [r4, #0]
 8014198:	6121      	str	r1, [r4, #16]
 801419a:	07d8      	lsls	r0, r3, #31
 801419c:	d5ea      	bpl.n	8014174 <_printf_float+0x194>
 801419e:	1c4b      	adds	r3, r1, #1
 80141a0:	e7e7      	b.n	8014172 <_printf_float+0x192>
 80141a2:	2900      	cmp	r1, #0
 80141a4:	bfd4      	ite	le
 80141a6:	f1c1 0202 	rsble	r2, r1, #2
 80141aa:	2201      	movgt	r2, #1
 80141ac:	4413      	add	r3, r2
 80141ae:	e7e0      	b.n	8014172 <_printf_float+0x192>
 80141b0:	6823      	ldr	r3, [r4, #0]
 80141b2:	055a      	lsls	r2, r3, #21
 80141b4:	d407      	bmi.n	80141c6 <_printf_float+0x1e6>
 80141b6:	6923      	ldr	r3, [r4, #16]
 80141b8:	4642      	mov	r2, r8
 80141ba:	4631      	mov	r1, r6
 80141bc:	4628      	mov	r0, r5
 80141be:	47b8      	blx	r7
 80141c0:	3001      	adds	r0, #1
 80141c2:	d12b      	bne.n	801421c <_printf_float+0x23c>
 80141c4:	e767      	b.n	8014096 <_printf_float+0xb6>
 80141c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80141ca:	f240 80dd 	bls.w	8014388 <_printf_float+0x3a8>
 80141ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80141d2:	2200      	movs	r2, #0
 80141d4:	2300      	movs	r3, #0
 80141d6:	f7ec fc97 	bl	8000b08 <__aeabi_dcmpeq>
 80141da:	2800      	cmp	r0, #0
 80141dc:	d033      	beq.n	8014246 <_printf_float+0x266>
 80141de:	4a37      	ldr	r2, [pc, #220]	@ (80142bc <_printf_float+0x2dc>)
 80141e0:	2301      	movs	r3, #1
 80141e2:	4631      	mov	r1, r6
 80141e4:	4628      	mov	r0, r5
 80141e6:	47b8      	blx	r7
 80141e8:	3001      	adds	r0, #1
 80141ea:	f43f af54 	beq.w	8014096 <_printf_float+0xb6>
 80141ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80141f2:	4543      	cmp	r3, r8
 80141f4:	db02      	blt.n	80141fc <_printf_float+0x21c>
 80141f6:	6823      	ldr	r3, [r4, #0]
 80141f8:	07d8      	lsls	r0, r3, #31
 80141fa:	d50f      	bpl.n	801421c <_printf_float+0x23c>
 80141fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014200:	4631      	mov	r1, r6
 8014202:	4628      	mov	r0, r5
 8014204:	47b8      	blx	r7
 8014206:	3001      	adds	r0, #1
 8014208:	f43f af45 	beq.w	8014096 <_printf_float+0xb6>
 801420c:	f04f 0900 	mov.w	r9, #0
 8014210:	f108 38ff 	add.w	r8, r8, #4294967295
 8014214:	f104 0a1a 	add.w	sl, r4, #26
 8014218:	45c8      	cmp	r8, r9
 801421a:	dc09      	bgt.n	8014230 <_printf_float+0x250>
 801421c:	6823      	ldr	r3, [r4, #0]
 801421e:	079b      	lsls	r3, r3, #30
 8014220:	f100 8103 	bmi.w	801442a <_printf_float+0x44a>
 8014224:	68e0      	ldr	r0, [r4, #12]
 8014226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014228:	4298      	cmp	r0, r3
 801422a:	bfb8      	it	lt
 801422c:	4618      	movlt	r0, r3
 801422e:	e734      	b.n	801409a <_printf_float+0xba>
 8014230:	2301      	movs	r3, #1
 8014232:	4652      	mov	r2, sl
 8014234:	4631      	mov	r1, r6
 8014236:	4628      	mov	r0, r5
 8014238:	47b8      	blx	r7
 801423a:	3001      	adds	r0, #1
 801423c:	f43f af2b 	beq.w	8014096 <_printf_float+0xb6>
 8014240:	f109 0901 	add.w	r9, r9, #1
 8014244:	e7e8      	b.n	8014218 <_printf_float+0x238>
 8014246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014248:	2b00      	cmp	r3, #0
 801424a:	dc39      	bgt.n	80142c0 <_printf_float+0x2e0>
 801424c:	4a1b      	ldr	r2, [pc, #108]	@ (80142bc <_printf_float+0x2dc>)
 801424e:	2301      	movs	r3, #1
 8014250:	4631      	mov	r1, r6
 8014252:	4628      	mov	r0, r5
 8014254:	47b8      	blx	r7
 8014256:	3001      	adds	r0, #1
 8014258:	f43f af1d 	beq.w	8014096 <_printf_float+0xb6>
 801425c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014260:	ea59 0303 	orrs.w	r3, r9, r3
 8014264:	d102      	bne.n	801426c <_printf_float+0x28c>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	07d9      	lsls	r1, r3, #31
 801426a:	d5d7      	bpl.n	801421c <_printf_float+0x23c>
 801426c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014270:	4631      	mov	r1, r6
 8014272:	4628      	mov	r0, r5
 8014274:	47b8      	blx	r7
 8014276:	3001      	adds	r0, #1
 8014278:	f43f af0d 	beq.w	8014096 <_printf_float+0xb6>
 801427c:	f04f 0a00 	mov.w	sl, #0
 8014280:	f104 0b1a 	add.w	fp, r4, #26
 8014284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014286:	425b      	negs	r3, r3
 8014288:	4553      	cmp	r3, sl
 801428a:	dc01      	bgt.n	8014290 <_printf_float+0x2b0>
 801428c:	464b      	mov	r3, r9
 801428e:	e793      	b.n	80141b8 <_printf_float+0x1d8>
 8014290:	2301      	movs	r3, #1
 8014292:	465a      	mov	r2, fp
 8014294:	4631      	mov	r1, r6
 8014296:	4628      	mov	r0, r5
 8014298:	47b8      	blx	r7
 801429a:	3001      	adds	r0, #1
 801429c:	f43f aefb 	beq.w	8014096 <_printf_float+0xb6>
 80142a0:	f10a 0a01 	add.w	sl, sl, #1
 80142a4:	e7ee      	b.n	8014284 <_printf_float+0x2a4>
 80142a6:	bf00      	nop
 80142a8:	7fefffff 	.word	0x7fefffff
 80142ac:	08017ac6 	.word	0x08017ac6
 80142b0:	08017ac2 	.word	0x08017ac2
 80142b4:	08017ace 	.word	0x08017ace
 80142b8:	08017aca 	.word	0x08017aca
 80142bc:	08017ad2 	.word	0x08017ad2
 80142c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80142c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80142c6:	4553      	cmp	r3, sl
 80142c8:	bfa8      	it	ge
 80142ca:	4653      	movge	r3, sl
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	4699      	mov	r9, r3
 80142d0:	dc36      	bgt.n	8014340 <_printf_float+0x360>
 80142d2:	f04f 0b00 	mov.w	fp, #0
 80142d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142da:	f104 021a 	add.w	r2, r4, #26
 80142de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80142e0:	9306      	str	r3, [sp, #24]
 80142e2:	eba3 0309 	sub.w	r3, r3, r9
 80142e6:	455b      	cmp	r3, fp
 80142e8:	dc31      	bgt.n	801434e <_printf_float+0x36e>
 80142ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142ec:	459a      	cmp	sl, r3
 80142ee:	dc3a      	bgt.n	8014366 <_printf_float+0x386>
 80142f0:	6823      	ldr	r3, [r4, #0]
 80142f2:	07da      	lsls	r2, r3, #31
 80142f4:	d437      	bmi.n	8014366 <_printf_float+0x386>
 80142f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142f8:	ebaa 0903 	sub.w	r9, sl, r3
 80142fc:	9b06      	ldr	r3, [sp, #24]
 80142fe:	ebaa 0303 	sub.w	r3, sl, r3
 8014302:	4599      	cmp	r9, r3
 8014304:	bfa8      	it	ge
 8014306:	4699      	movge	r9, r3
 8014308:	f1b9 0f00 	cmp.w	r9, #0
 801430c:	dc33      	bgt.n	8014376 <_printf_float+0x396>
 801430e:	f04f 0800 	mov.w	r8, #0
 8014312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014316:	f104 0b1a 	add.w	fp, r4, #26
 801431a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801431c:	ebaa 0303 	sub.w	r3, sl, r3
 8014320:	eba3 0309 	sub.w	r3, r3, r9
 8014324:	4543      	cmp	r3, r8
 8014326:	f77f af79 	ble.w	801421c <_printf_float+0x23c>
 801432a:	2301      	movs	r3, #1
 801432c:	465a      	mov	r2, fp
 801432e:	4631      	mov	r1, r6
 8014330:	4628      	mov	r0, r5
 8014332:	47b8      	blx	r7
 8014334:	3001      	adds	r0, #1
 8014336:	f43f aeae 	beq.w	8014096 <_printf_float+0xb6>
 801433a:	f108 0801 	add.w	r8, r8, #1
 801433e:	e7ec      	b.n	801431a <_printf_float+0x33a>
 8014340:	4642      	mov	r2, r8
 8014342:	4631      	mov	r1, r6
 8014344:	4628      	mov	r0, r5
 8014346:	47b8      	blx	r7
 8014348:	3001      	adds	r0, #1
 801434a:	d1c2      	bne.n	80142d2 <_printf_float+0x2f2>
 801434c:	e6a3      	b.n	8014096 <_printf_float+0xb6>
 801434e:	2301      	movs	r3, #1
 8014350:	4631      	mov	r1, r6
 8014352:	4628      	mov	r0, r5
 8014354:	9206      	str	r2, [sp, #24]
 8014356:	47b8      	blx	r7
 8014358:	3001      	adds	r0, #1
 801435a:	f43f ae9c 	beq.w	8014096 <_printf_float+0xb6>
 801435e:	9a06      	ldr	r2, [sp, #24]
 8014360:	f10b 0b01 	add.w	fp, fp, #1
 8014364:	e7bb      	b.n	80142de <_printf_float+0x2fe>
 8014366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801436a:	4631      	mov	r1, r6
 801436c:	4628      	mov	r0, r5
 801436e:	47b8      	blx	r7
 8014370:	3001      	adds	r0, #1
 8014372:	d1c0      	bne.n	80142f6 <_printf_float+0x316>
 8014374:	e68f      	b.n	8014096 <_printf_float+0xb6>
 8014376:	9a06      	ldr	r2, [sp, #24]
 8014378:	464b      	mov	r3, r9
 801437a:	4442      	add	r2, r8
 801437c:	4631      	mov	r1, r6
 801437e:	4628      	mov	r0, r5
 8014380:	47b8      	blx	r7
 8014382:	3001      	adds	r0, #1
 8014384:	d1c3      	bne.n	801430e <_printf_float+0x32e>
 8014386:	e686      	b.n	8014096 <_printf_float+0xb6>
 8014388:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801438c:	f1ba 0f01 	cmp.w	sl, #1
 8014390:	dc01      	bgt.n	8014396 <_printf_float+0x3b6>
 8014392:	07db      	lsls	r3, r3, #31
 8014394:	d536      	bpl.n	8014404 <_printf_float+0x424>
 8014396:	2301      	movs	r3, #1
 8014398:	4642      	mov	r2, r8
 801439a:	4631      	mov	r1, r6
 801439c:	4628      	mov	r0, r5
 801439e:	47b8      	blx	r7
 80143a0:	3001      	adds	r0, #1
 80143a2:	f43f ae78 	beq.w	8014096 <_printf_float+0xb6>
 80143a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143aa:	4631      	mov	r1, r6
 80143ac:	4628      	mov	r0, r5
 80143ae:	47b8      	blx	r7
 80143b0:	3001      	adds	r0, #1
 80143b2:	f43f ae70 	beq.w	8014096 <_printf_float+0xb6>
 80143b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80143ba:	2200      	movs	r2, #0
 80143bc:	2300      	movs	r3, #0
 80143be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143c2:	f7ec fba1 	bl	8000b08 <__aeabi_dcmpeq>
 80143c6:	b9c0      	cbnz	r0, 80143fa <_printf_float+0x41a>
 80143c8:	4653      	mov	r3, sl
 80143ca:	f108 0201 	add.w	r2, r8, #1
 80143ce:	4631      	mov	r1, r6
 80143d0:	4628      	mov	r0, r5
 80143d2:	47b8      	blx	r7
 80143d4:	3001      	adds	r0, #1
 80143d6:	d10c      	bne.n	80143f2 <_printf_float+0x412>
 80143d8:	e65d      	b.n	8014096 <_printf_float+0xb6>
 80143da:	2301      	movs	r3, #1
 80143dc:	465a      	mov	r2, fp
 80143de:	4631      	mov	r1, r6
 80143e0:	4628      	mov	r0, r5
 80143e2:	47b8      	blx	r7
 80143e4:	3001      	adds	r0, #1
 80143e6:	f43f ae56 	beq.w	8014096 <_printf_float+0xb6>
 80143ea:	f108 0801 	add.w	r8, r8, #1
 80143ee:	45d0      	cmp	r8, sl
 80143f0:	dbf3      	blt.n	80143da <_printf_float+0x3fa>
 80143f2:	464b      	mov	r3, r9
 80143f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80143f8:	e6df      	b.n	80141ba <_printf_float+0x1da>
 80143fa:	f04f 0800 	mov.w	r8, #0
 80143fe:	f104 0b1a 	add.w	fp, r4, #26
 8014402:	e7f4      	b.n	80143ee <_printf_float+0x40e>
 8014404:	2301      	movs	r3, #1
 8014406:	4642      	mov	r2, r8
 8014408:	e7e1      	b.n	80143ce <_printf_float+0x3ee>
 801440a:	2301      	movs	r3, #1
 801440c:	464a      	mov	r2, r9
 801440e:	4631      	mov	r1, r6
 8014410:	4628      	mov	r0, r5
 8014412:	47b8      	blx	r7
 8014414:	3001      	adds	r0, #1
 8014416:	f43f ae3e 	beq.w	8014096 <_printf_float+0xb6>
 801441a:	f108 0801 	add.w	r8, r8, #1
 801441e:	68e3      	ldr	r3, [r4, #12]
 8014420:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014422:	1a5b      	subs	r3, r3, r1
 8014424:	4543      	cmp	r3, r8
 8014426:	dcf0      	bgt.n	801440a <_printf_float+0x42a>
 8014428:	e6fc      	b.n	8014224 <_printf_float+0x244>
 801442a:	f04f 0800 	mov.w	r8, #0
 801442e:	f104 0919 	add.w	r9, r4, #25
 8014432:	e7f4      	b.n	801441e <_printf_float+0x43e>

08014434 <_printf_common>:
 8014434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014438:	4616      	mov	r6, r2
 801443a:	4698      	mov	r8, r3
 801443c:	688a      	ldr	r2, [r1, #8]
 801443e:	690b      	ldr	r3, [r1, #16]
 8014440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014444:	4293      	cmp	r3, r2
 8014446:	bfb8      	it	lt
 8014448:	4613      	movlt	r3, r2
 801444a:	6033      	str	r3, [r6, #0]
 801444c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014450:	4607      	mov	r7, r0
 8014452:	460c      	mov	r4, r1
 8014454:	b10a      	cbz	r2, 801445a <_printf_common+0x26>
 8014456:	3301      	adds	r3, #1
 8014458:	6033      	str	r3, [r6, #0]
 801445a:	6823      	ldr	r3, [r4, #0]
 801445c:	0699      	lsls	r1, r3, #26
 801445e:	bf42      	ittt	mi
 8014460:	6833      	ldrmi	r3, [r6, #0]
 8014462:	3302      	addmi	r3, #2
 8014464:	6033      	strmi	r3, [r6, #0]
 8014466:	6825      	ldr	r5, [r4, #0]
 8014468:	f015 0506 	ands.w	r5, r5, #6
 801446c:	d106      	bne.n	801447c <_printf_common+0x48>
 801446e:	f104 0a19 	add.w	sl, r4, #25
 8014472:	68e3      	ldr	r3, [r4, #12]
 8014474:	6832      	ldr	r2, [r6, #0]
 8014476:	1a9b      	subs	r3, r3, r2
 8014478:	42ab      	cmp	r3, r5
 801447a:	dc26      	bgt.n	80144ca <_printf_common+0x96>
 801447c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014480:	6822      	ldr	r2, [r4, #0]
 8014482:	3b00      	subs	r3, #0
 8014484:	bf18      	it	ne
 8014486:	2301      	movne	r3, #1
 8014488:	0692      	lsls	r2, r2, #26
 801448a:	d42b      	bmi.n	80144e4 <_printf_common+0xb0>
 801448c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014490:	4641      	mov	r1, r8
 8014492:	4638      	mov	r0, r7
 8014494:	47c8      	blx	r9
 8014496:	3001      	adds	r0, #1
 8014498:	d01e      	beq.n	80144d8 <_printf_common+0xa4>
 801449a:	6823      	ldr	r3, [r4, #0]
 801449c:	6922      	ldr	r2, [r4, #16]
 801449e:	f003 0306 	and.w	r3, r3, #6
 80144a2:	2b04      	cmp	r3, #4
 80144a4:	bf02      	ittt	eq
 80144a6:	68e5      	ldreq	r5, [r4, #12]
 80144a8:	6833      	ldreq	r3, [r6, #0]
 80144aa:	1aed      	subeq	r5, r5, r3
 80144ac:	68a3      	ldr	r3, [r4, #8]
 80144ae:	bf0c      	ite	eq
 80144b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144b4:	2500      	movne	r5, #0
 80144b6:	4293      	cmp	r3, r2
 80144b8:	bfc4      	itt	gt
 80144ba:	1a9b      	subgt	r3, r3, r2
 80144bc:	18ed      	addgt	r5, r5, r3
 80144be:	2600      	movs	r6, #0
 80144c0:	341a      	adds	r4, #26
 80144c2:	42b5      	cmp	r5, r6
 80144c4:	d11a      	bne.n	80144fc <_printf_common+0xc8>
 80144c6:	2000      	movs	r0, #0
 80144c8:	e008      	b.n	80144dc <_printf_common+0xa8>
 80144ca:	2301      	movs	r3, #1
 80144cc:	4652      	mov	r2, sl
 80144ce:	4641      	mov	r1, r8
 80144d0:	4638      	mov	r0, r7
 80144d2:	47c8      	blx	r9
 80144d4:	3001      	adds	r0, #1
 80144d6:	d103      	bne.n	80144e0 <_printf_common+0xac>
 80144d8:	f04f 30ff 	mov.w	r0, #4294967295
 80144dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144e0:	3501      	adds	r5, #1
 80144e2:	e7c6      	b.n	8014472 <_printf_common+0x3e>
 80144e4:	18e1      	adds	r1, r4, r3
 80144e6:	1c5a      	adds	r2, r3, #1
 80144e8:	2030      	movs	r0, #48	@ 0x30
 80144ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80144ee:	4422      	add	r2, r4
 80144f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80144f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80144f8:	3302      	adds	r3, #2
 80144fa:	e7c7      	b.n	801448c <_printf_common+0x58>
 80144fc:	2301      	movs	r3, #1
 80144fe:	4622      	mov	r2, r4
 8014500:	4641      	mov	r1, r8
 8014502:	4638      	mov	r0, r7
 8014504:	47c8      	blx	r9
 8014506:	3001      	adds	r0, #1
 8014508:	d0e6      	beq.n	80144d8 <_printf_common+0xa4>
 801450a:	3601      	adds	r6, #1
 801450c:	e7d9      	b.n	80144c2 <_printf_common+0x8e>
	...

08014510 <_printf_i>:
 8014510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014514:	7e0f      	ldrb	r7, [r1, #24]
 8014516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014518:	2f78      	cmp	r7, #120	@ 0x78
 801451a:	4691      	mov	r9, r2
 801451c:	4680      	mov	r8, r0
 801451e:	460c      	mov	r4, r1
 8014520:	469a      	mov	sl, r3
 8014522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014526:	d807      	bhi.n	8014538 <_printf_i+0x28>
 8014528:	2f62      	cmp	r7, #98	@ 0x62
 801452a:	d80a      	bhi.n	8014542 <_printf_i+0x32>
 801452c:	2f00      	cmp	r7, #0
 801452e:	f000 80d1 	beq.w	80146d4 <_printf_i+0x1c4>
 8014532:	2f58      	cmp	r7, #88	@ 0x58
 8014534:	f000 80b8 	beq.w	80146a8 <_printf_i+0x198>
 8014538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801453c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014540:	e03a      	b.n	80145b8 <_printf_i+0xa8>
 8014542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014546:	2b15      	cmp	r3, #21
 8014548:	d8f6      	bhi.n	8014538 <_printf_i+0x28>
 801454a:	a101      	add	r1, pc, #4	@ (adr r1, 8014550 <_printf_i+0x40>)
 801454c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014550:	080145a9 	.word	0x080145a9
 8014554:	080145bd 	.word	0x080145bd
 8014558:	08014539 	.word	0x08014539
 801455c:	08014539 	.word	0x08014539
 8014560:	08014539 	.word	0x08014539
 8014564:	08014539 	.word	0x08014539
 8014568:	080145bd 	.word	0x080145bd
 801456c:	08014539 	.word	0x08014539
 8014570:	08014539 	.word	0x08014539
 8014574:	08014539 	.word	0x08014539
 8014578:	08014539 	.word	0x08014539
 801457c:	080146bb 	.word	0x080146bb
 8014580:	080145e7 	.word	0x080145e7
 8014584:	08014675 	.word	0x08014675
 8014588:	08014539 	.word	0x08014539
 801458c:	08014539 	.word	0x08014539
 8014590:	080146dd 	.word	0x080146dd
 8014594:	08014539 	.word	0x08014539
 8014598:	080145e7 	.word	0x080145e7
 801459c:	08014539 	.word	0x08014539
 80145a0:	08014539 	.word	0x08014539
 80145a4:	0801467d 	.word	0x0801467d
 80145a8:	6833      	ldr	r3, [r6, #0]
 80145aa:	1d1a      	adds	r2, r3, #4
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	6032      	str	r2, [r6, #0]
 80145b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80145b8:	2301      	movs	r3, #1
 80145ba:	e09c      	b.n	80146f6 <_printf_i+0x1e6>
 80145bc:	6833      	ldr	r3, [r6, #0]
 80145be:	6820      	ldr	r0, [r4, #0]
 80145c0:	1d19      	adds	r1, r3, #4
 80145c2:	6031      	str	r1, [r6, #0]
 80145c4:	0606      	lsls	r6, r0, #24
 80145c6:	d501      	bpl.n	80145cc <_printf_i+0xbc>
 80145c8:	681d      	ldr	r5, [r3, #0]
 80145ca:	e003      	b.n	80145d4 <_printf_i+0xc4>
 80145cc:	0645      	lsls	r5, r0, #25
 80145ce:	d5fb      	bpl.n	80145c8 <_printf_i+0xb8>
 80145d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80145d4:	2d00      	cmp	r5, #0
 80145d6:	da03      	bge.n	80145e0 <_printf_i+0xd0>
 80145d8:	232d      	movs	r3, #45	@ 0x2d
 80145da:	426d      	negs	r5, r5
 80145dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80145e0:	4858      	ldr	r0, [pc, #352]	@ (8014744 <_printf_i+0x234>)
 80145e2:	230a      	movs	r3, #10
 80145e4:	e011      	b.n	801460a <_printf_i+0xfa>
 80145e6:	6821      	ldr	r1, [r4, #0]
 80145e8:	6833      	ldr	r3, [r6, #0]
 80145ea:	0608      	lsls	r0, r1, #24
 80145ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80145f0:	d402      	bmi.n	80145f8 <_printf_i+0xe8>
 80145f2:	0649      	lsls	r1, r1, #25
 80145f4:	bf48      	it	mi
 80145f6:	b2ad      	uxthmi	r5, r5
 80145f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80145fa:	4852      	ldr	r0, [pc, #328]	@ (8014744 <_printf_i+0x234>)
 80145fc:	6033      	str	r3, [r6, #0]
 80145fe:	bf14      	ite	ne
 8014600:	230a      	movne	r3, #10
 8014602:	2308      	moveq	r3, #8
 8014604:	2100      	movs	r1, #0
 8014606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801460a:	6866      	ldr	r6, [r4, #4]
 801460c:	60a6      	str	r6, [r4, #8]
 801460e:	2e00      	cmp	r6, #0
 8014610:	db05      	blt.n	801461e <_printf_i+0x10e>
 8014612:	6821      	ldr	r1, [r4, #0]
 8014614:	432e      	orrs	r6, r5
 8014616:	f021 0104 	bic.w	r1, r1, #4
 801461a:	6021      	str	r1, [r4, #0]
 801461c:	d04b      	beq.n	80146b6 <_printf_i+0x1a6>
 801461e:	4616      	mov	r6, r2
 8014620:	fbb5 f1f3 	udiv	r1, r5, r3
 8014624:	fb03 5711 	mls	r7, r3, r1, r5
 8014628:	5dc7      	ldrb	r7, [r0, r7]
 801462a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801462e:	462f      	mov	r7, r5
 8014630:	42bb      	cmp	r3, r7
 8014632:	460d      	mov	r5, r1
 8014634:	d9f4      	bls.n	8014620 <_printf_i+0x110>
 8014636:	2b08      	cmp	r3, #8
 8014638:	d10b      	bne.n	8014652 <_printf_i+0x142>
 801463a:	6823      	ldr	r3, [r4, #0]
 801463c:	07df      	lsls	r7, r3, #31
 801463e:	d508      	bpl.n	8014652 <_printf_i+0x142>
 8014640:	6923      	ldr	r3, [r4, #16]
 8014642:	6861      	ldr	r1, [r4, #4]
 8014644:	4299      	cmp	r1, r3
 8014646:	bfde      	ittt	le
 8014648:	2330      	movle	r3, #48	@ 0x30
 801464a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801464e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014652:	1b92      	subs	r2, r2, r6
 8014654:	6122      	str	r2, [r4, #16]
 8014656:	f8cd a000 	str.w	sl, [sp]
 801465a:	464b      	mov	r3, r9
 801465c:	aa03      	add	r2, sp, #12
 801465e:	4621      	mov	r1, r4
 8014660:	4640      	mov	r0, r8
 8014662:	f7ff fee7 	bl	8014434 <_printf_common>
 8014666:	3001      	adds	r0, #1
 8014668:	d14a      	bne.n	8014700 <_printf_i+0x1f0>
 801466a:	f04f 30ff 	mov.w	r0, #4294967295
 801466e:	b004      	add	sp, #16
 8014670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014674:	6823      	ldr	r3, [r4, #0]
 8014676:	f043 0320 	orr.w	r3, r3, #32
 801467a:	6023      	str	r3, [r4, #0]
 801467c:	4832      	ldr	r0, [pc, #200]	@ (8014748 <_printf_i+0x238>)
 801467e:	2778      	movs	r7, #120	@ 0x78
 8014680:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014684:	6823      	ldr	r3, [r4, #0]
 8014686:	6831      	ldr	r1, [r6, #0]
 8014688:	061f      	lsls	r7, r3, #24
 801468a:	f851 5b04 	ldr.w	r5, [r1], #4
 801468e:	d402      	bmi.n	8014696 <_printf_i+0x186>
 8014690:	065f      	lsls	r7, r3, #25
 8014692:	bf48      	it	mi
 8014694:	b2ad      	uxthmi	r5, r5
 8014696:	6031      	str	r1, [r6, #0]
 8014698:	07d9      	lsls	r1, r3, #31
 801469a:	bf44      	itt	mi
 801469c:	f043 0320 	orrmi.w	r3, r3, #32
 80146a0:	6023      	strmi	r3, [r4, #0]
 80146a2:	b11d      	cbz	r5, 80146ac <_printf_i+0x19c>
 80146a4:	2310      	movs	r3, #16
 80146a6:	e7ad      	b.n	8014604 <_printf_i+0xf4>
 80146a8:	4826      	ldr	r0, [pc, #152]	@ (8014744 <_printf_i+0x234>)
 80146aa:	e7e9      	b.n	8014680 <_printf_i+0x170>
 80146ac:	6823      	ldr	r3, [r4, #0]
 80146ae:	f023 0320 	bic.w	r3, r3, #32
 80146b2:	6023      	str	r3, [r4, #0]
 80146b4:	e7f6      	b.n	80146a4 <_printf_i+0x194>
 80146b6:	4616      	mov	r6, r2
 80146b8:	e7bd      	b.n	8014636 <_printf_i+0x126>
 80146ba:	6833      	ldr	r3, [r6, #0]
 80146bc:	6825      	ldr	r5, [r4, #0]
 80146be:	6961      	ldr	r1, [r4, #20]
 80146c0:	1d18      	adds	r0, r3, #4
 80146c2:	6030      	str	r0, [r6, #0]
 80146c4:	062e      	lsls	r6, r5, #24
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	d501      	bpl.n	80146ce <_printf_i+0x1be>
 80146ca:	6019      	str	r1, [r3, #0]
 80146cc:	e002      	b.n	80146d4 <_printf_i+0x1c4>
 80146ce:	0668      	lsls	r0, r5, #25
 80146d0:	d5fb      	bpl.n	80146ca <_printf_i+0x1ba>
 80146d2:	8019      	strh	r1, [r3, #0]
 80146d4:	2300      	movs	r3, #0
 80146d6:	6123      	str	r3, [r4, #16]
 80146d8:	4616      	mov	r6, r2
 80146da:	e7bc      	b.n	8014656 <_printf_i+0x146>
 80146dc:	6833      	ldr	r3, [r6, #0]
 80146de:	1d1a      	adds	r2, r3, #4
 80146e0:	6032      	str	r2, [r6, #0]
 80146e2:	681e      	ldr	r6, [r3, #0]
 80146e4:	6862      	ldr	r2, [r4, #4]
 80146e6:	2100      	movs	r1, #0
 80146e8:	4630      	mov	r0, r6
 80146ea:	f7eb fd91 	bl	8000210 <memchr>
 80146ee:	b108      	cbz	r0, 80146f4 <_printf_i+0x1e4>
 80146f0:	1b80      	subs	r0, r0, r6
 80146f2:	6060      	str	r0, [r4, #4]
 80146f4:	6863      	ldr	r3, [r4, #4]
 80146f6:	6123      	str	r3, [r4, #16]
 80146f8:	2300      	movs	r3, #0
 80146fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146fe:	e7aa      	b.n	8014656 <_printf_i+0x146>
 8014700:	6923      	ldr	r3, [r4, #16]
 8014702:	4632      	mov	r2, r6
 8014704:	4649      	mov	r1, r9
 8014706:	4640      	mov	r0, r8
 8014708:	47d0      	blx	sl
 801470a:	3001      	adds	r0, #1
 801470c:	d0ad      	beq.n	801466a <_printf_i+0x15a>
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	079b      	lsls	r3, r3, #30
 8014712:	d413      	bmi.n	801473c <_printf_i+0x22c>
 8014714:	68e0      	ldr	r0, [r4, #12]
 8014716:	9b03      	ldr	r3, [sp, #12]
 8014718:	4298      	cmp	r0, r3
 801471a:	bfb8      	it	lt
 801471c:	4618      	movlt	r0, r3
 801471e:	e7a6      	b.n	801466e <_printf_i+0x15e>
 8014720:	2301      	movs	r3, #1
 8014722:	4632      	mov	r2, r6
 8014724:	4649      	mov	r1, r9
 8014726:	4640      	mov	r0, r8
 8014728:	47d0      	blx	sl
 801472a:	3001      	adds	r0, #1
 801472c:	d09d      	beq.n	801466a <_printf_i+0x15a>
 801472e:	3501      	adds	r5, #1
 8014730:	68e3      	ldr	r3, [r4, #12]
 8014732:	9903      	ldr	r1, [sp, #12]
 8014734:	1a5b      	subs	r3, r3, r1
 8014736:	42ab      	cmp	r3, r5
 8014738:	dcf2      	bgt.n	8014720 <_printf_i+0x210>
 801473a:	e7eb      	b.n	8014714 <_printf_i+0x204>
 801473c:	2500      	movs	r5, #0
 801473e:	f104 0619 	add.w	r6, r4, #25
 8014742:	e7f5      	b.n	8014730 <_printf_i+0x220>
 8014744:	08017ad4 	.word	0x08017ad4
 8014748:	08017ae5 	.word	0x08017ae5

0801474c <std>:
 801474c:	2300      	movs	r3, #0
 801474e:	b510      	push	{r4, lr}
 8014750:	4604      	mov	r4, r0
 8014752:	e9c0 3300 	strd	r3, r3, [r0]
 8014756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801475a:	6083      	str	r3, [r0, #8]
 801475c:	8181      	strh	r1, [r0, #12]
 801475e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014760:	81c2      	strh	r2, [r0, #14]
 8014762:	6183      	str	r3, [r0, #24]
 8014764:	4619      	mov	r1, r3
 8014766:	2208      	movs	r2, #8
 8014768:	305c      	adds	r0, #92	@ 0x5c
 801476a:	f000 fa2f 	bl	8014bcc <memset>
 801476e:	4b0d      	ldr	r3, [pc, #52]	@ (80147a4 <std+0x58>)
 8014770:	6263      	str	r3, [r4, #36]	@ 0x24
 8014772:	4b0d      	ldr	r3, [pc, #52]	@ (80147a8 <std+0x5c>)
 8014774:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014776:	4b0d      	ldr	r3, [pc, #52]	@ (80147ac <std+0x60>)
 8014778:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801477a:	4b0d      	ldr	r3, [pc, #52]	@ (80147b0 <std+0x64>)
 801477c:	6323      	str	r3, [r4, #48]	@ 0x30
 801477e:	4b0d      	ldr	r3, [pc, #52]	@ (80147b4 <std+0x68>)
 8014780:	6224      	str	r4, [r4, #32]
 8014782:	429c      	cmp	r4, r3
 8014784:	d006      	beq.n	8014794 <std+0x48>
 8014786:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801478a:	4294      	cmp	r4, r2
 801478c:	d002      	beq.n	8014794 <std+0x48>
 801478e:	33d0      	adds	r3, #208	@ 0xd0
 8014790:	429c      	cmp	r4, r3
 8014792:	d105      	bne.n	80147a0 <std+0x54>
 8014794:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801479c:	f000 bb6c 	b.w	8014e78 <__retarget_lock_init_recursive>
 80147a0:	bd10      	pop	{r4, pc}
 80147a2:	bf00      	nop
 80147a4:	08014a1d 	.word	0x08014a1d
 80147a8:	08014a3f 	.word	0x08014a3f
 80147ac:	08014a77 	.word	0x08014a77
 80147b0:	08014a9b 	.word	0x08014a9b
 80147b4:	2000e3e8 	.word	0x2000e3e8

080147b8 <stdio_exit_handler>:
 80147b8:	4a02      	ldr	r2, [pc, #8]	@ (80147c4 <stdio_exit_handler+0xc>)
 80147ba:	4903      	ldr	r1, [pc, #12]	@ (80147c8 <stdio_exit_handler+0x10>)
 80147bc:	4803      	ldr	r0, [pc, #12]	@ (80147cc <stdio_exit_handler+0x14>)
 80147be:	f000 b869 	b.w	8014894 <_fwalk_sglue>
 80147c2:	bf00      	nop
 80147c4:	20000014 	.word	0x20000014
 80147c8:	080173e9 	.word	0x080173e9
 80147cc:	20000190 	.word	0x20000190

080147d0 <cleanup_stdio>:
 80147d0:	6841      	ldr	r1, [r0, #4]
 80147d2:	4b0c      	ldr	r3, [pc, #48]	@ (8014804 <cleanup_stdio+0x34>)
 80147d4:	4299      	cmp	r1, r3
 80147d6:	b510      	push	{r4, lr}
 80147d8:	4604      	mov	r4, r0
 80147da:	d001      	beq.n	80147e0 <cleanup_stdio+0x10>
 80147dc:	f002 fe04 	bl	80173e8 <_fflush_r>
 80147e0:	68a1      	ldr	r1, [r4, #8]
 80147e2:	4b09      	ldr	r3, [pc, #36]	@ (8014808 <cleanup_stdio+0x38>)
 80147e4:	4299      	cmp	r1, r3
 80147e6:	d002      	beq.n	80147ee <cleanup_stdio+0x1e>
 80147e8:	4620      	mov	r0, r4
 80147ea:	f002 fdfd 	bl	80173e8 <_fflush_r>
 80147ee:	68e1      	ldr	r1, [r4, #12]
 80147f0:	4b06      	ldr	r3, [pc, #24]	@ (801480c <cleanup_stdio+0x3c>)
 80147f2:	4299      	cmp	r1, r3
 80147f4:	d004      	beq.n	8014800 <cleanup_stdio+0x30>
 80147f6:	4620      	mov	r0, r4
 80147f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147fc:	f002 bdf4 	b.w	80173e8 <_fflush_r>
 8014800:	bd10      	pop	{r4, pc}
 8014802:	bf00      	nop
 8014804:	2000e3e8 	.word	0x2000e3e8
 8014808:	2000e450 	.word	0x2000e450
 801480c:	2000e4b8 	.word	0x2000e4b8

08014810 <global_stdio_init.part.0>:
 8014810:	b510      	push	{r4, lr}
 8014812:	4b0b      	ldr	r3, [pc, #44]	@ (8014840 <global_stdio_init.part.0+0x30>)
 8014814:	4c0b      	ldr	r4, [pc, #44]	@ (8014844 <global_stdio_init.part.0+0x34>)
 8014816:	4a0c      	ldr	r2, [pc, #48]	@ (8014848 <global_stdio_init.part.0+0x38>)
 8014818:	601a      	str	r2, [r3, #0]
 801481a:	4620      	mov	r0, r4
 801481c:	2200      	movs	r2, #0
 801481e:	2104      	movs	r1, #4
 8014820:	f7ff ff94 	bl	801474c <std>
 8014824:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014828:	2201      	movs	r2, #1
 801482a:	2109      	movs	r1, #9
 801482c:	f7ff ff8e 	bl	801474c <std>
 8014830:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014834:	2202      	movs	r2, #2
 8014836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801483a:	2112      	movs	r1, #18
 801483c:	f7ff bf86 	b.w	801474c <std>
 8014840:	2000e520 	.word	0x2000e520
 8014844:	2000e3e8 	.word	0x2000e3e8
 8014848:	080147b9 	.word	0x080147b9

0801484c <__sfp_lock_acquire>:
 801484c:	4801      	ldr	r0, [pc, #4]	@ (8014854 <__sfp_lock_acquire+0x8>)
 801484e:	f000 bb14 	b.w	8014e7a <__retarget_lock_acquire_recursive>
 8014852:	bf00      	nop
 8014854:	2000e529 	.word	0x2000e529

08014858 <__sfp_lock_release>:
 8014858:	4801      	ldr	r0, [pc, #4]	@ (8014860 <__sfp_lock_release+0x8>)
 801485a:	f000 bb0f 	b.w	8014e7c <__retarget_lock_release_recursive>
 801485e:	bf00      	nop
 8014860:	2000e529 	.word	0x2000e529

08014864 <__sinit>:
 8014864:	b510      	push	{r4, lr}
 8014866:	4604      	mov	r4, r0
 8014868:	f7ff fff0 	bl	801484c <__sfp_lock_acquire>
 801486c:	6a23      	ldr	r3, [r4, #32]
 801486e:	b11b      	cbz	r3, 8014878 <__sinit+0x14>
 8014870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014874:	f7ff bff0 	b.w	8014858 <__sfp_lock_release>
 8014878:	4b04      	ldr	r3, [pc, #16]	@ (801488c <__sinit+0x28>)
 801487a:	6223      	str	r3, [r4, #32]
 801487c:	4b04      	ldr	r3, [pc, #16]	@ (8014890 <__sinit+0x2c>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d1f5      	bne.n	8014870 <__sinit+0xc>
 8014884:	f7ff ffc4 	bl	8014810 <global_stdio_init.part.0>
 8014888:	e7f2      	b.n	8014870 <__sinit+0xc>
 801488a:	bf00      	nop
 801488c:	080147d1 	.word	0x080147d1
 8014890:	2000e520 	.word	0x2000e520

08014894 <_fwalk_sglue>:
 8014894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014898:	4607      	mov	r7, r0
 801489a:	4688      	mov	r8, r1
 801489c:	4614      	mov	r4, r2
 801489e:	2600      	movs	r6, #0
 80148a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148a4:	f1b9 0901 	subs.w	r9, r9, #1
 80148a8:	d505      	bpl.n	80148b6 <_fwalk_sglue+0x22>
 80148aa:	6824      	ldr	r4, [r4, #0]
 80148ac:	2c00      	cmp	r4, #0
 80148ae:	d1f7      	bne.n	80148a0 <_fwalk_sglue+0xc>
 80148b0:	4630      	mov	r0, r6
 80148b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148b6:	89ab      	ldrh	r3, [r5, #12]
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	d907      	bls.n	80148cc <_fwalk_sglue+0x38>
 80148bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148c0:	3301      	adds	r3, #1
 80148c2:	d003      	beq.n	80148cc <_fwalk_sglue+0x38>
 80148c4:	4629      	mov	r1, r5
 80148c6:	4638      	mov	r0, r7
 80148c8:	47c0      	blx	r8
 80148ca:	4306      	orrs	r6, r0
 80148cc:	3568      	adds	r5, #104	@ 0x68
 80148ce:	e7e9      	b.n	80148a4 <_fwalk_sglue+0x10>

080148d0 <iprintf>:
 80148d0:	b40f      	push	{r0, r1, r2, r3}
 80148d2:	b507      	push	{r0, r1, r2, lr}
 80148d4:	4906      	ldr	r1, [pc, #24]	@ (80148f0 <iprintf+0x20>)
 80148d6:	ab04      	add	r3, sp, #16
 80148d8:	6808      	ldr	r0, [r1, #0]
 80148da:	f853 2b04 	ldr.w	r2, [r3], #4
 80148de:	6881      	ldr	r1, [r0, #8]
 80148e0:	9301      	str	r3, [sp, #4]
 80148e2:	f002 fbe5 	bl	80170b0 <_vfiprintf_r>
 80148e6:	b003      	add	sp, #12
 80148e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80148ec:	b004      	add	sp, #16
 80148ee:	4770      	bx	lr
 80148f0:	2000018c 	.word	0x2000018c

080148f4 <_puts_r>:
 80148f4:	6a03      	ldr	r3, [r0, #32]
 80148f6:	b570      	push	{r4, r5, r6, lr}
 80148f8:	6884      	ldr	r4, [r0, #8]
 80148fa:	4605      	mov	r5, r0
 80148fc:	460e      	mov	r6, r1
 80148fe:	b90b      	cbnz	r3, 8014904 <_puts_r+0x10>
 8014900:	f7ff ffb0 	bl	8014864 <__sinit>
 8014904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014906:	07db      	lsls	r3, r3, #31
 8014908:	d405      	bmi.n	8014916 <_puts_r+0x22>
 801490a:	89a3      	ldrh	r3, [r4, #12]
 801490c:	0598      	lsls	r0, r3, #22
 801490e:	d402      	bmi.n	8014916 <_puts_r+0x22>
 8014910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014912:	f000 fab2 	bl	8014e7a <__retarget_lock_acquire_recursive>
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	0719      	lsls	r1, r3, #28
 801491a:	d502      	bpl.n	8014922 <_puts_r+0x2e>
 801491c:	6923      	ldr	r3, [r4, #16]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d135      	bne.n	801498e <_puts_r+0x9a>
 8014922:	4621      	mov	r1, r4
 8014924:	4628      	mov	r0, r5
 8014926:	f000 f8fb 	bl	8014b20 <__swsetup_r>
 801492a:	b380      	cbz	r0, 801498e <_puts_r+0x9a>
 801492c:	f04f 35ff 	mov.w	r5, #4294967295
 8014930:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014932:	07da      	lsls	r2, r3, #31
 8014934:	d405      	bmi.n	8014942 <_puts_r+0x4e>
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	059b      	lsls	r3, r3, #22
 801493a:	d402      	bmi.n	8014942 <_puts_r+0x4e>
 801493c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801493e:	f000 fa9d 	bl	8014e7c <__retarget_lock_release_recursive>
 8014942:	4628      	mov	r0, r5
 8014944:	bd70      	pop	{r4, r5, r6, pc}
 8014946:	2b00      	cmp	r3, #0
 8014948:	da04      	bge.n	8014954 <_puts_r+0x60>
 801494a:	69a2      	ldr	r2, [r4, #24]
 801494c:	429a      	cmp	r2, r3
 801494e:	dc17      	bgt.n	8014980 <_puts_r+0x8c>
 8014950:	290a      	cmp	r1, #10
 8014952:	d015      	beq.n	8014980 <_puts_r+0x8c>
 8014954:	6823      	ldr	r3, [r4, #0]
 8014956:	1c5a      	adds	r2, r3, #1
 8014958:	6022      	str	r2, [r4, #0]
 801495a:	7019      	strb	r1, [r3, #0]
 801495c:	68a3      	ldr	r3, [r4, #8]
 801495e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014962:	3b01      	subs	r3, #1
 8014964:	60a3      	str	r3, [r4, #8]
 8014966:	2900      	cmp	r1, #0
 8014968:	d1ed      	bne.n	8014946 <_puts_r+0x52>
 801496a:	2b00      	cmp	r3, #0
 801496c:	da11      	bge.n	8014992 <_puts_r+0x9e>
 801496e:	4622      	mov	r2, r4
 8014970:	210a      	movs	r1, #10
 8014972:	4628      	mov	r0, r5
 8014974:	f000 f895 	bl	8014aa2 <__swbuf_r>
 8014978:	3001      	adds	r0, #1
 801497a:	d0d7      	beq.n	801492c <_puts_r+0x38>
 801497c:	250a      	movs	r5, #10
 801497e:	e7d7      	b.n	8014930 <_puts_r+0x3c>
 8014980:	4622      	mov	r2, r4
 8014982:	4628      	mov	r0, r5
 8014984:	f000 f88d 	bl	8014aa2 <__swbuf_r>
 8014988:	3001      	adds	r0, #1
 801498a:	d1e7      	bne.n	801495c <_puts_r+0x68>
 801498c:	e7ce      	b.n	801492c <_puts_r+0x38>
 801498e:	3e01      	subs	r6, #1
 8014990:	e7e4      	b.n	801495c <_puts_r+0x68>
 8014992:	6823      	ldr	r3, [r4, #0]
 8014994:	1c5a      	adds	r2, r3, #1
 8014996:	6022      	str	r2, [r4, #0]
 8014998:	220a      	movs	r2, #10
 801499a:	701a      	strb	r2, [r3, #0]
 801499c:	e7ee      	b.n	801497c <_puts_r+0x88>
	...

080149a0 <puts>:
 80149a0:	4b02      	ldr	r3, [pc, #8]	@ (80149ac <puts+0xc>)
 80149a2:	4601      	mov	r1, r0
 80149a4:	6818      	ldr	r0, [r3, #0]
 80149a6:	f7ff bfa5 	b.w	80148f4 <_puts_r>
 80149aa:	bf00      	nop
 80149ac:	2000018c 	.word	0x2000018c

080149b0 <sniprintf>:
 80149b0:	b40c      	push	{r2, r3}
 80149b2:	b530      	push	{r4, r5, lr}
 80149b4:	4b18      	ldr	r3, [pc, #96]	@ (8014a18 <sniprintf+0x68>)
 80149b6:	1e0c      	subs	r4, r1, #0
 80149b8:	681d      	ldr	r5, [r3, #0]
 80149ba:	b09d      	sub	sp, #116	@ 0x74
 80149bc:	da08      	bge.n	80149d0 <sniprintf+0x20>
 80149be:	238b      	movs	r3, #139	@ 0x8b
 80149c0:	602b      	str	r3, [r5, #0]
 80149c2:	f04f 30ff 	mov.w	r0, #4294967295
 80149c6:	b01d      	add	sp, #116	@ 0x74
 80149c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149cc:	b002      	add	sp, #8
 80149ce:	4770      	bx	lr
 80149d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80149d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80149d8:	f04f 0300 	mov.w	r3, #0
 80149dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80149de:	bf14      	ite	ne
 80149e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80149e4:	4623      	moveq	r3, r4
 80149e6:	9304      	str	r3, [sp, #16]
 80149e8:	9307      	str	r3, [sp, #28]
 80149ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80149ee:	9002      	str	r0, [sp, #8]
 80149f0:	9006      	str	r0, [sp, #24]
 80149f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80149f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80149f8:	ab21      	add	r3, sp, #132	@ 0x84
 80149fa:	a902      	add	r1, sp, #8
 80149fc:	4628      	mov	r0, r5
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	f002 fa30 	bl	8016e64 <_svfiprintf_r>
 8014a04:	1c43      	adds	r3, r0, #1
 8014a06:	bfbc      	itt	lt
 8014a08:	238b      	movlt	r3, #139	@ 0x8b
 8014a0a:	602b      	strlt	r3, [r5, #0]
 8014a0c:	2c00      	cmp	r4, #0
 8014a0e:	d0da      	beq.n	80149c6 <sniprintf+0x16>
 8014a10:	9b02      	ldr	r3, [sp, #8]
 8014a12:	2200      	movs	r2, #0
 8014a14:	701a      	strb	r2, [r3, #0]
 8014a16:	e7d6      	b.n	80149c6 <sniprintf+0x16>
 8014a18:	2000018c 	.word	0x2000018c

08014a1c <__sread>:
 8014a1c:	b510      	push	{r4, lr}
 8014a1e:	460c      	mov	r4, r1
 8014a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a24:	f000 f9da 	bl	8014ddc <_read_r>
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	bfab      	itete	ge
 8014a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8014a30:	181b      	addge	r3, r3, r0
 8014a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a36:	bfac      	ite	ge
 8014a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a3a:	81a3      	strhlt	r3, [r4, #12]
 8014a3c:	bd10      	pop	{r4, pc}

08014a3e <__swrite>:
 8014a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a42:	461f      	mov	r7, r3
 8014a44:	898b      	ldrh	r3, [r1, #12]
 8014a46:	05db      	lsls	r3, r3, #23
 8014a48:	4605      	mov	r5, r0
 8014a4a:	460c      	mov	r4, r1
 8014a4c:	4616      	mov	r6, r2
 8014a4e:	d505      	bpl.n	8014a5c <__swrite+0x1e>
 8014a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a54:	2302      	movs	r3, #2
 8014a56:	2200      	movs	r2, #0
 8014a58:	f000 f9ae 	bl	8014db8 <_lseek_r>
 8014a5c:	89a3      	ldrh	r3, [r4, #12]
 8014a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a66:	81a3      	strh	r3, [r4, #12]
 8014a68:	4632      	mov	r2, r6
 8014a6a:	463b      	mov	r3, r7
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a72:	f000 b9c5 	b.w	8014e00 <_write_r>

08014a76 <__sseek>:
 8014a76:	b510      	push	{r4, lr}
 8014a78:	460c      	mov	r4, r1
 8014a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a7e:	f000 f99b 	bl	8014db8 <_lseek_r>
 8014a82:	1c43      	adds	r3, r0, #1
 8014a84:	89a3      	ldrh	r3, [r4, #12]
 8014a86:	bf15      	itete	ne
 8014a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a92:	81a3      	strheq	r3, [r4, #12]
 8014a94:	bf18      	it	ne
 8014a96:	81a3      	strhne	r3, [r4, #12]
 8014a98:	bd10      	pop	{r4, pc}

08014a9a <__sclose>:
 8014a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9e:	f000 b91d 	b.w	8014cdc <_close_r>

08014aa2 <__swbuf_r>:
 8014aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aa4:	460e      	mov	r6, r1
 8014aa6:	4614      	mov	r4, r2
 8014aa8:	4605      	mov	r5, r0
 8014aaa:	b118      	cbz	r0, 8014ab4 <__swbuf_r+0x12>
 8014aac:	6a03      	ldr	r3, [r0, #32]
 8014aae:	b90b      	cbnz	r3, 8014ab4 <__swbuf_r+0x12>
 8014ab0:	f7ff fed8 	bl	8014864 <__sinit>
 8014ab4:	69a3      	ldr	r3, [r4, #24]
 8014ab6:	60a3      	str	r3, [r4, #8]
 8014ab8:	89a3      	ldrh	r3, [r4, #12]
 8014aba:	071a      	lsls	r2, r3, #28
 8014abc:	d501      	bpl.n	8014ac2 <__swbuf_r+0x20>
 8014abe:	6923      	ldr	r3, [r4, #16]
 8014ac0:	b943      	cbnz	r3, 8014ad4 <__swbuf_r+0x32>
 8014ac2:	4621      	mov	r1, r4
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	f000 f82b 	bl	8014b20 <__swsetup_r>
 8014aca:	b118      	cbz	r0, 8014ad4 <__swbuf_r+0x32>
 8014acc:	f04f 37ff 	mov.w	r7, #4294967295
 8014ad0:	4638      	mov	r0, r7
 8014ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ad4:	6823      	ldr	r3, [r4, #0]
 8014ad6:	6922      	ldr	r2, [r4, #16]
 8014ad8:	1a98      	subs	r0, r3, r2
 8014ada:	6963      	ldr	r3, [r4, #20]
 8014adc:	b2f6      	uxtb	r6, r6
 8014ade:	4283      	cmp	r3, r0
 8014ae0:	4637      	mov	r7, r6
 8014ae2:	dc05      	bgt.n	8014af0 <__swbuf_r+0x4e>
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	f002 fc7e 	bl	80173e8 <_fflush_r>
 8014aec:	2800      	cmp	r0, #0
 8014aee:	d1ed      	bne.n	8014acc <__swbuf_r+0x2a>
 8014af0:	68a3      	ldr	r3, [r4, #8]
 8014af2:	3b01      	subs	r3, #1
 8014af4:	60a3      	str	r3, [r4, #8]
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	1c5a      	adds	r2, r3, #1
 8014afa:	6022      	str	r2, [r4, #0]
 8014afc:	701e      	strb	r6, [r3, #0]
 8014afe:	6962      	ldr	r2, [r4, #20]
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d004      	beq.n	8014b10 <__swbuf_r+0x6e>
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	07db      	lsls	r3, r3, #31
 8014b0a:	d5e1      	bpl.n	8014ad0 <__swbuf_r+0x2e>
 8014b0c:	2e0a      	cmp	r6, #10
 8014b0e:	d1df      	bne.n	8014ad0 <__swbuf_r+0x2e>
 8014b10:	4621      	mov	r1, r4
 8014b12:	4628      	mov	r0, r5
 8014b14:	f002 fc68 	bl	80173e8 <_fflush_r>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	d0d9      	beq.n	8014ad0 <__swbuf_r+0x2e>
 8014b1c:	e7d6      	b.n	8014acc <__swbuf_r+0x2a>
	...

08014b20 <__swsetup_r>:
 8014b20:	b538      	push	{r3, r4, r5, lr}
 8014b22:	4b29      	ldr	r3, [pc, #164]	@ (8014bc8 <__swsetup_r+0xa8>)
 8014b24:	4605      	mov	r5, r0
 8014b26:	6818      	ldr	r0, [r3, #0]
 8014b28:	460c      	mov	r4, r1
 8014b2a:	b118      	cbz	r0, 8014b34 <__swsetup_r+0x14>
 8014b2c:	6a03      	ldr	r3, [r0, #32]
 8014b2e:	b90b      	cbnz	r3, 8014b34 <__swsetup_r+0x14>
 8014b30:	f7ff fe98 	bl	8014864 <__sinit>
 8014b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b38:	0719      	lsls	r1, r3, #28
 8014b3a:	d422      	bmi.n	8014b82 <__swsetup_r+0x62>
 8014b3c:	06da      	lsls	r2, r3, #27
 8014b3e:	d407      	bmi.n	8014b50 <__swsetup_r+0x30>
 8014b40:	2209      	movs	r2, #9
 8014b42:	602a      	str	r2, [r5, #0]
 8014b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b48:	81a3      	strh	r3, [r4, #12]
 8014b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b4e:	e033      	b.n	8014bb8 <__swsetup_r+0x98>
 8014b50:	0758      	lsls	r0, r3, #29
 8014b52:	d512      	bpl.n	8014b7a <__swsetup_r+0x5a>
 8014b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b56:	b141      	cbz	r1, 8014b6a <__swsetup_r+0x4a>
 8014b58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b5c:	4299      	cmp	r1, r3
 8014b5e:	d002      	beq.n	8014b66 <__swsetup_r+0x46>
 8014b60:	4628      	mov	r0, r5
 8014b62:	f001 f821 	bl	8015ba8 <_free_r>
 8014b66:	2300      	movs	r3, #0
 8014b68:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b6a:	89a3      	ldrh	r3, [r4, #12]
 8014b6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b70:	81a3      	strh	r3, [r4, #12]
 8014b72:	2300      	movs	r3, #0
 8014b74:	6063      	str	r3, [r4, #4]
 8014b76:	6923      	ldr	r3, [r4, #16]
 8014b78:	6023      	str	r3, [r4, #0]
 8014b7a:	89a3      	ldrh	r3, [r4, #12]
 8014b7c:	f043 0308 	orr.w	r3, r3, #8
 8014b80:	81a3      	strh	r3, [r4, #12]
 8014b82:	6923      	ldr	r3, [r4, #16]
 8014b84:	b94b      	cbnz	r3, 8014b9a <__swsetup_r+0x7a>
 8014b86:	89a3      	ldrh	r3, [r4, #12]
 8014b88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b90:	d003      	beq.n	8014b9a <__swsetup_r+0x7a>
 8014b92:	4621      	mov	r1, r4
 8014b94:	4628      	mov	r0, r5
 8014b96:	f002 fc87 	bl	80174a8 <__smakebuf_r>
 8014b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b9e:	f013 0201 	ands.w	r2, r3, #1
 8014ba2:	d00a      	beq.n	8014bba <__swsetup_r+0x9a>
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	60a2      	str	r2, [r4, #8]
 8014ba8:	6962      	ldr	r2, [r4, #20]
 8014baa:	4252      	negs	r2, r2
 8014bac:	61a2      	str	r2, [r4, #24]
 8014bae:	6922      	ldr	r2, [r4, #16]
 8014bb0:	b942      	cbnz	r2, 8014bc4 <__swsetup_r+0xa4>
 8014bb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014bb6:	d1c5      	bne.n	8014b44 <__swsetup_r+0x24>
 8014bb8:	bd38      	pop	{r3, r4, r5, pc}
 8014bba:	0799      	lsls	r1, r3, #30
 8014bbc:	bf58      	it	pl
 8014bbe:	6962      	ldrpl	r2, [r4, #20]
 8014bc0:	60a2      	str	r2, [r4, #8]
 8014bc2:	e7f4      	b.n	8014bae <__swsetup_r+0x8e>
 8014bc4:	2000      	movs	r0, #0
 8014bc6:	e7f7      	b.n	8014bb8 <__swsetup_r+0x98>
 8014bc8:	2000018c 	.word	0x2000018c

08014bcc <memset>:
 8014bcc:	4402      	add	r2, r0
 8014bce:	4603      	mov	r3, r0
 8014bd0:	4293      	cmp	r3, r2
 8014bd2:	d100      	bne.n	8014bd6 <memset+0xa>
 8014bd4:	4770      	bx	lr
 8014bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8014bda:	e7f9      	b.n	8014bd0 <memset+0x4>

08014bdc <strchr>:
 8014bdc:	b2c9      	uxtb	r1, r1
 8014bde:	4603      	mov	r3, r0
 8014be0:	4618      	mov	r0, r3
 8014be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014be6:	b112      	cbz	r2, 8014bee <strchr+0x12>
 8014be8:	428a      	cmp	r2, r1
 8014bea:	d1f9      	bne.n	8014be0 <strchr+0x4>
 8014bec:	4770      	bx	lr
 8014bee:	2900      	cmp	r1, #0
 8014bf0:	bf18      	it	ne
 8014bf2:	2000      	movne	r0, #0
 8014bf4:	4770      	bx	lr

08014bf6 <strncmp>:
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	b16a      	cbz	r2, 8014c16 <strncmp+0x20>
 8014bfa:	3901      	subs	r1, #1
 8014bfc:	1884      	adds	r4, r0, r2
 8014bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d103      	bne.n	8014c12 <strncmp+0x1c>
 8014c0a:	42a0      	cmp	r0, r4
 8014c0c:	d001      	beq.n	8014c12 <strncmp+0x1c>
 8014c0e:	2a00      	cmp	r2, #0
 8014c10:	d1f5      	bne.n	8014bfe <strncmp+0x8>
 8014c12:	1ad0      	subs	r0, r2, r3
 8014c14:	bd10      	pop	{r4, pc}
 8014c16:	4610      	mov	r0, r2
 8014c18:	e7fc      	b.n	8014c14 <strncmp+0x1e>
	...

08014c1c <strtok>:
 8014c1c:	4b16      	ldr	r3, [pc, #88]	@ (8014c78 <strtok+0x5c>)
 8014c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c22:	681f      	ldr	r7, [r3, #0]
 8014c24:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014c26:	4605      	mov	r5, r0
 8014c28:	460e      	mov	r6, r1
 8014c2a:	b9ec      	cbnz	r4, 8014c68 <strtok+0x4c>
 8014c2c:	2050      	movs	r0, #80	@ 0x50
 8014c2e:	f001 fb3f 	bl	80162b0 <malloc>
 8014c32:	4602      	mov	r2, r0
 8014c34:	6478      	str	r0, [r7, #68]	@ 0x44
 8014c36:	b920      	cbnz	r0, 8014c42 <strtok+0x26>
 8014c38:	4b10      	ldr	r3, [pc, #64]	@ (8014c7c <strtok+0x60>)
 8014c3a:	4811      	ldr	r0, [pc, #68]	@ (8014c80 <strtok+0x64>)
 8014c3c:	215b      	movs	r1, #91	@ 0x5b
 8014c3e:	f000 f93d 	bl	8014ebc <__assert_func>
 8014c42:	e9c0 4400 	strd	r4, r4, [r0]
 8014c46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014c4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014c4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8014c52:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014c56:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014c5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8014c5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8014c62:	6184      	str	r4, [r0, #24]
 8014c64:	7704      	strb	r4, [r0, #28]
 8014c66:	6244      	str	r4, [r0, #36]	@ 0x24
 8014c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014c6a:	4631      	mov	r1, r6
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	2301      	movs	r3, #1
 8014c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c74:	f000 b806 	b.w	8014c84 <__strtok_r>
 8014c78:	2000018c 	.word	0x2000018c
 8014c7c:	08017af6 	.word	0x08017af6
 8014c80:	08017b0d 	.word	0x08017b0d

08014c84 <__strtok_r>:
 8014c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c86:	4604      	mov	r4, r0
 8014c88:	b908      	cbnz	r0, 8014c8e <__strtok_r+0xa>
 8014c8a:	6814      	ldr	r4, [r2, #0]
 8014c8c:	b144      	cbz	r4, 8014ca0 <__strtok_r+0x1c>
 8014c8e:	4620      	mov	r0, r4
 8014c90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014c94:	460f      	mov	r7, r1
 8014c96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014c9a:	b91e      	cbnz	r6, 8014ca4 <__strtok_r+0x20>
 8014c9c:	b965      	cbnz	r5, 8014cb8 <__strtok_r+0x34>
 8014c9e:	6015      	str	r5, [r2, #0]
 8014ca0:	2000      	movs	r0, #0
 8014ca2:	e005      	b.n	8014cb0 <__strtok_r+0x2c>
 8014ca4:	42b5      	cmp	r5, r6
 8014ca6:	d1f6      	bne.n	8014c96 <__strtok_r+0x12>
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d1f0      	bne.n	8014c8e <__strtok_r+0xa>
 8014cac:	6014      	str	r4, [r2, #0]
 8014cae:	7003      	strb	r3, [r0, #0]
 8014cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cb2:	461c      	mov	r4, r3
 8014cb4:	e00c      	b.n	8014cd0 <__strtok_r+0x4c>
 8014cb6:	b91d      	cbnz	r5, 8014cc0 <__strtok_r+0x3c>
 8014cb8:	4627      	mov	r7, r4
 8014cba:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014cbe:	460e      	mov	r6, r1
 8014cc0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014cc4:	42ab      	cmp	r3, r5
 8014cc6:	d1f6      	bne.n	8014cb6 <__strtok_r+0x32>
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d0f2      	beq.n	8014cb2 <__strtok_r+0x2e>
 8014ccc:	2300      	movs	r3, #0
 8014cce:	703b      	strb	r3, [r7, #0]
 8014cd0:	6014      	str	r4, [r2, #0]
 8014cd2:	e7ed      	b.n	8014cb0 <__strtok_r+0x2c>

08014cd4 <_localeconv_r>:
 8014cd4:	4800      	ldr	r0, [pc, #0]	@ (8014cd8 <_localeconv_r+0x4>)
 8014cd6:	4770      	bx	lr
 8014cd8:	20000110 	.word	0x20000110

08014cdc <_close_r>:
 8014cdc:	b538      	push	{r3, r4, r5, lr}
 8014cde:	4d06      	ldr	r5, [pc, #24]	@ (8014cf8 <_close_r+0x1c>)
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	4608      	mov	r0, r1
 8014ce6:	602b      	str	r3, [r5, #0]
 8014ce8:	f7f0 f8b2 	bl	8004e50 <_close>
 8014cec:	1c43      	adds	r3, r0, #1
 8014cee:	d102      	bne.n	8014cf6 <_close_r+0x1a>
 8014cf0:	682b      	ldr	r3, [r5, #0]
 8014cf2:	b103      	cbz	r3, 8014cf6 <_close_r+0x1a>
 8014cf4:	6023      	str	r3, [r4, #0]
 8014cf6:	bd38      	pop	{r3, r4, r5, pc}
 8014cf8:	2000e524 	.word	0x2000e524

08014cfc <_reclaim_reent>:
 8014cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8014db4 <_reclaim_reent+0xb8>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4283      	cmp	r3, r0
 8014d02:	b570      	push	{r4, r5, r6, lr}
 8014d04:	4604      	mov	r4, r0
 8014d06:	d053      	beq.n	8014db0 <_reclaim_reent+0xb4>
 8014d08:	69c3      	ldr	r3, [r0, #28]
 8014d0a:	b31b      	cbz	r3, 8014d54 <_reclaim_reent+0x58>
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	b163      	cbz	r3, 8014d2a <_reclaim_reent+0x2e>
 8014d10:	2500      	movs	r5, #0
 8014d12:	69e3      	ldr	r3, [r4, #28]
 8014d14:	68db      	ldr	r3, [r3, #12]
 8014d16:	5959      	ldr	r1, [r3, r5]
 8014d18:	b9b1      	cbnz	r1, 8014d48 <_reclaim_reent+0x4c>
 8014d1a:	3504      	adds	r5, #4
 8014d1c:	2d80      	cmp	r5, #128	@ 0x80
 8014d1e:	d1f8      	bne.n	8014d12 <_reclaim_reent+0x16>
 8014d20:	69e3      	ldr	r3, [r4, #28]
 8014d22:	4620      	mov	r0, r4
 8014d24:	68d9      	ldr	r1, [r3, #12]
 8014d26:	f000 ff3f 	bl	8015ba8 <_free_r>
 8014d2a:	69e3      	ldr	r3, [r4, #28]
 8014d2c:	6819      	ldr	r1, [r3, #0]
 8014d2e:	b111      	cbz	r1, 8014d36 <_reclaim_reent+0x3a>
 8014d30:	4620      	mov	r0, r4
 8014d32:	f000 ff39 	bl	8015ba8 <_free_r>
 8014d36:	69e3      	ldr	r3, [r4, #28]
 8014d38:	689d      	ldr	r5, [r3, #8]
 8014d3a:	b15d      	cbz	r5, 8014d54 <_reclaim_reent+0x58>
 8014d3c:	4629      	mov	r1, r5
 8014d3e:	4620      	mov	r0, r4
 8014d40:	682d      	ldr	r5, [r5, #0]
 8014d42:	f000 ff31 	bl	8015ba8 <_free_r>
 8014d46:	e7f8      	b.n	8014d3a <_reclaim_reent+0x3e>
 8014d48:	680e      	ldr	r6, [r1, #0]
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f000 ff2c 	bl	8015ba8 <_free_r>
 8014d50:	4631      	mov	r1, r6
 8014d52:	e7e1      	b.n	8014d18 <_reclaim_reent+0x1c>
 8014d54:	6961      	ldr	r1, [r4, #20]
 8014d56:	b111      	cbz	r1, 8014d5e <_reclaim_reent+0x62>
 8014d58:	4620      	mov	r0, r4
 8014d5a:	f000 ff25 	bl	8015ba8 <_free_r>
 8014d5e:	69e1      	ldr	r1, [r4, #28]
 8014d60:	b111      	cbz	r1, 8014d68 <_reclaim_reent+0x6c>
 8014d62:	4620      	mov	r0, r4
 8014d64:	f000 ff20 	bl	8015ba8 <_free_r>
 8014d68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014d6a:	b111      	cbz	r1, 8014d72 <_reclaim_reent+0x76>
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	f000 ff1b 	bl	8015ba8 <_free_r>
 8014d72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d74:	b111      	cbz	r1, 8014d7c <_reclaim_reent+0x80>
 8014d76:	4620      	mov	r0, r4
 8014d78:	f000 ff16 	bl	8015ba8 <_free_r>
 8014d7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014d7e:	b111      	cbz	r1, 8014d86 <_reclaim_reent+0x8a>
 8014d80:	4620      	mov	r0, r4
 8014d82:	f000 ff11 	bl	8015ba8 <_free_r>
 8014d86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014d88:	b111      	cbz	r1, 8014d90 <_reclaim_reent+0x94>
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f000 ff0c 	bl	8015ba8 <_free_r>
 8014d90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014d92:	b111      	cbz	r1, 8014d9a <_reclaim_reent+0x9e>
 8014d94:	4620      	mov	r0, r4
 8014d96:	f000 ff07 	bl	8015ba8 <_free_r>
 8014d9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014d9c:	b111      	cbz	r1, 8014da4 <_reclaim_reent+0xa8>
 8014d9e:	4620      	mov	r0, r4
 8014da0:	f000 ff02 	bl	8015ba8 <_free_r>
 8014da4:	6a23      	ldr	r3, [r4, #32]
 8014da6:	b11b      	cbz	r3, 8014db0 <_reclaim_reent+0xb4>
 8014da8:	4620      	mov	r0, r4
 8014daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dae:	4718      	bx	r3
 8014db0:	bd70      	pop	{r4, r5, r6, pc}
 8014db2:	bf00      	nop
 8014db4:	2000018c 	.word	0x2000018c

08014db8 <_lseek_r>:
 8014db8:	b538      	push	{r3, r4, r5, lr}
 8014dba:	4d07      	ldr	r5, [pc, #28]	@ (8014dd8 <_lseek_r+0x20>)
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	4608      	mov	r0, r1
 8014dc0:	4611      	mov	r1, r2
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	602a      	str	r2, [r5, #0]
 8014dc6:	461a      	mov	r2, r3
 8014dc8:	f7f0 f869 	bl	8004e9e <_lseek>
 8014dcc:	1c43      	adds	r3, r0, #1
 8014dce:	d102      	bne.n	8014dd6 <_lseek_r+0x1e>
 8014dd0:	682b      	ldr	r3, [r5, #0]
 8014dd2:	b103      	cbz	r3, 8014dd6 <_lseek_r+0x1e>
 8014dd4:	6023      	str	r3, [r4, #0]
 8014dd6:	bd38      	pop	{r3, r4, r5, pc}
 8014dd8:	2000e524 	.word	0x2000e524

08014ddc <_read_r>:
 8014ddc:	b538      	push	{r3, r4, r5, lr}
 8014dde:	4d07      	ldr	r5, [pc, #28]	@ (8014dfc <_read_r+0x20>)
 8014de0:	4604      	mov	r4, r0
 8014de2:	4608      	mov	r0, r1
 8014de4:	4611      	mov	r1, r2
 8014de6:	2200      	movs	r2, #0
 8014de8:	602a      	str	r2, [r5, #0]
 8014dea:	461a      	mov	r2, r3
 8014dec:	f7ef fff7 	bl	8004dde <_read>
 8014df0:	1c43      	adds	r3, r0, #1
 8014df2:	d102      	bne.n	8014dfa <_read_r+0x1e>
 8014df4:	682b      	ldr	r3, [r5, #0]
 8014df6:	b103      	cbz	r3, 8014dfa <_read_r+0x1e>
 8014df8:	6023      	str	r3, [r4, #0]
 8014dfa:	bd38      	pop	{r3, r4, r5, pc}
 8014dfc:	2000e524 	.word	0x2000e524

08014e00 <_write_r>:
 8014e00:	b538      	push	{r3, r4, r5, lr}
 8014e02:	4d07      	ldr	r5, [pc, #28]	@ (8014e20 <_write_r+0x20>)
 8014e04:	4604      	mov	r4, r0
 8014e06:	4608      	mov	r0, r1
 8014e08:	4611      	mov	r1, r2
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	602a      	str	r2, [r5, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	f7f0 f802 	bl	8004e18 <_write>
 8014e14:	1c43      	adds	r3, r0, #1
 8014e16:	d102      	bne.n	8014e1e <_write_r+0x1e>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b103      	cbz	r3, 8014e1e <_write_r+0x1e>
 8014e1c:	6023      	str	r3, [r4, #0]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	2000e524 	.word	0x2000e524

08014e24 <__errno>:
 8014e24:	4b01      	ldr	r3, [pc, #4]	@ (8014e2c <__errno+0x8>)
 8014e26:	6818      	ldr	r0, [r3, #0]
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	2000018c 	.word	0x2000018c

08014e30 <__libc_init_array>:
 8014e30:	b570      	push	{r4, r5, r6, lr}
 8014e32:	4d0d      	ldr	r5, [pc, #52]	@ (8014e68 <__libc_init_array+0x38>)
 8014e34:	4c0d      	ldr	r4, [pc, #52]	@ (8014e6c <__libc_init_array+0x3c>)
 8014e36:	1b64      	subs	r4, r4, r5
 8014e38:	10a4      	asrs	r4, r4, #2
 8014e3a:	2600      	movs	r6, #0
 8014e3c:	42a6      	cmp	r6, r4
 8014e3e:	d109      	bne.n	8014e54 <__libc_init_array+0x24>
 8014e40:	4d0b      	ldr	r5, [pc, #44]	@ (8014e70 <__libc_init_array+0x40>)
 8014e42:	4c0c      	ldr	r4, [pc, #48]	@ (8014e74 <__libc_init_array+0x44>)
 8014e44:	f002 fc4e 	bl	80176e4 <_init>
 8014e48:	1b64      	subs	r4, r4, r5
 8014e4a:	10a4      	asrs	r4, r4, #2
 8014e4c:	2600      	movs	r6, #0
 8014e4e:	42a6      	cmp	r6, r4
 8014e50:	d105      	bne.n	8014e5e <__libc_init_array+0x2e>
 8014e52:	bd70      	pop	{r4, r5, r6, pc}
 8014e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e58:	4798      	blx	r3
 8014e5a:	3601      	adds	r6, #1
 8014e5c:	e7ee      	b.n	8014e3c <__libc_init_array+0xc>
 8014e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e62:	4798      	blx	r3
 8014e64:	3601      	adds	r6, #1
 8014e66:	e7f2      	b.n	8014e4e <__libc_init_array+0x1e>
 8014e68:	08017f48 	.word	0x08017f48
 8014e6c:	08017f48 	.word	0x08017f48
 8014e70:	08017f48 	.word	0x08017f48
 8014e74:	08017f4c 	.word	0x08017f4c

08014e78 <__retarget_lock_init_recursive>:
 8014e78:	4770      	bx	lr

08014e7a <__retarget_lock_acquire_recursive>:
 8014e7a:	4770      	bx	lr

08014e7c <__retarget_lock_release_recursive>:
 8014e7c:	4770      	bx	lr

08014e7e <memcpy>:
 8014e7e:	440a      	add	r2, r1
 8014e80:	4291      	cmp	r1, r2
 8014e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e86:	d100      	bne.n	8014e8a <memcpy+0xc>
 8014e88:	4770      	bx	lr
 8014e8a:	b510      	push	{r4, lr}
 8014e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e94:	4291      	cmp	r1, r2
 8014e96:	d1f9      	bne.n	8014e8c <memcpy+0xe>
 8014e98:	bd10      	pop	{r4, pc}
 8014e9a:	0000      	movs	r0, r0
 8014e9c:	0000      	movs	r0, r0
	...

08014ea0 <nan>:
 8014ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014ea8 <nan+0x8>
 8014ea4:	4770      	bx	lr
 8014ea6:	bf00      	nop
 8014ea8:	00000000 	.word	0x00000000
 8014eac:	7ff80000 	.word	0x7ff80000

08014eb0 <nanf>:
 8014eb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014eb8 <nanf+0x8>
 8014eb4:	4770      	bx	lr
 8014eb6:	bf00      	nop
 8014eb8:	7fc00000 	.word	0x7fc00000

08014ebc <__assert_func>:
 8014ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ebe:	4614      	mov	r4, r2
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	4b09      	ldr	r3, [pc, #36]	@ (8014ee8 <__assert_func+0x2c>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	68d8      	ldr	r0, [r3, #12]
 8014eca:	b14c      	cbz	r4, 8014ee0 <__assert_func+0x24>
 8014ecc:	4b07      	ldr	r3, [pc, #28]	@ (8014eec <__assert_func+0x30>)
 8014ece:	9100      	str	r1, [sp, #0]
 8014ed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ed4:	4906      	ldr	r1, [pc, #24]	@ (8014ef0 <__assert_func+0x34>)
 8014ed6:	462b      	mov	r3, r5
 8014ed8:	f002 faae 	bl	8017438 <fiprintf>
 8014edc:	f002 fb6c 	bl	80175b8 <abort>
 8014ee0:	4b04      	ldr	r3, [pc, #16]	@ (8014ef4 <__assert_func+0x38>)
 8014ee2:	461c      	mov	r4, r3
 8014ee4:	e7f3      	b.n	8014ece <__assert_func+0x12>
 8014ee6:	bf00      	nop
 8014ee8:	2000018c 	.word	0x2000018c
 8014eec:	08017b6f 	.word	0x08017b6f
 8014ef0:	08017b7c 	.word	0x08017b7c
 8014ef4:	08017baa 	.word	0x08017baa

08014ef8 <quorem>:
 8014ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014efc:	6903      	ldr	r3, [r0, #16]
 8014efe:	690c      	ldr	r4, [r1, #16]
 8014f00:	42a3      	cmp	r3, r4
 8014f02:	4607      	mov	r7, r0
 8014f04:	db7e      	blt.n	8015004 <quorem+0x10c>
 8014f06:	3c01      	subs	r4, #1
 8014f08:	f101 0814 	add.w	r8, r1, #20
 8014f0c:	00a3      	lsls	r3, r4, #2
 8014f0e:	f100 0514 	add.w	r5, r0, #20
 8014f12:	9300      	str	r3, [sp, #0]
 8014f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f18:	9301      	str	r3, [sp, #4]
 8014f1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f22:	3301      	adds	r3, #1
 8014f24:	429a      	cmp	r2, r3
 8014f26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014f2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8014f2e:	d32e      	bcc.n	8014f8e <quorem+0x96>
 8014f30:	f04f 0a00 	mov.w	sl, #0
 8014f34:	46c4      	mov	ip, r8
 8014f36:	46ae      	mov	lr, r5
 8014f38:	46d3      	mov	fp, sl
 8014f3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014f3e:	b298      	uxth	r0, r3
 8014f40:	fb06 a000 	mla	r0, r6, r0, sl
 8014f44:	0c02      	lsrs	r2, r0, #16
 8014f46:	0c1b      	lsrs	r3, r3, #16
 8014f48:	fb06 2303 	mla	r3, r6, r3, r2
 8014f4c:	f8de 2000 	ldr.w	r2, [lr]
 8014f50:	b280      	uxth	r0, r0
 8014f52:	b292      	uxth	r2, r2
 8014f54:	1a12      	subs	r2, r2, r0
 8014f56:	445a      	add	r2, fp
 8014f58:	f8de 0000 	ldr.w	r0, [lr]
 8014f5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014f66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014f6a:	b292      	uxth	r2, r2
 8014f6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014f70:	45e1      	cmp	r9, ip
 8014f72:	f84e 2b04 	str.w	r2, [lr], #4
 8014f76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014f7a:	d2de      	bcs.n	8014f3a <quorem+0x42>
 8014f7c:	9b00      	ldr	r3, [sp, #0]
 8014f7e:	58eb      	ldr	r3, [r5, r3]
 8014f80:	b92b      	cbnz	r3, 8014f8e <quorem+0x96>
 8014f82:	9b01      	ldr	r3, [sp, #4]
 8014f84:	3b04      	subs	r3, #4
 8014f86:	429d      	cmp	r5, r3
 8014f88:	461a      	mov	r2, r3
 8014f8a:	d32f      	bcc.n	8014fec <quorem+0xf4>
 8014f8c:	613c      	str	r4, [r7, #16]
 8014f8e:	4638      	mov	r0, r7
 8014f90:	f001 fd12 	bl	80169b8 <__mcmp>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	db25      	blt.n	8014fe4 <quorem+0xec>
 8014f98:	4629      	mov	r1, r5
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014fa0:	f8d1 c000 	ldr.w	ip, [r1]
 8014fa4:	fa1f fe82 	uxth.w	lr, r2
 8014fa8:	fa1f f38c 	uxth.w	r3, ip
 8014fac:	eba3 030e 	sub.w	r3, r3, lr
 8014fb0:	4403      	add	r3, r0
 8014fb2:	0c12      	lsrs	r2, r2, #16
 8014fb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014fb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014fc2:	45c1      	cmp	r9, r8
 8014fc4:	f841 3b04 	str.w	r3, [r1], #4
 8014fc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014fcc:	d2e6      	bcs.n	8014f9c <quorem+0xa4>
 8014fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014fd6:	b922      	cbnz	r2, 8014fe2 <quorem+0xea>
 8014fd8:	3b04      	subs	r3, #4
 8014fda:	429d      	cmp	r5, r3
 8014fdc:	461a      	mov	r2, r3
 8014fde:	d30b      	bcc.n	8014ff8 <quorem+0x100>
 8014fe0:	613c      	str	r4, [r7, #16]
 8014fe2:	3601      	adds	r6, #1
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	b003      	add	sp, #12
 8014fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fec:	6812      	ldr	r2, [r2, #0]
 8014fee:	3b04      	subs	r3, #4
 8014ff0:	2a00      	cmp	r2, #0
 8014ff2:	d1cb      	bne.n	8014f8c <quorem+0x94>
 8014ff4:	3c01      	subs	r4, #1
 8014ff6:	e7c6      	b.n	8014f86 <quorem+0x8e>
 8014ff8:	6812      	ldr	r2, [r2, #0]
 8014ffa:	3b04      	subs	r3, #4
 8014ffc:	2a00      	cmp	r2, #0
 8014ffe:	d1ef      	bne.n	8014fe0 <quorem+0xe8>
 8015000:	3c01      	subs	r4, #1
 8015002:	e7ea      	b.n	8014fda <quorem+0xe2>
 8015004:	2000      	movs	r0, #0
 8015006:	e7ee      	b.n	8014fe6 <quorem+0xee>

08015008 <_dtoa_r>:
 8015008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500c:	69c7      	ldr	r7, [r0, #28]
 801500e:	b097      	sub	sp, #92	@ 0x5c
 8015010:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015014:	ec55 4b10 	vmov	r4, r5, d0
 8015018:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801501a:	9107      	str	r1, [sp, #28]
 801501c:	4681      	mov	r9, r0
 801501e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015020:	9311      	str	r3, [sp, #68]	@ 0x44
 8015022:	b97f      	cbnz	r7, 8015044 <_dtoa_r+0x3c>
 8015024:	2010      	movs	r0, #16
 8015026:	f001 f943 	bl	80162b0 <malloc>
 801502a:	4602      	mov	r2, r0
 801502c:	f8c9 001c 	str.w	r0, [r9, #28]
 8015030:	b920      	cbnz	r0, 801503c <_dtoa_r+0x34>
 8015032:	4ba9      	ldr	r3, [pc, #676]	@ (80152d8 <_dtoa_r+0x2d0>)
 8015034:	21ef      	movs	r1, #239	@ 0xef
 8015036:	48a9      	ldr	r0, [pc, #676]	@ (80152dc <_dtoa_r+0x2d4>)
 8015038:	f7ff ff40 	bl	8014ebc <__assert_func>
 801503c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015040:	6007      	str	r7, [r0, #0]
 8015042:	60c7      	str	r7, [r0, #12]
 8015044:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015048:	6819      	ldr	r1, [r3, #0]
 801504a:	b159      	cbz	r1, 8015064 <_dtoa_r+0x5c>
 801504c:	685a      	ldr	r2, [r3, #4]
 801504e:	604a      	str	r2, [r1, #4]
 8015050:	2301      	movs	r3, #1
 8015052:	4093      	lsls	r3, r2
 8015054:	608b      	str	r3, [r1, #8]
 8015056:	4648      	mov	r0, r9
 8015058:	f001 fa32 	bl	80164c0 <_Bfree>
 801505c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015060:	2200      	movs	r2, #0
 8015062:	601a      	str	r2, [r3, #0]
 8015064:	1e2b      	subs	r3, r5, #0
 8015066:	bfb9      	ittee	lt
 8015068:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801506c:	9305      	strlt	r3, [sp, #20]
 801506e:	2300      	movge	r3, #0
 8015070:	6033      	strge	r3, [r6, #0]
 8015072:	9f05      	ldr	r7, [sp, #20]
 8015074:	4b9a      	ldr	r3, [pc, #616]	@ (80152e0 <_dtoa_r+0x2d8>)
 8015076:	bfbc      	itt	lt
 8015078:	2201      	movlt	r2, #1
 801507a:	6032      	strlt	r2, [r6, #0]
 801507c:	43bb      	bics	r3, r7
 801507e:	d112      	bne.n	80150a6 <_dtoa_r+0x9e>
 8015080:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015082:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015086:	6013      	str	r3, [r2, #0]
 8015088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801508c:	4323      	orrs	r3, r4
 801508e:	f000 855a 	beq.w	8015b46 <_dtoa_r+0xb3e>
 8015092:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015094:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80152f4 <_dtoa_r+0x2ec>
 8015098:	2b00      	cmp	r3, #0
 801509a:	f000 855c 	beq.w	8015b56 <_dtoa_r+0xb4e>
 801509e:	f10a 0303 	add.w	r3, sl, #3
 80150a2:	f000 bd56 	b.w	8015b52 <_dtoa_r+0xb4a>
 80150a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80150aa:	2200      	movs	r2, #0
 80150ac:	ec51 0b17 	vmov	r0, r1, d7
 80150b0:	2300      	movs	r3, #0
 80150b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80150b6:	f7eb fd27 	bl	8000b08 <__aeabi_dcmpeq>
 80150ba:	4680      	mov	r8, r0
 80150bc:	b158      	cbz	r0, 80150d6 <_dtoa_r+0xce>
 80150be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80150c0:	2301      	movs	r3, #1
 80150c2:	6013      	str	r3, [r2, #0]
 80150c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80150c6:	b113      	cbz	r3, 80150ce <_dtoa_r+0xc6>
 80150c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80150ca:	4b86      	ldr	r3, [pc, #536]	@ (80152e4 <_dtoa_r+0x2dc>)
 80150cc:	6013      	str	r3, [r2, #0]
 80150ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80152f8 <_dtoa_r+0x2f0>
 80150d2:	f000 bd40 	b.w	8015b56 <_dtoa_r+0xb4e>
 80150d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80150da:	aa14      	add	r2, sp, #80	@ 0x50
 80150dc:	a915      	add	r1, sp, #84	@ 0x54
 80150de:	4648      	mov	r0, r9
 80150e0:	f001 fd8a 	bl	8016bf8 <__d2b>
 80150e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80150e8:	9002      	str	r0, [sp, #8]
 80150ea:	2e00      	cmp	r6, #0
 80150ec:	d078      	beq.n	80151e0 <_dtoa_r+0x1d8>
 80150ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80150f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80150f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80150f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80150fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015100:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015104:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015108:	4619      	mov	r1, r3
 801510a:	2200      	movs	r2, #0
 801510c:	4b76      	ldr	r3, [pc, #472]	@ (80152e8 <_dtoa_r+0x2e0>)
 801510e:	f7eb f8db 	bl	80002c8 <__aeabi_dsub>
 8015112:	a36b      	add	r3, pc, #428	@ (adr r3, 80152c0 <_dtoa_r+0x2b8>)
 8015114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015118:	f7eb fa8e 	bl	8000638 <__aeabi_dmul>
 801511c:	a36a      	add	r3, pc, #424	@ (adr r3, 80152c8 <_dtoa_r+0x2c0>)
 801511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015122:	f7eb f8d3 	bl	80002cc <__adddf3>
 8015126:	4604      	mov	r4, r0
 8015128:	4630      	mov	r0, r6
 801512a:	460d      	mov	r5, r1
 801512c:	f7eb fa1a 	bl	8000564 <__aeabi_i2d>
 8015130:	a367      	add	r3, pc, #412	@ (adr r3, 80152d0 <_dtoa_r+0x2c8>)
 8015132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015136:	f7eb fa7f 	bl	8000638 <__aeabi_dmul>
 801513a:	4602      	mov	r2, r0
 801513c:	460b      	mov	r3, r1
 801513e:	4620      	mov	r0, r4
 8015140:	4629      	mov	r1, r5
 8015142:	f7eb f8c3 	bl	80002cc <__adddf3>
 8015146:	4604      	mov	r4, r0
 8015148:	460d      	mov	r5, r1
 801514a:	f7eb fd25 	bl	8000b98 <__aeabi_d2iz>
 801514e:	2200      	movs	r2, #0
 8015150:	4607      	mov	r7, r0
 8015152:	2300      	movs	r3, #0
 8015154:	4620      	mov	r0, r4
 8015156:	4629      	mov	r1, r5
 8015158:	f7eb fce0 	bl	8000b1c <__aeabi_dcmplt>
 801515c:	b140      	cbz	r0, 8015170 <_dtoa_r+0x168>
 801515e:	4638      	mov	r0, r7
 8015160:	f7eb fa00 	bl	8000564 <__aeabi_i2d>
 8015164:	4622      	mov	r2, r4
 8015166:	462b      	mov	r3, r5
 8015168:	f7eb fcce 	bl	8000b08 <__aeabi_dcmpeq>
 801516c:	b900      	cbnz	r0, 8015170 <_dtoa_r+0x168>
 801516e:	3f01      	subs	r7, #1
 8015170:	2f16      	cmp	r7, #22
 8015172:	d852      	bhi.n	801521a <_dtoa_r+0x212>
 8015174:	4b5d      	ldr	r3, [pc, #372]	@ (80152ec <_dtoa_r+0x2e4>)
 8015176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015182:	f7eb fccb 	bl	8000b1c <__aeabi_dcmplt>
 8015186:	2800      	cmp	r0, #0
 8015188:	d049      	beq.n	801521e <_dtoa_r+0x216>
 801518a:	3f01      	subs	r7, #1
 801518c:	2300      	movs	r3, #0
 801518e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015190:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015192:	1b9b      	subs	r3, r3, r6
 8015194:	1e5a      	subs	r2, r3, #1
 8015196:	bf45      	ittet	mi
 8015198:	f1c3 0301 	rsbmi	r3, r3, #1
 801519c:	9300      	strmi	r3, [sp, #0]
 801519e:	2300      	movpl	r3, #0
 80151a0:	2300      	movmi	r3, #0
 80151a2:	9206      	str	r2, [sp, #24]
 80151a4:	bf54      	ite	pl
 80151a6:	9300      	strpl	r3, [sp, #0]
 80151a8:	9306      	strmi	r3, [sp, #24]
 80151aa:	2f00      	cmp	r7, #0
 80151ac:	db39      	blt.n	8015222 <_dtoa_r+0x21a>
 80151ae:	9b06      	ldr	r3, [sp, #24]
 80151b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80151b2:	443b      	add	r3, r7
 80151b4:	9306      	str	r3, [sp, #24]
 80151b6:	2300      	movs	r3, #0
 80151b8:	9308      	str	r3, [sp, #32]
 80151ba:	9b07      	ldr	r3, [sp, #28]
 80151bc:	2b09      	cmp	r3, #9
 80151be:	d863      	bhi.n	8015288 <_dtoa_r+0x280>
 80151c0:	2b05      	cmp	r3, #5
 80151c2:	bfc4      	itt	gt
 80151c4:	3b04      	subgt	r3, #4
 80151c6:	9307      	strgt	r3, [sp, #28]
 80151c8:	9b07      	ldr	r3, [sp, #28]
 80151ca:	f1a3 0302 	sub.w	r3, r3, #2
 80151ce:	bfcc      	ite	gt
 80151d0:	2400      	movgt	r4, #0
 80151d2:	2401      	movle	r4, #1
 80151d4:	2b03      	cmp	r3, #3
 80151d6:	d863      	bhi.n	80152a0 <_dtoa_r+0x298>
 80151d8:	e8df f003 	tbb	[pc, r3]
 80151dc:	2b375452 	.word	0x2b375452
 80151e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80151e4:	441e      	add	r6, r3
 80151e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80151ea:	2b20      	cmp	r3, #32
 80151ec:	bfc1      	itttt	gt
 80151ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80151f2:	409f      	lslgt	r7, r3
 80151f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80151f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80151fc:	bfd6      	itet	le
 80151fe:	f1c3 0320 	rsble	r3, r3, #32
 8015202:	ea47 0003 	orrgt.w	r0, r7, r3
 8015206:	fa04 f003 	lslle.w	r0, r4, r3
 801520a:	f7eb f99b 	bl	8000544 <__aeabi_ui2d>
 801520e:	2201      	movs	r2, #1
 8015210:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015214:	3e01      	subs	r6, #1
 8015216:	9212      	str	r2, [sp, #72]	@ 0x48
 8015218:	e776      	b.n	8015108 <_dtoa_r+0x100>
 801521a:	2301      	movs	r3, #1
 801521c:	e7b7      	b.n	801518e <_dtoa_r+0x186>
 801521e:	9010      	str	r0, [sp, #64]	@ 0x40
 8015220:	e7b6      	b.n	8015190 <_dtoa_r+0x188>
 8015222:	9b00      	ldr	r3, [sp, #0]
 8015224:	1bdb      	subs	r3, r3, r7
 8015226:	9300      	str	r3, [sp, #0]
 8015228:	427b      	negs	r3, r7
 801522a:	9308      	str	r3, [sp, #32]
 801522c:	2300      	movs	r3, #0
 801522e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015230:	e7c3      	b.n	80151ba <_dtoa_r+0x1b2>
 8015232:	2301      	movs	r3, #1
 8015234:	9309      	str	r3, [sp, #36]	@ 0x24
 8015236:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015238:	eb07 0b03 	add.w	fp, r7, r3
 801523c:	f10b 0301 	add.w	r3, fp, #1
 8015240:	2b01      	cmp	r3, #1
 8015242:	9303      	str	r3, [sp, #12]
 8015244:	bfb8      	it	lt
 8015246:	2301      	movlt	r3, #1
 8015248:	e006      	b.n	8015258 <_dtoa_r+0x250>
 801524a:	2301      	movs	r3, #1
 801524c:	9309      	str	r3, [sp, #36]	@ 0x24
 801524e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015250:	2b00      	cmp	r3, #0
 8015252:	dd28      	ble.n	80152a6 <_dtoa_r+0x29e>
 8015254:	469b      	mov	fp, r3
 8015256:	9303      	str	r3, [sp, #12]
 8015258:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801525c:	2100      	movs	r1, #0
 801525e:	2204      	movs	r2, #4
 8015260:	f102 0514 	add.w	r5, r2, #20
 8015264:	429d      	cmp	r5, r3
 8015266:	d926      	bls.n	80152b6 <_dtoa_r+0x2ae>
 8015268:	6041      	str	r1, [r0, #4]
 801526a:	4648      	mov	r0, r9
 801526c:	f001 f8e8 	bl	8016440 <_Balloc>
 8015270:	4682      	mov	sl, r0
 8015272:	2800      	cmp	r0, #0
 8015274:	d142      	bne.n	80152fc <_dtoa_r+0x2f4>
 8015276:	4b1e      	ldr	r3, [pc, #120]	@ (80152f0 <_dtoa_r+0x2e8>)
 8015278:	4602      	mov	r2, r0
 801527a:	f240 11af 	movw	r1, #431	@ 0x1af
 801527e:	e6da      	b.n	8015036 <_dtoa_r+0x2e>
 8015280:	2300      	movs	r3, #0
 8015282:	e7e3      	b.n	801524c <_dtoa_r+0x244>
 8015284:	2300      	movs	r3, #0
 8015286:	e7d5      	b.n	8015234 <_dtoa_r+0x22c>
 8015288:	2401      	movs	r4, #1
 801528a:	2300      	movs	r3, #0
 801528c:	9307      	str	r3, [sp, #28]
 801528e:	9409      	str	r4, [sp, #36]	@ 0x24
 8015290:	f04f 3bff 	mov.w	fp, #4294967295
 8015294:	2200      	movs	r2, #0
 8015296:	f8cd b00c 	str.w	fp, [sp, #12]
 801529a:	2312      	movs	r3, #18
 801529c:	920c      	str	r2, [sp, #48]	@ 0x30
 801529e:	e7db      	b.n	8015258 <_dtoa_r+0x250>
 80152a0:	2301      	movs	r3, #1
 80152a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80152a4:	e7f4      	b.n	8015290 <_dtoa_r+0x288>
 80152a6:	f04f 0b01 	mov.w	fp, #1
 80152aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80152ae:	465b      	mov	r3, fp
 80152b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80152b4:	e7d0      	b.n	8015258 <_dtoa_r+0x250>
 80152b6:	3101      	adds	r1, #1
 80152b8:	0052      	lsls	r2, r2, #1
 80152ba:	e7d1      	b.n	8015260 <_dtoa_r+0x258>
 80152bc:	f3af 8000 	nop.w
 80152c0:	636f4361 	.word	0x636f4361
 80152c4:	3fd287a7 	.word	0x3fd287a7
 80152c8:	8b60c8b3 	.word	0x8b60c8b3
 80152cc:	3fc68a28 	.word	0x3fc68a28
 80152d0:	509f79fb 	.word	0x509f79fb
 80152d4:	3fd34413 	.word	0x3fd34413
 80152d8:	08017af6 	.word	0x08017af6
 80152dc:	08017bb8 	.word	0x08017bb8
 80152e0:	7ff00000 	.word	0x7ff00000
 80152e4:	08017ad3 	.word	0x08017ad3
 80152e8:	3ff80000 	.word	0x3ff80000
 80152ec:	08017e78 	.word	0x08017e78
 80152f0:	08017c10 	.word	0x08017c10
 80152f4:	08017bb4 	.word	0x08017bb4
 80152f8:	08017ad2 	.word	0x08017ad2
 80152fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015300:	6018      	str	r0, [r3, #0]
 8015302:	9b03      	ldr	r3, [sp, #12]
 8015304:	2b0e      	cmp	r3, #14
 8015306:	f200 80a1 	bhi.w	801544c <_dtoa_r+0x444>
 801530a:	2c00      	cmp	r4, #0
 801530c:	f000 809e 	beq.w	801544c <_dtoa_r+0x444>
 8015310:	2f00      	cmp	r7, #0
 8015312:	dd33      	ble.n	801537c <_dtoa_r+0x374>
 8015314:	4b9c      	ldr	r3, [pc, #624]	@ (8015588 <_dtoa_r+0x580>)
 8015316:	f007 020f 	and.w	r2, r7, #15
 801531a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801531e:	ed93 7b00 	vldr	d7, [r3]
 8015322:	05f8      	lsls	r0, r7, #23
 8015324:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015328:	ea4f 1427 	mov.w	r4, r7, asr #4
 801532c:	d516      	bpl.n	801535c <_dtoa_r+0x354>
 801532e:	4b97      	ldr	r3, [pc, #604]	@ (801558c <_dtoa_r+0x584>)
 8015330:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015338:	f7eb faa8 	bl	800088c <__aeabi_ddiv>
 801533c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015340:	f004 040f 	and.w	r4, r4, #15
 8015344:	2603      	movs	r6, #3
 8015346:	4d91      	ldr	r5, [pc, #580]	@ (801558c <_dtoa_r+0x584>)
 8015348:	b954      	cbnz	r4, 8015360 <_dtoa_r+0x358>
 801534a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801534e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015352:	f7eb fa9b 	bl	800088c <__aeabi_ddiv>
 8015356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801535a:	e028      	b.n	80153ae <_dtoa_r+0x3a6>
 801535c:	2602      	movs	r6, #2
 801535e:	e7f2      	b.n	8015346 <_dtoa_r+0x33e>
 8015360:	07e1      	lsls	r1, r4, #31
 8015362:	d508      	bpl.n	8015376 <_dtoa_r+0x36e>
 8015364:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015368:	e9d5 2300 	ldrd	r2, r3, [r5]
 801536c:	f7eb f964 	bl	8000638 <__aeabi_dmul>
 8015370:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015374:	3601      	adds	r6, #1
 8015376:	1064      	asrs	r4, r4, #1
 8015378:	3508      	adds	r5, #8
 801537a:	e7e5      	b.n	8015348 <_dtoa_r+0x340>
 801537c:	f000 80af 	beq.w	80154de <_dtoa_r+0x4d6>
 8015380:	427c      	negs	r4, r7
 8015382:	4b81      	ldr	r3, [pc, #516]	@ (8015588 <_dtoa_r+0x580>)
 8015384:	4d81      	ldr	r5, [pc, #516]	@ (801558c <_dtoa_r+0x584>)
 8015386:	f004 020f 	and.w	r2, r4, #15
 801538a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015396:	f7eb f94f 	bl	8000638 <__aeabi_dmul>
 801539a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801539e:	1124      	asrs	r4, r4, #4
 80153a0:	2300      	movs	r3, #0
 80153a2:	2602      	movs	r6, #2
 80153a4:	2c00      	cmp	r4, #0
 80153a6:	f040 808f 	bne.w	80154c8 <_dtoa_r+0x4c0>
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d1d3      	bne.n	8015356 <_dtoa_r+0x34e>
 80153ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80153b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f000 8094 	beq.w	80154e2 <_dtoa_r+0x4da>
 80153ba:	4b75      	ldr	r3, [pc, #468]	@ (8015590 <_dtoa_r+0x588>)
 80153bc:	2200      	movs	r2, #0
 80153be:	4620      	mov	r0, r4
 80153c0:	4629      	mov	r1, r5
 80153c2:	f7eb fbab 	bl	8000b1c <__aeabi_dcmplt>
 80153c6:	2800      	cmp	r0, #0
 80153c8:	f000 808b 	beq.w	80154e2 <_dtoa_r+0x4da>
 80153cc:	9b03      	ldr	r3, [sp, #12]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	f000 8087 	beq.w	80154e2 <_dtoa_r+0x4da>
 80153d4:	f1bb 0f00 	cmp.w	fp, #0
 80153d8:	dd34      	ble.n	8015444 <_dtoa_r+0x43c>
 80153da:	4620      	mov	r0, r4
 80153dc:	4b6d      	ldr	r3, [pc, #436]	@ (8015594 <_dtoa_r+0x58c>)
 80153de:	2200      	movs	r2, #0
 80153e0:	4629      	mov	r1, r5
 80153e2:	f7eb f929 	bl	8000638 <__aeabi_dmul>
 80153e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80153ee:	3601      	adds	r6, #1
 80153f0:	465c      	mov	r4, fp
 80153f2:	4630      	mov	r0, r6
 80153f4:	f7eb f8b6 	bl	8000564 <__aeabi_i2d>
 80153f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153fc:	f7eb f91c 	bl	8000638 <__aeabi_dmul>
 8015400:	4b65      	ldr	r3, [pc, #404]	@ (8015598 <_dtoa_r+0x590>)
 8015402:	2200      	movs	r2, #0
 8015404:	f7ea ff62 	bl	80002cc <__adddf3>
 8015408:	4605      	mov	r5, r0
 801540a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801540e:	2c00      	cmp	r4, #0
 8015410:	d16a      	bne.n	80154e8 <_dtoa_r+0x4e0>
 8015412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015416:	4b61      	ldr	r3, [pc, #388]	@ (801559c <_dtoa_r+0x594>)
 8015418:	2200      	movs	r2, #0
 801541a:	f7ea ff55 	bl	80002c8 <__aeabi_dsub>
 801541e:	4602      	mov	r2, r0
 8015420:	460b      	mov	r3, r1
 8015422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015426:	462a      	mov	r2, r5
 8015428:	4633      	mov	r3, r6
 801542a:	f7eb fb95 	bl	8000b58 <__aeabi_dcmpgt>
 801542e:	2800      	cmp	r0, #0
 8015430:	f040 8298 	bne.w	8015964 <_dtoa_r+0x95c>
 8015434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015438:	462a      	mov	r2, r5
 801543a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801543e:	f7eb fb6d 	bl	8000b1c <__aeabi_dcmplt>
 8015442:	bb38      	cbnz	r0, 8015494 <_dtoa_r+0x48c>
 8015444:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8015448:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801544c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801544e:	2b00      	cmp	r3, #0
 8015450:	f2c0 8157 	blt.w	8015702 <_dtoa_r+0x6fa>
 8015454:	2f0e      	cmp	r7, #14
 8015456:	f300 8154 	bgt.w	8015702 <_dtoa_r+0x6fa>
 801545a:	4b4b      	ldr	r3, [pc, #300]	@ (8015588 <_dtoa_r+0x580>)
 801545c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015460:	ed93 7b00 	vldr	d7, [r3]
 8015464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015466:	2b00      	cmp	r3, #0
 8015468:	ed8d 7b00 	vstr	d7, [sp]
 801546c:	f280 80e5 	bge.w	801563a <_dtoa_r+0x632>
 8015470:	9b03      	ldr	r3, [sp, #12]
 8015472:	2b00      	cmp	r3, #0
 8015474:	f300 80e1 	bgt.w	801563a <_dtoa_r+0x632>
 8015478:	d10c      	bne.n	8015494 <_dtoa_r+0x48c>
 801547a:	4b48      	ldr	r3, [pc, #288]	@ (801559c <_dtoa_r+0x594>)
 801547c:	2200      	movs	r2, #0
 801547e:	ec51 0b17 	vmov	r0, r1, d7
 8015482:	f7eb f8d9 	bl	8000638 <__aeabi_dmul>
 8015486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801548a:	f7eb fb5b 	bl	8000b44 <__aeabi_dcmpge>
 801548e:	2800      	cmp	r0, #0
 8015490:	f000 8266 	beq.w	8015960 <_dtoa_r+0x958>
 8015494:	2400      	movs	r4, #0
 8015496:	4625      	mov	r5, r4
 8015498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801549a:	4656      	mov	r6, sl
 801549c:	ea6f 0803 	mvn.w	r8, r3
 80154a0:	2700      	movs	r7, #0
 80154a2:	4621      	mov	r1, r4
 80154a4:	4648      	mov	r0, r9
 80154a6:	f001 f80b 	bl	80164c0 <_Bfree>
 80154aa:	2d00      	cmp	r5, #0
 80154ac:	f000 80bd 	beq.w	801562a <_dtoa_r+0x622>
 80154b0:	b12f      	cbz	r7, 80154be <_dtoa_r+0x4b6>
 80154b2:	42af      	cmp	r7, r5
 80154b4:	d003      	beq.n	80154be <_dtoa_r+0x4b6>
 80154b6:	4639      	mov	r1, r7
 80154b8:	4648      	mov	r0, r9
 80154ba:	f001 f801 	bl	80164c0 <_Bfree>
 80154be:	4629      	mov	r1, r5
 80154c0:	4648      	mov	r0, r9
 80154c2:	f000 fffd 	bl	80164c0 <_Bfree>
 80154c6:	e0b0      	b.n	801562a <_dtoa_r+0x622>
 80154c8:	07e2      	lsls	r2, r4, #31
 80154ca:	d505      	bpl.n	80154d8 <_dtoa_r+0x4d0>
 80154cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154d0:	f7eb f8b2 	bl	8000638 <__aeabi_dmul>
 80154d4:	3601      	adds	r6, #1
 80154d6:	2301      	movs	r3, #1
 80154d8:	1064      	asrs	r4, r4, #1
 80154da:	3508      	adds	r5, #8
 80154dc:	e762      	b.n	80153a4 <_dtoa_r+0x39c>
 80154de:	2602      	movs	r6, #2
 80154e0:	e765      	b.n	80153ae <_dtoa_r+0x3a6>
 80154e2:	9c03      	ldr	r4, [sp, #12]
 80154e4:	46b8      	mov	r8, r7
 80154e6:	e784      	b.n	80153f2 <_dtoa_r+0x3ea>
 80154e8:	4b27      	ldr	r3, [pc, #156]	@ (8015588 <_dtoa_r+0x580>)
 80154ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80154ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80154f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80154f4:	4454      	add	r4, sl
 80154f6:	2900      	cmp	r1, #0
 80154f8:	d054      	beq.n	80155a4 <_dtoa_r+0x59c>
 80154fa:	4929      	ldr	r1, [pc, #164]	@ (80155a0 <_dtoa_r+0x598>)
 80154fc:	2000      	movs	r0, #0
 80154fe:	f7eb f9c5 	bl	800088c <__aeabi_ddiv>
 8015502:	4633      	mov	r3, r6
 8015504:	462a      	mov	r2, r5
 8015506:	f7ea fedf 	bl	80002c8 <__aeabi_dsub>
 801550a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801550e:	4656      	mov	r6, sl
 8015510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015514:	f7eb fb40 	bl	8000b98 <__aeabi_d2iz>
 8015518:	4605      	mov	r5, r0
 801551a:	f7eb f823 	bl	8000564 <__aeabi_i2d>
 801551e:	4602      	mov	r2, r0
 8015520:	460b      	mov	r3, r1
 8015522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015526:	f7ea fecf 	bl	80002c8 <__aeabi_dsub>
 801552a:	3530      	adds	r5, #48	@ 0x30
 801552c:	4602      	mov	r2, r0
 801552e:	460b      	mov	r3, r1
 8015530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015534:	f806 5b01 	strb.w	r5, [r6], #1
 8015538:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801553c:	f7eb faee 	bl	8000b1c <__aeabi_dcmplt>
 8015540:	2800      	cmp	r0, #0
 8015542:	d172      	bne.n	801562a <_dtoa_r+0x622>
 8015544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015548:	4911      	ldr	r1, [pc, #68]	@ (8015590 <_dtoa_r+0x588>)
 801554a:	2000      	movs	r0, #0
 801554c:	f7ea febc 	bl	80002c8 <__aeabi_dsub>
 8015550:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015554:	f7eb fae2 	bl	8000b1c <__aeabi_dcmplt>
 8015558:	2800      	cmp	r0, #0
 801555a:	f040 80b4 	bne.w	80156c6 <_dtoa_r+0x6be>
 801555e:	42a6      	cmp	r6, r4
 8015560:	f43f af70 	beq.w	8015444 <_dtoa_r+0x43c>
 8015564:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015568:	4b0a      	ldr	r3, [pc, #40]	@ (8015594 <_dtoa_r+0x58c>)
 801556a:	2200      	movs	r2, #0
 801556c:	f7eb f864 	bl	8000638 <__aeabi_dmul>
 8015570:	4b08      	ldr	r3, [pc, #32]	@ (8015594 <_dtoa_r+0x58c>)
 8015572:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015576:	2200      	movs	r2, #0
 8015578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801557c:	f7eb f85c 	bl	8000638 <__aeabi_dmul>
 8015580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015584:	e7c4      	b.n	8015510 <_dtoa_r+0x508>
 8015586:	bf00      	nop
 8015588:	08017e78 	.word	0x08017e78
 801558c:	08017e50 	.word	0x08017e50
 8015590:	3ff00000 	.word	0x3ff00000
 8015594:	40240000 	.word	0x40240000
 8015598:	401c0000 	.word	0x401c0000
 801559c:	40140000 	.word	0x40140000
 80155a0:	3fe00000 	.word	0x3fe00000
 80155a4:	4631      	mov	r1, r6
 80155a6:	4628      	mov	r0, r5
 80155a8:	f7eb f846 	bl	8000638 <__aeabi_dmul>
 80155ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80155b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80155b2:	4656      	mov	r6, sl
 80155b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80155b8:	f7eb faee 	bl	8000b98 <__aeabi_d2iz>
 80155bc:	4605      	mov	r5, r0
 80155be:	f7ea ffd1 	bl	8000564 <__aeabi_i2d>
 80155c2:	4602      	mov	r2, r0
 80155c4:	460b      	mov	r3, r1
 80155c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80155ca:	f7ea fe7d 	bl	80002c8 <__aeabi_dsub>
 80155ce:	3530      	adds	r5, #48	@ 0x30
 80155d0:	f806 5b01 	strb.w	r5, [r6], #1
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	42a6      	cmp	r6, r4
 80155da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80155de:	f04f 0200 	mov.w	r2, #0
 80155e2:	d124      	bne.n	801562e <_dtoa_r+0x626>
 80155e4:	4baf      	ldr	r3, [pc, #700]	@ (80158a4 <_dtoa_r+0x89c>)
 80155e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80155ea:	f7ea fe6f 	bl	80002cc <__adddf3>
 80155ee:	4602      	mov	r2, r0
 80155f0:	460b      	mov	r3, r1
 80155f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80155f6:	f7eb faaf 	bl	8000b58 <__aeabi_dcmpgt>
 80155fa:	2800      	cmp	r0, #0
 80155fc:	d163      	bne.n	80156c6 <_dtoa_r+0x6be>
 80155fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015602:	49a8      	ldr	r1, [pc, #672]	@ (80158a4 <_dtoa_r+0x89c>)
 8015604:	2000      	movs	r0, #0
 8015606:	f7ea fe5f 	bl	80002c8 <__aeabi_dsub>
 801560a:	4602      	mov	r2, r0
 801560c:	460b      	mov	r3, r1
 801560e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015612:	f7eb fa83 	bl	8000b1c <__aeabi_dcmplt>
 8015616:	2800      	cmp	r0, #0
 8015618:	f43f af14 	beq.w	8015444 <_dtoa_r+0x43c>
 801561c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801561e:	1e73      	subs	r3, r6, #1
 8015620:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015622:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015626:	2b30      	cmp	r3, #48	@ 0x30
 8015628:	d0f8      	beq.n	801561c <_dtoa_r+0x614>
 801562a:	4647      	mov	r7, r8
 801562c:	e03b      	b.n	80156a6 <_dtoa_r+0x69e>
 801562e:	4b9e      	ldr	r3, [pc, #632]	@ (80158a8 <_dtoa_r+0x8a0>)
 8015630:	f7eb f802 	bl	8000638 <__aeabi_dmul>
 8015634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015638:	e7bc      	b.n	80155b4 <_dtoa_r+0x5ac>
 801563a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801563e:	4656      	mov	r6, sl
 8015640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015644:	4620      	mov	r0, r4
 8015646:	4629      	mov	r1, r5
 8015648:	f7eb f920 	bl	800088c <__aeabi_ddiv>
 801564c:	f7eb faa4 	bl	8000b98 <__aeabi_d2iz>
 8015650:	4680      	mov	r8, r0
 8015652:	f7ea ff87 	bl	8000564 <__aeabi_i2d>
 8015656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801565a:	f7ea ffed 	bl	8000638 <__aeabi_dmul>
 801565e:	4602      	mov	r2, r0
 8015660:	460b      	mov	r3, r1
 8015662:	4620      	mov	r0, r4
 8015664:	4629      	mov	r1, r5
 8015666:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801566a:	f7ea fe2d 	bl	80002c8 <__aeabi_dsub>
 801566e:	f806 4b01 	strb.w	r4, [r6], #1
 8015672:	9d03      	ldr	r5, [sp, #12]
 8015674:	eba6 040a 	sub.w	r4, r6, sl
 8015678:	42a5      	cmp	r5, r4
 801567a:	4602      	mov	r2, r0
 801567c:	460b      	mov	r3, r1
 801567e:	d133      	bne.n	80156e8 <_dtoa_r+0x6e0>
 8015680:	f7ea fe24 	bl	80002cc <__adddf3>
 8015684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015688:	4604      	mov	r4, r0
 801568a:	460d      	mov	r5, r1
 801568c:	f7eb fa64 	bl	8000b58 <__aeabi_dcmpgt>
 8015690:	b9c0      	cbnz	r0, 80156c4 <_dtoa_r+0x6bc>
 8015692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015696:	4620      	mov	r0, r4
 8015698:	4629      	mov	r1, r5
 801569a:	f7eb fa35 	bl	8000b08 <__aeabi_dcmpeq>
 801569e:	b110      	cbz	r0, 80156a6 <_dtoa_r+0x69e>
 80156a0:	f018 0f01 	tst.w	r8, #1
 80156a4:	d10e      	bne.n	80156c4 <_dtoa_r+0x6bc>
 80156a6:	9902      	ldr	r1, [sp, #8]
 80156a8:	4648      	mov	r0, r9
 80156aa:	f000 ff09 	bl	80164c0 <_Bfree>
 80156ae:	2300      	movs	r3, #0
 80156b0:	7033      	strb	r3, [r6, #0]
 80156b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80156b4:	3701      	adds	r7, #1
 80156b6:	601f      	str	r7, [r3, #0]
 80156b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f000 824b 	beq.w	8015b56 <_dtoa_r+0xb4e>
 80156c0:	601e      	str	r6, [r3, #0]
 80156c2:	e248      	b.n	8015b56 <_dtoa_r+0xb4e>
 80156c4:	46b8      	mov	r8, r7
 80156c6:	4633      	mov	r3, r6
 80156c8:	461e      	mov	r6, r3
 80156ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80156ce:	2a39      	cmp	r2, #57	@ 0x39
 80156d0:	d106      	bne.n	80156e0 <_dtoa_r+0x6d8>
 80156d2:	459a      	cmp	sl, r3
 80156d4:	d1f8      	bne.n	80156c8 <_dtoa_r+0x6c0>
 80156d6:	2230      	movs	r2, #48	@ 0x30
 80156d8:	f108 0801 	add.w	r8, r8, #1
 80156dc:	f88a 2000 	strb.w	r2, [sl]
 80156e0:	781a      	ldrb	r2, [r3, #0]
 80156e2:	3201      	adds	r2, #1
 80156e4:	701a      	strb	r2, [r3, #0]
 80156e6:	e7a0      	b.n	801562a <_dtoa_r+0x622>
 80156e8:	4b6f      	ldr	r3, [pc, #444]	@ (80158a8 <_dtoa_r+0x8a0>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	f7ea ffa4 	bl	8000638 <__aeabi_dmul>
 80156f0:	2200      	movs	r2, #0
 80156f2:	2300      	movs	r3, #0
 80156f4:	4604      	mov	r4, r0
 80156f6:	460d      	mov	r5, r1
 80156f8:	f7eb fa06 	bl	8000b08 <__aeabi_dcmpeq>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d09f      	beq.n	8015640 <_dtoa_r+0x638>
 8015700:	e7d1      	b.n	80156a6 <_dtoa_r+0x69e>
 8015702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015704:	2a00      	cmp	r2, #0
 8015706:	f000 80ea 	beq.w	80158de <_dtoa_r+0x8d6>
 801570a:	9a07      	ldr	r2, [sp, #28]
 801570c:	2a01      	cmp	r2, #1
 801570e:	f300 80cd 	bgt.w	80158ac <_dtoa_r+0x8a4>
 8015712:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015714:	2a00      	cmp	r2, #0
 8015716:	f000 80c1 	beq.w	801589c <_dtoa_r+0x894>
 801571a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801571e:	9c08      	ldr	r4, [sp, #32]
 8015720:	9e00      	ldr	r6, [sp, #0]
 8015722:	9a00      	ldr	r2, [sp, #0]
 8015724:	441a      	add	r2, r3
 8015726:	9200      	str	r2, [sp, #0]
 8015728:	9a06      	ldr	r2, [sp, #24]
 801572a:	2101      	movs	r1, #1
 801572c:	441a      	add	r2, r3
 801572e:	4648      	mov	r0, r9
 8015730:	9206      	str	r2, [sp, #24]
 8015732:	f000 ffc3 	bl	80166bc <__i2b>
 8015736:	4605      	mov	r5, r0
 8015738:	b166      	cbz	r6, 8015754 <_dtoa_r+0x74c>
 801573a:	9b06      	ldr	r3, [sp, #24]
 801573c:	2b00      	cmp	r3, #0
 801573e:	dd09      	ble.n	8015754 <_dtoa_r+0x74c>
 8015740:	42b3      	cmp	r3, r6
 8015742:	9a00      	ldr	r2, [sp, #0]
 8015744:	bfa8      	it	ge
 8015746:	4633      	movge	r3, r6
 8015748:	1ad2      	subs	r2, r2, r3
 801574a:	9200      	str	r2, [sp, #0]
 801574c:	9a06      	ldr	r2, [sp, #24]
 801574e:	1af6      	subs	r6, r6, r3
 8015750:	1ad3      	subs	r3, r2, r3
 8015752:	9306      	str	r3, [sp, #24]
 8015754:	9b08      	ldr	r3, [sp, #32]
 8015756:	b30b      	cbz	r3, 801579c <_dtoa_r+0x794>
 8015758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801575a:	2b00      	cmp	r3, #0
 801575c:	f000 80c6 	beq.w	80158ec <_dtoa_r+0x8e4>
 8015760:	2c00      	cmp	r4, #0
 8015762:	f000 80c0 	beq.w	80158e6 <_dtoa_r+0x8de>
 8015766:	4629      	mov	r1, r5
 8015768:	4622      	mov	r2, r4
 801576a:	4648      	mov	r0, r9
 801576c:	f001 f85e 	bl	801682c <__pow5mult>
 8015770:	9a02      	ldr	r2, [sp, #8]
 8015772:	4601      	mov	r1, r0
 8015774:	4605      	mov	r5, r0
 8015776:	4648      	mov	r0, r9
 8015778:	f000 ffb6 	bl	80166e8 <__multiply>
 801577c:	9902      	ldr	r1, [sp, #8]
 801577e:	4680      	mov	r8, r0
 8015780:	4648      	mov	r0, r9
 8015782:	f000 fe9d 	bl	80164c0 <_Bfree>
 8015786:	9b08      	ldr	r3, [sp, #32]
 8015788:	1b1b      	subs	r3, r3, r4
 801578a:	9308      	str	r3, [sp, #32]
 801578c:	f000 80b1 	beq.w	80158f2 <_dtoa_r+0x8ea>
 8015790:	9a08      	ldr	r2, [sp, #32]
 8015792:	4641      	mov	r1, r8
 8015794:	4648      	mov	r0, r9
 8015796:	f001 f849 	bl	801682c <__pow5mult>
 801579a:	9002      	str	r0, [sp, #8]
 801579c:	2101      	movs	r1, #1
 801579e:	4648      	mov	r0, r9
 80157a0:	f000 ff8c 	bl	80166bc <__i2b>
 80157a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80157a6:	4604      	mov	r4, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f000 81d8 	beq.w	8015b5e <_dtoa_r+0xb56>
 80157ae:	461a      	mov	r2, r3
 80157b0:	4601      	mov	r1, r0
 80157b2:	4648      	mov	r0, r9
 80157b4:	f001 f83a 	bl	801682c <__pow5mult>
 80157b8:	9b07      	ldr	r3, [sp, #28]
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	4604      	mov	r4, r0
 80157be:	f300 809f 	bgt.w	8015900 <_dtoa_r+0x8f8>
 80157c2:	9b04      	ldr	r3, [sp, #16]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f040 8097 	bne.w	80158f8 <_dtoa_r+0x8f0>
 80157ca:	9b05      	ldr	r3, [sp, #20]
 80157cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	f040 8093 	bne.w	80158fc <_dtoa_r+0x8f4>
 80157d6:	9b05      	ldr	r3, [sp, #20]
 80157d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80157dc:	0d1b      	lsrs	r3, r3, #20
 80157de:	051b      	lsls	r3, r3, #20
 80157e0:	b133      	cbz	r3, 80157f0 <_dtoa_r+0x7e8>
 80157e2:	9b00      	ldr	r3, [sp, #0]
 80157e4:	3301      	adds	r3, #1
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	9b06      	ldr	r3, [sp, #24]
 80157ea:	3301      	adds	r3, #1
 80157ec:	9306      	str	r3, [sp, #24]
 80157ee:	2301      	movs	r3, #1
 80157f0:	9308      	str	r3, [sp, #32]
 80157f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 81b8 	beq.w	8015b6a <_dtoa_r+0xb62>
 80157fa:	6923      	ldr	r3, [r4, #16]
 80157fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015800:	6918      	ldr	r0, [r3, #16]
 8015802:	f000 ff0f 	bl	8016624 <__hi0bits>
 8015806:	f1c0 0020 	rsb	r0, r0, #32
 801580a:	9b06      	ldr	r3, [sp, #24]
 801580c:	4418      	add	r0, r3
 801580e:	f010 001f 	ands.w	r0, r0, #31
 8015812:	f000 8082 	beq.w	801591a <_dtoa_r+0x912>
 8015816:	f1c0 0320 	rsb	r3, r0, #32
 801581a:	2b04      	cmp	r3, #4
 801581c:	dd73      	ble.n	8015906 <_dtoa_r+0x8fe>
 801581e:	9b00      	ldr	r3, [sp, #0]
 8015820:	f1c0 001c 	rsb	r0, r0, #28
 8015824:	4403      	add	r3, r0
 8015826:	9300      	str	r3, [sp, #0]
 8015828:	9b06      	ldr	r3, [sp, #24]
 801582a:	4403      	add	r3, r0
 801582c:	4406      	add	r6, r0
 801582e:	9306      	str	r3, [sp, #24]
 8015830:	9b00      	ldr	r3, [sp, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	dd05      	ble.n	8015842 <_dtoa_r+0x83a>
 8015836:	9902      	ldr	r1, [sp, #8]
 8015838:	461a      	mov	r2, r3
 801583a:	4648      	mov	r0, r9
 801583c:	f001 f850 	bl	80168e0 <__lshift>
 8015840:	9002      	str	r0, [sp, #8]
 8015842:	9b06      	ldr	r3, [sp, #24]
 8015844:	2b00      	cmp	r3, #0
 8015846:	dd05      	ble.n	8015854 <_dtoa_r+0x84c>
 8015848:	4621      	mov	r1, r4
 801584a:	461a      	mov	r2, r3
 801584c:	4648      	mov	r0, r9
 801584e:	f001 f847 	bl	80168e0 <__lshift>
 8015852:	4604      	mov	r4, r0
 8015854:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015856:	2b00      	cmp	r3, #0
 8015858:	d061      	beq.n	801591e <_dtoa_r+0x916>
 801585a:	9802      	ldr	r0, [sp, #8]
 801585c:	4621      	mov	r1, r4
 801585e:	f001 f8ab 	bl	80169b8 <__mcmp>
 8015862:	2800      	cmp	r0, #0
 8015864:	da5b      	bge.n	801591e <_dtoa_r+0x916>
 8015866:	2300      	movs	r3, #0
 8015868:	9902      	ldr	r1, [sp, #8]
 801586a:	220a      	movs	r2, #10
 801586c:	4648      	mov	r0, r9
 801586e:	f000 fe49 	bl	8016504 <__multadd>
 8015872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015874:	9002      	str	r0, [sp, #8]
 8015876:	f107 38ff 	add.w	r8, r7, #4294967295
 801587a:	2b00      	cmp	r3, #0
 801587c:	f000 8177 	beq.w	8015b6e <_dtoa_r+0xb66>
 8015880:	4629      	mov	r1, r5
 8015882:	2300      	movs	r3, #0
 8015884:	220a      	movs	r2, #10
 8015886:	4648      	mov	r0, r9
 8015888:	f000 fe3c 	bl	8016504 <__multadd>
 801588c:	f1bb 0f00 	cmp.w	fp, #0
 8015890:	4605      	mov	r5, r0
 8015892:	dc6f      	bgt.n	8015974 <_dtoa_r+0x96c>
 8015894:	9b07      	ldr	r3, [sp, #28]
 8015896:	2b02      	cmp	r3, #2
 8015898:	dc49      	bgt.n	801592e <_dtoa_r+0x926>
 801589a:	e06b      	b.n	8015974 <_dtoa_r+0x96c>
 801589c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801589e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80158a2:	e73c      	b.n	801571e <_dtoa_r+0x716>
 80158a4:	3fe00000 	.word	0x3fe00000
 80158a8:	40240000 	.word	0x40240000
 80158ac:	9b03      	ldr	r3, [sp, #12]
 80158ae:	1e5c      	subs	r4, r3, #1
 80158b0:	9b08      	ldr	r3, [sp, #32]
 80158b2:	42a3      	cmp	r3, r4
 80158b4:	db09      	blt.n	80158ca <_dtoa_r+0x8c2>
 80158b6:	1b1c      	subs	r4, r3, r4
 80158b8:	9b03      	ldr	r3, [sp, #12]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	f6bf af30 	bge.w	8015720 <_dtoa_r+0x718>
 80158c0:	9b00      	ldr	r3, [sp, #0]
 80158c2:	9a03      	ldr	r2, [sp, #12]
 80158c4:	1a9e      	subs	r6, r3, r2
 80158c6:	2300      	movs	r3, #0
 80158c8:	e72b      	b.n	8015722 <_dtoa_r+0x71a>
 80158ca:	9b08      	ldr	r3, [sp, #32]
 80158cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80158ce:	9408      	str	r4, [sp, #32]
 80158d0:	1ae3      	subs	r3, r4, r3
 80158d2:	441a      	add	r2, r3
 80158d4:	9e00      	ldr	r6, [sp, #0]
 80158d6:	9b03      	ldr	r3, [sp, #12]
 80158d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80158da:	2400      	movs	r4, #0
 80158dc:	e721      	b.n	8015722 <_dtoa_r+0x71a>
 80158de:	9c08      	ldr	r4, [sp, #32]
 80158e0:	9e00      	ldr	r6, [sp, #0]
 80158e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80158e4:	e728      	b.n	8015738 <_dtoa_r+0x730>
 80158e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80158ea:	e751      	b.n	8015790 <_dtoa_r+0x788>
 80158ec:	9a08      	ldr	r2, [sp, #32]
 80158ee:	9902      	ldr	r1, [sp, #8]
 80158f0:	e750      	b.n	8015794 <_dtoa_r+0x78c>
 80158f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80158f6:	e751      	b.n	801579c <_dtoa_r+0x794>
 80158f8:	2300      	movs	r3, #0
 80158fa:	e779      	b.n	80157f0 <_dtoa_r+0x7e8>
 80158fc:	9b04      	ldr	r3, [sp, #16]
 80158fe:	e777      	b.n	80157f0 <_dtoa_r+0x7e8>
 8015900:	2300      	movs	r3, #0
 8015902:	9308      	str	r3, [sp, #32]
 8015904:	e779      	b.n	80157fa <_dtoa_r+0x7f2>
 8015906:	d093      	beq.n	8015830 <_dtoa_r+0x828>
 8015908:	9a00      	ldr	r2, [sp, #0]
 801590a:	331c      	adds	r3, #28
 801590c:	441a      	add	r2, r3
 801590e:	9200      	str	r2, [sp, #0]
 8015910:	9a06      	ldr	r2, [sp, #24]
 8015912:	441a      	add	r2, r3
 8015914:	441e      	add	r6, r3
 8015916:	9206      	str	r2, [sp, #24]
 8015918:	e78a      	b.n	8015830 <_dtoa_r+0x828>
 801591a:	4603      	mov	r3, r0
 801591c:	e7f4      	b.n	8015908 <_dtoa_r+0x900>
 801591e:	9b03      	ldr	r3, [sp, #12]
 8015920:	2b00      	cmp	r3, #0
 8015922:	46b8      	mov	r8, r7
 8015924:	dc20      	bgt.n	8015968 <_dtoa_r+0x960>
 8015926:	469b      	mov	fp, r3
 8015928:	9b07      	ldr	r3, [sp, #28]
 801592a:	2b02      	cmp	r3, #2
 801592c:	dd1e      	ble.n	801596c <_dtoa_r+0x964>
 801592e:	f1bb 0f00 	cmp.w	fp, #0
 8015932:	f47f adb1 	bne.w	8015498 <_dtoa_r+0x490>
 8015936:	4621      	mov	r1, r4
 8015938:	465b      	mov	r3, fp
 801593a:	2205      	movs	r2, #5
 801593c:	4648      	mov	r0, r9
 801593e:	f000 fde1 	bl	8016504 <__multadd>
 8015942:	4601      	mov	r1, r0
 8015944:	4604      	mov	r4, r0
 8015946:	9802      	ldr	r0, [sp, #8]
 8015948:	f001 f836 	bl	80169b8 <__mcmp>
 801594c:	2800      	cmp	r0, #0
 801594e:	f77f ada3 	ble.w	8015498 <_dtoa_r+0x490>
 8015952:	4656      	mov	r6, sl
 8015954:	2331      	movs	r3, #49	@ 0x31
 8015956:	f806 3b01 	strb.w	r3, [r6], #1
 801595a:	f108 0801 	add.w	r8, r8, #1
 801595e:	e59f      	b.n	80154a0 <_dtoa_r+0x498>
 8015960:	9c03      	ldr	r4, [sp, #12]
 8015962:	46b8      	mov	r8, r7
 8015964:	4625      	mov	r5, r4
 8015966:	e7f4      	b.n	8015952 <_dtoa_r+0x94a>
 8015968:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801596c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801596e:	2b00      	cmp	r3, #0
 8015970:	f000 8101 	beq.w	8015b76 <_dtoa_r+0xb6e>
 8015974:	2e00      	cmp	r6, #0
 8015976:	dd05      	ble.n	8015984 <_dtoa_r+0x97c>
 8015978:	4629      	mov	r1, r5
 801597a:	4632      	mov	r2, r6
 801597c:	4648      	mov	r0, r9
 801597e:	f000 ffaf 	bl	80168e0 <__lshift>
 8015982:	4605      	mov	r5, r0
 8015984:	9b08      	ldr	r3, [sp, #32]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d05c      	beq.n	8015a44 <_dtoa_r+0xa3c>
 801598a:	6869      	ldr	r1, [r5, #4]
 801598c:	4648      	mov	r0, r9
 801598e:	f000 fd57 	bl	8016440 <_Balloc>
 8015992:	4606      	mov	r6, r0
 8015994:	b928      	cbnz	r0, 80159a2 <_dtoa_r+0x99a>
 8015996:	4b82      	ldr	r3, [pc, #520]	@ (8015ba0 <_dtoa_r+0xb98>)
 8015998:	4602      	mov	r2, r0
 801599a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801599e:	f7ff bb4a 	b.w	8015036 <_dtoa_r+0x2e>
 80159a2:	692a      	ldr	r2, [r5, #16]
 80159a4:	3202      	adds	r2, #2
 80159a6:	0092      	lsls	r2, r2, #2
 80159a8:	f105 010c 	add.w	r1, r5, #12
 80159ac:	300c      	adds	r0, #12
 80159ae:	f7ff fa66 	bl	8014e7e <memcpy>
 80159b2:	2201      	movs	r2, #1
 80159b4:	4631      	mov	r1, r6
 80159b6:	4648      	mov	r0, r9
 80159b8:	f000 ff92 	bl	80168e0 <__lshift>
 80159bc:	f10a 0301 	add.w	r3, sl, #1
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	eb0a 030b 	add.w	r3, sl, fp
 80159c6:	9308      	str	r3, [sp, #32]
 80159c8:	9b04      	ldr	r3, [sp, #16]
 80159ca:	f003 0301 	and.w	r3, r3, #1
 80159ce:	462f      	mov	r7, r5
 80159d0:	9306      	str	r3, [sp, #24]
 80159d2:	4605      	mov	r5, r0
 80159d4:	9b00      	ldr	r3, [sp, #0]
 80159d6:	9802      	ldr	r0, [sp, #8]
 80159d8:	4621      	mov	r1, r4
 80159da:	f103 3bff 	add.w	fp, r3, #4294967295
 80159de:	f7ff fa8b 	bl	8014ef8 <quorem>
 80159e2:	4603      	mov	r3, r0
 80159e4:	3330      	adds	r3, #48	@ 0x30
 80159e6:	9003      	str	r0, [sp, #12]
 80159e8:	4639      	mov	r1, r7
 80159ea:	9802      	ldr	r0, [sp, #8]
 80159ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80159ee:	f000 ffe3 	bl	80169b8 <__mcmp>
 80159f2:	462a      	mov	r2, r5
 80159f4:	9004      	str	r0, [sp, #16]
 80159f6:	4621      	mov	r1, r4
 80159f8:	4648      	mov	r0, r9
 80159fa:	f000 fff9 	bl	80169f0 <__mdiff>
 80159fe:	68c2      	ldr	r2, [r0, #12]
 8015a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a02:	4606      	mov	r6, r0
 8015a04:	bb02      	cbnz	r2, 8015a48 <_dtoa_r+0xa40>
 8015a06:	4601      	mov	r1, r0
 8015a08:	9802      	ldr	r0, [sp, #8]
 8015a0a:	f000 ffd5 	bl	80169b8 <__mcmp>
 8015a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a10:	4602      	mov	r2, r0
 8015a12:	4631      	mov	r1, r6
 8015a14:	4648      	mov	r0, r9
 8015a16:	920c      	str	r2, [sp, #48]	@ 0x30
 8015a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a1a:	f000 fd51 	bl	80164c0 <_Bfree>
 8015a1e:	9b07      	ldr	r3, [sp, #28]
 8015a20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015a22:	9e00      	ldr	r6, [sp, #0]
 8015a24:	ea42 0103 	orr.w	r1, r2, r3
 8015a28:	9b06      	ldr	r3, [sp, #24]
 8015a2a:	4319      	orrs	r1, r3
 8015a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a2e:	d10d      	bne.n	8015a4c <_dtoa_r+0xa44>
 8015a30:	2b39      	cmp	r3, #57	@ 0x39
 8015a32:	d027      	beq.n	8015a84 <_dtoa_r+0xa7c>
 8015a34:	9a04      	ldr	r2, [sp, #16]
 8015a36:	2a00      	cmp	r2, #0
 8015a38:	dd01      	ble.n	8015a3e <_dtoa_r+0xa36>
 8015a3a:	9b03      	ldr	r3, [sp, #12]
 8015a3c:	3331      	adds	r3, #49	@ 0x31
 8015a3e:	f88b 3000 	strb.w	r3, [fp]
 8015a42:	e52e      	b.n	80154a2 <_dtoa_r+0x49a>
 8015a44:	4628      	mov	r0, r5
 8015a46:	e7b9      	b.n	80159bc <_dtoa_r+0x9b4>
 8015a48:	2201      	movs	r2, #1
 8015a4a:	e7e2      	b.n	8015a12 <_dtoa_r+0xa0a>
 8015a4c:	9904      	ldr	r1, [sp, #16]
 8015a4e:	2900      	cmp	r1, #0
 8015a50:	db04      	blt.n	8015a5c <_dtoa_r+0xa54>
 8015a52:	9807      	ldr	r0, [sp, #28]
 8015a54:	4301      	orrs	r1, r0
 8015a56:	9806      	ldr	r0, [sp, #24]
 8015a58:	4301      	orrs	r1, r0
 8015a5a:	d120      	bne.n	8015a9e <_dtoa_r+0xa96>
 8015a5c:	2a00      	cmp	r2, #0
 8015a5e:	ddee      	ble.n	8015a3e <_dtoa_r+0xa36>
 8015a60:	9902      	ldr	r1, [sp, #8]
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	2201      	movs	r2, #1
 8015a66:	4648      	mov	r0, r9
 8015a68:	f000 ff3a 	bl	80168e0 <__lshift>
 8015a6c:	4621      	mov	r1, r4
 8015a6e:	9002      	str	r0, [sp, #8]
 8015a70:	f000 ffa2 	bl	80169b8 <__mcmp>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	9b00      	ldr	r3, [sp, #0]
 8015a78:	dc02      	bgt.n	8015a80 <_dtoa_r+0xa78>
 8015a7a:	d1e0      	bne.n	8015a3e <_dtoa_r+0xa36>
 8015a7c:	07da      	lsls	r2, r3, #31
 8015a7e:	d5de      	bpl.n	8015a3e <_dtoa_r+0xa36>
 8015a80:	2b39      	cmp	r3, #57	@ 0x39
 8015a82:	d1da      	bne.n	8015a3a <_dtoa_r+0xa32>
 8015a84:	2339      	movs	r3, #57	@ 0x39
 8015a86:	f88b 3000 	strb.w	r3, [fp]
 8015a8a:	4633      	mov	r3, r6
 8015a8c:	461e      	mov	r6, r3
 8015a8e:	3b01      	subs	r3, #1
 8015a90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015a94:	2a39      	cmp	r2, #57	@ 0x39
 8015a96:	d04e      	beq.n	8015b36 <_dtoa_r+0xb2e>
 8015a98:	3201      	adds	r2, #1
 8015a9a:	701a      	strb	r2, [r3, #0]
 8015a9c:	e501      	b.n	80154a2 <_dtoa_r+0x49a>
 8015a9e:	2a00      	cmp	r2, #0
 8015aa0:	dd03      	ble.n	8015aaa <_dtoa_r+0xaa2>
 8015aa2:	2b39      	cmp	r3, #57	@ 0x39
 8015aa4:	d0ee      	beq.n	8015a84 <_dtoa_r+0xa7c>
 8015aa6:	3301      	adds	r3, #1
 8015aa8:	e7c9      	b.n	8015a3e <_dtoa_r+0xa36>
 8015aaa:	9a00      	ldr	r2, [sp, #0]
 8015aac:	9908      	ldr	r1, [sp, #32]
 8015aae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015ab2:	428a      	cmp	r2, r1
 8015ab4:	d028      	beq.n	8015b08 <_dtoa_r+0xb00>
 8015ab6:	9902      	ldr	r1, [sp, #8]
 8015ab8:	2300      	movs	r3, #0
 8015aba:	220a      	movs	r2, #10
 8015abc:	4648      	mov	r0, r9
 8015abe:	f000 fd21 	bl	8016504 <__multadd>
 8015ac2:	42af      	cmp	r7, r5
 8015ac4:	9002      	str	r0, [sp, #8]
 8015ac6:	f04f 0300 	mov.w	r3, #0
 8015aca:	f04f 020a 	mov.w	r2, #10
 8015ace:	4639      	mov	r1, r7
 8015ad0:	4648      	mov	r0, r9
 8015ad2:	d107      	bne.n	8015ae4 <_dtoa_r+0xadc>
 8015ad4:	f000 fd16 	bl	8016504 <__multadd>
 8015ad8:	4607      	mov	r7, r0
 8015ada:	4605      	mov	r5, r0
 8015adc:	9b00      	ldr	r3, [sp, #0]
 8015ade:	3301      	adds	r3, #1
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	e777      	b.n	80159d4 <_dtoa_r+0x9cc>
 8015ae4:	f000 fd0e 	bl	8016504 <__multadd>
 8015ae8:	4629      	mov	r1, r5
 8015aea:	4607      	mov	r7, r0
 8015aec:	2300      	movs	r3, #0
 8015aee:	220a      	movs	r2, #10
 8015af0:	4648      	mov	r0, r9
 8015af2:	f000 fd07 	bl	8016504 <__multadd>
 8015af6:	4605      	mov	r5, r0
 8015af8:	e7f0      	b.n	8015adc <_dtoa_r+0xad4>
 8015afa:	f1bb 0f00 	cmp.w	fp, #0
 8015afe:	bfcc      	ite	gt
 8015b00:	465e      	movgt	r6, fp
 8015b02:	2601      	movle	r6, #1
 8015b04:	4456      	add	r6, sl
 8015b06:	2700      	movs	r7, #0
 8015b08:	9902      	ldr	r1, [sp, #8]
 8015b0a:	9300      	str	r3, [sp, #0]
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	4648      	mov	r0, r9
 8015b10:	f000 fee6 	bl	80168e0 <__lshift>
 8015b14:	4621      	mov	r1, r4
 8015b16:	9002      	str	r0, [sp, #8]
 8015b18:	f000 ff4e 	bl	80169b8 <__mcmp>
 8015b1c:	2800      	cmp	r0, #0
 8015b1e:	dcb4      	bgt.n	8015a8a <_dtoa_r+0xa82>
 8015b20:	d102      	bne.n	8015b28 <_dtoa_r+0xb20>
 8015b22:	9b00      	ldr	r3, [sp, #0]
 8015b24:	07db      	lsls	r3, r3, #31
 8015b26:	d4b0      	bmi.n	8015a8a <_dtoa_r+0xa82>
 8015b28:	4633      	mov	r3, r6
 8015b2a:	461e      	mov	r6, r3
 8015b2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b30:	2a30      	cmp	r2, #48	@ 0x30
 8015b32:	d0fa      	beq.n	8015b2a <_dtoa_r+0xb22>
 8015b34:	e4b5      	b.n	80154a2 <_dtoa_r+0x49a>
 8015b36:	459a      	cmp	sl, r3
 8015b38:	d1a8      	bne.n	8015a8c <_dtoa_r+0xa84>
 8015b3a:	2331      	movs	r3, #49	@ 0x31
 8015b3c:	f108 0801 	add.w	r8, r8, #1
 8015b40:	f88a 3000 	strb.w	r3, [sl]
 8015b44:	e4ad      	b.n	80154a2 <_dtoa_r+0x49a>
 8015b46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015b48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015ba4 <_dtoa_r+0xb9c>
 8015b4c:	b11b      	cbz	r3, 8015b56 <_dtoa_r+0xb4e>
 8015b4e:	f10a 0308 	add.w	r3, sl, #8
 8015b52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015b54:	6013      	str	r3, [r2, #0]
 8015b56:	4650      	mov	r0, sl
 8015b58:	b017      	add	sp, #92	@ 0x5c
 8015b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b5e:	9b07      	ldr	r3, [sp, #28]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	f77f ae2e 	ble.w	80157c2 <_dtoa_r+0x7ba>
 8015b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015b68:	9308      	str	r3, [sp, #32]
 8015b6a:	2001      	movs	r0, #1
 8015b6c:	e64d      	b.n	801580a <_dtoa_r+0x802>
 8015b6e:	f1bb 0f00 	cmp.w	fp, #0
 8015b72:	f77f aed9 	ble.w	8015928 <_dtoa_r+0x920>
 8015b76:	4656      	mov	r6, sl
 8015b78:	9802      	ldr	r0, [sp, #8]
 8015b7a:	4621      	mov	r1, r4
 8015b7c:	f7ff f9bc 	bl	8014ef8 <quorem>
 8015b80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015b84:	f806 3b01 	strb.w	r3, [r6], #1
 8015b88:	eba6 020a 	sub.w	r2, r6, sl
 8015b8c:	4593      	cmp	fp, r2
 8015b8e:	ddb4      	ble.n	8015afa <_dtoa_r+0xaf2>
 8015b90:	9902      	ldr	r1, [sp, #8]
 8015b92:	2300      	movs	r3, #0
 8015b94:	220a      	movs	r2, #10
 8015b96:	4648      	mov	r0, r9
 8015b98:	f000 fcb4 	bl	8016504 <__multadd>
 8015b9c:	9002      	str	r0, [sp, #8]
 8015b9e:	e7eb      	b.n	8015b78 <_dtoa_r+0xb70>
 8015ba0:	08017c10 	.word	0x08017c10
 8015ba4:	08017bab 	.word	0x08017bab

08015ba8 <_free_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4605      	mov	r5, r0
 8015bac:	2900      	cmp	r1, #0
 8015bae:	d041      	beq.n	8015c34 <_free_r+0x8c>
 8015bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015bb4:	1f0c      	subs	r4, r1, #4
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	bfb8      	it	lt
 8015bba:	18e4      	addlt	r4, r4, r3
 8015bbc:	f000 fc34 	bl	8016428 <__malloc_lock>
 8015bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8015c38 <_free_r+0x90>)
 8015bc2:	6813      	ldr	r3, [r2, #0]
 8015bc4:	b933      	cbnz	r3, 8015bd4 <_free_r+0x2c>
 8015bc6:	6063      	str	r3, [r4, #4]
 8015bc8:	6014      	str	r4, [r2, #0]
 8015bca:	4628      	mov	r0, r5
 8015bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bd0:	f000 bc30 	b.w	8016434 <__malloc_unlock>
 8015bd4:	42a3      	cmp	r3, r4
 8015bd6:	d908      	bls.n	8015bea <_free_r+0x42>
 8015bd8:	6820      	ldr	r0, [r4, #0]
 8015bda:	1821      	adds	r1, r4, r0
 8015bdc:	428b      	cmp	r3, r1
 8015bde:	bf01      	itttt	eq
 8015be0:	6819      	ldreq	r1, [r3, #0]
 8015be2:	685b      	ldreq	r3, [r3, #4]
 8015be4:	1809      	addeq	r1, r1, r0
 8015be6:	6021      	streq	r1, [r4, #0]
 8015be8:	e7ed      	b.n	8015bc6 <_free_r+0x1e>
 8015bea:	461a      	mov	r2, r3
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	b10b      	cbz	r3, 8015bf4 <_free_r+0x4c>
 8015bf0:	42a3      	cmp	r3, r4
 8015bf2:	d9fa      	bls.n	8015bea <_free_r+0x42>
 8015bf4:	6811      	ldr	r1, [r2, #0]
 8015bf6:	1850      	adds	r0, r2, r1
 8015bf8:	42a0      	cmp	r0, r4
 8015bfa:	d10b      	bne.n	8015c14 <_free_r+0x6c>
 8015bfc:	6820      	ldr	r0, [r4, #0]
 8015bfe:	4401      	add	r1, r0
 8015c00:	1850      	adds	r0, r2, r1
 8015c02:	4283      	cmp	r3, r0
 8015c04:	6011      	str	r1, [r2, #0]
 8015c06:	d1e0      	bne.n	8015bca <_free_r+0x22>
 8015c08:	6818      	ldr	r0, [r3, #0]
 8015c0a:	685b      	ldr	r3, [r3, #4]
 8015c0c:	6053      	str	r3, [r2, #4]
 8015c0e:	4408      	add	r0, r1
 8015c10:	6010      	str	r0, [r2, #0]
 8015c12:	e7da      	b.n	8015bca <_free_r+0x22>
 8015c14:	d902      	bls.n	8015c1c <_free_r+0x74>
 8015c16:	230c      	movs	r3, #12
 8015c18:	602b      	str	r3, [r5, #0]
 8015c1a:	e7d6      	b.n	8015bca <_free_r+0x22>
 8015c1c:	6820      	ldr	r0, [r4, #0]
 8015c1e:	1821      	adds	r1, r4, r0
 8015c20:	428b      	cmp	r3, r1
 8015c22:	bf04      	itt	eq
 8015c24:	6819      	ldreq	r1, [r3, #0]
 8015c26:	685b      	ldreq	r3, [r3, #4]
 8015c28:	6063      	str	r3, [r4, #4]
 8015c2a:	bf04      	itt	eq
 8015c2c:	1809      	addeq	r1, r1, r0
 8015c2e:	6021      	streq	r1, [r4, #0]
 8015c30:	6054      	str	r4, [r2, #4]
 8015c32:	e7ca      	b.n	8015bca <_free_r+0x22>
 8015c34:	bd38      	pop	{r3, r4, r5, pc}
 8015c36:	bf00      	nop
 8015c38:	2000e530 	.word	0x2000e530

08015c3c <rshift>:
 8015c3c:	6903      	ldr	r3, [r0, #16]
 8015c3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015c4a:	f100 0414 	add.w	r4, r0, #20
 8015c4e:	dd45      	ble.n	8015cdc <rshift+0xa0>
 8015c50:	f011 011f 	ands.w	r1, r1, #31
 8015c54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015c58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015c5c:	d10c      	bne.n	8015c78 <rshift+0x3c>
 8015c5e:	f100 0710 	add.w	r7, r0, #16
 8015c62:	4629      	mov	r1, r5
 8015c64:	42b1      	cmp	r1, r6
 8015c66:	d334      	bcc.n	8015cd2 <rshift+0x96>
 8015c68:	1a9b      	subs	r3, r3, r2
 8015c6a:	009b      	lsls	r3, r3, #2
 8015c6c:	1eea      	subs	r2, r5, #3
 8015c6e:	4296      	cmp	r6, r2
 8015c70:	bf38      	it	cc
 8015c72:	2300      	movcc	r3, #0
 8015c74:	4423      	add	r3, r4
 8015c76:	e015      	b.n	8015ca4 <rshift+0x68>
 8015c78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015c7c:	f1c1 0820 	rsb	r8, r1, #32
 8015c80:	40cf      	lsrs	r7, r1
 8015c82:	f105 0e04 	add.w	lr, r5, #4
 8015c86:	46a1      	mov	r9, r4
 8015c88:	4576      	cmp	r6, lr
 8015c8a:	46f4      	mov	ip, lr
 8015c8c:	d815      	bhi.n	8015cba <rshift+0x7e>
 8015c8e:	1a9a      	subs	r2, r3, r2
 8015c90:	0092      	lsls	r2, r2, #2
 8015c92:	3a04      	subs	r2, #4
 8015c94:	3501      	adds	r5, #1
 8015c96:	42ae      	cmp	r6, r5
 8015c98:	bf38      	it	cc
 8015c9a:	2200      	movcc	r2, #0
 8015c9c:	18a3      	adds	r3, r4, r2
 8015c9e:	50a7      	str	r7, [r4, r2]
 8015ca0:	b107      	cbz	r7, 8015ca4 <rshift+0x68>
 8015ca2:	3304      	adds	r3, #4
 8015ca4:	1b1a      	subs	r2, r3, r4
 8015ca6:	42a3      	cmp	r3, r4
 8015ca8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015cac:	bf08      	it	eq
 8015cae:	2300      	moveq	r3, #0
 8015cb0:	6102      	str	r2, [r0, #16]
 8015cb2:	bf08      	it	eq
 8015cb4:	6143      	streq	r3, [r0, #20]
 8015cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cba:	f8dc c000 	ldr.w	ip, [ip]
 8015cbe:	fa0c fc08 	lsl.w	ip, ip, r8
 8015cc2:	ea4c 0707 	orr.w	r7, ip, r7
 8015cc6:	f849 7b04 	str.w	r7, [r9], #4
 8015cca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015cce:	40cf      	lsrs	r7, r1
 8015cd0:	e7da      	b.n	8015c88 <rshift+0x4c>
 8015cd2:	f851 cb04 	ldr.w	ip, [r1], #4
 8015cd6:	f847 cf04 	str.w	ip, [r7, #4]!
 8015cda:	e7c3      	b.n	8015c64 <rshift+0x28>
 8015cdc:	4623      	mov	r3, r4
 8015cde:	e7e1      	b.n	8015ca4 <rshift+0x68>

08015ce0 <__hexdig_fun>:
 8015ce0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015ce4:	2b09      	cmp	r3, #9
 8015ce6:	d802      	bhi.n	8015cee <__hexdig_fun+0xe>
 8015ce8:	3820      	subs	r0, #32
 8015cea:	b2c0      	uxtb	r0, r0
 8015cec:	4770      	bx	lr
 8015cee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015cf2:	2b05      	cmp	r3, #5
 8015cf4:	d801      	bhi.n	8015cfa <__hexdig_fun+0x1a>
 8015cf6:	3847      	subs	r0, #71	@ 0x47
 8015cf8:	e7f7      	b.n	8015cea <__hexdig_fun+0xa>
 8015cfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015cfe:	2b05      	cmp	r3, #5
 8015d00:	d801      	bhi.n	8015d06 <__hexdig_fun+0x26>
 8015d02:	3827      	subs	r0, #39	@ 0x27
 8015d04:	e7f1      	b.n	8015cea <__hexdig_fun+0xa>
 8015d06:	2000      	movs	r0, #0
 8015d08:	4770      	bx	lr
	...

08015d0c <__gethex>:
 8015d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d10:	b085      	sub	sp, #20
 8015d12:	468a      	mov	sl, r1
 8015d14:	9302      	str	r3, [sp, #8]
 8015d16:	680b      	ldr	r3, [r1, #0]
 8015d18:	9001      	str	r0, [sp, #4]
 8015d1a:	4690      	mov	r8, r2
 8015d1c:	1c9c      	adds	r4, r3, #2
 8015d1e:	46a1      	mov	r9, r4
 8015d20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015d24:	2830      	cmp	r0, #48	@ 0x30
 8015d26:	d0fa      	beq.n	8015d1e <__gethex+0x12>
 8015d28:	eba9 0303 	sub.w	r3, r9, r3
 8015d2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015d30:	f7ff ffd6 	bl	8015ce0 <__hexdig_fun>
 8015d34:	4605      	mov	r5, r0
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d168      	bne.n	8015e0c <__gethex+0x100>
 8015d3a:	49a0      	ldr	r1, [pc, #640]	@ (8015fbc <__gethex+0x2b0>)
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	4648      	mov	r0, r9
 8015d40:	f7fe ff59 	bl	8014bf6 <strncmp>
 8015d44:	4607      	mov	r7, r0
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d167      	bne.n	8015e1a <__gethex+0x10e>
 8015d4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015d4e:	4626      	mov	r6, r4
 8015d50:	f7ff ffc6 	bl	8015ce0 <__hexdig_fun>
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d062      	beq.n	8015e1e <__gethex+0x112>
 8015d58:	4623      	mov	r3, r4
 8015d5a:	7818      	ldrb	r0, [r3, #0]
 8015d5c:	2830      	cmp	r0, #48	@ 0x30
 8015d5e:	4699      	mov	r9, r3
 8015d60:	f103 0301 	add.w	r3, r3, #1
 8015d64:	d0f9      	beq.n	8015d5a <__gethex+0x4e>
 8015d66:	f7ff ffbb 	bl	8015ce0 <__hexdig_fun>
 8015d6a:	fab0 f580 	clz	r5, r0
 8015d6e:	096d      	lsrs	r5, r5, #5
 8015d70:	f04f 0b01 	mov.w	fp, #1
 8015d74:	464a      	mov	r2, r9
 8015d76:	4616      	mov	r6, r2
 8015d78:	3201      	adds	r2, #1
 8015d7a:	7830      	ldrb	r0, [r6, #0]
 8015d7c:	f7ff ffb0 	bl	8015ce0 <__hexdig_fun>
 8015d80:	2800      	cmp	r0, #0
 8015d82:	d1f8      	bne.n	8015d76 <__gethex+0x6a>
 8015d84:	498d      	ldr	r1, [pc, #564]	@ (8015fbc <__gethex+0x2b0>)
 8015d86:	2201      	movs	r2, #1
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f7fe ff34 	bl	8014bf6 <strncmp>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	d13f      	bne.n	8015e12 <__gethex+0x106>
 8015d92:	b944      	cbnz	r4, 8015da6 <__gethex+0x9a>
 8015d94:	1c74      	adds	r4, r6, #1
 8015d96:	4622      	mov	r2, r4
 8015d98:	4616      	mov	r6, r2
 8015d9a:	3201      	adds	r2, #1
 8015d9c:	7830      	ldrb	r0, [r6, #0]
 8015d9e:	f7ff ff9f 	bl	8015ce0 <__hexdig_fun>
 8015da2:	2800      	cmp	r0, #0
 8015da4:	d1f8      	bne.n	8015d98 <__gethex+0x8c>
 8015da6:	1ba4      	subs	r4, r4, r6
 8015da8:	00a7      	lsls	r7, r4, #2
 8015daa:	7833      	ldrb	r3, [r6, #0]
 8015dac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015db0:	2b50      	cmp	r3, #80	@ 0x50
 8015db2:	d13e      	bne.n	8015e32 <__gethex+0x126>
 8015db4:	7873      	ldrb	r3, [r6, #1]
 8015db6:	2b2b      	cmp	r3, #43	@ 0x2b
 8015db8:	d033      	beq.n	8015e22 <__gethex+0x116>
 8015dba:	2b2d      	cmp	r3, #45	@ 0x2d
 8015dbc:	d034      	beq.n	8015e28 <__gethex+0x11c>
 8015dbe:	1c71      	adds	r1, r6, #1
 8015dc0:	2400      	movs	r4, #0
 8015dc2:	7808      	ldrb	r0, [r1, #0]
 8015dc4:	f7ff ff8c 	bl	8015ce0 <__hexdig_fun>
 8015dc8:	1e43      	subs	r3, r0, #1
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b18      	cmp	r3, #24
 8015dce:	d830      	bhi.n	8015e32 <__gethex+0x126>
 8015dd0:	f1a0 0210 	sub.w	r2, r0, #16
 8015dd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015dd8:	f7ff ff82 	bl	8015ce0 <__hexdig_fun>
 8015ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8015de0:	fa5f fc8c 	uxtb.w	ip, ip
 8015de4:	f1bc 0f18 	cmp.w	ip, #24
 8015de8:	f04f 030a 	mov.w	r3, #10
 8015dec:	d91e      	bls.n	8015e2c <__gethex+0x120>
 8015dee:	b104      	cbz	r4, 8015df2 <__gethex+0xe6>
 8015df0:	4252      	negs	r2, r2
 8015df2:	4417      	add	r7, r2
 8015df4:	f8ca 1000 	str.w	r1, [sl]
 8015df8:	b1ed      	cbz	r5, 8015e36 <__gethex+0x12a>
 8015dfa:	f1bb 0f00 	cmp.w	fp, #0
 8015dfe:	bf0c      	ite	eq
 8015e00:	2506      	moveq	r5, #6
 8015e02:	2500      	movne	r5, #0
 8015e04:	4628      	mov	r0, r5
 8015e06:	b005      	add	sp, #20
 8015e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0c:	2500      	movs	r5, #0
 8015e0e:	462c      	mov	r4, r5
 8015e10:	e7b0      	b.n	8015d74 <__gethex+0x68>
 8015e12:	2c00      	cmp	r4, #0
 8015e14:	d1c7      	bne.n	8015da6 <__gethex+0x9a>
 8015e16:	4627      	mov	r7, r4
 8015e18:	e7c7      	b.n	8015daa <__gethex+0x9e>
 8015e1a:	464e      	mov	r6, r9
 8015e1c:	462f      	mov	r7, r5
 8015e1e:	2501      	movs	r5, #1
 8015e20:	e7c3      	b.n	8015daa <__gethex+0x9e>
 8015e22:	2400      	movs	r4, #0
 8015e24:	1cb1      	adds	r1, r6, #2
 8015e26:	e7cc      	b.n	8015dc2 <__gethex+0xb6>
 8015e28:	2401      	movs	r4, #1
 8015e2a:	e7fb      	b.n	8015e24 <__gethex+0x118>
 8015e2c:	fb03 0002 	mla	r0, r3, r2, r0
 8015e30:	e7ce      	b.n	8015dd0 <__gethex+0xc4>
 8015e32:	4631      	mov	r1, r6
 8015e34:	e7de      	b.n	8015df4 <__gethex+0xe8>
 8015e36:	eba6 0309 	sub.w	r3, r6, r9
 8015e3a:	3b01      	subs	r3, #1
 8015e3c:	4629      	mov	r1, r5
 8015e3e:	2b07      	cmp	r3, #7
 8015e40:	dc0a      	bgt.n	8015e58 <__gethex+0x14c>
 8015e42:	9801      	ldr	r0, [sp, #4]
 8015e44:	f000 fafc 	bl	8016440 <_Balloc>
 8015e48:	4604      	mov	r4, r0
 8015e4a:	b940      	cbnz	r0, 8015e5e <__gethex+0x152>
 8015e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8015fc0 <__gethex+0x2b4>)
 8015e4e:	4602      	mov	r2, r0
 8015e50:	21e4      	movs	r1, #228	@ 0xe4
 8015e52:	485c      	ldr	r0, [pc, #368]	@ (8015fc4 <__gethex+0x2b8>)
 8015e54:	f7ff f832 	bl	8014ebc <__assert_func>
 8015e58:	3101      	adds	r1, #1
 8015e5a:	105b      	asrs	r3, r3, #1
 8015e5c:	e7ef      	b.n	8015e3e <__gethex+0x132>
 8015e5e:	f100 0a14 	add.w	sl, r0, #20
 8015e62:	2300      	movs	r3, #0
 8015e64:	4655      	mov	r5, sl
 8015e66:	469b      	mov	fp, r3
 8015e68:	45b1      	cmp	r9, r6
 8015e6a:	d337      	bcc.n	8015edc <__gethex+0x1d0>
 8015e6c:	f845 bb04 	str.w	fp, [r5], #4
 8015e70:	eba5 050a 	sub.w	r5, r5, sl
 8015e74:	10ad      	asrs	r5, r5, #2
 8015e76:	6125      	str	r5, [r4, #16]
 8015e78:	4658      	mov	r0, fp
 8015e7a:	f000 fbd3 	bl	8016624 <__hi0bits>
 8015e7e:	016d      	lsls	r5, r5, #5
 8015e80:	f8d8 6000 	ldr.w	r6, [r8]
 8015e84:	1a2d      	subs	r5, r5, r0
 8015e86:	42b5      	cmp	r5, r6
 8015e88:	dd54      	ble.n	8015f34 <__gethex+0x228>
 8015e8a:	1bad      	subs	r5, r5, r6
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	4620      	mov	r0, r4
 8015e90:	f000 ff5f 	bl	8016d52 <__any_on>
 8015e94:	4681      	mov	r9, r0
 8015e96:	b178      	cbz	r0, 8015eb8 <__gethex+0x1ac>
 8015e98:	1e6b      	subs	r3, r5, #1
 8015e9a:	1159      	asrs	r1, r3, #5
 8015e9c:	f003 021f 	and.w	r2, r3, #31
 8015ea0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015ea4:	f04f 0901 	mov.w	r9, #1
 8015ea8:	fa09 f202 	lsl.w	r2, r9, r2
 8015eac:	420a      	tst	r2, r1
 8015eae:	d003      	beq.n	8015eb8 <__gethex+0x1ac>
 8015eb0:	454b      	cmp	r3, r9
 8015eb2:	dc36      	bgt.n	8015f22 <__gethex+0x216>
 8015eb4:	f04f 0902 	mov.w	r9, #2
 8015eb8:	4629      	mov	r1, r5
 8015eba:	4620      	mov	r0, r4
 8015ebc:	f7ff febe 	bl	8015c3c <rshift>
 8015ec0:	442f      	add	r7, r5
 8015ec2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ec6:	42bb      	cmp	r3, r7
 8015ec8:	da42      	bge.n	8015f50 <__gethex+0x244>
 8015eca:	9801      	ldr	r0, [sp, #4]
 8015ecc:	4621      	mov	r1, r4
 8015ece:	f000 faf7 	bl	80164c0 <_Bfree>
 8015ed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	6013      	str	r3, [r2, #0]
 8015ed8:	25a3      	movs	r5, #163	@ 0xa3
 8015eda:	e793      	b.n	8015e04 <__gethex+0xf8>
 8015edc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015ee0:	2a2e      	cmp	r2, #46	@ 0x2e
 8015ee2:	d012      	beq.n	8015f0a <__gethex+0x1fe>
 8015ee4:	2b20      	cmp	r3, #32
 8015ee6:	d104      	bne.n	8015ef2 <__gethex+0x1e6>
 8015ee8:	f845 bb04 	str.w	fp, [r5], #4
 8015eec:	f04f 0b00 	mov.w	fp, #0
 8015ef0:	465b      	mov	r3, fp
 8015ef2:	7830      	ldrb	r0, [r6, #0]
 8015ef4:	9303      	str	r3, [sp, #12]
 8015ef6:	f7ff fef3 	bl	8015ce0 <__hexdig_fun>
 8015efa:	9b03      	ldr	r3, [sp, #12]
 8015efc:	f000 000f 	and.w	r0, r0, #15
 8015f00:	4098      	lsls	r0, r3
 8015f02:	ea4b 0b00 	orr.w	fp, fp, r0
 8015f06:	3304      	adds	r3, #4
 8015f08:	e7ae      	b.n	8015e68 <__gethex+0x15c>
 8015f0a:	45b1      	cmp	r9, r6
 8015f0c:	d8ea      	bhi.n	8015ee4 <__gethex+0x1d8>
 8015f0e:	492b      	ldr	r1, [pc, #172]	@ (8015fbc <__gethex+0x2b0>)
 8015f10:	9303      	str	r3, [sp, #12]
 8015f12:	2201      	movs	r2, #1
 8015f14:	4630      	mov	r0, r6
 8015f16:	f7fe fe6e 	bl	8014bf6 <strncmp>
 8015f1a:	9b03      	ldr	r3, [sp, #12]
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d1e1      	bne.n	8015ee4 <__gethex+0x1d8>
 8015f20:	e7a2      	b.n	8015e68 <__gethex+0x15c>
 8015f22:	1ea9      	subs	r1, r5, #2
 8015f24:	4620      	mov	r0, r4
 8015f26:	f000 ff14 	bl	8016d52 <__any_on>
 8015f2a:	2800      	cmp	r0, #0
 8015f2c:	d0c2      	beq.n	8015eb4 <__gethex+0x1a8>
 8015f2e:	f04f 0903 	mov.w	r9, #3
 8015f32:	e7c1      	b.n	8015eb8 <__gethex+0x1ac>
 8015f34:	da09      	bge.n	8015f4a <__gethex+0x23e>
 8015f36:	1b75      	subs	r5, r6, r5
 8015f38:	4621      	mov	r1, r4
 8015f3a:	9801      	ldr	r0, [sp, #4]
 8015f3c:	462a      	mov	r2, r5
 8015f3e:	f000 fccf 	bl	80168e0 <__lshift>
 8015f42:	1b7f      	subs	r7, r7, r5
 8015f44:	4604      	mov	r4, r0
 8015f46:	f100 0a14 	add.w	sl, r0, #20
 8015f4a:	f04f 0900 	mov.w	r9, #0
 8015f4e:	e7b8      	b.n	8015ec2 <__gethex+0x1b6>
 8015f50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015f54:	42bd      	cmp	r5, r7
 8015f56:	dd6f      	ble.n	8016038 <__gethex+0x32c>
 8015f58:	1bed      	subs	r5, r5, r7
 8015f5a:	42ae      	cmp	r6, r5
 8015f5c:	dc34      	bgt.n	8015fc8 <__gethex+0x2bc>
 8015f5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f62:	2b02      	cmp	r3, #2
 8015f64:	d022      	beq.n	8015fac <__gethex+0x2a0>
 8015f66:	2b03      	cmp	r3, #3
 8015f68:	d024      	beq.n	8015fb4 <__gethex+0x2a8>
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d115      	bne.n	8015f9a <__gethex+0x28e>
 8015f6e:	42ae      	cmp	r6, r5
 8015f70:	d113      	bne.n	8015f9a <__gethex+0x28e>
 8015f72:	2e01      	cmp	r6, #1
 8015f74:	d10b      	bne.n	8015f8e <__gethex+0x282>
 8015f76:	9a02      	ldr	r2, [sp, #8]
 8015f78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f7c:	6013      	str	r3, [r2, #0]
 8015f7e:	2301      	movs	r3, #1
 8015f80:	6123      	str	r3, [r4, #16]
 8015f82:	f8ca 3000 	str.w	r3, [sl]
 8015f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f88:	2562      	movs	r5, #98	@ 0x62
 8015f8a:	601c      	str	r4, [r3, #0]
 8015f8c:	e73a      	b.n	8015e04 <__gethex+0xf8>
 8015f8e:	1e71      	subs	r1, r6, #1
 8015f90:	4620      	mov	r0, r4
 8015f92:	f000 fede 	bl	8016d52 <__any_on>
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d1ed      	bne.n	8015f76 <__gethex+0x26a>
 8015f9a:	9801      	ldr	r0, [sp, #4]
 8015f9c:	4621      	mov	r1, r4
 8015f9e:	f000 fa8f 	bl	80164c0 <_Bfree>
 8015fa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	6013      	str	r3, [r2, #0]
 8015fa8:	2550      	movs	r5, #80	@ 0x50
 8015faa:	e72b      	b.n	8015e04 <__gethex+0xf8>
 8015fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d1f3      	bne.n	8015f9a <__gethex+0x28e>
 8015fb2:	e7e0      	b.n	8015f76 <__gethex+0x26a>
 8015fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d1dd      	bne.n	8015f76 <__gethex+0x26a>
 8015fba:	e7ee      	b.n	8015f9a <__gethex+0x28e>
 8015fbc:	08017ac0 	.word	0x08017ac0
 8015fc0:	08017c10 	.word	0x08017c10
 8015fc4:	08017c21 	.word	0x08017c21
 8015fc8:	1e6f      	subs	r7, r5, #1
 8015fca:	f1b9 0f00 	cmp.w	r9, #0
 8015fce:	d130      	bne.n	8016032 <__gethex+0x326>
 8015fd0:	b127      	cbz	r7, 8015fdc <__gethex+0x2d0>
 8015fd2:	4639      	mov	r1, r7
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f000 febc 	bl	8016d52 <__any_on>
 8015fda:	4681      	mov	r9, r0
 8015fdc:	117a      	asrs	r2, r7, #5
 8015fde:	2301      	movs	r3, #1
 8015fe0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015fe4:	f007 071f 	and.w	r7, r7, #31
 8015fe8:	40bb      	lsls	r3, r7
 8015fea:	4213      	tst	r3, r2
 8015fec:	4629      	mov	r1, r5
 8015fee:	4620      	mov	r0, r4
 8015ff0:	bf18      	it	ne
 8015ff2:	f049 0902 	orrne.w	r9, r9, #2
 8015ff6:	f7ff fe21 	bl	8015c3c <rshift>
 8015ffa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015ffe:	1b76      	subs	r6, r6, r5
 8016000:	2502      	movs	r5, #2
 8016002:	f1b9 0f00 	cmp.w	r9, #0
 8016006:	d047      	beq.n	8016098 <__gethex+0x38c>
 8016008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801600c:	2b02      	cmp	r3, #2
 801600e:	d015      	beq.n	801603c <__gethex+0x330>
 8016010:	2b03      	cmp	r3, #3
 8016012:	d017      	beq.n	8016044 <__gethex+0x338>
 8016014:	2b01      	cmp	r3, #1
 8016016:	d109      	bne.n	801602c <__gethex+0x320>
 8016018:	f019 0f02 	tst.w	r9, #2
 801601c:	d006      	beq.n	801602c <__gethex+0x320>
 801601e:	f8da 3000 	ldr.w	r3, [sl]
 8016022:	ea49 0903 	orr.w	r9, r9, r3
 8016026:	f019 0f01 	tst.w	r9, #1
 801602a:	d10e      	bne.n	801604a <__gethex+0x33e>
 801602c:	f045 0510 	orr.w	r5, r5, #16
 8016030:	e032      	b.n	8016098 <__gethex+0x38c>
 8016032:	f04f 0901 	mov.w	r9, #1
 8016036:	e7d1      	b.n	8015fdc <__gethex+0x2d0>
 8016038:	2501      	movs	r5, #1
 801603a:	e7e2      	b.n	8016002 <__gethex+0x2f6>
 801603c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801603e:	f1c3 0301 	rsb	r3, r3, #1
 8016042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016046:	2b00      	cmp	r3, #0
 8016048:	d0f0      	beq.n	801602c <__gethex+0x320>
 801604a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801604e:	f104 0314 	add.w	r3, r4, #20
 8016052:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016056:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801605a:	f04f 0c00 	mov.w	ip, #0
 801605e:	4618      	mov	r0, r3
 8016060:	f853 2b04 	ldr.w	r2, [r3], #4
 8016064:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016068:	d01b      	beq.n	80160a2 <__gethex+0x396>
 801606a:	3201      	adds	r2, #1
 801606c:	6002      	str	r2, [r0, #0]
 801606e:	2d02      	cmp	r5, #2
 8016070:	f104 0314 	add.w	r3, r4, #20
 8016074:	d13c      	bne.n	80160f0 <__gethex+0x3e4>
 8016076:	f8d8 2000 	ldr.w	r2, [r8]
 801607a:	3a01      	subs	r2, #1
 801607c:	42b2      	cmp	r2, r6
 801607e:	d109      	bne.n	8016094 <__gethex+0x388>
 8016080:	1171      	asrs	r1, r6, #5
 8016082:	2201      	movs	r2, #1
 8016084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016088:	f006 061f 	and.w	r6, r6, #31
 801608c:	fa02 f606 	lsl.w	r6, r2, r6
 8016090:	421e      	tst	r6, r3
 8016092:	d13a      	bne.n	801610a <__gethex+0x3fe>
 8016094:	f045 0520 	orr.w	r5, r5, #32
 8016098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801609a:	601c      	str	r4, [r3, #0]
 801609c:	9b02      	ldr	r3, [sp, #8]
 801609e:	601f      	str	r7, [r3, #0]
 80160a0:	e6b0      	b.n	8015e04 <__gethex+0xf8>
 80160a2:	4299      	cmp	r1, r3
 80160a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80160a8:	d8d9      	bhi.n	801605e <__gethex+0x352>
 80160aa:	68a3      	ldr	r3, [r4, #8]
 80160ac:	459b      	cmp	fp, r3
 80160ae:	db17      	blt.n	80160e0 <__gethex+0x3d4>
 80160b0:	6861      	ldr	r1, [r4, #4]
 80160b2:	9801      	ldr	r0, [sp, #4]
 80160b4:	3101      	adds	r1, #1
 80160b6:	f000 f9c3 	bl	8016440 <_Balloc>
 80160ba:	4681      	mov	r9, r0
 80160bc:	b918      	cbnz	r0, 80160c6 <__gethex+0x3ba>
 80160be:	4b1a      	ldr	r3, [pc, #104]	@ (8016128 <__gethex+0x41c>)
 80160c0:	4602      	mov	r2, r0
 80160c2:	2184      	movs	r1, #132	@ 0x84
 80160c4:	e6c5      	b.n	8015e52 <__gethex+0x146>
 80160c6:	6922      	ldr	r2, [r4, #16]
 80160c8:	3202      	adds	r2, #2
 80160ca:	f104 010c 	add.w	r1, r4, #12
 80160ce:	0092      	lsls	r2, r2, #2
 80160d0:	300c      	adds	r0, #12
 80160d2:	f7fe fed4 	bl	8014e7e <memcpy>
 80160d6:	4621      	mov	r1, r4
 80160d8:	9801      	ldr	r0, [sp, #4]
 80160da:	f000 f9f1 	bl	80164c0 <_Bfree>
 80160de:	464c      	mov	r4, r9
 80160e0:	6923      	ldr	r3, [r4, #16]
 80160e2:	1c5a      	adds	r2, r3, #1
 80160e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80160e8:	6122      	str	r2, [r4, #16]
 80160ea:	2201      	movs	r2, #1
 80160ec:	615a      	str	r2, [r3, #20]
 80160ee:	e7be      	b.n	801606e <__gethex+0x362>
 80160f0:	6922      	ldr	r2, [r4, #16]
 80160f2:	455a      	cmp	r2, fp
 80160f4:	dd0b      	ble.n	801610e <__gethex+0x402>
 80160f6:	2101      	movs	r1, #1
 80160f8:	4620      	mov	r0, r4
 80160fa:	f7ff fd9f 	bl	8015c3c <rshift>
 80160fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016102:	3701      	adds	r7, #1
 8016104:	42bb      	cmp	r3, r7
 8016106:	f6ff aee0 	blt.w	8015eca <__gethex+0x1be>
 801610a:	2501      	movs	r5, #1
 801610c:	e7c2      	b.n	8016094 <__gethex+0x388>
 801610e:	f016 061f 	ands.w	r6, r6, #31
 8016112:	d0fa      	beq.n	801610a <__gethex+0x3fe>
 8016114:	4453      	add	r3, sl
 8016116:	f1c6 0620 	rsb	r6, r6, #32
 801611a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801611e:	f000 fa81 	bl	8016624 <__hi0bits>
 8016122:	42b0      	cmp	r0, r6
 8016124:	dbe7      	blt.n	80160f6 <__gethex+0x3ea>
 8016126:	e7f0      	b.n	801610a <__gethex+0x3fe>
 8016128:	08017c10 	.word	0x08017c10

0801612c <L_shift>:
 801612c:	f1c2 0208 	rsb	r2, r2, #8
 8016130:	0092      	lsls	r2, r2, #2
 8016132:	b570      	push	{r4, r5, r6, lr}
 8016134:	f1c2 0620 	rsb	r6, r2, #32
 8016138:	6843      	ldr	r3, [r0, #4]
 801613a:	6804      	ldr	r4, [r0, #0]
 801613c:	fa03 f506 	lsl.w	r5, r3, r6
 8016140:	432c      	orrs	r4, r5
 8016142:	40d3      	lsrs	r3, r2
 8016144:	6004      	str	r4, [r0, #0]
 8016146:	f840 3f04 	str.w	r3, [r0, #4]!
 801614a:	4288      	cmp	r0, r1
 801614c:	d3f4      	bcc.n	8016138 <L_shift+0xc>
 801614e:	bd70      	pop	{r4, r5, r6, pc}

08016150 <__match>:
 8016150:	b530      	push	{r4, r5, lr}
 8016152:	6803      	ldr	r3, [r0, #0]
 8016154:	3301      	adds	r3, #1
 8016156:	f811 4b01 	ldrb.w	r4, [r1], #1
 801615a:	b914      	cbnz	r4, 8016162 <__match+0x12>
 801615c:	6003      	str	r3, [r0, #0]
 801615e:	2001      	movs	r0, #1
 8016160:	bd30      	pop	{r4, r5, pc}
 8016162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016166:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801616a:	2d19      	cmp	r5, #25
 801616c:	bf98      	it	ls
 801616e:	3220      	addls	r2, #32
 8016170:	42a2      	cmp	r2, r4
 8016172:	d0f0      	beq.n	8016156 <__match+0x6>
 8016174:	2000      	movs	r0, #0
 8016176:	e7f3      	b.n	8016160 <__match+0x10>

08016178 <__hexnan>:
 8016178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801617c:	680b      	ldr	r3, [r1, #0]
 801617e:	6801      	ldr	r1, [r0, #0]
 8016180:	115e      	asrs	r6, r3, #5
 8016182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016186:	f013 031f 	ands.w	r3, r3, #31
 801618a:	b087      	sub	sp, #28
 801618c:	bf18      	it	ne
 801618e:	3604      	addne	r6, #4
 8016190:	2500      	movs	r5, #0
 8016192:	1f37      	subs	r7, r6, #4
 8016194:	4682      	mov	sl, r0
 8016196:	4690      	mov	r8, r2
 8016198:	9301      	str	r3, [sp, #4]
 801619a:	f846 5c04 	str.w	r5, [r6, #-4]
 801619e:	46b9      	mov	r9, r7
 80161a0:	463c      	mov	r4, r7
 80161a2:	9502      	str	r5, [sp, #8]
 80161a4:	46ab      	mov	fp, r5
 80161a6:	784a      	ldrb	r2, [r1, #1]
 80161a8:	1c4b      	adds	r3, r1, #1
 80161aa:	9303      	str	r3, [sp, #12]
 80161ac:	b342      	cbz	r2, 8016200 <__hexnan+0x88>
 80161ae:	4610      	mov	r0, r2
 80161b0:	9105      	str	r1, [sp, #20]
 80161b2:	9204      	str	r2, [sp, #16]
 80161b4:	f7ff fd94 	bl	8015ce0 <__hexdig_fun>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	d151      	bne.n	8016260 <__hexnan+0xe8>
 80161bc:	9a04      	ldr	r2, [sp, #16]
 80161be:	9905      	ldr	r1, [sp, #20]
 80161c0:	2a20      	cmp	r2, #32
 80161c2:	d818      	bhi.n	80161f6 <__hexnan+0x7e>
 80161c4:	9b02      	ldr	r3, [sp, #8]
 80161c6:	459b      	cmp	fp, r3
 80161c8:	dd13      	ble.n	80161f2 <__hexnan+0x7a>
 80161ca:	454c      	cmp	r4, r9
 80161cc:	d206      	bcs.n	80161dc <__hexnan+0x64>
 80161ce:	2d07      	cmp	r5, #7
 80161d0:	dc04      	bgt.n	80161dc <__hexnan+0x64>
 80161d2:	462a      	mov	r2, r5
 80161d4:	4649      	mov	r1, r9
 80161d6:	4620      	mov	r0, r4
 80161d8:	f7ff ffa8 	bl	801612c <L_shift>
 80161dc:	4544      	cmp	r4, r8
 80161de:	d952      	bls.n	8016286 <__hexnan+0x10e>
 80161e0:	2300      	movs	r3, #0
 80161e2:	f1a4 0904 	sub.w	r9, r4, #4
 80161e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80161ea:	f8cd b008 	str.w	fp, [sp, #8]
 80161ee:	464c      	mov	r4, r9
 80161f0:	461d      	mov	r5, r3
 80161f2:	9903      	ldr	r1, [sp, #12]
 80161f4:	e7d7      	b.n	80161a6 <__hexnan+0x2e>
 80161f6:	2a29      	cmp	r2, #41	@ 0x29
 80161f8:	d157      	bne.n	80162aa <__hexnan+0x132>
 80161fa:	3102      	adds	r1, #2
 80161fc:	f8ca 1000 	str.w	r1, [sl]
 8016200:	f1bb 0f00 	cmp.w	fp, #0
 8016204:	d051      	beq.n	80162aa <__hexnan+0x132>
 8016206:	454c      	cmp	r4, r9
 8016208:	d206      	bcs.n	8016218 <__hexnan+0xa0>
 801620a:	2d07      	cmp	r5, #7
 801620c:	dc04      	bgt.n	8016218 <__hexnan+0xa0>
 801620e:	462a      	mov	r2, r5
 8016210:	4649      	mov	r1, r9
 8016212:	4620      	mov	r0, r4
 8016214:	f7ff ff8a 	bl	801612c <L_shift>
 8016218:	4544      	cmp	r4, r8
 801621a:	d936      	bls.n	801628a <__hexnan+0x112>
 801621c:	f1a8 0204 	sub.w	r2, r8, #4
 8016220:	4623      	mov	r3, r4
 8016222:	f853 1b04 	ldr.w	r1, [r3], #4
 8016226:	f842 1f04 	str.w	r1, [r2, #4]!
 801622a:	429f      	cmp	r7, r3
 801622c:	d2f9      	bcs.n	8016222 <__hexnan+0xaa>
 801622e:	1b3b      	subs	r3, r7, r4
 8016230:	f023 0303 	bic.w	r3, r3, #3
 8016234:	3304      	adds	r3, #4
 8016236:	3401      	adds	r4, #1
 8016238:	3e03      	subs	r6, #3
 801623a:	42b4      	cmp	r4, r6
 801623c:	bf88      	it	hi
 801623e:	2304      	movhi	r3, #4
 8016240:	4443      	add	r3, r8
 8016242:	2200      	movs	r2, #0
 8016244:	f843 2b04 	str.w	r2, [r3], #4
 8016248:	429f      	cmp	r7, r3
 801624a:	d2fb      	bcs.n	8016244 <__hexnan+0xcc>
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	b91b      	cbnz	r3, 8016258 <__hexnan+0xe0>
 8016250:	4547      	cmp	r7, r8
 8016252:	d128      	bne.n	80162a6 <__hexnan+0x12e>
 8016254:	2301      	movs	r3, #1
 8016256:	603b      	str	r3, [r7, #0]
 8016258:	2005      	movs	r0, #5
 801625a:	b007      	add	sp, #28
 801625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016260:	3501      	adds	r5, #1
 8016262:	2d08      	cmp	r5, #8
 8016264:	f10b 0b01 	add.w	fp, fp, #1
 8016268:	dd06      	ble.n	8016278 <__hexnan+0x100>
 801626a:	4544      	cmp	r4, r8
 801626c:	d9c1      	bls.n	80161f2 <__hexnan+0x7a>
 801626e:	2300      	movs	r3, #0
 8016270:	f844 3c04 	str.w	r3, [r4, #-4]
 8016274:	2501      	movs	r5, #1
 8016276:	3c04      	subs	r4, #4
 8016278:	6822      	ldr	r2, [r4, #0]
 801627a:	f000 000f 	and.w	r0, r0, #15
 801627e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016282:	6020      	str	r0, [r4, #0]
 8016284:	e7b5      	b.n	80161f2 <__hexnan+0x7a>
 8016286:	2508      	movs	r5, #8
 8016288:	e7b3      	b.n	80161f2 <__hexnan+0x7a>
 801628a:	9b01      	ldr	r3, [sp, #4]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d0dd      	beq.n	801624c <__hexnan+0xd4>
 8016290:	f1c3 0320 	rsb	r3, r3, #32
 8016294:	f04f 32ff 	mov.w	r2, #4294967295
 8016298:	40da      	lsrs	r2, r3
 801629a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801629e:	4013      	ands	r3, r2
 80162a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80162a4:	e7d2      	b.n	801624c <__hexnan+0xd4>
 80162a6:	3f04      	subs	r7, #4
 80162a8:	e7d0      	b.n	801624c <__hexnan+0xd4>
 80162aa:	2004      	movs	r0, #4
 80162ac:	e7d5      	b.n	801625a <__hexnan+0xe2>
	...

080162b0 <malloc>:
 80162b0:	4b02      	ldr	r3, [pc, #8]	@ (80162bc <malloc+0xc>)
 80162b2:	4601      	mov	r1, r0
 80162b4:	6818      	ldr	r0, [r3, #0]
 80162b6:	f000 b825 	b.w	8016304 <_malloc_r>
 80162ba:	bf00      	nop
 80162bc:	2000018c 	.word	0x2000018c

080162c0 <sbrk_aligned>:
 80162c0:	b570      	push	{r4, r5, r6, lr}
 80162c2:	4e0f      	ldr	r6, [pc, #60]	@ (8016300 <sbrk_aligned+0x40>)
 80162c4:	460c      	mov	r4, r1
 80162c6:	6831      	ldr	r1, [r6, #0]
 80162c8:	4605      	mov	r5, r0
 80162ca:	b911      	cbnz	r1, 80162d2 <sbrk_aligned+0x12>
 80162cc:	f001 f964 	bl	8017598 <_sbrk_r>
 80162d0:	6030      	str	r0, [r6, #0]
 80162d2:	4621      	mov	r1, r4
 80162d4:	4628      	mov	r0, r5
 80162d6:	f001 f95f 	bl	8017598 <_sbrk_r>
 80162da:	1c43      	adds	r3, r0, #1
 80162dc:	d103      	bne.n	80162e6 <sbrk_aligned+0x26>
 80162de:	f04f 34ff 	mov.w	r4, #4294967295
 80162e2:	4620      	mov	r0, r4
 80162e4:	bd70      	pop	{r4, r5, r6, pc}
 80162e6:	1cc4      	adds	r4, r0, #3
 80162e8:	f024 0403 	bic.w	r4, r4, #3
 80162ec:	42a0      	cmp	r0, r4
 80162ee:	d0f8      	beq.n	80162e2 <sbrk_aligned+0x22>
 80162f0:	1a21      	subs	r1, r4, r0
 80162f2:	4628      	mov	r0, r5
 80162f4:	f001 f950 	bl	8017598 <_sbrk_r>
 80162f8:	3001      	adds	r0, #1
 80162fa:	d1f2      	bne.n	80162e2 <sbrk_aligned+0x22>
 80162fc:	e7ef      	b.n	80162de <sbrk_aligned+0x1e>
 80162fe:	bf00      	nop
 8016300:	2000e52c 	.word	0x2000e52c

08016304 <_malloc_r>:
 8016304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016308:	1ccd      	adds	r5, r1, #3
 801630a:	f025 0503 	bic.w	r5, r5, #3
 801630e:	3508      	adds	r5, #8
 8016310:	2d0c      	cmp	r5, #12
 8016312:	bf38      	it	cc
 8016314:	250c      	movcc	r5, #12
 8016316:	2d00      	cmp	r5, #0
 8016318:	4606      	mov	r6, r0
 801631a:	db01      	blt.n	8016320 <_malloc_r+0x1c>
 801631c:	42a9      	cmp	r1, r5
 801631e:	d904      	bls.n	801632a <_malloc_r+0x26>
 8016320:	230c      	movs	r3, #12
 8016322:	6033      	str	r3, [r6, #0]
 8016324:	2000      	movs	r0, #0
 8016326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801632a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016400 <_malloc_r+0xfc>
 801632e:	f000 f87b 	bl	8016428 <__malloc_lock>
 8016332:	f8d8 3000 	ldr.w	r3, [r8]
 8016336:	461c      	mov	r4, r3
 8016338:	bb44      	cbnz	r4, 801638c <_malloc_r+0x88>
 801633a:	4629      	mov	r1, r5
 801633c:	4630      	mov	r0, r6
 801633e:	f7ff ffbf 	bl	80162c0 <sbrk_aligned>
 8016342:	1c43      	adds	r3, r0, #1
 8016344:	4604      	mov	r4, r0
 8016346:	d158      	bne.n	80163fa <_malloc_r+0xf6>
 8016348:	f8d8 4000 	ldr.w	r4, [r8]
 801634c:	4627      	mov	r7, r4
 801634e:	2f00      	cmp	r7, #0
 8016350:	d143      	bne.n	80163da <_malloc_r+0xd6>
 8016352:	2c00      	cmp	r4, #0
 8016354:	d04b      	beq.n	80163ee <_malloc_r+0xea>
 8016356:	6823      	ldr	r3, [r4, #0]
 8016358:	4639      	mov	r1, r7
 801635a:	4630      	mov	r0, r6
 801635c:	eb04 0903 	add.w	r9, r4, r3
 8016360:	f001 f91a 	bl	8017598 <_sbrk_r>
 8016364:	4581      	cmp	r9, r0
 8016366:	d142      	bne.n	80163ee <_malloc_r+0xea>
 8016368:	6821      	ldr	r1, [r4, #0]
 801636a:	1a6d      	subs	r5, r5, r1
 801636c:	4629      	mov	r1, r5
 801636e:	4630      	mov	r0, r6
 8016370:	f7ff ffa6 	bl	80162c0 <sbrk_aligned>
 8016374:	3001      	adds	r0, #1
 8016376:	d03a      	beq.n	80163ee <_malloc_r+0xea>
 8016378:	6823      	ldr	r3, [r4, #0]
 801637a:	442b      	add	r3, r5
 801637c:	6023      	str	r3, [r4, #0]
 801637e:	f8d8 3000 	ldr.w	r3, [r8]
 8016382:	685a      	ldr	r2, [r3, #4]
 8016384:	bb62      	cbnz	r2, 80163e0 <_malloc_r+0xdc>
 8016386:	f8c8 7000 	str.w	r7, [r8]
 801638a:	e00f      	b.n	80163ac <_malloc_r+0xa8>
 801638c:	6822      	ldr	r2, [r4, #0]
 801638e:	1b52      	subs	r2, r2, r5
 8016390:	d420      	bmi.n	80163d4 <_malloc_r+0xd0>
 8016392:	2a0b      	cmp	r2, #11
 8016394:	d917      	bls.n	80163c6 <_malloc_r+0xc2>
 8016396:	1961      	adds	r1, r4, r5
 8016398:	42a3      	cmp	r3, r4
 801639a:	6025      	str	r5, [r4, #0]
 801639c:	bf18      	it	ne
 801639e:	6059      	strne	r1, [r3, #4]
 80163a0:	6863      	ldr	r3, [r4, #4]
 80163a2:	bf08      	it	eq
 80163a4:	f8c8 1000 	streq.w	r1, [r8]
 80163a8:	5162      	str	r2, [r4, r5]
 80163aa:	604b      	str	r3, [r1, #4]
 80163ac:	4630      	mov	r0, r6
 80163ae:	f000 f841 	bl	8016434 <__malloc_unlock>
 80163b2:	f104 000b 	add.w	r0, r4, #11
 80163b6:	1d23      	adds	r3, r4, #4
 80163b8:	f020 0007 	bic.w	r0, r0, #7
 80163bc:	1ac2      	subs	r2, r0, r3
 80163be:	bf1c      	itt	ne
 80163c0:	1a1b      	subne	r3, r3, r0
 80163c2:	50a3      	strne	r3, [r4, r2]
 80163c4:	e7af      	b.n	8016326 <_malloc_r+0x22>
 80163c6:	6862      	ldr	r2, [r4, #4]
 80163c8:	42a3      	cmp	r3, r4
 80163ca:	bf0c      	ite	eq
 80163cc:	f8c8 2000 	streq.w	r2, [r8]
 80163d0:	605a      	strne	r2, [r3, #4]
 80163d2:	e7eb      	b.n	80163ac <_malloc_r+0xa8>
 80163d4:	4623      	mov	r3, r4
 80163d6:	6864      	ldr	r4, [r4, #4]
 80163d8:	e7ae      	b.n	8016338 <_malloc_r+0x34>
 80163da:	463c      	mov	r4, r7
 80163dc:	687f      	ldr	r7, [r7, #4]
 80163de:	e7b6      	b.n	801634e <_malloc_r+0x4a>
 80163e0:	461a      	mov	r2, r3
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	42a3      	cmp	r3, r4
 80163e6:	d1fb      	bne.n	80163e0 <_malloc_r+0xdc>
 80163e8:	2300      	movs	r3, #0
 80163ea:	6053      	str	r3, [r2, #4]
 80163ec:	e7de      	b.n	80163ac <_malloc_r+0xa8>
 80163ee:	230c      	movs	r3, #12
 80163f0:	6033      	str	r3, [r6, #0]
 80163f2:	4630      	mov	r0, r6
 80163f4:	f000 f81e 	bl	8016434 <__malloc_unlock>
 80163f8:	e794      	b.n	8016324 <_malloc_r+0x20>
 80163fa:	6005      	str	r5, [r0, #0]
 80163fc:	e7d6      	b.n	80163ac <_malloc_r+0xa8>
 80163fe:	bf00      	nop
 8016400:	2000e530 	.word	0x2000e530

08016404 <__ascii_mbtowc>:
 8016404:	b082      	sub	sp, #8
 8016406:	b901      	cbnz	r1, 801640a <__ascii_mbtowc+0x6>
 8016408:	a901      	add	r1, sp, #4
 801640a:	b142      	cbz	r2, 801641e <__ascii_mbtowc+0x1a>
 801640c:	b14b      	cbz	r3, 8016422 <__ascii_mbtowc+0x1e>
 801640e:	7813      	ldrb	r3, [r2, #0]
 8016410:	600b      	str	r3, [r1, #0]
 8016412:	7812      	ldrb	r2, [r2, #0]
 8016414:	1e10      	subs	r0, r2, #0
 8016416:	bf18      	it	ne
 8016418:	2001      	movne	r0, #1
 801641a:	b002      	add	sp, #8
 801641c:	4770      	bx	lr
 801641e:	4610      	mov	r0, r2
 8016420:	e7fb      	b.n	801641a <__ascii_mbtowc+0x16>
 8016422:	f06f 0001 	mvn.w	r0, #1
 8016426:	e7f8      	b.n	801641a <__ascii_mbtowc+0x16>

08016428 <__malloc_lock>:
 8016428:	4801      	ldr	r0, [pc, #4]	@ (8016430 <__malloc_lock+0x8>)
 801642a:	f7fe bd26 	b.w	8014e7a <__retarget_lock_acquire_recursive>
 801642e:	bf00      	nop
 8016430:	2000e528 	.word	0x2000e528

08016434 <__malloc_unlock>:
 8016434:	4801      	ldr	r0, [pc, #4]	@ (801643c <__malloc_unlock+0x8>)
 8016436:	f7fe bd21 	b.w	8014e7c <__retarget_lock_release_recursive>
 801643a:	bf00      	nop
 801643c:	2000e528 	.word	0x2000e528

08016440 <_Balloc>:
 8016440:	b570      	push	{r4, r5, r6, lr}
 8016442:	69c6      	ldr	r6, [r0, #28]
 8016444:	4604      	mov	r4, r0
 8016446:	460d      	mov	r5, r1
 8016448:	b976      	cbnz	r6, 8016468 <_Balloc+0x28>
 801644a:	2010      	movs	r0, #16
 801644c:	f7ff ff30 	bl	80162b0 <malloc>
 8016450:	4602      	mov	r2, r0
 8016452:	61e0      	str	r0, [r4, #28]
 8016454:	b920      	cbnz	r0, 8016460 <_Balloc+0x20>
 8016456:	4b18      	ldr	r3, [pc, #96]	@ (80164b8 <_Balloc+0x78>)
 8016458:	4818      	ldr	r0, [pc, #96]	@ (80164bc <_Balloc+0x7c>)
 801645a:	216b      	movs	r1, #107	@ 0x6b
 801645c:	f7fe fd2e 	bl	8014ebc <__assert_func>
 8016460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016464:	6006      	str	r6, [r0, #0]
 8016466:	60c6      	str	r6, [r0, #12]
 8016468:	69e6      	ldr	r6, [r4, #28]
 801646a:	68f3      	ldr	r3, [r6, #12]
 801646c:	b183      	cbz	r3, 8016490 <_Balloc+0x50>
 801646e:	69e3      	ldr	r3, [r4, #28]
 8016470:	68db      	ldr	r3, [r3, #12]
 8016472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016476:	b9b8      	cbnz	r0, 80164a8 <_Balloc+0x68>
 8016478:	2101      	movs	r1, #1
 801647a:	fa01 f605 	lsl.w	r6, r1, r5
 801647e:	1d72      	adds	r2, r6, #5
 8016480:	0092      	lsls	r2, r2, #2
 8016482:	4620      	mov	r0, r4
 8016484:	f001 f89f 	bl	80175c6 <_calloc_r>
 8016488:	b160      	cbz	r0, 80164a4 <_Balloc+0x64>
 801648a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801648e:	e00e      	b.n	80164ae <_Balloc+0x6e>
 8016490:	2221      	movs	r2, #33	@ 0x21
 8016492:	2104      	movs	r1, #4
 8016494:	4620      	mov	r0, r4
 8016496:	f001 f896 	bl	80175c6 <_calloc_r>
 801649a:	69e3      	ldr	r3, [r4, #28]
 801649c:	60f0      	str	r0, [r6, #12]
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d1e4      	bne.n	801646e <_Balloc+0x2e>
 80164a4:	2000      	movs	r0, #0
 80164a6:	bd70      	pop	{r4, r5, r6, pc}
 80164a8:	6802      	ldr	r2, [r0, #0]
 80164aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164ae:	2300      	movs	r3, #0
 80164b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164b4:	e7f7      	b.n	80164a6 <_Balloc+0x66>
 80164b6:	bf00      	nop
 80164b8:	08017af6 	.word	0x08017af6
 80164bc:	08017c81 	.word	0x08017c81

080164c0 <_Bfree>:
 80164c0:	b570      	push	{r4, r5, r6, lr}
 80164c2:	69c6      	ldr	r6, [r0, #28]
 80164c4:	4605      	mov	r5, r0
 80164c6:	460c      	mov	r4, r1
 80164c8:	b976      	cbnz	r6, 80164e8 <_Bfree+0x28>
 80164ca:	2010      	movs	r0, #16
 80164cc:	f7ff fef0 	bl	80162b0 <malloc>
 80164d0:	4602      	mov	r2, r0
 80164d2:	61e8      	str	r0, [r5, #28]
 80164d4:	b920      	cbnz	r0, 80164e0 <_Bfree+0x20>
 80164d6:	4b09      	ldr	r3, [pc, #36]	@ (80164fc <_Bfree+0x3c>)
 80164d8:	4809      	ldr	r0, [pc, #36]	@ (8016500 <_Bfree+0x40>)
 80164da:	218f      	movs	r1, #143	@ 0x8f
 80164dc:	f7fe fcee 	bl	8014ebc <__assert_func>
 80164e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164e4:	6006      	str	r6, [r0, #0]
 80164e6:	60c6      	str	r6, [r0, #12]
 80164e8:	b13c      	cbz	r4, 80164fa <_Bfree+0x3a>
 80164ea:	69eb      	ldr	r3, [r5, #28]
 80164ec:	6862      	ldr	r2, [r4, #4]
 80164ee:	68db      	ldr	r3, [r3, #12]
 80164f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164f4:	6021      	str	r1, [r4, #0]
 80164f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	08017af6 	.word	0x08017af6
 8016500:	08017c81 	.word	0x08017c81

08016504 <__multadd>:
 8016504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016508:	690d      	ldr	r5, [r1, #16]
 801650a:	4607      	mov	r7, r0
 801650c:	460c      	mov	r4, r1
 801650e:	461e      	mov	r6, r3
 8016510:	f101 0c14 	add.w	ip, r1, #20
 8016514:	2000      	movs	r0, #0
 8016516:	f8dc 3000 	ldr.w	r3, [ip]
 801651a:	b299      	uxth	r1, r3
 801651c:	fb02 6101 	mla	r1, r2, r1, r6
 8016520:	0c1e      	lsrs	r6, r3, #16
 8016522:	0c0b      	lsrs	r3, r1, #16
 8016524:	fb02 3306 	mla	r3, r2, r6, r3
 8016528:	b289      	uxth	r1, r1
 801652a:	3001      	adds	r0, #1
 801652c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016530:	4285      	cmp	r5, r0
 8016532:	f84c 1b04 	str.w	r1, [ip], #4
 8016536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801653a:	dcec      	bgt.n	8016516 <__multadd+0x12>
 801653c:	b30e      	cbz	r6, 8016582 <__multadd+0x7e>
 801653e:	68a3      	ldr	r3, [r4, #8]
 8016540:	42ab      	cmp	r3, r5
 8016542:	dc19      	bgt.n	8016578 <__multadd+0x74>
 8016544:	6861      	ldr	r1, [r4, #4]
 8016546:	4638      	mov	r0, r7
 8016548:	3101      	adds	r1, #1
 801654a:	f7ff ff79 	bl	8016440 <_Balloc>
 801654e:	4680      	mov	r8, r0
 8016550:	b928      	cbnz	r0, 801655e <__multadd+0x5a>
 8016552:	4602      	mov	r2, r0
 8016554:	4b0c      	ldr	r3, [pc, #48]	@ (8016588 <__multadd+0x84>)
 8016556:	480d      	ldr	r0, [pc, #52]	@ (801658c <__multadd+0x88>)
 8016558:	21ba      	movs	r1, #186	@ 0xba
 801655a:	f7fe fcaf 	bl	8014ebc <__assert_func>
 801655e:	6922      	ldr	r2, [r4, #16]
 8016560:	3202      	adds	r2, #2
 8016562:	f104 010c 	add.w	r1, r4, #12
 8016566:	0092      	lsls	r2, r2, #2
 8016568:	300c      	adds	r0, #12
 801656a:	f7fe fc88 	bl	8014e7e <memcpy>
 801656e:	4621      	mov	r1, r4
 8016570:	4638      	mov	r0, r7
 8016572:	f7ff ffa5 	bl	80164c0 <_Bfree>
 8016576:	4644      	mov	r4, r8
 8016578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801657c:	3501      	adds	r5, #1
 801657e:	615e      	str	r6, [r3, #20]
 8016580:	6125      	str	r5, [r4, #16]
 8016582:	4620      	mov	r0, r4
 8016584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016588:	08017c10 	.word	0x08017c10
 801658c:	08017c81 	.word	0x08017c81

08016590 <__s2b>:
 8016590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016594:	460c      	mov	r4, r1
 8016596:	4615      	mov	r5, r2
 8016598:	461f      	mov	r7, r3
 801659a:	2209      	movs	r2, #9
 801659c:	3308      	adds	r3, #8
 801659e:	4606      	mov	r6, r0
 80165a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80165a4:	2100      	movs	r1, #0
 80165a6:	2201      	movs	r2, #1
 80165a8:	429a      	cmp	r2, r3
 80165aa:	db09      	blt.n	80165c0 <__s2b+0x30>
 80165ac:	4630      	mov	r0, r6
 80165ae:	f7ff ff47 	bl	8016440 <_Balloc>
 80165b2:	b940      	cbnz	r0, 80165c6 <__s2b+0x36>
 80165b4:	4602      	mov	r2, r0
 80165b6:	4b19      	ldr	r3, [pc, #100]	@ (801661c <__s2b+0x8c>)
 80165b8:	4819      	ldr	r0, [pc, #100]	@ (8016620 <__s2b+0x90>)
 80165ba:	21d3      	movs	r1, #211	@ 0xd3
 80165bc:	f7fe fc7e 	bl	8014ebc <__assert_func>
 80165c0:	0052      	lsls	r2, r2, #1
 80165c2:	3101      	adds	r1, #1
 80165c4:	e7f0      	b.n	80165a8 <__s2b+0x18>
 80165c6:	9b08      	ldr	r3, [sp, #32]
 80165c8:	6143      	str	r3, [r0, #20]
 80165ca:	2d09      	cmp	r5, #9
 80165cc:	f04f 0301 	mov.w	r3, #1
 80165d0:	6103      	str	r3, [r0, #16]
 80165d2:	dd16      	ble.n	8016602 <__s2b+0x72>
 80165d4:	f104 0909 	add.w	r9, r4, #9
 80165d8:	46c8      	mov	r8, r9
 80165da:	442c      	add	r4, r5
 80165dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80165e0:	4601      	mov	r1, r0
 80165e2:	3b30      	subs	r3, #48	@ 0x30
 80165e4:	220a      	movs	r2, #10
 80165e6:	4630      	mov	r0, r6
 80165e8:	f7ff ff8c 	bl	8016504 <__multadd>
 80165ec:	45a0      	cmp	r8, r4
 80165ee:	d1f5      	bne.n	80165dc <__s2b+0x4c>
 80165f0:	f1a5 0408 	sub.w	r4, r5, #8
 80165f4:	444c      	add	r4, r9
 80165f6:	1b2d      	subs	r5, r5, r4
 80165f8:	1963      	adds	r3, r4, r5
 80165fa:	42bb      	cmp	r3, r7
 80165fc:	db04      	blt.n	8016608 <__s2b+0x78>
 80165fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016602:	340a      	adds	r4, #10
 8016604:	2509      	movs	r5, #9
 8016606:	e7f6      	b.n	80165f6 <__s2b+0x66>
 8016608:	f814 3b01 	ldrb.w	r3, [r4], #1
 801660c:	4601      	mov	r1, r0
 801660e:	3b30      	subs	r3, #48	@ 0x30
 8016610:	220a      	movs	r2, #10
 8016612:	4630      	mov	r0, r6
 8016614:	f7ff ff76 	bl	8016504 <__multadd>
 8016618:	e7ee      	b.n	80165f8 <__s2b+0x68>
 801661a:	bf00      	nop
 801661c:	08017c10 	.word	0x08017c10
 8016620:	08017c81 	.word	0x08017c81

08016624 <__hi0bits>:
 8016624:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016628:	4603      	mov	r3, r0
 801662a:	bf36      	itet	cc
 801662c:	0403      	lslcc	r3, r0, #16
 801662e:	2000      	movcs	r0, #0
 8016630:	2010      	movcc	r0, #16
 8016632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016636:	bf3c      	itt	cc
 8016638:	021b      	lslcc	r3, r3, #8
 801663a:	3008      	addcc	r0, #8
 801663c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016640:	bf3c      	itt	cc
 8016642:	011b      	lslcc	r3, r3, #4
 8016644:	3004      	addcc	r0, #4
 8016646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801664a:	bf3c      	itt	cc
 801664c:	009b      	lslcc	r3, r3, #2
 801664e:	3002      	addcc	r0, #2
 8016650:	2b00      	cmp	r3, #0
 8016652:	db05      	blt.n	8016660 <__hi0bits+0x3c>
 8016654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016658:	f100 0001 	add.w	r0, r0, #1
 801665c:	bf08      	it	eq
 801665e:	2020      	moveq	r0, #32
 8016660:	4770      	bx	lr

08016662 <__lo0bits>:
 8016662:	6803      	ldr	r3, [r0, #0]
 8016664:	4602      	mov	r2, r0
 8016666:	f013 0007 	ands.w	r0, r3, #7
 801666a:	d00b      	beq.n	8016684 <__lo0bits+0x22>
 801666c:	07d9      	lsls	r1, r3, #31
 801666e:	d421      	bmi.n	80166b4 <__lo0bits+0x52>
 8016670:	0798      	lsls	r0, r3, #30
 8016672:	bf49      	itett	mi
 8016674:	085b      	lsrmi	r3, r3, #1
 8016676:	089b      	lsrpl	r3, r3, #2
 8016678:	2001      	movmi	r0, #1
 801667a:	6013      	strmi	r3, [r2, #0]
 801667c:	bf5c      	itt	pl
 801667e:	6013      	strpl	r3, [r2, #0]
 8016680:	2002      	movpl	r0, #2
 8016682:	4770      	bx	lr
 8016684:	b299      	uxth	r1, r3
 8016686:	b909      	cbnz	r1, 801668c <__lo0bits+0x2a>
 8016688:	0c1b      	lsrs	r3, r3, #16
 801668a:	2010      	movs	r0, #16
 801668c:	b2d9      	uxtb	r1, r3
 801668e:	b909      	cbnz	r1, 8016694 <__lo0bits+0x32>
 8016690:	3008      	adds	r0, #8
 8016692:	0a1b      	lsrs	r3, r3, #8
 8016694:	0719      	lsls	r1, r3, #28
 8016696:	bf04      	itt	eq
 8016698:	091b      	lsreq	r3, r3, #4
 801669a:	3004      	addeq	r0, #4
 801669c:	0799      	lsls	r1, r3, #30
 801669e:	bf04      	itt	eq
 80166a0:	089b      	lsreq	r3, r3, #2
 80166a2:	3002      	addeq	r0, #2
 80166a4:	07d9      	lsls	r1, r3, #31
 80166a6:	d403      	bmi.n	80166b0 <__lo0bits+0x4e>
 80166a8:	085b      	lsrs	r3, r3, #1
 80166aa:	f100 0001 	add.w	r0, r0, #1
 80166ae:	d003      	beq.n	80166b8 <__lo0bits+0x56>
 80166b0:	6013      	str	r3, [r2, #0]
 80166b2:	4770      	bx	lr
 80166b4:	2000      	movs	r0, #0
 80166b6:	4770      	bx	lr
 80166b8:	2020      	movs	r0, #32
 80166ba:	4770      	bx	lr

080166bc <__i2b>:
 80166bc:	b510      	push	{r4, lr}
 80166be:	460c      	mov	r4, r1
 80166c0:	2101      	movs	r1, #1
 80166c2:	f7ff febd 	bl	8016440 <_Balloc>
 80166c6:	4602      	mov	r2, r0
 80166c8:	b928      	cbnz	r0, 80166d6 <__i2b+0x1a>
 80166ca:	4b05      	ldr	r3, [pc, #20]	@ (80166e0 <__i2b+0x24>)
 80166cc:	4805      	ldr	r0, [pc, #20]	@ (80166e4 <__i2b+0x28>)
 80166ce:	f240 1145 	movw	r1, #325	@ 0x145
 80166d2:	f7fe fbf3 	bl	8014ebc <__assert_func>
 80166d6:	2301      	movs	r3, #1
 80166d8:	6144      	str	r4, [r0, #20]
 80166da:	6103      	str	r3, [r0, #16]
 80166dc:	bd10      	pop	{r4, pc}
 80166de:	bf00      	nop
 80166e0:	08017c10 	.word	0x08017c10
 80166e4:	08017c81 	.word	0x08017c81

080166e8 <__multiply>:
 80166e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ec:	4617      	mov	r7, r2
 80166ee:	690a      	ldr	r2, [r1, #16]
 80166f0:	693b      	ldr	r3, [r7, #16]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	bfa8      	it	ge
 80166f6:	463b      	movge	r3, r7
 80166f8:	4689      	mov	r9, r1
 80166fa:	bfa4      	itt	ge
 80166fc:	460f      	movge	r7, r1
 80166fe:	4699      	movge	r9, r3
 8016700:	693d      	ldr	r5, [r7, #16]
 8016702:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	6879      	ldr	r1, [r7, #4]
 801670a:	eb05 060a 	add.w	r6, r5, sl
 801670e:	42b3      	cmp	r3, r6
 8016710:	b085      	sub	sp, #20
 8016712:	bfb8      	it	lt
 8016714:	3101      	addlt	r1, #1
 8016716:	f7ff fe93 	bl	8016440 <_Balloc>
 801671a:	b930      	cbnz	r0, 801672a <__multiply+0x42>
 801671c:	4602      	mov	r2, r0
 801671e:	4b41      	ldr	r3, [pc, #260]	@ (8016824 <__multiply+0x13c>)
 8016720:	4841      	ldr	r0, [pc, #260]	@ (8016828 <__multiply+0x140>)
 8016722:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016726:	f7fe fbc9 	bl	8014ebc <__assert_func>
 801672a:	f100 0414 	add.w	r4, r0, #20
 801672e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016732:	4623      	mov	r3, r4
 8016734:	2200      	movs	r2, #0
 8016736:	4573      	cmp	r3, lr
 8016738:	d320      	bcc.n	801677c <__multiply+0x94>
 801673a:	f107 0814 	add.w	r8, r7, #20
 801673e:	f109 0114 	add.w	r1, r9, #20
 8016742:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016746:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801674a:	9302      	str	r3, [sp, #8]
 801674c:	1beb      	subs	r3, r5, r7
 801674e:	3b15      	subs	r3, #21
 8016750:	f023 0303 	bic.w	r3, r3, #3
 8016754:	3304      	adds	r3, #4
 8016756:	3715      	adds	r7, #21
 8016758:	42bd      	cmp	r5, r7
 801675a:	bf38      	it	cc
 801675c:	2304      	movcc	r3, #4
 801675e:	9301      	str	r3, [sp, #4]
 8016760:	9b02      	ldr	r3, [sp, #8]
 8016762:	9103      	str	r1, [sp, #12]
 8016764:	428b      	cmp	r3, r1
 8016766:	d80c      	bhi.n	8016782 <__multiply+0x9a>
 8016768:	2e00      	cmp	r6, #0
 801676a:	dd03      	ble.n	8016774 <__multiply+0x8c>
 801676c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016770:	2b00      	cmp	r3, #0
 8016772:	d055      	beq.n	8016820 <__multiply+0x138>
 8016774:	6106      	str	r6, [r0, #16]
 8016776:	b005      	add	sp, #20
 8016778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677c:	f843 2b04 	str.w	r2, [r3], #4
 8016780:	e7d9      	b.n	8016736 <__multiply+0x4e>
 8016782:	f8b1 a000 	ldrh.w	sl, [r1]
 8016786:	f1ba 0f00 	cmp.w	sl, #0
 801678a:	d01f      	beq.n	80167cc <__multiply+0xe4>
 801678c:	46c4      	mov	ip, r8
 801678e:	46a1      	mov	r9, r4
 8016790:	2700      	movs	r7, #0
 8016792:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016796:	f8d9 3000 	ldr.w	r3, [r9]
 801679a:	fa1f fb82 	uxth.w	fp, r2
 801679e:	b29b      	uxth	r3, r3
 80167a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80167a4:	443b      	add	r3, r7
 80167a6:	f8d9 7000 	ldr.w	r7, [r9]
 80167aa:	0c12      	lsrs	r2, r2, #16
 80167ac:	0c3f      	lsrs	r7, r7, #16
 80167ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80167b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167bc:	4565      	cmp	r5, ip
 80167be:	f849 3b04 	str.w	r3, [r9], #4
 80167c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80167c6:	d8e4      	bhi.n	8016792 <__multiply+0xaa>
 80167c8:	9b01      	ldr	r3, [sp, #4]
 80167ca:	50e7      	str	r7, [r4, r3]
 80167cc:	9b03      	ldr	r3, [sp, #12]
 80167ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80167d2:	3104      	adds	r1, #4
 80167d4:	f1b9 0f00 	cmp.w	r9, #0
 80167d8:	d020      	beq.n	801681c <__multiply+0x134>
 80167da:	6823      	ldr	r3, [r4, #0]
 80167dc:	4647      	mov	r7, r8
 80167de:	46a4      	mov	ip, r4
 80167e0:	f04f 0a00 	mov.w	sl, #0
 80167e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80167e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80167ec:	fb09 220b 	mla	r2, r9, fp, r2
 80167f0:	4452      	add	r2, sl
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80167f8:	f84c 3b04 	str.w	r3, [ip], #4
 80167fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8016800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016804:	f8bc 3000 	ldrh.w	r3, [ip]
 8016808:	fb09 330a 	mla	r3, r9, sl, r3
 801680c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016810:	42bd      	cmp	r5, r7
 8016812:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016816:	d8e5      	bhi.n	80167e4 <__multiply+0xfc>
 8016818:	9a01      	ldr	r2, [sp, #4]
 801681a:	50a3      	str	r3, [r4, r2]
 801681c:	3404      	adds	r4, #4
 801681e:	e79f      	b.n	8016760 <__multiply+0x78>
 8016820:	3e01      	subs	r6, #1
 8016822:	e7a1      	b.n	8016768 <__multiply+0x80>
 8016824:	08017c10 	.word	0x08017c10
 8016828:	08017c81 	.word	0x08017c81

0801682c <__pow5mult>:
 801682c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016830:	4615      	mov	r5, r2
 8016832:	f012 0203 	ands.w	r2, r2, #3
 8016836:	4607      	mov	r7, r0
 8016838:	460e      	mov	r6, r1
 801683a:	d007      	beq.n	801684c <__pow5mult+0x20>
 801683c:	4c25      	ldr	r4, [pc, #148]	@ (80168d4 <__pow5mult+0xa8>)
 801683e:	3a01      	subs	r2, #1
 8016840:	2300      	movs	r3, #0
 8016842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016846:	f7ff fe5d 	bl	8016504 <__multadd>
 801684a:	4606      	mov	r6, r0
 801684c:	10ad      	asrs	r5, r5, #2
 801684e:	d03d      	beq.n	80168cc <__pow5mult+0xa0>
 8016850:	69fc      	ldr	r4, [r7, #28]
 8016852:	b97c      	cbnz	r4, 8016874 <__pow5mult+0x48>
 8016854:	2010      	movs	r0, #16
 8016856:	f7ff fd2b 	bl	80162b0 <malloc>
 801685a:	4602      	mov	r2, r0
 801685c:	61f8      	str	r0, [r7, #28]
 801685e:	b928      	cbnz	r0, 801686c <__pow5mult+0x40>
 8016860:	4b1d      	ldr	r3, [pc, #116]	@ (80168d8 <__pow5mult+0xac>)
 8016862:	481e      	ldr	r0, [pc, #120]	@ (80168dc <__pow5mult+0xb0>)
 8016864:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016868:	f7fe fb28 	bl	8014ebc <__assert_func>
 801686c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016870:	6004      	str	r4, [r0, #0]
 8016872:	60c4      	str	r4, [r0, #12]
 8016874:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801687c:	b94c      	cbnz	r4, 8016892 <__pow5mult+0x66>
 801687e:	f240 2171 	movw	r1, #625	@ 0x271
 8016882:	4638      	mov	r0, r7
 8016884:	f7ff ff1a 	bl	80166bc <__i2b>
 8016888:	2300      	movs	r3, #0
 801688a:	f8c8 0008 	str.w	r0, [r8, #8]
 801688e:	4604      	mov	r4, r0
 8016890:	6003      	str	r3, [r0, #0]
 8016892:	f04f 0900 	mov.w	r9, #0
 8016896:	07eb      	lsls	r3, r5, #31
 8016898:	d50a      	bpl.n	80168b0 <__pow5mult+0x84>
 801689a:	4631      	mov	r1, r6
 801689c:	4622      	mov	r2, r4
 801689e:	4638      	mov	r0, r7
 80168a0:	f7ff ff22 	bl	80166e8 <__multiply>
 80168a4:	4631      	mov	r1, r6
 80168a6:	4680      	mov	r8, r0
 80168a8:	4638      	mov	r0, r7
 80168aa:	f7ff fe09 	bl	80164c0 <_Bfree>
 80168ae:	4646      	mov	r6, r8
 80168b0:	106d      	asrs	r5, r5, #1
 80168b2:	d00b      	beq.n	80168cc <__pow5mult+0xa0>
 80168b4:	6820      	ldr	r0, [r4, #0]
 80168b6:	b938      	cbnz	r0, 80168c8 <__pow5mult+0x9c>
 80168b8:	4622      	mov	r2, r4
 80168ba:	4621      	mov	r1, r4
 80168bc:	4638      	mov	r0, r7
 80168be:	f7ff ff13 	bl	80166e8 <__multiply>
 80168c2:	6020      	str	r0, [r4, #0]
 80168c4:	f8c0 9000 	str.w	r9, [r0]
 80168c8:	4604      	mov	r4, r0
 80168ca:	e7e4      	b.n	8016896 <__pow5mult+0x6a>
 80168cc:	4630      	mov	r0, r6
 80168ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168d2:	bf00      	nop
 80168d4:	08017e44 	.word	0x08017e44
 80168d8:	08017af6 	.word	0x08017af6
 80168dc:	08017c81 	.word	0x08017c81

080168e0 <__lshift>:
 80168e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e4:	460c      	mov	r4, r1
 80168e6:	6849      	ldr	r1, [r1, #4]
 80168e8:	6923      	ldr	r3, [r4, #16]
 80168ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80168ee:	68a3      	ldr	r3, [r4, #8]
 80168f0:	4607      	mov	r7, r0
 80168f2:	4691      	mov	r9, r2
 80168f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80168f8:	f108 0601 	add.w	r6, r8, #1
 80168fc:	42b3      	cmp	r3, r6
 80168fe:	db0b      	blt.n	8016918 <__lshift+0x38>
 8016900:	4638      	mov	r0, r7
 8016902:	f7ff fd9d 	bl	8016440 <_Balloc>
 8016906:	4605      	mov	r5, r0
 8016908:	b948      	cbnz	r0, 801691e <__lshift+0x3e>
 801690a:	4602      	mov	r2, r0
 801690c:	4b28      	ldr	r3, [pc, #160]	@ (80169b0 <__lshift+0xd0>)
 801690e:	4829      	ldr	r0, [pc, #164]	@ (80169b4 <__lshift+0xd4>)
 8016910:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016914:	f7fe fad2 	bl	8014ebc <__assert_func>
 8016918:	3101      	adds	r1, #1
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	e7ee      	b.n	80168fc <__lshift+0x1c>
 801691e:	2300      	movs	r3, #0
 8016920:	f100 0114 	add.w	r1, r0, #20
 8016924:	f100 0210 	add.w	r2, r0, #16
 8016928:	4618      	mov	r0, r3
 801692a:	4553      	cmp	r3, sl
 801692c:	db33      	blt.n	8016996 <__lshift+0xb6>
 801692e:	6920      	ldr	r0, [r4, #16]
 8016930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016934:	f104 0314 	add.w	r3, r4, #20
 8016938:	f019 091f 	ands.w	r9, r9, #31
 801693c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016944:	d02b      	beq.n	801699e <__lshift+0xbe>
 8016946:	f1c9 0e20 	rsb	lr, r9, #32
 801694a:	468a      	mov	sl, r1
 801694c:	2200      	movs	r2, #0
 801694e:	6818      	ldr	r0, [r3, #0]
 8016950:	fa00 f009 	lsl.w	r0, r0, r9
 8016954:	4310      	orrs	r0, r2
 8016956:	f84a 0b04 	str.w	r0, [sl], #4
 801695a:	f853 2b04 	ldr.w	r2, [r3], #4
 801695e:	459c      	cmp	ip, r3
 8016960:	fa22 f20e 	lsr.w	r2, r2, lr
 8016964:	d8f3      	bhi.n	801694e <__lshift+0x6e>
 8016966:	ebac 0304 	sub.w	r3, ip, r4
 801696a:	3b15      	subs	r3, #21
 801696c:	f023 0303 	bic.w	r3, r3, #3
 8016970:	3304      	adds	r3, #4
 8016972:	f104 0015 	add.w	r0, r4, #21
 8016976:	4560      	cmp	r0, ip
 8016978:	bf88      	it	hi
 801697a:	2304      	movhi	r3, #4
 801697c:	50ca      	str	r2, [r1, r3]
 801697e:	b10a      	cbz	r2, 8016984 <__lshift+0xa4>
 8016980:	f108 0602 	add.w	r6, r8, #2
 8016984:	3e01      	subs	r6, #1
 8016986:	4638      	mov	r0, r7
 8016988:	612e      	str	r6, [r5, #16]
 801698a:	4621      	mov	r1, r4
 801698c:	f7ff fd98 	bl	80164c0 <_Bfree>
 8016990:	4628      	mov	r0, r5
 8016992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016996:	f842 0f04 	str.w	r0, [r2, #4]!
 801699a:	3301      	adds	r3, #1
 801699c:	e7c5      	b.n	801692a <__lshift+0x4a>
 801699e:	3904      	subs	r1, #4
 80169a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80169a8:	459c      	cmp	ip, r3
 80169aa:	d8f9      	bhi.n	80169a0 <__lshift+0xc0>
 80169ac:	e7ea      	b.n	8016984 <__lshift+0xa4>
 80169ae:	bf00      	nop
 80169b0:	08017c10 	.word	0x08017c10
 80169b4:	08017c81 	.word	0x08017c81

080169b8 <__mcmp>:
 80169b8:	690a      	ldr	r2, [r1, #16]
 80169ba:	4603      	mov	r3, r0
 80169bc:	6900      	ldr	r0, [r0, #16]
 80169be:	1a80      	subs	r0, r0, r2
 80169c0:	b530      	push	{r4, r5, lr}
 80169c2:	d10e      	bne.n	80169e2 <__mcmp+0x2a>
 80169c4:	3314      	adds	r3, #20
 80169c6:	3114      	adds	r1, #20
 80169c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80169cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80169d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80169d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80169d8:	4295      	cmp	r5, r2
 80169da:	d003      	beq.n	80169e4 <__mcmp+0x2c>
 80169dc:	d205      	bcs.n	80169ea <__mcmp+0x32>
 80169de:	f04f 30ff 	mov.w	r0, #4294967295
 80169e2:	bd30      	pop	{r4, r5, pc}
 80169e4:	42a3      	cmp	r3, r4
 80169e6:	d3f3      	bcc.n	80169d0 <__mcmp+0x18>
 80169e8:	e7fb      	b.n	80169e2 <__mcmp+0x2a>
 80169ea:	2001      	movs	r0, #1
 80169ec:	e7f9      	b.n	80169e2 <__mcmp+0x2a>
	...

080169f0 <__mdiff>:
 80169f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f4:	4689      	mov	r9, r1
 80169f6:	4606      	mov	r6, r0
 80169f8:	4611      	mov	r1, r2
 80169fa:	4648      	mov	r0, r9
 80169fc:	4614      	mov	r4, r2
 80169fe:	f7ff ffdb 	bl	80169b8 <__mcmp>
 8016a02:	1e05      	subs	r5, r0, #0
 8016a04:	d112      	bne.n	8016a2c <__mdiff+0x3c>
 8016a06:	4629      	mov	r1, r5
 8016a08:	4630      	mov	r0, r6
 8016a0a:	f7ff fd19 	bl	8016440 <_Balloc>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	b928      	cbnz	r0, 8016a1e <__mdiff+0x2e>
 8016a12:	4b3f      	ldr	r3, [pc, #252]	@ (8016b10 <__mdiff+0x120>)
 8016a14:	f240 2137 	movw	r1, #567	@ 0x237
 8016a18:	483e      	ldr	r0, [pc, #248]	@ (8016b14 <__mdiff+0x124>)
 8016a1a:	f7fe fa4f 	bl	8014ebc <__assert_func>
 8016a1e:	2301      	movs	r3, #1
 8016a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a24:	4610      	mov	r0, r2
 8016a26:	b003      	add	sp, #12
 8016a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a2c:	bfbc      	itt	lt
 8016a2e:	464b      	movlt	r3, r9
 8016a30:	46a1      	movlt	r9, r4
 8016a32:	4630      	mov	r0, r6
 8016a34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016a38:	bfba      	itte	lt
 8016a3a:	461c      	movlt	r4, r3
 8016a3c:	2501      	movlt	r5, #1
 8016a3e:	2500      	movge	r5, #0
 8016a40:	f7ff fcfe 	bl	8016440 <_Balloc>
 8016a44:	4602      	mov	r2, r0
 8016a46:	b918      	cbnz	r0, 8016a50 <__mdiff+0x60>
 8016a48:	4b31      	ldr	r3, [pc, #196]	@ (8016b10 <__mdiff+0x120>)
 8016a4a:	f240 2145 	movw	r1, #581	@ 0x245
 8016a4e:	e7e3      	b.n	8016a18 <__mdiff+0x28>
 8016a50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016a54:	6926      	ldr	r6, [r4, #16]
 8016a56:	60c5      	str	r5, [r0, #12]
 8016a58:	f109 0310 	add.w	r3, r9, #16
 8016a5c:	f109 0514 	add.w	r5, r9, #20
 8016a60:	f104 0e14 	add.w	lr, r4, #20
 8016a64:	f100 0b14 	add.w	fp, r0, #20
 8016a68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016a6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016a70:	9301      	str	r3, [sp, #4]
 8016a72:	46d9      	mov	r9, fp
 8016a74:	f04f 0c00 	mov.w	ip, #0
 8016a78:	9b01      	ldr	r3, [sp, #4]
 8016a7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016a7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016a82:	9301      	str	r3, [sp, #4]
 8016a84:	fa1f f38a 	uxth.w	r3, sl
 8016a88:	4619      	mov	r1, r3
 8016a8a:	b283      	uxth	r3, r0
 8016a8c:	1acb      	subs	r3, r1, r3
 8016a8e:	0c00      	lsrs	r0, r0, #16
 8016a90:	4463      	add	r3, ip
 8016a92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016a96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016a9a:	b29b      	uxth	r3, r3
 8016a9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016aa0:	4576      	cmp	r6, lr
 8016aa2:	f849 3b04 	str.w	r3, [r9], #4
 8016aa6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016aaa:	d8e5      	bhi.n	8016a78 <__mdiff+0x88>
 8016aac:	1b33      	subs	r3, r6, r4
 8016aae:	3b15      	subs	r3, #21
 8016ab0:	f023 0303 	bic.w	r3, r3, #3
 8016ab4:	3415      	adds	r4, #21
 8016ab6:	3304      	adds	r3, #4
 8016ab8:	42a6      	cmp	r6, r4
 8016aba:	bf38      	it	cc
 8016abc:	2304      	movcc	r3, #4
 8016abe:	441d      	add	r5, r3
 8016ac0:	445b      	add	r3, fp
 8016ac2:	461e      	mov	r6, r3
 8016ac4:	462c      	mov	r4, r5
 8016ac6:	4544      	cmp	r4, r8
 8016ac8:	d30e      	bcc.n	8016ae8 <__mdiff+0xf8>
 8016aca:	f108 0103 	add.w	r1, r8, #3
 8016ace:	1b49      	subs	r1, r1, r5
 8016ad0:	f021 0103 	bic.w	r1, r1, #3
 8016ad4:	3d03      	subs	r5, #3
 8016ad6:	45a8      	cmp	r8, r5
 8016ad8:	bf38      	it	cc
 8016ada:	2100      	movcc	r1, #0
 8016adc:	440b      	add	r3, r1
 8016ade:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ae2:	b191      	cbz	r1, 8016b0a <__mdiff+0x11a>
 8016ae4:	6117      	str	r7, [r2, #16]
 8016ae6:	e79d      	b.n	8016a24 <__mdiff+0x34>
 8016ae8:	f854 1b04 	ldr.w	r1, [r4], #4
 8016aec:	46e6      	mov	lr, ip
 8016aee:	0c08      	lsrs	r0, r1, #16
 8016af0:	fa1c fc81 	uxtah	ip, ip, r1
 8016af4:	4471      	add	r1, lr
 8016af6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016afa:	b289      	uxth	r1, r1
 8016afc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016b00:	f846 1b04 	str.w	r1, [r6], #4
 8016b04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016b08:	e7dd      	b.n	8016ac6 <__mdiff+0xd6>
 8016b0a:	3f01      	subs	r7, #1
 8016b0c:	e7e7      	b.n	8016ade <__mdiff+0xee>
 8016b0e:	bf00      	nop
 8016b10:	08017c10 	.word	0x08017c10
 8016b14:	08017c81 	.word	0x08017c81

08016b18 <__ulp>:
 8016b18:	b082      	sub	sp, #8
 8016b1a:	ed8d 0b00 	vstr	d0, [sp]
 8016b1e:	9a01      	ldr	r2, [sp, #4]
 8016b20:	4b0f      	ldr	r3, [pc, #60]	@ (8016b60 <__ulp+0x48>)
 8016b22:	4013      	ands	r3, r2
 8016b24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	dc08      	bgt.n	8016b3e <__ulp+0x26>
 8016b2c:	425b      	negs	r3, r3
 8016b2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016b32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016b36:	da04      	bge.n	8016b42 <__ulp+0x2a>
 8016b38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016b3c:	4113      	asrs	r3, r2
 8016b3e:	2200      	movs	r2, #0
 8016b40:	e008      	b.n	8016b54 <__ulp+0x3c>
 8016b42:	f1a2 0314 	sub.w	r3, r2, #20
 8016b46:	2b1e      	cmp	r3, #30
 8016b48:	bfda      	itte	le
 8016b4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016b4e:	40da      	lsrle	r2, r3
 8016b50:	2201      	movgt	r2, #1
 8016b52:	2300      	movs	r3, #0
 8016b54:	4619      	mov	r1, r3
 8016b56:	4610      	mov	r0, r2
 8016b58:	ec41 0b10 	vmov	d0, r0, r1
 8016b5c:	b002      	add	sp, #8
 8016b5e:	4770      	bx	lr
 8016b60:	7ff00000 	.word	0x7ff00000

08016b64 <__b2d>:
 8016b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b68:	6906      	ldr	r6, [r0, #16]
 8016b6a:	f100 0814 	add.w	r8, r0, #20
 8016b6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016b72:	1f37      	subs	r7, r6, #4
 8016b74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016b78:	4610      	mov	r0, r2
 8016b7a:	f7ff fd53 	bl	8016624 <__hi0bits>
 8016b7e:	f1c0 0320 	rsb	r3, r0, #32
 8016b82:	280a      	cmp	r0, #10
 8016b84:	600b      	str	r3, [r1, #0]
 8016b86:	491b      	ldr	r1, [pc, #108]	@ (8016bf4 <__b2d+0x90>)
 8016b88:	dc15      	bgt.n	8016bb6 <__b2d+0x52>
 8016b8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8016b8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8016b92:	45b8      	cmp	r8, r7
 8016b94:	ea43 0501 	orr.w	r5, r3, r1
 8016b98:	bf34      	ite	cc
 8016b9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016b9e:	2300      	movcs	r3, #0
 8016ba0:	3015      	adds	r0, #21
 8016ba2:	fa02 f000 	lsl.w	r0, r2, r0
 8016ba6:	fa23 f30c 	lsr.w	r3, r3, ip
 8016baa:	4303      	orrs	r3, r0
 8016bac:	461c      	mov	r4, r3
 8016bae:	ec45 4b10 	vmov	d0, r4, r5
 8016bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bb6:	45b8      	cmp	r8, r7
 8016bb8:	bf3a      	itte	cc
 8016bba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016bbe:	f1a6 0708 	subcc.w	r7, r6, #8
 8016bc2:	2300      	movcs	r3, #0
 8016bc4:	380b      	subs	r0, #11
 8016bc6:	d012      	beq.n	8016bee <__b2d+0x8a>
 8016bc8:	f1c0 0120 	rsb	r1, r0, #32
 8016bcc:	fa23 f401 	lsr.w	r4, r3, r1
 8016bd0:	4082      	lsls	r2, r0
 8016bd2:	4322      	orrs	r2, r4
 8016bd4:	4547      	cmp	r7, r8
 8016bd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016bda:	bf8c      	ite	hi
 8016bdc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016be0:	2200      	movls	r2, #0
 8016be2:	4083      	lsls	r3, r0
 8016be4:	40ca      	lsrs	r2, r1
 8016be6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016bea:	4313      	orrs	r3, r2
 8016bec:	e7de      	b.n	8016bac <__b2d+0x48>
 8016bee:	ea42 0501 	orr.w	r5, r2, r1
 8016bf2:	e7db      	b.n	8016bac <__b2d+0x48>
 8016bf4:	3ff00000 	.word	0x3ff00000

08016bf8 <__d2b>:
 8016bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016bfc:	460f      	mov	r7, r1
 8016bfe:	2101      	movs	r1, #1
 8016c00:	ec59 8b10 	vmov	r8, r9, d0
 8016c04:	4616      	mov	r6, r2
 8016c06:	f7ff fc1b 	bl	8016440 <_Balloc>
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	b930      	cbnz	r0, 8016c1c <__d2b+0x24>
 8016c0e:	4602      	mov	r2, r0
 8016c10:	4b23      	ldr	r3, [pc, #140]	@ (8016ca0 <__d2b+0xa8>)
 8016c12:	4824      	ldr	r0, [pc, #144]	@ (8016ca4 <__d2b+0xac>)
 8016c14:	f240 310f 	movw	r1, #783	@ 0x30f
 8016c18:	f7fe f950 	bl	8014ebc <__assert_func>
 8016c1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c24:	b10d      	cbz	r5, 8016c2a <__d2b+0x32>
 8016c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016c2a:	9301      	str	r3, [sp, #4]
 8016c2c:	f1b8 0300 	subs.w	r3, r8, #0
 8016c30:	d023      	beq.n	8016c7a <__d2b+0x82>
 8016c32:	4668      	mov	r0, sp
 8016c34:	9300      	str	r3, [sp, #0]
 8016c36:	f7ff fd14 	bl	8016662 <__lo0bits>
 8016c3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016c3e:	b1d0      	cbz	r0, 8016c76 <__d2b+0x7e>
 8016c40:	f1c0 0320 	rsb	r3, r0, #32
 8016c44:	fa02 f303 	lsl.w	r3, r2, r3
 8016c48:	430b      	orrs	r3, r1
 8016c4a:	40c2      	lsrs	r2, r0
 8016c4c:	6163      	str	r3, [r4, #20]
 8016c4e:	9201      	str	r2, [sp, #4]
 8016c50:	9b01      	ldr	r3, [sp, #4]
 8016c52:	61a3      	str	r3, [r4, #24]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	bf0c      	ite	eq
 8016c58:	2201      	moveq	r2, #1
 8016c5a:	2202      	movne	r2, #2
 8016c5c:	6122      	str	r2, [r4, #16]
 8016c5e:	b1a5      	cbz	r5, 8016c8a <__d2b+0x92>
 8016c60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016c64:	4405      	add	r5, r0
 8016c66:	603d      	str	r5, [r7, #0]
 8016c68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016c6c:	6030      	str	r0, [r6, #0]
 8016c6e:	4620      	mov	r0, r4
 8016c70:	b003      	add	sp, #12
 8016c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c76:	6161      	str	r1, [r4, #20]
 8016c78:	e7ea      	b.n	8016c50 <__d2b+0x58>
 8016c7a:	a801      	add	r0, sp, #4
 8016c7c:	f7ff fcf1 	bl	8016662 <__lo0bits>
 8016c80:	9b01      	ldr	r3, [sp, #4]
 8016c82:	6163      	str	r3, [r4, #20]
 8016c84:	3020      	adds	r0, #32
 8016c86:	2201      	movs	r2, #1
 8016c88:	e7e8      	b.n	8016c5c <__d2b+0x64>
 8016c8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016c8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016c92:	6038      	str	r0, [r7, #0]
 8016c94:	6918      	ldr	r0, [r3, #16]
 8016c96:	f7ff fcc5 	bl	8016624 <__hi0bits>
 8016c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016c9e:	e7e5      	b.n	8016c6c <__d2b+0x74>
 8016ca0:	08017c10 	.word	0x08017c10
 8016ca4:	08017c81 	.word	0x08017c81

08016ca8 <__ratio>:
 8016ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cac:	b085      	sub	sp, #20
 8016cae:	e9cd 1000 	strd	r1, r0, [sp]
 8016cb2:	a902      	add	r1, sp, #8
 8016cb4:	f7ff ff56 	bl	8016b64 <__b2d>
 8016cb8:	9800      	ldr	r0, [sp, #0]
 8016cba:	a903      	add	r1, sp, #12
 8016cbc:	ec55 4b10 	vmov	r4, r5, d0
 8016cc0:	f7ff ff50 	bl	8016b64 <__b2d>
 8016cc4:	9b01      	ldr	r3, [sp, #4]
 8016cc6:	6919      	ldr	r1, [r3, #16]
 8016cc8:	9b00      	ldr	r3, [sp, #0]
 8016cca:	691b      	ldr	r3, [r3, #16]
 8016ccc:	1ac9      	subs	r1, r1, r3
 8016cce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016cd2:	1a9b      	subs	r3, r3, r2
 8016cd4:	ec5b ab10 	vmov	sl, fp, d0
 8016cd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	bfce      	itee	gt
 8016ce0:	462a      	movgt	r2, r5
 8016ce2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ce6:	465a      	movle	r2, fp
 8016ce8:	462f      	mov	r7, r5
 8016cea:	46d9      	mov	r9, fp
 8016cec:	bfcc      	ite	gt
 8016cee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016cf2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8016cf6:	464b      	mov	r3, r9
 8016cf8:	4652      	mov	r2, sl
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	4639      	mov	r1, r7
 8016cfe:	f7e9 fdc5 	bl	800088c <__aeabi_ddiv>
 8016d02:	ec41 0b10 	vmov	d0, r0, r1
 8016d06:	b005      	add	sp, #20
 8016d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d0c <__copybits>:
 8016d0c:	3901      	subs	r1, #1
 8016d0e:	b570      	push	{r4, r5, r6, lr}
 8016d10:	1149      	asrs	r1, r1, #5
 8016d12:	6914      	ldr	r4, [r2, #16]
 8016d14:	3101      	adds	r1, #1
 8016d16:	f102 0314 	add.w	r3, r2, #20
 8016d1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016d1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016d22:	1f05      	subs	r5, r0, #4
 8016d24:	42a3      	cmp	r3, r4
 8016d26:	d30c      	bcc.n	8016d42 <__copybits+0x36>
 8016d28:	1aa3      	subs	r3, r4, r2
 8016d2a:	3b11      	subs	r3, #17
 8016d2c:	f023 0303 	bic.w	r3, r3, #3
 8016d30:	3211      	adds	r2, #17
 8016d32:	42a2      	cmp	r2, r4
 8016d34:	bf88      	it	hi
 8016d36:	2300      	movhi	r3, #0
 8016d38:	4418      	add	r0, r3
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	4288      	cmp	r0, r1
 8016d3e:	d305      	bcc.n	8016d4c <__copybits+0x40>
 8016d40:	bd70      	pop	{r4, r5, r6, pc}
 8016d42:	f853 6b04 	ldr.w	r6, [r3], #4
 8016d46:	f845 6f04 	str.w	r6, [r5, #4]!
 8016d4a:	e7eb      	b.n	8016d24 <__copybits+0x18>
 8016d4c:	f840 3b04 	str.w	r3, [r0], #4
 8016d50:	e7f4      	b.n	8016d3c <__copybits+0x30>

08016d52 <__any_on>:
 8016d52:	f100 0214 	add.w	r2, r0, #20
 8016d56:	6900      	ldr	r0, [r0, #16]
 8016d58:	114b      	asrs	r3, r1, #5
 8016d5a:	4298      	cmp	r0, r3
 8016d5c:	b510      	push	{r4, lr}
 8016d5e:	db11      	blt.n	8016d84 <__any_on+0x32>
 8016d60:	dd0a      	ble.n	8016d78 <__any_on+0x26>
 8016d62:	f011 011f 	ands.w	r1, r1, #31
 8016d66:	d007      	beq.n	8016d78 <__any_on+0x26>
 8016d68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016d6c:	fa24 f001 	lsr.w	r0, r4, r1
 8016d70:	fa00 f101 	lsl.w	r1, r0, r1
 8016d74:	428c      	cmp	r4, r1
 8016d76:	d10b      	bne.n	8016d90 <__any_on+0x3e>
 8016d78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016d7c:	4293      	cmp	r3, r2
 8016d7e:	d803      	bhi.n	8016d88 <__any_on+0x36>
 8016d80:	2000      	movs	r0, #0
 8016d82:	bd10      	pop	{r4, pc}
 8016d84:	4603      	mov	r3, r0
 8016d86:	e7f7      	b.n	8016d78 <__any_on+0x26>
 8016d88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016d8c:	2900      	cmp	r1, #0
 8016d8e:	d0f5      	beq.n	8016d7c <__any_on+0x2a>
 8016d90:	2001      	movs	r0, #1
 8016d92:	e7f6      	b.n	8016d82 <__any_on+0x30>

08016d94 <__ascii_wctomb>:
 8016d94:	4603      	mov	r3, r0
 8016d96:	4608      	mov	r0, r1
 8016d98:	b141      	cbz	r1, 8016dac <__ascii_wctomb+0x18>
 8016d9a:	2aff      	cmp	r2, #255	@ 0xff
 8016d9c:	d904      	bls.n	8016da8 <__ascii_wctomb+0x14>
 8016d9e:	228a      	movs	r2, #138	@ 0x8a
 8016da0:	601a      	str	r2, [r3, #0]
 8016da2:	f04f 30ff 	mov.w	r0, #4294967295
 8016da6:	4770      	bx	lr
 8016da8:	700a      	strb	r2, [r1, #0]
 8016daa:	2001      	movs	r0, #1
 8016dac:	4770      	bx	lr

08016dae <__ssputs_r>:
 8016dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016db2:	688e      	ldr	r6, [r1, #8]
 8016db4:	461f      	mov	r7, r3
 8016db6:	42be      	cmp	r6, r7
 8016db8:	680b      	ldr	r3, [r1, #0]
 8016dba:	4682      	mov	sl, r0
 8016dbc:	460c      	mov	r4, r1
 8016dbe:	4690      	mov	r8, r2
 8016dc0:	d82d      	bhi.n	8016e1e <__ssputs_r+0x70>
 8016dc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016dc6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016dca:	d026      	beq.n	8016e1a <__ssputs_r+0x6c>
 8016dcc:	6965      	ldr	r5, [r4, #20]
 8016dce:	6909      	ldr	r1, [r1, #16]
 8016dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016dd4:	eba3 0901 	sub.w	r9, r3, r1
 8016dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ddc:	1c7b      	adds	r3, r7, #1
 8016dde:	444b      	add	r3, r9
 8016de0:	106d      	asrs	r5, r5, #1
 8016de2:	429d      	cmp	r5, r3
 8016de4:	bf38      	it	cc
 8016de6:	461d      	movcc	r5, r3
 8016de8:	0553      	lsls	r3, r2, #21
 8016dea:	d527      	bpl.n	8016e3c <__ssputs_r+0x8e>
 8016dec:	4629      	mov	r1, r5
 8016dee:	f7ff fa89 	bl	8016304 <_malloc_r>
 8016df2:	4606      	mov	r6, r0
 8016df4:	b360      	cbz	r0, 8016e50 <__ssputs_r+0xa2>
 8016df6:	6921      	ldr	r1, [r4, #16]
 8016df8:	464a      	mov	r2, r9
 8016dfa:	f7fe f840 	bl	8014e7e <memcpy>
 8016dfe:	89a3      	ldrh	r3, [r4, #12]
 8016e00:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e08:	81a3      	strh	r3, [r4, #12]
 8016e0a:	6126      	str	r6, [r4, #16]
 8016e0c:	6165      	str	r5, [r4, #20]
 8016e0e:	444e      	add	r6, r9
 8016e10:	eba5 0509 	sub.w	r5, r5, r9
 8016e14:	6026      	str	r6, [r4, #0]
 8016e16:	60a5      	str	r5, [r4, #8]
 8016e18:	463e      	mov	r6, r7
 8016e1a:	42be      	cmp	r6, r7
 8016e1c:	d900      	bls.n	8016e20 <__ssputs_r+0x72>
 8016e1e:	463e      	mov	r6, r7
 8016e20:	6820      	ldr	r0, [r4, #0]
 8016e22:	4632      	mov	r2, r6
 8016e24:	4641      	mov	r1, r8
 8016e26:	f000 fb7b 	bl	8017520 <memmove>
 8016e2a:	68a3      	ldr	r3, [r4, #8]
 8016e2c:	1b9b      	subs	r3, r3, r6
 8016e2e:	60a3      	str	r3, [r4, #8]
 8016e30:	6823      	ldr	r3, [r4, #0]
 8016e32:	4433      	add	r3, r6
 8016e34:	6023      	str	r3, [r4, #0]
 8016e36:	2000      	movs	r0, #0
 8016e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e3c:	462a      	mov	r2, r5
 8016e3e:	f000 fbd6 	bl	80175ee <_realloc_r>
 8016e42:	4606      	mov	r6, r0
 8016e44:	2800      	cmp	r0, #0
 8016e46:	d1e0      	bne.n	8016e0a <__ssputs_r+0x5c>
 8016e48:	6921      	ldr	r1, [r4, #16]
 8016e4a:	4650      	mov	r0, sl
 8016e4c:	f7fe feac 	bl	8015ba8 <_free_r>
 8016e50:	230c      	movs	r3, #12
 8016e52:	f8ca 3000 	str.w	r3, [sl]
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e5c:	81a3      	strh	r3, [r4, #12]
 8016e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016e62:	e7e9      	b.n	8016e38 <__ssputs_r+0x8a>

08016e64 <_svfiprintf_r>:
 8016e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e68:	4698      	mov	r8, r3
 8016e6a:	898b      	ldrh	r3, [r1, #12]
 8016e6c:	061b      	lsls	r3, r3, #24
 8016e6e:	b09d      	sub	sp, #116	@ 0x74
 8016e70:	4607      	mov	r7, r0
 8016e72:	460d      	mov	r5, r1
 8016e74:	4614      	mov	r4, r2
 8016e76:	d510      	bpl.n	8016e9a <_svfiprintf_r+0x36>
 8016e78:	690b      	ldr	r3, [r1, #16]
 8016e7a:	b973      	cbnz	r3, 8016e9a <_svfiprintf_r+0x36>
 8016e7c:	2140      	movs	r1, #64	@ 0x40
 8016e7e:	f7ff fa41 	bl	8016304 <_malloc_r>
 8016e82:	6028      	str	r0, [r5, #0]
 8016e84:	6128      	str	r0, [r5, #16]
 8016e86:	b930      	cbnz	r0, 8016e96 <_svfiprintf_r+0x32>
 8016e88:	230c      	movs	r3, #12
 8016e8a:	603b      	str	r3, [r7, #0]
 8016e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e90:	b01d      	add	sp, #116	@ 0x74
 8016e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e96:	2340      	movs	r3, #64	@ 0x40
 8016e98:	616b      	str	r3, [r5, #20]
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e9e:	2320      	movs	r3, #32
 8016ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ea8:	2330      	movs	r3, #48	@ 0x30
 8016eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017048 <_svfiprintf_r+0x1e4>
 8016eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016eb2:	f04f 0901 	mov.w	r9, #1
 8016eb6:	4623      	mov	r3, r4
 8016eb8:	469a      	mov	sl, r3
 8016eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ebe:	b10a      	cbz	r2, 8016ec4 <_svfiprintf_r+0x60>
 8016ec0:	2a25      	cmp	r2, #37	@ 0x25
 8016ec2:	d1f9      	bne.n	8016eb8 <_svfiprintf_r+0x54>
 8016ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8016ec8:	d00b      	beq.n	8016ee2 <_svfiprintf_r+0x7e>
 8016eca:	465b      	mov	r3, fp
 8016ecc:	4622      	mov	r2, r4
 8016ece:	4629      	mov	r1, r5
 8016ed0:	4638      	mov	r0, r7
 8016ed2:	f7ff ff6c 	bl	8016dae <__ssputs_r>
 8016ed6:	3001      	adds	r0, #1
 8016ed8:	f000 80a7 	beq.w	801702a <_svfiprintf_r+0x1c6>
 8016edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ede:	445a      	add	r2, fp
 8016ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	f000 809f 	beq.w	801702a <_svfiprintf_r+0x1c6>
 8016eec:	2300      	movs	r3, #0
 8016eee:	f04f 32ff 	mov.w	r2, #4294967295
 8016ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ef6:	f10a 0a01 	add.w	sl, sl, #1
 8016efa:	9304      	str	r3, [sp, #16]
 8016efc:	9307      	str	r3, [sp, #28]
 8016efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8016f04:	4654      	mov	r4, sl
 8016f06:	2205      	movs	r2, #5
 8016f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f0c:	484e      	ldr	r0, [pc, #312]	@ (8017048 <_svfiprintf_r+0x1e4>)
 8016f0e:	f7e9 f97f 	bl	8000210 <memchr>
 8016f12:	9a04      	ldr	r2, [sp, #16]
 8016f14:	b9d8      	cbnz	r0, 8016f4e <_svfiprintf_r+0xea>
 8016f16:	06d0      	lsls	r0, r2, #27
 8016f18:	bf44      	itt	mi
 8016f1a:	2320      	movmi	r3, #32
 8016f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f20:	0711      	lsls	r1, r2, #28
 8016f22:	bf44      	itt	mi
 8016f24:	232b      	movmi	r3, #43	@ 0x2b
 8016f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8016f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f30:	d015      	beq.n	8016f5e <_svfiprintf_r+0xfa>
 8016f32:	9a07      	ldr	r2, [sp, #28]
 8016f34:	4654      	mov	r4, sl
 8016f36:	2000      	movs	r0, #0
 8016f38:	f04f 0c0a 	mov.w	ip, #10
 8016f3c:	4621      	mov	r1, r4
 8016f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f42:	3b30      	subs	r3, #48	@ 0x30
 8016f44:	2b09      	cmp	r3, #9
 8016f46:	d94b      	bls.n	8016fe0 <_svfiprintf_r+0x17c>
 8016f48:	b1b0      	cbz	r0, 8016f78 <_svfiprintf_r+0x114>
 8016f4a:	9207      	str	r2, [sp, #28]
 8016f4c:	e014      	b.n	8016f78 <_svfiprintf_r+0x114>
 8016f4e:	eba0 0308 	sub.w	r3, r0, r8
 8016f52:	fa09 f303 	lsl.w	r3, r9, r3
 8016f56:	4313      	orrs	r3, r2
 8016f58:	9304      	str	r3, [sp, #16]
 8016f5a:	46a2      	mov	sl, r4
 8016f5c:	e7d2      	b.n	8016f04 <_svfiprintf_r+0xa0>
 8016f5e:	9b03      	ldr	r3, [sp, #12]
 8016f60:	1d19      	adds	r1, r3, #4
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	9103      	str	r1, [sp, #12]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	bfbb      	ittet	lt
 8016f6a:	425b      	neglt	r3, r3
 8016f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8016f70:	9307      	strge	r3, [sp, #28]
 8016f72:	9307      	strlt	r3, [sp, #28]
 8016f74:	bfb8      	it	lt
 8016f76:	9204      	strlt	r2, [sp, #16]
 8016f78:	7823      	ldrb	r3, [r4, #0]
 8016f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f7c:	d10a      	bne.n	8016f94 <_svfiprintf_r+0x130>
 8016f7e:	7863      	ldrb	r3, [r4, #1]
 8016f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f82:	d132      	bne.n	8016fea <_svfiprintf_r+0x186>
 8016f84:	9b03      	ldr	r3, [sp, #12]
 8016f86:	1d1a      	adds	r2, r3, #4
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	9203      	str	r2, [sp, #12]
 8016f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016f90:	3402      	adds	r4, #2
 8016f92:	9305      	str	r3, [sp, #20]
 8016f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017058 <_svfiprintf_r+0x1f4>
 8016f98:	7821      	ldrb	r1, [r4, #0]
 8016f9a:	2203      	movs	r2, #3
 8016f9c:	4650      	mov	r0, sl
 8016f9e:	f7e9 f937 	bl	8000210 <memchr>
 8016fa2:	b138      	cbz	r0, 8016fb4 <_svfiprintf_r+0x150>
 8016fa4:	9b04      	ldr	r3, [sp, #16]
 8016fa6:	eba0 000a 	sub.w	r0, r0, sl
 8016faa:	2240      	movs	r2, #64	@ 0x40
 8016fac:	4082      	lsls	r2, r0
 8016fae:	4313      	orrs	r3, r2
 8016fb0:	3401      	adds	r4, #1
 8016fb2:	9304      	str	r3, [sp, #16]
 8016fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fb8:	4824      	ldr	r0, [pc, #144]	@ (801704c <_svfiprintf_r+0x1e8>)
 8016fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016fbe:	2206      	movs	r2, #6
 8016fc0:	f7e9 f926 	bl	8000210 <memchr>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	d036      	beq.n	8017036 <_svfiprintf_r+0x1d2>
 8016fc8:	4b21      	ldr	r3, [pc, #132]	@ (8017050 <_svfiprintf_r+0x1ec>)
 8016fca:	bb1b      	cbnz	r3, 8017014 <_svfiprintf_r+0x1b0>
 8016fcc:	9b03      	ldr	r3, [sp, #12]
 8016fce:	3307      	adds	r3, #7
 8016fd0:	f023 0307 	bic.w	r3, r3, #7
 8016fd4:	3308      	adds	r3, #8
 8016fd6:	9303      	str	r3, [sp, #12]
 8016fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fda:	4433      	add	r3, r6
 8016fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fde:	e76a      	b.n	8016eb6 <_svfiprintf_r+0x52>
 8016fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	e7a8      	b.n	8016f3c <_svfiprintf_r+0xd8>
 8016fea:	2300      	movs	r3, #0
 8016fec:	3401      	adds	r4, #1
 8016fee:	9305      	str	r3, [sp, #20]
 8016ff0:	4619      	mov	r1, r3
 8016ff2:	f04f 0c0a 	mov.w	ip, #10
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ffc:	3a30      	subs	r2, #48	@ 0x30
 8016ffe:	2a09      	cmp	r2, #9
 8017000:	d903      	bls.n	801700a <_svfiprintf_r+0x1a6>
 8017002:	2b00      	cmp	r3, #0
 8017004:	d0c6      	beq.n	8016f94 <_svfiprintf_r+0x130>
 8017006:	9105      	str	r1, [sp, #20]
 8017008:	e7c4      	b.n	8016f94 <_svfiprintf_r+0x130>
 801700a:	fb0c 2101 	mla	r1, ip, r1, r2
 801700e:	4604      	mov	r4, r0
 8017010:	2301      	movs	r3, #1
 8017012:	e7f0      	b.n	8016ff6 <_svfiprintf_r+0x192>
 8017014:	ab03      	add	r3, sp, #12
 8017016:	9300      	str	r3, [sp, #0]
 8017018:	462a      	mov	r2, r5
 801701a:	4b0e      	ldr	r3, [pc, #56]	@ (8017054 <_svfiprintf_r+0x1f0>)
 801701c:	a904      	add	r1, sp, #16
 801701e:	4638      	mov	r0, r7
 8017020:	f7fc ffde 	bl	8013fe0 <_printf_float>
 8017024:	1c42      	adds	r2, r0, #1
 8017026:	4606      	mov	r6, r0
 8017028:	d1d6      	bne.n	8016fd8 <_svfiprintf_r+0x174>
 801702a:	89ab      	ldrh	r3, [r5, #12]
 801702c:	065b      	lsls	r3, r3, #25
 801702e:	f53f af2d 	bmi.w	8016e8c <_svfiprintf_r+0x28>
 8017032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017034:	e72c      	b.n	8016e90 <_svfiprintf_r+0x2c>
 8017036:	ab03      	add	r3, sp, #12
 8017038:	9300      	str	r3, [sp, #0]
 801703a:	462a      	mov	r2, r5
 801703c:	4b05      	ldr	r3, [pc, #20]	@ (8017054 <_svfiprintf_r+0x1f0>)
 801703e:	a904      	add	r1, sp, #16
 8017040:	4638      	mov	r0, r7
 8017042:	f7fd fa65 	bl	8014510 <_printf_i>
 8017046:	e7ed      	b.n	8017024 <_svfiprintf_r+0x1c0>
 8017048:	08017cda 	.word	0x08017cda
 801704c:	08017ce4 	.word	0x08017ce4
 8017050:	08013fe1 	.word	0x08013fe1
 8017054:	08016daf 	.word	0x08016daf
 8017058:	08017ce0 	.word	0x08017ce0

0801705c <__sfputc_r>:
 801705c:	6893      	ldr	r3, [r2, #8]
 801705e:	3b01      	subs	r3, #1
 8017060:	2b00      	cmp	r3, #0
 8017062:	b410      	push	{r4}
 8017064:	6093      	str	r3, [r2, #8]
 8017066:	da08      	bge.n	801707a <__sfputc_r+0x1e>
 8017068:	6994      	ldr	r4, [r2, #24]
 801706a:	42a3      	cmp	r3, r4
 801706c:	db01      	blt.n	8017072 <__sfputc_r+0x16>
 801706e:	290a      	cmp	r1, #10
 8017070:	d103      	bne.n	801707a <__sfputc_r+0x1e>
 8017072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017076:	f7fd bd14 	b.w	8014aa2 <__swbuf_r>
 801707a:	6813      	ldr	r3, [r2, #0]
 801707c:	1c58      	adds	r0, r3, #1
 801707e:	6010      	str	r0, [r2, #0]
 8017080:	7019      	strb	r1, [r3, #0]
 8017082:	4608      	mov	r0, r1
 8017084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017088:	4770      	bx	lr

0801708a <__sfputs_r>:
 801708a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801708c:	4606      	mov	r6, r0
 801708e:	460f      	mov	r7, r1
 8017090:	4614      	mov	r4, r2
 8017092:	18d5      	adds	r5, r2, r3
 8017094:	42ac      	cmp	r4, r5
 8017096:	d101      	bne.n	801709c <__sfputs_r+0x12>
 8017098:	2000      	movs	r0, #0
 801709a:	e007      	b.n	80170ac <__sfputs_r+0x22>
 801709c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170a0:	463a      	mov	r2, r7
 80170a2:	4630      	mov	r0, r6
 80170a4:	f7ff ffda 	bl	801705c <__sfputc_r>
 80170a8:	1c43      	adds	r3, r0, #1
 80170aa:	d1f3      	bne.n	8017094 <__sfputs_r+0xa>
 80170ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080170b0 <_vfiprintf_r>:
 80170b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170b4:	460d      	mov	r5, r1
 80170b6:	b09d      	sub	sp, #116	@ 0x74
 80170b8:	4614      	mov	r4, r2
 80170ba:	4698      	mov	r8, r3
 80170bc:	4606      	mov	r6, r0
 80170be:	b118      	cbz	r0, 80170c8 <_vfiprintf_r+0x18>
 80170c0:	6a03      	ldr	r3, [r0, #32]
 80170c2:	b90b      	cbnz	r3, 80170c8 <_vfiprintf_r+0x18>
 80170c4:	f7fd fbce 	bl	8014864 <__sinit>
 80170c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80170ca:	07d9      	lsls	r1, r3, #31
 80170cc:	d405      	bmi.n	80170da <_vfiprintf_r+0x2a>
 80170ce:	89ab      	ldrh	r3, [r5, #12]
 80170d0:	059a      	lsls	r2, r3, #22
 80170d2:	d402      	bmi.n	80170da <_vfiprintf_r+0x2a>
 80170d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80170d6:	f7fd fed0 	bl	8014e7a <__retarget_lock_acquire_recursive>
 80170da:	89ab      	ldrh	r3, [r5, #12]
 80170dc:	071b      	lsls	r3, r3, #28
 80170de:	d501      	bpl.n	80170e4 <_vfiprintf_r+0x34>
 80170e0:	692b      	ldr	r3, [r5, #16]
 80170e2:	b99b      	cbnz	r3, 801710c <_vfiprintf_r+0x5c>
 80170e4:	4629      	mov	r1, r5
 80170e6:	4630      	mov	r0, r6
 80170e8:	f7fd fd1a 	bl	8014b20 <__swsetup_r>
 80170ec:	b170      	cbz	r0, 801710c <_vfiprintf_r+0x5c>
 80170ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80170f0:	07dc      	lsls	r4, r3, #31
 80170f2:	d504      	bpl.n	80170fe <_vfiprintf_r+0x4e>
 80170f4:	f04f 30ff 	mov.w	r0, #4294967295
 80170f8:	b01d      	add	sp, #116	@ 0x74
 80170fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170fe:	89ab      	ldrh	r3, [r5, #12]
 8017100:	0598      	lsls	r0, r3, #22
 8017102:	d4f7      	bmi.n	80170f4 <_vfiprintf_r+0x44>
 8017104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017106:	f7fd feb9 	bl	8014e7c <__retarget_lock_release_recursive>
 801710a:	e7f3      	b.n	80170f4 <_vfiprintf_r+0x44>
 801710c:	2300      	movs	r3, #0
 801710e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017110:	2320      	movs	r3, #32
 8017112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017116:	f8cd 800c 	str.w	r8, [sp, #12]
 801711a:	2330      	movs	r3, #48	@ 0x30
 801711c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80172cc <_vfiprintf_r+0x21c>
 8017120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017124:	f04f 0901 	mov.w	r9, #1
 8017128:	4623      	mov	r3, r4
 801712a:	469a      	mov	sl, r3
 801712c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017130:	b10a      	cbz	r2, 8017136 <_vfiprintf_r+0x86>
 8017132:	2a25      	cmp	r2, #37	@ 0x25
 8017134:	d1f9      	bne.n	801712a <_vfiprintf_r+0x7a>
 8017136:	ebba 0b04 	subs.w	fp, sl, r4
 801713a:	d00b      	beq.n	8017154 <_vfiprintf_r+0xa4>
 801713c:	465b      	mov	r3, fp
 801713e:	4622      	mov	r2, r4
 8017140:	4629      	mov	r1, r5
 8017142:	4630      	mov	r0, r6
 8017144:	f7ff ffa1 	bl	801708a <__sfputs_r>
 8017148:	3001      	adds	r0, #1
 801714a:	f000 80a7 	beq.w	801729c <_vfiprintf_r+0x1ec>
 801714e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017150:	445a      	add	r2, fp
 8017152:	9209      	str	r2, [sp, #36]	@ 0x24
 8017154:	f89a 3000 	ldrb.w	r3, [sl]
 8017158:	2b00      	cmp	r3, #0
 801715a:	f000 809f 	beq.w	801729c <_vfiprintf_r+0x1ec>
 801715e:	2300      	movs	r3, #0
 8017160:	f04f 32ff 	mov.w	r2, #4294967295
 8017164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017168:	f10a 0a01 	add.w	sl, sl, #1
 801716c:	9304      	str	r3, [sp, #16]
 801716e:	9307      	str	r3, [sp, #28]
 8017170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017174:	931a      	str	r3, [sp, #104]	@ 0x68
 8017176:	4654      	mov	r4, sl
 8017178:	2205      	movs	r2, #5
 801717a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801717e:	4853      	ldr	r0, [pc, #332]	@ (80172cc <_vfiprintf_r+0x21c>)
 8017180:	f7e9 f846 	bl	8000210 <memchr>
 8017184:	9a04      	ldr	r2, [sp, #16]
 8017186:	b9d8      	cbnz	r0, 80171c0 <_vfiprintf_r+0x110>
 8017188:	06d1      	lsls	r1, r2, #27
 801718a:	bf44      	itt	mi
 801718c:	2320      	movmi	r3, #32
 801718e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017192:	0713      	lsls	r3, r2, #28
 8017194:	bf44      	itt	mi
 8017196:	232b      	movmi	r3, #43	@ 0x2b
 8017198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801719c:	f89a 3000 	ldrb.w	r3, [sl]
 80171a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80171a2:	d015      	beq.n	80171d0 <_vfiprintf_r+0x120>
 80171a4:	9a07      	ldr	r2, [sp, #28]
 80171a6:	4654      	mov	r4, sl
 80171a8:	2000      	movs	r0, #0
 80171aa:	f04f 0c0a 	mov.w	ip, #10
 80171ae:	4621      	mov	r1, r4
 80171b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171b4:	3b30      	subs	r3, #48	@ 0x30
 80171b6:	2b09      	cmp	r3, #9
 80171b8:	d94b      	bls.n	8017252 <_vfiprintf_r+0x1a2>
 80171ba:	b1b0      	cbz	r0, 80171ea <_vfiprintf_r+0x13a>
 80171bc:	9207      	str	r2, [sp, #28]
 80171be:	e014      	b.n	80171ea <_vfiprintf_r+0x13a>
 80171c0:	eba0 0308 	sub.w	r3, r0, r8
 80171c4:	fa09 f303 	lsl.w	r3, r9, r3
 80171c8:	4313      	orrs	r3, r2
 80171ca:	9304      	str	r3, [sp, #16]
 80171cc:	46a2      	mov	sl, r4
 80171ce:	e7d2      	b.n	8017176 <_vfiprintf_r+0xc6>
 80171d0:	9b03      	ldr	r3, [sp, #12]
 80171d2:	1d19      	adds	r1, r3, #4
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	9103      	str	r1, [sp, #12]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	bfbb      	ittet	lt
 80171dc:	425b      	neglt	r3, r3
 80171de:	f042 0202 	orrlt.w	r2, r2, #2
 80171e2:	9307      	strge	r3, [sp, #28]
 80171e4:	9307      	strlt	r3, [sp, #28]
 80171e6:	bfb8      	it	lt
 80171e8:	9204      	strlt	r2, [sp, #16]
 80171ea:	7823      	ldrb	r3, [r4, #0]
 80171ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80171ee:	d10a      	bne.n	8017206 <_vfiprintf_r+0x156>
 80171f0:	7863      	ldrb	r3, [r4, #1]
 80171f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80171f4:	d132      	bne.n	801725c <_vfiprintf_r+0x1ac>
 80171f6:	9b03      	ldr	r3, [sp, #12]
 80171f8:	1d1a      	adds	r2, r3, #4
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	9203      	str	r2, [sp, #12]
 80171fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017202:	3402      	adds	r4, #2
 8017204:	9305      	str	r3, [sp, #20]
 8017206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80172dc <_vfiprintf_r+0x22c>
 801720a:	7821      	ldrb	r1, [r4, #0]
 801720c:	2203      	movs	r2, #3
 801720e:	4650      	mov	r0, sl
 8017210:	f7e8 fffe 	bl	8000210 <memchr>
 8017214:	b138      	cbz	r0, 8017226 <_vfiprintf_r+0x176>
 8017216:	9b04      	ldr	r3, [sp, #16]
 8017218:	eba0 000a 	sub.w	r0, r0, sl
 801721c:	2240      	movs	r2, #64	@ 0x40
 801721e:	4082      	lsls	r2, r0
 8017220:	4313      	orrs	r3, r2
 8017222:	3401      	adds	r4, #1
 8017224:	9304      	str	r3, [sp, #16]
 8017226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801722a:	4829      	ldr	r0, [pc, #164]	@ (80172d0 <_vfiprintf_r+0x220>)
 801722c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017230:	2206      	movs	r2, #6
 8017232:	f7e8 ffed 	bl	8000210 <memchr>
 8017236:	2800      	cmp	r0, #0
 8017238:	d03f      	beq.n	80172ba <_vfiprintf_r+0x20a>
 801723a:	4b26      	ldr	r3, [pc, #152]	@ (80172d4 <_vfiprintf_r+0x224>)
 801723c:	bb1b      	cbnz	r3, 8017286 <_vfiprintf_r+0x1d6>
 801723e:	9b03      	ldr	r3, [sp, #12]
 8017240:	3307      	adds	r3, #7
 8017242:	f023 0307 	bic.w	r3, r3, #7
 8017246:	3308      	adds	r3, #8
 8017248:	9303      	str	r3, [sp, #12]
 801724a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801724c:	443b      	add	r3, r7
 801724e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017250:	e76a      	b.n	8017128 <_vfiprintf_r+0x78>
 8017252:	fb0c 3202 	mla	r2, ip, r2, r3
 8017256:	460c      	mov	r4, r1
 8017258:	2001      	movs	r0, #1
 801725a:	e7a8      	b.n	80171ae <_vfiprintf_r+0xfe>
 801725c:	2300      	movs	r3, #0
 801725e:	3401      	adds	r4, #1
 8017260:	9305      	str	r3, [sp, #20]
 8017262:	4619      	mov	r1, r3
 8017264:	f04f 0c0a 	mov.w	ip, #10
 8017268:	4620      	mov	r0, r4
 801726a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801726e:	3a30      	subs	r2, #48	@ 0x30
 8017270:	2a09      	cmp	r2, #9
 8017272:	d903      	bls.n	801727c <_vfiprintf_r+0x1cc>
 8017274:	2b00      	cmp	r3, #0
 8017276:	d0c6      	beq.n	8017206 <_vfiprintf_r+0x156>
 8017278:	9105      	str	r1, [sp, #20]
 801727a:	e7c4      	b.n	8017206 <_vfiprintf_r+0x156>
 801727c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017280:	4604      	mov	r4, r0
 8017282:	2301      	movs	r3, #1
 8017284:	e7f0      	b.n	8017268 <_vfiprintf_r+0x1b8>
 8017286:	ab03      	add	r3, sp, #12
 8017288:	9300      	str	r3, [sp, #0]
 801728a:	462a      	mov	r2, r5
 801728c:	4b12      	ldr	r3, [pc, #72]	@ (80172d8 <_vfiprintf_r+0x228>)
 801728e:	a904      	add	r1, sp, #16
 8017290:	4630      	mov	r0, r6
 8017292:	f7fc fea5 	bl	8013fe0 <_printf_float>
 8017296:	4607      	mov	r7, r0
 8017298:	1c78      	adds	r0, r7, #1
 801729a:	d1d6      	bne.n	801724a <_vfiprintf_r+0x19a>
 801729c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801729e:	07d9      	lsls	r1, r3, #31
 80172a0:	d405      	bmi.n	80172ae <_vfiprintf_r+0x1fe>
 80172a2:	89ab      	ldrh	r3, [r5, #12]
 80172a4:	059a      	lsls	r2, r3, #22
 80172a6:	d402      	bmi.n	80172ae <_vfiprintf_r+0x1fe>
 80172a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80172aa:	f7fd fde7 	bl	8014e7c <__retarget_lock_release_recursive>
 80172ae:	89ab      	ldrh	r3, [r5, #12]
 80172b0:	065b      	lsls	r3, r3, #25
 80172b2:	f53f af1f 	bmi.w	80170f4 <_vfiprintf_r+0x44>
 80172b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172b8:	e71e      	b.n	80170f8 <_vfiprintf_r+0x48>
 80172ba:	ab03      	add	r3, sp, #12
 80172bc:	9300      	str	r3, [sp, #0]
 80172be:	462a      	mov	r2, r5
 80172c0:	4b05      	ldr	r3, [pc, #20]	@ (80172d8 <_vfiprintf_r+0x228>)
 80172c2:	a904      	add	r1, sp, #16
 80172c4:	4630      	mov	r0, r6
 80172c6:	f7fd f923 	bl	8014510 <_printf_i>
 80172ca:	e7e4      	b.n	8017296 <_vfiprintf_r+0x1e6>
 80172cc:	08017cda 	.word	0x08017cda
 80172d0:	08017ce4 	.word	0x08017ce4
 80172d4:	08013fe1 	.word	0x08013fe1
 80172d8:	0801708b 	.word	0x0801708b
 80172dc:	08017ce0 	.word	0x08017ce0

080172e0 <__sflush_r>:
 80172e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80172e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172e8:	0716      	lsls	r6, r2, #28
 80172ea:	4605      	mov	r5, r0
 80172ec:	460c      	mov	r4, r1
 80172ee:	d454      	bmi.n	801739a <__sflush_r+0xba>
 80172f0:	684b      	ldr	r3, [r1, #4]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	dc02      	bgt.n	80172fc <__sflush_r+0x1c>
 80172f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	dd48      	ble.n	801738e <__sflush_r+0xae>
 80172fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80172fe:	2e00      	cmp	r6, #0
 8017300:	d045      	beq.n	801738e <__sflush_r+0xae>
 8017302:	2300      	movs	r3, #0
 8017304:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017308:	682f      	ldr	r7, [r5, #0]
 801730a:	6a21      	ldr	r1, [r4, #32]
 801730c:	602b      	str	r3, [r5, #0]
 801730e:	d030      	beq.n	8017372 <__sflush_r+0x92>
 8017310:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017312:	89a3      	ldrh	r3, [r4, #12]
 8017314:	0759      	lsls	r1, r3, #29
 8017316:	d505      	bpl.n	8017324 <__sflush_r+0x44>
 8017318:	6863      	ldr	r3, [r4, #4]
 801731a:	1ad2      	subs	r2, r2, r3
 801731c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801731e:	b10b      	cbz	r3, 8017324 <__sflush_r+0x44>
 8017320:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017322:	1ad2      	subs	r2, r2, r3
 8017324:	2300      	movs	r3, #0
 8017326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017328:	6a21      	ldr	r1, [r4, #32]
 801732a:	4628      	mov	r0, r5
 801732c:	47b0      	blx	r6
 801732e:	1c43      	adds	r3, r0, #1
 8017330:	89a3      	ldrh	r3, [r4, #12]
 8017332:	d106      	bne.n	8017342 <__sflush_r+0x62>
 8017334:	6829      	ldr	r1, [r5, #0]
 8017336:	291d      	cmp	r1, #29
 8017338:	d82b      	bhi.n	8017392 <__sflush_r+0xb2>
 801733a:	4a2a      	ldr	r2, [pc, #168]	@ (80173e4 <__sflush_r+0x104>)
 801733c:	40ca      	lsrs	r2, r1
 801733e:	07d6      	lsls	r6, r2, #31
 8017340:	d527      	bpl.n	8017392 <__sflush_r+0xb2>
 8017342:	2200      	movs	r2, #0
 8017344:	6062      	str	r2, [r4, #4]
 8017346:	04d9      	lsls	r1, r3, #19
 8017348:	6922      	ldr	r2, [r4, #16]
 801734a:	6022      	str	r2, [r4, #0]
 801734c:	d504      	bpl.n	8017358 <__sflush_r+0x78>
 801734e:	1c42      	adds	r2, r0, #1
 8017350:	d101      	bne.n	8017356 <__sflush_r+0x76>
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	b903      	cbnz	r3, 8017358 <__sflush_r+0x78>
 8017356:	6560      	str	r0, [r4, #84]	@ 0x54
 8017358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801735a:	602f      	str	r7, [r5, #0]
 801735c:	b1b9      	cbz	r1, 801738e <__sflush_r+0xae>
 801735e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017362:	4299      	cmp	r1, r3
 8017364:	d002      	beq.n	801736c <__sflush_r+0x8c>
 8017366:	4628      	mov	r0, r5
 8017368:	f7fe fc1e 	bl	8015ba8 <_free_r>
 801736c:	2300      	movs	r3, #0
 801736e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017370:	e00d      	b.n	801738e <__sflush_r+0xae>
 8017372:	2301      	movs	r3, #1
 8017374:	4628      	mov	r0, r5
 8017376:	47b0      	blx	r6
 8017378:	4602      	mov	r2, r0
 801737a:	1c50      	adds	r0, r2, #1
 801737c:	d1c9      	bne.n	8017312 <__sflush_r+0x32>
 801737e:	682b      	ldr	r3, [r5, #0]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d0c6      	beq.n	8017312 <__sflush_r+0x32>
 8017384:	2b1d      	cmp	r3, #29
 8017386:	d001      	beq.n	801738c <__sflush_r+0xac>
 8017388:	2b16      	cmp	r3, #22
 801738a:	d11e      	bne.n	80173ca <__sflush_r+0xea>
 801738c:	602f      	str	r7, [r5, #0]
 801738e:	2000      	movs	r0, #0
 8017390:	e022      	b.n	80173d8 <__sflush_r+0xf8>
 8017392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017396:	b21b      	sxth	r3, r3
 8017398:	e01b      	b.n	80173d2 <__sflush_r+0xf2>
 801739a:	690f      	ldr	r7, [r1, #16]
 801739c:	2f00      	cmp	r7, #0
 801739e:	d0f6      	beq.n	801738e <__sflush_r+0xae>
 80173a0:	0793      	lsls	r3, r2, #30
 80173a2:	680e      	ldr	r6, [r1, #0]
 80173a4:	bf08      	it	eq
 80173a6:	694b      	ldreq	r3, [r1, #20]
 80173a8:	600f      	str	r7, [r1, #0]
 80173aa:	bf18      	it	ne
 80173ac:	2300      	movne	r3, #0
 80173ae:	eba6 0807 	sub.w	r8, r6, r7
 80173b2:	608b      	str	r3, [r1, #8]
 80173b4:	f1b8 0f00 	cmp.w	r8, #0
 80173b8:	dde9      	ble.n	801738e <__sflush_r+0xae>
 80173ba:	6a21      	ldr	r1, [r4, #32]
 80173bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80173be:	4643      	mov	r3, r8
 80173c0:	463a      	mov	r2, r7
 80173c2:	4628      	mov	r0, r5
 80173c4:	47b0      	blx	r6
 80173c6:	2800      	cmp	r0, #0
 80173c8:	dc08      	bgt.n	80173dc <__sflush_r+0xfc>
 80173ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173d2:	81a3      	strh	r3, [r4, #12]
 80173d4:	f04f 30ff 	mov.w	r0, #4294967295
 80173d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173dc:	4407      	add	r7, r0
 80173de:	eba8 0800 	sub.w	r8, r8, r0
 80173e2:	e7e7      	b.n	80173b4 <__sflush_r+0xd4>
 80173e4:	20400001 	.word	0x20400001

080173e8 <_fflush_r>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	690b      	ldr	r3, [r1, #16]
 80173ec:	4605      	mov	r5, r0
 80173ee:	460c      	mov	r4, r1
 80173f0:	b913      	cbnz	r3, 80173f8 <_fflush_r+0x10>
 80173f2:	2500      	movs	r5, #0
 80173f4:	4628      	mov	r0, r5
 80173f6:	bd38      	pop	{r3, r4, r5, pc}
 80173f8:	b118      	cbz	r0, 8017402 <_fflush_r+0x1a>
 80173fa:	6a03      	ldr	r3, [r0, #32]
 80173fc:	b90b      	cbnz	r3, 8017402 <_fflush_r+0x1a>
 80173fe:	f7fd fa31 	bl	8014864 <__sinit>
 8017402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d0f3      	beq.n	80173f2 <_fflush_r+0xa>
 801740a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801740c:	07d0      	lsls	r0, r2, #31
 801740e:	d404      	bmi.n	801741a <_fflush_r+0x32>
 8017410:	0599      	lsls	r1, r3, #22
 8017412:	d402      	bmi.n	801741a <_fflush_r+0x32>
 8017414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017416:	f7fd fd30 	bl	8014e7a <__retarget_lock_acquire_recursive>
 801741a:	4628      	mov	r0, r5
 801741c:	4621      	mov	r1, r4
 801741e:	f7ff ff5f 	bl	80172e0 <__sflush_r>
 8017422:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017424:	07da      	lsls	r2, r3, #31
 8017426:	4605      	mov	r5, r0
 8017428:	d4e4      	bmi.n	80173f4 <_fflush_r+0xc>
 801742a:	89a3      	ldrh	r3, [r4, #12]
 801742c:	059b      	lsls	r3, r3, #22
 801742e:	d4e1      	bmi.n	80173f4 <_fflush_r+0xc>
 8017430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017432:	f7fd fd23 	bl	8014e7c <__retarget_lock_release_recursive>
 8017436:	e7dd      	b.n	80173f4 <_fflush_r+0xc>

08017438 <fiprintf>:
 8017438:	b40e      	push	{r1, r2, r3}
 801743a:	b503      	push	{r0, r1, lr}
 801743c:	4601      	mov	r1, r0
 801743e:	ab03      	add	r3, sp, #12
 8017440:	4805      	ldr	r0, [pc, #20]	@ (8017458 <fiprintf+0x20>)
 8017442:	f853 2b04 	ldr.w	r2, [r3], #4
 8017446:	6800      	ldr	r0, [r0, #0]
 8017448:	9301      	str	r3, [sp, #4]
 801744a:	f7ff fe31 	bl	80170b0 <_vfiprintf_r>
 801744e:	b002      	add	sp, #8
 8017450:	f85d eb04 	ldr.w	lr, [sp], #4
 8017454:	b003      	add	sp, #12
 8017456:	4770      	bx	lr
 8017458:	2000018c 	.word	0x2000018c

0801745c <__swhatbuf_r>:
 801745c:	b570      	push	{r4, r5, r6, lr}
 801745e:	460c      	mov	r4, r1
 8017460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017464:	2900      	cmp	r1, #0
 8017466:	b096      	sub	sp, #88	@ 0x58
 8017468:	4615      	mov	r5, r2
 801746a:	461e      	mov	r6, r3
 801746c:	da0d      	bge.n	801748a <__swhatbuf_r+0x2e>
 801746e:	89a3      	ldrh	r3, [r4, #12]
 8017470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017474:	f04f 0100 	mov.w	r1, #0
 8017478:	bf14      	ite	ne
 801747a:	2340      	movne	r3, #64	@ 0x40
 801747c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017480:	2000      	movs	r0, #0
 8017482:	6031      	str	r1, [r6, #0]
 8017484:	602b      	str	r3, [r5, #0]
 8017486:	b016      	add	sp, #88	@ 0x58
 8017488:	bd70      	pop	{r4, r5, r6, pc}
 801748a:	466a      	mov	r2, sp
 801748c:	f000 f862 	bl	8017554 <_fstat_r>
 8017490:	2800      	cmp	r0, #0
 8017492:	dbec      	blt.n	801746e <__swhatbuf_r+0x12>
 8017494:	9901      	ldr	r1, [sp, #4]
 8017496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801749a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801749e:	4259      	negs	r1, r3
 80174a0:	4159      	adcs	r1, r3
 80174a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80174a6:	e7eb      	b.n	8017480 <__swhatbuf_r+0x24>

080174a8 <__smakebuf_r>:
 80174a8:	898b      	ldrh	r3, [r1, #12]
 80174aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174ac:	079d      	lsls	r5, r3, #30
 80174ae:	4606      	mov	r6, r0
 80174b0:	460c      	mov	r4, r1
 80174b2:	d507      	bpl.n	80174c4 <__smakebuf_r+0x1c>
 80174b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80174b8:	6023      	str	r3, [r4, #0]
 80174ba:	6123      	str	r3, [r4, #16]
 80174bc:	2301      	movs	r3, #1
 80174be:	6163      	str	r3, [r4, #20]
 80174c0:	b003      	add	sp, #12
 80174c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c4:	ab01      	add	r3, sp, #4
 80174c6:	466a      	mov	r2, sp
 80174c8:	f7ff ffc8 	bl	801745c <__swhatbuf_r>
 80174cc:	9f00      	ldr	r7, [sp, #0]
 80174ce:	4605      	mov	r5, r0
 80174d0:	4639      	mov	r1, r7
 80174d2:	4630      	mov	r0, r6
 80174d4:	f7fe ff16 	bl	8016304 <_malloc_r>
 80174d8:	b948      	cbnz	r0, 80174ee <__smakebuf_r+0x46>
 80174da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174de:	059a      	lsls	r2, r3, #22
 80174e0:	d4ee      	bmi.n	80174c0 <__smakebuf_r+0x18>
 80174e2:	f023 0303 	bic.w	r3, r3, #3
 80174e6:	f043 0302 	orr.w	r3, r3, #2
 80174ea:	81a3      	strh	r3, [r4, #12]
 80174ec:	e7e2      	b.n	80174b4 <__smakebuf_r+0xc>
 80174ee:	89a3      	ldrh	r3, [r4, #12]
 80174f0:	6020      	str	r0, [r4, #0]
 80174f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174f6:	81a3      	strh	r3, [r4, #12]
 80174f8:	9b01      	ldr	r3, [sp, #4]
 80174fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80174fe:	b15b      	cbz	r3, 8017518 <__smakebuf_r+0x70>
 8017500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017504:	4630      	mov	r0, r6
 8017506:	f000 f837 	bl	8017578 <_isatty_r>
 801750a:	b128      	cbz	r0, 8017518 <__smakebuf_r+0x70>
 801750c:	89a3      	ldrh	r3, [r4, #12]
 801750e:	f023 0303 	bic.w	r3, r3, #3
 8017512:	f043 0301 	orr.w	r3, r3, #1
 8017516:	81a3      	strh	r3, [r4, #12]
 8017518:	89a3      	ldrh	r3, [r4, #12]
 801751a:	431d      	orrs	r5, r3
 801751c:	81a5      	strh	r5, [r4, #12]
 801751e:	e7cf      	b.n	80174c0 <__smakebuf_r+0x18>

08017520 <memmove>:
 8017520:	4288      	cmp	r0, r1
 8017522:	b510      	push	{r4, lr}
 8017524:	eb01 0402 	add.w	r4, r1, r2
 8017528:	d902      	bls.n	8017530 <memmove+0x10>
 801752a:	4284      	cmp	r4, r0
 801752c:	4623      	mov	r3, r4
 801752e:	d807      	bhi.n	8017540 <memmove+0x20>
 8017530:	1e43      	subs	r3, r0, #1
 8017532:	42a1      	cmp	r1, r4
 8017534:	d008      	beq.n	8017548 <memmove+0x28>
 8017536:	f811 2b01 	ldrb.w	r2, [r1], #1
 801753a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801753e:	e7f8      	b.n	8017532 <memmove+0x12>
 8017540:	4402      	add	r2, r0
 8017542:	4601      	mov	r1, r0
 8017544:	428a      	cmp	r2, r1
 8017546:	d100      	bne.n	801754a <memmove+0x2a>
 8017548:	bd10      	pop	{r4, pc}
 801754a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801754e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017552:	e7f7      	b.n	8017544 <memmove+0x24>

08017554 <_fstat_r>:
 8017554:	b538      	push	{r3, r4, r5, lr}
 8017556:	4d07      	ldr	r5, [pc, #28]	@ (8017574 <_fstat_r+0x20>)
 8017558:	2300      	movs	r3, #0
 801755a:	4604      	mov	r4, r0
 801755c:	4608      	mov	r0, r1
 801755e:	4611      	mov	r1, r2
 8017560:	602b      	str	r3, [r5, #0]
 8017562:	f7ed fc81 	bl	8004e68 <_fstat>
 8017566:	1c43      	adds	r3, r0, #1
 8017568:	d102      	bne.n	8017570 <_fstat_r+0x1c>
 801756a:	682b      	ldr	r3, [r5, #0]
 801756c:	b103      	cbz	r3, 8017570 <_fstat_r+0x1c>
 801756e:	6023      	str	r3, [r4, #0]
 8017570:	bd38      	pop	{r3, r4, r5, pc}
 8017572:	bf00      	nop
 8017574:	2000e524 	.word	0x2000e524

08017578 <_isatty_r>:
 8017578:	b538      	push	{r3, r4, r5, lr}
 801757a:	4d06      	ldr	r5, [pc, #24]	@ (8017594 <_isatty_r+0x1c>)
 801757c:	2300      	movs	r3, #0
 801757e:	4604      	mov	r4, r0
 8017580:	4608      	mov	r0, r1
 8017582:	602b      	str	r3, [r5, #0]
 8017584:	f7ed fc80 	bl	8004e88 <_isatty>
 8017588:	1c43      	adds	r3, r0, #1
 801758a:	d102      	bne.n	8017592 <_isatty_r+0x1a>
 801758c:	682b      	ldr	r3, [r5, #0]
 801758e:	b103      	cbz	r3, 8017592 <_isatty_r+0x1a>
 8017590:	6023      	str	r3, [r4, #0]
 8017592:	bd38      	pop	{r3, r4, r5, pc}
 8017594:	2000e524 	.word	0x2000e524

08017598 <_sbrk_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	4d06      	ldr	r5, [pc, #24]	@ (80175b4 <_sbrk_r+0x1c>)
 801759c:	2300      	movs	r3, #0
 801759e:	4604      	mov	r4, r0
 80175a0:	4608      	mov	r0, r1
 80175a2:	602b      	str	r3, [r5, #0]
 80175a4:	f7ed fc88 	bl	8004eb8 <_sbrk>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d102      	bne.n	80175b2 <_sbrk_r+0x1a>
 80175ac:	682b      	ldr	r3, [r5, #0]
 80175ae:	b103      	cbz	r3, 80175b2 <_sbrk_r+0x1a>
 80175b0:	6023      	str	r3, [r4, #0]
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	2000e524 	.word	0x2000e524

080175b8 <abort>:
 80175b8:	b508      	push	{r3, lr}
 80175ba:	2006      	movs	r0, #6
 80175bc:	f000 f86e 	bl	801769c <raise>
 80175c0:	2001      	movs	r0, #1
 80175c2:	f7ed fc01 	bl	8004dc8 <_exit>

080175c6 <_calloc_r>:
 80175c6:	b570      	push	{r4, r5, r6, lr}
 80175c8:	fba1 5402 	umull	r5, r4, r1, r2
 80175cc:	b934      	cbnz	r4, 80175dc <_calloc_r+0x16>
 80175ce:	4629      	mov	r1, r5
 80175d0:	f7fe fe98 	bl	8016304 <_malloc_r>
 80175d4:	4606      	mov	r6, r0
 80175d6:	b928      	cbnz	r0, 80175e4 <_calloc_r+0x1e>
 80175d8:	4630      	mov	r0, r6
 80175da:	bd70      	pop	{r4, r5, r6, pc}
 80175dc:	220c      	movs	r2, #12
 80175de:	6002      	str	r2, [r0, #0]
 80175e0:	2600      	movs	r6, #0
 80175e2:	e7f9      	b.n	80175d8 <_calloc_r+0x12>
 80175e4:	462a      	mov	r2, r5
 80175e6:	4621      	mov	r1, r4
 80175e8:	f7fd faf0 	bl	8014bcc <memset>
 80175ec:	e7f4      	b.n	80175d8 <_calloc_r+0x12>

080175ee <_realloc_r>:
 80175ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f2:	4607      	mov	r7, r0
 80175f4:	4614      	mov	r4, r2
 80175f6:	460d      	mov	r5, r1
 80175f8:	b921      	cbnz	r1, 8017604 <_realloc_r+0x16>
 80175fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175fe:	4611      	mov	r1, r2
 8017600:	f7fe be80 	b.w	8016304 <_malloc_r>
 8017604:	b92a      	cbnz	r2, 8017612 <_realloc_r+0x24>
 8017606:	f7fe facf 	bl	8015ba8 <_free_r>
 801760a:	4625      	mov	r5, r4
 801760c:	4628      	mov	r0, r5
 801760e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017612:	f000 f85f 	bl	80176d4 <_malloc_usable_size_r>
 8017616:	4284      	cmp	r4, r0
 8017618:	4606      	mov	r6, r0
 801761a:	d802      	bhi.n	8017622 <_realloc_r+0x34>
 801761c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017620:	d8f4      	bhi.n	801760c <_realloc_r+0x1e>
 8017622:	4621      	mov	r1, r4
 8017624:	4638      	mov	r0, r7
 8017626:	f7fe fe6d 	bl	8016304 <_malloc_r>
 801762a:	4680      	mov	r8, r0
 801762c:	b908      	cbnz	r0, 8017632 <_realloc_r+0x44>
 801762e:	4645      	mov	r5, r8
 8017630:	e7ec      	b.n	801760c <_realloc_r+0x1e>
 8017632:	42b4      	cmp	r4, r6
 8017634:	4622      	mov	r2, r4
 8017636:	4629      	mov	r1, r5
 8017638:	bf28      	it	cs
 801763a:	4632      	movcs	r2, r6
 801763c:	f7fd fc1f 	bl	8014e7e <memcpy>
 8017640:	4629      	mov	r1, r5
 8017642:	4638      	mov	r0, r7
 8017644:	f7fe fab0 	bl	8015ba8 <_free_r>
 8017648:	e7f1      	b.n	801762e <_realloc_r+0x40>

0801764a <_raise_r>:
 801764a:	291f      	cmp	r1, #31
 801764c:	b538      	push	{r3, r4, r5, lr}
 801764e:	4605      	mov	r5, r0
 8017650:	460c      	mov	r4, r1
 8017652:	d904      	bls.n	801765e <_raise_r+0x14>
 8017654:	2316      	movs	r3, #22
 8017656:	6003      	str	r3, [r0, #0]
 8017658:	f04f 30ff 	mov.w	r0, #4294967295
 801765c:	bd38      	pop	{r3, r4, r5, pc}
 801765e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017660:	b112      	cbz	r2, 8017668 <_raise_r+0x1e>
 8017662:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017666:	b94b      	cbnz	r3, 801767c <_raise_r+0x32>
 8017668:	4628      	mov	r0, r5
 801766a:	f000 f831 	bl	80176d0 <_getpid_r>
 801766e:	4622      	mov	r2, r4
 8017670:	4601      	mov	r1, r0
 8017672:	4628      	mov	r0, r5
 8017674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017678:	f000 b818 	b.w	80176ac <_kill_r>
 801767c:	2b01      	cmp	r3, #1
 801767e:	d00a      	beq.n	8017696 <_raise_r+0x4c>
 8017680:	1c59      	adds	r1, r3, #1
 8017682:	d103      	bne.n	801768c <_raise_r+0x42>
 8017684:	2316      	movs	r3, #22
 8017686:	6003      	str	r3, [r0, #0]
 8017688:	2001      	movs	r0, #1
 801768a:	e7e7      	b.n	801765c <_raise_r+0x12>
 801768c:	2100      	movs	r1, #0
 801768e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017692:	4620      	mov	r0, r4
 8017694:	4798      	blx	r3
 8017696:	2000      	movs	r0, #0
 8017698:	e7e0      	b.n	801765c <_raise_r+0x12>
	...

0801769c <raise>:
 801769c:	4b02      	ldr	r3, [pc, #8]	@ (80176a8 <raise+0xc>)
 801769e:	4601      	mov	r1, r0
 80176a0:	6818      	ldr	r0, [r3, #0]
 80176a2:	f7ff bfd2 	b.w	801764a <_raise_r>
 80176a6:	bf00      	nop
 80176a8:	2000018c 	.word	0x2000018c

080176ac <_kill_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4d07      	ldr	r5, [pc, #28]	@ (80176cc <_kill_r+0x20>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4604      	mov	r4, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	4611      	mov	r1, r2
 80176b8:	602b      	str	r3, [r5, #0]
 80176ba:	f7ed fb75 	bl	8004da8 <_kill>
 80176be:	1c43      	adds	r3, r0, #1
 80176c0:	d102      	bne.n	80176c8 <_kill_r+0x1c>
 80176c2:	682b      	ldr	r3, [r5, #0]
 80176c4:	b103      	cbz	r3, 80176c8 <_kill_r+0x1c>
 80176c6:	6023      	str	r3, [r4, #0]
 80176c8:	bd38      	pop	{r3, r4, r5, pc}
 80176ca:	bf00      	nop
 80176cc:	2000e524 	.word	0x2000e524

080176d0 <_getpid_r>:
 80176d0:	f7ed bb62 	b.w	8004d98 <_getpid>

080176d4 <_malloc_usable_size_r>:
 80176d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176d8:	1f18      	subs	r0, r3, #4
 80176da:	2b00      	cmp	r3, #0
 80176dc:	bfbc      	itt	lt
 80176de:	580b      	ldrlt	r3, [r1, r0]
 80176e0:	18c0      	addlt	r0, r0, r3
 80176e2:	4770      	bx	lr

080176e4 <_init>:
 80176e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176e6:	bf00      	nop
 80176e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176ea:	bc08      	pop	{r3}
 80176ec:	469e      	mov	lr, r3
 80176ee:	4770      	bx	lr

080176f0 <_fini>:
 80176f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f2:	bf00      	nop
 80176f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176f6:	bc08      	pop	{r3}
 80176f8:	469e      	mov	lr, r3
 80176fa:	4770      	bx	lr
